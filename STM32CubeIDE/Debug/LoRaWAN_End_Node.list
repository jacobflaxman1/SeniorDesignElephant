
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019e30  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001568  08019f70  08019f70  00029f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b4d8  0801b4d8  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801b4d8  0801b4d8  0002b4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b4e0  0801b4e0  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b4e0  0801b4e0  0002b4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801b4e8  0801b4e8  0002b4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000003e8  20000000  0801b4f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001a70  200003e8  200003e8  000403e8  2**2
                  ALLOC
 12 RAM1_region   00000000  20001e58  20001e58  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001e58  20001e58  000403e8  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .comment      00000043  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY
 17 .debug_info   00069561  00000000  00000000  0003e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000e8b1  00000000  00000000  000a7ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001dc85  00000000  00000000  000b6457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003748  00000000  00000000  000d40e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00002cde  00000000  00000000  000d7828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  000321ff  00000000  00000000  000da506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0006422d  00000000  00000000  0010c705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000ea0bc  00000000  00000000  00170932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000ae6c  00000000  00000000  0025a9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000084  00000000  00000000  0026585c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003e8 	.word	0x200003e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08019f58 	.word	0x08019f58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003ec 	.word	0x200003ec
 800017c:	08019f58 	.word	0x08019f58

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ea6:	2afd      	cmp	r2, #253	; 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	; 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	; 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	; 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__aeabi_f2iz>:
 80010f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010fc:	d30f      	bcc.n	800111e <__aeabi_f2iz+0x2a>
 80010fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001102:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001106:	d90d      	bls.n	8001124 <__aeabi_f2iz+0x30>
 8001108:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001110:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001114:	fa23 f002 	lsr.w	r0, r3, r2
 8001118:	bf18      	it	ne
 800111a:	4240      	negne	r0, r0
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2iz+0x3a>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d105      	bne.n	800113a <__aeabi_f2iz+0x46>
 800112e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001132:	bf08      	it	eq
 8001134:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr

08001140 <__aeabi_uldivmod>:
 8001140:	b953      	cbnz	r3, 8001158 <__aeabi_uldivmod+0x18>
 8001142:	b94a      	cbnz	r2, 8001158 <__aeabi_uldivmod+0x18>
 8001144:	2900      	cmp	r1, #0
 8001146:	bf08      	it	eq
 8001148:	2800      	cmpeq	r0, #0
 800114a:	bf1c      	itt	ne
 800114c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001150:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001154:	f000 b9a8 	b.w	80014a8 <__aeabi_idiv0>
 8001158:	f1ad 0c08 	sub.w	ip, sp, #8
 800115c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001160:	f000 f83e 	bl	80011e0 <__udivmoddi4>
 8001164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	4628      	mov	r0, r5
 8001178:	4621      	mov	r1, r4
 800117a:	2200      	movs	r2, #0
 800117c:	2300      	movs	r3, #0
 800117e:	f7ff fc85 	bl	8000a8c <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f9fb 	bl	80005a8 <__aeabi_dmul>
 80011b2:	f7ff fcd1 	bl	8000b58 <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f97c 	bl	80004b4 <__aeabi_ui2d>
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f7ff f9f2 	bl	80005a8 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7ff f834 	bl	8000238 <__aeabi_dsub>
 80011d0:	f7ff fcc2 	bl	8000b58 <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <__udivmoddi4>:
 80011e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011e4:	9e08      	ldr	r6, [sp, #32]
 80011e6:	460d      	mov	r5, r1
 80011e8:	4604      	mov	r4, r0
 80011ea:	460f      	mov	r7, r1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d14a      	bne.n	8001286 <__udivmoddi4+0xa6>
 80011f0:	428a      	cmp	r2, r1
 80011f2:	4694      	mov	ip, r2
 80011f4:	d965      	bls.n	80012c2 <__udivmoddi4+0xe2>
 80011f6:	fab2 f382 	clz	r3, r2
 80011fa:	b143      	cbz	r3, 800120e <__udivmoddi4+0x2e>
 80011fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8001200:	f1c3 0220 	rsb	r2, r3, #32
 8001204:	409f      	lsls	r7, r3
 8001206:	fa20 f202 	lsr.w	r2, r0, r2
 800120a:	4317      	orrs	r7, r2
 800120c:	409c      	lsls	r4, r3
 800120e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001212:	fa1f f58c 	uxth.w	r5, ip
 8001216:	fbb7 f1fe 	udiv	r1, r7, lr
 800121a:	0c22      	lsrs	r2, r4, #16
 800121c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001220:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001224:	fb01 f005 	mul.w	r0, r1, r5
 8001228:	4290      	cmp	r0, r2
 800122a:	d90a      	bls.n	8001242 <__udivmoddi4+0x62>
 800122c:	eb1c 0202 	adds.w	r2, ip, r2
 8001230:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001234:	f080 811b 	bcs.w	800146e <__udivmoddi4+0x28e>
 8001238:	4290      	cmp	r0, r2
 800123a:	f240 8118 	bls.w	800146e <__udivmoddi4+0x28e>
 800123e:	3902      	subs	r1, #2
 8001240:	4462      	add	r2, ip
 8001242:	1a12      	subs	r2, r2, r0
 8001244:	b2a4      	uxth	r4, r4
 8001246:	fbb2 f0fe 	udiv	r0, r2, lr
 800124a:	fb0e 2210 	mls	r2, lr, r0, r2
 800124e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001252:	fb00 f505 	mul.w	r5, r0, r5
 8001256:	42a5      	cmp	r5, r4
 8001258:	d90a      	bls.n	8001270 <__udivmoddi4+0x90>
 800125a:	eb1c 0404 	adds.w	r4, ip, r4
 800125e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001262:	f080 8106 	bcs.w	8001472 <__udivmoddi4+0x292>
 8001266:	42a5      	cmp	r5, r4
 8001268:	f240 8103 	bls.w	8001472 <__udivmoddi4+0x292>
 800126c:	4464      	add	r4, ip
 800126e:	3802      	subs	r0, #2
 8001270:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001274:	1b64      	subs	r4, r4, r5
 8001276:	2100      	movs	r1, #0
 8001278:	b11e      	cbz	r6, 8001282 <__udivmoddi4+0xa2>
 800127a:	40dc      	lsrs	r4, r3
 800127c:	2300      	movs	r3, #0
 800127e:	e9c6 4300 	strd	r4, r3, [r6]
 8001282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001286:	428b      	cmp	r3, r1
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0xbc>
 800128a:	2e00      	cmp	r6, #0
 800128c:	f000 80ec 	beq.w	8001468 <__udivmoddi4+0x288>
 8001290:	2100      	movs	r1, #0
 8001292:	e9c6 0500 	strd	r0, r5, [r6]
 8001296:	4608      	mov	r0, r1
 8001298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129c:	fab3 f183 	clz	r1, r3
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d149      	bne.n	8001338 <__udivmoddi4+0x158>
 80012a4:	42ab      	cmp	r3, r5
 80012a6:	d302      	bcc.n	80012ae <__udivmoddi4+0xce>
 80012a8:	4282      	cmp	r2, r0
 80012aa:	f200 80f7 	bhi.w	800149c <__udivmoddi4+0x2bc>
 80012ae:	1a84      	subs	r4, r0, r2
 80012b0:	eb65 0203 	sbc.w	r2, r5, r3
 80012b4:	2001      	movs	r0, #1
 80012b6:	4617      	mov	r7, r2
 80012b8:	2e00      	cmp	r6, #0
 80012ba:	d0e2      	beq.n	8001282 <__udivmoddi4+0xa2>
 80012bc:	e9c6 4700 	strd	r4, r7, [r6]
 80012c0:	e7df      	b.n	8001282 <__udivmoddi4+0xa2>
 80012c2:	b902      	cbnz	r2, 80012c6 <__udivmoddi4+0xe6>
 80012c4:	deff      	udf	#255	; 0xff
 80012c6:	fab2 f382 	clz	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f040 808f 	bne.w	80013ee <__udivmoddi4+0x20e>
 80012d0:	1a8a      	subs	r2, r1, r2
 80012d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012d6:	fa1f fe8c 	uxth.w	lr, ip
 80012da:	2101      	movs	r1, #1
 80012dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80012e0:	fb07 2015 	mls	r0, r7, r5, r2
 80012e4:	0c22      	lsrs	r2, r4, #16
 80012e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80012ea:	fb0e f005 	mul.w	r0, lr, r5
 80012ee:	4290      	cmp	r0, r2
 80012f0:	d908      	bls.n	8001304 <__udivmoddi4+0x124>
 80012f2:	eb1c 0202 	adds.w	r2, ip, r2
 80012f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80012fa:	d202      	bcs.n	8001302 <__udivmoddi4+0x122>
 80012fc:	4290      	cmp	r0, r2
 80012fe:	f200 80ca 	bhi.w	8001496 <__udivmoddi4+0x2b6>
 8001302:	4645      	mov	r5, r8
 8001304:	1a12      	subs	r2, r2, r0
 8001306:	b2a4      	uxth	r4, r4
 8001308:	fbb2 f0f7 	udiv	r0, r2, r7
 800130c:	fb07 2210 	mls	r2, r7, r0, r2
 8001310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001314:	fb0e fe00 	mul.w	lr, lr, r0
 8001318:	45a6      	cmp	lr, r4
 800131a:	d908      	bls.n	800132e <__udivmoddi4+0x14e>
 800131c:	eb1c 0404 	adds.w	r4, ip, r4
 8001320:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001324:	d202      	bcs.n	800132c <__udivmoddi4+0x14c>
 8001326:	45a6      	cmp	lr, r4
 8001328:	f200 80ba 	bhi.w	80014a0 <__udivmoddi4+0x2c0>
 800132c:	4610      	mov	r0, r2
 800132e:	eba4 040e 	sub.w	r4, r4, lr
 8001332:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001336:	e79f      	b.n	8001278 <__udivmoddi4+0x98>
 8001338:	f1c1 0720 	rsb	r7, r1, #32
 800133c:	408b      	lsls	r3, r1
 800133e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001342:	ea4c 0c03 	orr.w	ip, ip, r3
 8001346:	fa05 f401 	lsl.w	r4, r5, r1
 800134a:	fa20 f307 	lsr.w	r3, r0, r7
 800134e:	40fd      	lsrs	r5, r7
 8001350:	4323      	orrs	r3, r4
 8001352:	fa00 f901 	lsl.w	r9, r0, r1
 8001356:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800135a:	fa1f fe8c 	uxth.w	lr, ip
 800135e:	fbb5 f8f0 	udiv	r8, r5, r0
 8001362:	0c1c      	lsrs	r4, r3, #16
 8001364:	fb00 5518 	mls	r5, r0, r8, r5
 8001368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136c:	fb08 f50e 	mul.w	r5, r8, lr
 8001370:	42a5      	cmp	r5, r4
 8001372:	fa02 f201 	lsl.w	r2, r2, r1
 8001376:	d90b      	bls.n	8001390 <__udivmoddi4+0x1b0>
 8001378:	eb1c 0404 	adds.w	r4, ip, r4
 800137c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001380:	f080 8087 	bcs.w	8001492 <__udivmoddi4+0x2b2>
 8001384:	42a5      	cmp	r5, r4
 8001386:	f240 8084 	bls.w	8001492 <__udivmoddi4+0x2b2>
 800138a:	f1a8 0802 	sub.w	r8, r8, #2
 800138e:	4464      	add	r4, ip
 8001390:	1b64      	subs	r4, r4, r5
 8001392:	b29d      	uxth	r5, r3
 8001394:	fbb4 f3f0 	udiv	r3, r4, r0
 8001398:	fb00 4413 	mls	r4, r0, r3, r4
 800139c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80013a4:	45a6      	cmp	lr, r4
 80013a6:	d908      	bls.n	80013ba <__udivmoddi4+0x1da>
 80013a8:	eb1c 0404 	adds.w	r4, ip, r4
 80013ac:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80013b0:	d26b      	bcs.n	800148a <__udivmoddi4+0x2aa>
 80013b2:	45a6      	cmp	lr, r4
 80013b4:	d969      	bls.n	800148a <__udivmoddi4+0x2aa>
 80013b6:	3b02      	subs	r3, #2
 80013b8:	4464      	add	r4, ip
 80013ba:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013be:	fba0 8302 	umull	r8, r3, r0, r2
 80013c2:	eba4 040e 	sub.w	r4, r4, lr
 80013c6:	429c      	cmp	r4, r3
 80013c8:	46c6      	mov	lr, r8
 80013ca:	461d      	mov	r5, r3
 80013cc:	d355      	bcc.n	800147a <__udivmoddi4+0x29a>
 80013ce:	d052      	beq.n	8001476 <__udivmoddi4+0x296>
 80013d0:	b156      	cbz	r6, 80013e8 <__udivmoddi4+0x208>
 80013d2:	ebb9 030e 	subs.w	r3, r9, lr
 80013d6:	eb64 0405 	sbc.w	r4, r4, r5
 80013da:	fa04 f707 	lsl.w	r7, r4, r7
 80013de:	40cb      	lsrs	r3, r1
 80013e0:	40cc      	lsrs	r4, r1
 80013e2:	431f      	orrs	r7, r3
 80013e4:	e9c6 7400 	strd	r7, r4, [r6]
 80013e8:	2100      	movs	r1, #0
 80013ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ee:	f1c3 0120 	rsb	r1, r3, #32
 80013f2:	fa02 fc03 	lsl.w	ip, r2, r3
 80013f6:	fa20 f201 	lsr.w	r2, r0, r1
 80013fa:	fa25 f101 	lsr.w	r1, r5, r1
 80013fe:	409d      	lsls	r5, r3
 8001400:	432a      	orrs	r2, r5
 8001402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001406:	fa1f fe8c 	uxth.w	lr, ip
 800140a:	fbb1 f0f7 	udiv	r0, r1, r7
 800140e:	fb07 1510 	mls	r5, r7, r0, r1
 8001412:	0c11      	lsrs	r1, r2, #16
 8001414:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001418:	fb00 f50e 	mul.w	r5, r0, lr
 800141c:	428d      	cmp	r5, r1
 800141e:	fa04 f403 	lsl.w	r4, r4, r3
 8001422:	d908      	bls.n	8001436 <__udivmoddi4+0x256>
 8001424:	eb1c 0101 	adds.w	r1, ip, r1
 8001428:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800142c:	d22f      	bcs.n	800148e <__udivmoddi4+0x2ae>
 800142e:	428d      	cmp	r5, r1
 8001430:	d92d      	bls.n	800148e <__udivmoddi4+0x2ae>
 8001432:	3802      	subs	r0, #2
 8001434:	4461      	add	r1, ip
 8001436:	1b49      	subs	r1, r1, r5
 8001438:	b292      	uxth	r2, r2
 800143a:	fbb1 f5f7 	udiv	r5, r1, r7
 800143e:	fb07 1115 	mls	r1, r7, r5, r1
 8001442:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001446:	fb05 f10e 	mul.w	r1, r5, lr
 800144a:	4291      	cmp	r1, r2
 800144c:	d908      	bls.n	8001460 <__udivmoddi4+0x280>
 800144e:	eb1c 0202 	adds.w	r2, ip, r2
 8001452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001456:	d216      	bcs.n	8001486 <__udivmoddi4+0x2a6>
 8001458:	4291      	cmp	r1, r2
 800145a:	d914      	bls.n	8001486 <__udivmoddi4+0x2a6>
 800145c:	3d02      	subs	r5, #2
 800145e:	4462      	add	r2, ip
 8001460:	1a52      	subs	r2, r2, r1
 8001462:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001466:	e739      	b.n	80012dc <__udivmoddi4+0xfc>
 8001468:	4631      	mov	r1, r6
 800146a:	4630      	mov	r0, r6
 800146c:	e709      	b.n	8001282 <__udivmoddi4+0xa2>
 800146e:	4639      	mov	r1, r7
 8001470:	e6e7      	b.n	8001242 <__udivmoddi4+0x62>
 8001472:	4610      	mov	r0, r2
 8001474:	e6fc      	b.n	8001270 <__udivmoddi4+0x90>
 8001476:	45c1      	cmp	r9, r8
 8001478:	d2aa      	bcs.n	80013d0 <__udivmoddi4+0x1f0>
 800147a:	ebb8 0e02 	subs.w	lr, r8, r2
 800147e:	eb63 050c 	sbc.w	r5, r3, ip
 8001482:	3801      	subs	r0, #1
 8001484:	e7a4      	b.n	80013d0 <__udivmoddi4+0x1f0>
 8001486:	4645      	mov	r5, r8
 8001488:	e7ea      	b.n	8001460 <__udivmoddi4+0x280>
 800148a:	4603      	mov	r3, r0
 800148c:	e795      	b.n	80013ba <__udivmoddi4+0x1da>
 800148e:	4640      	mov	r0, r8
 8001490:	e7d1      	b.n	8001436 <__udivmoddi4+0x256>
 8001492:	46d0      	mov	r8, sl
 8001494:	e77c      	b.n	8001390 <__udivmoddi4+0x1b0>
 8001496:	3d02      	subs	r5, #2
 8001498:	4462      	add	r2, ip
 800149a:	e733      	b.n	8001304 <__udivmoddi4+0x124>
 800149c:	4608      	mov	r0, r1
 800149e:	e70b      	b.n	80012b8 <__udivmoddi4+0xd8>
 80014a0:	4464      	add	r4, ip
 80014a2:	3802      	subs	r0, #2
 80014a4:	e743      	b.n	800132e <__udivmoddi4+0x14e>
 80014a6:	bf00      	nop

080014a8 <__aeabi_idiv0>:
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop

080014ac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80014ac:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80014ae:	4813      	ldr	r0, [pc, #76]	; (80014fc <MX_ADC_Init+0x50>)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_ADC_Init+0x54>)
 80014b2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80014b8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014ba:	2300      	movs	r3, #0
 80014bc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014be:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c2:	2204      	movs	r2, #4
 80014c4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80014c6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014c8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014ca:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 80014cc:	2201      	movs	r2, #1
 80014ce:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014d0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014d8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80014e2:	2207      	movs	r2, #7
 80014e4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80014e6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80014e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014ec:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014ee:	f002 fd71 	bl	8003fd4 <HAL_ADC_Init>
 80014f2:	b900      	cbnz	r0, 80014f6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80014f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80014f6:	f000 fc8d 	bl	8001e14 <Error_Handler>
}
 80014fa:	e7fb      	b.n	80014f4 <MX_ADC_Init+0x48>
 80014fc:	20000404 	.word	0x20000404
 8001500:	40012400 	.word	0x40012400

08001504 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_ADC_MspInit+0x28>)
 8001508:	429a      	cmp	r2, r3
 800150a:	d000      	beq.n	800150e <HAL_ADC_MspInit+0xa>
 800150c:	4770      	bx	lr
{
 800150e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800151a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800151c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001522:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001524:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001526:	b002      	add	sp, #8
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40012400 	.word	0x40012400

08001530 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_ADC_MspDeInit+0x18>)
 8001534:	429a      	cmp	r2, r3
 8001536:	d000      	beq.n	800153a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001538:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800153a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001544:	6613      	str	r3, [r2, #96]	; 0x60
 8001546:	e7f7      	b.n	8001538 <HAL_ADC_MspDeInit+0x8>
 8001548:	40012400 	.word	0x40012400

0800154c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800154c:	b530      	push	{r4, r5, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001552:	2300      	movs	r3, #0
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800155a:	f7ff ffa7 	bl	80014ac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <ADC_ReadChannels+0x6c>)
 8001560:	f003 f970 	bl	8004844 <HAL_ADCEx_Calibration_Start>
 8001564:	b9f8      	cbnz	r0, 80015a6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001566:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001568:	2300      	movs	r3, #0
 800156a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800156c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800156e:	a901      	add	r1, sp, #4
 8001570:	4811      	ldr	r0, [pc, #68]	; (80015b8 <ADC_ReadChannels+0x6c>)
 8001572:	f002 fea9 	bl	80042c8 <HAL_ADC_ConfigChannel>
 8001576:	b9c8      	cbnz	r0, 80015ac <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001578:	480f      	ldr	r0, [pc, #60]	; (80015b8 <ADC_ReadChannels+0x6c>)
 800157a:	f003 f867 	bl	800464c <HAL_ADC_Start>
 800157e:	b9c0      	cbnz	r0, 80015b2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001580:	4c0d      	ldr	r4, [pc, #52]	; (80015b8 <ADC_ReadChannels+0x6c>)
 8001582:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001586:	4620      	mov	r0, r4
 8001588:	f002 fe3c 	bl	8004204 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800158c:	4620      	mov	r0, r4
 800158e:	f003 f939 	bl	8004804 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001592:	4620      	mov	r0, r4
 8001594:	f002 fe95 	bl	80042c2 <HAL_ADC_GetValue>
 8001598:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800159a:	4620      	mov	r0, r4
 800159c:	f003 f8d2 	bl	8004744 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80015a0:	4628      	mov	r0, r5
 80015a2:	b005      	add	sp, #20
 80015a4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80015a6:	f000 fc35 	bl	8001e14 <Error_Handler>
 80015aa:	e7dc      	b.n	8001566 <ADC_ReadChannels+0x1a>
    Error_Handler();
 80015ac:	f000 fc32 	bl	8001e14 <Error_Handler>
 80015b0:	e7e2      	b.n	8001578 <ADC_ReadChannels+0x2c>
    Error_Handler();
 80015b2:	f000 fc2f 	bl	8001e14 <Error_Handler>
 80015b6:	e7e3      	b.n	8001580 <ADC_ReadChannels+0x34>
 80015b8:	20000404 	.word	0x20000404

080015bc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <SYS_InitMeasurement+0x8>)
 80015be:	4a02      	ldr	r2, [pc, #8]	; (80015c8 <SYS_InitMeasurement+0xc>)
 80015c0:	601a      	str	r2, [r3, #0]
}
 80015c2:	4770      	bx	lr
 80015c4:	20000404 	.word	0x20000404
 80015c8:	40012400 	.word	0x40012400

080015cc <SYS_GetBatteryLevel>:
{
 80015cc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <SYS_GetBatteryLevel+0x38>)
 80015d0:	f7ff ffbc 	bl	800154c <ADC_ReadChannels>
  if (measuredLevel == 0)
 80015d4:	b1a0      	cbz	r0, 8001600 <SYS_GetBatteryLevel+0x34>
 80015d6:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <SYS_GetBatteryLevel+0x3c>)
 80015da:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 80015de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e2:	4290      	cmp	r0, r2
 80015e4:	d007      	beq.n	80015f6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015e6:	f640 42e4 	movw	r2, #3300	; 0xce4
 80015ea:	fb02 f000 	mul.w	r0, r2, r0
 80015ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80015f2:	b280      	uxth	r0, r0
 80015f4:	e005      	b.n	8001602 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <SYS_GetBatteryLevel+0x40>)
 80015f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80015fc:	b280      	uxth	r0, r0
 80015fe:	e000      	b.n	8001602 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001600:	2000      	movs	r0, #0
}
 8001602:	bd08      	pop	{r3, pc}
 8001604:	b4002000 	.word	0xb4002000
 8001608:	1fff7500 	.word	0x1fff7500
 800160c:	004c08d8 	.word	0x004c08d8

08001610 <SYS_GetTemperatureLevel>:
{
 8001610:	b510      	push	{r4, lr}
 8001612:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800161a:	f7ff ffd7 	bl	80015cc <SYS_GetBatteryLevel>
 800161e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001620:	4821      	ldr	r0, [pc, #132]	; (80016a8 <SYS_GetTemperatureLevel+0x98>)
 8001622:	f7ff ff93 	bl	800154c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <SYS_GetTemperatureLevel+0x9c>)
 8001628:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 800162c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001630:	428a      	cmp	r2, r1
 8001632:	d01d      	beq.n	8001670 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001634:	fb00 f304 	mul.w	r3, r0, r4
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	481d      	ldr	r0, [pc, #116]	; (80016b0 <SYS_GetTemperatureLevel+0xa0>)
 800163c:	fba0 0303 	umull	r0, r3, r0, r3
 8001640:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001644:	2064      	movs	r0, #100	; 0x64
 8001646:	fb00 f303 	mul.w	r3, r0, r3
 800164a:	1a52      	subs	r2, r2, r1
 800164c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001650:	331e      	adds	r3, #30
 8001652:	b21b      	sxth	r3, r3
 8001654:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001658:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800165c:	b21b      	sxth	r3, r3
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21b      	sxth	r3, r3
 8001662:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001666:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800166a:	b200      	sxth	r0, r0
 800166c:	b002      	add	sp, #8
 800166e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001670:	fb04 f000 	mul.w	r0, r4, r0
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <SYS_GetTemperatureLevel+0xa4>)
 8001676:	fba3 2300 	umull	r2, r3, r3, r0
 800167a:	1ac4      	subs	r4, r0, r3
 800167c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001680:	0adb      	lsrs	r3, r3, #11
 8001682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800168e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <SYS_GetTemperatureLevel+0xa8>)
 8001694:	fb82 1203 	smull	r1, r2, r2, r3
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 800169e:	331e      	adds	r3, #30
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80016a6:	e7d7      	b.n	8001658 <SYS_GetTemperatureLevel+0x48>
 80016a8:	b0001000 	.word	0xb0001000
 80016ac:	1fff7500 	.word	0x1fff7500
 80016b0:	09ee009f 	.word	0x09ee009f
 80016b4:	00100101 	.word	0x00100101
 80016b8:	68db8bad 	.word	0x68db8bad

080016bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016bc:	b500      	push	{lr}
 80016be:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016c6:	f042 0204 	orr.w	r2, r2, #4
 80016ca:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ce:	f002 0204 	and.w	r2, r2, #4
 80016d2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80016d4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016d8:	f042 0201 	orr.w	r2, r2, #1
 80016dc:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80016e6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2102      	movs	r1, #2
 80016ec:	200f      	movs	r0, #15
 80016ee:	f003 f95b 	bl	80049a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016f2:	200f      	movs	r0, #15
 80016f4:	f003 f990 	bl	8004a18 <HAL_NVIC_EnableIRQ>

}
 80016f8:	b003      	add	sp, #12
 80016fa:	f85d fb04 	ldr.w	pc, [sp], #4

080016fe <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80016fe:	2300      	movs	r3, #0
 8001700:	e001      	b.n	8001706 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001702:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001704:	3308      	adds	r3, #8
 8001706:	428b      	cmp	r3, r1
 8001708:	d20a      	bcs.n	8001720 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 800170a:	6842      	ldr	r2, [r0, #4]
 800170c:	f8d0 c000 	ldr.w	ip, [r0]
 8001710:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8001714:	bf08      	it	eq
 8001716:	f1bc 3fff 	cmpeq.w	ip, #4294967295	; 0xffffffff
 800171a:	d0f2      	beq.n	8001702 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 800171c:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 800171e:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001720:	2000      	movs	r0, #0
 8001722:	4770      	bx	lr

08001724 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001724:	b130      	cbz	r0, 8001734 <FLASH_IF_INT_Read+0x10>
{
 8001726:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001728:	b139      	cbz	r1, 800173a <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800172a:	b292      	uxth	r2, r2
 800172c:	f013 fad6 	bl	8014cdc <UTIL_MEM_cpy_8>
  return ret_status;
 8001730:	2000      	movs	r0, #0
}
 8001732:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001734:	f06f 0005 	mvn.w	r0, #5
}
 8001738:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 800173a:	f06f 0005 	mvn.w	r0, #5
 800173e:	e7f8      	b.n	8001732 <FLASH_IF_INT_Read+0xe>

08001740 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001740:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001742:	f003 fbc5 	bl	8004ed0 <HAL_FLASH_Unlock>
 8001746:	b978      	cbnz	r0, 8001768 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <FLASH_IF_INT_Clear_Error+0x30>)
 800174a:	699a      	ldr	r2, [r3, #24]
 800174c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001750:	619a      	str	r2, [r3, #24]
 8001752:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001756:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001758:	f003 fbd2 	bl	8004f00 <HAL_FLASH_Lock>
 800175c:	b908      	cbnz	r0, 8001762 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800175e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001760:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001762:	f06f 0004 	mvn.w	r0, #4
 8001766:	e7fb      	b.n	8001760 <FLASH_IF_INT_Clear_Error+0x20>
 8001768:	f06f 0004 	mvn.w	r0, #4
 800176c:	e7f8      	b.n	8001760 <FLASH_IF_INT_Clear_Error+0x20>
 800176e:	bf00      	nop
 8001770:	58004000 	.word	0x58004000

08001774 <FLASH_IF_INT_Erase>:
{
 8001774:	b570      	push	{r4, r5, r6, lr}
 8001776:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 800177c:	2800      	cmp	r0, #0
 800177e:	d039      	beq.n	80017f4 <FLASH_IF_INT_Erase+0x80>
 8001780:	460e      	mov	r6, r1
 8001782:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001784:	f7ff ffdc 	bl	8001740 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001788:	4605      	mov	r5, r0
 800178a:	b110      	cbz	r0, 8001792 <FLASH_IF_INT_Erase+0x1e>
}
 800178c:	4628      	mov	r0, r5
 800178e:	b004      	add	sp, #16
 8001790:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001792:	f003 fb9d 	bl	8004ed0 <HAL_FLASH_Unlock>
 8001796:	bb80      	cbnz	r0, 80017fa <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001798:	2302      	movs	r3, #2
 800179a:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 800179c:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80017a0:	4817      	ldr	r0, [pc, #92]	; (8001800 <FLASH_IF_INT_Erase+0x8c>)
 80017a2:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <FLASH_IF_INT_Erase+0x90>)
 80017a8:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 80017ac:	fbb3 fcf1 	udiv	ip, r3, r1
 80017b0:	fb01 331c 	mls	r3, r1, ip, r3
 80017b4:	0adb      	lsrs	r3, r3, #11
 80017b6:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80017b8:	19a1      	adds	r1, r4, r6
 80017ba:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 80017be:	3901      	subs	r1, #1
 80017c0:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	; 0x5e0
 80017c4:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 80017c8:	fbb1 f0f2 	udiv	r0, r1, r2
 80017cc:	fb02 1110 	mls	r1, r2, r0, r1
 80017d0:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 80017d4:	3301      	adds	r3, #1
 80017d6:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80017d8:	a903      	add	r1, sp, #12
 80017da:	4668      	mov	r0, sp
 80017dc:	f003 fc5c 	bl	8005098 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 80017e0:	b118      	cbz	r0, 80017ea <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80017e2:	2802      	cmp	r0, #2
 80017e4:	d004      	beq.n	80017f0 <FLASH_IF_INT_Erase+0x7c>
 80017e6:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 80017ea:	f003 fb89 	bl	8004f00 <HAL_FLASH_Lock>
 80017ee:	e7cd      	b.n	800178c <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80017f0:	2501      	movs	r5, #1
 80017f2:	e7fa      	b.n	80017ea <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 80017f4:	f06f 0505 	mvn.w	r5, #5
 80017f8:	e7c8      	b.n	800178c <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 80017fa:	f06f 0504 	mvn.w	r5, #4
 80017fe:	e7c5      	b.n	800178c <FLASH_IF_INT_Erase+0x18>
 8001800:	1fff7000 	.word	0x1fff7000
 8001804:	03fffc00 	.word	0x03fffc00

08001808 <FLASH_IF_INT_Write>:
{
 8001808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800180c:	b089      	sub	sp, #36	; 0x24
 800180e:	9003      	str	r0, [sp, #12]
 8001810:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8001812:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001814:	2800      	cmp	r0, #0
 8001816:	f000 80a9 	beq.w	800196c <FLASH_IF_INT_Write+0x164>
 800181a:	4683      	mov	fp, r0
 800181c:	2900      	cmp	r1, #0
 800181e:	f000 80a9 	beq.w	8001974 <FLASH_IF_INT_Write+0x16c>
 8001822:	f012 0f07 	tst.w	r2, #7
 8001826:	f040 80a9 	bne.w	800197c <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800182a:	f010 0307 	ands.w	r3, r0, #7
 800182e:	9305      	str	r3, [sp, #20]
 8001830:	f040 80a8 	bne.w	8001984 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001834:	f7ff ff84 	bl	8001740 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001838:	9002      	str	r0, [sp, #8]
 800183a:	b118      	cbz	r0, 8001844 <FLASH_IF_INT_Write+0x3c>
}
 800183c:	9802      	ldr	r0, [sp, #8]
 800183e:	b009      	add	sp, #36	; 0x24
 8001840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001844:	f003 fb44 	bl	8004ed0 <HAL_FLASH_Unlock>
 8001848:	2800      	cmp	r0, #0
 800184a:	f040 809f 	bne.w	800198c <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 800184e:	9c03      	ldr	r4, [sp, #12]
 8001850:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <FLASH_IF_INT_Write+0x18c>)
 8001856:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800185a:	494f      	ldr	r1, [pc, #316]	; (8001998 <FLASH_IF_INT_Write+0x190>)
 800185c:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8001860:	fbb2 f3f1 	udiv	r3, r2, r1
 8001864:	fb01 2213 	mls	r2, r1, r3, r2
 8001868:	0ad3      	lsrs	r3, r2, #11
 800186a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800186c:	9b04      	ldr	r3, [sp, #16]
 800186e:	18e3      	adds	r3, r4, r3
 8001870:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001874:	3b01      	subs	r3, #1
 8001876:	fbb3 f0f1 	udiv	r0, r3, r1
 800187a:	fb01 3310 	mls	r3, r1, r0, r3
 800187e:	0adb      	lsrs	r3, r3, #11
 8001880:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001884:	3301      	adds	r3, #1
 8001886:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001888:	2b01      	cmp	r3, #1
 800188a:	d906      	bls.n	800189a <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800188c:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8001890:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8001894:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001898:	e02f      	b.n	80018fa <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 800189a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800189e:	e7f9      	b.n	8001894 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 80018a0:	46c8      	mov	r8, r9
          current_source = uSource;
 80018a2:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 80018a4:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80018a6:	9d05      	ldr	r5, [sp, #20]
 80018a8:	4545      	cmp	r5, r8
 80018aa:	d215      	bcs.n	80018d8 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80018ac:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80018ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80018b2:	4621      	mov	r1, r4
 80018b4:	2001      	movs	r0, #1
 80018b6:	f003 fb67 	bl	8004f88 <HAL_FLASH_Program>
 80018ba:	b950      	cbnz	r0, 80018d2 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	6862      	ldr	r2, [r4, #4]
 80018c0:	59e9      	ldr	r1, [r5, r7]
 80018c2:	6873      	ldr	r3, [r6, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	bf08      	it	eq
 80018c8:	4288      	cmpeq	r0, r1
 80018ca:	d141      	bne.n	8001950 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 80018cc:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80018ce:	3508      	adds	r5, #8
 80018d0:	e7ea      	b.n	80018a8 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 80018d2:	f06f 0303 	mvn.w	r3, #3
 80018d6:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 80018d8:	9b02      	ldr	r3, [sp, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d13f      	bne.n	800195e <FLASH_IF_INT_Write+0x156>
        uDest += length;
 80018de:	44cb      	add	fp, r9
        uSource += length;
 80018e0:	9b01      	ldr	r3, [sp, #4]
 80018e2:	444b      	add	r3, r9
 80018e4:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80018e6:	9b04      	ldr	r3, [sp, #16]
 80018e8:	eba3 0909 	sub.w	r9, r3, r9
 80018ec:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 80018f0:	bf28      	it	cs
 80018f2:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80018f6:	f10a 0a01 	add.w	sl, sl, #1
 80018fa:	9b06      	ldr	r3, [sp, #24]
 80018fc:	9a07      	ldr	r2, [sp, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	4553      	cmp	r3, sl
 8001902:	d92c      	bls.n	800195e <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001904:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8001908:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800190a:	4649      	mov	r1, r9
 800190c:	9803      	ldr	r0, [sp, #12]
 800190e:	f7ff fef6 	bl	80016fe <FLASH_IF_INT_IsEmpty>
 8001912:	2800      	cmp	r0, #0
 8001914:	d0c4      	beq.n	80018a0 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <FLASH_IF_INT_Write+0x194>)
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	b1e8      	cbz	r0, 8001958 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800191c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001920:	4621      	mov	r1, r4
 8001922:	f7ff feff 	bl	8001724 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <FLASH_IF_INT_Write+0x194>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f3cb 000a 	ubfx	r0, fp, #0, #11
 800192e:	fa1f f289 	uxth.w	r2, r9
 8001932:	9901      	ldr	r1, [sp, #4]
 8001934:	4418      	add	r0, r3
 8001936:	f013 f9d1 	bl	8014cdc <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800193a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff ff18 	bl	8001774 <FLASH_IF_INT_Erase>
 8001944:	b970      	cbnz	r0, 8001964 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <FLASH_IF_INT_Write+0x194>)
 8001948:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800194a:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800194e:	e7aa      	b.n	80018a6 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001950:	f06f 0303 	mvn.w	r3, #3
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	e7bf      	b.n	80018d8 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001958:	f06f 0305 	mvn.w	r3, #5
 800195c:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800195e:	f003 facf 	bl	8004f00 <HAL_FLASH_Lock>
 8001962:	e76b      	b.n	800183c <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001964:	f06f 0301 	mvn.w	r3, #1
 8001968:	9302      	str	r3, [sp, #8]
 800196a:	e7f8      	b.n	800195e <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 800196c:	f06f 0305 	mvn.w	r3, #5
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	e763      	b.n	800183c <FLASH_IF_INT_Write+0x34>
 8001974:	f06f 0305 	mvn.w	r3, #5
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	e75f      	b.n	800183c <FLASH_IF_INT_Write+0x34>
 800197c:	f06f 0305 	mvn.w	r3, #5
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	e75b      	b.n	800183c <FLASH_IF_INT_Write+0x34>
 8001984:	f06f 0305 	mvn.w	r3, #5
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	e757      	b.n	800183c <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 800198c:	f06f 0304 	mvn.w	r3, #4
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	e753      	b.n	800183c <FLASH_IF_INT_Write+0x34>
 8001994:	1fff7000 	.word	0x1fff7000
 8001998:	03fffc00 	.word	0x03fffc00
 800199c:	20000468 	.word	0x20000468

080019a0 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80019a0:	4b01      	ldr	r3, [pc, #4]	; (80019a8 <FLASH_IF_Init+0x8>)
 80019a2:	6018      	str	r0, [r3, #0]
}
 80019a4:	2000      	movs	r0, #0
 80019a6:	4770      	bx	lr
 80019a8:	20000468 	.word	0x20000468

080019ac <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80019ac:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80019b0:	d30e      	bcc.n	80019d0 <FLASH_IF_Write+0x24>
{
 80019b2:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <FLASH_IF_Write+0x30>)
 80019b6:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <FLASH_IF_Write+0x34>)
 80019bc:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80019c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80019c4:	3b01      	subs	r3, #1
 80019c6:	4298      	cmp	r0, r3
 80019c8:	d805      	bhi.n	80019d6 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80019ca:	f7ff ff1d 	bl	8001808 <FLASH_IF_INT_Write>
}
 80019ce:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80019d4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80019d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019da:	e7f8      	b.n	80019ce <FLASH_IF_Write+0x22>
 80019dc:	1fff7000 	.word	0x1fff7000
 80019e0:	03fffc00 	.word	0x03fffc00

080019e4 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80019e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80019e8:	d30e      	bcc.n	8001a08 <FLASH_IF_Read+0x24>
{
 80019ea:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <FLASH_IF_Read+0x30>)
 80019ee:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <FLASH_IF_Read+0x34>)
 80019f4:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80019f8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80019fc:	3b01      	subs	r3, #1
 80019fe:	4299      	cmp	r1, r3
 8001a00:	d805      	bhi.n	8001a0e <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001a02:	f7ff fe8f 	bl	8001724 <FLASH_IF_INT_Read>
}
 8001a06:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001a0c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a12:	e7f8      	b.n	8001a06 <FLASH_IF_Read+0x22>
 8001a14:	1fff7000 	.word	0x1fff7000
 8001a18:	03fffc00 	.word	0x03fffc00

08001a1c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001a1c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001a20:	d30e      	bcc.n	8001a40 <FLASH_IF_Erase+0x24>
{
 8001a22:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <FLASH_IF_Erase+0x30>)
 8001a26:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <FLASH_IF_Erase+0x34>)
 8001a2c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001a30:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001a34:	3b01      	subs	r3, #1
 8001a36:	4298      	cmp	r0, r3
 8001a38:	d805      	bhi.n	8001a46 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001a3a:	f7ff fe9b 	bl	8001774 <FLASH_IF_INT_Erase>
}
 8001a3e:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001a44:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4a:	e7f8      	b.n	8001a3e <FLASH_IF_Erase+0x22>
 8001a4c:	1fff7000 	.word	0x1fff7000
 8001a50:	03fffc00 	.word	0x03fffc00

08001a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a58:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	2400      	movs	r4, #0
 8001a5c:	9403      	str	r4, [sp, #12]
 8001a5e:	9404      	str	r4, [sp, #16]
 8001a60:	9405      	str	r4, [sp, #20]
 8001a62:	9406      	str	r4, [sp, #24]
 8001a64:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a6c:	f042 0202 	orr.w	r2, r2, #2
 8001a70:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a74:	f002 0202 	and.w	r2, r2, #2
 8001a78:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a7a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a7e:	f042 0204 	orr.w	r2, r2, #4
 8001a82:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a86:	f002 0204 	and.w	r2, r2, #4
 8001a8a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001a8c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a90:	f042 0201 	orr.w	r2, r2, #1
 8001a94:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001a9e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001aa0:	4e2c      	ldr	r6, [pc, #176]	; (8001b54 <MX_GPIO_Init+0x100>)
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	f64b 2102 	movw	r1, #47618	; 0xba02
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f003 fc85 	bl	80053b8 <HAL_GPIO_WritePin>
                          |SD_CS_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001aae:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001ab2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2501      	movs	r5, #1
 8001ab6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aba:	f04f 0802 	mov.w	r8, #2
 8001abe:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	a903      	add	r1, sp, #12
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	f003 fb27 	bl	8005118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8001aca:	f04f 0903 	mov.w	r9, #3
 8001ace:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad2:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 8001ad6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	a903      	add	r1, sp, #12
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae0:	f003 fb1a 	bl	8005118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001ae4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ae8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	f8cd 9018 	str.w	r9, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	a903      	add	r1, sp, #12
 8001af4:	4630      	mov	r0, r6
 8001af6:	f003 fb0f 	bl	8005118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001afa:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b00:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b04:	a903      	add	r1, sp, #12
 8001b06:	4630      	mov	r0, r6
 8001b08:	f003 fb06 	bl	8005118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001b0c:	2340      	movs	r3, #64	; 0x40
 8001b0e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b10:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001b14:	a903      	add	r1, sp, #12
 8001b16:	4810      	ldr	r0, [pc, #64]	; (8001b58 <MX_GPIO_Init+0x104>)
 8001b18:	f003 fafe 	bl	8005118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	4621      	mov	r1, r4
 8001b20:	2006      	movs	r0, #6
 8001b22:	f002 ff41 	bl	80049a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b26:	2006      	movs	r0, #6
 8001b28:	f002 ff76 	bl	8004a18 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	4621      	mov	r1, r4
 8001b30:	2007      	movs	r0, #7
 8001b32:	f002 ff39 	bl	80049a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b36:	2007      	movs	r0, #7
 8001b38:	f002 ff6e 	bl	8004a18 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b3c:	4622      	mov	r2, r4
 8001b3e:	4621      	mov	r1, r4
 8001b40:	2016      	movs	r0, #22
 8001b42:	f002 ff31 	bl	80049a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b46:	2016      	movs	r0, #22
 8001b48:	f002 ff66 	bl	8004a18 <HAL_NVIC_EnableIRQ>

}
 8001b4c:	b009      	add	sp, #36	; 0x24
 8001b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b52:	bf00      	nop
 8001b54:	48000400 	.word	0x48000400
 8001b58:	48000800 	.word	0x48000800

08001b5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b5c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b5e:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <MX_I2C1_Init+0x4c>)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b62:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_I2C1_Init+0x54>)
 8001b66:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b70:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b72:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b74:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b76:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b78:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b7a:	f003 fdc6 	bl	800570a <HAL_I2C_Init>
 8001b7e:	b950      	cbnz	r0, 8001b96 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b80:	2100      	movs	r1, #0
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <MX_I2C1_Init+0x4c>)
 8001b84:	f003 ff9c 	bl	8005ac0 <HAL_I2CEx_ConfigAnalogFilter>
 8001b88:	b940      	cbnz	r0, 8001b9c <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <MX_I2C1_Init+0x4c>)
 8001b8e:	f003 ffc5 	bl	8005b1c <HAL_I2CEx_ConfigDigitalFilter>
 8001b92:	b930      	cbnz	r0, 8001ba2 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b94:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b96:	f000 f93d 	bl	8001e14 <Error_Handler>
 8001b9a:	e7f1      	b.n	8001b80 <MX_I2C1_Init+0x24>
    Error_Handler();
 8001b9c:	f000 f93a 	bl	8001e14 <Error_Handler>
 8001ba0:	e7f3      	b.n	8001b8a <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001ba2:	f000 f937 	bl	8001e14 <Error_Handler>
}
 8001ba6:	e7f5      	b.n	8001b94 <MX_I2C1_Init+0x38>
 8001ba8:	2000046c 	.word	0x2000046c
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	20303e5d 	.word	0x20303e5d

08001bb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb6:	b097      	sub	sp, #92	; 0x5c
 8001bb8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	2100      	movs	r1, #0
 8001bbc:	9111      	str	r1, [sp, #68]	; 0x44
 8001bbe:	9112      	str	r1, [sp, #72]	; 0x48
 8001bc0:	9113      	str	r1, [sp, #76]	; 0x4c
 8001bc2:	9114      	str	r1, [sp, #80]	; 0x50
 8001bc4:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc6:	2238      	movs	r2, #56	; 0x38
 8001bc8:	a803      	add	r0, sp, #12
 8001bca:	f015 fba1 	bl	8017310 <memset>
  if(i2cHandle->Instance==I2C1)
 8001bce:	6822      	ldr	r2, [r4, #0]
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_I2C_MspInit+0xb0>)
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bd6:	b017      	add	sp, #92	; 0x5c
 8001bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bda:	2340      	movs	r3, #64	; 0x40
 8001bdc:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bde:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001be2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be4:	a803      	add	r0, sp, #12
 8001be6:	f004 fd73 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	d137      	bne.n	8001c5e <HAL_I2C_MspInit+0xaa>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bee:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001bf2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bfa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001c02:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c14:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1a:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1c:	2712      	movs	r7, #18
 8001c1e:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2500      	movs	r5, #0
 8001c22:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c26:	2604      	movs	r6, #4
 8001c28:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	a911      	add	r1, sp, #68	; 0x44
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c30:	f003 fa72 	bl	8005118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c38:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3a:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c40:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	a911      	add	r1, sp, #68	; 0x44
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <HAL_I2C_MspInit+0xb4>)
 8001c46:	f003 fa67 	bl	8005118 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c50:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001c5a:	9b00      	ldr	r3, [sp, #0]
}
 8001c5c:	e7bb      	b.n	8001bd6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001c5e:	f000 f8d9 	bl	8001e14 <Error_Handler>
 8001c62:	e7c4      	b.n	8001bee <HAL_I2C_MspInit+0x3a>
 8001c64:	40005400 	.word	0x40005400
 8001c68:	48000400 	.word	0x48000400

08001c6c <select_user_bank>:
	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
}


static void select_user_bank(userbank ub)
{
 8001c6c:	b500      	push	{lr}
 8001c6e:	b085      	sub	sp, #20
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001c70:	237f      	movs	r3, #127	; 0x7f
 8001c72:	f88d 300c 	strb.w	r3, [sp, #12]
	write_reg[1] = ub;
 8001c76:	f88d 000d 	strb.w	r0, [sp, #13]
	uint16_t devaddress = ICM_I2C_ADDRESS << 1;
	HAL_I2C_Master_Transmit(ICM20948_I2C, devaddress, write_reg, 2, 10);
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	aa03      	add	r2, sp, #12
 8001c82:	21d2      	movs	r1, #210	; 0xd2
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <select_user_bank+0x24>)
 8001c86:	f003 fd9f 	bl	80057c8 <HAL_I2C_Master_Transmit>
}
 8001c8a:	b005      	add	sp, #20
 8001c8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c90:	2000046c 	.word	0x2000046c

08001c94 <read_multiple_icm20948_reg>:
	}

}

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001c94:	b510      	push	{r4, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	4614      	mov	r4, r2
    static uint8_t reg_val[6]; // Assuming a maximum length that will always be enough
    uint8_t read_reg = READ | reg;
 8001c9a:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8001c9e:	f88d 100f 	strb.w	r1, [sp, #15]
    uint16_t devaddress = ICM_I2C_ADDRESS << 1;
    HAL_StatusTypeDef status;

    // Select the appropriate user bank
    select_user_bank(ub);
 8001ca2:	f7ff ffe3 	bl	8001c6c <select_user_bank>

    // Transmit register address
    status = HAL_I2C_Master_Transmit(ICM20948_I2C, devaddress, &read_reg, 1, 1000);
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	f10d 020f 	add.w	r2, sp, #15
 8001cb2:	21d2      	movs	r1, #210	; 0xd2
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <read_multiple_icm20948_reg+0x58>)
 8001cb6:	f003 fd87 	bl	80057c8 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK)
 8001cba:	b968      	cbnz	r0, 8001cd8 <read_multiple_icm20948_reg+0x44>
        // Handle transmission error
        printf("Error: I2C Transmit failed with status %d\n", status);
    }

    // Receive data from the register
    status = HAL_I2C_Master_Receive(ICM20948_I2C, devaddress, reg_val, len, 1000);
 8001cbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <read_multiple_icm20948_reg+0x5c>)
 8001cc6:	21d2      	movs	r1, #210	; 0xd2
 8001cc8:	4808      	ldr	r0, [pc, #32]	; (8001cec <read_multiple_icm20948_reg+0x58>)
 8001cca:	f003 fe3b 	bl	8005944 <HAL_I2C_Master_Receive>
    if (status != HAL_OK)
 8001cce:	4601      	mov	r1, r0
 8001cd0:	b938      	cbnz	r0, 8001ce2 <read_multiple_icm20948_reg+0x4e>
        printf("Error: I2C Receive failed with status %d\n", status);
    }

    // If both operations succeeded, return the read values
    return reg_val;
}
 8001cd2:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <read_multiple_icm20948_reg+0x5c>)
 8001cd4:	b004      	add	sp, #16
 8001cd6:	bd10      	pop	{r4, pc}
 8001cd8:	4601      	mov	r1, r0
        printf("Error: I2C Transmit failed with status %d\n", status);
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <read_multiple_icm20948_reg+0x60>)
 8001cdc:	f015 fa98 	bl	8017210 <iprintf>
 8001ce0:	e7ec      	b.n	8001cbc <read_multiple_icm20948_reg+0x28>
        printf("Error: I2C Receive failed with status %d\n", status);
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <read_multiple_icm20948_reg+0x64>)
 8001ce4:	f015 fa94 	bl	8017210 <iprintf>
 8001ce8:	e7f3      	b.n	8001cd2 <read_multiple_icm20948_reg+0x3e>
 8001cea:	bf00      	nop
 8001cec:	2000046c 	.word	0x2000046c
 8001cf0:	200004c4 	.word	0x200004c4
 8001cf4:	08019fe0 	.word	0x08019fe0
 8001cf8:	0801a00c 	.word	0x0801a00c

08001cfc <icm20948_accel_read>:
{
 8001cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d00:	b085      	sub	sp, #20
 8001d02:	4604      	mov	r4, r0
    uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8001d04:	2206      	movs	r2, #6
 8001d06:	212d      	movs	r1, #45	; 0x2d
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff ffc3 	bl	8001c94 <read_multiple_icm20948_reg>
 8001d0e:	4605      	mov	r5, r0
    data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001d10:	7803      	ldrb	r3, [r0, #0]
 8001d12:	7840      	ldrb	r0, [r0, #1]
 8001d14:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001d18:	b200      	sxth	r0, r0
 8001d1a:	f7ff f847 	bl	8000dac <__aeabi_i2f>
 8001d1e:	4607      	mov	r7, r0
 8001d20:	6020      	str	r0, [r4, #0]
    data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8001d22:	78ab      	ldrb	r3, [r5, #2]
 8001d24:	78e8      	ldrb	r0, [r5, #3]
 8001d26:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001d2a:	b200      	sxth	r0, r0
 8001d2c:	f7ff f83e 	bl	8000dac <__aeabi_i2f>
 8001d30:	4680      	mov	r8, r0
 8001d32:	6060      	str	r0, [r4, #4]
    data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8001d34:	792b      	ldrb	r3, [r5, #4]
 8001d36:	7968      	ldrb	r0, [r5, #5]
 8001d38:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001d3c:	b200      	sxth	r0, r0
 8001d3e:	f7ff f835 	bl	8000dac <__aeabi_i2f>
 8001d42:	4606      	mov	r6, r0
 8001d44:	60a0      	str	r0, [r4, #8]
    data->x /= accel_scale_factor;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <icm20948_accel_read+0xa4>)
 8001d48:	f8d3 9000 	ldr.w	r9, [r3]
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	4638      	mov	r0, r7
 8001d50:	f7ff f934 	bl	8000fbc <__aeabi_fdiv>
 8001d54:	4607      	mov	r7, r0
 8001d56:	6020      	str	r0, [r4, #0]
    data->y /= accel_scale_factor;
 8001d58:	4649      	mov	r1, r9
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	f7ff f92e 	bl	8000fbc <__aeabi_fdiv>
 8001d60:	4605      	mov	r5, r0
 8001d62:	6060      	str	r0, [r4, #4]
    data->z /= accel_scale_factor;
 8001d64:	4649      	mov	r1, r9
 8001d66:	4630      	mov	r0, r6
 8001d68:	f7ff f928 	bl	8000fbc <__aeabi_fdiv>
 8001d6c:	4606      	mov	r6, r0
 8001d6e:	60a0      	str	r0, [r4, #8]
    printf("X: %f, Y: %f, Z: %f\n", data->x, data->y, data->z);
 8001d70:	4638      	mov	r0, r7
 8001d72:	f7fe fbc1 	bl	80004f8 <__aeabi_f2d>
 8001d76:	4680      	mov	r8, r0
 8001d78:	4689      	mov	r9, r1
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f7fe fbbc 	bl	80004f8 <__aeabi_f2d>
 8001d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d84:	4628      	mov	r0, r5
 8001d86:	f7fe fbb7 	bl	80004f8 <__aeabi_f2d>
 8001d8a:	e9cd 0100 	strd	r0, r1, [sp]
 8001d8e:	4642      	mov	r2, r8
 8001d90:	464b      	mov	r3, r9
 8001d92:	4804      	ldr	r0, [pc, #16]	; (8001da4 <icm20948_accel_read+0xa8>)
 8001d94:	f015 fa3c 	bl	8017210 <iprintf>
}
 8001d98:	b005      	add	sp, #20
 8001d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d9e:	bf00      	nop
 8001da0:	200004c0 	.word	0x200004c0
 8001da4:	0801a038 	.word	0x0801a038

08001da8 <icm20948_accel_read_g>:
{
 8001da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dac:	b085      	sub	sp, #20
 8001dae:	4604      	mov	r4, r0
	icm20948_accel_read(data);
 8001db0:	f7ff ffa4 	bl	8001cfc <icm20948_accel_read>
	data->x /= accel_scale_factor;
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <icm20948_accel_read_g+0x64>)
 8001db6:	681e      	ldr	r6, [r3, #0]
 8001db8:	4631      	mov	r1, r6
 8001dba:	6820      	ldr	r0, [r4, #0]
 8001dbc:	f7ff f8fe 	bl	8000fbc <__aeabi_fdiv>
 8001dc0:	4607      	mov	r7, r0
 8001dc2:	6020      	str	r0, [r4, #0]
	data->y /= accel_scale_factor;
 8001dc4:	4631      	mov	r1, r6
 8001dc6:	6860      	ldr	r0, [r4, #4]
 8001dc8:	f7ff f8f8 	bl	8000fbc <__aeabi_fdiv>
 8001dcc:	4605      	mov	r5, r0
 8001dce:	6060      	str	r0, [r4, #4]
	data->z /= accel_scale_factor;
 8001dd0:	4631      	mov	r1, r6
 8001dd2:	68a0      	ldr	r0, [r4, #8]
 8001dd4:	f7ff f8f2 	bl	8000fbc <__aeabi_fdiv>
 8001dd8:	4606      	mov	r6, r0
 8001dda:	60a0      	str	r0, [r4, #8]
    printf("X: %f, Y: %f, Z: %f\n", data->x, data->y, data->z);
 8001ddc:	4638      	mov	r0, r7
 8001dde:	f7fe fb8b 	bl	80004f8 <__aeabi_f2d>
 8001de2:	4680      	mov	r8, r0
 8001de4:	4689      	mov	r9, r1
 8001de6:	4630      	mov	r0, r6
 8001de8:	f7fe fb86 	bl	80004f8 <__aeabi_f2d>
 8001dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001df0:	4628      	mov	r0, r5
 8001df2:	f7fe fb81 	bl	80004f8 <__aeabi_f2d>
 8001df6:	e9cd 0100 	strd	r0, r1, [sp]
 8001dfa:	4642      	mov	r2, r8
 8001dfc:	464b      	mov	r3, r9
 8001dfe:	4804      	ldr	r0, [pc, #16]	; (8001e10 <icm20948_accel_read_g+0x68>)
 8001e00:	f015 fa06 	bl	8017210 <iprintf>
}
 8001e04:	b005      	add	sp, #20
 8001e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200004c0 	.word	0x200004c0
 8001e10:	0801a038 	.word	0x0801a038

08001e14 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <Error_Handler+0x2>

08001e18 <SystemClock_Config>:
{
 8001e18:	b510      	push	{r4, lr}
 8001e1a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1c:	2248      	movs	r2, #72	; 0x48
 8001e1e:	2100      	movs	r1, #0
 8001e20:	a808      	add	r0, sp, #32
 8001e22:	f015 fa75 	bl	8017310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e26:	2400      	movs	r4, #0
 8001e28:	9401      	str	r4, [sp, #4]
 8001e2a:	9402      	str	r4, [sp, #8]
 8001e2c:	9403      	str	r4, [sp, #12]
 8001e2e:	9404      	str	r4, [sp, #16]
 8001e30:	9405      	str	r4, [sp, #20]
 8001e32:	9406      	str	r4, [sp, #24]
 8001e34:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001e36:	f003 fe9d 	bl	8005b74 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e42:	f023 0318 	bic.w	r3, r3, #24
 8001e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e64:	2324      	movs	r3, #36	; 0x24
 8001e66:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e68:	2381      	movs	r3, #129	; 0x81
 8001e6a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001e70:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001e72:	23b0      	movs	r3, #176	; 0xb0
 8001e74:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e76:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e78:	a808      	add	r0, sp, #32
 8001e7a:	f003 ffa3 	bl	8005dc4 <HAL_RCC_OscConfig>
 8001e7e:	b970      	cbnz	r0, 8001e9e <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001e80:	234f      	movs	r3, #79	; 0x4f
 8001e82:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001e84:	2300      	movs	r3, #0
 8001e86:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e88:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e8a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001e8e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e90:	2102      	movs	r1, #2
 8001e92:	a801      	add	r0, sp, #4
 8001e94:	f004 fac8 	bl	8006428 <HAL_RCC_ClockConfig>
 8001e98:	b918      	cbnz	r0, 8001ea2 <SystemClock_Config+0x8a>
}
 8001e9a:	b01a      	add	sp, #104	; 0x68
 8001e9c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001e9e:	f7ff ffb9 	bl	8001e14 <Error_Handler>
    Error_Handler();
 8001ea2:	f7ff ffb7 	bl	8001e14 <Error_Handler>

08001ea6 <main>:
 {
 8001ea6:	b508      	push	{r3, lr}
  HAL_Init();
 8001ea8:	f002 f854 	bl	8003f54 <HAL_Init>
  SystemClock_Config();
 8001eac:	f7ff ffb4 	bl	8001e18 <SystemClock_Config>
  MX_GPIO_Init();
 8001eb0:	f7ff fdd0 	bl	8001a54 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001eb4:	f001 fafc 	bl	80034b0 <MX_LoRaWAN_Init>
  MX_SPI1_Init();
 8001eb8:	f000 f940 	bl	800213c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ebc:	f000 f964 	bl	8002188 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001ec0:	f000 ff48 	bl	8002d54 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001ec4:	f7ff fe4a 	bl	8001b5c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ec8:	f000 fd86 	bl	80029d8 <MX_USART1_UART_Init>
    MX_LoRaWAN_Process();
 8001ecc:	f001 faf6 	bl	80034bc <MX_LoRaWAN_Process>
  while (1)
 8001ed0:	e7fc      	b.n	8001ecc <main+0x26>

08001ed2 <compareTimeStamps>:
SysTime_t leftForLoraTime;
bool leftForLora = false;


bool compareTimeStamps( SysTime_t time1, SysTime_t time2 )
{
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	f10d 0c10 	add.w	ip, sp, #16
 8001ed8:	e90c 0003 	stmdb	ip, {r0, r1}
 8001edc:	4669      	mov	r1, sp
 8001ede:	e881 000c 	stmia.w	r1, {r2, r3}
	bool flag = false;

    int totalSeconds1 = time1.Seconds;
    int totalSeconds2 = time2.Seconds;

    int difference = abs( totalSeconds1 - totalSeconds2 );
 8001ee2:	1a83      	subs	r3, r0, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bfb8      	it	lt
 8001ee8:	425b      	neglt	r3, r3

    if ( difference >= PROCESS_PERIOD ) {
 8001eea:	2b09      	cmp	r3, #9
 8001eec:	dc02      	bgt.n	8001ef4 <compareTimeStamps+0x22>
	bool flag = false;
 8001eee:	2000      	movs	r0, #0
    	flag = true;
    }

    return flag;
}
 8001ef0:	b004      	add	sp, #16
 8001ef2:	4770      	bx	lr
    	flag = true;
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	e7fb      	b.n	8001ef0 <compareTimeStamps+0x1e>

08001ef8 <checkSubSeconds>:



bool checkSubSeconds( SysTime_t time1, SysTime_t time2, int period  )
{
 8001ef8:	b084      	sub	sp, #16
 8001efa:	f10d 0c10 	add.w	ip, sp, #16
 8001efe:	e90c 0003 	stmdb	ip, {r0, r1}
 8001f02:	4669      	mov	r1, sp
 8001f04:	e881 000c 	stmia.w	r1, {r2, r3}
	bool flag = false;

    int totalSeconds1 = time1.Seconds;
    int totalSeconds2 = time2.Seconds;
    int totalSubSeconds1 = time1.SubSeconds;
 8001f08:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    int totalSubSeconds2 = time2.SubSeconds;
 8001f0c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]

    int difference = ( totalSeconds1 - totalSeconds2 ) * 1000 + totalSubSeconds1 - totalSubSeconds2;
 8001f10:	4602      	mov	r2, r0
 8001f12:	9800      	ldr	r0, [sp, #0]
 8001f14:	1a12      	subs	r2, r2, r0
 8001f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1a:	fb00 3302 	mla	r3, r0, r2, r3
 8001f1e:	1a5b      	subs	r3, r3, r1

    if ( difference >= period ) {
 8001f20:	9a04      	ldr	r2, [sp, #16]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	da02      	bge.n	8001f2c <checkSubSeconds+0x34>
	bool flag = false;
 8001f26:	2000      	movs	r0, #0
    	flag = true;
    }

    return flag;
}
 8001f28:	b004      	add	sp, #16
 8001f2a:	4770      	bx	lr
    	flag = true;
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	e7fb      	b.n	8001f28 <checkSubSeconds+0x30>

08001f30 <main_process>:

}


void main_process ( void )
{
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	b08c      	sub	sp, #48	; 0x30
	 */

	bool timePeriodElapsed = false;
	if (
			(
				LmHandlerJoinStatus( ) == LORAMAC_HANDLER_SET &&
 8001f34:	f007 fc92 	bl	800985c <LmHandlerJoinStatus>
	if (
 8001f38:	2801      	cmp	r0, #1
 8001f3a:	d005      	beq.n	8001f48 <main_process+0x18>
				time_updated == 1
//				!checkIf1970( )
//				gotNewTime									  &&
//				waitForRx == 0
			) 												  ||
				initial_join_process_failed == 1)
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <main_process+0xf8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
			) 												  ||
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d005      	beq.n	8001f50 <main_process+0x20>
		__enable_irq();   // enable all interrupts

		ResumeTasks ( );

	}
}
 8001f44:	b00c      	add	sp, #48	; 0x30
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
				time_updated == 1
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <main_process+0xfc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
				LmHandlerJoinStatus( ) == LORAMAC_HANDLER_SET &&
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d1f5      	bne.n	8001f3c <main_process+0xc>
	  	PauseTasks ( );
 8001f50:	f001 fe38 	bl	8003bc4 <PauseTasks>
		startTime = SysTimeGet ( );
 8001f54:	a80a      	add	r0, sp, #40	; 0x28
 8001f56:	f013 f829 	bl	8014fac <SysTimeGet>
		SysTime_t currentWaitTime = SysTimeGet ( );
 8001f5a:	a804      	add	r0, sp, #16
 8001f5c:	f013 f826 	bl	8014fac <SysTimeGet>
		previousWaitTime = ( leftForLora ) ? leftForLoraTime : currentWaitTime;
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <main_process+0x100>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b14b      	cbz	r3, 8001f7a <main_process+0x4a>
 8001f66:	4a33      	ldr	r2, [pc, #204]	; (8002034 <main_process+0x104>)
 8001f68:	ab06      	add	r3, sp, #24
 8001f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f72:	b672      	cpsid	i
		int data_log_count = 0;
 8001f74:	2500      	movs	r5, #0
	bool timePeriodElapsed = false;
 8001f76:	4628      	mov	r0, r5
}
 8001f78:	e02d      	b.n	8001fd6 <main_process+0xa6>
		previousWaitTime = ( leftForLora ) ? leftForLoraTime : currentWaitTime;
 8001f7a:	ab06      	add	r3, sp, #24
 8001f7c:	aa04      	add	r2, sp, #16
 8001f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f82:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f86:	e7f4      	b.n	8001f72 <main_process+0x42>
				currentWaitTime = SysTimeGet ( );
 8001f88:	ac02      	add	r4, sp, #8
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f013 f80e 	bl	8014fac <SysTimeGet>
 8001f90:	f10d 0c10 	add.w	ip, sp, #16
 8001f94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f98:	e88c 0003 	stmia.w	ip, {r0, r1}
				elapsedTime = checkSubSeconds( currentWaitTime, previousWaitTime, 50 );   // Delay for the remainder of the 50ms period
 8001f9c:	2332      	movs	r3, #50	; 0x32
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	ab06      	add	r3, sp, #24
 8001fa2:	cb0c      	ldmia	r3, {r2, r3}
 8001fa4:	f7ff ffa8 	bl	8001ef8 <checkSubSeconds>
			while (!elapsedTime)
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	d0ed      	beq.n	8001f88 <main_process+0x58>
			previousWaitTime = currentWaitTime;
 8001fac:	ab06      	add	r3, sp, #24
 8001fae:	aa04      	add	r2, sp, #16
 8001fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fb4:	e883 0003 	stmia.w	r3, {r0, r1}
			icm20948_accel_read_g ( &data );
 8001fb8:	481f      	ldr	r0, [pc, #124]	; (8002038 <main_process+0x108>)
 8001fba:	f7ff fef5 	bl	8001da8 <icm20948_accel_read_g>
			currTime = SysTimeGet ( );
 8001fbe:	ac08      	add	r4, sp, #32
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f012 fff3 	bl	8014fac <SysTimeGet>
			timePeriodElapsed = compareTimeStamps( currTime, startTime );
 8001fc6:	ab0c      	add	r3, sp, #48	; 0x30
 8001fc8:	e913 000c 	ldmdb	r3, {r2, r3}
 8001fcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd0:	f7ff ff7f 	bl	8001ed2 <compareTimeStamps>
			data_log_count++;
 8001fd4:	3501      	adds	r5, #1
		while( !timePeriodElapsed )
 8001fd6:	b978      	cbnz	r0, 8001ff8 <main_process+0xc8>
			currentWaitTime = SysTimeGet ( );
 8001fd8:	ae02      	add	r6, sp, #8
 8001fda:	4630      	mov	r0, r6
 8001fdc:	f012 ffe6 	bl	8014fac <SysTimeGet>
 8001fe0:	ac04      	add	r4, sp, #16
 8001fe2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001fe6:	e884 0003 	stmia.w	r4, {r0, r1}
			elapsedTime = checkSubSeconds( currentWaitTime, previousWaitTime, 50 );
 8001fea:	2332      	movs	r3, #50	; 0x32
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	ab06      	add	r3, sp, #24
 8001ff0:	cb0c      	ldmia	r3, {r2, r3}
 8001ff2:	f7ff ff81 	bl	8001ef8 <checkSubSeconds>
			while (!elapsedTime)
 8001ff6:	e7d7      	b.n	8001fa8 <main_process+0x78>
		leftForLoraTime = SysTimeGet ( );
 8001ff8:	4e0e      	ldr	r6, [pc, #56]	; (8002034 <main_process+0x104>)
 8001ffa:	ac02      	add	r4, sp, #8
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f012 ffd5 	bl	8014fac <SysTimeGet>
 8002002:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002006:	e886 0003 	stmia.w	r6, {r0, r1}
		leftForLora = true;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <main_process+0x100>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
		APP_LOG( TS_OFF, VLEVEL_M, "NUMBER OF ROWS LOGGED : %d\n", data_log_count);
 8002010:	9500      	str	r5, [sp, #0]
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <main_process+0x10c>)
 8002014:	2200      	movs	r2, #0
 8002016:	4611      	mov	r1, r2
 8002018:	2002      	movs	r0, #2
 800201a:	f012 fd6d 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  __ASM volatile ("cpsie i" : : : "memory");
 800201e:	b662      	cpsie	i
		ResumeTasks ( );
 8002020:	f001 fdde 	bl	8003be0 <ResumeTasks>
}
 8002024:	e78e      	b.n	8001f44 <main_process+0x14>
 8002026:	bf00      	nop
 8002028:	200004d8 	.word	0x200004d8
 800202c:	200004e8 	.word	0x200004e8
 8002030:	200004dc 	.word	0x200004dc
 8002034:	200004e0 	.word	0x200004e0
 8002038:	200004cc 	.word	0x200004cc
 800203c:	0801a050 	.word	0x0801a050

08002040 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002040:	b500      	push	{lr}
 8002042:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8002044:	222c      	movs	r2, #44	; 0x2c
 8002046:	2100      	movs	r1, #0
 8002048:	a801      	add	r0, sp, #4
 800204a:	f015 f961 	bl	8017310 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800204e:	4819      	ldr	r0, [pc, #100]	; (80020b4 <MX_RTC_Init+0x74>)
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <MX_RTC_Init+0x78>)
 8002052:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002054:	231f      	movs	r3, #31
 8002056:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800205c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800205e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002064:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002066:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800206c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800206e:	f004 fd3f 	bl	8006af0 <HAL_RTC_Init>
 8002072:	b9a8      	cbnz	r0, 80020a0 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002074:	480f      	ldr	r0, [pc, #60]	; (80020b4 <MX_RTC_Init+0x74>)
 8002076:	f004 fe7d 	bl	8006d74 <HAL_RTCEx_SetSSRU_IT>
 800207a:	b9a0      	cbnz	r0, 80020a6 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800207c:	2200      	movs	r2, #0
 800207e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002080:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002082:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002084:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002088:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800208a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002090:	a901      	add	r1, sp, #4
 8002092:	4808      	ldr	r0, [pc, #32]	; (80020b4 <MX_RTC_Init+0x74>)
 8002094:	f004 fd92 	bl	8006bbc <HAL_RTC_SetAlarm_IT>
 8002098:	b940      	cbnz	r0, 80020ac <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800209a:	b00d      	add	sp, #52	; 0x34
 800209c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80020a0:	f7ff feb8 	bl	8001e14 <Error_Handler>
 80020a4:	e7e6      	b.n	8002074 <MX_RTC_Init+0x34>
    Error_Handler();
 80020a6:	f7ff feb5 	bl	8001e14 <Error_Handler>
 80020aa:	e7e7      	b.n	800207c <MX_RTC_Init+0x3c>
    Error_Handler();
 80020ac:	f7ff feb2 	bl	8001e14 <Error_Handler>
}
 80020b0:	e7f3      	b.n	800209a <MX_RTC_Init+0x5a>
 80020b2:	bf00      	nop
 80020b4:	200004ec 	.word	0x200004ec
 80020b8:	40002800 	.word	0x40002800

080020bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020bc:	b510      	push	{r4, lr}
 80020be:	b090      	sub	sp, #64	; 0x40
 80020c0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c2:	2238      	movs	r2, #56	; 0x38
 80020c4:	2100      	movs	r1, #0
 80020c6:	a802      	add	r0, sp, #8
 80020c8:	f015 f922 	bl	8017310 <memset>
  if(rtcHandle->Instance==RTC)
 80020cc:	6822      	ldr	r2, [r4, #0]
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_RTC_MspInit+0x7c>)
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020d4:	b010      	add	sp, #64	; 0x40
 80020d6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020dc:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e4:	a802      	add	r0, sp, #8
 80020e6:	f004 faf3 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	bb08      	cbnz	r0, 8002130 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002102:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800210c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	4611      	mov	r1, r2
 8002112:	2002      	movs	r0, #2
 8002114:	f002 fc48 	bl	80049a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002118:	2002      	movs	r0, #2
 800211a:	f002 fc7d 	bl	8004a18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	4611      	mov	r1, r2
 8002122:	202a      	movs	r0, #42	; 0x2a
 8002124:	f002 fc40 	bl	80049a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002128:	202a      	movs	r0, #42	; 0x2a
 800212a:	f002 fc75 	bl	8004a18 <HAL_NVIC_EnableIRQ>
}
 800212e:	e7d1      	b.n	80020d4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8002130:	f7ff fe70 	bl	8001e14 <Error_Handler>
 8002134:	e7da      	b.n	80020ec <HAL_RTC_MspInit+0x30>
 8002136:	bf00      	nop
 8002138:	40002800 	.word	0x40002800

0800213c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800213c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800213e:	4810      	ldr	r0, [pc, #64]	; (8002180 <MX_SPI1_Init+0x44>)
 8002140:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MX_SPI1_Init+0x48>)
 8002142:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002144:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002148:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800214a:	2300      	movs	r3, #0
 800214c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800214e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002152:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002154:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002156:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800215e:	2238      	movs	r2, #56	; 0x38
 8002160:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002162:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002164:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002166:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002168:	2207      	movs	r2, #7
 800216a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800216c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800216e:	2308      	movs	r3, #8
 8002170:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002172:	f004 ff62 	bl	800703a <HAL_SPI_Init>
 8002176:	b900      	cbnz	r0, 800217a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002178:	bd08      	pop	{r3, pc}
    Error_Handler();
 800217a:	f7ff fe4b 	bl	8001e14 <Error_Handler>
}
 800217e:	e7fb      	b.n	8002178 <MX_SPI1_Init+0x3c>
 8002180:	20000524 	.word	0x20000524
 8002184:	40013000 	.word	0x40013000

08002188 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002188:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800218a:	4810      	ldr	r0, [pc, #64]	; (80021cc <MX_SPI2_Init+0x44>)
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <MX_SPI2_Init+0x48>)
 800218e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002190:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002194:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002196:	2300      	movs	r3, #0
 8002198:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800219a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800219e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021aa:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ac:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ae:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021b2:	2207      	movs	r2, #7
 80021b4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021b6:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021b8:	2308      	movs	r3, #8
 80021ba:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021bc:	f004 ff3d 	bl	800703a <HAL_SPI_Init>
 80021c0:	b900      	cbnz	r0, 80021c4 <MX_SPI2_Init+0x3c>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80021c4:	f7ff fe26 	bl	8001e14 <Error_Handler>
}
 80021c8:	e7fb      	b.n	80021c2 <MX_SPI2_Init+0x3a>
 80021ca:	bf00      	nop
 80021cc:	20000588 	.word	0x20000588
 80021d0:	40003800 	.word	0x40003800

080021d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	b09b      	sub	sp, #108	; 0x6c
 80021d8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	2100      	movs	r1, #0
 80021dc:	9115      	str	r1, [sp, #84]	; 0x54
 80021de:	9116      	str	r1, [sp, #88]	; 0x58
 80021e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80021e2:	9118      	str	r1, [sp, #96]	; 0x60
 80021e4:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e6:	2238      	movs	r2, #56	; 0x38
 80021e8:	a807      	add	r0, sp, #28
 80021ea:	f015 f891 	bl	8017310 <memset>
  if(spiHandle->Instance==SPI1)
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	4a4b      	ldr	r2, [pc, #300]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_SPI_MspInit+0x2c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80021f6:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <HAL_SPI_MspInit+0x150>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d037      	beq.n	800226c <HAL_SPI_MspInit+0x98>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80021fc:	b01b      	add	sp, #108	; 0x6c
 80021fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SET_BIT(RCC->APB2ENR, Periphs);
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002206:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800220a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800220c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800220e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002212:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002214:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002218:	f042 0202 	orr.w	r2, r2, #2
 800221c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800221e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002220:	f002 0202 	and.w	r2, r2, #2
 8002224:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002226:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002238:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800223a:	2308      	movs	r3, #8
 800223c:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2602      	movs	r6, #2
 8002240:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002242:	2501      	movs	r5, #1
 8002244:	9517      	str	r5, [sp, #92]	; 0x5c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002246:	2405      	movs	r4, #5
 8002248:	9419      	str	r4, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	a915      	add	r1, sp, #84	; 0x54
 800224c:	4836      	ldr	r0, [pc, #216]	; (8002328 <HAL_SPI_MspInit+0x154>)
 800224e:	f002 ff63 	bl	8005118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002252:	23c0      	movs	r3, #192	; 0xc0
 8002254:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002258:	9517      	str	r5, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800225e:	9419      	str	r4, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	a915      	add	r1, sp, #84	; 0x54
 8002262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002266:	f002 ff57 	bl	8005118 <HAL_GPIO_Init>
 800226a:	e7c7      	b.n	80021fc <HAL_SPI_MspInit+0x28>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800226c:	2310      	movs	r3, #16
 800226e:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002274:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002276:	a807      	add	r0, sp, #28
 8002278:	f004 fa2a 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 800227c:	2800      	cmp	r0, #0
 800227e:	d14b      	bne.n	8002318 <HAL_SPI_MspInit+0x144>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800228a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800228c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800228e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002292:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
 8002294:	9a06      	ldr	r2, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002298:	f042 0202 	orr.w	r2, r2, #2
 800229c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800229e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022a0:	f002 0202 	and.w	r2, r2, #2
 80022a4:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 80022a6:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022b2:	f002 0201 	and.w	r2, r2, #1
 80022b6:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80022b8:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022bc:	f042 0204 	orr.w	r2, r2, #4
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80022ca:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d0:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2402      	movs	r4, #2
 80022d4:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d6:	2601      	movs	r6, #1
 80022d8:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2500      	movs	r5, #0
 80022dc:	9518      	str	r5, [sp, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022de:	2705      	movs	r7, #5
 80022e0:	9719      	str	r7, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	a915      	add	r1, sp, #84	; 0x54
 80022e4:	4810      	ldr	r0, [pc, #64]	; (8002328 <HAL_SPI_MspInit+0x154>)
 80022e6:	f002 ff17 	bl	8005118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ee:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f2:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	9518      	str	r5, [sp, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022f6:	9719      	str	r7, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	a915      	add	r1, sp, #84	; 0x54
 80022fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fe:	f002 ff0b 	bl	8005118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002302:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002306:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	9518      	str	r5, [sp, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800230a:	2303      	movs	r3, #3
 800230c:	9319      	str	r3, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230e:	a915      	add	r1, sp, #84	; 0x54
 8002310:	4806      	ldr	r0, [pc, #24]	; (800232c <HAL_SPI_MspInit+0x158>)
 8002312:	f002 ff01 	bl	8005118 <HAL_GPIO_Init>
}
 8002316:	e771      	b.n	80021fc <HAL_SPI_MspInit+0x28>
      Error_Handler();
 8002318:	f7ff fd7c 	bl	8001e14 <Error_Handler>
 800231c:	e7b0      	b.n	8002280 <HAL_SPI_MspInit+0xac>
 800231e:	bf00      	nop
 8002320:	40013000 	.word	0x40013000
 8002324:	40003800 	.word	0x40003800
 8002328:	48000400 	.word	0x48000400
 800232c:	48000800 	.word	0x48000800

08002330 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002330:	4770      	bx	lr

08002332 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <NMI_Handler>

08002334 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <HardFault_Handler>

08002336 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <MemManage_Handler>

08002338 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <BusFault_Handler>

0800233a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <UsageFault_Handler>

0800233c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233c:	4770      	bx	lr

0800233e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233e:	4770      	bx	lr

08002340 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002340:	4770      	bx	lr

08002342 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002342:	4770      	bx	lr

08002344 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002346:	4802      	ldr	r0, [pc, #8]	; (8002350 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8002348:	f004 fd40 	bl	8006dcc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800234c:	bd08      	pop	{r3, pc}
 800234e:	bf00      	nop
 8002350:	200004ec 	.word	0x200004ec

08002354 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002354:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8002356:	2001      	movs	r0, #1
 8002358:	f003 f83c 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800235c:	bd08      	pop	{r3, pc}

0800235e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800235e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8002360:	2002      	movs	r0, #2
 8002362:	f003 f837 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002366:	bd08      	pop	{r3, pc}

08002368 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002368:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800236a:	4802      	ldr	r0, [pc, #8]	; (8002374 <DMA1_Channel1_IRQHandler+0xc>)
 800236c:	f002 fcfe 	bl	8004d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002370:	bd08      	pop	{r3, pc}
 8002372:	bf00      	nop
 8002374:	20000608 	.word	0x20000608

08002378 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002378:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800237a:	4802      	ldr	r0, [pc, #8]	; (8002384 <DMA1_Channel2_IRQHandler+0xc>)
 800237c:	f002 fcf6 	bl	8004d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002380:	bd08      	pop	{r3, pc}
 8002382:	bf00      	nop
 8002384:	20000668 	.word	0x20000668

08002388 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8002388:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 800238a:	2040      	movs	r0, #64	; 0x40
 800238c:	f003 f822 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002390:	bd08      	pop	{r3, pc}
	...

08002394 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002394:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <RTC_Alarm_IRQHandler+0xc>)
 8002398:	f004 fb24 	bl	80069e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800239c:	bd08      	pop	{r3, pc}
 800239e:	bf00      	nop
 80023a0:	200004ec 	.word	0x200004ec

080023a4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80023a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80023a6:	4802      	ldr	r0, [pc, #8]	; (80023b0 <SUBGHZ_Radio_IRQHandler+0xc>)
 80023a8:	f005 fc8e 	bl	8007cc8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80023ac:	bd08      	pop	{r3, pc}
 80023ae:	bf00      	nop
 80023b0:	200005ec 	.word	0x200005ec

080023b4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80023b4:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_SUBGHZ_Init+0x18>)
 80023b8:	2308      	movs	r3, #8
 80023ba:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80023bc:	f005 fa06 	bl	80077cc <HAL_SUBGHZ_Init>
 80023c0:	b900      	cbnz	r0, 80023c4 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80023c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80023c4:	f7ff fd26 	bl	8001e14 <Error_Handler>
}
 80023c8:	e7fb      	b.n	80023c2 <MX_SUBGHZ_Init+0xe>
 80023ca:	bf00      	nop
 80023cc:	200005ec 	.word	0x200005ec

080023d0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80023d0:	b500      	push	{lr}
 80023d2:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80023e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80023e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	4611      	mov	r1, r2
 80023ee:	2032      	movs	r0, #50	; 0x32
 80023f0:	f002 fada 	bl	80049a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80023f4:	2032      	movs	r0, #50	; 0x32
 80023f6:	f002 fb0f 	bl	8004a18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80023fa:	b003      	add	sp, #12
 80023fc:	f85d fb04 	ldr.w	pc, [sp], #4

08002400 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002400:	b40c      	push	{r2, r3}
 8002402:	b500      	push	{lr}
 8002404:	b083      	sub	sp, #12
 8002406:	ab04      	add	r3, sp, #16
 8002408:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800240c:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800240e:	f013 f859 	bl	80154c4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002412:	b003      	add	sp, #12
 8002414:	f85d eb04 	ldr.w	lr, [sp], #4
 8002418:	b002      	add	sp, #8
 800241a:	4770      	bx	lr

0800241c <TimestampNow>:
{
 800241c:	b530      	push	{r4, r5, lr}
 800241e:	b085      	sub	sp, #20
 8002420:	4604      	mov	r4, r0
 8002422:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8002424:	a802      	add	r0, sp, #8
 8002426:	f012 fdc1 	bl	8014fac <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800242a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	9b02      	ldr	r3, [sp, #8]
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <TimestampNow+0x2c>)
 8002434:	2110      	movs	r1, #16
 8002436:	4620      	mov	r0, r4
 8002438:	f7ff ffe2 	bl	8002400 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800243c:	4620      	mov	r0, r4
 800243e:	f7fd feef 	bl	8000220 <strlen>
 8002442:	8028      	strh	r0, [r5, #0]
}
 8002444:	b005      	add	sp, #20
 8002446:	bd30      	pop	{r4, r5, pc}
 8002448:	0801a06c 	.word	0x0801a06c

0800244c <SystemApp_Init>:
{
 800244c:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800244e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002452:	6893      	ldr	r3, [r2, #8]
 8002454:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002458:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800245a:	f012 fe2b 	bl	80150b4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800245e:	2401      	movs	r4, #1
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <SystemApp_Init+0x4c>)
 8002462:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8002464:	f000 f8bc 	bl	80025e0 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8002468:	f012 fad2 	bl	8014a10 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800246c:	480b      	ldr	r0, [pc, #44]	; (800249c <SystemApp_Init+0x50>)
 800246e:	f012 fae9 	bl	8014a44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <SystemApp_Init+0x54>)
 8002474:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002478:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800247a:	2002      	movs	r0, #2
 800247c:	f012 fae8 	bl	8014a50 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8002480:	f7ff f89c 	bl	80015bc <SYS_InitMeasurement>
  EnvSensors_Init();
 8002484:	f000 f90c 	bl	80026a0 <EnvSensors_Init>
  UTIL_LPM_Init();
 8002488:	f012 fbf2 	bl	8014c70 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800248c:	4621      	mov	r1, r4
 800248e:	4620      	mov	r0, r4
 8002490:	f012 fc0e 	bl	8014cb0 <UTIL_LPM_SetOffMode>
}
 8002494:	bd10      	pop	{r4, pc}
 8002496:	bf00      	nop
 8002498:	200005f8 	.word	0x200005f8
 800249c:	0800241d 	.word	0x0800241d
 80024a0:	58004000 	.word	0x58004000

080024a4 <UTIL_SEQ_Idle>:
{
 80024a4:	b508      	push	{r3, lr}
    main_process();
 80024a6:	f7ff fd43 	bl	8001f30 <main_process>
}
 80024aa:	bd08      	pop	{r3, pc}

080024ac <GetBatteryLevel>:
{
 80024ac:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80024ae:	f7ff f88d 	bl	80015cc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80024b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80024b6:	4298      	cmp	r0, r3
 80024b8:	d80d      	bhi.n	80024d6 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80024ba:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80024be:	d30c      	bcc.n	80024da <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80024c0:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80024c4:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80024c8:	0040      	lsls	r0, r0, #1
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <GetBatteryLevel+0x34>)
 80024cc:	fba3 3000 	umull	r3, r0, r3, r0
 80024d0:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80024d4:	e000      	b.n	80024d8 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80024d6:	20fe      	movs	r0, #254	; 0xfe
}
 80024d8:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80024da:	2000      	movs	r0, #0
 80024dc:	e7fc      	b.n	80024d8 <GetBatteryLevel+0x2c>
 80024de:	bf00      	nop
 80024e0:	1b4e81b5 	.word	0x1b4e81b5

080024e4 <GetTemperatureLevel>:
{
 80024e4:	b500      	push	{lr}
 80024e6:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80024e8:	4668      	mov	r0, sp
 80024ea:	f000 f8bd 	bl	8002668 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80024ee:	9801      	ldr	r0, [sp, #4]
 80024f0:	f7fe fe00 	bl	80010f4 <__aeabi_f2iz>
}
 80024f4:	b200      	sxth	r0, r0
 80024f6:	b007      	add	sp, #28
 80024f8:	f85d fb04 	ldr.w	pc, [sp], #4

080024fc <GetUniqueId>:
{
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <GetUniqueId+0x68>)
 8002502:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800250a:	d013      	beq.n	8002534 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 800250c:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 800250e:	0a1a      	lsrs	r2, r3, #8
 8002510:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8002512:	0c1a      	lsrs	r2, r3, #16
 8002514:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8002516:	0e1b      	lsrs	r3, r3, #24
 8002518:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <GetUniqueId+0x68>)
 800251c:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8002520:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002522:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8002526:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8002528:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 800252a:	0c1a      	lsrs	r2, r3, #16
 800252c:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 800252e:	0e1b      	lsrs	r3, r3, #24
 8002530:	7003      	strb	r3, [r0, #0]
}
 8002532:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002534:	f001 fd24 	bl	8003f80 <HAL_GetUIDw0>
 8002538:	4605      	mov	r5, r0
 800253a:	f001 fd2d 	bl	8003f98 <HAL_GetUIDw2>
 800253e:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002540:	f001 fd24 	bl	8003f8c <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8002544:	0e2b      	lsrs	r3, r5, #24
 8002546:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8002548:	0c2b      	lsrs	r3, r5, #16
 800254a:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 800254c:	0a2b      	lsrs	r3, r5, #8
 800254e:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8002550:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8002552:	0e03      	lsrs	r3, r0, #24
 8002554:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8002556:	0c03      	lsrs	r3, r0, #16
 8002558:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 800255a:	0a03      	lsrs	r3, r0, #8
 800255c:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800255e:	7020      	strb	r0, [r4, #0]
 8002560:	e7e7      	b.n	8002532 <GetUniqueId+0x36>
 8002562:	bf00      	nop
 8002564:	1fff7000 	.word	0x1fff7000

08002568 <GetDevAddr>:
{
 8002568:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <GetDevAddr+0x2c>)
 800256c:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8002570:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002576:	d000      	beq.n	800257a <GetDevAddr+0x12>
}
 8002578:	bd38      	pop	{r3, r4, r5, pc}
 800257a:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800257c:	f001 fd00 	bl	8003f80 <HAL_GetUIDw0>
 8002580:	4605      	mov	r5, r0
 8002582:	f001 fd03 	bl	8003f8c <HAL_GetUIDw1>
 8002586:	4045      	eors	r5, r0
 8002588:	f001 fd06 	bl	8003f98 <HAL_GetUIDw2>
 800258c:	4045      	eors	r5, r0
 800258e:	6025      	str	r5, [r4, #0]
}
 8002590:	e7f2      	b.n	8002578 <GetDevAddr+0x10>
 8002592:	bf00      	nop
 8002594:	1fff7000 	.word	0x1fff7000

08002598 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002598:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800259a:	2101      	movs	r1, #1
 800259c:	2002      	movs	r0, #2
 800259e:	f012 fb71 	bl	8014c84 <UTIL_LPM_SetStopMode>
}
 80025a2:	bd08      	pop	{r3, pc}

080025a4 <UTIL_ADV_TRACE_PostSendHook>:
{
 80025a4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80025a6:	2100      	movs	r1, #0
 80025a8:	2002      	movs	r0, #2
 80025aa:	f012 fb6b 	bl	8014c84 <UTIL_LPM_SetStopMode>
}
 80025ae:	bd08      	pop	{r3, pc}

080025b0 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80025b0:	2000      	movs	r0, #0
 80025b2:	4770      	bx	lr

080025b4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80025b4:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_GetTick+0x14>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	b90b      	cbnz	r3, 80025c0 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80025bc:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80025be:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80025c0:	f000 f8f8 	bl	80027b4 <TIMER_IF_GetTimerValue>
 80025c4:	e7fb      	b.n	80025be <HAL_GetTick+0xa>
 80025c6:	bf00      	nop
 80025c8:	200005f8 	.word	0x200005f8

080025cc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80025cc:	b500      	push	{lr}
 80025ce:	b083      	sub	sp, #12
 80025d0:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80025d2:	9801      	ldr	r0, [sp, #4]
 80025d4:	f000 f9d4 	bl	8002980 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80025d8:	b003      	add	sp, #12
 80025da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080025e0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80025e4:	f001 fcde 	bl	8003fa4 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80025e8:	f001 fce4 	bl	8003fb4 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80025ec:	f001 fcea 	bl	8003fc4 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80025f0:	2400      	movs	r4, #0
 80025f2:	9403      	str	r4, [sp, #12]
 80025f4:	9404      	str	r4, [sp, #16]
 80025f6:	9405      	str	r4, [sp, #20]
 80025f8:	9406      	str	r4, [sp, #24]
 80025fa:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800260a:	f042 0202 	orr.w	r2, r2, #2
 800260e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002612:	f002 0202 	and.w	r2, r2, #2
 8002616:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002618:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800261a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800261c:	f042 0202 	orr.w	r2, r2, #2
 8002620:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800262a:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800262c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8002630:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002632:	4d0c      	ldr	r5, [pc, #48]	; (8002664 <DBG_Init+0x84>)
 8002634:	a903      	add	r1, sp, #12
 8002636:	4628      	mov	r0, r5
 8002638:	f002 fd6e 	bl	8005118 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 800263c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8002640:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002642:	a903      	add	r1, sp, #12
 8002644:	4628      	mov	r0, r5
 8002646:	f002 fd67 	bl	8005118 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800264a:	4622      	mov	r2, r4
 800264c:	4639      	mov	r1, r7
 800264e:	4628      	mov	r0, r5
 8002650:	f002 feb2 	bl	80053b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002654:	4622      	mov	r2, r4
 8002656:	4631      	mov	r1, r6
 8002658:	4628      	mov	r0, r5
 800265a:	f002 fead 	bl	80053b8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800265e:	b009      	add	sp, #36	; 0x24
 8002660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002662:	bf00      	nop
 8002664:	48000400 	.word	0x48000400

08002668 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002668:	b510      	push	{r4, lr}
 800266a:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 800266c:	f7fe ffd0 	bl	8001610 <SYS_GetTemperatureLevel>
 8002670:	f340 200f 	sbfx	r0, r0, #8, #16
 8002674:	f7fe fb9a 	bl	8000dac <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <EnvSensors_Read+0x28>)
 800267a:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800267c:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <EnvSensors_Read+0x2c>)
 8002680:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <EnvSensors_Read+0x30>)
 8002684:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <EnvSensors_Read+0x34>)
 8002688:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 800268a:	2000      	movs	r0, #0
 800268c:	bd10      	pop	{r4, pc}
 800268e:	bf00      	nop
 8002690:	42480000 	.word	0x42480000
 8002694:	447a0000 	.word	0x447a0000
 8002698:	003e090d 	.word	0x003e090d
 800269c:	000503ab 	.word	0x000503ab

080026a0 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80026a0:	2000      	movs	r0, #0
 80026a2:	4770      	bx	lr

080026a4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80026a4:	2001      	movs	r0, #1
 80026a6:	4770      	bx	lr

080026a8 <_kill>:

int _kill(int pid, int sig)
{
 80026a8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026aa:	f014 fe3d 	bl	8017328 <__errno>
 80026ae:	2316      	movs	r3, #22
 80026b0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80026b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b6:	bd08      	pop	{r3, pc}

080026b8 <_exit>:

void _exit (int status)
{
 80026b8:	b508      	push	{r3, lr}
  _kill(status, -1);
 80026ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026be:	f7ff fff3 	bl	80026a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026c2:	e7fe      	b.n	80026c2 <_exit+0xa>

080026c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	460c      	mov	r4, r1
 80026c8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	2500      	movs	r5, #0
 80026cc:	e006      	b.n	80026dc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80026ce:	f3af 8000 	nop.w
 80026d2:	4621      	mov	r1, r4
 80026d4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80026da:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026dc:	42b5      	cmp	r5, r6
 80026de:	dbf6      	blt.n	80026ce <_read+0xa>
  }

  return len;
}
 80026e0:	4630      	mov	r0, r6
 80026e2:	bd70      	pop	{r4, r5, r6, pc}

080026e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	460c      	mov	r4, r1
 80026e8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ea:	2500      	movs	r5, #0
 80026ec:	e004      	b.n	80026f8 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80026ee:	f814 0b01 	ldrb.w	r0, [r4], #1
 80026f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	3501      	adds	r5, #1
 80026f8:	42b5      	cmp	r5, r6
 80026fa:	dbf8      	blt.n	80026ee <_write+0xa>
  }
  return len;
}
 80026fc:	4630      	mov	r0, r6
 80026fe:	bd70      	pop	{r4, r5, r6, pc}

08002700 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002704:	4770      	bx	lr

08002706 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800270a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800270c:	2000      	movs	r0, #0
 800270e:	4770      	bx	lr

08002710 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002710:	2001      	movs	r0, #1
 8002712:	4770      	bx	lr

08002714 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002714:	2000      	movs	r0, #0
 8002716:	4770      	bx	lr

08002718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002718:	b510      	push	{r4, lr}
 800271a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800271c:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <_sbrk+0x38>)
 800271e:	490d      	ldr	r1, [pc, #52]	; (8002754 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <_sbrk+0x40>)
 8002722:	6800      	ldr	r0, [r0, #0]
 8002724:	b140      	cbz	r0, 8002738 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002726:	480c      	ldr	r0, [pc, #48]	; (8002758 <_sbrk+0x40>)
 8002728:	6800      	ldr	r0, [r0, #0]
 800272a:	4403      	add	r3, r0
 800272c:	1a52      	subs	r2, r2, r1
 800272e:	4293      	cmp	r3, r2
 8002730:	d806      	bhi.n	8002740 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <_sbrk+0x40>)
 8002734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002736:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002738:	4807      	ldr	r0, [pc, #28]	; (8002758 <_sbrk+0x40>)
 800273a:	4c08      	ldr	r4, [pc, #32]	; (800275c <_sbrk+0x44>)
 800273c:	6004      	str	r4, [r0, #0]
 800273e:	e7f2      	b.n	8002726 <_sbrk+0xe>
    errno = ENOMEM;
 8002740:	f014 fdf2 	bl	8017328 <__errno>
 8002744:	230c      	movs	r3, #12
 8002746:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800274c:	e7f3      	b.n	8002736 <_sbrk+0x1e>
 800274e:	bf00      	nop
 8002750:	20008000 	.word	0x20008000
 8002754:	00000800 	.word	0x00000800
 8002758:	200005fc 	.word	0x200005fc
 800275c:	20001e58 	.word	0x20001e58

08002760 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <TIMER_IF_SetTimerContext+0x1c>)
 8002762:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002764:	e001      	b.n	800276a <TIMER_IF_SetTimerContext+0xa>
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <TIMER_IF_SetTimerContext+0x1c>)
 8002768:	6898      	ldr	r0, [r3, #8]
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <TIMER_IF_SetTimerContext+0x1c>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4283      	cmp	r3, r0
 8002770:	d1f9      	bne.n	8002766 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8002772:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8002774:	4b02      	ldr	r3, [pc, #8]	; (8002780 <TIMER_IF_SetTimerContext+0x20>)
 8002776:	6018      	str	r0, [r3, #0]
}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40002800 	.word	0x40002800
 8002780:	20000604 	.word	0x20000604

08002784 <TIMER_IF_GetTimerContext>:
}
 8002784:	4b01      	ldr	r3, [pc, #4]	; (800278c <TIMER_IF_GetTimerContext+0x8>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000604 	.word	0x20000604

08002790 <TIMER_IF_GetTimerElapsedTime>:
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002792:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002794:	e001      	b.n	800279a <TIMER_IF_GetTimerElapsedTime+0xa>
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002798:	6898      	ldr	r0, [r3, #8]
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4283      	cmp	r3, r0
 80027a0:	d1f9      	bne.n	8002796 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 80027a2:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <TIMER_IF_GetTimerElapsedTime+0x20>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	1ac0      	subs	r0, r0, r3
 80027aa:	4770      	bx	lr
 80027ac:	40002800 	.word	0x40002800
 80027b0:	20000604 	.word	0x20000604

080027b4 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <TIMER_IF_GetTimerValue+0x20>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b153      	cbz	r3, 80027d0 <TIMER_IF_GetTimerValue+0x1c>
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <TIMER_IF_GetTimerValue+0x24>)
 80027bc:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80027be:	e001      	b.n	80027c4 <TIMER_IF_GetTimerValue+0x10>
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <TIMER_IF_GetTimerValue+0x24>)
 80027c2:	6898      	ldr	r0, [r3, #8]
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <TIMER_IF_GetTimerValue+0x24>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4283      	cmp	r3, r0
 80027ca:	d1f9      	bne.n	80027c0 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 80027cc:	43c0      	mvns	r0, r0
 80027ce:	4770      	bx	lr
  uint32_t ret = 0;
 80027d0:	2000      	movs	r0, #0
}
 80027d2:	4770      	bx	lr
 80027d4:	20000600 	.word	0x20000600
 80027d8:	40002800 	.word	0x40002800

080027dc <TIMER_IF_GetMinimumTimeout>:
}
 80027dc:	2003      	movs	r0, #3
 80027de:	4770      	bx	lr

080027e0 <TIMER_IF_Convert_ms2Tick>:
{
 80027e0:	b508      	push	{r3, lr}
 80027e2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80027e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e8:	2300      	movs	r3, #0
 80027ea:	0280      	lsls	r0, r0, #10
 80027ec:	0d89      	lsrs	r1, r1, #22
 80027ee:	f7fe fca7 	bl	8001140 <__aeabi_uldivmod>
}
 80027f2:	bd08      	pop	{r3, pc}

080027f4 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80027f4:	0ec2      	lsrs	r2, r0, #27
 80027f6:	0143      	lsls	r3, r0, #5
 80027f8:	1a1b      	subs	r3, r3, r0
 80027fa:	f162 0200 	sbc.w	r2, r2, #0
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	181b      	adds	r3, r3, r0
 8002808:	f142 0000 	adc.w	r0, r2, #0
 800280c:	00c0      	lsls	r0, r0, #3
 800280e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002812:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002816:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 800281a:	4770      	bx	lr

0800281c <TIMER_IF_StopTimer>:
{
 800281c:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <TIMER_IF_StopTimer+0x20>)
 8002820:	2201      	movs	r2, #1
 8002822:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002824:	4c06      	ldr	r4, [pc, #24]	; (8002840 <TIMER_IF_StopTimer+0x24>)
 8002826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800282a:	4620      	mov	r0, r4
 800282c:	f004 f89a 	bl	8006964 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002834:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002836:	2000      	movs	r0, #0
 8002838:	bd10      	pop	{r4, pc}
 800283a:	bf00      	nop
 800283c:	40002800 	.word	0x40002800
 8002840:	200004ec 	.word	0x200004ec

08002844 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8002844:	b508      	push	{r3, lr}
 8002846:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002848:	2102      	movs	r1, #2
 800284a:	4802      	ldr	r0, [pc, #8]	; (8002854 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 800284c:	f004 fad3 	bl	8006df6 <HAL_RTCEx_BKUPWrite>
}
 8002850:	bd08      	pop	{r3, pc}
 8002852:	bf00      	nop
 8002854:	200004ec 	.word	0x200004ec

08002858 <TIMER_IF_Init>:
{
 8002858:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <TIMER_IF_Init+0x40>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b10b      	cbz	r3, 8002864 <TIMER_IF_Init+0xc>
}
 8002860:	2000      	movs	r0, #0
 8002862:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002864:	4c0d      	ldr	r4, [pc, #52]	; (800289c <TIMER_IF_Init+0x44>)
 8002866:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800286a:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 800286c:	f7ff fbe8 	bl	8002040 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8002870:	f7ff ffd4 	bl	800281c <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002878:	4620      	mov	r0, r4
 800287a:	f004 f873 	bl	8006964 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800287e:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002880:	4620      	mov	r0, r4
 8002882:	f004 fa57 	bl	8006d34 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002886:	2000      	movs	r0, #0
 8002888:	f7ff ffdc 	bl	8002844 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 800288c:	f7ff ff68 	bl	8002760 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8002890:	4b01      	ldr	r3, [pc, #4]	; (8002898 <TIMER_IF_Init+0x40>)
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e7e3      	b.n	8002860 <TIMER_IF_Init+0x8>
 8002898:	20000600 	.word	0x20000600
 800289c:	200004ec 	.word	0x200004ec

080028a0 <TIMER_IF_BkUp_Write_Seconds>:
{
 80028a0:	b508      	push	{r3, lr}
 80028a2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80028a4:	2100      	movs	r1, #0
 80028a6:	4802      	ldr	r0, [pc, #8]	; (80028b0 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80028a8:	f004 faa5 	bl	8006df6 <HAL_RTCEx_BKUPWrite>
}
 80028ac:	bd08      	pop	{r3, pc}
 80028ae:	bf00      	nop
 80028b0:	200004ec 	.word	0x200004ec

080028b4 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80028b4:	b508      	push	{r3, lr}
 80028b6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80028b8:	2101      	movs	r1, #1
 80028ba:	4802      	ldr	r0, [pc, #8]	; (80028c4 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80028bc:	f004 fa9b 	bl	8006df6 <HAL_RTCEx_BKUPWrite>
}
 80028c0:	bd08      	pop	{r3, pc}
 80028c2:	bf00      	nop
 80028c4:	200004ec 	.word	0x200004ec

080028c8 <TIMER_IF_StartTimer>:
{
 80028c8:	b510      	push	{r4, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80028ce:	222c      	movs	r2, #44	; 0x2c
 80028d0:	2100      	movs	r1, #0
 80028d2:	a801      	add	r0, sp, #4
 80028d4:	f014 fd1c 	bl	8017310 <memset>
  TIMER_IF_StopTimer();
 80028d8:	f7ff ffa0 	bl	800281c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <TIMER_IF_StartTimer+0x48>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80028e2:	2300      	movs	r3, #0
 80028e4:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80028e6:	43e4      	mvns	r4, r4
 80028e8:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80028ea:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80028ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80028f0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80028f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80028f8:	2201      	movs	r2, #1
 80028fa:	a901      	add	r1, sp, #4
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <TIMER_IF_StartTimer+0x4c>)
 80028fe:	f004 f95d 	bl	8006bbc <HAL_RTC_SetAlarm_IT>
 8002902:	b910      	cbnz	r0, 800290a <TIMER_IF_StartTimer+0x42>
}
 8002904:	2000      	movs	r0, #0
 8002906:	b00c      	add	sp, #48	; 0x30
 8002908:	bd10      	pop	{r4, pc}
    Error_Handler();
 800290a:	f7ff fa83 	bl	8001e14 <Error_Handler>
 800290e:	e7f9      	b.n	8002904 <TIMER_IF_StartTimer+0x3c>
 8002910:	20000604 	.word	0x20000604
 8002914:	200004ec 	.word	0x200004ec

08002918 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002918:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800291a:	2102      	movs	r1, #2
 800291c:	4801      	ldr	r0, [pc, #4]	; (8002924 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800291e:	f004 fa71 	bl	8006e04 <HAL_RTCEx_BKUPRead>
}
 8002922:	bd08      	pop	{r3, pc}
 8002924:	200004ec 	.word	0x200004ec

08002928 <TIMER_IF_GetTime>:
{
 8002928:	b538      	push	{r3, r4, r5, lr}
 800292a:	4605      	mov	r5, r0
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <TIMER_IF_GetTime+0x34>)
 800292e:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002930:	e001      	b.n	8002936 <TIMER_IF_GetTime+0xe>
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <TIMER_IF_GetTime+0x34>)
 8002934:	689c      	ldr	r4, [r3, #8]
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <TIMER_IF_GetTime+0x34>)
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	42a2      	cmp	r2, r4
 800293c:	d1f9      	bne.n	8002932 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 800293e:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002940:	f7ff ffea 	bl	8002918 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002944:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002946:	0aa4      	lsrs	r4, r4, #10
 8002948:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800294c:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002950:	f7ff ff50 	bl	80027f4 <TIMER_IF_Convert_Tick2ms>
 8002954:	8028      	strh	r0, [r5, #0]
}
 8002956:	4620      	mov	r0, r4
 8002958:	bd38      	pop	{r3, r4, r5, pc}
 800295a:	bf00      	nop
 800295c:	40002800 	.word	0x40002800

08002960 <TIMER_IF_BkUp_Read_Seconds>:
{
 8002960:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002962:	2100      	movs	r1, #0
 8002964:	4801      	ldr	r0, [pc, #4]	; (800296c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002966:	f004 fa4d 	bl	8006e04 <HAL_RTCEx_BKUPRead>
}
 800296a:	bd08      	pop	{r3, pc}
 800296c:	200004ec 	.word	0x200004ec

08002970 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002970:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002972:	2101      	movs	r1, #1
 8002974:	4801      	ldr	r0, [pc, #4]	; (800297c <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002976:	f004 fa45 	bl	8006e04 <HAL_RTCEx_BKUPRead>
}
 800297a:	bd08      	pop	{r3, pc}
 800297c:	200004ec 	.word	0x200004ec

08002980 <TIMER_IF_DelayMs>:
{
 8002980:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002982:	f7ff ff2d 	bl	80027e0 <TIMER_IF_Convert_ms2Tick>
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <TIMER_IF_DelayMs+0x3c>)
 8002988:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800298a:	e001      	b.n	8002990 <TIMER_IF_DelayMs+0x10>
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <TIMER_IF_DelayMs+0x3c>)
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <TIMER_IF_DelayMs+0x3c>)
 8002992:	6892      	ldr	r2, [r2, #8]
 8002994:	428a      	cmp	r2, r1
 8002996:	d1f9      	bne.n	800298c <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8002998:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800299a:	e00a      	b.n	80029b2 <TIMER_IF_DelayMs+0x32>
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <TIMER_IF_DelayMs+0x3c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a06      	ldr	r2, [pc, #24]	; (80029bc <TIMER_IF_DelayMs+0x3c>)
 80029a2:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1f9      	bne.n	800299c <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80029a8:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80029aa:	1a5b      	subs	r3, r3, r1
 80029ac:	4283      	cmp	r3, r0
 80029ae:	d203      	bcs.n	80029b8 <TIMER_IF_DelayMs+0x38>
    __NOP();
 80029b0:	bf00      	nop
 80029b2:	4b02      	ldr	r3, [pc, #8]	; (80029bc <TIMER_IF_DelayMs+0x3c>)
 80029b4:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80029b6:	e7f3      	b.n	80029a0 <TIMER_IF_DelayMs+0x20>
}
 80029b8:	bd08      	pop	{r3, pc}
 80029ba:	bf00      	nop
 80029bc:	40002800 	.word	0x40002800

080029c0 <HAL_RTC_AlarmAEventCallback>:
{
 80029c0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80029c2:	f012 fc9b 	bl	80152fc <UTIL_TIMER_IRQ_Handler>
}
 80029c6:	bd08      	pop	{r3, pc}

080029c8 <HAL_RTCEx_SSRUEventCallback>:
{
 80029c8:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80029ca:	f7ff ffa5 	bl	8002918 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80029ce:	3001      	adds	r0, #1
 80029d0:	f7ff ff38 	bl	8002844 <TIMER_IF_BkUp_Write_MSBticks>
}
 80029d4:	bd08      	pop	{r3, pc}
	...

080029d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029d8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029da:	4817      	ldr	r0, [pc, #92]	; (8002a38 <MX_USART1_UART_Init+0x60>)
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <MX_USART1_UART_Init+0x64>)
 80029de:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80029e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80029e4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029e6:	2300      	movs	r3, #0
 80029e8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029ea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029ec:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029ee:	220c      	movs	r2, #12
 80029f0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029f8:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029fc:	f006 f868 	bl	8008ad0 <HAL_UART_Init>
 8002a00:	b970      	cbnz	r0, 8002a20 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a02:	2100      	movs	r1, #0
 8002a04:	480c      	ldr	r0, [pc, #48]	; (8002a38 <MX_USART1_UART_Init+0x60>)
 8002a06:	f006 fa10 	bl	8008e2a <HAL_UARTEx_SetTxFifoThreshold>
 8002a0a:	b960      	cbnz	r0, 8002a26 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	480a      	ldr	r0, [pc, #40]	; (8002a38 <MX_USART1_UART_Init+0x60>)
 8002a10:	f006 fa30 	bl	8008e74 <HAL_UARTEx_SetRxFifoThreshold>
 8002a14:	b950      	cbnz	r0, 8002a2c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a16:	4808      	ldr	r0, [pc, #32]	; (8002a38 <MX_USART1_UART_Init+0x60>)
 8002a18:	f006 f9e8 	bl	8008dec <HAL_UARTEx_DisableFifoMode>
 8002a1c:	b948      	cbnz	r0, 8002a32 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a1e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a20:	f7ff f9f8 	bl	8001e14 <Error_Handler>
 8002a24:	e7ed      	b.n	8002a02 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8002a26:	f7ff f9f5 	bl	8001e14 <Error_Handler>
 8002a2a:	e7ef      	b.n	8002a0c <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8002a2c:	f7ff f9f2 	bl	8001e14 <Error_Handler>
 8002a30:	e7f1      	b.n	8002a16 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8002a32:	f7ff f9ef 	bl	8001e14 <Error_Handler>
}
 8002a36:	e7f2      	b.n	8002a1e <MX_USART1_UART_Init+0x46>
 8002a38:	200006c8 	.word	0x200006c8
 8002a3c:	40013800 	.word	0x40013800

08002a40 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a40:	b530      	push	{r4, r5, lr}
 8002a42:	b099      	sub	sp, #100	; 0x64
 8002a44:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a46:	2100      	movs	r1, #0
 8002a48:	9113      	str	r1, [sp, #76]	; 0x4c
 8002a4a:	9114      	str	r1, [sp, #80]	; 0x50
 8002a4c:	9115      	str	r1, [sp, #84]	; 0x54
 8002a4e:	9116      	str	r1, [sp, #88]	; 0x58
 8002a50:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a52:	2238      	movs	r2, #56	; 0x38
 8002a54:	a805      	add	r0, sp, #20
 8002a56:	f014 fc5b 	bl	8017310 <memset>
  if(uartHandle->Instance==USART1)
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	4a57      	ldr	r2, [pc, #348]	; (8002bbc <HAL_UART_MspInit+0x17c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002a62:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <HAL_UART_MspInit+0x180>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d07a      	beq.n	8002b5e <HAL_UART_MspInit+0x11e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a68:	b019      	add	sp, #100	; 0x64
 8002a6a:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a70:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002a74:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a76:	a805      	add	r0, sp, #20
 8002a78:	f003 fe2a 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d15f      	bne.n	8002b40 <HAL_UART_MspInit+0x100>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a8e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a92:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002a94:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a98:	f042 0202 	orr.w	r2, r2, #2
 8002a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002aa6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002aa8:	23c0      	movs	r3, #192	; 0xc0
 8002aaa:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2500      	movs	r5, #0
 8002ab2:	9515      	str	r5, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab4:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	a913      	add	r1, sp, #76	; 0x4c
 8002abc:	4841      	ldr	r0, [pc, #260]	; (8002bc4 <HAL_UART_MspInit+0x184>)
 8002abe:	f002 fb2b 	bl	8005118 <HAL_GPIO_Init>
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_UART_MspInit+0x188>)
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ad2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002ad4:	483d      	ldr	r0, [pc, #244]	; (8002bcc <HAL_UART_MspInit+0x18c>)
 8002ad6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002ada:	3308      	adds	r3, #8
 8002adc:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002ade:	2311      	movs	r3, #17
 8002ae0:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ae2:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae4:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aea:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aec:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002aee:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002af0:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002af2:	f002 f821 	bl	8004b38 <HAL_DMA_Init>
 8002af6:	bb30      	cbnz	r0, 8002b46 <HAL_UART_MspInit+0x106>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002af8:	2110      	movs	r1, #16
 8002afa:	4834      	ldr	r0, [pc, #208]	; (8002bcc <HAL_UART_MspInit+0x18c>)
 8002afc:	f002 f9aa 	bl	8004e54 <HAL_DMA_ConfigChannelAttributes>
 8002b00:	bb20      	cbnz	r0, 8002b4c <HAL_UART_MspInit+0x10c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002b02:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_UART_MspInit+0x18c>)
 8002b04:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002b08:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002b0a:	4831      	ldr	r0, [pc, #196]	; (8002bd0 <HAL_UART_MspInit+0x190>)
 8002b0c:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_UART_MspInit+0x194>)
 8002b0e:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b10:	2312      	movs	r3, #18
 8002b12:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b14:	2310      	movs	r3, #16
 8002b16:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b20:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b22:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b24:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b26:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b28:	f002 f806 	bl	8004b38 <HAL_DMA_Init>
 8002b2c:	b988      	cbnz	r0, 8002b52 <HAL_UART_MspInit+0x112>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002b2e:	2110      	movs	r1, #16
 8002b30:	4827      	ldr	r0, [pc, #156]	; (8002bd0 <HAL_UART_MspInit+0x190>)
 8002b32:	f002 f98f 	bl	8004e54 <HAL_DMA_ConfigChannelAttributes>
 8002b36:	b978      	cbnz	r0, 8002b58 <HAL_UART_MspInit+0x118>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_UART_MspInit+0x190>)
 8002b3a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002b3c:	629c      	str	r4, [r3, #40]	; 0x28
 8002b3e:	e793      	b.n	8002a68 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8002b40:	f7ff f968 	bl	8001e14 <Error_Handler>
 8002b44:	e79c      	b.n	8002a80 <HAL_UART_MspInit+0x40>
      Error_Handler();
 8002b46:	f7ff f965 	bl	8001e14 <Error_Handler>
 8002b4a:	e7d5      	b.n	8002af8 <HAL_UART_MspInit+0xb8>
      Error_Handler();
 8002b4c:	f7ff f962 	bl	8001e14 <Error_Handler>
 8002b50:	e7d7      	b.n	8002b02 <HAL_UART_MspInit+0xc2>
      Error_Handler();
 8002b52:	f7ff f95f 	bl	8001e14 <Error_Handler>
 8002b56:	e7ea      	b.n	8002b2e <HAL_UART_MspInit+0xee>
      Error_Handler();
 8002b58:	f7ff f95c 	bl	8001e14 <Error_Handler>
 8002b5c:	e7ec      	b.n	8002b38 <HAL_UART_MspInit+0xf8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_UART_MspInit+0x198>)
 8002b64:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b66:	a805      	add	r0, sp, #20
 8002b68:	f003 fdb2 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 8002b6c:	bb18      	cbnz	r0, 8002bb6 <HAL_UART_MspInit+0x176>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b78:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002b7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b7c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002b80:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8002b82:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8002b94:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002b96:	230c      	movs	r3, #12
 8002b98:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	a913      	add	r1, sp, #76	; 0x4c
 8002bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bb0:	f002 fab2 	bl	8005118 <HAL_GPIO_Init>
}
 8002bb4:	e758      	b.n	8002a68 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8002bb6:	f7ff f92d 	bl	8001e14 <Error_Handler>
 8002bba:	e7d8      	b.n	8002b6e <HAL_UART_MspInit+0x12e>
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40004400 	.word	0x40004400
 8002bc4:	48000400 	.word	0x48000400
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	20000608 	.word	0x20000608
 8002bd0:	20000668 	.word	0x20000668
 8002bd4:	4002001c 	.word	0x4002001c
 8002bd8:	000c0004 	.word	0x000c0004

08002bdc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002bdc:	b510      	push	{r4, lr}

  if(uartHandle->Instance==USART1)
 8002bde:	6803      	ldr	r3, [r0, #0]
 8002be0:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <HAL_UART_MspDeInit+0x50>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d003      	beq.n	8002bee <HAL_UART_MspDeInit+0x12>
    HAL_DMA_DeInit(uartHandle->hdmatx);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002be6:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <HAL_UART_MspDeInit+0x54>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_UART_MspDeInit+0x38>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002bec:	bd10      	pop	{r4, pc}
 8002bee:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfa:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8002bfc:	21c0      	movs	r1, #192	; 0xc0
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <HAL_UART_MspDeInit+0x58>)
 8002c00:	f002 fb5c 	bl	80052bc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002c04:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002c08:	f002 f808 	bl	8004c1c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002c0c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002c0e:	f002 f805 	bl	8004c1c <HAL_DMA_DeInit>
 8002c12:	e7eb      	b.n	8002bec <HAL_UART_MspDeInit+0x10>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c18:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002c1a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c1e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002c20:	210c      	movs	r1, #12
 8002c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c26:	f002 fb49 	bl	80052bc <HAL_GPIO_DeInit>
}
 8002c2a:	e7df      	b.n	8002bec <HAL_UART_MspDeInit+0x10>
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40004400 	.word	0x40004400
 8002c34:	48000400 	.word	0x48000400

08002c38 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002c38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <vcom_Init+0x20>)
 8002c3c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002c3e:	f7fe fd3d 	bl	80016bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002c42:	f7ff fec9 	bl	80029d8 <MX_USART1_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c46:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <vcom_Init+0x24>)
 8002c48:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002c4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002c54:	2000      	movs	r0, #0
 8002c56:	bd08      	pop	{r3, pc}
 8002c58:	20000760 	.word	0x20000760
 8002c5c:	58000800 	.word	0x58000800

08002c60 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002c60:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002c76:	4804      	ldr	r0, [pc, #16]	; (8002c88 <vcom_DeInit+0x28>)
 8002c78:	f7ff ffb0 	bl	8002bdc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002c7c:	200f      	movs	r0, #15
 8002c7e:	f001 fed9 	bl	8004a34 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002c82:	2000      	movs	r0, #0
 8002c84:	bd08      	pop	{r3, pc}
 8002c86:	bf00      	nop
 8002c88:	200006c8 	.word	0x200006c8

08002c8c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002c8c:	b508      	push	{r3, lr}
 8002c8e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002c90:	4601      	mov	r1, r0
 8002c92:	4802      	ldr	r0, [pc, #8]	; (8002c9c <vcom_Trace_DMA+0x10>)
 8002c94:	f005 f95e 	bl	8007f54 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002c98:	2000      	movs	r0, #0
 8002c9a:	bd08      	pop	{r3, pc}
 8002c9c:	200006c8 	.word	0x200006c8

08002ca0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <vcom_ReceiveInit+0x50>)
 8002ca6:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002ca8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cac:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002cae:	ab02      	add	r3, sp, #8
 8002cb0:	e913 0006 	ldmdb	r3, {r1, r2}
 8002cb4:	480f      	ldr	r0, [pc, #60]	; (8002cf4 <vcom_ReceiveInit+0x54>)
 8002cb6:	f006 f841 	bl	8008d3c <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <vcom_ReceiveInit+0x54>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002cc4:	d1f9      	bne.n	8002cba <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002ccc:	d0fb      	beq.n	8002cc6 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002cd4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002cd6:	4c07      	ldr	r4, [pc, #28]	; (8002cf4 <vcom_ReceiveInit+0x54>)
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f006 f870 	bl	8008dbe <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4905      	ldr	r1, [pc, #20]	; (8002cf8 <vcom_ReceiveInit+0x58>)
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f005 ffc6 	bl	8008c74 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002ce8:	2000      	movs	r0, #0
 8002cea:	b002      	add	sp, #8
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000075c 	.word	0x2000075c
 8002cf4:	200006c8 	.word	0x200006c8
 8002cf8:	20000764 	.word	0x20000764

08002cfc <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002cfe:	6802      	ldr	r2, [r0, #0]
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_UART_TxCpltCallback+0x18>)
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d000      	beq.n	8002d08 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002d06:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_UART_TxCpltCallback+0x1c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	4798      	blx	r3
}
 8002d10:	e7f9      	b.n	8002d06 <HAL_UART_TxCpltCallback+0xa>
 8002d12:	bf00      	nop
 8002d14:	40013800 	.word	0x40013800
 8002d18:	20000760 	.word	0x20000760

08002d1c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002d1c:	6802      	ldr	r2, [r0, #0]
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_UART_RxCpltCallback+0x2c>)
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d000      	beq.n	8002d26 <HAL_UART_RxCpltCallback+0xa>
 8002d24:	4770      	bx	lr
{
 8002d26:	b510      	push	{r4, lr}
 8002d28:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002d2a:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_UART_RxCpltCallback+0x30>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b12b      	cbz	r3, 8002d3c <HAL_UART_RxCpltCallback+0x20>
 8002d30:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002d34:	b912      	cbnz	r2, 8002d3c <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002d36:	2101      	movs	r1, #1
 8002d38:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_UART_RxCpltCallback+0x34>)
 8002d3a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_UART_RxCpltCallback+0x34>)
 8002d40:	4620      	mov	r0, r4
 8002d42:	f005 ff97 	bl	8008c74 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002d46:	bd10      	pop	{r4, pc}
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	2000075c 	.word	0x2000075c
 8002d50:	20000764 	.word	0x20000764

08002d54 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8002d54:	b508      	push	{r3, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8002d56:	4906      	ldr	r1, [pc, #24]	; (8002d70 <MX_FATFS_Init+0x1c>)
 8002d58:	4806      	ldr	r0, [pc, #24]	; (8002d74 <MX_FATFS_Init+0x20>)
 8002d5a:	f006 f8db 	bl	8008f14 <FATFS_LinkDriver>
 8002d5e:	b918      	cbnz	r0, 8002d68 <MX_FATFS_Init+0x14>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <MX_FATFS_Init+0x24>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8002d66:	bd08      	pop	{r3, pc}
    return APP_ERROR;
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d6c:	e7fb      	b.n	8002d66 <MX_FATFS_Init+0x12>
 8002d6e:	bf00      	nop
 8002d70:	20000768 	.word	0x20000768
 8002d74:	20000004 	.word	0x20000004
 8002d78:	20000765 	.word	0x20000765

08002d7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002d7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8002d7e:	f000 f925 	bl	8002fcc <USER_SPI_initialize>

  /* USER CODE END INIT */
}
 8002d82:	bd08      	pop	{r3, pc}

08002d84 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002d84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8002d86:	f000 f9d9 	bl	800313c <USER_SPI_status>

  /* USER CODE END STATUS */
}
 8002d8a:	bd08      	pop	{r3, pc}

08002d8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002d8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8002d8e:	f000 f9df 	bl	8003150 <USER_SPI_read>
  /* USER CODE END READ */
}
 8002d92:	bd08      	pop	{r3, pc}

08002d94 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002d94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8002d96:	f000 fa21 	bl	80031dc <USER_SPI_write>

  /* USER CODE END WRITE */
}
 8002d9a:	bd08      	pop	{r3, pc}

08002d9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002d9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8002d9e:	f000 fa75 	bl	800328c <USER_SPI_ioctl>

  /* USER CODE END IOCTL */
}
 8002da2:	bd08      	pop	{r3, pc}

08002da4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002da4:	b500      	push	{lr}
 8002da6:	b087      	sub	sp, #28
 8002da8:	f88d 000f 	strb.w	r0, [sp, #15]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002dac:	2332      	movs	r3, #50	; 0x32
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2301      	movs	r3, #1
 8002db2:	f10d 0217 	add.w	r2, sp, #23
 8002db6:	f10d 010f 	add.w	r1, sp, #15
 8002dba:	4804      	ldr	r0, [pc, #16]	; (8002dcc <xchg_spi+0x28>)
 8002dbc:	f004 faea 	bl	8007394 <HAL_SPI_TransmitReceive>
    return rxDat;
}
 8002dc0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002dc4:	b007      	add	sp, #28
 8002dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dca:	bf00      	nop
 8002dcc:	20000524 	.word	0x20000524

08002dd0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	4606      	mov	r6, r0
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002dd4:	f7ff fbee 	bl	80025b4 <HAL_GetTick>
 8002dd8:	4605      	mov	r5, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
	do {
		d = xchg_spi(0xFF);
 8002dda:	20ff      	movs	r0, #255	; 0xff
 8002ddc:	f7ff ffe2 	bl	8002da4 <xchg_spi>
 8002de0:	4604      	mov	r4, r0
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002de2:	28ff      	cmp	r0, #255	; 0xff
 8002de4:	d004      	beq.n	8002df0 <wait_ready+0x20>
 8002de6:	f7ff fbe5 	bl	80025b4 <HAL_GetTick>
 8002dea:	1b40      	subs	r0, r0, r5
 8002dec:	42b0      	cmp	r0, r6
 8002dee:	d3f4      	bcc.n	8002dda <wait_ready+0xa>

	return (d == 0xFF) ? 1 : 0;
}
 8002df0:	2cff      	cmp	r4, #255	; 0xff
 8002df2:	bf14      	ite	ne
 8002df4:	2000      	movne	r0, #0
 8002df6:	2001      	moveq	r0, #1
 8002df8:	bd70      	pop	{r4, r5, r6, pc}

08002dfa <rcvr_spi_multi>:
{
 8002dfa:	b570      	push	{r4, r5, r6, lr}
 8002dfc:	4606      	mov	r6, r0
 8002dfe:	460d      	mov	r5, r1
	for(UINT i=0; i<btr; i++) {
 8002e00:	2400      	movs	r4, #0
 8002e02:	e004      	b.n	8002e0e <rcvr_spi_multi+0x14>
		*(buff+i) = xchg_spi(0xFF);
 8002e04:	20ff      	movs	r0, #255	; 0xff
 8002e06:	f7ff ffcd 	bl	8002da4 <xchg_spi>
 8002e0a:	5530      	strb	r0, [r6, r4]
	for(UINT i=0; i<btr; i++) {
 8002e0c:	3401      	adds	r4, #1
 8002e0e:	42ac      	cmp	r4, r5
 8002e10:	d3f8      	bcc.n	8002e04 <rcvr_spi_multi+0xa>
}
 8002e12:	bd70      	pop	{r4, r5, r6, pc}

08002e14 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002e14:	b508      	push	{r3, lr}
	CS_HIGH();		/* Set CS# high */
 8002e16:	2201      	movs	r2, #1
 8002e18:	2102      	movs	r1, #2
 8002e1a:	4803      	ldr	r0, [pc, #12]	; (8002e28 <despiselect+0x14>)
 8002e1c:	f002 facc 	bl	80053b8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002e20:	20ff      	movs	r0, #255	; 0xff
 8002e22:	f7ff ffbf 	bl	8002da4 <xchg_spi>

}
 8002e26:	bd08      	pop	{r3, pc}
 8002e28:	48000400 	.word	0x48000400

08002e2c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002e2c:	b510      	push	{r4, lr}
	CS_LOW();		/* Set CS# low */
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2102      	movs	r1, #2
 8002e32:	4809      	ldr	r0, [pc, #36]	; (8002e58 <spiselect+0x2c>)
 8002e34:	f002 fac0 	bl	80053b8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002e38:	20ff      	movs	r0, #255	; 0xff
 8002e3a:	f7ff ffb3 	bl	8002da4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002e3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e42:	f7ff ffc5 	bl	8002dd0 <wait_ready>
 8002e46:	b110      	cbz	r0, 8002e4e <spiselect+0x22>
 8002e48:	2401      	movs	r4, #1

	despiselect();
	return 0;	/* Timeout */
}
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	4604      	mov	r4, r0
	despiselect();
 8002e50:	f7ff ffe0 	bl	8002e14 <despiselect>
	return 0;	/* Timeout */
 8002e54:	e7f9      	b.n	8002e4a <spiselect+0x1e>
 8002e56:	bf00      	nop
 8002e58:	48000400 	.word	0x48000400

08002e5c <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002e5c:	b538      	push	{r3, r4, r5, lr}
 8002e5e:	4604      	mov	r4, r0
 8002e60:	460d      	mov	r5, r1
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002e62:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e66:	d12c      	bne.n	8002ec2 <send_cmd+0x66>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002e68:	2c0c      	cmp	r4, #12
 8002e6a:	d004      	beq.n	8002e76 <send_cmd+0x1a>
		despiselect();
 8002e6c:	f7ff ffd2 	bl	8002e14 <despiselect>
		if (!spiselect()) return 0xFF;
 8002e70:	f7ff ffdc 	bl	8002e2c <spiselect>
 8002e74:	b3b0      	cbz	r0, 8002ee4 <send_cmd+0x88>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002e76:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 8002e7a:	f7ff ff93 	bl	8002da4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002e7e:	0e28      	lsrs	r0, r5, #24
 8002e80:	f7ff ff90 	bl	8002da4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002e84:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8002e88:	f7ff ff8c 	bl	8002da4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002e8c:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8002e90:	f7ff ff88 	bl	8002da4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002e94:	b2e8      	uxtb	r0, r5
 8002e96:	f7ff ff85 	bl	8002da4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002e9a:	b1dc      	cbz	r4, 8002ed4 <send_cmd+0x78>
	n = 0x01;							/* Dummy CRC + Stop */
 8002e9c:	2001      	movs	r0, #1
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002e9e:	2c08      	cmp	r4, #8
 8002ea0:	d01a      	beq.n	8002ed8 <send_cmd+0x7c>
	xchg_spi(n);
 8002ea2:	f7ff ff7f 	bl	8002da4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002ea6:	2c0c      	cmp	r4, #12
 8002ea8:	d018      	beq.n	8002edc <send_cmd+0x80>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002eaa:	240a      	movs	r4, #10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 8002eac:	20ff      	movs	r0, #255	; 0xff
 8002eae:	f7ff ff79 	bl	8002da4 <xchg_spi>
	} while ((res & 0x80) && --n);
 8002eb2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002eb6:	d003      	beq.n	8002ec0 <send_cmd+0x64>
 8002eb8:	1e63      	subs	r3, r4, #1
 8002eba:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8002ebe:	d1f5      	bne.n	8002eac <send_cmd+0x50>

	return res;							/* Return received response */
}
 8002ec0:	bd38      	pop	{r3, r4, r5, pc}
		cmd &= 0x7F;
 8002ec2:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2037      	movs	r0, #55	; 0x37
 8002eca:	f7ff ffc7 	bl	8002e5c <send_cmd>
		if (res > 1) return res;
 8002ece:	2801      	cmp	r0, #1
 8002ed0:	d9ca      	bls.n	8002e68 <send_cmd+0xc>
 8002ed2:	e7f5      	b.n	8002ec0 <send_cmd+0x64>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002ed4:	2095      	movs	r0, #149	; 0x95
 8002ed6:	e7e2      	b.n	8002e9e <send_cmd+0x42>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002ed8:	2087      	movs	r0, #135	; 0x87
 8002eda:	e7e2      	b.n	8002ea2 <send_cmd+0x46>
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002edc:	20ff      	movs	r0, #255	; 0xff
 8002ede:	f7ff ff61 	bl	8002da4 <xchg_spi>
 8002ee2:	e7e2      	b.n	8002eaa <send_cmd+0x4e>
		if (!spiselect()) return 0xFF;
 8002ee4:	20ff      	movs	r0, #255	; 0xff
 8002ee6:	e7eb      	b.n	8002ec0 <send_cmd+0x64>

08002ee8 <xmit_spi_multi>:
{
 8002ee8:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eee:	b28a      	uxth	r2, r1
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	4802      	ldr	r0, [pc, #8]	; (8002efc <xmit_spi_multi+0x14>)
 8002ef4:	f004 f934 	bl	8007160 <HAL_SPI_Transmit>
}
 8002ef8:	bd08      	pop	{r3, pc}
 8002efa:	bf00      	nop
 8002efc:	20000524 	.word	0x20000524

08002f00 <xmit_datablock>:
{
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	4605      	mov	r5, r0
 8002f04:	460c      	mov	r4, r1
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002f06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f0a:	f7ff ff61 	bl	8002dd0 <wait_ready>
 8002f0e:	b900      	cbnz	r0, 8002f12 <xmit_datablock+0x12>
}
 8002f10:	bd38      	pop	{r3, r4, r5, pc}
	xchg_spi(token);					/* Send token */
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff ff46 	bl	8002da4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002f18:	2cfd      	cmp	r4, #253	; 0xfd
 8002f1a:	d101      	bne.n	8002f20 <xmit_datablock+0x20>
	return 1;
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	e7f7      	b.n	8002f10 <xmit_datablock+0x10>
		xmit_spi_multi(buff, 512);		/* Data */
 8002f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7ff ffdf 	bl	8002ee8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002f2a:	20ff      	movs	r0, #255	; 0xff
 8002f2c:	f7ff ff3a 	bl	8002da4 <xchg_spi>
 8002f30:	20ff      	movs	r0, #255	; 0xff
 8002f32:	f7ff ff37 	bl	8002da4 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002f36:	20ff      	movs	r0, #255	; 0xff
 8002f38:	f7ff ff34 	bl	8002da4 <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002f3c:	f000 001f 	and.w	r0, r0, #31
 8002f40:	2805      	cmp	r0, #5
 8002f42:	d101      	bne.n	8002f48 <xmit_datablock+0x48>
	return 1;
 8002f44:	2001      	movs	r0, #1
 8002f46:	e7e3      	b.n	8002f10 <xmit_datablock+0x10>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e7e1      	b.n	8002f10 <xmit_datablock+0x10>

08002f4c <SPI_Timer_On>:
void SPI_Timer_On(uint32_t waitTicks) {
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	4604      	mov	r4, r0
    spiTimerTickStart = HAL_GetTick();
 8002f50:	f7ff fb30 	bl	80025b4 <HAL_GetTick>
 8002f54:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <SPI_Timer_On+0x14>)
 8002f56:	6018      	str	r0, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <SPI_Timer_On+0x18>)
 8002f5a:	601c      	str	r4, [r3, #0]
}
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000774 	.word	0x20000774
 8002f64:	20000770 	.word	0x20000770

08002f68 <SPI_Timer_Status>:
uint8_t SPI_Timer_Status() {
 8002f68:	b508      	push	{r3, lr}
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002f6a:	f7ff fb23 	bl	80025b4 <HAL_GetTick>
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <SPI_Timer_Status+0x1c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	1ac0      	subs	r0, r0, r3
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <SPI_Timer_Status+0x20>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4298      	cmp	r0, r3
 8002f7a:	bf2c      	ite	cs
 8002f7c:	2000      	movcs	r0, #0
 8002f7e:	2001      	movcc	r0, #1
 8002f80:	bd08      	pop	{r3, pc}
 8002f82:	bf00      	nop
 8002f84:	20000774 	.word	0x20000774
 8002f88:	20000770 	.word	0x20000770

08002f8c <rcvr_datablock>:
{
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	4605      	mov	r5, r0
 8002f90:	460e      	mov	r6, r1
	SPI_Timer_On(200);
 8002f92:	20c8      	movs	r0, #200	; 0xc8
 8002f94:	f7ff ffda 	bl	8002f4c <SPI_Timer_On>
		token = xchg_spi(0xFF);
 8002f98:	20ff      	movs	r0, #255	; 0xff
 8002f9a:	f7ff ff03 	bl	8002da4 <xchg_spi>
 8002f9e:	4604      	mov	r4, r0
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002fa0:	28ff      	cmp	r0, #255	; 0xff
 8002fa2:	d103      	bne.n	8002fac <rcvr_datablock+0x20>
 8002fa4:	f7ff ffe0 	bl	8002f68 <SPI_Timer_Status>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d1f5      	bne.n	8002f98 <rcvr_datablock+0xc>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002fac:	2cfe      	cmp	r4, #254	; 0xfe
 8002fae:	d001      	beq.n	8002fb4 <rcvr_datablock+0x28>
 8002fb0:	2000      	movs	r0, #0
}
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002fb4:	4631      	mov	r1, r6
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f7ff ff1f 	bl	8002dfa <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002fbc:	20ff      	movs	r0, #255	; 0xff
 8002fbe:	f7ff fef1 	bl	8002da4 <xchg_spi>
 8002fc2:	20ff      	movs	r0, #255	; 0xff
 8002fc4:	f7ff feee 	bl	8002da4 <xchg_spi>
	return 1;						/* Function succeeded */
 8002fc8:	2001      	movs	r0, #1
 8002fca:	e7f2      	b.n	8002fb2 <rcvr_datablock+0x26>

08002fcc <USER_SPI_initialize>:
	BYTE drv		/* Physical drive number (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	f040 80ad 	bne.w	800312c <USER_SPI_initialize+0x160>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002fd2:	4b57      	ldr	r3, [pc, #348]	; (8003130 <USER_SPI_initialize+0x164>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	f013 0f02 	tst.w	r3, #2
 8002fda:	d10b      	bne.n	8002ff4 <USER_SPI_initialize+0x28>
{
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	b082      	sub	sp, #8

	FCLK_SLOW();
 8002fe0:	4b54      	ldr	r3, [pc, #336]	; (8003134 <USER_SPI_initialize+0x168>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	6813      	ldr	r3, [r2, #0]
 8002fe6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002fea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002fee:	6013      	str	r3, [r2, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002ff0:	240a      	movs	r4, #10
 8002ff2:	e008      	b.n	8003006 <USER_SPI_initialize+0x3a>
	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002ff4:	4b4e      	ldr	r3, [pc, #312]	; (8003130 <USER_SPI_initialize+0x164>)
 8002ff6:	7818      	ldrb	r0, [r3, #0]
 8002ff8:	b2c0      	uxtb	r0, r0
 8002ffa:	4770      	bx	lr
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002ffc:	20ff      	movs	r0, #255	; 0xff
 8002ffe:	f7ff fed1 	bl	8002da4 <xchg_spi>
 8003002:	3c01      	subs	r4, #1
 8003004:	b2e4      	uxtb	r4, r4
 8003006:	2c00      	cmp	r4, #0
 8003008:	d1f8      	bne.n	8002ffc <USER_SPI_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800300a:	2100      	movs	r1, #0
 800300c:	4608      	mov	r0, r1
 800300e:	f7ff ff25 	bl	8002e5c <send_cmd>
 8003012:	4605      	mov	r5, r0
 8003014:	2801      	cmp	r0, #1
 8003016:	d017      	beq.n	8003048 <USER_SPI_initialize+0x7c>
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
 8003018:	4b47      	ldr	r3, [pc, #284]	; (8003138 <USER_SPI_initialize+0x16c>)
 800301a:	701c      	strb	r4, [r3, #0]
	despiselect();
 800301c:	f7ff fefa 	bl	8002e14 <despiselect>

	if (ty) {			/* OK */
 8003020:	2c00      	cmp	r4, #0
 8003022:	d07f      	beq.n	8003124 <USER_SPI_initialize+0x158>
		FCLK_FAST();			/* Set fast clock */
 8003024:	4b43      	ldr	r3, [pc, #268]	; (8003134 <USER_SPI_initialize+0x168>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	6813      	ldr	r3, [r2, #0]
 800302a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800302e:	f043 0310 	orr.w	r3, r3, #16
 8003032:	6013      	str	r3, [r2, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003034:	4a3e      	ldr	r2, [pc, #248]	; (8003130 <USER_SPI_initialize+0x164>)
 8003036:	7813      	ldrb	r3, [r2, #0]
 8003038:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800303c:	7013      	strb	r3, [r2, #0]
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
 800303e:	4b3c      	ldr	r3, [pc, #240]	; (8003130 <USER_SPI_initialize+0x164>)
 8003040:	7818      	ldrb	r0, [r3, #0]
 8003042:	b2c0      	uxtb	r0, r0
}
 8003044:	b002      	add	sp, #8
 8003046:	bd70      	pop	{r4, r5, r6, pc}
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800304c:	f7ff ff7e 	bl	8002f4c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003050:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003054:	2008      	movs	r0, #8
 8003056:	f7ff ff01 	bl	8002e5c <send_cmd>
 800305a:	2801      	cmp	r0, #1
 800305c:	d13e      	bne.n	80030dc <USER_SPI_initialize+0x110>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800305e:	4625      	mov	r5, r4
 8003060:	e009      	b.n	8003076 <USER_SPI_initialize+0xaa>
 8003062:	20ff      	movs	r0, #255	; 0xff
 8003064:	f7ff fe9e 	bl	8002da4 <xchg_spi>
 8003068:	f105 0308 	add.w	r3, r5, #8
 800306c:	446b      	add	r3, sp
 800306e:	f803 0c04 	strb.w	r0, [r3, #-4]
 8003072:	3501      	adds	r5, #1
 8003074:	b2ed      	uxtb	r5, r5
 8003076:	2d03      	cmp	r5, #3
 8003078:	d9f3      	bls.n	8003062 <USER_SPI_initialize+0x96>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800307a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d1ca      	bne.n	8003018 <USER_SPI_initialize+0x4c>
 8003082:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003086:	2baa      	cmp	r3, #170	; 0xaa
 8003088:	d1c6      	bne.n	8003018 <USER_SPI_initialize+0x4c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800308a:	f7ff ff6d 	bl	8002f68 <SPI_Timer_Status>
 800308e:	b130      	cbz	r0, 800309e <USER_SPI_initialize+0xd2>
 8003090:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003094:	20a9      	movs	r0, #169	; 0xa9
 8003096:	f7ff fee1 	bl	8002e5c <send_cmd>
 800309a:	2800      	cmp	r0, #0
 800309c:	d1f5      	bne.n	800308a <USER_SPI_initialize+0xbe>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800309e:	f7ff ff63 	bl	8002f68 <SPI_Timer_Status>
 80030a2:	b908      	cbnz	r0, 80030a8 <USER_SPI_initialize+0xdc>
	ty = 0;
 80030a4:	4604      	mov	r4, r0
 80030a6:	e7b7      	b.n	8003018 <USER_SPI_initialize+0x4c>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80030a8:	2100      	movs	r1, #0
 80030aa:	203a      	movs	r0, #58	; 0x3a
 80030ac:	f7ff fed6 	bl	8002e5c <send_cmd>
 80030b0:	4605      	mov	r5, r0
 80030b2:	b150      	cbz	r0, 80030ca <USER_SPI_initialize+0xfe>
 80030b4:	e7b0      	b.n	8003018 <USER_SPI_initialize+0x4c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80030b6:	20ff      	movs	r0, #255	; 0xff
 80030b8:	f7ff fe74 	bl	8002da4 <xchg_spi>
 80030bc:	f105 0308 	add.w	r3, r5, #8
 80030c0:	446b      	add	r3, sp
 80030c2:	f803 0c04 	strb.w	r0, [r3, #-4]
 80030c6:	3501      	adds	r5, #1
 80030c8:	b2ed      	uxtb	r5, r5
 80030ca:	2d03      	cmp	r5, #3
 80030cc:	d9f3      	bls.n	80030b6 <USER_SPI_initialize+0xea>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80030ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80030d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030d6:	d023      	beq.n	8003120 <USER_SPI_initialize+0x154>
 80030d8:	240c      	movs	r4, #12
 80030da:	e79d      	b.n	8003018 <USER_SPI_initialize+0x4c>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80030dc:	2100      	movs	r1, #0
 80030de:	20a9      	movs	r0, #169	; 0xa9
 80030e0:	f7ff febc 	bl	8002e5c <send_cmd>
 80030e4:	2801      	cmp	r0, #1
 80030e6:	d90e      	bls.n	8003106 <USER_SPI_initialize+0x13a>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80030e8:	462e      	mov	r6, r5
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80030ea:	f7ff ff3d 	bl	8002f68 <SPI_Timer_Status>
 80030ee:	b128      	cbz	r0, 80030fc <USER_SPI_initialize+0x130>
 80030f0:	2100      	movs	r1, #0
 80030f2:	4628      	mov	r0, r5
 80030f4:	f7ff feb2 	bl	8002e5c <send_cmd>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d1f6      	bne.n	80030ea <USER_SPI_initialize+0x11e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80030fc:	f7ff ff34 	bl	8002f68 <SPI_Timer_Status>
 8003100:	b920      	cbnz	r0, 800310c <USER_SPI_initialize+0x140>
				ty = 0;
 8003102:	4604      	mov	r4, r0
 8003104:	e788      	b.n	8003018 <USER_SPI_initialize+0x4c>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003106:	2602      	movs	r6, #2
 8003108:	25a9      	movs	r5, #169	; 0xa9
 800310a:	e7ee      	b.n	80030ea <USER_SPI_initialize+0x11e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800310c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003110:	2010      	movs	r0, #16
 8003112:	f7ff fea3 	bl	8002e5c <send_cmd>
 8003116:	2800      	cmp	r0, #0
 8003118:	f47f af7e 	bne.w	8003018 <USER_SPI_initialize+0x4c>
 800311c:	4634      	mov	r4, r6
 800311e:	e77b      	b.n	8003018 <USER_SPI_initialize+0x4c>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003120:	2404      	movs	r4, #4
 8003122:	e779      	b.n	8003018 <USER_SPI_initialize+0x4c>
		Stat = STA_NOINIT;
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <USER_SPI_initialize+0x164>)
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e788      	b.n	800303e <USER_SPI_initialize+0x72>
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800312c:	2001      	movs	r0, #1
}
 800312e:	4770      	bx	lr
 8003130:	20000018 	.word	0x20000018
 8003134:	20000524 	.word	0x20000524
 8003138:	2000076c 	.word	0x2000076c

0800313c <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800313c:	b918      	cbnz	r0, 8003146 <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 800313e:	4b03      	ldr	r3, [pc, #12]	; (800314c <USER_SPI_status+0x10>)
 8003140:	7818      	ldrb	r0, [r3, #0]
 8003142:	b2c0      	uxtb	r0, r0
 8003144:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003146:	2001      	movs	r0, #1
}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000018 	.word	0x20000018

08003150 <USER_SPI_read>:
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003150:	2800      	cmp	r0, #0
 8003152:	d139      	bne.n	80031c8 <USER_SPI_read+0x78>
{
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	460d      	mov	r5, r1
 8003158:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800315a:	2b00      	cmp	r3, #0
 800315c:	d036      	beq.n	80031cc <USER_SPI_read+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <USER_SPI_read+0x84>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	f013 0f01 	tst.w	r3, #1
 8003166:	d133      	bne.n	80031d0 <USER_SPI_read+0x80>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <USER_SPI_read+0x88>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	f013 0f08 	tst.w	r3, #8
 8003170:	d100      	bne.n	8003174 <USER_SPI_read+0x24>
 8003172:	0252      	lsls	r2, r2, #9

	if (count == 1) {	/* Single sector read */
 8003174:	2c01      	cmp	r4, #1
 8003176:	d018      	beq.n	80031aa <USER_SPI_read+0x5a>
			&& rcvr_datablock(buff, 512)) {
			count = 0;
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003178:	4611      	mov	r1, r2
 800317a:	2012      	movs	r0, #18
 800317c:	f7ff fe6e 	bl	8002e5c <send_cmd>
 8003180:	b968      	cbnz	r0, 800319e <USER_SPI_read+0x4e>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003186:	4628      	mov	r0, r5
 8003188:	f7ff ff00 	bl	8002f8c <rcvr_datablock>
 800318c:	b118      	cbz	r0, 8003196 <USER_SPI_read+0x46>
				buff += 512;
 800318e:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8003192:	3c01      	subs	r4, #1
 8003194:	d1f5      	bne.n	8003182 <USER_SPI_read+0x32>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003196:	2100      	movs	r1, #0
 8003198:	200c      	movs	r0, #12
 800319a:	f7ff fe5f 	bl	8002e5c <send_cmd>
		}
	}
	despiselect();
 800319e:	f7ff fe39 	bl	8002e14 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80031a2:	1e20      	subs	r0, r4, #0
 80031a4:	bf18      	it	ne
 80031a6:	2001      	movne	r0, #1
}
 80031a8:	bd38      	pop	{r3, r4, r5, pc}
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80031aa:	4611      	mov	r1, r2
 80031ac:	2011      	movs	r0, #17
 80031ae:	f7ff fe55 	bl	8002e5c <send_cmd>
 80031b2:	2800      	cmp	r0, #0
 80031b4:	d1f3      	bne.n	800319e <USER_SPI_read+0x4e>
			&& rcvr_datablock(buff, 512)) {
 80031b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ba:	4628      	mov	r0, r5
 80031bc:	f7ff fee6 	bl	8002f8c <rcvr_datablock>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d0ec      	beq.n	800319e <USER_SPI_read+0x4e>
			count = 0;
 80031c4:	2400      	movs	r4, #0
 80031c6:	e7ea      	b.n	800319e <USER_SPI_read+0x4e>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80031c8:	2004      	movs	r0, #4
}
 80031ca:	4770      	bx	lr
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80031cc:	2004      	movs	r0, #4
 80031ce:	e7eb      	b.n	80031a8 <USER_SPI_read+0x58>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80031d0:	2003      	movs	r0, #3
 80031d2:	e7e9      	b.n	80031a8 <USER_SPI_read+0x58>
 80031d4:	20000018 	.word	0x20000018
 80031d8:	2000076c 	.word	0x2000076c

080031dc <USER_SPI_write>:
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80031dc:	2800      	cmp	r0, #0
 80031de:	d148      	bne.n	8003272 <USER_SPI_write+0x96>
{
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	460d      	mov	r5, r1
 80031e4:	4616      	mov	r6, r2
 80031e6:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d044      	beq.n	8003276 <USER_SPI_write+0x9a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <USER_SPI_write+0xa8>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	f013 0f01 	tst.w	r3, #1
 80031f4:	d141      	bne.n	800327a <USER_SPI_write+0x9e>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <USER_SPI_write+0xa8>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	f013 0f04 	tst.w	r3, #4
 80031fe:	d13e      	bne.n	800327e <USER_SPI_write+0xa2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <USER_SPI_write+0xac>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	f013 0f08 	tst.w	r3, #8
 8003208:	d100      	bne.n	800320c <USER_SPI_write+0x30>
 800320a:	0256      	lsls	r6, r2, #9

	if (count == 1) {	/* Single sector write */
 800320c:	2c01      	cmp	r4, #1
 800320e:	d01b      	beq.n	8003248 <USER_SPI_write+0x6c>
			&& xmit_datablock(buff, 0xFE)) {
			count = 0;
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003210:	f013 0f06 	tst.w	r3, #6
 8003214:	d126      	bne.n	8003264 <USER_SPI_write+0x88>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003216:	4631      	mov	r1, r6
 8003218:	2019      	movs	r0, #25
 800321a:	f7ff fe1f 	bl	8002e5c <send_cmd>
 800321e:	b968      	cbnz	r0, 800323c <USER_SPI_write+0x60>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003220:	21fc      	movs	r1, #252	; 0xfc
 8003222:	4628      	mov	r0, r5
 8003224:	f7ff fe6c 	bl	8002f00 <xmit_datablock>
 8003228:	b118      	cbz	r0, 8003232 <USER_SPI_write+0x56>
				buff += 512;
 800322a:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 800322e:	3c01      	subs	r4, #1
 8003230:	d1f6      	bne.n	8003220 <USER_SPI_write+0x44>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003232:	21fd      	movs	r1, #253	; 0xfd
 8003234:	2000      	movs	r0, #0
 8003236:	f7ff fe63 	bl	8002f00 <xmit_datablock>
 800323a:	b1c0      	cbz	r0, 800326e <USER_SPI_write+0x92>
		}
	}
	despiselect();
 800323c:	f7ff fdea 	bl	8002e14 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003240:	1e20      	subs	r0, r4, #0
 8003242:	bf18      	it	ne
 8003244:	2001      	movne	r0, #1
}
 8003246:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003248:	4631      	mov	r1, r6
 800324a:	2018      	movs	r0, #24
 800324c:	f7ff fe06 	bl	8002e5c <send_cmd>
 8003250:	2800      	cmp	r0, #0
 8003252:	d1f3      	bne.n	800323c <USER_SPI_write+0x60>
			&& xmit_datablock(buff, 0xFE)) {
 8003254:	21fe      	movs	r1, #254	; 0xfe
 8003256:	4628      	mov	r0, r5
 8003258:	f7ff fe52 	bl	8002f00 <xmit_datablock>
 800325c:	2800      	cmp	r0, #0
 800325e:	d0ed      	beq.n	800323c <USER_SPI_write+0x60>
			count = 0;
 8003260:	2400      	movs	r4, #0
 8003262:	e7eb      	b.n	800323c <USER_SPI_write+0x60>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003264:	4621      	mov	r1, r4
 8003266:	2097      	movs	r0, #151	; 0x97
 8003268:	f7ff fdf8 	bl	8002e5c <send_cmd>
 800326c:	e7d3      	b.n	8003216 <USER_SPI_write+0x3a>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800326e:	2401      	movs	r4, #1
 8003270:	e7e4      	b.n	800323c <USER_SPI_write+0x60>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003272:	2004      	movs	r0, #4
}
 8003274:	4770      	bx	lr
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003276:	2004      	movs	r0, #4
 8003278:	e7e5      	b.n	8003246 <USER_SPI_write+0x6a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800327a:	2003      	movs	r0, #3
 800327c:	e7e3      	b.n	8003246 <USER_SPI_write+0x6a>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800327e:	2002      	movs	r0, #2
 8003280:	e7e1      	b.n	8003246 <USER_SPI_write+0x6a>
 8003282:	bf00      	nop
 8003284:	20000018 	.word	0x20000018
 8003288:	2000076c 	.word	0x2000076c

0800328c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	b084      	sub	sp, #16
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003290:	2800      	cmp	r0, #0
 8003292:	f040 8104 	bne.w	800349e <USER_SPI_ioctl+0x212>
 8003296:	460d      	mov	r5, r1
 8003298:	4616      	mov	r6, r2
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800329a:	4b83      	ldr	r3, [pc, #524]	; (80034a8 <USER_SPI_ioctl+0x21c>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	f013 0f01 	tst.w	r3, #1
 80032a2:	f040 80fe 	bne.w	80034a2 <USER_SPI_ioctl+0x216>

	res = RES_ERROR;

	switch (cmd) {
 80032a6:	2904      	cmp	r1, #4
 80032a8:	f200 80ed 	bhi.w	8003486 <USER_SPI_ioctl+0x1fa>
 80032ac:	e8df f011 	tbh	[pc, r1, lsl #1]
 80032b0:	000c0005 	.word	0x000c0005
 80032b4:	005400eb 	.word	0x005400eb
 80032b8:	00af      	.short	0x00af
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80032ba:	f7ff fdb7 	bl	8002e2c <spiselect>
 80032be:	2800      	cmp	r0, #0
 80032c0:	f040 80e3 	bne.w	800348a <USER_SPI_ioctl+0x1fe>
	res = RES_ERROR;
 80032c4:	2401      	movs	r4, #1
 80032c6:	e006      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
		break;

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80032c8:	2100      	movs	r1, #0
 80032ca:	2009      	movs	r0, #9
 80032cc:	f7ff fdc6 	bl	8002e5c <send_cmd>
 80032d0:	4604      	mov	r4, r0
 80032d2:	b128      	cbz	r0, 80032e0 <USER_SPI_ioctl+0x54>
	res = RES_ERROR;
 80032d4:	462c      	mov	r4, r5

	default:
		res = RES_PARERR;
	}

	despiselect();
 80032d6:	f7ff fd9d 	bl	8002e14 <despiselect>

	return res;
}
 80032da:	4620      	mov	r0, r4
 80032dc:	b004      	add	sp, #16
 80032de:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80032e0:	2110      	movs	r1, #16
 80032e2:	4668      	mov	r0, sp
 80032e4:	f7ff fe52 	bl	8002f8c <rcvr_datablock>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	f000 80d0 	beq.w	800348e <USER_SPI_ioctl+0x202>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80032ee:	f89d 3000 	ldrb.w	r3, [sp]
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d01f      	beq.n	8003338 <USER_SPI_ioctl+0xac>
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80032f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80032fc:	f002 020f 	and.w	r2, r2, #15
 8003300:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003304:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8003308:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	f003 0306 	and.w	r3, r3, #6
 8003312:	441a      	add	r2, r3
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003314:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003318:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 8003322:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8003326:	0289      	lsls	r1, r1, #10
 8003328:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 800332c:	440b      	add	r3, r1
 800332e:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 8003330:	3a07      	subs	r2, #7
 8003332:	4093      	lsls	r3, r2
 8003334:	6033      	str	r3, [r6, #0]
 8003336:	e7ce      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003338:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800333c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003340:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003344:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003348:	0412      	lsls	r2, r2, #16
 800334a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800334e:	4413      	add	r3, r2
 8003350:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << 10;
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	6033      	str	r3, [r6, #0]
 8003356:	e7be      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003358:	4b54      	ldr	r3, [pc, #336]	; (80034ac <USER_SPI_ioctl+0x220>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	f013 0f04 	tst.w	r3, #4
 8003360:	d020      	beq.n	80033a4 <USER_SPI_ioctl+0x118>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003362:	2100      	movs	r1, #0
 8003364:	208d      	movs	r0, #141	; 0x8d
 8003366:	f7ff fd79 	bl	8002e5c <send_cmd>
 800336a:	b108      	cbz	r0, 8003370 <USER_SPI_ioctl+0xe4>
	res = RES_ERROR;
 800336c:	2401      	movs	r4, #1
 800336e:	e7b2      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
				xchg_spi(0xFF);
 8003370:	20ff      	movs	r0, #255	; 0xff
 8003372:	f7ff fd17 	bl	8002da4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003376:	2110      	movs	r1, #16
 8003378:	4668      	mov	r0, sp
 800337a:	f7ff fe07 	bl	8002f8c <rcvr_datablock>
 800337e:	b978      	cbnz	r0, 80033a0 <USER_SPI_ioctl+0x114>
	res = RES_ERROR;
 8003380:	2401      	movs	r4, #1
 8003382:	e7a8      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003384:	20ff      	movs	r0, #255	; 0xff
 8003386:	f7ff fd0d 	bl	8002da4 <xchg_spi>
 800338a:	3c01      	subs	r4, #1
 800338c:	b2e4      	uxtb	r4, r4
 800338e:	2c00      	cmp	r4, #0
 8003390:	d1f8      	bne.n	8003384 <USER_SPI_ioctl+0xf8>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003392:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8003396:	0912      	lsrs	r2, r2, #4
 8003398:	2310      	movs	r3, #16
 800339a:	4093      	lsls	r3, r2
 800339c:	6033      	str	r3, [r6, #0]
					res = RES_OK;
 800339e:	e79a      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80033a0:	2430      	movs	r4, #48	; 0x30
 80033a2:	e7f4      	b.n	800338e <USER_SPI_ioctl+0x102>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80033a4:	2100      	movs	r1, #0
 80033a6:	2009      	movs	r0, #9
 80033a8:	f7ff fd58 	bl	8002e5c <send_cmd>
 80033ac:	4605      	mov	r5, r0
 80033ae:	b108      	cbz	r0, 80033b4 <USER_SPI_ioctl+0x128>
	res = RES_ERROR;
 80033b0:	2401      	movs	r4, #1
 80033b2:	e790      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80033b4:	2110      	movs	r1, #16
 80033b6:	4668      	mov	r0, sp
 80033b8:	f7ff fde8 	bl	8002f8c <rcvr_datablock>
 80033bc:	2800      	cmp	r0, #0
 80033be:	d068      	beq.n	8003492 <USER_SPI_ioctl+0x206>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <USER_SPI_ioctl+0x220>)
 80033c2:	781c      	ldrb	r4, [r3, #0]
 80033c4:	f014 0402 	ands.w	r4, r4, #2
 80033c8:	d011      	beq.n	80033ee <USER_SPI_ioctl+0x162>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80033ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80033d4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80033d8:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 80033dc:	3301      	adds	r3, #1
 80033de:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80033e2:	0992      	lsrs	r2, r2, #6
 80033e4:	3a01      	subs	r2, #1
 80033e6:	4093      	lsls	r3, r2
 80033e8:	6033      	str	r3, [r6, #0]
				res = RES_OK;
 80033ea:	462c      	mov	r4, r5
 80033ec:	e773      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80033ee:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80033f2:	f3c2 0284 	ubfx	r2, r2, #2, #5
 80033f6:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80033fa:	00cb      	lsls	r3, r1, #3
 80033fc:	f003 0318 	and.w	r3, r3, #24
 8003400:	eb03 1351 	add.w	r3, r3, r1, lsr #5
 8003404:	3301      	adds	r3, #1
 8003406:	fb02 3303 	mla	r3, r2, r3, r3
 800340a:	6033      	str	r3, [r6, #0]
 800340c:	e763      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800340e:	4b27      	ldr	r3, [pc, #156]	; (80034ac <USER_SPI_ioctl+0x220>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	f013 0f06 	tst.w	r3, #6
 8003416:	d101      	bne.n	800341c <USER_SPI_ioctl+0x190>
	res = RES_ERROR;
 8003418:	2401      	movs	r4, #1
 800341a:	e75c      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800341c:	466a      	mov	r2, sp
 800341e:	210b      	movs	r1, #11
 8003420:	f7ff ff34 	bl	800328c <USER_SPI_ioctl>
 8003424:	bbb8      	cbnz	r0, 8003496 <USER_SPI_ioctl+0x20a>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003426:	f89d 3000 	ldrb.w	r3, [sp]
 800342a:	099b      	lsrs	r3, r3, #6
 800342c:	d104      	bne.n	8003438 <USER_SPI_ioctl+0x1ac>
 800342e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003432:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003436:	d030      	beq.n	800349a <USER_SPI_ioctl+0x20e>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003438:	6831      	ldr	r1, [r6, #0]
 800343a:	6874      	ldr	r4, [r6, #4]
		if (!(CardType & CT_BLOCK)) {
 800343c:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <USER_SPI_ioctl+0x220>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	f013 0f08 	tst.w	r3, #8
 8003444:	d101      	bne.n	800344a <USER_SPI_ioctl+0x1be>
			st *= 512; ed *= 512;
 8003446:	0249      	lsls	r1, r1, #9
 8003448:	0264      	lsls	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800344a:	2020      	movs	r0, #32
 800344c:	f7ff fd06 	bl	8002e5c <send_cmd>
 8003450:	b108      	cbz	r0, 8003456 <USER_SPI_ioctl+0x1ca>
	res = RES_ERROR;
 8003452:	2401      	movs	r4, #1
 8003454:	e73f      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003456:	4621      	mov	r1, r4
 8003458:	2021      	movs	r0, #33	; 0x21
 800345a:	f7ff fcff 	bl	8002e5c <send_cmd>
 800345e:	b108      	cbz	r0, 8003464 <USER_SPI_ioctl+0x1d8>
	res = RES_ERROR;
 8003460:	2401      	movs	r4, #1
 8003462:	e738      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003464:	2100      	movs	r1, #0
 8003466:	2026      	movs	r0, #38	; 0x26
 8003468:	f7ff fcf8 	bl	8002e5c <send_cmd>
 800346c:	4604      	mov	r4, r0
 800346e:	b108      	cbz	r0, 8003474 <USER_SPI_ioctl+0x1e8>
	res = RES_ERROR;
 8003470:	2401      	movs	r4, #1
 8003472:	e730      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003474:	f247 5030 	movw	r0, #30000	; 0x7530
 8003478:	f7ff fcaa 	bl	8002dd0 <wait_ready>
 800347c:	2800      	cmp	r0, #0
 800347e:	f47f af2a 	bne.w	80032d6 <USER_SPI_ioctl+0x4a>
	res = RES_ERROR;
 8003482:	2401      	movs	r4, #1
 8003484:	e727      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
	switch (cmd) {
 8003486:	2404      	movs	r4, #4
 8003488:	e725      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
		if (spiselect()) res = RES_OK;
 800348a:	462c      	mov	r4, r5
 800348c:	e723      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
	res = RES_ERROR;
 800348e:	462c      	mov	r4, r5
 8003490:	e721      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
 8003492:	2401      	movs	r4, #1
 8003494:	e71f      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
 8003496:	2401      	movs	r4, #1
 8003498:	e71d      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
 800349a:	2401      	movs	r4, #1
 800349c:	e71b      	b.n	80032d6 <USER_SPI_ioctl+0x4a>
	if (drv) return RES_PARERR;					/* Check parameter */
 800349e:	2404      	movs	r4, #4
 80034a0:	e71b      	b.n	80032da <USER_SPI_ioctl+0x4e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80034a2:	2403      	movs	r4, #3
 80034a4:	e719      	b.n	80032da <USER_SPI_ioctl+0x4e>
 80034a6:	bf00      	nop
 80034a8:	20000018 	.word	0x20000018
 80034ac:	2000076c 	.word	0x2000076c

080034b0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80034b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80034b2:	f7fe ffcb 	bl	800244c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80034b6:	f000 fa99 	bl	80039ec <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80034ba:	bd08      	pop	{r3, pc}

080034bc <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80034bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80034be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c2:	f011 fc6d 	bl	8014da0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80034c6:	bd08      	pop	{r3, pc}

080034c8 <FwUpdateAgent_Run>:
void FwUpdateAgent_Run(void)
{
  /* USER CODE BEGIN FwUpdateAgent_Run_1 */

  /* USER CODE END FwUpdateAgent_Run_1 */
}
 80034c8:	4770      	bx	lr

080034ca <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
//  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
}
 80034ca:	4770      	bx	lr

080034cc <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
//  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
}
 80034cc:	4770      	bx	lr

080034ce <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 80034ce:	4770      	bx	lr

080034d0 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80034d0:	4b01      	ldr	r3, [pc, #4]	; (80034d8 <OnTxFrameCtrlChanged+0x8>)
 80034d2:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000070 	.word	0x20000070

080034dc <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80034dc:	4b01      	ldr	r3, [pc, #4]	; (80034e4 <OnPingSlotPeriodicityChanged+0x8>)
 80034de:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000070 	.word	0x20000070

080034e8 <OnBeaconStatusChange>:
  if (params != NULL)
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d03f      	beq.n	800356c <OnBeaconStatusChange+0x84>
{
 80034ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f0:	b08c      	sub	sp, #48	; 0x30
 80034f2:	4603      	mov	r3, r0
    switch (params->State)
 80034f4:	7842      	ldrb	r2, [r0, #1]
 80034f6:	2a02      	cmp	r2, #2
 80034f8:	d00a      	beq.n	8003510 <OnBeaconStatusChange+0x28>
 80034fa:	2a03      	cmp	r2, #3
 80034fc:	d02f      	beq.n	800355e <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <OnBeaconStatusChange+0x88>)
 8003500:	2200      	movs	r2, #0
 8003502:	4611      	mov	r1, r2
 8003504:	2002      	movs	r0, #2
 8003506:	f011 faf7 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 800350a:	b00c      	add	sp, #48	; 0x30
 800350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8003510:	7c02      	ldrb	r2, [r0, #16]
 8003512:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8003516:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800351a:	7d9c      	ldrb	r4, [r3, #22]
 800351c:	7ddd      	ldrb	r5, [r3, #23]
 800351e:	7e1e      	ldrb	r6, [r3, #24]
 8003520:	7e5f      	ldrb	r7, [r3, #25]
 8003522:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8003526:	f893 e01b 	ldrb.w	lr, [r3, #27]
 800352a:	f893 801c 	ldrb.w	r8, [r3, #28]
 800352e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8003532:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8003536:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800353a:	9708      	str	r7, [sp, #32]
 800353c:	9607      	str	r6, [sp, #28]
 800353e:	9506      	str	r5, [sp, #24]
 8003540:	9405      	str	r4, [sp, #20]
 8003542:	685c      	ldr	r4, [r3, #4]
 8003544:	9404      	str	r4, [sp, #16]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	9303      	str	r3, [sp, #12]
 800354a:	9002      	str	r0, [sp, #8]
 800354c:	9101      	str	r1, [sp, #4]
 800354e:	9200      	str	r2, [sp, #0]
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <OnBeaconStatusChange+0x8c>)
 8003552:	2200      	movs	r2, #0
 8003554:	4611      	mov	r1, r2
 8003556:	2002      	movs	r0, #2
 8003558:	f011 face 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800355c:	e7d5      	b.n	800350a <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <OnBeaconStatusChange+0x90>)
 8003560:	2200      	movs	r2, #0
 8003562:	4611      	mov	r1, r2
 8003564:	2002      	movs	r0, #2
 8003566:	f011 fac7 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 800356a:	e7ce      	b.n	800350a <OnBeaconStatusChange+0x22>
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	0801a0c8 	.word	0x0801a0c8
 8003574:	0801a0e0 	.word	0x0801a0e0
 8003578:	0801a154 	.word	0x0801a154

0800357c <OnClassChange>:
{
 800357c:	b500      	push	{lr}
 800357e:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <OnClassChange+0x1c>)
 8003582:	5c1b      	ldrb	r3, [r3, r0]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <OnClassChange+0x20>)
 8003588:	2200      	movs	r2, #0
 800358a:	4611      	mov	r1, r2
 800358c:	2002      	movs	r0, #2
 800358e:	f011 fab3 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 8003592:	b003      	add	sp, #12
 8003594:	f85d fb04 	ldr.w	pc, [sp], #4
 8003598:	0801a190 	.word	0x0801a190
 800359c:	0801a174 	.word	0x0801a174

080035a0 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80035a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80035a2:	2801      	cmp	r0, #1
 80035a4:	d006      	beq.n	80035b4 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <OnNvmDataChange+0x24>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	4611      	mov	r1, r2
 80035ac:	2002      	movs	r0, #2
 80035ae:	f011 faa3 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80035b2:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <OnNvmDataChange+0x28>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	4611      	mov	r1, r2
 80035ba:	2002      	movs	r0, #2
 80035bc:	f011 fa9c 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
 80035c0:	e7f7      	b.n	80035b2 <OnNvmDataChange+0x12>
 80035c2:	bf00      	nop
 80035c4:	0801a1a8 	.word	0x0801a1a8
 80035c8:	0801a194 	.word	0x0801a194

080035cc <OnTxTimerEvent>:
{
 80035cc:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80035ce:	2100      	movs	r1, #0
 80035d0:	2002      	movs	r0, #2
 80035d2:	f011 fb97 	bl	8014d04 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80035d6:	4802      	ldr	r0, [pc, #8]	; (80035e0 <OnTxTimerEvent+0x14>)
 80035d8:	f011 fe30 	bl	801523c <UTIL_TIMER_Start>
}
 80035dc:	bd08      	pop	{r3, pc}
 80035de:	bf00      	nop
 80035e0:	200008cc 	.word	0x200008cc

080035e4 <OnMacProcessNotify>:
{
 80035e4:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80035e6:	2100      	movs	r1, #0
 80035e8:	2001      	movs	r0, #1
 80035ea:	f011 fb8b 	bl	8014d04 <UTIL_SEQ_SetTask>
}
 80035ee:	bd08      	pop	{r3, pc}

080035f0 <OnStopJoinTimerEvent>:
{
 80035f0:	b508      	push	{r3, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <OnStopJoinTimerEvent+0x18>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d000      	beq.n	80035fc <OnStopJoinTimerEvent+0xc>
}
 80035fa:	bd08      	pop	{r3, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80035fc:	2100      	movs	r1, #0
 80035fe:	2008      	movs	r0, #8
 8003600:	f011 fb80 	bl	8014d04 <UTIL_SEQ_SetTask>
}
 8003604:	e7f9      	b.n	80035fa <OnStopJoinTimerEvent+0xa>
 8003606:	bf00      	nop
 8003608:	20000019 	.word	0x20000019

0800360c <OnSystemReset>:
{
 800360c:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800360e:	f006 fc67 	bl	8009ee0 <LmHandlerHalt>
 8003612:	b100      	cbz	r0, 8003616 <OnSystemReset+0xa>
}
 8003614:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8003616:	f006 f921 	bl	800985c <LmHandlerJoinStatus>
 800361a:	2801      	cmp	r0, #1
 800361c:	d1fa      	bne.n	8003614 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800361e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003622:	4905      	ldr	r1, [pc, #20]	; (8003638 <OnSystemReset+0x2c>)
 8003624:	68ca      	ldr	r2, [r1, #12]
 8003626:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <OnSystemReset+0x30>)
 800362c:	4313      	orrs	r3, r2
 800362e:	60cb      	str	r3, [r1, #12]
 8003630:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003634:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003636:	e7fd      	b.n	8003634 <OnSystemReset+0x28>
 8003638:	e000ed00 	.word	0xe000ed00
 800363c:	05fa0004 	.word	0x05fa0004

08003640 <OnTxPeriodicityChanged>:
{
 8003640:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <OnTxPeriodicityChanged+0x28>)
 8003644:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8003646:	b910      	cbnz	r0, 800364e <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8003648:	f242 7210 	movw	r2, #10000	; 0x2710
 800364c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800364e:	4c07      	ldr	r4, [pc, #28]	; (800366c <OnTxPeriodicityChanged+0x2c>)
 8003650:	4620      	mov	r0, r4
 8003652:	f011 fd99 	bl	8015188 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8003656:	4b04      	ldr	r3, [pc, #16]	; (8003668 <OnTxPeriodicityChanged+0x28>)
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	4620      	mov	r0, r4
 800365c:	f011 fe34 	bl	80152c8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8003660:	4620      	mov	r0, r4
 8003662:	f011 fdeb 	bl	801523c <UTIL_TIMER_Start>
}
 8003666:	bd10      	pop	{r4, pc}
 8003668:	20000088 	.word	0x20000088
 800366c:	200008cc 	.word	0x200008cc

08003670 <OnRxData>:
{
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	4605      	mov	r5, r0
 8003676:	460c      	mov	r4, r1
  APP_LOG(TS_OFF, VLEVEL_H, "HEY ITS ME IM RECEIVING DATA WOW\r\n");
 8003678:	4b36      	ldr	r3, [pc, #216]	; (8003754 <OnRxData+0xe4>)
 800367a:	2200      	movs	r2, #0
 800367c:	4611      	mov	r1, r2
 800367e:	2003      	movs	r0, #3
 8003680:	f011 fa3a 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  if (params != NULL)
 8003684:	2c00      	cmp	r4, #0
 8003686:	d04b      	beq.n	8003720 <OnRxData+0xb0>
    UTIL_TIMER_Start(&RxLedTimer);
 8003688:	4833      	ldr	r0, [pc, #204]	; (8003758 <OnRxData+0xe8>)
 800368a:	f011 fdd7 	bl	801523c <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800368e:	7826      	ldrb	r6, [r4, #0]
 8003690:	2e00      	cmp	r6, #0
 8003692:	d042      	beq.n	800371a <OnRxData+0xaa>
      if (appData != NULL)
 8003694:	2d00      	cmp	r5, #0
 8003696:	d03f      	beq.n	8003718 <OnRxData+0xa8>
        RxPort = appData->Port;
 8003698:	782e      	ldrb	r6, [r5, #0]
        if (appData->Buffer != NULL)
 800369a:	686b      	ldr	r3, [r5, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03c      	beq.n	800371a <OnRxData+0xaa>
          switch (appData->Port)
 80036a0:	2e02      	cmp	r6, #2
 80036a2:	d016      	beq.n	80036d2 <OnRxData+0x62>
 80036a4:	2e03      	cmp	r6, #3
 80036a6:	d138      	bne.n	800371a <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 80036a8:	786a      	ldrb	r2, [r5, #1]
 80036aa:	2a01      	cmp	r2, #1
 80036ac:	d135      	bne.n	800371a <OnRxData+0xaa>
                switch (appData->Buffer[0])
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d006      	beq.n	80036c2 <OnRxData+0x52>
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d008      	beq.n	80036ca <OnRxData+0x5a>
 80036b8:	bb7b      	cbnz	r3, 800371a <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 80036ba:	2000      	movs	r0, #0
 80036bc:	f006 f9a0 	bl	8009a00 <LmHandlerRequestClass>
                    break;
 80036c0:	e02b      	b.n	800371a <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 80036c2:	2001      	movs	r0, #1
 80036c4:	f006 f99c 	bl	8009a00 <LmHandlerRequestClass>
                    break;
 80036c8:	e027      	b.n	800371a <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 80036ca:	2002      	movs	r0, #2
 80036cc:	f006 f998 	bl	8009a00 <LmHandlerRequestClass>
                    break;
 80036d0:	e023      	b.n	800371a <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 80036d2:	786a      	ldrb	r2, [r5, #1]
 80036d4:	2a01      	cmp	r2, #1
 80036d6:	d120      	bne.n	800371a <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	4a1f      	ldr	r2, [pc, #124]	; (800375c <OnRxData+0xec>)
 80036e0:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 80036e2:	b963      	cbnz	r3, 80036fe <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <OnRxData+0xf0>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	4611      	mov	r1, r2
 80036ea:	2003      	movs	r0, #3
 80036ec:	f011 fa04 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036f6:	481b      	ldr	r0, [pc, #108]	; (8003764 <OnRxData+0xf4>)
 80036f8:	f001 fe5e 	bl	80053b8 <HAL_GPIO_WritePin>
 80036fc:	e00d      	b.n	800371a <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <OnRxData+0xf8>)
 8003700:	2200      	movs	r2, #0
 8003702:	4611      	mov	r1, r2
 8003704:	2003      	movs	r0, #3
 8003706:	f011 f9f7 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 800370a:	2201      	movs	r2, #1
 800370c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003710:	4814      	ldr	r0, [pc, #80]	; (8003764 <OnRxData+0xf4>)
 8003712:	f001 fe51 	bl	80053b8 <HAL_GPIO_WritePin>
 8003716:	e000      	b.n	800371a <OnRxData+0xaa>
  uint8_t RxPort = 0;
 8003718:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 800371a:	7c23      	ldrb	r3, [r4, #16]
 800371c:	2b05      	cmp	r3, #5
 800371e:	d901      	bls.n	8003724 <OnRxData+0xb4>
}
 8003720:	b006      	add	sp, #24
 8003722:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8003724:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8003728:	f994 1009 	ldrsb.w	r1, [r4, #9]
 800372c:	f994 000a 	ldrsb.w	r0, [r4, #10]
 8003730:	9005      	str	r0, [sp, #20]
 8003732:	9104      	str	r1, [sp, #16]
 8003734:	490d      	ldr	r1, [pc, #52]	; (800376c <OnRxData+0xfc>)
 8003736:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800373a:	9303      	str	r3, [sp, #12]
 800373c:	9202      	str	r2, [sp, #8]
 800373e:	9601      	str	r6, [sp, #4]
 8003740:	68e3      	ldr	r3, [r4, #12]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <OnRxData+0x100>)
 8003746:	2200      	movs	r2, #0
 8003748:	4611      	mov	r1, r2
 800374a:	2003      	movs	r0, #3
 800374c:	f011 f9d4 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 8003750:	e7e6      	b.n	8003720 <OnRxData+0xb0>
 8003752:	bf00      	nop
 8003754:	0801a1bc 	.word	0x0801a1bc
 8003758:	20000884 	.word	0x20000884
 800375c:	2000086a 	.word	0x2000086a
 8003760:	0801a1e0 	.word	0x0801a1e0
 8003764:	48000400 	.word	0x48000400
 8003768:	0801a1ec 	.word	0x0801a1ec
 800376c:	0801a4a0 	.word	0x0801a4a0
 8003770:	0801a1f8 	.word	0x0801a1f8

08003774 <OnTxData>:
  if ((params != NULL))
 8003774:	2800      	cmp	r0, #0
 8003776:	d042      	beq.n	80037fe <OnTxData+0x8a>
{
 8003778:	b510      	push	{r4, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800377e:	7803      	ldrb	r3, [r0, #0]
 8003780:	b90b      	cbnz	r3, 8003786 <OnTxData+0x12>
}
 8003782:	b004      	add	sp, #16
 8003784:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8003786:	2201      	movs	r2, #1
 8003788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800378c:	481c      	ldr	r0, [pc, #112]	; (8003800 <OnTxData+0x8c>)
 800378e:	f001 fe13 	bl	80053b8 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8003792:	481c      	ldr	r0, [pc, #112]	; (8003804 <OnTxData+0x90>)
 8003794:	f011 fd52 	bl	801523c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <OnTxData+0x94>)
 800379a:	2200      	movs	r2, #0
 800379c:	4611      	mov	r1, r2
 800379e:	2002      	movs	r0, #2
 80037a0:	f011 f9aa 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80037a4:	7c23      	ldrb	r3, [r4, #16]
 80037a6:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80037aa:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80037ae:	9103      	str	r1, [sp, #12]
 80037b0:	9202      	str	r2, [sp, #8]
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	68e3      	ldr	r3, [r4, #12]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <OnTxData+0x98>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	4611      	mov	r1, r2
 80037be:	2003      	movs	r0, #3
 80037c0:	f011 f99a 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <OnTxData+0x9c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	4611      	mov	r1, r2
 80037ca:	2003      	movs	r0, #3
 80037cc:	f011 f994 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80037d0:	7a23      	ldrb	r3, [r4, #8]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10c      	bne.n	80037f0 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80037d6:	7a63      	ldrb	r3, [r4, #9]
 80037d8:	b143      	cbz	r3, 80037ec <OnTxData+0x78>
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <OnTxData+0xa0>)
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <OnTxData+0xa4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	4611      	mov	r1, r2
 80037e4:	2003      	movs	r0, #3
 80037e6:	f011 f987 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
 80037ea:	e7ca      	b.n	8003782 <OnTxData+0xe>
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <OnTxData+0xa8>)
 80037ee:	e7f5      	b.n	80037dc <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <OnTxData+0xac>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	4611      	mov	r1, r2
 80037f6:	2003      	movs	r0, #3
 80037f8:	f011 f97e 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 80037fc:	e7c1      	b.n	8003782 <OnTxData+0xe>
 80037fe:	4770      	bx	lr
 8003800:	48000400 	.word	0x48000400
 8003804:	200008b4 	.word	0x200008b4
 8003808:	0801a24c 	.word	0x0801a24c
 800380c:	0801a280 	.word	0x0801a280
 8003810:	0801a2b4 	.word	0x0801a2b4
 8003814:	0801a240 	.word	0x0801a240
 8003818:	0801a2c4 	.word	0x0801a2c4
 800381c:	0801a244 	.word	0x0801a244
 8003820:	0801a2d8 	.word	0x0801a2d8

08003824 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4604      	mov	r4, r0
 8003828:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800382a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800382e:	4805      	ldr	r0, [pc, #20]	; (8003844 <OnStoreContextRequest+0x20>)
 8003830:	f7fe f8f4 	bl	8001a1c <FLASH_IF_Erase>
 8003834:	b100      	cbz	r0, 8003838 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8003836:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8003838:	462a      	mov	r2, r5
 800383a:	4621      	mov	r1, r4
 800383c:	4801      	ldr	r0, [pc, #4]	; (8003844 <OnStoreContextRequest+0x20>)
 800383e:	f7fe f8b5 	bl	80019ac <FLASH_IF_Write>
}
 8003842:	e7f8      	b.n	8003836 <OnStoreContextRequest+0x12>
 8003844:	0803f000 	.word	0x0803f000

08003848 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8003848:	b508      	push	{r3, lr}
 800384a:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800384c:	4901      	ldr	r1, [pc, #4]	; (8003854 <OnRestoreContextRequest+0xc>)
 800384e:	f7fe f8c9 	bl	80019e4 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8003852:	bd08      	pop	{r3, pc}
 8003854:	0803f000 	.word	0x0803f000

08003858 <StopJoin>:
{
 8003858:	b538      	push	{r3, r4, r5, lr}
  UTIL_TIMER_Stop(&TxTimer);
 800385a:	4815      	ldr	r0, [pc, #84]	; (80038b0 <StopJoin+0x58>)
 800385c:	f011 fc94 	bl	8015188 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8003860:	f006 fb36 	bl	8009ed0 <LmHandlerStop>
 8003864:	b148      	cbz	r0, 800387a <StopJoin+0x22>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8003866:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <StopJoin+0x5c>)
 8003868:	2200      	movs	r2, #0
 800386a:	4611      	mov	r1, r2
 800386c:	2002      	movs	r0, #2
 800386e:	f011 f943 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8003872:	4811      	ldr	r0, [pc, #68]	; (80038b8 <StopJoin+0x60>)
 8003874:	f011 fce2 	bl	801523c <UTIL_TIMER_Start>
}
 8003878:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <StopJoin+0x64>)
 800387c:	2200      	movs	r2, #0
 800387e:	4611      	mov	r1, r2
 8003880:	2002      	movs	r0, #2
 8003882:	f011 f939 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8003886:	4c0e      	ldr	r4, [pc, #56]	; (80038c0 <StopJoin+0x68>)
 8003888:	2501      	movs	r5, #1
 800388a:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <StopJoin+0x6c>)
 800388e:	2200      	movs	r2, #0
 8003890:	4611      	mov	r1, r2
 8003892:	2002      	movs	r0, #2
 8003894:	f011 f930 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8003898:	480b      	ldr	r0, [pc, #44]	; (80038c8 <StopJoin+0x70>)
 800389a:	f006 f991 	bl	8009bc0 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800389e:	4629      	mov	r1, r5
 80038a0:	7820      	ldrb	r0, [r4, #0]
 80038a2:	f005 ff49 	bl	8009738 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80038a6:	4802      	ldr	r0, [pc, #8]	; (80038b0 <StopJoin+0x58>)
 80038a8:	f011 fcc8 	bl	801523c <UTIL_TIMER_Start>
 80038ac:	e7e1      	b.n	8003872 <StopJoin+0x1a>
 80038ae:	bf00      	nop
 80038b0:	200008cc 	.word	0x200008cc
 80038b4:	0801a2e8 	.word	0x0801a2e8
 80038b8:	2000089c 	.word	0x2000089c
 80038bc:	0801a308 	.word	0x0801a308
 80038c0:	20000019 	.word	0x20000019
 80038c4:	0801a31c 	.word	0x0801a31c
 80038c8:	20000070 	.word	0x20000070

080038cc <StoreContext>:
{
 80038cc:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80038ce:	f006 fba7 	bl	800a020 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80038d2:	f110 0f08 	cmn.w	r0, #8
 80038d6:	d003      	beq.n	80038e0 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 80038d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80038dc:	d007      	beq.n	80038ee <StoreContext+0x22>
}
 80038de:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <StoreContext+0x30>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	4611      	mov	r1, r2
 80038e6:	2002      	movs	r0, #2
 80038e8:	f011 f906 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
 80038ec:	e7f7      	b.n	80038de <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <StoreContext+0x34>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	4611      	mov	r1, r2
 80038f4:	2002      	movs	r0, #2
 80038f6:	f011 f8ff 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 80038fa:	e7f0      	b.n	80038de <StoreContext+0x12>
 80038fc:	0801a33c 	.word	0x0801a33c
 8003900:	0801a354 	.word	0x0801a354

08003904 <SendTxData>:
{
 8003904:	b530      	push	{r4, r5, lr}
 8003906:	b083      	sub	sp, #12
  if (LmHandlerIsBusy() == false)
 8003908:	f005 ffba 	bl	8009880 <LmHandlerIsBusy>
 800390c:	2800      	cmp	r0, #0
 800390e:	d13e      	bne.n	800398e <SendTxData+0x8a>
    AppData.Port = LORAWAN_USER_APP_PORT;
 8003910:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <SendTxData+0xb0>)
 8003912:	2202      	movs	r2, #2
 8003914:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[0] = (uint8_t)10;
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	210a      	movs	r1, #10
 800391a:	7011      	strb	r1, [r2, #0]
    AppData.BufferSize = 1; // Update the buffer size to the size of the integer SOC value
 800391c:	2201      	movs	r2, #1
 800391e:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <SendTxData+0xb4>)
 8003922:	7a5b      	ldrb	r3, [r3, #9]
 8003924:	b96b      	cbnz	r3, 8003942 <SendTxData+0x3e>
    status = LmHandlerDeviceTimeReq ( );
 8003926:	f005 ff7f 	bl	8009828 <LmHandlerDeviceTimeReq>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800392a:	2200      	movs	r2, #0
 800392c:	4b23      	ldr	r3, [pc, #140]	; (80039bc <SendTxData+0xb8>)
 800392e:	78d9      	ldrb	r1, [r3, #3]
 8003930:	4820      	ldr	r0, [pc, #128]	; (80039b4 <SendTxData+0xb0>)
 8003932:	f005 ffbb 	bl	80098ac <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 8003936:	b190      	cbz	r0, 800395e <SendTxData+0x5a>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8003938:	f110 0f06 	cmn.w	r0, #6
 800393c:	d017      	beq.n	800396e <SendTxData+0x6a>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800393e:	2500      	movs	r5, #0
 8003940:	e026      	b.n	8003990 <SendTxData+0x8c>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8003942:	f005 ff8b 	bl	800985c <LmHandlerJoinStatus>
 8003946:	2801      	cmp	r0, #1
 8003948:	d1ed      	bne.n	8003926 <SendTxData+0x22>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800394a:	481b      	ldr	r0, [pc, #108]	; (80039b8 <SendTxData+0xb4>)
 800394c:	f011 fc1c 	bl	8015188 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); // LED_RED
 8003950:	2200      	movs	r2, #0
 8003952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003956:	481a      	ldr	r0, [pc, #104]	; (80039c0 <SendTxData+0xbc>)
 8003958:	f001 fd2e 	bl	80053b8 <HAL_GPIO_WritePin>
 800395c:	e7e3      	b.n	8003926 <SendTxData+0x22>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <SendTxData+0xc0>)
 8003960:	2201      	movs	r2, #1
 8003962:	2100      	movs	r1, #0
 8003964:	4610      	mov	r0, r2
 8003966:	f011 f8c7 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800396a:	2500      	movs	r5, #0
 800396c:	e010      	b.n	8003990 <SendTxData+0x8c>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800396e:	f005 ff6f 	bl	8009850 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8003972:	4605      	mov	r5, r0
 8003974:	b160      	cbz	r0, 8003990 <SendTxData+0x8c>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <SendTxData+0xc4>)
 8003978:	fba3 2300 	umull	r2, r3, r3, r0
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <SendTxData+0xc8>)
 8003982:	2201      	movs	r2, #1
 8003984:	2100      	movs	r1, #0
 8003986:	4610      	mov	r0, r2
 8003988:	f011 f8b6 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
 800398c:	e000      	b.n	8003990 <SendTxData+0x8c>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800398e:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8003990:	4c0f      	ldr	r4, [pc, #60]	; (80039d0 <SendTxData+0xcc>)
 8003992:	4620      	mov	r0, r4
 8003994:	f011 fbf8 	bl	8015188 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <SendTxData+0xd0>)
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	42a9      	cmp	r1, r5
 800399e:	bf38      	it	cc
 80039a0:	4629      	movcc	r1, r5
 80039a2:	4620      	mov	r0, r4
 80039a4:	f011 fc90 	bl	80152c8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 80039a8:	4620      	mov	r0, r4
 80039aa:	f011 fc47 	bl	801523c <UTIL_TIMER_Start>
}
 80039ae:	b003      	add	sp, #12
 80039b0:	bd30      	pop	{r4, r5, pc}
 80039b2:	bf00      	nop
 80039b4:	2000001c 	.word	0x2000001c
 80039b8:	2000086c 	.word	0x2000086c
 80039bc:	20000070 	.word	0x20000070
 80039c0:	48000400 	.word	0x48000400
 80039c4:	0801a36c 	.word	0x0801a36c
 80039c8:	10624dd3 	.word	0x10624dd3
 80039cc:	0801a37c 	.word	0x0801a37c
 80039d0:	200008cc 	.word	0x200008cc
 80039d4:	20000088 	.word	0x20000088

080039d8 <OnJoinTimerLedEvent>:
{
 80039d8:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80039da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039de:	4802      	ldr	r0, [pc, #8]	; (80039e8 <OnJoinTimerLedEvent+0x10>)
 80039e0:	f001 fcef 	bl	80053c2 <HAL_GPIO_TogglePin>
}
 80039e4:	bd08      	pop	{r3, pc}
 80039e6:	bf00      	nop
 80039e8:	48000400 	.word	0x48000400

080039ec <LoRaWAN_Init>:
{
 80039ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ee:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 80039f0:	2400      	movs	r4, #0
 80039f2:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80039f4:	9402      	str	r4, [sp, #8]
 80039f6:	2703      	movs	r7, #3
 80039f8:	9701      	str	r7, [sp, #4]
 80039fa:	2601      	movs	r6, #1
 80039fc:	9600      	str	r6, [sp, #0]
 80039fe:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <LoRaWAN_Init+0x154>)
 8003a00:	4622      	mov	r2, r4
 8003a02:	4621      	mov	r1, r4
 8003a04:	2002      	movs	r0, #2
 8003a06:	f011 f877 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8003a0a:	9402      	str	r4, [sp, #8]
 8003a0c:	2305      	movs	r3, #5
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	2502      	movs	r5, #2
 8003a12:	9500      	str	r5, [sp, #0]
 8003a14:	4b4b      	ldr	r3, [pc, #300]	; (8003b44 <LoRaWAN_Init+0x158>)
 8003a16:	4622      	mov	r2, r4
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f011 f86c 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8003a20:	9402      	str	r4, [sp, #8]
 8003a22:	9701      	str	r7, [sp, #4]
 8003a24:	9600      	str	r6, [sp, #0]
 8003a26:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <LoRaWAN_Init+0x15c>)
 8003a28:	4622      	mov	r2, r4
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f011 f863 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8003a32:	a905      	add	r1, sp, #20
 8003a34:	4620      	mov	r0, r4
 8003a36:	f006 fa35 	bl	8009ea4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8003a3a:	9b05      	ldr	r3, [sp, #20]
 8003a3c:	0e1a      	lsrs	r2, r3, #24
 8003a3e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003a42:	9102      	str	r1, [sp, #8]
 8003a44:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	9200      	str	r2, [sp, #0]
 8003a4c:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <LoRaWAN_Init+0x160>)
 8003a4e:	4622      	mov	r2, r4
 8003a50:	4621      	mov	r1, r4
 8003a52:	4628      	mov	r0, r5
 8003a54:	f011 f850 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8003a58:	a905      	add	r1, sp, #20
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f006 fa22 	bl	8009ea4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8003a60:	9b05      	ldr	r3, [sp, #20]
 8003a62:	0e1a      	lsrs	r2, r3, #24
 8003a64:	b2d9      	uxtb	r1, r3
 8003a66:	9103      	str	r1, [sp, #12]
 8003a68:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003a6c:	9102      	str	r1, [sp, #8]
 8003a6e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	9200      	str	r2, [sp, #0]
 8003a76:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <LoRaWAN_Init+0x164>)
 8003a78:	4622      	mov	r2, r4
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f011 f83b 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003a82:	9400      	str	r4, [sp, #0]
 8003a84:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <LoRaWAN_Init+0x168>)
 8003a86:	4622      	mov	r2, r4
 8003a88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a8c:	4832      	ldr	r0, [pc, #200]	; (8003b58 <LoRaWAN_Init+0x16c>)
 8003a8e:	f011 fb1d 	bl	80150cc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8003a92:	9400      	str	r4, [sp, #0]
 8003a94:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <LoRaWAN_Init+0x170>)
 8003a96:	4622      	mov	r2, r4
 8003a98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a9c:	4830      	ldr	r0, [pc, #192]	; (8003b60 <LoRaWAN_Init+0x174>)
 8003a9e:	f011 fb15 	bl	80150cc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8003aa2:	9400      	str	r4, [sp, #0]
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <LoRaWAN_Init+0x178>)
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003aac:	482e      	ldr	r0, [pc, #184]	; (8003b68 <LoRaWAN_Init+0x17c>)
 8003aae:	f011 fb0d 	bl	80150cc <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f7fd ff74 	bl	80019a0 <FLASH_IF_Init>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d13e      	bne.n	8003b3a <LoRaWAN_Init+0x14e>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8003abc:	2400      	movs	r4, #0
 8003abe:	9400      	str	r4, [sp, #0]
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <LoRaWAN_Init+0x180>)
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003ac8:	4829      	ldr	r0, [pc, #164]	; (8003b70 <LoRaWAN_Init+0x184>)
 8003aca:	f011 faff 	bl	80150cc <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8003ace:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <LoRaWAN_Init+0x188>)
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f011 f9fa 	bl	8014ecc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8003ad8:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <LoRaWAN_Init+0x18c>)
 8003ada:	4621      	mov	r1, r4
 8003adc:	2002      	movs	r0, #2
 8003ade:	f011 f9f5 	bl	8014ecc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8003ae2:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <LoRaWAN_Init+0x190>)
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	2004      	movs	r0, #4
 8003ae8:	f011 f9f0 	bl	8014ecc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <LoRaWAN_Init+0x194>)
 8003aee:	4621      	mov	r1, r4
 8003af0:	2008      	movs	r0, #8
 8003af2:	f011 f9eb 	bl	8014ecc <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8003af6:	f000 f8a7 	bl	8003c48 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8003afa:	4922      	ldr	r1, [pc, #136]	; (8003b84 <LoRaWAN_Init+0x198>)
 8003afc:	4822      	ldr	r0, [pc, #136]	; (8003b88 <LoRaWAN_Init+0x19c>)
 8003afe:	f006 f985 	bl	8009e0c <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8003b02:	4822      	ldr	r0, [pc, #136]	; (8003b8c <LoRaWAN_Init+0x1a0>)
 8003b04:	f006 f85c 	bl	8009bc0 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8003b08:	4817      	ldr	r0, [pc, #92]	; (8003b68 <LoRaWAN_Init+0x17c>)
 8003b0a:	f011 fb97 	bl	801523c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8003b0e:	2101      	movs	r1, #1
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <LoRaWAN_Init+0x1a4>)
 8003b12:	7818      	ldrb	r0, [r3, #0]
 8003b14:	f005 fe10 	bl	8009738 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8003b18:	4d1e      	ldr	r5, [pc, #120]	; (8003b94 <LoRaWAN_Init+0x1a8>)
 8003b1a:	9400      	str	r4, [sp, #0]
 8003b1c:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <LoRaWAN_Init+0x1ac>)
 8003b1e:	4622      	mov	r2, r4
 8003b20:	491e      	ldr	r1, [pc, #120]	; (8003b9c <LoRaWAN_Init+0x1b0>)
 8003b22:	6809      	ldr	r1, [r1, #0]
 8003b24:	4628      	mov	r0, r5
 8003b26:	f011 fad1 	bl	80150cc <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f011 fb86 	bl	801523c <UTIL_TIMER_Start>
  waitForRx = 1;
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <LoRaWAN_Init+0x1b4>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	b007      	add	sp, #28
 8003b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003b3a:	f7fe f96b 	bl	8001e14 <Error_Handler>
 8003b3e:	e7bd      	b.n	8003abc <LoRaWAN_Init+0xd0>
 8003b40:	0801a39c 	.word	0x0801a39c
 8003b44:	0801a3c0 	.word	0x0801a3c0
 8003b48:	0801a3e4 	.word	0x0801a3e4
 8003b4c:	0801a408 	.word	0x0801a408
 8003b50:	0801a42c 	.word	0x0801a42c
 8003b54:	080034cb 	.word	0x080034cb
 8003b58:	200008b4 	.word	0x200008b4
 8003b5c:	080034cd 	.word	0x080034cd
 8003b60:	20000884 	.word	0x20000884
 8003b64:	080039d9 	.word	0x080039d9
 8003b68:	2000086c 	.word	0x2000086c
 8003b6c:	080035f1 	.word	0x080035f1
 8003b70:	2000089c 	.word	0x2000089c
 8003b74:	080099b9 	.word	0x080099b9
 8003b78:	08003905 	.word	0x08003905
 8003b7c:	080038cd 	.word	0x080038cd
 8003b80:	08003859 	.word	0x08003859
 8003b84:	01030000 	.word	0x01030000
 8003b88:	20000024 	.word	0x20000024
 8003b8c:	20000070 	.word	0x20000070
 8003b90:	20000019 	.word	0x20000019
 8003b94:	200008cc 	.word	0x200008cc
 8003b98:	080035cd 	.word	0x080035cd
 8003b9c:	20000088 	.word	0x20000088
 8003ba0:	20000000 	.word	0x20000000

08003ba4 <HAL_GPIO_EXTI_Callback>:
{
 8003ba4:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8003ba6:	2802      	cmp	r0, #2
 8003ba8:	d002      	beq.n	8003bb0 <HAL_GPIO_EXTI_Callback+0xc>
 8003baa:	2840      	cmp	r0, #64	; 0x40
 8003bac:	d005      	beq.n	8003bba <HAL_GPIO_EXTI_Callback+0x16>
}
 8003bae:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	2008      	movs	r0, #8
 8003bb4:	f011 f8a6 	bl	8014d04 <UTIL_SEQ_SetTask>
      break;
 8003bb8:	e7f9      	b.n	8003bae <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8003bba:	2100      	movs	r1, #0
 8003bbc:	2004      	movs	r0, #4
 8003bbe:	f011 f8a1 	bl	8014d04 <UTIL_SEQ_SetTask>
}
 8003bc2:	e7f4      	b.n	8003bae <HAL_GPIO_EXTI_Callback+0xa>

08003bc4 <PauseTasks>:
void PauseTasks(void) {
 8003bc4:	b508      	push	{r3, lr}
	  UTIL_SEQ_PauseTask((1 << CFG_SEQ_Task_LmHandlerProcess));
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	f011 f8b0 	bl	8014d2c <UTIL_SEQ_PauseTask>
	  UTIL_SEQ_PauseTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent));
 8003bcc:	2002      	movs	r0, #2
 8003bce:	f011 f8ad 	bl	8014d2c <UTIL_SEQ_PauseTask>
	  UTIL_SEQ_PauseTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent));
 8003bd2:	2004      	movs	r0, #4
 8003bd4:	f011 f8aa 	bl	8014d2c <UTIL_SEQ_PauseTask>
	  UTIL_SEQ_PauseTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent));
 8003bd8:	2008      	movs	r0, #8
 8003bda:	f011 f8a7 	bl	8014d2c <UTIL_SEQ_PauseTask>
}
 8003bde:	bd08      	pop	{r3, pc}

08003be0 <ResumeTasks>:
void ResumeTasks(void) {
 8003be0:	b508      	push	{r3, lr}
	  UTIL_SEQ_ResumeTask((1 << CFG_SEQ_Task_LmHandlerProcess));
 8003be2:	2001      	movs	r0, #1
 8003be4:	f011 f8b0 	bl	8014d48 <UTIL_SEQ_ResumeTask>
	  UTIL_SEQ_ResumeTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent));
 8003be8:	2002      	movs	r0, #2
 8003bea:	f011 f8ad 	bl	8014d48 <UTIL_SEQ_ResumeTask>
	  UTIL_SEQ_ResumeTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent));
 8003bee:	2004      	movs	r0, #4
 8003bf0:	f011 f8aa 	bl	8014d48 <UTIL_SEQ_ResumeTask>
	  UTIL_SEQ_ResumeTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent));
 8003bf4:	2008      	movs	r0, #8
 8003bf6:	f011 f8a7 	bl	8014d48 <UTIL_SEQ_ResumeTask>
}
 8003bfa:	bd08      	pop	{r3, pc}

08003bfc <sendCurrentTime>:
{
 8003bfc:	b500      	push	{lr}
 8003bfe:	b085      	sub	sp, #20
	uint8_t tx_buff[]={0,1,2,3,4,5,6,7,8,9};
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <sendCurrentTime+0x28>)
 8003c02:	ab01      	add	r3, sp, #4
 8003c04:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c06:	c303      	stmia	r3!, {r0, r1}
 8003c08:	801a      	strh	r2, [r3, #0]
	    	 HAL_UART_Transmit_DMA(&huart1, tx_buff, 10);
 8003c0a:	220a      	movs	r2, #10
 8003c0c:	a901      	add	r1, sp, #4
 8003c0e:	4806      	ldr	r0, [pc, #24]	; (8003c28 <sendCurrentTime+0x2c>)
 8003c10:	f004 f9a0 	bl	8007f54 <HAL_UART_Transmit_DMA>
	    	 HAL_Delay(5000);
 8003c14:	f241 3088 	movw	r0, #5000	; 0x1388
 8003c18:	f7fe fcd8 	bl	80025cc <HAL_Delay>
	    	  printf("Transmiotted Data\n");
 8003c1c:	4803      	ldr	r0, [pc, #12]	; (8003c2c <sendCurrentTime+0x30>)
 8003c1e:	f013 fb5d 	bl	80172dc <puts>
	    while (1) {  // Infinite loop to send the string continuously
 8003c22:	e7f2      	b.n	8003c0a <sendCurrentTime+0xe>
 8003c24:	08019f70 	.word	0x08019f70
 8003c28:	200006c8 	.word	0x200006c8
 8003c2c:	0801a450 	.word	0x0801a450

08003c30 <OnSysTimeUpdate>:
{
 8003c30:	b508      	push	{r3, lr}
		printf("Sending time to other chip\n");
 8003c32:	4803      	ldr	r0, [pc, #12]	; (8003c40 <OnSysTimeUpdate+0x10>)
 8003c34:	f013 fb52 	bl	80172dc <puts>
	  sendCurrentTime(&huart1);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <OnSysTimeUpdate+0x14>)
 8003c3a:	f7ff ffdf 	bl	8003bfc <sendCurrentTime>
 8003c3e:	bf00      	nop
 8003c40:	0801a464 	.word	0x0801a464
 8003c44:	200006c8 	.word	0x200006c8

08003c48 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <LoraInfo_Init+0x18>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8003c4e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003c50:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8003c52:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8003c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c58:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8003c5e:	4770      	bx	lr
 8003c60:	200008e4 	.word	0x200008e4

08003c64 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8003c64:	4800      	ldr	r0, [pc, #0]	; (8003c68 <LoraInfo_GetPtr+0x4>)
 8003c66:	4770      	bx	lr
 8003c68:	200008e4 	.word	0x200008e4

08003c6c <FRAG_DECODER_IF_Erase>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FRAG_DECODER_IF_Erase(void)
{
 8003c6c:	b508      	push	{r3, lr}

  /* USER CODE END FRAG_DECODER_IF_Erase_1 */
#if (INTEROP_TEST_MODE == 1)
  UTIL_MEM_set_8(UnfragmentedData, 0xFF, UNFRAGMENTED_DATA_SIZE);
#else /* INTEROP_TEST_MODE == 0 */
  status = FLASH_IF_Erase((void *)FRAG_DECODER_DWL_REGION_START, FRAG_DECODER_DWL_REGION_SIZE);
 8003c6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c72:	4802      	ldr	r0, [pc, #8]	; (8003c7c <FRAG_DECODER_IF_Erase+0x10>)
 8003c74:	f7fd fed2 	bl	8001a1c <FLASH_IF_Erase>
#endif /* INTEROP_TEST_MODE */
  /* USER CODE BEGIN FRAG_DECODER_IF_Erase_2 */

  /* USER CODE END FRAG_DECODER_IF_Erase_2 */
  return status;
}
 8003c78:	bd08      	pop	{r3, pc}
 8003c7a:	bf00      	nop
 8003c7c:	0803f000 	.word	0x0803f000

08003c80 <FRAG_DECODER_IF_Write>:

int32_t FRAG_DECODER_IF_Write(uint32_t addr, uint8_t *data, uint32_t size)
{
 8003c80:	b510      	push	{r4, lr}
 8003c82:	b082      	sub	sp, #8
  /* USER CODE END FRAG_DECODER_IF_Write_1 */
#if (INTEROP_TEST_MODE == 1)  /*write fragment in RAM - Caching mode*/
  UTIL_MEM_cpy_8(&UnfragmentedData[addr], data, size);
#else /* INTEROP_TEST_MODE == 0 */

  status = FLASH_IF_Write((void *)(FRAG_DECODER_DWL_REGION_START + addr), (const void *)data, size);
 8003c84:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 8003c88:	f500 307c 	add.w	r0, r0, #258048	; 0x3f000
 8003c8c:	f7fd fe8e 	bl	80019ac <FLASH_IF_Write>

  if (status != FLASH_IF_OK)
 8003c90:	4604      	mov	r4, r0
 8003c92:	b910      	cbnz	r0, 8003c9a <FRAG_DECODER_IF_Write+0x1a>
#endif /* INTEROP_TEST_MODE */
  /* USER CODE BEGIN FRAG_DECODER_IF_Write_2 */

  /* USER CODE END FRAG_DECODER_IF_Write_2 */
  return status;
}
 8003c94:	4620      	mov	r0, r4
 8003c96:	b002      	add	sp, #8
 8003c98:	bd10      	pop	{r4, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n.... !! FLASH_IF_WRITE_ERROR: %d !! ....\r\n", status);
 8003c9a:	9000      	str	r0, [sp, #0]
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <FRAG_DECODER_IF_Write+0x2c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	2002      	movs	r0, #2
 8003ca4:	f010 ff28 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  return status;
 8003ca8:	e7f4      	b.n	8003c94 <FRAG_DECODER_IF_Write+0x14>
 8003caa:	bf00      	nop
 8003cac:	0801a4b8 	.word	0x0801a4b8

08003cb0 <FRAG_DECODER_IF_OnProgress>:
  /* USER CODE END FRAG_DECODER_IF_Read_2 */
  return status;
}

void FRAG_DECODER_IF_OnProgress(uint16_t fragCounter, uint16_t fragNb, uint8_t fragSize, uint16_t fragNbLost)
{
 8003cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	460d      	mov	r5, r1
 8003cba:	4614      	mov	r4, r2
 8003cbc:	461f      	mov	r7, r3
  /* USER CODE BEGIN FRAG_DECODER_IF_OnProgress_1 */

  /* USER CODE END FRAG_DECODER_IF_OnProgress_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n.... FRAG_DECODER in Progress ....\r\n");
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <FRAG_DECODER_IF_OnProgress+0x80>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	f010 ff17 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "EXPECTED   : %03d Fragments (%05d Bytes)\r\n", fragNb, fragNb * fragSize);
 8003cca:	fb04 f305 	mul.w	r3, r4, r5
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	9500      	str	r5, [sp, #0]
 8003cd2:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <FRAG_DECODER_IF_OnProgress+0x84>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f010 ff0d 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "RECEIVED   : %03d Fragments\r\n", fragCounter - fragNbLost);
 8003cde:	eba6 0807 	sub.w	r8, r6, r7
 8003ce2:	f8cd 8000 	str.w	r8, [sp]
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <FRAG_DECODER_IF_OnProgress+0x88>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4611      	mov	r1, r2
 8003cec:	2002      	movs	r0, #2
 8003cee:	f010 ff03 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "             %05d Bytes\r\n", (fragCounter - fragNbLost) * fragSize);
 8003cf2:	fb08 f404 	mul.w	r4, r8, r4
 8003cf6:	9400      	str	r4, [sp, #0]
 8003cf8:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <FRAG_DECODER_IF_OnProgress+0x8c>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	2002      	movs	r0, #2
 8003d00:	f010 fefa 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LOST       : %03d Fragments\r\n\r\n", fragNbLost);
 8003d04:	9700      	str	r7, [sp, #0]
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <FRAG_DECODER_IF_OnProgress+0x90>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	2002      	movs	r0, #2
 8003d0e:	f010 fef3 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  if (fragCounter > fragNb)
 8003d12:	42b5      	cmp	r5, r6
 8003d14:	d302      	bcc.n	8003d1c <FRAG_DECODER_IF_OnProgress+0x6c>
    APP_LOG(TS_OFF, VLEVEL_M, "REDUNDANCY : %03d Fragments\r\n", fragCounter - fragNb);
  }
  /* USER CODE BEGIN FRAG_DECODER_IF_OnProgress_2 */

  /* USER CODE END FRAG_DECODER_IF_OnProgress_2 */
}
 8003d16:	b002      	add	sp, #8
 8003d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "REDUNDANCY : %03d Fragments\r\n", fragCounter - fragNb);
 8003d1c:	1b76      	subs	r6, r6, r5
 8003d1e:	9600      	str	r6, [sp, #0]
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <FRAG_DECODER_IF_OnProgress+0x94>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	4611      	mov	r1, r2
 8003d26:	2002      	movs	r0, #2
 8003d28:	f010 fee6 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 8003d2c:	e7f3      	b.n	8003d16 <FRAG_DECODER_IF_OnProgress+0x66>
 8003d2e:	bf00      	nop
 8003d30:	0801a4e8 	.word	0x0801a4e8
 8003d34:	0801a510 	.word	0x0801a510
 8003d38:	0801a53c 	.word	0x0801a53c
 8003d3c:	0801a55c 	.word	0x0801a55c
 8003d40:	0801a578 	.word	0x0801a578
 8003d44:	0801a598 	.word	0x0801a598

08003d48 <FRAG_DECODER_IF_OnDone>:

void FRAG_DECODER_IF_OnDone(int32_t status, uint32_t size, uint32_t *addr)
{
 8003d48:	b530      	push	{r4, r5, lr}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	4614      	mov	r4, r2
  /* USER CODE BEGIN FRAG_DECODER_IF_OnDone_1 */

  /* USER CODE END FRAG_DECODER_IF_OnDone_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n.... FRAG_DECODER Finished ....\r\n");
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <FRAG_DECODER_IF_OnDone+0x2c>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	4611      	mov	r1, r2
 8003d56:	2002      	movs	r0, #2
 8003d58:	f010 fece 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "STATUS     : %d\r\n", status);
 8003d5c:	9500      	str	r5, [sp, #0]
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <FRAG_DECODER_IF_OnDone+0x30>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	4611      	mov	r1, r2
 8003d64:	2002      	movs	r0, #2
 8003d66:	f010 fec7 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
#if (LORAWAN_PACKAGES_VERSION == 1)
  /* only required without Firmware Management protocol */
  FwUpdateAgent_Run();
#endif /* LORAWAN_PACKAGES_VERSION */

  *addr = FRAG_DECODER_DWL_REGION_START;
 8003d6a:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <FRAG_DECODER_IF_OnDone+0x34>)
 8003d6c:	6023      	str	r3, [r4, #0]
  *addr = (uint32_t)&UnfragmentedData[0];
#endif /* INTEROP_TEST_MODE == 1 */
  /* USER CODE BEGIN FRAG_DECODER_IF_OnDone_2 */

  /* USER CODE END FRAG_DECODER_IF_OnDone_2 */
}
 8003d6e:	b003      	add	sp, #12
 8003d70:	bd30      	pop	{r4, r5, pc}
 8003d72:	bf00      	nop
 8003d74:	0801a5b8 	.word	0x0801a5b8
 8003d78:	0801a5dc 	.word	0x0801a5dc
 8003d7c:	0803f000 	.word	0x0803f000

08003d80 <FRAG_DECODER_IF_Read>:
{
 8003d80:	b508      	push	{r3, lr}
 8003d82:	460b      	mov	r3, r1
  FLASH_IF_Read((void *)data, (const void *)(FRAG_DECODER_DWL_REGION_START + addr), size);
 8003d84:	f100 6100 	add.w	r1, r0, #134217728	; 0x8000000
 8003d88:	f501 317c 	add.w	r1, r1, #258048	; 0x3f000
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd fe29 	bl	80019e4 <FLASH_IF_Read>
}
 8003d92:	2000      	movs	r0, #0
 8003d94:	bd08      	pop	{r3, pc}

08003d96 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8003d96:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8003d98:	f000 f840 	bl	8003e1c <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003d9c:	bd08      	pop	{r3, pc}

08003d9e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8003d9e:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8003da0:	f000 f87e 	bl	8003ea0 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8003da4:	bd08      	pop	{r3, pc}

08003da6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8003da6:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8003da8:	f000 f8c8 	bl	8003f3c <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8003dac:	bd08      	pop	{r3, pc}

08003dae <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8003dae:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8003db0:	f000 f8c6 	bl	8003f40 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003db4:	bd08      	pop	{r3, pc}

08003db6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8003db6:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8003db8:	f000 f8c4 	bl	8003f44 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003dbc:	bd08      	pop	{r3, pc}

08003dbe <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8003dbe:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8003dc0:	f000 f8c2 	bl	8003f48 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8003dc4:	bd08      	pop	{r3, pc}
	...

08003dc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003dc8:	480d      	ldr	r0, [pc, #52]	; (8003e00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003dca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003dcc:	f000 f8c1 	bl	8003f52 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dd0:	480c      	ldr	r0, [pc, #48]	; (8003e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8003dd2:	490d      	ldr	r1, [pc, #52]	; (8003e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003dd4:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <LoopForever+0xe>)
  movs r3, #0
 8003dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dd8:	e002      	b.n	8003de0 <LoopCopyDataInit>

08003dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dde:	3304      	adds	r3, #4

08003de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003de4:	d3f9      	bcc.n	8003dda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003de6:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003de8:	4c0a      	ldr	r4, [pc, #40]	; (8003e14 <LoopForever+0x16>)
  movs r3, #0
 8003dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dec:	e001      	b.n	8003df2 <LoopFillZerobss>

08003dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df0:	3204      	adds	r2, #4

08003df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003df4:	d3fb      	bcc.n	8003dee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003df6:	f013 fa9d 	bl	8017334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dfa:	f7fe f854 	bl	8001ea6 <main>

08003dfe <LoopForever>:

LoopForever:
    b LoopForever
 8003dfe:	e7fe      	b.n	8003dfe <LoopForever>
  ldr   r0, =_estack
 8003e00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e08:	200003e8 	.word	0x200003e8
  ldr r2, =_sidata
 8003e0c:	0801b4f0 	.word	0x0801b4f0
  ldr r2, =_sbss
 8003e10:	200003e8 	.word	0x200003e8
  ldr r4, =_ebss
 8003e14:	20001e58 	.word	0x20001e58

08003e18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e18:	e7fe      	b.n	8003e18 <ADC_IRQHandler>
	...

08003e1c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e20:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003e22:	2400      	movs	r4, #0
 8003e24:	9401      	str	r4, [sp, #4]
 8003e26:	9402      	str	r4, [sp, #8]
 8003e28:	9403      	str	r4, [sp, #12]
 8003e2a:	9404      	str	r4, [sp, #16]
 8003e2c:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e34:	f042 0204 	orr.w	r2, r2, #4
 8003e38:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003e42:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003e44:	2710      	movs	r7, #16
 8003e46:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003e50:	4d12      	ldr	r5, [pc, #72]	; (8003e9c <BSP_RADIO_Init+0x80>)
 8003e52:	a901      	add	r1, sp, #4
 8003e54:	4628      	mov	r0, r5
 8003e56:	f001 f95f 	bl	8005118 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003e5a:	f04f 0820 	mov.w	r8, #32
 8003e5e:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003e62:	a901      	add	r1, sp, #4
 8003e64:	4628      	mov	r0, r5
 8003e66:	f001 f957 	bl	8005118 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8003e6a:	2608      	movs	r6, #8
 8003e6c:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8003e6e:	a901      	add	r1, sp, #4
 8003e70:	4628      	mov	r0, r5
 8003e72:	f001 f951 	bl	8005118 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003e76:	4622      	mov	r2, r4
 8003e78:	4641      	mov	r1, r8
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f001 fa9c 	bl	80053b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003e80:	4622      	mov	r2, r4
 8003e82:	4639      	mov	r1, r7
 8003e84:	4628      	mov	r0, r5
 8003e86:	f001 fa97 	bl	80053b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f001 fa92 	bl	80053b8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003e94:	4620      	mov	r0, r4
 8003e96:	b006      	add	sp, #24
 8003e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9c:	48000800 	.word	0x48000800

08003ea0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003ea0:	b510      	push	{r4, lr}
  switch (Config)
 8003ea2:	2803      	cmp	r0, #3
 8003ea4:	d813      	bhi.n	8003ece <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003ea6:	e8df f000 	tbb	[pc, r0]
 8003eaa:	1402      	.short	0x1402
 8003eac:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8003eae:	4c22      	ldr	r4, [pc, #136]	; (8003f38 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2108      	movs	r1, #8
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f001 fa7f 	bl	80053b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2110      	movs	r1, #16
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f001 fa7a 	bl	80053b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2120      	movs	r1, #32
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f001 fa75 	bl	80053b8 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8003ece:	2000      	movs	r0, #0
 8003ed0:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003ed2:	4c19      	ldr	r4, [pc, #100]	; (8003f38 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	2108      	movs	r1, #8
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f001 fa6d 	bl	80053b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003ede:	2201      	movs	r2, #1
 8003ee0:	2110      	movs	r1, #16
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f001 fa68 	bl	80053b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2120      	movs	r1, #32
 8003eec:	4620      	mov	r0, r4
 8003eee:	f001 fa63 	bl	80053b8 <HAL_GPIO_WritePin>
      break;
 8003ef2:	e7ec      	b.n	8003ece <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003ef4:	4c10      	ldr	r4, [pc, #64]	; (8003f38 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	2108      	movs	r1, #8
 8003efa:	4620      	mov	r0, r4
 8003efc:	f001 fa5c 	bl	80053b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003f00:	2201      	movs	r2, #1
 8003f02:	2110      	movs	r1, #16
 8003f04:	4620      	mov	r0, r4
 8003f06:	f001 fa57 	bl	80053b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f001 fa52 	bl	80053b8 <HAL_GPIO_WritePin>
      break;
 8003f14:	e7db      	b.n	8003ece <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003f16:	4c08      	ldr	r4, [pc, #32]	; (8003f38 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	2108      	movs	r1, #8
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f001 fa4b 	bl	80053b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003f22:	2200      	movs	r2, #0
 8003f24:	2110      	movs	r1, #16
 8003f26:	4620      	mov	r0, r4
 8003f28:	f001 fa46 	bl	80053b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	2120      	movs	r1, #32
 8003f30:	4620      	mov	r0, r4
 8003f32:	f001 fa41 	bl	80053b8 <HAL_GPIO_WritePin>
      break;
 8003f36:	e7ca      	b.n	8003ece <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003f38:	48000800 	.word	0x48000800

08003f3c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	4770      	bx	lr

08003f40 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8003f40:	2001      	movs	r0, #1
 8003f42:	4770      	bx	lr

08003f44 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003f44:	2001      	movs	r0, #1
 8003f46:	4770      	bx	lr

08003f48 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003f48:	b908      	cbnz	r0, 8003f4e <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003f4a:	200f      	movs	r0, #15
 8003f4c:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003f4e:	2016      	movs	r0, #22
  }

  return ret;
}
 8003f50:	4770      	bx	lr

08003f52 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003f52:	4770      	bx	lr

08003f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f54:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f56:	2003      	movs	r0, #3
 8003f58:	f000 fd14 	bl	8004984 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f5c:	f001 ff22 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_Init+0x28>)
 8003f62:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f64:	200f      	movs	r0, #15
 8003f66:	f7fe fb23 	bl	80025b0 <HAL_InitTick>
 8003f6a:	b110      	cbz	r0, 8003f72 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003f6c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8003f6e:	4620      	mov	r0, r4
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	4604      	mov	r4, r0
    HAL_MspInit();
 8003f74:	f7fe f9dc 	bl	8002330 <HAL_MspInit>
 8003f78:	e7f9      	b.n	8003f6e <HAL_Init+0x1a>
 8003f7a:	bf00      	nop
 8003f7c:	2000008c 	.word	0x2000008c

08003f80 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003f80:	4b01      	ldr	r3, [pc, #4]	; (8003f88 <HAL_GetUIDw0+0x8>)
 8003f82:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8003f86:	4770      	bx	lr
 8003f88:	1fff7000 	.word	0x1fff7000

08003f8c <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003f8c:	4b01      	ldr	r3, [pc, #4]	; (8003f94 <HAL_GetUIDw1+0x8>)
 8003f8e:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8003f92:	4770      	bx	lr
 8003f94:	1fff7000 	.word	0x1fff7000

08003f98 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8003f98:	4b01      	ldr	r3, [pc, #4]	; (8003fa0 <HAL_GetUIDw2+0x8>)
 8003f9a:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8003f9e:	4770      	bx	lr
 8003fa0:	1fff7000 	.word	0x1fff7000

08003fa4 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003fa4:	4a02      	ldr	r2, [pc, #8]	; (8003fb0 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8003fa6:	6853      	ldr	r3, [r2, #4]
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8003fae:	4770      	bx	lr
 8003fb0:	e0042000 	.word	0xe0042000

08003fb4 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003fb4:	4a02      	ldr	r2, [pc, #8]	; (8003fc0 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8003fb6:	6853      	ldr	r3, [r2, #4]
 8003fb8:	f023 0302 	bic.w	r3, r3, #2
 8003fbc:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8003fbe:	4770      	bx	lr
 8003fc0:	e0042000 	.word	0xe0042000

08003fc4 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003fc4:	4a02      	ldr	r2, [pc, #8]	; (8003fd0 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8003fc6:	6853      	ldr	r3, [r2, #4]
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8003fce:	4770      	bx	lr
 8003fd0:	e0042000 	.word	0xe0042000

08003fd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b530      	push	{r4, r5, lr}
 8003fd6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	f000 8106 	beq.w	80041ee <HAL_ADC_Init+0x21a>
 8003fe2:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fe4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003fe6:	b1bb      	cbz	r3, 8004018 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fe8:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fea:	6893      	ldr	r3, [r2, #8]
 8003fec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003ff0:	d11f      	bne.n	8004032 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8003ff2:	6893      	ldr	r3, [r2, #8]
 8003ff4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ff8:	f023 0317 	bic.w	r3, r3, #23
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004002:	4b7c      	ldr	r3, [pc, #496]	; (80041f4 <HAL_ADC_Init+0x220>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	4a7b      	ldr	r2, [pc, #492]	; (80041f8 <HAL_ADC_Init+0x224>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	3301      	adds	r3, #1
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004016:	e009      	b.n	800402c <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8004018:	f7fd fa74 	bl	8001504 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800401c:	2300      	movs	r3, #0
 800401e:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8004020:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8004024:	e7e0      	b.n	8003fe8 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8004026:	9b01      	ldr	r3, [sp, #4]
 8004028:	3b01      	subs	r3, #1
 800402a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800402c:	9b01      	ldr	r3, [sp, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f9      	bne.n	8004026 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004032:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004034:	6893      	ldr	r3, [r2, #8]
 8004036:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800403a:	f040 809a 	bne.w	8004172 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800403e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004040:	f043 0310 	orr.w	r3, r3, #16
 8004044:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004046:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800404e:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004050:	6893      	ldr	r3, [r2, #8]
 8004052:	f013 0304 	ands.w	r3, r3, #4
 8004056:	d000      	beq.n	800405a <HAL_ADC_Init+0x86>
 8004058:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800405a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800405c:	f011 0f10 	tst.w	r1, #16
 8004060:	f040 80be 	bne.w	80041e0 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 80bb 	bne.w	80041e0 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800406a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800406c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004070:	f043 0302 	orr.w	r3, r3, #2
 8004074:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004076:	6893      	ldr	r3, [r2, #8]
 8004078:	f013 0f01 	tst.w	r3, #1
 800407c:	d14f      	bne.n	800411e <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800407e:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004080:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004082:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004086:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004088:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800408c:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800408e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004092:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004094:	b109      	cbz	r1, 800409a <HAL_ADC_Init+0xc6>
 8004096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800409a:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 800409c:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800409e:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80040a0:	6921      	ldr	r1, [r4, #16]
 80040a2:	2900      	cmp	r1, #0
 80040a4:	db67      	blt.n	8004176 <HAL_ADC_Init+0x1a2>
 80040a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80040aa:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040ac:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80040b0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040b4:	f894 1020 	ldrb.w	r1, [r4, #32]
 80040b8:	2901      	cmp	r1, #1
 80040ba:	d05f      	beq.n	800417c <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80040be:	b121      	cbz	r1, 80040ca <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80040c0:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80040c4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80040c6:	4329      	orrs	r1, r5
 80040c8:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80040ca:	68d1      	ldr	r1, [r2, #12]
 80040cc:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80040d0:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 80040d4:	4319      	orrs	r1, r3
 80040d6:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040d8:	6863      	ldr	r3, [r4, #4]
 80040da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80040de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040e0:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80040e2:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80040e6:	2901      	cmp	r1, #1
 80040e8:	d055      	beq.n	8004196 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80040ea:	6821      	ldr	r1, [r4, #0]
 80040ec:	690d      	ldr	r5, [r1, #16]
 80040ee:	4b43      	ldr	r3, [pc, #268]	; (80041fc <HAL_ADC_Init+0x228>)
 80040f0:	402b      	ands	r3, r5
 80040f2:	4313      	orrs	r3, r2
 80040f4:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80040fc:	d00f      	beq.n	800411e <HAL_ADC_Init+0x14a>
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d00c      	beq.n	800411e <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004108:	d009      	beq.n	800411e <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800410a:	493d      	ldr	r1, [pc, #244]	; (8004200 <HAL_ADC_Init+0x22c>)
 800410c:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8004110:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8004114:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800411e:	6821      	ldr	r1, [r4, #0]
 8004120:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8004122:	694a      	ldr	r2, [r1, #20]
 8004124:	f022 0207 	bic.w	r2, r2, #7
 8004128:	4313      	orrs	r3, r2
 800412a:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800412c:	6822      	ldr	r2, [r4, #0]
 800412e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004130:	6953      	ldr	r3, [r2, #20]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800413a:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d133      	bne.n	80041aa <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004142:	6822      	ldr	r2, [r4, #0]
 8004144:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004146:	f063 030f 	orn	r3, r3, #15
 800414a:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800414c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8004154:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004156:	429a      	cmp	r2, r3
 8004158:	d039      	beq.n	80041ce <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800415a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800415c:	f023 0312 	bic.w	r3, r3, #18
 8004160:	f043 0310 	orr.w	r3, r3, #16
 8004164:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004166:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800416e:	2001      	movs	r0, #1
 8004170:	e03b      	b.n	80041ea <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004172:	2000      	movs	r0, #0
 8004174:	e76c      	b.n	8004050 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004176:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800417a:	e796      	b.n	80040aa <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800417c:	b915      	cbnz	r5, 8004184 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800417e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004182:	e79b      	b.n	80040bc <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004184:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004186:	f041 0120 	orr.w	r1, r1, #32
 800418a:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800418c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800418e:	f041 0101 	orr.w	r1, r1, #1
 8004192:	65e1      	str	r1, [r4, #92]	; 0x5c
 8004194:	e792      	b.n	80040bc <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8004196:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004198:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 800419a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800419c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 800419e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80041a0:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80041a2:	431a      	orrs	r2, r3
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	e79f      	b.n	80040ea <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ae:	d1cd      	bne.n	800414c <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 80041b0:	6821      	ldr	r1, [r4, #0]
 80041b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80041b4:	69e3      	ldr	r3, [r4, #28]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	f003 031c 	and.w	r3, r3, #28
 80041be:	f06f 020f 	mvn.w	r2, #15
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80041c8:	4313      	orrs	r3, r2
 80041ca:	628b      	str	r3, [r1, #40]	; 0x28
 80041cc:	e7be      	b.n	800414c <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 80041ce:	2300      	movs	r3, #0
 80041d0:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80041d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041d4:	f023 0303 	bic.w	r3, r3, #3
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80041de:	e004      	b.n	80041ea <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041e2:	f043 0310 	orr.w	r3, r3, #16
 80041e6:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041e8:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80041ea:	b003      	add	sp, #12
 80041ec:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80041ee:	2001      	movs	r0, #1
 80041f0:	e7fb      	b.n	80041ea <HAL_ADC_Init+0x216>
 80041f2:	bf00      	nop
 80041f4:	2000008c 	.word	0x2000008c
 80041f8:	053e2d63 	.word	0x053e2d63
 80041fc:	1ffffc02 	.word	0x1ffffc02
 8004200:	40012000 	.word	0x40012000

08004204 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	4604      	mov	r4, r0
 8004208:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800420a:	6946      	ldr	r6, [r0, #20]
 800420c:	2e08      	cmp	r6, #8
 800420e:	d005      	beq.n	800421c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004210:	6803      	ldr	r3, [r0, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f013 0f01 	tst.w	r3, #1
 8004218:	d11e      	bne.n	8004258 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800421a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800421c:	f7fe f9ca 	bl	80025b4 <HAL_GetTick>
 8004220:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4232      	tst	r2, r6
 8004228:	d11c      	bne.n	8004264 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800422e:	d0f8      	beq.n	8004222 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004230:	f7fe f9c0 	bl	80025b4 <HAL_GetTick>
 8004234:	1bc3      	subs	r3, r0, r7
 8004236:	42ab      	cmp	r3, r5
 8004238:	d801      	bhi.n	800423e <HAL_ADC_PollForConversion+0x3a>
 800423a:	2d00      	cmp	r5, #0
 800423c:	d1f1      	bne.n	8004222 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4233      	tst	r3, r6
 8004244:	d1ed      	bne.n	8004222 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800424e:	2300      	movs	r3, #0
 8004250:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8004254:	2003      	movs	r0, #3
 8004256:	e028      	b.n	80042aa <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004258:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800425a:	f043 0320 	orr.w	r3, r3, #32
 800425e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8004260:	2001      	movs	r0, #1
 8004262:	e022      	b.n	80042aa <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004264:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004272:	d115      	bne.n	80042a0 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004274:	7ea2      	ldrb	r2, [r4, #26]
 8004276:	b99a      	cbnz	r2, 80042a0 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	f012 0f08 	tst.w	r2, #8
 800427e:	d00f      	beq.n	80042a0 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	f012 0f04 	tst.w	r2, #4
 8004286:	d111      	bne.n	80042ac <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	f022 020c 	bic.w	r2, r2, #12
 800428e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004290:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80042a0:	7e20      	ldrb	r0, [r4, #24]
 80042a2:	b960      	cbnz	r0, 80042be <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	220c      	movs	r2, #12
 80042a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80042aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042ae:	f043 0320 	orr.w	r3, r3, #32
 80042b2:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	65e3      	str	r3, [r4, #92]	; 0x5c
 80042bc:	e7f0      	b.n	80042a0 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80042be:	2000      	movs	r0, #0
 80042c0:	e7f3      	b.n	80042aa <HAL_ADC_PollForConversion+0xa6>

080042c2 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80042c2:	6803      	ldr	r3, [r0, #0]
 80042c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80042c8:	b470      	push	{r4, r5, r6}
 80042ca:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042cc:	2200      	movs	r2, #0
 80042ce:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80042d0:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80042d2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80042d6:	2a01      	cmp	r2, #1
 80042d8:	f000 8103 	beq.w	80044e2 <HAL_ADC_ConfigChannel+0x21a>
 80042dc:	4603      	mov	r3, r0
 80042de:	2201      	movs	r2, #1
 80042e0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042e4:	6802      	ldr	r2, [r0, #0]
 80042e6:	6890      	ldr	r0, [r2, #8]
 80042e8:	f010 0f04 	tst.w	r0, #4
 80042ec:	d00a      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042f0:	f042 0220 	orr.w	r2, r2, #32
 80042f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042f6:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 80042fe:	b003      	add	sp, #12
 8004300:	bc70      	pop	{r4, r5, r6}
 8004302:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8004304:	6848      	ldr	r0, [r1, #4]
 8004306:	2802      	cmp	r0, #2
 8004308:	f000 809c 	beq.w	8004444 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800430c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004310:	d027      	beq.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 8004312:	4d75      	ldr	r5, [pc, #468]	; (80044e8 <HAL_ADC_ConfigChannel+0x220>)
 8004314:	42ac      	cmp	r4, r5
 8004316:	d024      	beq.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004318:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800431a:	f000 001f 	and.w	r0, r0, #31
 800431e:	250f      	movs	r5, #15
 8004320:	4085      	lsls	r5, r0
 8004322:	ea24 0505 	bic.w	r5, r4, r5
 8004326:	680c      	ldr	r4, [r1, #0]
 8004328:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800432c:	2e00      	cmp	r6, #0
 800432e:	d131      	bne.n	8004394 <HAL_ADC_ConfigChannel+0xcc>
 8004330:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8004334:	4084      	lsls	r4, r0
 8004336:	432c      	orrs	r4, r5
 8004338:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800433a:	684c      	ldr	r4, [r1, #4]
 800433c:	08a0      	lsrs	r0, r4, #2
 800433e:	3001      	adds	r0, #1
 8004340:	69dd      	ldr	r5, [r3, #28]
 8004342:	42a8      	cmp	r0, r5
 8004344:	d813      	bhi.n	800436e <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004346:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8004348:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800434a:	f004 041f 	and.w	r4, r4, #31
 800434e:	260f      	movs	r6, #15
 8004350:	40a6      	lsls	r6, r4
 8004352:	ea20 0006 	bic.w	r0, r0, r6
 8004356:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800435a:	40a5      	lsls	r5, r4
 800435c:	4328      	orrs	r0, r5
 800435e:	6290      	str	r0, [r2, #40]	; 0x28
}
 8004360:	e005      	b.n	800436e <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004362:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004364:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004366:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800436a:	4320      	orrs	r0, r4
 800436c:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800436e:	681c      	ldr	r4, [r3, #0]
 8004370:	680d      	ldr	r5, [r1, #0]
 8004372:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8004374:	6960      	ldr	r0, [r4, #20]
 8004376:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800437a:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 800437e:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8004382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004386:	4302      	orrs	r2, r0
 8004388:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800438a:	680a      	ldr	r2, [r1, #0]
 800438c:	2a00      	cmp	r2, #0
 800438e:	db09      	blt.n	80043a4 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004390:	2000      	movs	r0, #0
 8004392:	e7b1      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004398:	b114      	cbz	r4, 80043a0 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800439a:	fab4 f484 	clz	r4, r4
 800439e:	e7c9      	b.n	8004334 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80043a0:	2420      	movs	r4, #32
 80043a2:	e7c7      	b.n	8004334 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80043a4:	4951      	ldr	r1, [pc, #324]	; (80044ec <HAL_ADC_ConfigChannel+0x224>)
 80043a6:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 80043aa:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043ae:	4c50      	ldr	r4, [pc, #320]	; (80044f0 <HAL_ADC_ConfigChannel+0x228>)
 80043b0:	42a2      	cmp	r2, r4
 80043b2:	d007      	beq.n	80043c4 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043b4:	4c4f      	ldr	r4, [pc, #316]	; (80044f4 <HAL_ADC_ConfigChannel+0x22c>)
 80043b6:	42a2      	cmp	r2, r4
 80043b8:	d026      	beq.n	8004408 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80043ba:	4c4f      	ldr	r4, [pc, #316]	; (80044f8 <HAL_ADC_ConfigChannel+0x230>)
 80043bc:	42a2      	cmp	r2, r4
 80043be:	d032      	beq.n	8004426 <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043c0:	2000      	movs	r0, #0
 80043c2:	e799      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043c4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80043c8:	d1f4      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80043ce:	4847      	ldr	r0, [pc, #284]	; (80044ec <HAL_ADC_ConfigChannel+0x224>)
 80043d0:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80043d4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80043d8:	4311      	orrs	r1, r2
 80043da:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043de:	4a47      	ldr	r2, [pc, #284]	; (80044fc <HAL_ADC_ConfigChannel+0x234>)
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	0992      	lsrs	r2, r2, #6
 80043e4:	4946      	ldr	r1, [pc, #280]	; (8004500 <HAL_ADC_ConfigChannel+0x238>)
 80043e6:	fba1 1202 	umull	r1, r2, r1, r2
 80043ea:	0992      	lsrs	r2, r2, #6
 80043ec:	3201      	adds	r2, #1
 80043ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80043f6:	e002      	b.n	80043fe <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 80043f8:	9a01      	ldr	r2, [sp, #4]
 80043fa:	3a01      	subs	r2, #1
 80043fc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80043fe:	9a01      	ldr	r2, [sp, #4]
 8004400:	2a00      	cmp	r2, #0
 8004402:	d1f9      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004404:	2000      	movs	r0, #0
 8004406:	e777      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004408:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800440c:	d1d5      	bne.n	80043ba <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800440e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8004412:	4836      	ldr	r0, [pc, #216]	; (80044ec <HAL_ADC_ConfigChannel+0x224>)
 8004414:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004418:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800441c:	4311      	orrs	r1, r2
 800441e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004422:	2000      	movs	r0, #0
}
 8004424:	e768      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004426:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800442a:	d158      	bne.n	80044de <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800442c:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004430:	482e      	ldr	r0, [pc, #184]	; (80044ec <HAL_ADC_ConfigChannel+0x224>)
 8004432:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8004436:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800443a:	430a      	orrs	r2, r1
 800443c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004440:	2000      	movs	r0, #0
}
 8004442:	e759      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004444:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004448:	d002      	beq.n	8004450 <HAL_ADC_ConfigChannel+0x188>
 800444a:	4827      	ldr	r0, [pc, #156]	; (80044e8 <HAL_ADC_ConfigChannel+0x220>)
 800444c:	4284      	cmp	r4, r0
 800444e:	d106      	bne.n	800445e <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004450:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004452:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004454:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8004458:	ea20 0004 	bic.w	r0, r0, r4
 800445c:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800445e:	680a      	ldr	r2, [r1, #0]
 8004460:	2a00      	cmp	r2, #0
 8004462:	db01      	blt.n	8004468 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004464:	2000      	movs	r0, #0
 8004466:	e747      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004468:	4920      	ldr	r1, [pc, #128]	; (80044ec <HAL_ADC_ConfigChannel+0x224>)
 800446a:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800446e:	4820      	ldr	r0, [pc, #128]	; (80044f0 <HAL_ADC_ConfigChannel+0x228>)
 8004470:	4282      	cmp	r2, r0
 8004472:	d007      	beq.n	8004484 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004474:	481f      	ldr	r0, [pc, #124]	; (80044f4 <HAL_ADC_ConfigChannel+0x22c>)
 8004476:	4282      	cmp	r2, r0
 8004478:	d013      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800447a:	481f      	ldr	r0, [pc, #124]	; (80044f8 <HAL_ADC_ConfigChannel+0x230>)
 800447c:	4282      	cmp	r2, r0
 800447e:	d01f      	beq.n	80044c0 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004480:	2000      	movs	r0, #0
 8004482:	e739      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004484:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004488:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 800448c:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8004490:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004494:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004498:	4311      	orrs	r1, r2
 800449a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800449e:	2000      	movs	r0, #0
}
 80044a0:	e72a      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a2:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044a6:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 80044aa:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 80044ae:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80044b2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80044b6:	430a      	orrs	r2, r1
 80044b8:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044bc:	2000      	movs	r0, #0
}
 80044be:	e71b      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044c0:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044c4:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 80044c8:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80044cc:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80044d0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80044d4:	430a      	orrs	r2, r1
 80044d6:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044da:	2000      	movs	r0, #0
}
 80044dc:	e70c      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
 80044de:	2000      	movs	r0, #0
 80044e0:	e70a      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80044e2:	2002      	movs	r0, #2
 80044e4:	e70b      	b.n	80042fe <HAL_ADC_ConfigChannel+0x36>
 80044e6:	bf00      	nop
 80044e8:	80000004 	.word	0x80000004
 80044ec:	40012000 	.word	0x40012000
 80044f0:	b0001000 	.word	0xb0001000
 80044f4:	b8004000 	.word	0xb8004000
 80044f8:	b4002000 	.word	0xb4002000
 80044fc:	2000008c 	.word	0x2000008c
 8004500:	053e2d63 	.word	0x053e2d63

08004504 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004504:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004506:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	f012 0f04 	tst.w	r2, #4
 800450e:	d02a      	beq.n	8004566 <ADC_ConversionStop+0x62>
 8004510:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	f012 0f02 	tst.w	r2, #2
 8004518:	d107      	bne.n	800452a <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004520:	f022 0217 	bic.w	r2, r2, #23
 8004524:	f042 0210 	orr.w	r2, r2, #16
 8004528:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800452a:	f7fe f843 	bl	80025b4 <HAL_GetTick>
 800452e:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f013 0f04 	tst.w	r3, #4
 8004538:	d013      	beq.n	8004562 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800453a:	f7fe f83b 	bl	80025b4 <HAL_GetTick>
 800453e:	1b43      	subs	r3, r0, r5
 8004540:	2b02      	cmp	r3, #2
 8004542:	d9f5      	bls.n	8004530 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f013 0f04 	tst.w	r3, #4
 800454c:	d0f0      	beq.n	8004530 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004550:	f043 0310 	orr.w	r3, r3, #16
 8004554:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004556:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800455e:	2001      	movs	r0, #1
 8004560:	e002      	b.n	8004568 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004562:	2000      	movs	r0, #0
 8004564:	e000      	b.n	8004568 <ADC_ConversionStop+0x64>
 8004566:	2000      	movs	r0, #0
}
 8004568:	bd38      	pop	{r3, r4, r5, pc}
	...

0800456c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800456c:	b530      	push	{r4, r5, lr}
 800456e:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004570:	2300      	movs	r3, #0
 8004572:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004574:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	f012 0f01 	tst.w	r2, #1
 800457c:	d15b      	bne.n	8004636 <ADC_Enable+0xca>
 800457e:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004580:	6899      	ldr	r1, [r3, #8]
 8004582:	4a2e      	ldr	r2, [pc, #184]	; (800463c <ADC_Enable+0xd0>)
 8004584:	4211      	tst	r1, r2
 8004586:	d117      	bne.n	80045b8 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800458e:	f022 0217 	bic.w	r2, r2, #23
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004598:	4b29      	ldr	r3, [pc, #164]	; (8004640 <ADC_Enable+0xd4>)
 800459a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800459e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80045a2:	d019      	beq.n	80045d8 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <ADC_Enable+0xd8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	4a27      	ldr	r2, [pc, #156]	; (8004648 <ADC_Enable+0xdc>)
 80045ac:	fba2 2303 	umull	r2, r3, r2, r3
 80045b0:	099b      	lsrs	r3, r3, #6
 80045b2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80045b4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80045b6:	e00c      	b.n	80045d2 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80045ba:	f043 0310 	orr.w	r3, r3, #16
 80045be:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80045c8:	2001      	movs	r0, #1
 80045ca:	e035      	b.n	8004638 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80045cc:	9b01      	ldr	r3, [sp, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80045d2:	9b01      	ldr	r3, [sp, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1f9      	bne.n	80045cc <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80045d8:	7e63      	ldrb	r3, [r4, #25]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045de:	2000      	movs	r0, #0
 80045e0:	e02a      	b.n	8004638 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80045e2:	f7fd ffe7 	bl	80025b4 <HAL_GetTick>
 80045e6:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f012 0f01 	tst.w	r2, #1
 80045f0:	d11f      	bne.n	8004632 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	f012 0f01 	tst.w	r2, #1
 80045f8:	d107      	bne.n	800460a <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004600:	f022 0217 	bic.w	r2, r2, #23
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800460a:	f7fd ffd3 	bl	80025b4 <HAL_GetTick>
 800460e:	1b40      	subs	r0, r0, r5
 8004610:	2802      	cmp	r0, #2
 8004612:	d9e9      	bls.n	80045e8 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f013 0f01 	tst.w	r3, #1
 800461c:	d1e4      	bne.n	80045e8 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004620:	f043 0310 	orr.w	r3, r3, #16
 8004624:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004626:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800462e:	2001      	movs	r0, #1
 8004630:	e002      	b.n	8004638 <ADC_Enable+0xcc>
  return HAL_OK;
 8004632:	2000      	movs	r0, #0
 8004634:	e000      	b.n	8004638 <ADC_Enable+0xcc>
 8004636:	2000      	movs	r0, #0
}
 8004638:	b003      	add	sp, #12
 800463a:	bd30      	pop	{r4, r5, pc}
 800463c:	80000017 	.word	0x80000017
 8004640:	40012000 	.word	0x40012000
 8004644:	2000008c 	.word	0x2000008c
 8004648:	053e2d63 	.word	0x053e2d63

0800464c <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800464c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f013 0f04 	tst.w	r3, #4
 8004654:	d128      	bne.n	80046a8 <HAL_ADC_Start+0x5c>
{
 8004656:	b510      	push	{r4, lr}
 8004658:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800465a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800465e:	2b01      	cmp	r3, #1
 8004660:	d024      	beq.n	80046ac <HAL_ADC_Start+0x60>
 8004662:	2301      	movs	r3, #1
 8004664:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8004668:	f7ff ff80 	bl	800456c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800466c:	b9c0      	cbnz	r0, 80046a0 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800466e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004670:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800467c:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800467e:	2300      	movs	r3, #0
 8004680:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	211c      	movs	r1, #28
 8004686:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004688:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 800468c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800468e:	6893      	ldr	r3, [r2, #8]
 8004690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004694:	f023 0317 	bic.w	r3, r3, #23
 8004698:	f043 0304 	orr.w	r3, r3, #4
 800469c:	6093      	str	r3, [r2, #8]
}
 800469e:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80046a0:	2300      	movs	r3, #0
 80046a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80046a6:	e7fa      	b.n	800469e <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80046a8:	2002      	movs	r0, #2
}
 80046aa:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80046ac:	2002      	movs	r0, #2
 80046ae:	e7f6      	b.n	800469e <HAL_ADC_Start+0x52>

080046b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046b4:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80046b6:	6893      	ldr	r3, [r2, #8]
 80046b8:	f013 0302 	ands.w	r3, r3, #2
 80046bc:	d000      	beq.n	80046c0 <ADC_Disable+0x10>
 80046be:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046c0:	6891      	ldr	r1, [r2, #8]
 80046c2:	f011 0f01 	tst.w	r1, #1
 80046c6:	d039      	beq.n	800473c <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d139      	bne.n	8004740 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046cc:	6893      	ldr	r3, [r2, #8]
 80046ce:	f003 0305 	and.w	r3, r3, #5
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d009      	beq.n	80046ea <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046d8:	f043 0310 	orr.w	r3, r3, #16
 80046dc:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80046e6:	2001      	movs	r0, #1
 80046e8:	e029      	b.n	800473e <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80046ea:	6893      	ldr	r3, [r2, #8]
 80046ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046f0:	f023 0317 	bic.w	r3, r3, #23
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	2203      	movs	r2, #3
 80046fe:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004700:	f7fd ff58 	bl	80025b4 <HAL_GetTick>
 8004704:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f013 0f01 	tst.w	r3, #1
 800470e:	d013      	beq.n	8004738 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004710:	f7fd ff50 	bl	80025b4 <HAL_GetTick>
 8004714:	1b40      	subs	r0, r0, r5
 8004716:	2802      	cmp	r0, #2
 8004718:	d9f5      	bls.n	8004706 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f013 0f01 	tst.w	r3, #1
 8004722:	d0f0      	beq.n	8004706 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004724:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004726:	f043 0310 	orr.w	r3, r3, #16
 800472a:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8004734:	2001      	movs	r0, #1
 8004736:	e002      	b.n	800473e <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004738:	2000      	movs	r0, #0
 800473a:	e000      	b.n	800473e <ADC_Disable+0x8e>
 800473c:	2000      	movs	r0, #0
}
 800473e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004740:	2000      	movs	r0, #0
 8004742:	e7fc      	b.n	800473e <ADC_Disable+0x8e>

08004744 <HAL_ADC_DeInit>:
{
 8004744:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8004746:	2800      	cmp	r0, #0
 8004748:	d056      	beq.n	80047f8 <HAL_ADC_DeInit+0xb4>
 800474a:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800474c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800474e:	f043 0302 	orr.w	r3, r3, #2
 8004752:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004754:	f7ff fed6 	bl	8004504 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004758:	4606      	mov	r6, r0
 800475a:	2800      	cmp	r0, #0
 800475c:	d03d      	beq.n	80047da <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	6853      	ldr	r3, [r2, #4]
 8004762:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	f240 329f 	movw	r2, #927	; 0x39f
 8004772:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004774:	6822      	ldr	r2, [r4, #0]
 8004776:	68d1      	ldr	r1, [r2, #12]
 8004778:	4b20      	ldr	r3, [pc, #128]	; (80047fc <HAL_ADC_DeInit+0xb8>)
 800477a:	400b      	ands	r3, r1
 800477c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	6913      	ldr	r3, [r2, #16]
 8004782:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004786:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	6953      	ldr	r3, [r2, #20]
 800478c:	f023 0307 	bic.w	r3, r3, #7
 8004790:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8004792:	6822      	ldr	r2, [r4, #0]
 8004794:	6a13      	ldr	r3, [r2, #32]
 8004796:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800479a:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800479c:	6822      	ldr	r2, [r4, #0]
 800479e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80047a0:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80047a4:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80047aa:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80047ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b4:	2500      	movs	r5, #0
 80047b6:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80047b8:	4a11      	ldr	r2, [pc, #68]	; (8004800 <HAL_ADC_DeInit+0xbc>)
 80047ba:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 80047be:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80047c2:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 80047c6:	4620      	mov	r0, r4
 80047c8:	f7fc feb2 	bl	8001530 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80047cc:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80047ce:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80047d0:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80047d2:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 80047d6:	4630      	mov	r0, r6
 80047d8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80047da:	4620      	mov	r0, r4
 80047dc:	f7ff ff68 	bl	80046b0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80047e0:	4606      	mov	r6, r0
 80047e2:	b908      	cbnz	r0, 80047e8 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 80047e4:	2301      	movs	r3, #1
 80047e6:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80047e8:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80047ea:	6893      	ldr	r3, [r2, #8]
 80047ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80047f0:	f023 0317 	bic.w	r3, r3, #23
 80047f4:	6093      	str	r3, [r2, #8]
}
 80047f6:	e7b2      	b.n	800475e <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80047f8:	2601      	movs	r6, #1
 80047fa:	e7ec      	b.n	80047d6 <HAL_ADC_DeInit+0x92>
 80047fc:	833e0200 	.word	0x833e0200
 8004800:	40012000 	.word	0x40012000

08004804 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004804:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004808:	2b01      	cmp	r3, #1
 800480a:	d019      	beq.n	8004840 <HAL_ADC_Stop+0x3c>
{
 800480c:	b510      	push	{r4, lr}
 800480e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004810:	2301      	movs	r3, #1
 8004812:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004816:	f7ff fe75 	bl	8004504 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800481a:	b118      	cbz	r0, 8004824 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800481c:	2300      	movs	r3, #0
 800481e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8004822:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004824:	4620      	mov	r0, r4
 8004826:	f7ff ff43 	bl	80046b0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800482a:	2800      	cmp	r0, #0
 800482c:	d1f6      	bne.n	800481c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800482e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	65a3      	str	r3, [r4, #88]	; 0x58
 800483e:	e7ed      	b.n	800481c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8004840:	2002      	movs	r0, #2
}
 8004842:	4770      	bx	lr

08004844 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004846:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004848:	2300      	movs	r3, #0
 800484a:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800484c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004850:	2b01      	cmp	r3, #1
 8004852:	f000 8094 	beq.w	800497e <HAL_ADCEx_Calibration_Start+0x13a>
 8004856:	4604      	mov	r4, r0
 8004858:	2301      	movs	r3, #1
 800485a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800485e:	f7ff ff27 	bl	80046b0 <ADC_Disable>
 8004862:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004864:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	f012 0201 	ands.w	r2, r2, #1
 800486c:	d009      	beq.n	8004882 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800486e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004870:	f043 0310 	orr.w	r3, r3, #16
 8004874:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004876:	2300      	movs	r3, #0
 8004878:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 800487c:	4628      	mov	r0, r5
 800487e:	b003      	add	sp, #12
 8004880:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004882:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004884:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8004888:	f041 0102 	orr.w	r1, r1, #2
 800488c:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800488e:	68de      	ldr	r6, [r3, #12]
 8004890:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8004894:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8004898:	0436      	lsls	r6, r6, #16
 800489a:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800489c:	68d9      	ldr	r1, [r3, #12]
 800489e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80048a2:	f021 0103 	bic.w	r1, r1, #3
 80048a6:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80048a8:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80048aa:	e005      	b.n	80048b8 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80048ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80048b4:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80048b6:	3201      	adds	r2, #1
 80048b8:	2a07      	cmp	r2, #7
 80048ba:	d81e      	bhi.n	80048fa <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80048bc:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80048be:	688b      	ldr	r3, [r1, #8]
 80048c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048c4:	f023 0317 	bic.w	r3, r3, #23
 80048c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048cc:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048ce:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80048d0:	6899      	ldr	r1, [r3, #8]
 80048d2:	2900      	cmp	r1, #0
 80048d4:	daea      	bge.n	80048ac <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	3301      	adds	r3, #1
 80048da:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80048dc:	9b01      	ldr	r3, [sp, #4]
 80048de:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80048e2:	d3f4      	bcc.n	80048ce <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 80048e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048e6:	f023 0312 	bic.w	r3, r3, #18
 80048ea:	f043 0310 	orr.w	r3, r3, #16
 80048ee:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80048f0:	2300      	movs	r3, #0
 80048f2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80048f6:	2501      	movs	r5, #1
 80048f8:	e7c0      	b.n	800487c <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 80048fa:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 80048fe:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004900:	6893      	ldr	r3, [r2, #8]
 8004902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004906:	f023 0317 	bic.w	r3, r3, #23
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004910:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004912:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8004916:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800491a:	4318      	orrs	r0, r3
 800491c:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8004920:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004922:	6893      	ldr	r3, [r2, #8]
 8004924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004928:	f023 0317 	bic.w	r3, r3, #23
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004932:	f7fd fe3f 	bl	80025b4 <HAL_GetTick>
 8004936:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004938:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	f012 0f01 	tst.w	r2, #1
 8004940:	d109      	bne.n	8004956 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	4332      	orrs	r2, r6
 8004946:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	65a3      	str	r3, [r4, #88]	; 0x58
 8004954:	e78f      	b.n	8004876 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004956:	f7fd fe2d 	bl	80025b4 <HAL_GetTick>
 800495a:	1bc3      	subs	r3, r0, r7
 800495c:	2b02      	cmp	r3, #2
 800495e:	d9eb      	bls.n	8004938 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f013 0f01 	tst.w	r3, #1
 8004968:	d0e6      	beq.n	8004938 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800496a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800496c:	f043 0310 	orr.w	r3, r3, #16
 8004970:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004972:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800497a:	2501      	movs	r5, #1
 800497c:	e77e      	b.n	800487c <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 800497e:	2502      	movs	r5, #2
 8004980:	e77c      	b.n	800487c <HAL_ADCEx_Calibration_Start+0x38>
	...

08004984 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004984:	4a07      	ldr	r2, [pc, #28]	; (80049a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004986:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004988:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004990:	0200      	lsls	r0, r0, #8
 8004992:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004996:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800499c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80049a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80049a2:	4770      	bx	lr
 80049a4:	e000ed00 	.word	0xe000ed00

080049a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049aa:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <HAL_NVIC_SetPriority+0x68>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b2:	f1c3 0c07 	rsb	ip, r3, #7
 80049b6:	f1bc 0f04 	cmp.w	ip, #4
 80049ba:	bf28      	it	cs
 80049bc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049c0:	f103 0e04 	add.w	lr, r3, #4
 80049c4:	f1be 0f06 	cmp.w	lr, #6
 80049c8:	d918      	bls.n	80049fc <HAL_NVIC_SetPriority+0x54>
 80049ca:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049cc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80049d0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80049d4:	ea21 010c 	bic.w	r1, r1, ip
 80049d8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049da:	fa0e fe03 	lsl.w	lr, lr, r3
 80049de:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80049e4:	2800      	cmp	r0, #0
 80049e6:	db0b      	blt.n	8004a00 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e8:	0112      	lsls	r2, r2, #4
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80049f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80049f4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049f8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049fc:	2300      	movs	r3, #0
 80049fe:	e7e5      	b.n	80049cc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a00:	f000 000f 	and.w	r0, r0, #15
 8004a04:	0112      	lsls	r2, r2, #4
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <HAL_NVIC_SetPriority+0x6c>)
 8004a0a:	541a      	strb	r2, [r3, r0]
 8004a0c:	e7f4      	b.n	80049f8 <HAL_NVIC_SetPriority+0x50>
 8004a0e:	bf00      	nop
 8004a10:	e000ed00 	.word	0xe000ed00
 8004a14:	e000ed14 	.word	0xe000ed14

08004a18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	db07      	blt.n	8004a2c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1c:	f000 021f 	and.w	r2, r0, #31
 8004a20:	0940      	lsrs	r0, r0, #5
 8004a22:	2301      	movs	r3, #1
 8004a24:	4093      	lsls	r3, r2
 8004a26:	4a02      	ldr	r2, [pc, #8]	; (8004a30 <HAL_NVIC_EnableIRQ+0x18>)
 8004a28:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000e100 	.word	0xe000e100

08004a34 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a34:	2800      	cmp	r0, #0
 8004a36:	db0c      	blt.n	8004a52 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a38:	f000 021f 	and.w	r2, r0, #31
 8004a3c:	0940      	lsrs	r0, r0, #5
 8004a3e:	2301      	movs	r3, #1
 8004a40:	4093      	lsls	r3, r2
 8004a42:	3020      	adds	r0, #32
 8004a44:	4a03      	ldr	r2, [pc, #12]	; (8004a54 <HAL_NVIC_DisableIRQ+0x20>)
 8004a46:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a4e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004a52:	4770      	bx	lr
 8004a54:	e000e100 	.word	0xe000e100

08004a58 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a58:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a5a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004a5c:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8004a60:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004a64:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004a66:	b124      	cbz	r4, 8004a72 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a68:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8004a6a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8004a6e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a72:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004a74:	f004 0c1c 	and.w	ip, r4, #28
 8004a78:	2401      	movs	r4, #1
 8004a7a:	fa04 f40c 	lsl.w	r4, r4, ip
 8004a7e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8004a82:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a86:	6804      	ldr	r4, [r0, #0]
 8004a88:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a8a:	6883      	ldr	r3, [r0, #8]
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d005      	beq.n	8004a9c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004a90:	6803      	ldr	r3, [r0, #0]
 8004a92:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004a94:	6803      	ldr	r3, [r0, #0]
 8004a96:	60da      	str	r2, [r3, #12]
  }
}
 8004a98:	bc10      	pop	{r4}
 8004a9a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004a9c:	6803      	ldr	r3, [r0, #0]
 8004a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004aa0:	6803      	ldr	r3, [r0, #0]
 8004aa2:	60d9      	str	r1, [r3, #12]
 8004aa4:	e7f8      	b.n	8004a98 <DMA_SetConfig+0x40>
	...

08004aa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004aa8:	6803      	ldr	r3, [r0, #0]
 8004aaa:	4a14      	ldr	r2, [pc, #80]	; (8004afc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d816      	bhi.n	8004ade <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004ab0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ab2:	f022 0203 	bic.w	r2, r2, #3
 8004ab6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004aba:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8004abe:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	3b08      	subs	r3, #8
 8004ac4:	4a0e      	ldr	r2, [pc, #56]	; (8004b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004acc:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8004ace:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004adc:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004ade:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ae0:	f022 0103 	bic.w	r1, r2, #3
 8004ae4:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004ae6:	440a      	add	r2, r1
 8004ae8:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	3b08      	subs	r3, #8
 8004aee:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	3307      	adds	r3, #7
 8004af8:	e7e8      	b.n	8004acc <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004afa:	bf00      	nop
 8004afc:	40020407 	.word	0x40020407
 8004b00:	cccccccd 	.word	0xcccccccd
 8004b04:	40020880 	.word	0x40020880
 8004b08:	4002081c 	.word	0x4002081c

08004b0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b0c:	6843      	ldr	r3, [r0, #4]
 8004b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b12:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004b14:	441a      	add	r2, r3
 8004b16:	0092      	lsls	r2, r2, #2
 8004b18:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b1a:	4a06      	ldr	r2, [pc, #24]	; (8004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004b1c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	2201      	movs	r2, #1
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	1000823f 	.word	0x1000823f
 8004b34:	40020940 	.word	0x40020940

08004b38 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d060      	beq.n	8004bfe <HAL_DMA_Init+0xc6>
{
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b40:	6802      	ldr	r2, [r0, #0]
 8004b42:	4b30      	ldr	r3, [pc, #192]	; (8004c04 <HAL_DMA_Init+0xcc>)
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d842      	bhi.n	8004bce <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b48:	4b2f      	ldr	r3, [pc, #188]	; (8004c08 <HAL_DMA_Init+0xd0>)
 8004b4a:	4413      	add	r3, r2
 8004b4c:	492f      	ldr	r1, [pc, #188]	; (8004c0c <HAL_DMA_Init+0xd4>)
 8004b4e:	fba1 1303 	umull	r1, r3, r1, r3
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b58:	4b2d      	ldr	r3, [pc, #180]	; (8004c10 <HAL_DMA_Init+0xd8>)
 8004b5a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004b6e:	6821      	ldr	r1, [r4, #0]
 8004b70:	680a      	ldr	r2, [r1, #0]
 8004b72:	68a3      	ldr	r3, [r4, #8]
 8004b74:	68e0      	ldr	r0, [r4, #12]
 8004b76:	4303      	orrs	r3, r0
 8004b78:	6920      	ldr	r0, [r4, #16]
 8004b7a:	4303      	orrs	r3, r0
 8004b7c:	6960      	ldr	r0, [r4, #20]
 8004b7e:	4303      	orrs	r3, r0
 8004b80:	69a0      	ldr	r0, [r4, #24]
 8004b82:	4303      	orrs	r3, r0
 8004b84:	69e0      	ldr	r0, [r4, #28]
 8004b86:	4303      	orrs	r3, r0
 8004b88:	6a20      	ldr	r0, [r4, #32]
 8004b8a:	4303      	orrs	r3, r0
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b90:	4620      	mov	r0, r4
 8004b92:	f7ff ff89 	bl	8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b96:	68a3      	ldr	r3, [r4, #8]
 8004b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b9c:	d022      	beq.n	8004be4 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b9e:	6863      	ldr	r3, [r4, #4]
 8004ba0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004baa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004bac:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d919      	bls.n	8004bea <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004bba:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bbc:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004bc8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004bcc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004bce:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <HAL_DMA_Init+0xdc>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	490e      	ldr	r1, [pc, #56]	; (8004c0c <HAL_DMA_Init+0xd4>)
 8004bd4:	fba1 1303 	umull	r1, r3, r1, r3
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004bde:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <HAL_DMA_Init+0xe0>)
 8004be0:	6403      	str	r3, [r0, #64]	; 0x40
 8004be2:	e7bb      	b.n	8004b5c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004be4:	2300      	movs	r3, #0
 8004be6:	6063      	str	r3, [r4, #4]
 8004be8:	e7d9      	b.n	8004b9e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004bea:	4620      	mov	r0, r4
 8004bec:	f7ff ff8e 	bl	8004b0c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bf8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004bfa:	605a      	str	r2, [r3, #4]
 8004bfc:	e7df      	b.n	8004bbe <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8004bfe:	2001      	movs	r0, #1
}
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40020407 	.word	0x40020407
 8004c08:	bffdfff8 	.word	0xbffdfff8
 8004c0c:	cccccccd 	.word	0xcccccccd
 8004c10:	40020000 	.word	0x40020000
 8004c14:	bffdfbf8 	.word	0xbffdfbf8
 8004c18:	40020400 	.word	0x40020400

08004c1c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d04b      	beq.n	8004cb8 <HAL_DMA_DeInit+0x9c>
{
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004c24:	6802      	ldr	r2, [r0, #0]
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c2e:	6802      	ldr	r2, [r0, #0]
 8004c30:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <HAL_DMA_DeInit+0xa0>)
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d82c      	bhi.n	8004c90 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c36:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <HAL_DMA_DeInit+0xa4>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	4922      	ldr	r1, [pc, #136]	; (8004cc4 <HAL_DMA_DeInit+0xa8>)
 8004c3c:	fba1 1303 	umull	r1, r3, r1, r3
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c46:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <HAL_DMA_DeInit+0xac>)
 8004c48:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8004c4a:	2500      	movs	r5, #0
 8004c4c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c50:	f003 021c 	and.w	r2, r3, #28
 8004c54:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004c56:	2301      	movs	r3, #1
 8004c58:	4093      	lsls	r3, r2
 8004c5a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f7ff ff23 	bl	8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8004c62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004c64:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004c68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004c6a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c6c:	6863      	ldr	r3, [r4, #4]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d918      	bls.n	8004ca6 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8004c74:	2000      	movs	r0, #0
 8004c76:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004c78:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c7a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8004c7c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004c7e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004c80:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004c82:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c84:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004c86:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004c8a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c90:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <HAL_DMA_DeInit+0xb0>)
 8004c92:	4413      	add	r3, r2
 8004c94:	490b      	ldr	r1, [pc, #44]	; (8004cc4 <HAL_DMA_DeInit+0xa8>)
 8004c96:	fba1 1303 	umull	r1, r3, r1, r3
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_DMA_DeInit+0xb4>)
 8004ca2:	6403      	str	r3, [r0, #64]	; 0x40
 8004ca4:	e7d1      	b.n	8004c4a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f7ff ff30 	bl	8004b0c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004cae:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cb2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	e7dd      	b.n	8004c74 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004cb8:	2001      	movs	r0, #1
}
 8004cba:	4770      	bx	lr
 8004cbc:	40020407 	.word	0x40020407
 8004cc0:	bffdfff8 	.word	0xbffdfff8
 8004cc4:	cccccccd 	.word	0xcccccccd
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	bffdfbf8 	.word	0xbffdfbf8
 8004cd0:	40020400 	.word	0x40020400

08004cd4 <HAL_DMA_Start_IT>:
{
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004cd8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004cdc:	2801      	cmp	r0, #1
 8004cde:	d043      	beq.n	8004d68 <HAL_DMA_Start_IT+0x94>
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004ce6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004cea:	b2c0      	uxtb	r0, r0
 8004cec:	2801      	cmp	r0, #1
 8004cee:	d006      	beq.n	8004cfe <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004cf0:	2380      	movs	r3, #128	; 0x80
 8004cf2:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004cfa:	2001      	movs	r0, #1
}
 8004cfc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cfe:	2002      	movs	r0, #2
 8004d00:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d04:	2000      	movs	r0, #0
 8004d06:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004d08:	6825      	ldr	r5, [r4, #0]
 8004d0a:	6828      	ldr	r0, [r5, #0]
 8004d0c:	f020 0001 	bic.w	r0, r0, #1
 8004d10:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d12:	4620      	mov	r0, r4
 8004d14:	f7ff fea0 	bl	8004a58 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004d18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d1a:	b1d3      	cbz	r3, 8004d52 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d1c:	6822      	ldr	r2, [r4, #0]
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	f043 030e 	orr.w	r3, r3, #14
 8004d24:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004d2e:	d003      	beq.n	8004d38 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d36:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004d38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d3a:	b11b      	cbz	r3, 8004d44 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d42:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004d44:	6822      	ldr	r2, [r4, #0]
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2000      	movs	r0, #0
 8004d50:	e7d4      	b.n	8004cfc <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	6813      	ldr	r3, [r2, #0]
 8004d56:	f023 0304 	bic.w	r3, r3, #4
 8004d5a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	6813      	ldr	r3, [r2, #0]
 8004d60:	f043 030a 	orr.w	r3, r3, #10
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e7de      	b.n	8004d26 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004d68:	2002      	movs	r0, #2
 8004d6a:	e7c7      	b.n	8004cfc <HAL_DMA_Start_IT+0x28>

08004d6c <HAL_DMA_IRQHandler>:
{
 8004d6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d70:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004d72:	6804      	ldr	r4, [r0, #0]
 8004d74:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004d76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d78:	f003 031c 	and.w	r3, r3, #28
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	420a      	tst	r2, r1
 8004d82:	d015      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x44>
 8004d84:	f015 0f04 	tst.w	r5, #4
 8004d88:	d012      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f013 0f20 	tst.w	r3, #32
 8004d90:	d103      	bne.n	8004d9a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	f023 0304 	bic.w	r3, r3, #4
 8004d98:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004d9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d9c:	f003 021c 	and.w	r2, r3, #28
 8004da0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004da2:	2304      	movs	r3, #4
 8004da4:	4093      	lsls	r3, r2
 8004da6:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004da8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004daa:	b103      	cbz	r3, 8004dae <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8004dac:	4798      	blx	r3
}
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004db0:	2202      	movs	r2, #2
 8004db2:	409a      	lsls	r2, r3
 8004db4:	420a      	tst	r2, r1
 8004db6:	d028      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x9e>
 8004db8:	f015 0f02 	tst.w	r5, #2
 8004dbc:	d025      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	f013 0f20 	tst.w	r3, #32
 8004dc4:	d106      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	f023 030a 	bic.w	r3, r3, #10
 8004dcc:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004dd4:	6802      	ldr	r2, [r0, #0]
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <HAL_DMA_IRQHandler+0xdc>)
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d90e      	bls.n	8004dfa <HAL_DMA_IRQHandler+0x8e>
 8004ddc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004dde:	f003 021c 	and.w	r2, r3, #28
 8004de2:	2302      	movs	r3, #2
 8004de4:	4093      	lsls	r3, r2
 8004de6:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <HAL_DMA_IRQHandler+0xe0>)
 8004de8:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004dea:	2300      	movs	r3, #0
 8004dec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004df0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0db      	beq.n	8004dae <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8004df6:	4798      	blx	r3
 8004df8:	e7d9      	b.n	8004dae <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004dfa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004dfc:	f003 021c 	and.w	r2, r3, #28
 8004e00:	2302      	movs	r3, #2
 8004e02:	4093      	lsls	r3, r2
 8004e04:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <HAL_DMA_IRQHandler+0xe4>)
 8004e06:	6053      	str	r3, [r2, #4]
 8004e08:	e7ef      	b.n	8004dea <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	420b      	tst	r3, r1
 8004e12:	d0cc      	beq.n	8004dae <HAL_DMA_IRQHandler+0x42>
 8004e14:	f015 0f08 	tst.w	r5, #8
 8004e18:	d0c9      	beq.n	8004dae <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	f023 030e 	bic.w	r3, r3, #14
 8004e20:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e22:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e24:	f003 031c 	and.w	r3, r3, #28
 8004e28:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e32:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004e34:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004e3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0b4      	beq.n	8004dae <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004e44:	4798      	blx	r3
  return;
 8004e46:	e7b2      	b.n	8004dae <HAL_DMA_IRQHandler+0x42>
 8004e48:	40020080 	.word	0x40020080
 8004e4c:	40020400 	.word	0x40020400
 8004e50:	40020000 	.word	0x40020000

08004e54 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004e54:	b178      	cbz	r0, 8004e76 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004e56:	6803      	ldr	r3, [r0, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004e5a:	f011 0f10 	tst.w	r1, #16
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004e60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004e64:	d004      	beq.n	8004e70 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004e66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004e6a:	601a      	str	r2, [r3, #0]
  return status;
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004e70:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004e74:	e7f9      	b.n	8004e6a <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004e76:	2001      	movs	r0, #1
}
 8004e78:	4770      	bx	lr
	...

08004e7c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004e7c:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e7e:	4c05      	ldr	r4, [pc, #20]	; (8004e94 <FLASH_Program_DoubleWord+0x18>)
 8004e80:	6961      	ldr	r1, [r4, #20]
 8004e82:	f041 0101 	orr.w	r1, r1, #1
 8004e86:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004e88:	6002      	str	r2, [r0, #0]
 8004e8a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004e8e:	6043      	str	r3, [r0, #4]
}
 8004e90:	bc10      	pop	{r4}
 8004e92:	4770      	bx	lr
 8004e94:	58004000 	.word	0x58004000

08004e98 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e98:	4a0c      	ldr	r2, [pc, #48]	; (8004ecc <FLASH_Program_Fast+0x34>)
 8004e9a:	6953      	ldr	r3, [r2, #20]
 8004e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea6:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004ea8:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004eaa:	f851 2b04 	ldr.w	r2, [r1], #4
 8004eae:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8004eb2:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004eb4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004eb8:	d1f7      	bne.n	8004eaa <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004eba:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <FLASH_Program_Fast+0x34>)
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ec2:	d1fa      	bne.n	8004eba <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec4:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	58004000 	.word	0x58004000

08004ed0 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004ed0:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <HAL_FLASH_Unlock+0x28>)
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	db01      	blt.n	8004edc <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2000      	movs	r0, #0
 8004eda:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_FLASH_Unlock+0x28>)
 8004ede:	4a07      	ldr	r2, [pc, #28]	; (8004efc <HAL_FLASH_Unlock+0x2c>)
 8004ee0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004ee2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004ee6:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	db01      	blt.n	8004ef2 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004eee:	2000      	movs	r0, #0
 8004ef0:	4770      	bx	lr
      status = HAL_ERROR;
 8004ef2:	2001      	movs	r0, #1
}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	58004000 	.word	0x58004000
 8004efc:	45670123 	.word	0x45670123

08004f00 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_FLASH_Lock+0x18>)
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f08:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	db01      	blt.n	8004f14 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004f10:	2001      	movs	r0, #1
}
 8004f12:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004f14:	2000      	movs	r0, #0
 8004f16:	4770      	bx	lr
 8004f18:	58004000 	.word	0x58004000

08004f1c <FLASH_WaitForLastOperation>:
{
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004f20:	f7fd fb48 	bl	80025b4 <HAL_GetTick>
 8004f24:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004f26:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <FLASH_WaitForLastOperation+0x64>)
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004f2e:	d006      	beq.n	8004f3e <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004f30:	f7fd fb40 	bl	80025b4 <HAL_GetTick>
 8004f34:	1b00      	subs	r0, r0, r4
 8004f36:	42a8      	cmp	r0, r5
 8004f38:	d3f5      	bcc.n	8004f26 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004f3a:	2003      	movs	r0, #3
}
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <FLASH_WaitForLastOperation+0x64>)
 8004f40:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004f42:	f013 0f01 	tst.w	r3, #1
 8004f46:	d002      	beq.n	8004f4e <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004f48:	4a0d      	ldr	r2, [pc, #52]	; (8004f80 <FLASH_WaitForLastOperation+0x64>)
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004f4e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8004f52:	4013      	ands	r3, r2
 8004f54:	d001      	beq.n	8004f5a <FLASH_WaitForLastOperation+0x3e>
 8004f56:	4a0a      	ldr	r2, [pc, #40]	; (8004f80 <FLASH_WaitForLastOperation+0x64>)
 8004f58:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004f5a:	b95b      	cbnz	r3, 8004f74 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <FLASH_WaitForLastOperation+0x64>)
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004f64:	d00a      	beq.n	8004f7c <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004f66:	f7fd fb25 	bl	80025b4 <HAL_GetTick>
 8004f6a:	1b00      	subs	r0, r0, r4
 8004f6c:	42a8      	cmp	r0, r5
 8004f6e:	d3f5      	bcc.n	8004f5c <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004f70:	2003      	movs	r0, #3
 8004f72:	e7e3      	b.n	8004f3c <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004f74:	4a03      	ldr	r2, [pc, #12]	; (8004f84 <FLASH_WaitForLastOperation+0x68>)
 8004f76:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004f78:	2001      	movs	r0, #1
 8004f7a:	e7df      	b.n	8004f3c <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	e7dd      	b.n	8004f3c <FLASH_WaitForLastOperation+0x20>
 8004f80:	58004000 	.word	0x58004000
 8004f84:	200008f4 	.word	0x200008f4

08004f88 <HAL_FLASH_Program>:
{
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004f8c:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <HAL_FLASH_Program+0x5c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d025      	beq.n	8004fe0 <HAL_FLASH_Program+0x58>
 8004f94:	4604      	mov	r4, r0
 8004f96:	460d      	mov	r5, r1
 8004f98:	4616      	mov	r6, r2
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <HAL_FLASH_Program+0x5c>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fa8:	f7ff ffb8 	bl	8004f1c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004fac:	b970      	cbnz	r0, 8004fcc <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004fae:	2c01      	cmp	r4, #1
 8004fb0:	d010      	beq.n	8004fd4 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f7ff ff6f 	bl	8004e98 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fbe:	f7ff ffad 	bl	8004f1c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <HAL_FLASH_Program+0x60>)
 8004fc4:	6953      	ldr	r3, [r2, #20]
 8004fc6:	ea23 0304 	bic.w	r3, r3, r4
 8004fca:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_FLASH_Program+0x5c>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
}
 8004fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	4628      	mov	r0, r5
 8004fda:	f7ff ff4f 	bl	8004e7c <FLASH_Program_DoubleWord>
 8004fde:	e7ec      	b.n	8004fba <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004fe0:	2002      	movs	r0, #2
 8004fe2:	e7f6      	b.n	8004fd2 <HAL_FLASH_Program+0x4a>
 8004fe4:	200008f4 	.word	0x200008f4
 8004fe8:	58004000 	.word	0x58004000

08004fec <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004fec:	4a03      	ldr	r2, [pc, #12]	; (8004ffc <FLASH_MassErase+0x10>)
 8004fee:	6953      	ldr	r3, [r2, #20]
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff4:	f043 0304 	orr.w	r3, r3, #4
 8004ff8:	6153      	str	r3, [r2, #20]
#endif
}
 8004ffa:	4770      	bx	lr
 8004ffc:	58004000 	.word	0x58004000

08005000 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005000:	4b18      	ldr	r3, [pc, #96]	; (8005064 <FLASH_FlushCaches+0x64>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005008:	2b01      	cmp	r3, #1
 800500a:	d006      	beq.n	800501a <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800500c:	4b15      	ldr	r3, [pc, #84]	; (8005064 <FLASH_FlushCaches+0x64>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	2b01      	cmp	r3, #1
 8005016:	d012      	beq.n	800503e <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8005018:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <FLASH_FlushCaches+0x64>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005022:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005032:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e7e6      	b.n	800500c <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <FLASH_FlushCaches+0x64>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005046:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005056:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800505e:	601a      	str	r2, [r3, #0]
}
 8005060:	e7da      	b.n	8005018 <FLASH_FlushCaches+0x18>
 8005062:	bf00      	nop
 8005064:	58004000 	.word	0x58004000

08005068 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005068:	4a03      	ldr	r2, [pc, #12]	; (8005078 <FLASH_AcknowledgePageErase+0x10>)
 800506a:	6953      	ldr	r3, [r2, #20]
 800506c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005070:	f023 0302 	bic.w	r3, r3, #2
 8005074:	6153      	str	r3, [r2, #20]
#endif
}
 8005076:	4770      	bx	lr
 8005078:	58004000 	.word	0x58004000

0800507c <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800507c:	4a05      	ldr	r2, [pc, #20]	; (8005094 <FLASH_PageErase+0x18>)
 800507e:	6953      	ldr	r3, [r2, #20]
 8005080:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005084:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8005088:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800508c:	f040 0002 	orr.w	r0, r0, #2
 8005090:	6150      	str	r0, [r2, #20]
}
 8005092:	4770      	bx	lr
 8005094:	58004000 	.word	0x58004000

08005098 <HAL_FLASHEx_Erase>:
{
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800509a:	4b1e      	ldr	r3, [pc, #120]	; (8005114 <HAL_FLASHEx_Erase+0x7c>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d035      	beq.n	800510e <HAL_FLASHEx_Erase+0x76>
 80050a2:	4605      	mov	r5, r0
 80050a4:	460f      	mov	r7, r1
 80050a6:	4b1b      	ldr	r3, [pc, #108]	; (8005114 <HAL_FLASHEx_Erase+0x7c>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050ac:	2200      	movs	r2, #0
 80050ae:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050b4:	f7ff ff32 	bl	8004f1c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80050b8:	4606      	mov	r6, r0
 80050ba:	bb18      	cbnz	r0, 8005104 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d013      	beq.n	80050ea <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 80050c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c6:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80050c8:	686c      	ldr	r4, [r5, #4]
 80050ca:	686b      	ldr	r3, [r5, #4]
 80050cc:	68aa      	ldr	r2, [r5, #8]
 80050ce:	4413      	add	r3, r2
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	d913      	bls.n	80050fc <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80050d4:	4620      	mov	r0, r4
 80050d6:	f7ff ffd1 	bl	800507c <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050de:	f7ff ff1d 	bl	8004f1c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80050e2:	4606      	mov	r6, r0
 80050e4:	b948      	cbnz	r0, 80050fa <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80050e6:	3401      	adds	r4, #1
 80050e8:	e7ef      	b.n	80050ca <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 80050ea:	f7ff ff7f 	bl	8004fec <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050f2:	f7ff ff13 	bl	8004f1c <FLASH_WaitForLastOperation>
 80050f6:	4606      	mov	r6, r0
 80050f8:	e002      	b.n	8005100 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 80050fa:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 80050fc:	f7ff ffb4 	bl	8005068 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8005100:	f7ff ff7e 	bl	8005000 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8005104:	4b03      	ldr	r3, [pc, #12]	; (8005114 <HAL_FLASHEx_Erase+0x7c>)
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]
}
 800510a:	4630      	mov	r0, r6
 800510c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800510e:	2602      	movs	r6, #2
 8005110:	e7fb      	b.n	800510a <HAL_FLASHEx_Erase+0x72>
 8005112:	bf00      	nop
 8005114:	200008f4 	.word	0x200008f4

08005118 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005118:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 800511a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800511c:	e069      	b.n	80051f2 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800511e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005120:	005e      	lsls	r6, r3, #1
 8005122:	2403      	movs	r4, #3
 8005124:	40b4      	lsls	r4, r6
 8005126:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800512a:	68cc      	ldr	r4, [r1, #12]
 800512c:	40b4      	lsls	r4, r6
 800512e:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005130:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005132:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005134:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005138:	684c      	ldr	r4, [r1, #4]
 800513a:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800513e:	409c      	lsls	r4, r3
 8005140:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8005142:	6044      	str	r4, [r0, #4]
 8005144:	e066      	b.n	8005214 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005146:	08dd      	lsrs	r5, r3, #3
 8005148:	3508      	adds	r5, #8
 800514a:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800514e:	f003 0c07 	and.w	ip, r3, #7
 8005152:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005156:	f04f 0e0f 	mov.w	lr, #15
 800515a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800515e:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005162:	690c      	ldr	r4, [r1, #16]
 8005164:	fa04 f40c 	lsl.w	r4, r4, ip
 8005168:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800516c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8005170:	e067      	b.n	8005242 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005172:	2402      	movs	r4, #2
 8005174:	e000      	b.n	8005178 <HAL_GPIO_Init+0x60>
 8005176:	2400      	movs	r4, #0
 8005178:	fa04 f40e 	lsl.w	r4, r4, lr
 800517c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800517e:	f10c 0c02 	add.w	ip, ip, #2
 8005182:	4d4b      	ldr	r5, [pc, #300]	; (80052b0 <HAL_GPIO_Init+0x198>)
 8005184:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005188:	4c4a      	ldr	r4, [pc, #296]	; (80052b4 <HAL_GPIO_Init+0x19c>)
 800518a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800518c:	43d4      	mvns	r4, r2
 800518e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005192:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005196:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 800519a:	d001      	beq.n	80051a0 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800519c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80051a0:	4d44      	ldr	r5, [pc, #272]	; (80052b4 <HAL_GPIO_Init+0x19c>)
 80051a2:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80051a4:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80051a6:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051aa:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80051ae:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 80051b2:	d001      	beq.n	80051b8 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80051b4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80051b8:	4d3e      	ldr	r5, [pc, #248]	; (80052b4 <HAL_GPIO_Init+0x19c>)
 80051ba:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80051bc:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80051c0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051c4:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80051c8:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 80051cc:	d001      	beq.n	80051d2 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80051ce:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80051d2:	4d38      	ldr	r5, [pc, #224]	; (80052b4 <HAL_GPIO_Init+0x19c>)
 80051d4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80051d8:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80051dc:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051de:	684e      	ldr	r6, [r1, #4]
 80051e0:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80051e4:	d001      	beq.n	80051ea <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80051e6:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80051ea:	4a32      	ldr	r2, [pc, #200]	; (80052b4 <HAL_GPIO_Init+0x19c>)
 80051ec:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80051f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051f2:	680a      	ldr	r2, [r1, #0]
 80051f4:	fa32 f403 	lsrs.w	r4, r2, r3
 80051f8:	d058      	beq.n	80052ac <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051fa:	f04f 0c01 	mov.w	ip, #1
 80051fe:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8005202:	ea1c 0202 	ands.w	r2, ip, r2
 8005206:	d0f3      	beq.n	80051f0 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005208:	684c      	ldr	r4, [r1, #4]
 800520a:	f004 0403 	and.w	r4, r4, #3
 800520e:	3c01      	subs	r4, #1
 8005210:	2c01      	cmp	r4, #1
 8005212:	d984      	bls.n	800511e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005214:	684c      	ldr	r4, [r1, #4]
 8005216:	f004 0403 	and.w	r4, r4, #3
 800521a:	2c03      	cmp	r4, #3
 800521c:	d00c      	beq.n	8005238 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 800521e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005220:	005d      	lsls	r5, r3, #1
 8005222:	f04f 0c03 	mov.w	ip, #3
 8005226:	fa0c fc05 	lsl.w	ip, ip, r5
 800522a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800522e:	688c      	ldr	r4, [r1, #8]
 8005230:	40ac      	lsls	r4, r5
 8005232:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8005236:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005238:	684c      	ldr	r4, [r1, #4]
 800523a:	f004 0403 	and.w	r4, r4, #3
 800523e:	2c02      	cmp	r4, #2
 8005240:	d081      	beq.n	8005146 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8005242:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005244:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005248:	f04f 0c03 	mov.w	ip, #3
 800524c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005250:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005254:	684c      	ldr	r4, [r1, #4]
 8005256:	f004 0403 	and.w	r4, r4, #3
 800525a:	fa04 f40e 	lsl.w	r4, r4, lr
 800525e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005262:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005264:	684c      	ldr	r4, [r1, #4]
 8005266:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800526a:	d0c1      	beq.n	80051f0 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 800526c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005270:	f10c 0502 	add.w	r5, ip, #2
 8005274:	4c0e      	ldr	r4, [pc, #56]	; (80052b0 <HAL_GPIO_Init+0x198>)
 8005276:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800527a:	f003 0e03 	and.w	lr, r3, #3
 800527e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005282:	2407      	movs	r4, #7
 8005284:	fa04 f40e 	lsl.w	r4, r4, lr
 8005288:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800528c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005290:	f43f af71 	beq.w	8005176 <HAL_GPIO_Init+0x5e>
 8005294:	4c08      	ldr	r4, [pc, #32]	; (80052b8 <HAL_GPIO_Init+0x1a0>)
 8005296:	42a0      	cmp	r0, r4
 8005298:	d006      	beq.n	80052a8 <HAL_GPIO_Init+0x190>
 800529a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800529e:	42a0      	cmp	r0, r4
 80052a0:	f43f af67 	beq.w	8005172 <HAL_GPIO_Init+0x5a>
 80052a4:	2407      	movs	r4, #7
 80052a6:	e767      	b.n	8005178 <HAL_GPIO_Init+0x60>
 80052a8:	2401      	movs	r4, #1
 80052aa:	e765      	b.n	8005178 <HAL_GPIO_Init+0x60>
  }
}
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000
 80052b4:	58000800 	.word	0x58000800
 80052b8:	48000400 	.word	0x48000400

080052bc <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80052bc:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80052be:	fa31 f203 	lsrs.w	r2, r1, r3
 80052c2:	d071      	beq.n	80053a8 <HAL_GPIO_DeInit+0xec>
{
 80052c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c6:	e02e      	b.n	8005326 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80052c8:	2502      	movs	r5, #2
 80052ca:	e000      	b.n	80052ce <HAL_GPIO_DeInit+0x12>
 80052cc:	2500      	movs	r5, #0
 80052ce:	fa05 f50c 	lsl.w	r5, r5, ip
 80052d2:	42a5      	cmp	r5, r4
 80052d4:	d049      	beq.n	800536a <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80052d6:	6804      	ldr	r4, [r0, #0]
 80052d8:	005d      	lsls	r5, r3, #1
 80052da:	f04f 0c03 	mov.w	ip, #3
 80052de:	fa0c fc05 	lsl.w	ip, ip, r5
 80052e2:	ea44 040c 	orr.w	r4, r4, ip
 80052e6:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80052e8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80052ec:	f10e 0e08 	add.w	lr, lr, #8
 80052f0:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80052f4:	f003 0607 	and.w	r6, r3, #7
 80052f8:	00b6      	lsls	r6, r6, #2
 80052fa:	250f      	movs	r5, #15
 80052fc:	40b5      	lsls	r5, r6
 80052fe:	ea24 0405 	bic.w	r4, r4, r5
 8005302:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005306:	6884      	ldr	r4, [r0, #8]
 8005308:	ea24 040c 	bic.w	r4, r4, ip
 800530c:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800530e:	6844      	ldr	r4, [r0, #4]
 8005310:	ea24 0202 	bic.w	r2, r4, r2
 8005314:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005316:	68c2      	ldr	r2, [r0, #12]
 8005318:	ea22 020c 	bic.w	r2, r2, ip
 800531c:	60c2      	str	r2, [r0, #12]
    }

    position++;
 800531e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8005320:	fa31 f203 	lsrs.w	r2, r1, r3
 8005324:	d03f      	beq.n	80053a6 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005326:	2201      	movs	r2, #1
 8005328:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800532a:	ea12 0701 	ands.w	r7, r2, r1
 800532e:	d0f6      	beq.n	800531e <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005330:	089e      	lsrs	r6, r3, #2
 8005332:	1cb5      	adds	r5, r6, #2
 8005334:	4c1d      	ldr	r4, [pc, #116]	; (80053ac <HAL_GPIO_DeInit+0xf0>)
 8005336:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800533a:	f003 0c03 	and.w	ip, r3, #3
 800533e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005342:	f04f 0e07 	mov.w	lr, #7
 8005346:	fa0e fe0c 	lsl.w	lr, lr, ip
 800534a:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800534e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005352:	d0bb      	beq.n	80052cc <HAL_GPIO_DeInit+0x10>
 8005354:	4d16      	ldr	r5, [pc, #88]	; (80053b0 <HAL_GPIO_DeInit+0xf4>)
 8005356:	42a8      	cmp	r0, r5
 8005358:	d005      	beq.n	8005366 <HAL_GPIO_DeInit+0xaa>
 800535a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800535e:	42a8      	cmp	r0, r5
 8005360:	d0b2      	beq.n	80052c8 <HAL_GPIO_DeInit+0xc>
 8005362:	2507      	movs	r5, #7
 8005364:	e7b3      	b.n	80052ce <HAL_GPIO_DeInit+0x12>
 8005366:	2501      	movs	r5, #1
 8005368:	e7b1      	b.n	80052ce <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800536a:	4c12      	ldr	r4, [pc, #72]	; (80053b4 <HAL_GPIO_DeInit+0xf8>)
 800536c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005370:	ea25 0507 	bic.w	r5, r5, r7
 8005374:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005378:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800537c:	ea25 0507 	bic.w	r5, r5, r7
 8005380:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8005384:	6825      	ldr	r5, [r4, #0]
 8005386:	ea25 0507 	bic.w	r5, r5, r7
 800538a:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800538c:	6865      	ldr	r5, [r4, #4]
 800538e:	ea25 0507 	bic.w	r5, r5, r7
 8005392:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005394:	4d05      	ldr	r5, [pc, #20]	; (80053ac <HAL_GPIO_DeInit+0xf0>)
 8005396:	3602      	adds	r6, #2
 8005398:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 800539c:	ea24 040e 	bic.w	r4, r4, lr
 80053a0:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80053a4:	e797      	b.n	80052d6 <HAL_GPIO_DeInit+0x1a>
  }
}
 80053a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000
 80053b0:	48000400 	.word	0x48000400
 80053b4:	58000800 	.word	0x58000800

080053b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053b8:	b10a      	cbz	r2, 80053be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053ba:	6181      	str	r1, [r0, #24]
 80053bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053be:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80053c0:	4770      	bx	lr

080053c2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053c2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053c4:	ea01 0203 	and.w	r2, r1, r3
 80053c8:	ea21 0103 	bic.w	r1, r1, r3
 80053cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80053d0:	6181      	str	r1, [r0, #24]
}
 80053d2:	4770      	bx	lr

080053d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053d4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053d6:	4b05      	ldr	r3, [pc, #20]	; (80053ec <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	4203      	tst	r3, r0
 80053dc:	d100      	bne.n	80053e0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80053de:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053e0:	4b02      	ldr	r3, [pc, #8]	; (80053ec <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80053e2:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053e4:	f7fe fbde 	bl	8003ba4 <HAL_GPIO_EXTI_Callback>
}
 80053e8:	e7f9      	b.n	80053de <HAL_GPIO_EXTI_IRQHandler+0xa>
 80053ea:	bf00      	nop
 80053ec:	58000800 	.word	0x58000800

080053f0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053f0:	6803      	ldr	r3, [r0, #0]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	f012 0f02 	tst.w	r2, #2
 80053f8:	d001      	beq.n	80053fe <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053fa:	2200      	movs	r2, #0
 80053fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053fe:	6803      	ldr	r3, [r0, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	f012 0f01 	tst.w	r2, #1
 8005406:	d103      	bne.n	8005410 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	619a      	str	r2, [r3, #24]
  }
}
 8005410:	4770      	bx	lr

08005412 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005412:	b410      	push	{r4}
 8005414:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005416:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800541a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800541e:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005420:	4321      	orrs	r1, r4
 8005422:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005426:	6802      	ldr	r2, [r0, #0]
 8005428:	6853      	ldr	r3, [r2, #4]
 800542a:	0d64      	lsrs	r4, r4, #21
 800542c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005430:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8005434:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8005438:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800543c:	f044 0403 	orr.w	r4, r4, #3
 8005440:	ea23 0304 	bic.w	r3, r3, r4
 8005444:	430b      	orrs	r3, r1
 8005446:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005448:	bc10      	pop	{r4}
 800544a:	4770      	bx	lr

0800544c <I2C_IsErrorOccurred>:
{
 800544c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005450:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8005452:	6803      	ldr	r3, [r0, #0]
 8005454:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005456:	f016 0610 	ands.w	r6, r6, #16
 800545a:	d07c      	beq.n	8005556 <I2C_IsErrorOccurred+0x10a>
 800545c:	460d      	mov	r5, r1
 800545e:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005460:	2210      	movs	r2, #16
 8005462:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8005464:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005466:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	6998      	ldr	r0, [r3, #24]
 800546c:	f010 0f20 	tst.w	r0, #32
 8005470:	d130      	bne.n	80054d4 <I2C_IsErrorOccurred+0x88>
 8005472:	bb7f      	cbnz	r7, 80054d4 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8005474:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005478:	d0f6      	beq.n	8005468 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800547a:	f7fd f89b 	bl	80025b4 <HAL_GetTick>
 800547e:	eba0 0008 	sub.w	r0, r0, r8
 8005482:	42a8      	cmp	r0, r5
 8005484:	d801      	bhi.n	800548a <I2C_IsErrorOccurred+0x3e>
 8005486:	2d00      	cmp	r5, #0
 8005488:	d1ee      	bne.n	8005468 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800548a:	6821      	ldr	r1, [r4, #0]
 800548c:	684b      	ldr	r3, [r1, #4]
 800548e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8005492:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005496:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005498:	6988      	ldr	r0, [r1, #24]
 800549a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800549e:	d002      	beq.n	80054a6 <I2C_IsErrorOccurred+0x5a>
 80054a0:	b90b      	cbnz	r3, 80054a6 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80054a2:	2a20      	cmp	r2, #32
 80054a4:	d10e      	bne.n	80054c4 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f013 0f20 	tst.w	r3, #32
 80054ae:	d1db      	bne.n	8005468 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054b0:	f7fd f880 	bl	80025b4 <HAL_GetTick>
 80054b4:	eba0 0008 	sub.w	r0, r0, r8
 80054b8:	2819      	cmp	r0, #25
 80054ba:	d9f4      	bls.n	80054a6 <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80054bc:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80054c0:	2701      	movs	r7, #1
              break;
 80054c2:	e7d1      	b.n	8005468 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054c4:	684b      	ldr	r3, [r1, #4]
 80054c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054ca:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80054cc:	f7fd f872 	bl	80025b4 <HAL_GetTick>
 80054d0:	4680      	mov	r8, r0
 80054d2:	e7e8      	b.n	80054a6 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80054d4:	b90f      	cbnz	r7, 80054da <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d6:	2220      	movs	r2, #32
 80054d8:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80054da:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80054de:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80054e8:	d005      	beq.n	80054f6 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 80054ea:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054f2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80054f4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80054fa:	d006      	beq.n	800550a <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 80054fc:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005506:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005508:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800550a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800550e:	d024      	beq.n	800555a <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005510:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800551c:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800551e:	4620      	mov	r0, r4
 8005520:	f7ff ff66 	bl	80053f0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	6853      	ldr	r3, [r2, #4]
 8005528:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800552c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005530:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800553a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800553c:	4333      	orrs	r3, r6
 800553e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005540:	2320      	movs	r3, #32
 8005542:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005546:	2300      	movs	r3, #0
 8005548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800554c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005550:	4628      	mov	r0, r5
 8005552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2500      	movs	r5, #0
 8005558:	e7c2      	b.n	80054e0 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 800555a:	2d00      	cmp	r5, #0
 800555c:	d0f8      	beq.n	8005550 <I2C_IsErrorOccurred+0x104>
 800555e:	e7de      	b.n	800551e <I2C_IsErrorOccurred+0xd2>

08005560 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4604      	mov	r4, r0
 8005564:	460d      	mov	r5, r1
 8005566:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f013 0f02 	tst.w	r3, #2
 8005570:	d11d      	bne.n	80055ae <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005572:	4632      	mov	r2, r6
 8005574:	4629      	mov	r1, r5
 8005576:	4620      	mov	r0, r4
 8005578:	f7ff ff68 	bl	800544c <I2C_IsErrorOccurred>
 800557c:	b9c8      	cbnz	r0, 80055b2 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800557e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005582:	d0f1      	beq.n	8005568 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005584:	f7fd f816 	bl	80025b4 <HAL_GetTick>
 8005588:	1b80      	subs	r0, r0, r6
 800558a:	42a8      	cmp	r0, r5
 800558c:	d801      	bhi.n	8005592 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800558e:	2d00      	cmp	r5, #0
 8005590:	d1ea      	bne.n	8005568 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005592:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005594:	f043 0320 	orr.w	r3, r3, #32
 8005598:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800559a:	2320      	movs	r3, #32
 800559c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80055a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80055aa:	2001      	movs	r0, #1
 80055ac:	e000      	b.n	80055b0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80055ae:	2000      	movs	r0, #0
}
 80055b0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80055b2:	2001      	movs	r0, #1
 80055b4:	e7fc      	b.n	80055b0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080055b6 <I2C_WaitOnFlagUntilTimeout>:
{
 80055b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ba:	4606      	mov	r6, r0
 80055bc:	4688      	mov	r8, r1
 80055be:	4617      	mov	r7, r2
 80055c0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055c2:	6834      	ldr	r4, [r6, #0]
 80055c4:	69a4      	ldr	r4, [r4, #24]
 80055c6:	ea38 0404 	bics.w	r4, r8, r4
 80055ca:	bf0c      	ite	eq
 80055cc:	2401      	moveq	r4, #1
 80055ce:	2400      	movne	r4, #0
 80055d0:	42bc      	cmp	r4, r7
 80055d2:	d118      	bne.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80055d4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80055d8:	d0f3      	beq.n	80055c2 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055da:	f7fc ffeb 	bl	80025b4 <HAL_GetTick>
 80055de:	9b06      	ldr	r3, [sp, #24]
 80055e0:	1ac0      	subs	r0, r0, r3
 80055e2:	42a8      	cmp	r0, r5
 80055e4:	d801      	bhi.n	80055ea <I2C_WaitOnFlagUntilTimeout+0x34>
 80055e6:	2d00      	cmp	r5, #0
 80055e8:	d1eb      	bne.n	80055c2 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055ea:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80055ec:	f043 0320 	orr.w	r3, r3, #32
 80055f0:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055f2:	2320      	movs	r3, #32
 80055f4:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80055fe:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8005602:	2001      	movs	r0, #1
 8005604:	e000      	b.n	8005608 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8005606:	2000      	movs	r0, #0
}
 8005608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800560c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4605      	mov	r5, r0
 8005610:	460c      	mov	r4, r1
 8005612:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f013 0f20 	tst.w	r3, #32
 800561c:	d11a      	bne.n	8005654 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800561e:	4632      	mov	r2, r6
 8005620:	4621      	mov	r1, r4
 8005622:	4628      	mov	r0, r5
 8005624:	f7ff ff12 	bl	800544c <I2C_IsErrorOccurred>
 8005628:	b9b0      	cbnz	r0, 8005658 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fc ffc3 	bl	80025b4 <HAL_GetTick>
 800562e:	1b80      	subs	r0, r0, r6
 8005630:	42a0      	cmp	r0, r4
 8005632:	d801      	bhi.n	8005638 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005634:	2c00      	cmp	r4, #0
 8005636:	d1ed      	bne.n	8005614 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005638:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800563a:	f043 0320 	orr.w	r3, r3, #32
 800563e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005640:	2320      	movs	r3, #32
 8005642:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005646:	2300      	movs	r3, #0
 8005648:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800564c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005650:	2001      	movs	r0, #1
}
 8005652:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005654:	2000      	movs	r0, #0
 8005656:	e7fc      	b.n	8005652 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005658:	2001      	movs	r0, #1
 800565a:	e7fa      	b.n	8005652 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800565c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	4604      	mov	r4, r0
 8005660:	460d      	mov	r5, r1
 8005662:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f013 0f04 	tst.w	r3, #4
 800566c:	d149      	bne.n	8005702 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800566e:	4632      	mov	r2, r6
 8005670:	4629      	mov	r1, r5
 8005672:	4620      	mov	r0, r4
 8005674:	f7ff feea 	bl	800544c <I2C_IsErrorOccurred>
 8005678:	4601      	mov	r1, r0
 800567a:	2800      	cmp	r0, #0
 800567c:	d143      	bne.n	8005706 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	f012 0f20 	tst.w	r2, #32
 8005686:	d113      	bne.n	80056b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005688:	f7fc ff94 	bl	80025b4 <HAL_GetTick>
 800568c:	1b80      	subs	r0, r0, r6
 800568e:	42a8      	cmp	r0, r5
 8005690:	d801      	bhi.n	8005696 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8005692:	2d00      	cmp	r5, #0
 8005694:	d1e6      	bne.n	8005664 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005696:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005698:	f043 0320 	orr.w	r3, r3, #32
 800569c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800569e:	2320      	movs	r3, #32
 80056a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80056a4:	2300      	movs	r3, #0
 80056a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80056aa:	2101      	movs	r1, #1
}
 80056ac:	4608      	mov	r0, r1
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	f012 0f04 	tst.w	r2, #4
 80056b6:	d002      	beq.n	80056be <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80056b8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80056ba:	2a00      	cmp	r2, #0
 80056bc:	d1f6      	bne.n	80056ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	f012 0f10 	tst.w	r2, #16
 80056c4:	d01a      	beq.n	80056fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c6:	2210      	movs	r2, #16
 80056c8:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80056ca:	2304      	movs	r3, #4
 80056cc:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	2220      	movs	r2, #32
 80056d2:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80056d4:	6821      	ldr	r1, [r4, #0]
 80056d6:	684b      	ldr	r3, [r1, #4]
 80056d8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80056dc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80056e0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80056ea:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80056f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80056f8:	2101      	movs	r1, #1
 80056fa:	e7d7      	b.n	80056ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	6463      	str	r3, [r4, #68]	; 0x44
 8005700:	e7e5      	b.n	80056ce <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 8005702:	2100      	movs	r1, #0
 8005704:	e7d2      	b.n	80056ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8005706:	2101      	movs	r1, #1
 8005708:	e7d0      	b.n	80056ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

0800570a <HAL_I2C_Init>:
  if (hi2c == NULL)
 800570a:	2800      	cmp	r0, #0
 800570c:	d059      	beq.n	80057c2 <HAL_I2C_Init+0xb8>
{
 800570e:	b510      	push	{r4, lr}
 8005710:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005712:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005716:	2b00      	cmp	r3, #0
 8005718:	d043      	beq.n	80057a2 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800571a:	2324      	movs	r3, #36	; 0x24
 800571c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	f023 0301 	bic.w	r3, r3, #1
 8005728:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800572a:	6863      	ldr	r3, [r4, #4]
 800572c:	6822      	ldr	r2, [r4, #0]
 800572e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005732:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005734:	6822      	ldr	r2, [r4, #0]
 8005736:	6893      	ldr	r3, [r2, #8]
 8005738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800573c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d033      	beq.n	80057ac <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005744:	68a3      	ldr	r3, [r4, #8]
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800574c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800574e:	68e3      	ldr	r3, [r4, #12]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d031      	beq.n	80057b8 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	6853      	ldr	r3, [r2, #4]
 8005758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800575c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005760:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	68d3      	ldr	r3, [r2, #12]
 8005766:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800576a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	6962      	ldr	r2, [r4, #20]
 8005770:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005772:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800577a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800577c:	69e3      	ldr	r3, [r4, #28]
 800577e:	6a21      	ldr	r1, [r4, #32]
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	430b      	orrs	r3, r1
 8005784:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	6813      	ldr	r3, [r2, #0]
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005790:	2000      	movs	r0, #0
 8005792:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005794:	2320      	movs	r3, #32
 8005796:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800579c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80057a0:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80057a2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80057a6:	f7fc fa05 	bl	8001bb4 <HAL_I2C_MspInit>
 80057aa:	e7b6      	b.n	800571a <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b4:	6093      	str	r3, [r2, #8]
 80057b6:	e7ca      	b.n	800574e <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	e7c8      	b.n	8005754 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80057c2:	2001      	movs	r0, #1
}
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_I2C_Master_Transmit>:
{
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	460f      	mov	r7, r1
 80057d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80057d6:	b2c9      	uxtb	r1, r1
 80057d8:	2920      	cmp	r1, #32
 80057da:	f040 80a3 	bne.w	8005924 <HAL_I2C_Master_Transmit+0x15c>
 80057de:	4604      	mov	r4, r0
 80057e0:	4690      	mov	r8, r2
 80057e2:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80057e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f000 809f 	beq.w	800592c <HAL_I2C_Master_Transmit+0x164>
 80057ee:	f04f 0a01 	mov.w	sl, #1
 80057f2:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80057f6:	f7fc fedd 	bl	80025b4 <HAL_GetTick>
 80057fa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057fc:	9000      	str	r0, [sp, #0]
 80057fe:	2319      	movs	r3, #25
 8005800:	4652      	mov	r2, sl
 8005802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005806:	4620      	mov	r0, r4
 8005808:	f7ff fed5 	bl	80055b6 <I2C_WaitOnFlagUntilTimeout>
 800580c:	2800      	cmp	r0, #0
 800580e:	f040 808f 	bne.w	8005930 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005812:	2321      	movs	r3, #33	; 0x21
 8005814:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005818:	2310      	movs	r3, #16
 800581a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800581e:	2300      	movs	r3, #0
 8005820:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005822:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005826:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800582a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800582c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2bff      	cmp	r3, #255	; 0xff
 8005832:	d90a      	bls.n	800584a <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005838:	4b41      	ldr	r3, [pc, #260]	; (8005940 <HAL_I2C_Master_Transmit+0x178>)
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005840:	4639      	mov	r1, r7
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff fde5 	bl	8005412 <I2C_TransferConfig>
 8005848:	e018      	b.n	800587c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800584a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800584c:	b292      	uxth	r2, r2
 800584e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005850:	4b3b      	ldr	r3, [pc, #236]	; (8005940 <HAL_I2C_Master_Transmit+0x178>)
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	4639      	mov	r1, r7
 800585c:	4620      	mov	r0, r4
 800585e:	f7ff fdd8 	bl	8005412 <I2C_TransferConfig>
 8005862:	e00b      	b.n	800587c <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8005864:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005866:	b292      	uxth	r2, r2
 8005868:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800586a:	2300      	movs	r3, #0
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	4639      	mov	r1, r7
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff fdcb 	bl	8005412 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800587c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d033      	beq.n	80058ec <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005884:	462a      	mov	r2, r5
 8005886:	4631      	mov	r1, r6
 8005888:	4620      	mov	r0, r4
 800588a:	f7ff fe69 	bl	8005560 <I2C_WaitOnTXISFlagUntilTimeout>
 800588e:	2800      	cmp	r0, #0
 8005890:	d150      	bne.n	8005934 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005892:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800589a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800589c:	3301      	adds	r3, #1
 800589e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058b4:	b292      	uxth	r2, r2
 80058b6:	2a00      	cmp	r2, #0
 80058b8:	d0e0      	beq.n	800587c <HAL_I2C_Master_Transmit+0xb4>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1de      	bne.n	800587c <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058be:	9500      	str	r5, [sp, #0]
 80058c0:	4633      	mov	r3, r6
 80058c2:	2200      	movs	r2, #0
 80058c4:	2180      	movs	r1, #128	; 0x80
 80058c6:	4620      	mov	r0, r4
 80058c8:	f7ff fe75 	bl	80055b6 <I2C_WaitOnFlagUntilTimeout>
 80058cc:	bba0      	cbnz	r0, 8005938 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2bff      	cmp	r3, #255	; 0xff
 80058d4:	d9c6      	bls.n	8005864 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058d6:	22ff      	movs	r2, #255	; 0xff
 80058d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058da:	2300      	movs	r3, #0
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058e2:	4639      	mov	r1, r7
 80058e4:	4620      	mov	r0, r4
 80058e6:	f7ff fd94 	bl	8005412 <I2C_TransferConfig>
 80058ea:	e7c7      	b.n	800587c <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ec:	462a      	mov	r2, r5
 80058ee:	4631      	mov	r1, r6
 80058f0:	4620      	mov	r0, r4
 80058f2:	f7ff fe8b 	bl	800560c <I2C_WaitOnSTOPFlagUntilTimeout>
 80058f6:	bb08      	cbnz	r0, 800593c <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	2220      	movs	r2, #32
 80058fc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	684b      	ldr	r3, [r1, #4]
 8005902:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005906:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800590a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005914:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005918:	2300      	movs	r3, #0
 800591a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800591e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005922:	e000      	b.n	8005926 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8005924:	2002      	movs	r0, #2
}
 8005926:	b002      	add	sp, #8
 8005928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800592c:	2002      	movs	r0, #2
 800592e:	e7fa      	b.n	8005926 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005930:	2001      	movs	r0, #1
 8005932:	e7f8      	b.n	8005926 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8005934:	2001      	movs	r0, #1
 8005936:	e7f6      	b.n	8005926 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8005938:	2001      	movs	r0, #1
 800593a:	e7f4      	b.n	8005926 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800593c:	2001      	movs	r0, #1
 800593e:	e7f2      	b.n	8005926 <HAL_I2C_Master_Transmit+0x15e>
 8005940:	80002000 	.word	0x80002000

08005944 <HAL_I2C_Master_Receive>:
{
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	460f      	mov	r7, r1
 800594c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800594e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005952:	b2c9      	uxtb	r1, r1
 8005954:	2920      	cmp	r1, #32
 8005956:	f040 80a2 	bne.w	8005a9e <HAL_I2C_Master_Receive+0x15a>
 800595a:	4604      	mov	r4, r0
 800595c:	4690      	mov	r8, r2
 800595e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005960:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005964:	2b01      	cmp	r3, #1
 8005966:	f000 809e 	beq.w	8005aa6 <HAL_I2C_Master_Receive+0x162>
 800596a:	f04f 0a01 	mov.w	sl, #1
 800596e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005972:	f7fc fe1f 	bl	80025b4 <HAL_GetTick>
 8005976:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005978:	9000      	str	r0, [sp, #0]
 800597a:	2319      	movs	r3, #25
 800597c:	4652      	mov	r2, sl
 800597e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005982:	4620      	mov	r0, r4
 8005984:	f7ff fe17 	bl	80055b6 <I2C_WaitOnFlagUntilTimeout>
 8005988:	2800      	cmp	r0, #0
 800598a:	f040 808e 	bne.w	8005aaa <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800598e:	2322      	movs	r3, #34	; 0x22
 8005990:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005994:	2310      	movs	r3, #16
 8005996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800599a:	2300      	movs	r3, #0
 800599c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800599e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80059a2:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059a6:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2bff      	cmp	r3, #255	; 0xff
 80059ae:	d90a      	bls.n	80059c6 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059b4:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_I2C_Master_Receive+0x178>)
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059bc:	4639      	mov	r1, r7
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff fd27 	bl	8005412 <I2C_TransferConfig>
 80059c4:	e018      	b.n	80059f8 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80059c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80059c8:	b292      	uxth	r2, r2
 80059ca:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059cc:	4b3b      	ldr	r3, [pc, #236]	; (8005abc <HAL_I2C_Master_Receive+0x178>)
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	4639      	mov	r1, r7
 80059d8:	4620      	mov	r0, r4
 80059da:	f7ff fd1a 	bl	8005412 <I2C_TransferConfig>
 80059de:	e00b      	b.n	80059f8 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80059e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80059e2:	b292      	uxth	r2, r2
 80059e4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059e6:	2300      	movs	r3, #0
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	4639      	mov	r1, r7
 80059f2:	4620      	mov	r0, r4
 80059f4:	f7ff fd0d 	bl	8005412 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80059f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d032      	beq.n	8005a66 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a00:	462a      	mov	r2, r5
 8005a02:	4631      	mov	r1, r6
 8005a04:	4620      	mov	r0, r4
 8005a06:	f7ff fe29 	bl	800565c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d14f      	bne.n	8005aae <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a14:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a18:	3301      	adds	r3, #1
 8005a1a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005a1c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005a1e:	3a01      	subs	r2, #1
 8005a20:	b292      	uxth	r2, r2
 8005a22:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005a24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0e0      	beq.n	80059f8 <HAL_I2C_Master_Receive+0xb4>
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	d1de      	bne.n	80059f8 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a3a:	9500      	str	r5, [sp, #0]
 8005a3c:	4633      	mov	r3, r6
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7ff fdb8 	bl	80055b6 <I2C_WaitOnFlagUntilTimeout>
 8005a46:	bba0      	cbnz	r0, 8005ab2 <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2bff      	cmp	r3, #255	; 0xff
 8005a4e:	d9c7      	bls.n	80059e0 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a54:	2300      	movs	r3, #0
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a5c:	4639      	mov	r1, r7
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff fcd7 	bl	8005412 <I2C_TransferConfig>
 8005a64:	e7c8      	b.n	80059f8 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a66:	462a      	mov	r2, r5
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7ff fdce 	bl	800560c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a70:	bb08      	cbnz	r0, 8005ab6 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	2220      	movs	r2, #32
 8005a76:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005a78:	6821      	ldr	r1, [r4, #0]
 8005a7a:	684b      	ldr	r3, [r1, #4]
 8005a7c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005a80:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005a84:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005a98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005a9c:	e000      	b.n	8005aa0 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8005a9e:	2002      	movs	r0, #2
}
 8005aa0:	b002      	add	sp, #8
 8005aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005aa6:	2002      	movs	r0, #2
 8005aa8:	e7fa      	b.n	8005aa0 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8005aaa:	2001      	movs	r0, #1
 8005aac:	e7f8      	b.n	8005aa0 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8005aae:	2001      	movs	r0, #1
 8005ab0:	e7f6      	b.n	8005aa0 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8005ab2:	2001      	movs	r0, #1
 8005ab4:	e7f4      	b.n	8005aa0 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	e7f2      	b.n	8005aa0 <HAL_I2C_Master_Receive+0x15c>
 8005aba:	bf00      	nop
 8005abc:	80002400 	.word	0x80002400

08005ac0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ac0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	2a20      	cmp	r2, #32
 8005aca:	d123      	bne.n	8005b14 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005acc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005ad0:	2a01      	cmp	r2, #1
 8005ad2:	d021      	beq.n	8005b18 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ada:	2224      	movs	r2, #36	; 0x24
 8005adc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ae0:	6800      	ldr	r0, [r0, #0]
 8005ae2:	6802      	ldr	r2, [r0, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	6802      	ldr	r2, [r0, #0]
 8005aee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005af2:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	6802      	ldr	r2, [r0, #0]
 8005af8:	4311      	orrs	r1, r2
 8005afa:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005afc:	6819      	ldr	r1, [r3, #0]
 8005afe:	680a      	ldr	r2, [r1, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005b12:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005b14:	2002      	movs	r0, #2
 8005b16:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005b18:	2002      	movs	r0, #2
  }
}
 8005b1a:	4770      	bx	lr

08005b1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b1c:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b1e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	2a20      	cmp	r2, #32
 8005b26:	d121      	bne.n	8005b6c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b28:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005b2c:	2a01      	cmp	r2, #1
 8005b2e:	d01f      	beq.n	8005b70 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005b30:	2201      	movs	r2, #1
 8005b32:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b3c:	6800      	ldr	r0, [r0, #0]
 8005b3e:	6802      	ldr	r2, [r0, #0]
 8005b40:	f022 0201 	bic.w	r2, r2, #1
 8005b44:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b4a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b52:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b54:	6819      	ldr	r1, [r3, #0]
 8005b56:	680a      	ldr	r2, [r1, #0]
 8005b58:	f042 0201 	orr.w	r2, r2, #1
 8005b5c:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b64:	2000      	movs	r0, #0
 8005b66:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005b6a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005b6c:	2002      	movs	r0, #2
 8005b6e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005b70:	2002      	movs	r0, #2
  }
}
 8005b72:	4770      	bx	lr

08005b74 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b74:	4a02      	ldr	r2, [pc, #8]	; (8005b80 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005b76:	6813      	ldr	r3, [r2, #0]
 8005b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b7c:	6013      	str	r3, [r2, #0]
}
 8005b7e:	4770      	bx	lr
 8005b80:	58000400 	.word	0x58000400

08005b84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005b84:	4b02      	ldr	r3, [pc, #8]	; (8005b90 <HAL_PWREx_GetVoltageRange+0xc>)
 8005b86:	6818      	ldr	r0, [r3, #0]
}
 8005b88:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	58000400 	.word	0x58000400

08005b94 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b94:	b530      	push	{r4, r5, lr}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	4604      	mov	r4, r0
 8005b9a:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005b9c:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <RCC_SetFlashLatency+0xb4>)
 8005b9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ba2:	9006      	str	r0, [sp, #24]
 8005ba4:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005ba8:	f103 0208 	add.w	r2, r3, #8
 8005bac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bb0:	9004      	str	r0, [sp, #16]
 8005bb2:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005bb6:	ad01      	add	r5, sp, #4
 8005bb8:	3310      	adds	r3, #16
 8005bba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005bbe:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bc2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005bc6:	d007      	beq.n	8005bd8 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e014      	b.n	8005bf6 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005bcc:	aa08      	add	r2, sp, #32
 8005bce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005bd2:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005bd6:	e01e      	b.n	8005c16 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d808      	bhi.n	8005bf0 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005bde:	aa08      	add	r2, sp, #32
 8005be0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005be4:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005be8:	42a2      	cmp	r2, r4
 8005bea:	d2ef      	bcs.n	8005bcc <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bec:	3301      	adds	r3, #1
 8005bee:	e7f4      	b.n	8005bda <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005bf0:	2500      	movs	r5, #0
 8005bf2:	e010      	b.n	8005c16 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d80c      	bhi.n	8005c14 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005bfa:	aa08      	add	r2, sp, #32
 8005bfc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005c00:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005c04:	42a2      	cmp	r2, r4
 8005c06:	d3f5      	bcc.n	8005bf4 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c08:	aa08      	add	r2, sp, #32
 8005c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c0e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005c12:	e000      	b.n	8005c16 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005c14:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c16:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <RCC_SetFlashLatency+0xb8>)
 8005c18:	6813      	ldr	r3, [r2, #0]
 8005c1a:	f023 0307 	bic.w	r3, r3, #7
 8005c1e:	432b      	orrs	r3, r5
 8005c20:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c22:	f7fc fcc7 	bl	80025b4 <HAL_GetTick>
 8005c26:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c28:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <RCC_SetFlashLatency+0xb8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	d006      	beq.n	8005c42 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c34:	f7fc fcbe 	bl	80025b4 <HAL_GetTick>
 8005c38:	1b00      	subs	r0, r0, r4
 8005c3a:	2802      	cmp	r0, #2
 8005c3c:	d9f4      	bls.n	8005c28 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8005c3e:	2003      	movs	r0, #3
 8005c40:	e000      	b.n	8005c44 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8005c42:	2000      	movs	r0, #0
}
 8005c44:	b009      	add	sp, #36	; 0x24
 8005c46:	bd30      	pop	{r4, r5, pc}
 8005c48:	08019f7c 	.word	0x08019f7c
 8005c4c:	58004000 	.word	0x58004000

08005c50 <RCC_SetFlashLatencyFromMSIRange>:
{
 8005c50:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005c52:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005c56:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005c58:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	4a08      	ldr	r2, [pc, #32]	; (8005c8c <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8005c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6e:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005c72:	f7ff ff87 	bl	8005b84 <HAL_PWREx_GetVoltageRange>
 8005c76:	4601      	mov	r1, r0
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8005c7a:	fba3 3404 	umull	r3, r4, r3, r4
 8005c7e:	0ca0      	lsrs	r0, r4, #18
 8005c80:	f7ff ff88 	bl	8005b94 <RCC_SetFlashLatency>
}
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	bf00      	nop
 8005c88:	0801a664 	.word	0x0801a664
 8005c8c:	0801a604 	.word	0x0801a604
 8005c90:	431bde83 	.word	0x431bde83

08005c94 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c98:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ca0:	f011 010c 	ands.w	r1, r1, #12
 8005ca4:	d00a      	beq.n	8005cbc <HAL_RCC_GetSysClockFreq+0x28>
 8005ca6:	290c      	cmp	r1, #12
 8005ca8:	d006      	beq.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005caa:	2904      	cmp	r1, #4
 8005cac:	d047      	beq.n	8005d3e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cae:	2908      	cmp	r1, #8
 8005cb0:	d03b      	beq.n	8005d2a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005cb2:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	e026      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d1f6      	bne.n	8005caa <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f013 0308 	ands.w	r3, r3, #8
 8005cc6:	d00d      	beq.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x50>
 8005cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f013 0308 	ands.w	r3, r3, #8
 8005cd2:	d124      	bne.n	8005d1e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd8:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005cdc:	4a2e      	ldr	r2, [pc, #184]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005cde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ce2:	e00e      	b.n	8005d02 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	f012 0f08 	tst.w	r2, #8
 8005cee:	d112      	bne.n	8005d16 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005cfc:	4a26      	ldr	r2, [pc, #152]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d02:	b1d1      	cbz	r1, 8005d3a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005d04:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	d01a      	beq.n	8005d4a <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005d14:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	e7ee      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x68>
 8005d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d22:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005d24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005d28:	e7d8      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8005d34:	d106      	bne.n	8005d44 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005d36:	4819      	ldr	r0, [pc, #100]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d38:	e7e5      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	e7e3      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005d3e:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8005d40:	4817      	ldr	r0, [pc, #92]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d42:	e7e0      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005d44:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005d46:	4816      	ldr	r0, [pc, #88]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d48:	e7dd      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d009      	beq.n	8005d6c <HAL_RCC_GetSysClockFreq+0xd8>
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d108      	bne.n	8005d6e <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005d66:	d115      	bne.n	8005d94 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005d68:	4a0c      	ldr	r2, [pc, #48]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d6a:	e000      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8005d6c:	4a0c      	ldr	r2, [pc, #48]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d72:	68cb      	ldr	r3, [r1, #12]
 8005d74:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005d78:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d7c:	68cb      	ldr	r3, [r1, #12]
 8005d7e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005d82:	3301      	adds	r3, #1
 8005d84:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d88:	68c8      	ldr	r0, [r1, #12]
 8005d8a:	0f40      	lsrs	r0, r0, #29
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005d92:	e7bf      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005d94:	4a02      	ldr	r2, [pc, #8]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d96:	e7ea      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0xda>
 8005d98:	0801a664 	.word	0x0801a664
 8005d9c:	01e84800 	.word	0x01e84800
 8005da0:	00f42400 	.word	0x00f42400

08005da4 <HAL_RCC_GetHCLKFreq>:
{
 8005da4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005da6:	f7ff ff75 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005db4:	4a02      	ldr	r2, [pc, #8]	; (8005dc0 <HAL_RCC_GetHCLKFreq+0x1c>)
 8005db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005dba:	fbb0 f0f3 	udiv	r0, r0, r3
 8005dbe:	bd08      	pop	{r3, pc}
 8005dc0:	0801a604 	.word	0x0801a604

08005dc4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	f000 8311 	beq.w	80063ec <HAL_RCC_OscConfig+0x628>
{
 8005dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dcc:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	689d      	ldr	r5, [r3, #8]
 8005dd4:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005dd8:	68de      	ldr	r6, [r3, #12]
 8005dda:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005dde:	6803      	ldr	r3, [r0, #0]
 8005de0:	f013 0f20 	tst.w	r3, #32
 8005de4:	d02a      	beq.n	8005e3c <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	d065      	beq.n	8005eb6 <HAL_RCC_OscConfig+0xf2>
 8005dea:	2d0c      	cmp	r5, #12
 8005dec:	d061      	beq.n	8005eb2 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005dee:	6a23      	ldr	r3, [r4, #32]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80bf 	beq.w	8005f74 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e02:	f7fc fbd7 	bl	80025b4 <HAL_GetTick>
 8005e06:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f013 0f02 	tst.w	r3, #2
 8005e12:	f000 80a7 	beq.w	8005f64 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	f042 0208 	orr.w	r2, r2, #8
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005e28:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005e36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e3a:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	f013 0f01 	tst.w	r3, #1
 8005e42:	f000 80b5 	beq.w	8005fb0 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e46:	2d08      	cmp	r5, #8
 8005e48:	f000 80ae 	beq.w	8005fa8 <HAL_RCC_OscConfig+0x1e4>
 8005e4c:	2d0c      	cmp	r5, #12
 8005e4e:	f000 80a8 	beq.w	8005fa2 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e56:	6813      	ldr	r3, [r2, #0]
 8005e58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e5c:	68a1      	ldr	r1, [r4, #8]
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e68:	f000 80c4 	beq.w	8005ff4 <HAL_RCC_OscConfig+0x230>
 8005e6c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005e70:	f000 80c5 	beq.w	8005ffe <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005e86:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80c2 	beq.w	8006014 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8005e90:	f7fc fb90 	bl	80025b4 <HAL_GetTick>
 8005e94:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005ea0:	f040 8086 	bne.w	8005fb0 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea4:	f7fc fb86 	bl	80025b4 <HAL_GetTick>
 8005ea8:	1bc0      	subs	r0, r0, r7
 8005eaa:	2864      	cmp	r0, #100	; 0x64
 8005eac:	d9f3      	bls.n	8005e96 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8005eae:	2003      	movs	r0, #3
 8005eb0:	e2a9      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005eb2:	2e01      	cmp	r6, #1
 8005eb4:	d19b      	bne.n	8005dee <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005eb6:	6a23      	ldr	r3, [r4, #32]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8299 	beq.w	80063f0 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ebe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f013 0f08 	tst.w	r3, #8
 8005eca:	d029      	beq.n	8005f20 <HAL_RCC_OscConfig+0x15c>
 8005ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed6:	4298      	cmp	r0, r3
 8005ed8:	d92a      	bls.n	8005f30 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005eda:	f7ff feb9 	bl	8005c50 <RCC_SetFlashLatencyFromMSIRange>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f040 8288 	bne.w	80063f4 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f042 0208 	orr.w	r2, r2, #8
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005ef6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005efc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005f04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005f08:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f0a:	f7ff ff4b 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
 8005f0e:	4bba      	ldr	r3, [pc, #744]	; (80061f8 <HAL_RCC_OscConfig+0x434>)
 8005f10:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005f12:	4bba      	ldr	r3, [pc, #744]	; (80061fc <HAL_RCC_OscConfig+0x438>)
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	f7fc fb4b 	bl	80025b0 <HAL_InitTick>
        if (status != HAL_OK)
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d08e      	beq.n	8005e3c <HAL_RCC_OscConfig+0x78>
 8005f1e:	e272      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f2e:	e7d2      	b.n	8005ed6 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	f042 0208 	orr.w	r2, r2, #8
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005f42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005f44:	430a      	orrs	r2, r1
 8005f46:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005f50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005f54:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005f58:	f7ff fe7a 	bl	8005c50 <RCC_SetFlashLatencyFromMSIRange>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d0d4      	beq.n	8005f0a <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8005f60:	2001      	movs	r0, #1
 8005f62:	e250      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f64:	f7fc fb26 	bl	80025b4 <HAL_GetTick>
 8005f68:	1bc0      	subs	r0, r0, r7
 8005f6a:	2802      	cmp	r0, #2
 8005f6c:	f67f af4c 	bls.w	8005e08 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005f70:	2003      	movs	r0, #3
 8005f72:	e248      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f78:	6813      	ldr	r3, [r2, #0]
 8005f7a:	f023 0301 	bic.w	r3, r3, #1
 8005f7e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f80:	f7fc fb18 	bl	80025b4 <HAL_GetTick>
 8005f84:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f013 0f02 	tst.w	r3, #2
 8005f90:	f43f af54 	beq.w	8005e3c <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f94:	f7fc fb0e 	bl	80025b4 <HAL_GetTick>
 8005f98:	1bc0      	subs	r0, r0, r7
 8005f9a:	2802      	cmp	r0, #2
 8005f9c:	d9f3      	bls.n	8005f86 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8005f9e:	2003      	movs	r0, #3
 8005fa0:	e231      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005fa2:	2e03      	cmp	r6, #3
 8005fa4:	f47f af55 	bne.w	8005e52 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8224 	beq.w	80063f8 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	f013 0f02 	tst.w	r3, #2
 8005fb6:	d056      	beq.n	8006066 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005fb8:	2d04      	cmp	r5, #4
 8005fba:	d03d      	beq.n	8006038 <HAL_RCC_OscConfig+0x274>
 8005fbc:	2d0c      	cmp	r5, #12
 8005fbe:	d039      	beq.n	8006034 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 808a 	beq.w	80060dc <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fcc:	6813      	ldr	r3, [r2, #0]
 8005fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005fd4:	f7fc faee 	bl	80025b4 <HAL_GetTick>
 8005fd8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005fe4:	d136      	bne.n	8006054 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe6:	f7fc fae5 	bl	80025b4 <HAL_GetTick>
 8005fea:	1b80      	subs	r0, r0, r6
 8005fec:	2802      	cmp	r0, #2
 8005fee:	d9f4      	bls.n	8005fda <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8005ff0:	2003      	movs	r0, #3
 8005ff2:	e208      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005ff4:	6813      	ldr	r3, [r2, #0]
 8005ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffa:	6013      	str	r3, [r2, #0]
}
 8005ffc:	e744      	b.n	8005e88 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006008:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006010:	601a      	str	r2, [r3, #0]
}
 8006012:	e739      	b.n	8005e88 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8006014:	f7fc face 	bl	80025b4 <HAL_GetTick>
 8006018:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800601a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006024:	d0c4      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006026:	f7fc fac5 	bl	80025b4 <HAL_GetTick>
 800602a:	1bc0      	subs	r0, r0, r7
 800602c:	2864      	cmp	r0, #100	; 0x64
 800602e:	d9f4      	bls.n	800601a <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8006030:	2003      	movs	r0, #3
 8006032:	e1e8      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006034:	2e02      	cmp	r6, #2
 8006036:	d1c3      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006038:	6923      	ldr	r3, [r4, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 81de 	beq.w	80063fc <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006040:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006046:	6853      	ldr	r3, [r2, #4]
 8006048:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800604c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006050:	6053      	str	r3, [r2, #4]
}
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006054:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800605a:	6853      	ldr	r3, [r2, #4]
 800605c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006060:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006064:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f013 0f08 	tst.w	r3, #8
 800606c:	d07e      	beq.n	800616c <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800606e:	69a3      	ldr	r3, [r4, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d062      	beq.n	800613a <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800607c:	69e1      	ldr	r1, [r4, #28]
 800607e:	f003 0210 	and.w	r2, r3, #16
 8006082:	4291      	cmp	r1, r2
 8006084:	d011      	beq.n	80060aa <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006086:	f003 0203 	and.w	r2, r3, #3
 800608a:	2a02      	cmp	r2, #2
 800608c:	f000 81b8 	beq.w	8006400 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006090:	f013 0f01 	tst.w	r3, #1
 8006094:	d138      	bne.n	8006108 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800609a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800609e:	f023 0310 	bic.w	r3, r3, #16
 80060a2:	69e1      	ldr	r1, [r4, #28]
 80060a4:	430b      	orrs	r3, r1
 80060a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80060aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ae:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80060ba:	f7fc fa7b 	bl	80025b4 <HAL_GetTick>
 80060be:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c8:	f013 0f02 	tst.w	r3, #2
 80060cc:	d14e      	bne.n	800616c <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ce:	f7fc fa71 	bl	80025b4 <HAL_GetTick>
 80060d2:	1b80      	subs	r0, r0, r6
 80060d4:	2811      	cmp	r0, #17
 80060d6:	d9f3      	bls.n	80060c0 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 80060d8:	2003      	movs	r0, #3
 80060da:	e194      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80060dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060e0:	6813      	ldr	r3, [r2, #0]
 80060e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80060e8:	f7fc fa64 	bl	80025b4 <HAL_GetTick>
 80060ec:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80060ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80060f8:	d0b5      	beq.n	8006066 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060fa:	f7fc fa5b 	bl	80025b4 <HAL_GetTick>
 80060fe:	1b80      	subs	r0, r0, r6
 8006100:	2802      	cmp	r0, #2
 8006102:	d9f4      	bls.n	80060ee <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8006104:	2003      	movs	r0, #3
 8006106:	e17e      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800610c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8006118:	f7fc fa4c 	bl	80025b4 <HAL_GetTick>
 800611c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800611e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006126:	f013 0f02 	tst.w	r3, #2
 800612a:	d0b4      	beq.n	8006096 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800612c:	f7fc fa42 	bl	80025b4 <HAL_GetTick>
 8006130:	1b80      	subs	r0, r0, r6
 8006132:	2811      	cmp	r0, #17
 8006134:	d9f3      	bls.n	800611e <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8006136:	2003      	movs	r0, #3
 8006138:	e165      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800613a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800613e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800614a:	f7fc fa33 	bl	80025b4 <HAL_GetTick>
 800614e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006158:	f013 0f02 	tst.w	r3, #2
 800615c:	d006      	beq.n	800616c <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800615e:	f7fc fa29 	bl	80025b4 <HAL_GetTick>
 8006162:	1b80      	subs	r0, r0, r6
 8006164:	2811      	cmp	r0, #17
 8006166:	d9f3      	bls.n	8006150 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8006168:	2003      	movs	r0, #3
 800616a:	e14c      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	f013 0f04 	tst.w	r3, #4
 8006172:	f000 80b8 	beq.w	80062e6 <HAL_RCC_OscConfig+0x522>
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006176:	4b22      	ldr	r3, [pc, #136]	; (8006200 <HAL_RCC_OscConfig+0x43c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800617e:	d110      	bne.n	80061a2 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8006180:	f7ff fcf8 	bl	8005b74 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8006184:	f7fc fa16 	bl	80025b4 <HAL_GetTick>
 8006188:	4606      	mov	r6, r0
 800618a:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <HAL_RCC_OscConfig+0x43c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006192:	d106      	bne.n	80061a2 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006194:	f7fc fa0e 	bl	80025b4 <HAL_GetTick>
 8006198:	1b80      	subs	r0, r0, r6
 800619a:	2802      	cmp	r0, #2
 800619c:	d9f5      	bls.n	800618a <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 800619e:	2003      	movs	r0, #3
 80061a0:	e131      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d068      	beq.n	800627a <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80061a8:	2b85      	cmp	r3, #133	; 0x85
 80061aa:	d001      	beq.n	80061b0 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80061ac:	2b05      	cmp	r3, #5
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80061b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80061b8:	f043 0304 	orr.w	r3, r3, #4
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80061c0:	f7fc f9f8 	bl	80025b4 <HAL_GetTick>
 80061c4:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80061d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f013 0f02 	tst.w	r3, #2
 80061e2:	d10f      	bne.n	8006204 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e4:	f7fc f9e6 	bl	80025b4 <HAL_GetTick>
 80061e8:	1b80      	subs	r0, r0, r6
 80061ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80061ee:	4298      	cmp	r0, r3
 80061f0:	d9f1      	bls.n	80061d6 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 80061f2:	2003      	movs	r0, #3
 80061f4:	e107      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
 80061f6:	bf00      	nop
 80061f8:	2000008c 	.word	0x2000008c
 80061fc:	20000090 	.word	0x20000090
 8006200:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006204:	68e3      	ldr	r3, [r4, #12]
 8006206:	2b81      	cmp	r3, #129	; 0x81
 8006208:	d001      	beq.n	800620e <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800620a:	2b85      	cmp	r3, #133	; 0x85
 800620c:	d11a      	bne.n	8006244 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800620e:	f7fc f9d1 	bl	80025b4 <HAL_GetTick>
 8006212:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006218:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006230:	d159      	bne.n	80062e6 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006232:	f7fc f9bf 	bl	80025b4 <HAL_GetTick>
 8006236:	1b80      	subs	r0, r0, r6
 8006238:	f241 3388 	movw	r3, #5000	; 0x1388
 800623c:	4298      	cmp	r0, r3
 800623e:	d9f1      	bls.n	8006224 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8006240:	2003      	movs	r0, #3
 8006242:	e0e0      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8006244:	f7fc f9b6 	bl	80025b4 <HAL_GetTick>
 8006248:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800624a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800624e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800625a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006266:	d03e      	beq.n	80062e6 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006268:	f7fc f9a4 	bl	80025b4 <HAL_GetTick>
 800626c:	1b80      	subs	r0, r0, r6
 800626e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006272:	4298      	cmp	r0, r3
 8006274:	d9f1      	bls.n	800625a <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8006276:	2003      	movs	r0, #3
 8006278:	e0c5      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 800627a:	f7fc f99b 	bl	80025b4 <HAL_GetTick>
 800627e:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006284:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800629c:	d008      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629e:	f7fc f989 	bl	80025b4 <HAL_GetTick>
 80062a2:	1b80      	subs	r0, r0, r6
 80062a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80062a8:	4298      	cmp	r0, r3
 80062aa:	d9f1      	bls.n	8006290 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 80062ac:	2003      	movs	r0, #3
 80062ae:	e0aa      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80062b0:	f7fc f980 	bl	80025b4 <HAL_GetTick>
 80062b4:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	f013 0f02 	tst.w	r3, #2
 80062d2:	d008      	beq.n	80062e6 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d4:	f7fc f96e 	bl	80025b4 <HAL_GetTick>
 80062d8:	1b80      	subs	r0, r0, r6
 80062da:	f241 3388 	movw	r3, #5000	; 0x1388
 80062de:	4298      	cmp	r0, r3
 80062e0:	d9f1      	bls.n	80062c6 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 80062e2:	2003      	movs	r0, #3
 80062e4:	e08f      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 808b 	beq.w	8006404 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ee:	2d0c      	cmp	r5, #12
 80062f0:	d060      	beq.n	80063b4 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d016      	beq.n	8006324 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80062f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006300:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006302:	f7fc f957 	bl	80025b4 <HAL_GetTick>
 8006306:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006312:	d148      	bne.n	80063a6 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006318:	68d1      	ldr	r1, [r2, #12]
 800631a:	4b41      	ldr	r3, [pc, #260]	; (8006420 <HAL_RCC_OscConfig+0x65c>)
 800631c:	400b      	ands	r3, r1
 800631e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8006320:	2000      	movs	r0, #0
 8006322:	e070      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006328:	6813      	ldr	r3, [r2, #0]
 800632a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800632e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006330:	f7fc f940 	bl	80025b4 <HAL_GetTick>
 8006334:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006340:	d12a      	bne.n	8006398 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006346:	68d3      	ldr	r3, [r2, #12]
 8006348:	4936      	ldr	r1, [pc, #216]	; (8006424 <HAL_RCC_OscConfig+0x660>)
 800634a:	4019      	ands	r1, r3
 800634c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800634e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006350:	4303      	orrs	r3, r0
 8006352:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006354:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006358:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800635a:	4303      	orrs	r3, r0
 800635c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800635e:	4303      	orrs	r3, r0
 8006360:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006362:	4303      	orrs	r3, r0
 8006364:	4319      	orrs	r1, r3
 8006366:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006368:	6813      	ldr	r3, [r2, #0]
 800636a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800636e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006370:	68d3      	ldr	r3, [r2, #12]
 8006372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006376:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006378:	f7fc f91c 	bl	80025b4 <HAL_GetTick>
 800637c:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800637e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006388:	d13e      	bne.n	8006408 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638a:	f7fc f913 	bl	80025b4 <HAL_GetTick>
 800638e:	1b00      	subs	r0, r0, r4
 8006390:	280a      	cmp	r0, #10
 8006392:	d9f4      	bls.n	800637e <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8006394:	2003      	movs	r0, #3
 8006396:	e036      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006398:	f7fc f90c 	bl	80025b4 <HAL_GetTick>
 800639c:	1b40      	subs	r0, r0, r5
 800639e:	280a      	cmp	r0, #10
 80063a0:	d9c9      	bls.n	8006336 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 80063a2:	2003      	movs	r0, #3
 80063a4:	e02f      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a6:	f7fc f905 	bl	80025b4 <HAL_GetTick>
 80063aa:	1b00      	subs	r0, r0, r4
 80063ac:	280a      	cmp	r0, #10
 80063ae:	d9ab      	bls.n	8006308 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 80063b0:	2003      	movs	r0, #3
 80063b2:	e028      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d029      	beq.n	800640c <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 80063b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063bc:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80063be:	f003 0103 	and.w	r1, r3, #3
 80063c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80063c4:	4291      	cmp	r1, r2
 80063c6:	d123      	bne.n	8006410 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80063c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80063cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ce:	428a      	cmp	r2, r1
 80063d0:	d120      	bne.n	8006414 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80063d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80063d8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80063dc:	d11c      	bne.n	8006418 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80063de:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80063e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d119      	bne.n	800641c <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 80063e8:	2000      	movs	r0, #0
 80063ea:	e00c      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 80063ec:	2001      	movs	r0, #1
}
 80063ee:	4770      	bx	lr
        return HAL_ERROR;
 80063f0:	2001      	movs	r0, #1
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 80063f4:	2001      	movs	r0, #1
 80063f6:	e006      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80063f8:	2001      	movs	r0, #1
 80063fa:	e004      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80063fc:	2001      	movs	r0, #1
 80063fe:	e002      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006400:	2001      	movs	r0, #1
 8006402:	e000      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8006404:	2000      	movs	r0, #0
}
 8006406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8006408:	2000      	movs	r0, #0
 800640a:	e7fc      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800640c:	2001      	movs	r0, #1
 800640e:	e7fa      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006410:	2001      	movs	r0, #1
 8006412:	e7f8      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
 8006414:	2001      	movs	r0, #1
 8006416:	e7f6      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
 8006418:	2001      	movs	r0, #1
 800641a:	e7f4      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
 800641c:	2001      	movs	r0, #1
 800641e:	e7f2      	b.n	8006406 <HAL_RCC_OscConfig+0x642>
 8006420:	eefefffc 	.word	0xeefefffc
 8006424:	11c1808c 	.word	0x11c1808c

08006428 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006428:	2800      	cmp	r0, #0
 800642a:	f000 8127 	beq.w	800667c <HAL_RCC_ClockConfig+0x254>
{
 800642e:	b570      	push	{r4, r5, r6, lr}
 8006430:	460c      	mov	r4, r1
 8006432:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006434:	4b93      	ldr	r3, [pc, #588]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	428b      	cmp	r3, r1
 800643e:	d32d      	bcc.n	800649c <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	f013 0f02 	tst.w	r3, #2
 8006446:	d13f      	bne.n	80064c8 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	f013 0f20 	tst.w	r3, #32
 800644e:	d153      	bne.n	80064f8 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006456:	d16a      	bne.n	800652e <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	f013 0f04 	tst.w	r3, #4
 800645e:	f040 8083 	bne.w	8006568 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006462:	682b      	ldr	r3, [r5, #0]
 8006464:	f013 0f08 	tst.w	r3, #8
 8006468:	f040 8097 	bne.w	800659a <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	f013 0f01 	tst.w	r3, #1
 8006472:	f000 80de 	beq.w	8006632 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006476:	686b      	ldr	r3, [r5, #4]
 8006478:	2b02      	cmp	r3, #2
 800647a:	f000 80a8 	beq.w	80065ce <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800647e:	2b03      	cmp	r3, #3
 8006480:	f000 80ad 	beq.w	80065de <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 80b2 	bne.w	80065ee <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800648a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	f012 0f02 	tst.w	r2, #2
 8006494:	f040 80b1 	bne.w	80065fa <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006498:	2001      	movs	r0, #1
 800649a:	e0ee      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649c:	4a79      	ldr	r2, [pc, #484]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 800649e:	6813      	ldr	r3, [r2, #0]
 80064a0:	f023 0307 	bic.w	r3, r3, #7
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80064a8:	f7fc f884 	bl	80025b4 <HAL_GetTick>
 80064ac:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ae:	4b75      	ldr	r3, [pc, #468]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	42a3      	cmp	r3, r4
 80064b8:	d0c2      	beq.n	8006440 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064ba:	f7fc f87b 	bl	80025b4 <HAL_GetTick>
 80064be:	1b80      	subs	r0, r0, r6
 80064c0:	2802      	cmp	r0, #2
 80064c2:	d9f4      	bls.n	80064ae <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80064c4:	2003      	movs	r0, #3
 80064c6:	e0d8      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80064c8:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80064ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ce:	688a      	ldr	r2, [r1, #8]
 80064d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80064d4:	4313      	orrs	r3, r2
 80064d6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80064d8:	f7fc f86c 	bl	80025b4 <HAL_GetTick>
 80064dc:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80064de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80064e8:	d1ae      	bne.n	8006448 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064ea:	f7fc f863 	bl	80025b4 <HAL_GetTick>
 80064ee:	1b80      	subs	r0, r0, r6
 80064f0:	2802      	cmp	r0, #2
 80064f2:	d9f4      	bls.n	80064de <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80064f4:	2003      	movs	r0, #3
 80064f6:	e0c0      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80064f8:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80064fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064fe:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8006502:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 800650c:	f7fc f852 	bl	80025b4 <HAL_GetTick>
 8006510:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006516:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800651a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800651e:	d197      	bne.n	8006450 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006520:	f7fc f848 	bl	80025b4 <HAL_GetTick>
 8006524:	1b80      	subs	r0, r0, r6
 8006526:	2802      	cmp	r0, #2
 8006528:	d9f3      	bls.n	8006512 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800652a:	2003      	movs	r0, #3
 800652c:	e0a5      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800652e:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006534:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8006538:	f023 030f 	bic.w	r3, r3, #15
 800653c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006540:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006544:	f7fc f836 	bl	80025b4 <HAL_GetTick>
 8006548:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800654a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006552:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006556:	f47f af7f 	bne.w	8006458 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800655a:	f7fc f82b 	bl	80025b4 <HAL_GetTick>
 800655e:	1b80      	subs	r0, r0, r6
 8006560:	2802      	cmp	r0, #2
 8006562:	d9f2      	bls.n	800654a <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006564:	2003      	movs	r0, #3
 8006566:	e088      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006568:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800656a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800656e:	688a      	ldr	r2, [r1, #8]
 8006570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006574:	4313      	orrs	r3, r2
 8006576:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006578:	f7fc f81c 	bl	80025b4 <HAL_GetTick>
 800657c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800657e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006588:	f47f af6b 	bne.w	8006462 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800658c:	f7fc f812 	bl	80025b4 <HAL_GetTick>
 8006590:	1b80      	subs	r0, r0, r6
 8006592:	2802      	cmp	r0, #2
 8006594:	d9f3      	bls.n	800657e <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006596:	2003      	movs	r0, #3
 8006598:	e06f      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800659a:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800659c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065a0:	6893      	ldr	r3, [r2, #8]
 80065a2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80065a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80065aa:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80065ac:	f7fc f802 	bl	80025b4 <HAL_GetTick>
 80065b0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80065b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80065bc:	f47f af56 	bne.w	800646c <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065c0:	f7fb fff8 	bl	80025b4 <HAL_GetTick>
 80065c4:	1b80      	subs	r0, r0, r6
 80065c6:	2802      	cmp	r0, #2
 80065c8:	d9f3      	bls.n	80065b2 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80065ca:	2003      	movs	r0, #3
 80065cc:	e055      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80065ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80065d8:	d10f      	bne.n	80065fa <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80065da:	2001      	movs	r0, #1
 80065dc:	e04d      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80065de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80065e8:	d107      	bne.n	80065fa <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80065ea:	2001      	movs	r0, #1
 80065ec:	e045      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80065ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80065f8:	d042      	beq.n	8006680 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80065fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065fe:	688a      	ldr	r2, [r1, #8]
 8006600:	f022 0203 	bic.w	r2, r2, #3
 8006604:	4313      	orrs	r3, r2
 8006606:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006608:	f7fb ffd4 	bl	80025b4 <HAL_GetTick>
 800660c:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006618:	686a      	ldr	r2, [r5, #4]
 800661a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800661e:	d008      	beq.n	8006632 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006620:	f7fb ffc8 	bl	80025b4 <HAL_GetTick>
 8006624:	1b80      	subs	r0, r0, r6
 8006626:	f241 3388 	movw	r3, #5000	; 0x1388
 800662a:	4298      	cmp	r0, r3
 800662c:	d9ef      	bls.n	800660e <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800662e:	2003      	movs	r0, #3
 8006630:	e023      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	42a3      	cmp	r3, r4
 800663c:	d915      	bls.n	800666a <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663e:	4a11      	ldr	r2, [pc, #68]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006640:	6813      	ldr	r3, [r2, #0]
 8006642:	f023 0307 	bic.w	r3, r3, #7
 8006646:	4323      	orrs	r3, r4
 8006648:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800664a:	f7fb ffb3 	bl	80025b4 <HAL_GetTick>
 800664e:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006650:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	42a3      	cmp	r3, r4
 800665a:	d006      	beq.n	800666a <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800665c:	f7fb ffaa 	bl	80025b4 <HAL_GetTick>
 8006660:	1b40      	subs	r0, r0, r5
 8006662:	2802      	cmp	r0, #2
 8006664:	d9f4      	bls.n	8006650 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8006666:	2003      	movs	r0, #3
 8006668:	e007      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800666a:	f7ff fb9b 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
 800666e:	4b06      	ldr	r3, [pc, #24]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006670:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	f7fb ff9b 	bl	80025b0 <HAL_InitTick>
}
 800667a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800667c:	2001      	movs	r0, #1
}
 800667e:	4770      	bx	lr
        return HAL_ERROR;
 8006680:	2001      	movs	r0, #1
 8006682:	e7fa      	b.n	800667a <HAL_RCC_ClockConfig+0x252>
 8006684:	58004000 	.word	0x58004000
 8006688:	2000008c 	.word	0x2000008c
 800668c:	20000090 	.word	0x20000090

08006690 <HAL_RCC_GetPCLK1Freq>:
{
 8006690:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006692:	f7ff fb87 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80066a0:	4a02      	ldr	r2, [pc, #8]	; (80066ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80066a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80066a6:	40d8      	lsrs	r0, r3
 80066a8:	bd08      	pop	{r3, pc}
 80066aa:	bf00      	nop
 80066ac:	0801a644 	.word	0x0801a644

080066b0 <HAL_RCC_GetPCLK2Freq>:
{
 80066b0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80066b2:	f7ff fb77 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80066b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80066c0:	4a02      	ldr	r2, [pc, #8]	; (80066cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80066c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80066c6:	40d8      	lsrs	r0, r3
 80066c8:	bd08      	pop	{r3, pc}
 80066ca:	bf00      	nop
 80066cc:	0801a644 	.word	0x0801a644

080066d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066d4:	6803      	ldr	r3, [r0, #0]
 80066d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80066da:	f040 80ab 	bne.w	8006834 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80066de:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	f013 0f01 	tst.w	r3, #1
 80066e6:	d00a      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066e8:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80066ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80066f2:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80066f6:	b292      	uxth	r2, r2
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	f013 0f02 	tst.w	r3, #2
 8006704:	d00a      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006706:	68a2      	ldr	r2, [r4, #8]
 8006708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800670c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006710:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006714:	b292      	uxth	r2, r2
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	f013 0f20 	tst.w	r3, #32
 8006722:	d009      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006724:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800672a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800672e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800673e:	d00c      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006740:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006746:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800674a:	0c02      	lsrs	r2, r0, #16
 800674c:	0412      	lsls	r2, r2, #16
 800674e:	ea23 0302 	bic.w	r3, r3, r2
 8006752:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006760:	d00c      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006762:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006768:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800676c:	0c02      	lsrs	r2, r0, #16
 800676e:	0412      	lsls	r2, r2, #16
 8006770:	ea23 0302 	bic.w	r3, r3, r2
 8006774:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006782:	d00c      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006784:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800678a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800678e:	0c02      	lsrs	r2, r0, #16
 8006790:	0412      	lsls	r2, r2, #16
 8006792:	ea23 0302 	bic.w	r3, r3, r2
 8006796:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800679a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067a4:	f040 809e 	bne.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067ae:	f040 80aa 	bne.w	8006906 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80067b8:	f040 80b6 	bne.w	8006928 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	f013 0f10 	tst.w	r3, #16
 80067c2:	d00e      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80067c4:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80067c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80067d8:	68e3      	ldr	r3, [r4, #12]
 80067da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067de:	f000 80b4 	beq.w	800694a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80067e8:	d00f      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80067ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067f4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006800:	b91b      	cbnz	r3, 800680a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006802:	68cb      	ldr	r3, [r1, #12]
 8006804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006808:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006810:	d00e      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006812:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006818:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800681c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006826:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	f000 8092 	beq.w	8006954 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8006830:	4628      	mov	r0, r5
 8006832:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8006834:	f7ff f99e 	bl	8005b74 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8006838:	f7fb febc 	bl	80025b4 <HAL_GetTick>
 800683c:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800683e:	4b48      	ldr	r3, [pc, #288]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006846:	d106      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006848:	f7fb feb4 	bl	80025b4 <HAL_GetTick>
 800684c:	1b40      	subs	r0, r0, r5
 800684e:	2802      	cmp	r0, #2
 8006850:	d9f5      	bls.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8006852:	2503      	movs	r5, #3
 8006854:	e000      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006856:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8006858:	2d00      	cmp	r5, #0
 800685a:	f47f af41 	bne.w	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800685e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800686a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800686c:	429a      	cmp	r2, r3
 800686e:	d024      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006874:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006878:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800687c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006880:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006884:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006888:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800688c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006890:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006898:	f012 0f02 	tst.w	r2, #2
 800689c:	d10f      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 800689e:	2d00      	cmp	r5, #0
 80068a0:	f47f af1e 	bne.w	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80068a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80068ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80068b8:	e712      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 80068ba:	2200      	movs	r2, #0
 80068bc:	e7ec      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 80068be:	f7fb fe79 	bl	80025b4 <HAL_GetTick>
 80068c2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068cc:	f013 0f02 	tst.w	r3, #2
 80068d0:	d1e5      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d2:	f7fb fe6f 	bl	80025b4 <HAL_GetTick>
 80068d6:	1b80      	subs	r0, r0, r6
 80068d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80068dc:	4298      	cmp	r0, r3
 80068de:	d9f1      	bls.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 80068e0:	2503      	movs	r5, #3
 80068e2:	e7dc      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068e4:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80068e6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80068ea:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80068ee:	0919      	lsrs	r1, r3, #4
 80068f0:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80068f4:	ea22 0201 	bic.w	r2, r2, r1
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006904:	e750      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006906:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006908:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800690c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006910:	0919      	lsrs	r1, r3, #4
 8006912:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006916:	ea22 0201 	bic.w	r2, r2, r1
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006926:	e744      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006928:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800692a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800692e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006932:	0919      	lsrs	r1, r3, #4
 8006934:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006938:	ea22 0201 	bic.w	r2, r2, r1
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006948:	e738      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800694a:	68cb      	ldr	r3, [r1, #12]
 800694c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006950:	60cb      	str	r3, [r1, #12]
 8006952:	e746      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006954:	68cb      	ldr	r3, [r1, #12]
 8006956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800695a:	60cb      	str	r3, [r1, #12]
 800695c:	e768      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800695e:	bf00      	nop
 8006960:	58000400 	.word	0x58000400

08006964 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006964:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006966:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 800696a:	2a01      	cmp	r2, #1
 800696c:	d035      	beq.n	80069da <HAL_RTC_DeactivateAlarm+0x76>
 800696e:	2201      	movs	r2, #1
 8006970:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006974:	2202      	movs	r2, #2
 8006976:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800697a:	4a19      	ldr	r2, [pc, #100]	; (80069e0 <HAL_RTC_DeactivateAlarm+0x7c>)
 800697c:	20ca      	movs	r0, #202	; 0xca
 800697e:	6250      	str	r0, [r2, #36]	; 0x24
 8006980:	2053      	movs	r0, #83	; 0x53
 8006982:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006984:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006988:	d018      	beq.n	80069bc <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800698a:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <HAL_RTC_DeactivateAlarm+0x7c>)
 800698c:	6991      	ldr	r1, [r2, #24]
 800698e:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8006992:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006994:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006996:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800699a:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800699c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800699e:	f021 0102 	bic.w	r1, r1, #2
 80069a2:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80069a4:	2102      	movs	r1, #2
 80069a6:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069a8:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <HAL_RTC_DeactivateAlarm+0x7c>)
 80069aa:	21ff      	movs	r1, #255	; 0xff
 80069ac:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069b4:	2000      	movs	r0, #0
 80069b6:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 80069ba:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80069bc:	6991      	ldr	r1, [r2, #24]
 80069be:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80069c2:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80069c4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80069c6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80069ca:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80069cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069ce:	f021 0101 	bic.w	r1, r1, #1
 80069d2:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80069d4:	2101      	movs	r1, #1
 80069d6:	65d1      	str	r1, [r2, #92]	; 0x5c
 80069d8:	e7e6      	b.n	80069a8 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 80069da:	2002      	movs	r0, #2
}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40002800 	.word	0x40002800

080069e4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80069e8:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80069ea:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80069ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80069ee:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80069f0:	f015 0f01 	tst.w	r5, #1
 80069f4:	d106      	bne.n	8006a04 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80069f6:	f015 0f02 	tst.w	r5, #2
 80069fa:	d109      	bne.n	8006a10 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006a0a:	f7fb ffd9 	bl	80029c0 <HAL_RTC_AlarmAEventCallback>
 8006a0e:	e7f2      	b.n	80069f6 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006a12:	2202      	movs	r2, #2
 8006a14:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 f9ec 	bl	8006df4 <HAL_RTCEx_AlarmBEventCallback>
 8006a1c:	e7ee      	b.n	80069fc <HAL_RTC_AlarmIRQHandler+0x18>
 8006a1e:	bf00      	nop
 8006a20:	40002800 	.word	0x40002800

08006a24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a24:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006a26:	4a0b      	ldr	r2, [pc, #44]	; (8006a54 <HAL_RTC_WaitForSynchro+0x30>)
 8006a28:	68d3      	ldr	r3, [r2, #12]
 8006a2a:	f023 0320 	bic.w	r3, r3, #32
 8006a2e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006a30:	f7fb fdc0 	bl	80025b4 <HAL_GetTick>
 8006a34:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <HAL_RTC_WaitForSynchro+0x30>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f013 0f20 	tst.w	r3, #32
 8006a3e:	d107      	bne.n	8006a50 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a40:	f7fb fdb8 	bl	80025b4 <HAL_GetTick>
 8006a44:	1b00      	subs	r0, r0, r4
 8006a46:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006a4a:	d9f4      	bls.n	8006a36 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006a4c:	2003      	movs	r0, #3
 8006a4e:	e000      	b.n	8006a52 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006a50:	2000      	movs	r0, #0
}
 8006a52:	bd10      	pop	{r4, pc}
 8006a54:	40002800 	.word	0x40002800

08006a58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a58:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <RTC_EnterInitMode+0x48>)
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a62:	d002      	beq.n	8006a6a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006a64:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006a66:	4620      	mov	r0, r4
 8006a68:	bd70      	pop	{r4, r5, r6, pc}
 8006a6a:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a6c:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <RTC_EnterInitMode+0x48>)
 8006a6e:	68d3      	ldr	r3, [r2, #12]
 8006a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a74:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8006a76:	f7fb fd9d 	bl	80025b4 <HAL_GetTick>
 8006a7a:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006a7c:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a7e:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <RTC_EnterInitMode+0x48>)
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a86:	d1ee      	bne.n	8006a66 <RTC_EnterInitMode+0xe>
 8006a88:	2c03      	cmp	r4, #3
 8006a8a:	d0ec      	beq.n	8006a66 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a8c:	f7fb fd92 	bl	80025b4 <HAL_GetTick>
 8006a90:	1b43      	subs	r3, r0, r5
 8006a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a96:	d9f2      	bls.n	8006a7e <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a98:	2403      	movs	r4, #3
 8006a9a:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8006a9e:	e7ee      	b.n	8006a7e <RTC_EnterInitMode+0x26>
 8006aa0:	40002800 	.word	0x40002800

08006aa4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006aa8:	4b10      	ldr	r3, [pc, #64]	; (8006aec <RTC_ExitInitMode+0x48>)
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ab0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	f013 0f20 	tst.w	r3, #32
 8006ab8:	d106      	bne.n	8006ac8 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006aba:	f7ff ffb3 	bl	8006a24 <HAL_RTC_WaitForSynchro>
 8006abe:	b198      	cbz	r0, 8006ae8 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ac0:	2003      	movs	r0, #3
 8006ac2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006ac6:	e00f      	b.n	8006ae8 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ac8:	4a08      	ldr	r2, [pc, #32]	; (8006aec <RTC_ExitInitMode+0x48>)
 8006aca:	6993      	ldr	r3, [r2, #24]
 8006acc:	f023 0320 	bic.w	r3, r3, #32
 8006ad0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ad2:	f7ff ffa7 	bl	8006a24 <HAL_RTC_WaitForSynchro>
 8006ad6:	b110      	cbz	r0, 8006ade <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ad8:	2003      	movs	r0, #3
 8006ada:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ade:	4a03      	ldr	r2, [pc, #12]	; (8006aec <RTC_ExitInitMode+0x48>)
 8006ae0:	6993      	ldr	r3, [r2, #24]
 8006ae2:	f043 0320 	orr.w	r3, r3, #32
 8006ae6:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	bf00      	nop
 8006aec:	40002800 	.word	0x40002800

08006af0 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d052      	beq.n	8006b9a <HAL_RTC_Init+0xaa>
{
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006af8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006afc:	b163      	cbz	r3, 8006b18 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006afe:	2302      	movs	r3, #2
 8006b00:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006b04:	4b26      	ldr	r3, [pc, #152]	; (8006ba0 <HAL_RTC_Init+0xb0>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f013 0f10 	tst.w	r3, #16
 8006b0c:	d009      	beq.n	8006b22 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8006b0e:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006b18:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8006b1c:	f7fb face 	bl	80020bc <HAL_RTC_MspInit>
 8006b20:	e7ed      	b.n	8006afe <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b22:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <HAL_RTC_Init+0xb0>)
 8006b24:	22ca      	movs	r2, #202	; 0xca
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24
 8006b28:	2253      	movs	r2, #83	; 0x53
 8006b2a:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f7ff ff93 	bl	8006a58 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8006b32:	b128      	cbz	r0, 8006b40 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b34:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <HAL_RTC_Init+0xb0>)
 8006b36:	22ff      	movs	r2, #255	; 0xff
 8006b38:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d1eb      	bne.n	8006b16 <HAL_RTC_Init+0x26>
 8006b3e:	e7e7      	b.n	8006b10 <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006b40:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <HAL_RTC_Init+0xb0>)
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8006b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b4c:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006b4e:	6999      	ldr	r1, [r3, #24]
 8006b50:	6862      	ldr	r2, [r4, #4]
 8006b52:	6920      	ldr	r0, [r4, #16]
 8006b54:	4302      	orrs	r2, r0
 8006b56:	69a0      	ldr	r0, [r4, #24]
 8006b58:	4302      	orrs	r2, r0
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006b5e:	68e2      	ldr	r2, [r4, #12]
 8006b60:	68a1      	ldr	r1, [r4, #8]
 8006b62:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006b66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8006b6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006b72:	4301      	orrs	r1, r0
 8006b74:	430a      	orrs	r2, r1
 8006b76:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f7ff ff93 	bl	8006aa4 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d1d8      	bne.n	8006b34 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 8006b82:	4907      	ldr	r1, [pc, #28]	; (8006ba0 <HAL_RTC_Init+0xb0>)
 8006b84:	698b      	ldr	r3, [r1, #24]
 8006b86:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006b8a:	6a22      	ldr	r2, [r4, #32]
 8006b8c:	69e5      	ldr	r5, [r4, #28]
 8006b8e:	432a      	orrs	r2, r5
 8006b90:	6965      	ldr	r5, [r4, #20]
 8006b92:	432a      	orrs	r2, r5
 8006b94:	4313      	orrs	r3, r2
 8006b96:	618b      	str	r3, [r1, #24]
 8006b98:	e7cc      	b.n	8006b34 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b9a:	2001      	movs	r0, #1
}
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40002800 	.word	0x40002800

08006ba4 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006ba4:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006ba6:	e002      	b.n	8006bae <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006ba8:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006baa:	380a      	subs	r0, #10
 8006bac:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8006bae:	2809      	cmp	r0, #9
 8006bb0:	d8fa      	bhi.n	8006ba8 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	b2db      	uxtb	r3, r3
}
 8006bb6:	4318      	orrs	r0, r3
 8006bb8:	4770      	bx	lr
	...

08006bbc <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006bbc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	f000 80b0 	beq.w	8006d26 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bca:	4605      	mov	r5, r0
 8006bcc:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006bda:	4b54      	ldr	r3, [pc, #336]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006bdc:	68de      	ldr	r6, [r3, #12]
 8006bde:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006be2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006be6:	d043      	beq.n	8006c70 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006be8:	bb12      	cbnz	r2, 8006c30 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bf0:	d101      	bne.n	8006bf6 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006bf6:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bfa:	7820      	ldrb	r0, [r4, #0]
 8006bfc:	f7ff ffd2 	bl	8006ba4 <RTC_ByteToBcd2>
 8006c00:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c02:	7860      	ldrb	r0, [r4, #1]
 8006c04:	f7ff ffce 	bl	8006ba4 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c08:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c0c:	78a0      	ldrb	r0, [r4, #2]
 8006c0e:	f7ff ffc9 	bl	8006ba4 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c12:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c14:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c16:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c1a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006c1e:	f7ff ffc1 	bl	8006ba4 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c22:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c26:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c28:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c2a:	ea48 0000 	orr.w	r0, r8, r0
 8006c2e:	e020      	b.n	8006c72 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006c30:	6948      	ldr	r0, [r1, #20]
 8006c32:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8006c36:	d009      	beq.n	8006c4c <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006c38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006c3c:	d006      	beq.n	8006c4c <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006c3e:	4b3b      	ldr	r3, [pc, #236]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c46:	d101      	bne.n	8006c4c <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c4c:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c4e:	7863      	ldrb	r3, [r4, #1]
 8006c50:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c56:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c58:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c5a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c5c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c60:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c68:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c6a:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c6c:	4318      	orrs	r0, r3
 8006c6e:	e000      	b.n	8006c72 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8006c70:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c72:	4b2e      	ldr	r3, [pc, #184]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006c74:	22ca      	movs	r2, #202	; 0xca
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24
 8006c78:	2253      	movs	r2, #83	; 0x53
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c82:	d02a      	beq.n	8006cda <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006c84:	4b29      	ldr	r3, [pc, #164]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006c86:	699a      	ldr	r2, [r3, #24]
 8006c88:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006c8c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006c8e:	2202      	movs	r2, #2
 8006c90:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006c92:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006c96:	d040      	beq.n	8006d1a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006c98:	4b24      	ldr	r3, [pc, #144]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006c9a:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006c9c:	69a2      	ldr	r2, [r4, #24]
 8006c9e:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006ca0:	6862      	ldr	r2, [r4, #4]
 8006ca2:	4b22      	ldr	r3, [pc, #136]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006ca4:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006ca6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006ca8:	f042 0202 	orr.w	r2, r2, #2
 8006cac:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006cae:	699a      	ldr	r2, [r3, #24]
 8006cb0:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006cb4:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006cb6:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <HAL_RTC_SetAlarm_IT+0x174>)
 8006cb8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cc4:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006cc6:	22ff      	movs	r2, #255	; 0xff
 8006cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006cda:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006ce2:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006ce8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006cec:	d00f      	beq.n	8006d0e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006cee:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006cf0:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006cf2:	69a2      	ldr	r2, [r4, #24]
 8006cf4:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006cf6:	6862      	ldr	r2, [r4, #4]
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006cfa:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006cfc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8006d0a:	619a      	str	r2, [r3, #24]
 8006d0c:	e7d3      	b.n	8006cb6 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006d0e:	69a3      	ldr	r3, [r4, #24]
 8006d10:	69e2      	ldr	r2, [r4, #28]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	4a05      	ldr	r2, [pc, #20]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006d16:	6453      	str	r3, [r2, #68]	; 0x44
 8006d18:	e7ed      	b.n	8006cf6 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006d1a:	69a3      	ldr	r3, [r4, #24]
 8006d1c:	69e2      	ldr	r2, [r4, #28]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	4a02      	ldr	r2, [pc, #8]	; (8006d2c <HAL_RTC_SetAlarm_IT+0x170>)
 8006d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d24:	e7bc      	b.n	8006ca0 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006d26:	2002      	movs	r0, #2
}
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40002800 	.word	0x40002800
 8006d30:	58000800 	.word	0x58000800

08006d34 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d34:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d017      	beq.n	8006d6c <HAL_RTCEx_EnableBypassShadow+0x38>
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d42:	2302      	movs	r3, #2
 8006d44:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8006d4a:	22ca      	movs	r2, #202	; 0xca
 8006d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d4e:	2253      	movs	r2, #83	; 0x53
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	f042 0220 	orr.w	r2, r2, #32
 8006d58:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d5a:	22ff      	movs	r2, #255	; 0xff
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d5e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d62:	2300      	movs	r3, #0
 8006d64:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006d68:	4618      	mov	r0, r3
 8006d6a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006d6c:	2002      	movs	r0, #2
}
 8006d6e:	4770      	bx	lr
 8006d70:	40002800 	.word	0x40002800

08006d74 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d74:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d020      	beq.n	8006dbe <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8006d7c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8006d7e:	2101      	movs	r1, #1
 8006d80:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d84:	2302      	movs	r3, #2
 8006d86:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8006d8c:	22ca      	movs	r2, #202	; 0xca
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24
 8006d90:	2253      	movs	r2, #83	; 0x53
 8006d92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d9a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006d9c:	4c0a      	ldr	r4, [pc, #40]	; (8006dc8 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8006d9e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006da2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006da6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006daa:	22ff      	movs	r2, #255	; 0xff
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006dae:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006db2:	2300      	movs	r3, #0
 8006db4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006db8:	4618      	mov	r0, r3
}
 8006dba:	bc10      	pop	{r4}
 8006dbc:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006dbe:	2002      	movs	r0, #2
}
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40002800 	.word	0x40002800
 8006dc8:	58000800 	.word	0x58000800

08006dcc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dd8:	d103      	bne.n	8006de2 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006de0:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006de2:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006de4:	2240      	movs	r2, #64	; 0x40
 8006de6:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006de8:	f7fb fdee 	bl	80029c8 <HAL_RTCEx_SSRUEventCallback>
 8006dec:	e7f5      	b.n	8006dda <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006dee:	bf00      	nop
 8006df0:	40002800 	.word	0x40002800

08006df4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006df4:	4770      	bx	lr

08006df6 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006df6:	0089      	lsls	r1, r1, #2
 8006df8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006dfc:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006e00:	600a      	str	r2, [r1, #0]
}
 8006e02:	4770      	bx	lr

08006e04 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006e04:	0089      	lsls	r1, r1, #2
 8006e06:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006e0a:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006e0e:	6808      	ldr	r0, [r1, #0]
}
 8006e10:	4770      	bx	lr
	...

08006e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	4688      	mov	r8, r1
 8006e1e:	4617      	mov	r7, r2
 8006e20:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e22:	f7fb fbc7 	bl	80025b4 <HAL_GetTick>
 8006e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e28:	1a1b      	subs	r3, r3, r0
 8006e2a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8006e2e:	f7fb fbc1 	bl	80025b4 <HAL_GetTick>
 8006e32:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e34:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006e3c:	fb09 f303 	mul.w	r3, r9, r3
 8006e40:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e42:	682b      	ldr	r3, [r5, #0]
 8006e44:	689c      	ldr	r4, [r3, #8]
 8006e46:	ea38 0404 	bics.w	r4, r8, r4
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	42bb      	cmp	r3, r7
 8006e52:	d040      	beq.n	8006ed6 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e54:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8006e58:	d0f3      	beq.n	8006e42 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e5a:	f7fb fbab 	bl	80025b4 <HAL_GetTick>
 8006e5e:	eba0 000a 	sub.w	r0, r0, sl
 8006e62:	4548      	cmp	r0, r9
 8006e64:	d20a      	bcs.n	8006e7c <SPI_WaitFlagStateUntilTimeout+0x68>
 8006e66:	f1b9 0f00 	cmp.w	r9, #0
 8006e6a:	d007      	beq.n	8006e7c <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e6c:	9a01      	ldr	r2, [sp, #4]
 8006e6e:	b102      	cbz	r2, 8006e72 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8006e70:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8006e72:	9b01      	ldr	r3, [sp, #4]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	4691      	mov	r9, r2
 8006e7a:	e7e2      	b.n	8006e42 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e7c:	682a      	ldr	r2, [r5, #0]
 8006e7e:	6853      	ldr	r3, [r2, #4]
 8006e80:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006e84:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e86:	686b      	ldr	r3, [r5, #4]
 8006e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e8c:	d00b      	beq.n	8006ea6 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e94:	d014      	beq.n	8006ec0 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8006ea2:	2003      	movs	r0, #3
 8006ea4:	e018      	b.n	8006ed8 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea6:	68ab      	ldr	r3, [r5, #8]
 8006ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eac:	d002      	beq.n	8006eb4 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb2:	d1ec      	bne.n	8006e8e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8006eb4:	682a      	ldr	r2, [r5, #0]
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	e7e6      	b.n	8006e8e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8006ec0:	682a      	ldr	r2, [r5, #0]
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	682a      	ldr	r2, [r5, #0]
 8006ecc:	6813      	ldr	r3, [r2, #0]
 8006ece:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	e7df      	b.n	8006e96 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8006ed6:	2000      	movs	r0, #0
}
 8006ed8:	b002      	add	sp, #8
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	bf00      	nop
 8006ee0:	2000008c 	.word	0x2000008c

08006ee4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	4606      	mov	r6, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	4615      	mov	r5, r2
 8006ef0:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ef8:	f7fb fb5c 	bl	80025b4 <HAL_GetTick>
 8006efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006efe:	1a1b      	subs	r3, r3, r0
 8006f00:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8006f04:	f7fb fb56 	bl	80025b4 <HAL_GetTick>
 8006f08:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f0a:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f0e:	4b31      	ldr	r3, [pc, #196]	; (8006fd4 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f16:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006f1a:	0d1b      	lsrs	r3, r3, #20
 8006f1c:	fb08 f303 	mul.w	r3, r8, r3
 8006f20:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f22:	e002      	b.n	8006f2a <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f24:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8006f28:	d112      	bne.n	8006f50 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8006f2a:	6833      	ldr	r3, [r6, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	ea03 0c04 	and.w	ip, r3, r4
 8006f32:	45ac      	cmp	ip, r5
 8006f34:	d04a      	beq.n	8006fcc <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f36:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8006f3a:	d1f3      	bne.n	8006f24 <SPI_WaitFifoStateUntilTimeout+0x40>
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	d1f1      	bne.n	8006f24 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8006f40:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8006f4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f4e:	e7e9      	b.n	8006f24 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f50:	f7fb fb30 	bl	80025b4 <HAL_GetTick>
 8006f54:	eba0 0009 	sub.w	r0, r0, r9
 8006f58:	4540      	cmp	r0, r8
 8006f5a:	d20a      	bcs.n	8006f72 <SPI_WaitFifoStateUntilTimeout+0x8e>
 8006f5c:	f1b8 0f00 	cmp.w	r8, #0
 8006f60:	d007      	beq.n	8006f72 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f62:	9a01      	ldr	r2, [sp, #4]
 8006f64:	b102      	cbz	r2, 8006f68 <SPI_WaitFifoStateUntilTimeout+0x84>
 8006f66:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8006f68:	9b01      	ldr	r3, [sp, #4]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	4690      	mov	r8, r2
 8006f70:	e7db      	b.n	8006f2a <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f72:	6832      	ldr	r2, [r6, #0]
 8006f74:	6853      	ldr	r3, [r2, #4]
 8006f76:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006f7a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7c:	6873      	ldr	r3, [r6, #4]
 8006f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f82:	d00b      	beq.n	8006f9c <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f84:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d014      	beq.n	8006fb6 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8006f92:	2300      	movs	r3, #0
 8006f94:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8006f98:	2003      	movs	r0, #3
 8006f9a:	e018      	b.n	8006fce <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f9c:	68b3      	ldr	r3, [r6, #8]
 8006f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa2:	d002      	beq.n	8006faa <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa8:	d1ec      	bne.n	8006f84 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8006faa:	6832      	ldr	r2, [r6, #0]
 8006fac:	6813      	ldr	r3, [r2, #0]
 8006fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	e7e6      	b.n	8006f84 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8006fb6:	6832      	ldr	r2, [r6, #0]
 8006fb8:	6813      	ldr	r3, [r2, #0]
 8006fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	6832      	ldr	r2, [r6, #0]
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e7df      	b.n	8006f8c <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8006fcc:	2000      	movs	r0, #0
}
 8006fce:	b002      	add	sp, #8
 8006fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd4:	2000008c 	.word	0x2000008c

08006fd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	4604      	mov	r4, r0
 8006fde:	460d      	mov	r5, r1
 8006fe0:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fe2:	9200      	str	r2, [sp, #0]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006fec:	f7ff ff7a 	bl	8006ee4 <SPI_WaitFifoStateUntilTimeout>
 8006ff0:	b9b0      	cbnz	r0, 8007020 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff2:	9600      	str	r6, [sp, #0]
 8006ff4:	462b      	mov	r3, r5
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2180      	movs	r1, #128	; 0x80
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff ff0a 	bl	8006e14 <SPI_WaitFlagStateUntilTimeout>
 8007000:	b9a8      	cbnz	r0, 800702e <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007002:	9600      	str	r6, [sp, #0]
 8007004:	462b      	mov	r3, r5
 8007006:	2200      	movs	r2, #0
 8007008:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800700c:	4620      	mov	r0, r4
 800700e:	f7ff ff69 	bl	8006ee4 <SPI_WaitFifoStateUntilTimeout>
 8007012:	b150      	cbz	r0, 800702a <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007014:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007016:	f043 0320 	orr.w	r3, r3, #32
 800701a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800701c:	2003      	movs	r0, #3
 800701e:	e004      	b.n	800702a <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007020:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007022:	f043 0320 	orr.w	r3, r3, #32
 8007026:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8007028:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800702a:	b002      	add	sp, #8
 800702c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800702e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007030:	f043 0320 	orr.w	r3, r3, #32
 8007034:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8007036:	2003      	movs	r0, #3
 8007038:	e7f7      	b.n	800702a <SPI_EndRxTxTransaction+0x52>

0800703a <HAL_SPI_Init>:
  if (hspi == NULL)
 800703a:	2800      	cmp	r0, #0
 800703c:	f000 808e 	beq.w	800715c <HAL_SPI_Init+0x122>
{
 8007040:	b510      	push	{r4, lr}
 8007042:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007044:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007046:	b933      	cbnz	r3, 8007056 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007048:	6843      	ldr	r3, [r0, #4]
 800704a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800704e:	d005      	beq.n	800705c <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007050:	2300      	movs	r3, #0
 8007052:	61c3      	str	r3, [r0, #28]
 8007054:	e002      	b.n	800705c <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007056:	2300      	movs	r3, #0
 8007058:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800705a:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800705c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8007060:	2b00      	cmp	r3, #0
 8007062:	d05a      	beq.n	800711a <HAL_SPI_Init+0xe0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8007064:	2302      	movs	r3, #2
 8007066:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800706a:	6822      	ldr	r2, [r4, #0]
 800706c:	6813      	ldr	r3, [r2, #0]
 800706e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007072:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007074:	68e3      	ldr	r3, [r4, #12]
 8007076:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800707a:	d954      	bls.n	8007126 <HAL_SPI_Init+0xec>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800707c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800707e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007082:	d004      	beq.n	800708e <HAL_SPI_Init+0x54>
 8007084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007088:	d001      	beq.n	800708e <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800708a:	2300      	movs	r3, #0
 800708c:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800708e:	6863      	ldr	r3, [r4, #4]
 8007090:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8007094:	68a1      	ldr	r1, [r4, #8]
 8007096:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800709a:	430b      	orrs	r3, r1
 800709c:	6921      	ldr	r1, [r4, #16]
 800709e:	f001 0102 	and.w	r1, r1, #2
 80070a2:	430b      	orrs	r3, r1
 80070a4:	6961      	ldr	r1, [r4, #20]
 80070a6:	f001 0101 	and.w	r1, r1, #1
 80070aa:	430b      	orrs	r3, r1
 80070ac:	69a1      	ldr	r1, [r4, #24]
 80070ae:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80070b2:	430b      	orrs	r3, r1
 80070b4:	69e1      	ldr	r1, [r4, #28]
 80070b6:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80070ba:	430b      	orrs	r3, r1
 80070bc:	6a21      	ldr	r1, [r4, #32]
 80070be:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80070c2:	430b      	orrs	r3, r1
 80070c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80070c6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80070ca:	6820      	ldr	r0, [r4, #0]
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d6:	d029      	beq.n	800712c <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80070d8:	8b63      	ldrh	r3, [r4, #26]
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070e0:	f001 0110 	and.w	r1, r1, #16
 80070e4:	430b      	orrs	r3, r1
 80070e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070e8:	f001 0108 	and.w	r1, r1, #8
 80070ec:	430b      	orrs	r3, r1
 80070ee:	68e1      	ldr	r1, [r4, #12]
 80070f0:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80070f4:	430b      	orrs	r3, r1
 80070f6:	6821      	ldr	r1, [r4, #0]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007102:	d027      	beq.n	8007154 <HAL_SPI_Init+0x11a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007104:	6822      	ldr	r2, [r4, #0]
 8007106:	69d3      	ldr	r3, [r2, #28]
 8007108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800710c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800710e:	2000      	movs	r0, #0
 8007110:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007112:	2301      	movs	r3, #1
 8007114:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8007118:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800711a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800711e:	4620      	mov	r0, r4
 8007120:	f7fb f858 	bl	80021d4 <HAL_SPI_MspInit>
 8007124:	e79e      	b.n	8007064 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007126:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800712a:	e7a8      	b.n	800707e <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800712c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800712e:	b92b      	cbnz	r3, 800713c <HAL_SPI_Init+0x102>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007130:	68e3      	ldr	r3, [r4, #12]
 8007132:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007136:	d90a      	bls.n	800714e <HAL_SPI_Init+0x114>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007138:	2302      	movs	r3, #2
 800713a:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800713c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800713e:	2b02      	cmp	r3, #2
 8007140:	d1ca      	bne.n	80070d8 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8007142:	6821      	ldr	r1, [r4, #0]
 8007144:	680b      	ldr	r3, [r1, #0]
 8007146:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800714a:	600b      	str	r3, [r1, #0]
 800714c:	e7c4      	b.n	80070d8 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800714e:	2301      	movs	r3, #1
 8007150:	6323      	str	r3, [r4, #48]	; 0x30
 8007152:	e7f3      	b.n	800713c <HAL_SPI_Init+0x102>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8007158:	611a      	str	r2, [r3, #16]
 800715a:	e7d3      	b.n	8007104 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 800715c:	2001      	movs	r0, #1
}
 800715e:	4770      	bx	lr

08007160 <HAL_SPI_Transmit>:
{
 8007160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007164:	b083      	sub	sp, #12
 8007166:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8007168:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800716c:	2b01      	cmp	r3, #1
 800716e:	f000 810f 	beq.w	8007390 <HAL_SPI_Transmit+0x230>
 8007172:	4604      	mov	r4, r0
 8007174:	4688      	mov	r8, r1
 8007176:	4691      	mov	r9, r2
 8007178:	2301      	movs	r3, #1
 800717a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800717e:	f7fb fa19 	bl	80025b4 <HAL_GetTick>
 8007182:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007184:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8007188:	b2f6      	uxtb	r6, r6
 800718a:	2e01      	cmp	r6, #1
 800718c:	f040 80ed 	bne.w	800736a <HAL_SPI_Transmit+0x20a>
  if ((pData == NULL) || (Size == 0U))
 8007190:	f1b8 0f00 	cmp.w	r8, #0
 8007194:	f000 80ea 	beq.w	800736c <HAL_SPI_Transmit+0x20c>
 8007198:	f1b9 0f00 	cmp.w	r9, #0
 800719c:	f000 80e6 	beq.w	800736c <HAL_SPI_Transmit+0x20c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071a0:	2303      	movs	r3, #3
 80071a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071a6:	2300      	movs	r3, #0
 80071a8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071aa:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80071ae:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80071b2:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071b6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80071b8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80071bc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80071c0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80071c2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c4:	68a3      	ldr	r3, [r4, #8]
 80071c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ca:	d022      	beq.n	8007212 <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d2:	d029      	beq.n	8007228 <HAL_SPI_Transmit+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80071dc:	d103      	bne.n	80071e6 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071e6:	68e3      	ldr	r3, [r4, #12]
 80071e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071ec:	d94d      	bls.n	800728a <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ee:	6863      	ldr	r3, [r4, #4]
 80071f0:	b113      	cbz	r3, 80071f8 <HAL_SPI_Transmit+0x98>
 80071f2:	f1b9 0f01 	cmp.w	r9, #1
 80071f6:	d12e      	bne.n	8007256 <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	8812      	ldrh	r2, [r2, #0]
 80071fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007202:	3302      	adds	r3, #2
 8007204:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007206:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29b      	uxth	r3, r3
 800720e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007210:	e021      	b.n	8007256 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	6813      	ldr	r3, [r2, #0]
 8007216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800721a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	6813      	ldr	r3, [r2, #0]
 8007220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	e7d1      	b.n	80071cc <HAL_SPI_Transmit+0x6c>
    SPI_RESET_CRC(hspi);
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	6813      	ldr	r3, [r2, #0]
 800722c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	6822      	ldr	r2, [r4, #0]
 8007234:	6813      	ldr	r3, [r2, #0]
 8007236:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	e7ca      	b.n	80071d4 <HAL_SPI_Transmit+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800723e:	f7fb f9b9 	bl	80025b4 <HAL_GetTick>
 8007242:	1bc0      	subs	r0, r0, r7
 8007244:	42a8      	cmp	r0, r5
 8007246:	d303      	bcc.n	8007250 <HAL_SPI_Transmit+0xf0>
 8007248:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800724c:	f040 8098 	bne.w	8007380 <HAL_SPI_Transmit+0x220>
 8007250:	2d00      	cmp	r5, #0
 8007252:	f000 8097 	beq.w	8007384 <HAL_SPI_Transmit+0x224>
    while (hspi->TxXferCount > 0U)
 8007256:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d066      	beq.n	800732c <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	689a      	ldr	r2, [r3, #8]
 8007262:	f012 0f02 	tst.w	r2, #2
 8007266:	d0ea      	beq.n	800723e <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007268:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800726a:	8812      	ldrh	r2, [r2, #0]
 800726c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800726e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007270:	3302      	adds	r3, #2
 8007272:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007274:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8007278:	fa1f fc8c 	uxth.w	ip, ip
 800727c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007280:	fa1f fc8c 	uxth.w	ip, ip
 8007284:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8007288:	e7e5      	b.n	8007256 <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728a:	6863      	ldr	r3, [r4, #4]
 800728c:	b113      	cbz	r3, 8007294 <HAL_SPI_Transmit+0x134>
 800728e:	f1b9 0f01 	cmp.w	r9, #1
 8007292:	d133      	bne.n	80072fc <HAL_SPI_Transmit+0x19c>
      if (hspi->TxXferCount > 1U)
 8007294:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	d90c      	bls.n	80072b6 <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800729c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	8812      	ldrh	r2, [r2, #0]
 80072a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072a6:	3302      	adds	r3, #2
 80072a8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80072aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b02      	subs	r3, #2
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80072b4:	e022      	b.n	80072fc <HAL_SPI_Transmit+0x19c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80072be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072c0:	3301      	adds	r3, #1
 80072c2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80072c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80072ce:	e015      	b.n	80072fc <HAL_SPI_Transmit+0x19c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80072d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072d8:	3301      	adds	r3, #1
 80072da:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80072dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80072e6:	e009      	b.n	80072fc <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072e8:	f7fb f964 	bl	80025b4 <HAL_GetTick>
 80072ec:	1bc0      	subs	r0, r0, r7
 80072ee:	42a8      	cmp	r0, r5
 80072f0:	d302      	bcc.n	80072f8 <HAL_SPI_Transmit+0x198>
 80072f2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80072f6:	d147      	bne.n	8007388 <HAL_SPI_Transmit+0x228>
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	d047      	beq.n	800738c <HAL_SPI_Transmit+0x22c>
    while (hspi->TxXferCount > 0U)
 80072fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80072fe:	b29b      	uxth	r3, r3
 8007300:	b1a3      	cbz	r3, 800732c <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	6893      	ldr	r3, [r2, #8]
 8007306:	f013 0f02 	tst.w	r3, #2
 800730a:	d0ed      	beq.n	80072e8 <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 800730c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d9dd      	bls.n	80072d0 <HAL_SPI_Transmit+0x170>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800731a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800731c:	3302      	adds	r3, #2
 800731e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007320:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b02      	subs	r3, #2
 8007326:	b29b      	uxth	r3, r3
 8007328:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800732a:	e7e7      	b.n	80072fc <HAL_SPI_Transmit+0x19c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800732c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800732e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007332:	d014      	beq.n	800735e <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007334:	463a      	mov	r2, r7
 8007336:	4629      	mov	r1, r5
 8007338:	4620      	mov	r0, r4
 800733a:	f7ff fe4d 	bl	8006fd8 <SPI_EndRxTxTransaction>
 800733e:	b108      	cbz	r0, 8007344 <HAL_SPI_Transmit+0x1e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007340:	2320      	movs	r3, #32
 8007342:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007344:	68a3      	ldr	r3, [r4, #8]
 8007346:	b933      	cbnz	r3, 8007356 <HAL_SPI_Transmit+0x1f6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	9201      	str	r2, [sp, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007356:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007358:	b943      	cbnz	r3, 800736c <HAL_SPI_Transmit+0x20c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800735a:	2600      	movs	r6, #0
 800735c:	e006      	b.n	800736c <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	6813      	ldr	r3, [r2, #0]
 8007362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	e7e4      	b.n	8007334 <HAL_SPI_Transmit+0x1d4>
    errorcode = HAL_BUSY;
 800736a:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800736c:	2301      	movs	r3, #1
 800736e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007372:	2300      	movs	r3, #0
 8007374:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007378:	4630      	mov	r0, r6
 800737a:	b003      	add	sp, #12
 800737c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8007380:	2603      	movs	r6, #3
 8007382:	e7f3      	b.n	800736c <HAL_SPI_Transmit+0x20c>
 8007384:	2603      	movs	r6, #3
 8007386:	e7f1      	b.n	800736c <HAL_SPI_Transmit+0x20c>
          errorcode = HAL_TIMEOUT;
 8007388:	2603      	movs	r6, #3
 800738a:	e7ef      	b.n	800736c <HAL_SPI_Transmit+0x20c>
 800738c:	2603      	movs	r6, #3
 800738e:	e7ed      	b.n	800736c <HAL_SPI_Transmit+0x20c>
  __HAL_LOCK(hspi);
 8007390:	2602      	movs	r6, #2
 8007392:	e7f1      	b.n	8007378 <HAL_SPI_Transmit+0x218>

08007394 <HAL_SPI_TransmitReceive>:
{
 8007394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007398:	b085      	sub	sp, #20
 800739a:	461f      	mov	r7, r3
 800739c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  __IO uint32_t tmpreg = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 80073a2:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 80073a6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	f000 81fa 	beq.w	80077a4 <HAL_SPI_TransmitReceive+0x410>
 80073b0:	4604      	mov	r4, r0
 80073b2:	468a      	mov	sl, r1
 80073b4:	4693      	mov	fp, r2
 80073b6:	2301      	movs	r3, #1
 80073b8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80073bc:	f7fb f8fa 	bl	80025b4 <HAL_GetTick>
 80073c0:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80073c2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80073c6:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80073c8:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80073ca:	6822      	ldr	r2, [r4, #0]
 80073cc:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80073d0:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d00a      	beq.n	80073ee <HAL_SPI_TransmitReceive+0x5a>
 80073d8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80073dc:	f040 81c7 	bne.w	800776e <HAL_SPI_TransmitReceive+0x3da>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073e0:	68a1      	ldr	r1, [r4, #8]
 80073e2:	2900      	cmp	r1, #0
 80073e4:	f040 81ce 	bne.w	8007784 <HAL_SPI_TransmitReceive+0x3f0>
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	f040 81cd 	bne.w	8007788 <HAL_SPI_TransmitReceive+0x3f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073ee:	f1ba 0f00 	cmp.w	sl, #0
 80073f2:	f000 81cb 	beq.w	800778c <HAL_SPI_TransmitReceive+0x3f8>
 80073f6:	f1bb 0f00 	cmp.w	fp, #0
 80073fa:	f000 81c9 	beq.w	8007790 <HAL_SPI_TransmitReceive+0x3fc>
 80073fe:	2f00      	cmp	r7, #0
 8007400:	f000 81c8 	beq.w	8007794 <HAL_SPI_TransmitReceive+0x400>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007404:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b04      	cmp	r3, #4
 800740c:	d002      	beq.n	8007414 <HAL_SPI_TransmitReceive+0x80>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800740e:	2305      	movs	r3, #5
 8007410:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007414:	2300      	movs	r3, #0
 8007416:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007418:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800741c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007420:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007424:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007428:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800742a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800742c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800742e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007436:	d029      	beq.n	800748c <HAL_SPI_TransmitReceive+0xf8>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007438:	68e3      	ldr	r3, [r4, #12]
 800743a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800743e:	d801      	bhi.n	8007444 <HAL_SPI_TransmitReceive+0xb0>
 8007440:	2f01      	cmp	r7, #1
 8007442:	d92d      	bls.n	80074a0 <HAL_SPI_TransmitReceive+0x10c>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	6853      	ldr	r3, [r2, #4]
 8007448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800744c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007456:	d103      	bne.n	8007460 <HAL_SPI_TransmitReceive+0xcc>
    __HAL_SPI_ENABLE(hspi);
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800745e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007460:	68e3      	ldr	r3, [r4, #12]
 8007462:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007466:	d97d      	bls.n	8007564 <HAL_SPI_TransmitReceive+0x1d0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007468:	6863      	ldr	r3, [r4, #4]
 800746a:	b10b      	cbz	r3, 8007470 <HAL_SPI_TransmitReceive+0xdc>
 800746c:	2f01      	cmp	r7, #1
 800746e:	d10b      	bne.n	8007488 <HAL_SPI_TransmitReceive+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007470:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	8812      	ldrh	r2, [r2, #0]
 8007476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007478:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800747a:	3302      	adds	r3, #2
 800747c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800747e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007480:	b29b      	uxth	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	b29b      	uxth	r3, r3
 8007486:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007488:	2701      	movs	r7, #1
 800748a:	e042      	b.n	8007512 <HAL_SPI_TransmitReceive+0x17e>
    SPI_RESET_CRC(hspi);
 800748c:	6813      	ldr	r3, [r2, #0]
 800748e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	6813      	ldr	r3, [r2, #0]
 8007498:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	e7cb      	b.n	8007438 <HAL_SPI_TransmitReceive+0xa4>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	6853      	ldr	r3, [r2, #4]
 80074a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074a8:	6053      	str	r3, [r2, #4]
 80074aa:	e7d0      	b.n	800744e <HAL_SPI_TransmitReceive+0xba>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80074ac:	f018 0f04 	tst.w	r8, #4
 80074b0:	d107      	bne.n	80074c2 <HAL_SPI_TransmitReceive+0x12e>
 80074b2:	f019 0f08 	tst.w	r9, #8
 80074b6:	d004      	beq.n	80074c2 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	6813      	ldr	r3, [r2, #0]
 80074bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074c0:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	6813      	ldr	r3, [r2, #0]
 80074c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074ca:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80074cc:	2700      	movs	r7, #0
 80074ce:	e000      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x13e>
 80074d0:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	f012 0f01 	tst.w	r2, #1
 80074da:	d011      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x16c>
 80074dc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80074e0:	b292      	uxth	r2, r2
 80074e2:	b16a      	cbz	r2, 8007500 <HAL_SPI_TransmitReceive+0x16c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ec:	3302      	adds	r3, #2
 80074ee:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80074f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80074fe:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007500:	f7fb f858 	bl	80025b4 <HAL_GetTick>
 8007504:	1b80      	subs	r0, r0, r6
 8007506:	42a8      	cmp	r0, r5
 8007508:	d303      	bcc.n	8007512 <HAL_SPI_TransmitReceive+0x17e>
 800750a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800750e:	f040 8143 	bne.w	8007798 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007512:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007514:	b29b      	uxth	r3, r3
 8007516:	b92b      	cbnz	r3, 8007524 <HAL_SPI_TransmitReceive+0x190>
 8007518:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 80d1 	beq.w	80076c6 <HAL_SPI_TransmitReceive+0x332>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	f012 0f02 	tst.w	r2, #2
 800752c:	d0d1      	beq.n	80074d2 <HAL_SPI_TransmitReceive+0x13e>
 800752e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007530:	b292      	uxth	r2, r2
 8007532:	2a00      	cmp	r2, #0
 8007534:	d0cd      	beq.n	80074d2 <HAL_SPI_TransmitReceive+0x13e>
 8007536:	2f00      	cmp	r7, #0
 8007538:	d0cb      	beq.n	80074d2 <HAL_SPI_TransmitReceive+0x13e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800753a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800753c:	8812      	ldrh	r2, [r2, #0]
 800753e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007540:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007542:	3302      	adds	r3, #2
 8007544:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007546:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29b      	uxth	r3, r3
 800754e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007550:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1bb      	bne.n	80074d0 <HAL_SPI_TransmitReceive+0x13c>
 8007558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800755a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800755e:	d0a5      	beq.n	80074ac <HAL_SPI_TransmitReceive+0x118>
        txallowed = 0U;
 8007560:	2700      	movs	r7, #0
 8007562:	e7b6      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x13e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007564:	6863      	ldr	r3, [r4, #4]
 8007566:	b10b      	cbz	r3, 800756c <HAL_SPI_TransmitReceive+0x1d8>
 8007568:	2f01      	cmp	r7, #1
 800756a:	d10f      	bne.n	800758c <HAL_SPI_TransmitReceive+0x1f8>
      if (hspi->TxXferCount > 1U)
 800756c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	d90d      	bls.n	8007590 <HAL_SPI_TransmitReceive+0x1fc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007574:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	8812      	ldrh	r2, [r2, #0]
 800757a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800757c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800757e:	3302      	adds	r3, #2
 8007580:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007582:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b02      	subs	r3, #2
 8007588:	b29b      	uxth	r3, r3
 800758a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800758c:	2701      	movs	r7, #1
 800758e:	e065      	b.n	800765c <HAL_SPI_TransmitReceive+0x2c8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007590:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	7812      	ldrb	r2, [r2, #0]
 8007596:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8007598:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800759a:	3301      	adds	r3, #1
 800759c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800759e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80075a8:	e7f0      	b.n	800758c <HAL_SPI_TransmitReceive+0x1f8>
        if (hspi->TxXferCount > 1U)
 80075aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80075ac:	b292      	uxth	r2, r2
 80075ae:	2a01      	cmp	r2, #1
 80075b0:	d913      	bls.n	80075da <HAL_SPI_TransmitReceive+0x246>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80075b4:	8812      	ldrh	r2, [r2, #0]
 80075b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80075ba:	3302      	adds	r3, #2
 80075bc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80075be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b02      	subs	r3, #2
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80075c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	bb1b      	cbnz	r3, 8007616 <HAL_SPI_TransmitReceive+0x282>
 80075ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d4:	d00d      	beq.n	80075f2 <HAL_SPI_TransmitReceive+0x25e>
        txallowed = 0U;
 80075d6:	2700      	movs	r7, #0
 80075d8:	e052      	b.n	8007680 <HAL_SPI_TransmitReceive+0x2ec>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80075e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80075e2:	3301      	adds	r3, #1
 80075e4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80075e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80075f0:	e7ea      	b.n	80075c8 <HAL_SPI_TransmitReceive+0x234>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80075f2:	f018 0f04 	tst.w	r8, #4
 80075f6:	d107      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x274>
 80075f8:	f019 0f08 	tst.w	r9, #8
 80075fc:	d004      	beq.n	8007608 <HAL_SPI_TransmitReceive+0x274>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80075fe:	6822      	ldr	r2, [r4, #0]
 8007600:	6813      	ldr	r3, [r2, #0]
 8007602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007606:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007608:	6822      	ldr	r2, [r4, #0]
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007610:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8007612:	2700      	movs	r7, #0
 8007614:	e034      	b.n	8007680 <HAL_SPI_TransmitReceive+0x2ec>
 8007616:	2700      	movs	r7, #0
 8007618:	e032      	b.n	8007680 <HAL_SPI_TransmitReceive+0x2ec>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800761a:	6822      	ldr	r2, [r4, #0]
 800761c:	6853      	ldr	r3, [r2, #4]
 800761e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007622:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8007624:	2701      	movs	r7, #1
 8007626:	e00d      	b.n	8007644 <HAL_SPI_TransmitReceive+0x2b0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007628:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800762a:	7b1b      	ldrb	r3, [r3, #12]
 800762c:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800762e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007630:	3301      	adds	r3, #1
 8007632:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007634:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b29b      	uxth	r3, r3
 800763e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8007642:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007644:	f7fa ffb6 	bl	80025b4 <HAL_GetTick>
 8007648:	1b80      	subs	r0, r0, r6
 800764a:	42a8      	cmp	r0, r5
 800764c:	d303      	bcc.n	8007656 <HAL_SPI_TransmitReceive+0x2c2>
 800764e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007652:	f040 80a3 	bne.w	800779c <HAL_SPI_TransmitReceive+0x408>
 8007656:	2d00      	cmp	r5, #0
 8007658:	f000 80a2 	beq.w	80077a0 <HAL_SPI_TransmitReceive+0x40c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800765c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800765e:	b29b      	uxth	r3, r3
 8007660:	b923      	cbnz	r3, 800766c <HAL_SPI_TransmitReceive+0x2d8>
 8007662:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007666:	b29b      	uxth	r3, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	d02c      	beq.n	80076c6 <HAL_SPI_TransmitReceive+0x332>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	f012 0f02 	tst.w	r2, #2
 8007674:	d004      	beq.n	8007680 <HAL_SPI_TransmitReceive+0x2ec>
 8007676:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007678:	b292      	uxth	r2, r2
 800767a:	b10a      	cbz	r2, 8007680 <HAL_SPI_TransmitReceive+0x2ec>
 800767c:	2f00      	cmp	r7, #0
 800767e:	d194      	bne.n	80075aa <HAL_SPI_TransmitReceive+0x216>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	f012 0f01 	tst.w	r2, #1
 8007688:	d0dc      	beq.n	8007644 <HAL_SPI_TransmitReceive+0x2b0>
 800768a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800768e:	b292      	uxth	r2, r2
 8007690:	2a00      	cmp	r2, #0
 8007692:	d0d7      	beq.n	8007644 <HAL_SPI_TransmitReceive+0x2b0>
        if (hspi->RxXferCount > 1U)
 8007694:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8007698:	b292      	uxth	r2, r2
 800769a:	2a01      	cmp	r2, #1
 800769c:	d9c4      	bls.n	8007628 <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80076a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076a6:	3302      	adds	r3, #2
 80076a8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80076aa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b02      	subs	r3, #2
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80076b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d9ab      	bls.n	800761a <HAL_SPI_TransmitReceive+0x286>
        txallowed = 1U;
 80076c2:	2701      	movs	r7, #1
 80076c4:	e7be      	b.n	8007644 <HAL_SPI_TransmitReceive+0x2b0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076cc:	d017      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x36a>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	f012 0f10 	tst.w	r2, #16
 80076d6:	d048      	beq.n	800776a <HAL_SPI_TransmitReceive+0x3d6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80076d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80076da:	f042 0202 	orr.w	r2, r2, #2
 80076de:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80076e0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80076e4:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 80076e6:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076e8:	4632      	mov	r2, r6
 80076ea:	4629      	mov	r1, r5
 80076ec:	4620      	mov	r0, r4
 80076ee:	f7ff fc73 	bl	8006fd8 <SPI_EndRxTxTransaction>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d03c      	beq.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076f6:	2320      	movs	r3, #32
 80076f8:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80076fa:	2701      	movs	r7, #1
 80076fc:	e038      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80076fe:	9600      	str	r6, [sp, #0]
 8007700:	462b      	mov	r3, r5
 8007702:	2201      	movs	r2, #1
 8007704:	4611      	mov	r1, r2
 8007706:	4620      	mov	r0, r4
 8007708:	f7ff fb84 	bl	8006e14 <SPI_WaitFlagStateUntilTimeout>
 800770c:	b9e0      	cbnz	r0, 8007748 <HAL_SPI_TransmitReceive+0x3b4>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800770e:	68e3      	ldr	r3, [r4, #12]
 8007710:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007714:	d01e      	beq.n	8007754 <HAL_SPI_TransmitReceive+0x3c0>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007716:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8007718:	7b3b      	ldrb	r3, [r7, #12]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8007720:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8007724:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007726:	2b02      	cmp	r3, #2
 8007728:	d1d1      	bne.n	80076ce <HAL_SPI_TransmitReceive+0x33a>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800772a:	9600      	str	r6, [sp, #0]
 800772c:	462b      	mov	r3, r5
 800772e:	2201      	movs	r2, #1
 8007730:	4611      	mov	r1, r2
 8007732:	4620      	mov	r0, r4
 8007734:	f7ff fb6e 	bl	8006e14 <SPI_WaitFlagStateUntilTimeout>
 8007738:	b988      	cbnz	r0, 800775e <HAL_SPI_TransmitReceive+0x3ca>
        tmpreg8 = *ptmpreg8;
 800773a:	7b3b      	ldrb	r3, [r7, #12]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8007742:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8007746:	e7c2      	b.n	80076ce <HAL_SPI_TransmitReceive+0x33a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007748:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800774a:	f043 0302 	orr.w	r3, r3, #2
 800774e:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8007750:	2703      	movs	r7, #3
      goto error;
 8007752:	e00d      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
      tmpreg = READ_REG(hspi->Instance->DR);
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	e7b7      	b.n	80076ce <HAL_SPI_TransmitReceive+0x33a>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800775e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007760:	f043 0302 	orr.w	r3, r3, #2
 8007764:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8007766:	2703      	movs	r7, #3
          goto error;
 8007768:	e002      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800776a:	2700      	movs	r7, #0
 800776c:	e7bc      	b.n	80076e8 <HAL_SPI_TransmitReceive+0x354>
    errorcode = HAL_BUSY;
 800776e:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007770:	2301      	movs	r3, #1
 8007772:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007776:	2300      	movs	r3, #0
 8007778:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800777c:	4638      	mov	r0, r7
 800777e:	b005      	add	sp, #20
 8007780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 8007784:	2702      	movs	r7, #2
 8007786:	e7f3      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
 8007788:	2702      	movs	r7, #2
 800778a:	e7f1      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
    errorcode = HAL_ERROR;
 800778c:	2701      	movs	r7, #1
 800778e:	e7ef      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
 8007790:	2701      	movs	r7, #1
 8007792:	e7ed      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
 8007794:	2701      	movs	r7, #1
 8007796:	e7eb      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
        errorcode = HAL_TIMEOUT;
 8007798:	2703      	movs	r7, #3
 800779a:	e7e9      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
        errorcode = HAL_TIMEOUT;
 800779c:	2703      	movs	r7, #3
 800779e:	e7e7      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
 80077a0:	2703      	movs	r7, #3
 80077a2:	e7e5      	b.n	8007770 <HAL_SPI_TransmitReceive+0x3dc>
  __HAL_LOCK(hspi);
 80077a4:	2702      	movs	r7, #2
 80077a6:	e7e9      	b.n	800777c <HAL_SPI_TransmitReceive+0x3e8>

080077a8 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80077a8:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <SUBGHZSPI_Init+0x20>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077b0:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80077b2:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 80077b6:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80077b8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80077bc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077c4:	601a      	str	r2, [r3, #0]
}
 80077c6:	4770      	bx	lr
 80077c8:	58010000 	.word	0x58010000

080077cc <HAL_SUBGHZ_Init>:
{
 80077cc:	b530      	push	{r4, r5, lr}
 80077ce:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d058      	beq.n	8007886 <HAL_SUBGHZ_Init+0xba>
 80077d4:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 80077d6:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80077d8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80077dc:	b10b      	cbz	r3, 80077e2 <HAL_SUBGHZ_Init+0x16>
 80077de:	2d03      	cmp	r5, #3
 80077e0:	d10b      	bne.n	80077fa <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 80077e2:	2300      	movs	r3, #0
 80077e4:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7fa fdf2 	bl	80023d0 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80077ec:	4a27      	ldr	r2, [pc, #156]	; (800788c <HAL_SUBGHZ_Init+0xc0>)
 80077ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80077f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80077fa:	b185      	cbz	r5, 800781e <HAL_SUBGHZ_Init+0x52>
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80077fc:	4b24      	ldr	r3, [pc, #144]	; (8007890 <HAL_SUBGHZ_Init+0xc4>)
 80077fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007802:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8007804:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007806:	6820      	ldr	r0, [r4, #0]
 8007808:	f7ff ffce 	bl	80077a8 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800780c:	2301      	movs	r3, #1
 800780e:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007810:	2300      	movs	r3, #0
 8007812:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007814:	2301      	movs	r3, #1
 8007816:	71a3      	strb	r3, [r4, #6]
}
 8007818:	4628      	mov	r0, r5
 800781a:	b003      	add	sp, #12
 800781c:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800781e:	2302      	movs	r3, #2
 8007820:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007826:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800782a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800782e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007832:	4b18      	ldr	r3, [pc, #96]	; (8007894 <HAL_SUBGHZ_Init+0xc8>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800783a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800783e:	2264      	movs	r2, #100	; 0x64
 8007840:	fb02 f303 	mul.w	r3, r2, r3
 8007844:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	b1d3      	cbz	r3, 8007880 <HAL_SUBGHZ_Init+0xb4>
      count--;
 800784a:	9b01      	ldr	r3, [sp, #4]
 800784c:	3b01      	subs	r3, #1
 800784e:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007858:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800785c:	d1f3      	bne.n	8007846 <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800785e:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <HAL_SUBGHZ_Init+0xc4>)
 8007860:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007868:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007872:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007878:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 800787a:	2d00      	cmp	r5, #0
 800787c:	d1ca      	bne.n	8007814 <HAL_SUBGHZ_Init+0x48>
 800787e:	e7c2      	b.n	8007806 <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007880:	2501      	movs	r5, #1
 8007882:	60a5      	str	r5, [r4, #8]
        break;
 8007884:	e7eb      	b.n	800785e <HAL_SUBGHZ_Init+0x92>
    return status;
 8007886:	2501      	movs	r5, #1
 8007888:	e7c6      	b.n	8007818 <HAL_SUBGHZ_Init+0x4c>
 800788a:	bf00      	nop
 800788c:	58000800 	.word	0x58000800
 8007890:	58000400 	.word	0x58000400
 8007894:	2000008c 	.word	0x2000008c

08007898 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007898:	b082      	sub	sp, #8
 800789a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <SUBGHZSPI_Transmit+0x70>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80078a4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80078a8:	2064      	movs	r0, #100	; 0x64
 80078aa:	fb00 f303 	mul.w	r3, r0, r3
 80078ae:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80078b0:	9b01      	ldr	r3, [sp, #4]
 80078b2:	b14b      	cbz	r3, 80078c8 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80078b4:	9b01      	ldr	r3, [sp, #4]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80078ba:	4b14      	ldr	r3, [pc, #80]	; (800790c <SUBGHZSPI_Transmit+0x74>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f013 0f02 	tst.w	r3, #2
 80078c2:	d0f5      	beq.n	80078b0 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80078c4:	2000      	movs	r0, #0
 80078c6:	e001      	b.n	80078cc <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80078c8:	2001      	movs	r0, #1
 80078ca:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 80078cc:	4b0f      	ldr	r3, [pc, #60]	; (800790c <SUBGHZSPI_Transmit+0x74>)
 80078ce:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80078d0:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <SUBGHZSPI_Transmit+0x70>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80078d8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80078dc:	2164      	movs	r1, #100	; 0x64
 80078de:	fb01 f303 	mul.w	r3, r1, r3
 80078e2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80078e4:	9b01      	ldr	r3, [sp, #4]
 80078e6:	b143      	cbz	r3, 80078fa <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80078e8:	9b01      	ldr	r3, [sp, #4]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80078ee:	4b07      	ldr	r3, [pc, #28]	; (800790c <SUBGHZSPI_Transmit+0x74>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f013 0f01 	tst.w	r3, #1
 80078f6:	d0f5      	beq.n	80078e4 <SUBGHZSPI_Transmit+0x4c>
 80078f8:	e001      	b.n	80078fe <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80078fa:	2001      	movs	r0, #1
 80078fc:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80078fe:	4b03      	ldr	r3, [pc, #12]	; (800790c <SUBGHZSPI_Transmit+0x74>)
 8007900:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8007902:	b002      	add	sp, #8
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	2000008c 	.word	0x2000008c
 800790c:	58010000 	.word	0x58010000

08007910 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007910:	b082      	sub	sp, #8
 8007912:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007914:	4b1c      	ldr	r3, [pc, #112]	; (8007988 <SUBGHZSPI_Receive+0x78>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800791c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007920:	2064      	movs	r0, #100	; 0x64
 8007922:	fb00 f303 	mul.w	r3, r0, r3
 8007926:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007928:	9b01      	ldr	r3, [sp, #4]
 800792a:	b14b      	cbz	r3, 8007940 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	3b01      	subs	r3, #1
 8007930:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007932:	4b16      	ldr	r3, [pc, #88]	; (800798c <SUBGHZSPI_Receive+0x7c>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f013 0f02 	tst.w	r3, #2
 800793a:	d0f5      	beq.n	8007928 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800793c:	2000      	movs	r0, #0
 800793e:	e001      	b.n	8007944 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007940:	2001      	movs	r0, #1
 8007942:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8007944:	4b11      	ldr	r3, [pc, #68]	; (800798c <SUBGHZSPI_Receive+0x7c>)
 8007946:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800794a:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800794e:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <SUBGHZSPI_Receive+0x78>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007956:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800795a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800795e:	fb0c f303 	mul.w	r3, ip, r3
 8007962:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007964:	9b01      	ldr	r3, [sp, #4]
 8007966:	b143      	cbz	r3, 800797a <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	3b01      	subs	r3, #1
 800796c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800796e:	4b07      	ldr	r3, [pc, #28]	; (800798c <SUBGHZSPI_Receive+0x7c>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f013 0f01 	tst.w	r3, #1
 8007976:	d0f5      	beq.n	8007964 <SUBGHZSPI_Receive+0x54>
 8007978:	e001      	b.n	800797e <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800797a:	2001      	movs	r0, #1
 800797c:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800797e:	4b03      	ldr	r3, [pc, #12]	; (800798c <SUBGHZSPI_Receive+0x7c>)
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	700b      	strb	r3, [r1, #0]

  return status;
}
 8007984:	b002      	add	sp, #8
 8007986:	4770      	bx	lr
 8007988:	2000008c 	.word	0x2000008c
 800798c:	58010000 	.word	0x58010000

08007990 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007990:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007992:	4b13      	ldr	r3, [pc, #76]	; (80079e0 <SUBGHZ_WaitOnBusy+0x50>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800799a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800799e:	2264      	movs	r2, #100	; 0x64
 80079a0:	fb02 f303 	mul.w	r3, r2, r3
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	e006      	b.n	80079b6 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80079a8:	2302      	movs	r3, #2
 80079aa:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 80079ac:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 80079ae:	b002      	add	sp, #8
 80079b0:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80079b2:	4213      	tst	r3, r2
 80079b4:	d012      	beq.n	80079dc <SUBGHZ_WaitOnBusy+0x4c>
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <SUBGHZ_WaitOnBusy+0x54>)
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	f013 0304 	ands.w	r3, r3, #4
 80079be:	d000      	beq.n	80079c2 <SUBGHZ_WaitOnBusy+0x32>
 80079c0:	2301      	movs	r3, #1
    if (count == 0U)
 80079c2:	9a01      	ldr	r2, [sp, #4]
 80079c4:	2a00      	cmp	r2, #0
 80079c6:	d0ef      	beq.n	80079a8 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 80079c8:	9a01      	ldr	r2, [sp, #4]
 80079ca:	3a01      	subs	r2, #1
 80079cc:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80079ce:	4a05      	ldr	r2, [pc, #20]	; (80079e4 <SUBGHZ_WaitOnBusy+0x54>)
 80079d0:	6952      	ldr	r2, [r2, #20]
 80079d2:	f012 0202 	ands.w	r2, r2, #2
 80079d6:	d0ec      	beq.n	80079b2 <SUBGHZ_WaitOnBusy+0x22>
 80079d8:	2201      	movs	r2, #1
 80079da:	e7ea      	b.n	80079b2 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 80079dc:	2000      	movs	r0, #0
 80079de:	e7e6      	b.n	80079ae <SUBGHZ_WaitOnBusy+0x1e>
 80079e0:	2000008c 	.word	0x2000008c
 80079e4:	58000400 	.word	0x58000400

080079e8 <SUBGHZ_CheckDeviceReady>:
{
 80079e8:	b500      	push	{lr}
 80079ea:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80079ec:	7903      	ldrb	r3, [r0, #4]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d004      	beq.n	80079fc <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80079f2:	f7ff ffcd 	bl	8007990 <SUBGHZ_WaitOnBusy>
}
 80079f6:	b003      	add	sp, #12
 80079f8:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80079fc:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <SUBGHZ_CheckDeviceReady+0x4c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007a04:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8007a08:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007a0a:	4a0b      	ldr	r2, [pc, #44]	; (8007a38 <SUBGHZ_CheckDeviceReady+0x50>)
 8007a0c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8007a18:	9b01      	ldr	r3, [sp, #4]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1f9      	bne.n	8007a18 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007a24:	4a04      	ldr	r2, [pc, #16]	; (8007a38 <SUBGHZ_CheckDeviceReady+0x50>)
 8007a26:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007a32:	e7de      	b.n	80079f2 <SUBGHZ_CheckDeviceReady+0xa>
 8007a34:	2000008c 	.word	0x2000008c
 8007a38:	58000400 	.word	0x58000400

08007a3c <HAL_SUBGHZ_WriteRegisters>:
{
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a42:	7980      	ldrb	r0, [r0, #6]
 8007a44:	fa5f f880 	uxtb.w	r8, r0
 8007a48:	f1b8 0f01 	cmp.w	r8, #1
 8007a4c:	d13e      	bne.n	8007acc <HAL_SUBGHZ_WriteRegisters+0x90>
 8007a4e:	460c      	mov	r4, r1
 8007a50:	4617      	mov	r7, r2
 8007a52:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007a54:	796b      	ldrb	r3, [r5, #5]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d03b      	beq.n	8007ad2 <HAL_SUBGHZ_WriteRegisters+0x96>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7ff ffc0 	bl	80079e8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007a68:	4a1b      	ldr	r2, [pc, #108]	; (8007ad8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8007a6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007a76:	210d      	movs	r1, #13
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f7ff ff0d 	bl	8007898 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007a7e:	0a21      	lsrs	r1, r4, #8
 8007a80:	4628      	mov	r0, r5
 8007a82:	f7ff ff09 	bl	8007898 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007a86:	b2e1      	uxtb	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f7ff ff05 	bl	8007898 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a8e:	2400      	movs	r4, #0
 8007a90:	e005      	b.n	8007a9e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a92:	5d39      	ldrb	r1, [r7, r4]
 8007a94:	4628      	mov	r0, r5
 8007a96:	f7ff feff 	bl	8007898 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a9a:	3401      	adds	r4, #1
 8007a9c:	b2a4      	uxth	r4, r4
 8007a9e:	42b4      	cmp	r4, r6
 8007aa0:	d3f7      	bcc.n	8007a92 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007aa2:	4a0d      	ldr	r2, [pc, #52]	; (8007ad8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8007aa4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f7ff ff6d 	bl	8007990 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ab6:	68ab      	ldr	r3, [r5, #8]
 8007ab8:	b90b      	cbnz	r3, 8007abe <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8007aba:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	716b      	strb	r3, [r5, #5]
}
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007acc:	f04f 0802 	mov.w	r8, #2
 8007ad0:	e7f9      	b.n	8007ac6 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8007ad2:	f04f 0802 	mov.w	r8, #2
 8007ad6:	e7f6      	b.n	8007ac6 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8007ad8:	58000400 	.word	0x58000400

08007adc <HAL_SUBGHZ_ReadRegisters>:
{
 8007adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007ae2:	7980      	ldrb	r0, [r0, #6]
 8007ae4:	fa5f f880 	uxtb.w	r8, r0
 8007ae8:	f1b8 0f01 	cmp.w	r8, #1
 8007aec:	d141      	bne.n	8007b72 <HAL_SUBGHZ_ReadRegisters+0x96>
 8007aee:	460c      	mov	r4, r1
 8007af0:	4615      	mov	r5, r2
 8007af2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007af4:	7973      	ldrb	r3, [r6, #5]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d03e      	beq.n	8007b78 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8007afa:	2301      	movs	r3, #1
 8007afc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7ff ff72 	bl	80079e8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007b04:	4a1e      	ldr	r2, [pc, #120]	; (8007b80 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8007b06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007b0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007b12:	211d      	movs	r1, #29
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7ff febf 	bl	8007898 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007b1a:	0a21      	lsrs	r1, r4, #8
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f7ff febb 	bl	8007898 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007b22:	b2e1      	uxtb	r1, r4
 8007b24:	4630      	mov	r0, r6
 8007b26:	f7ff feb7 	bl	8007898 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff feb3 	bl	8007898 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007b32:	2400      	movs	r4, #0
 8007b34:	e006      	b.n	8007b44 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007b36:	4629      	mov	r1, r5
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7ff fee9 	bl	8007910 <SUBGHZSPI_Receive>
      pData++;
 8007b3e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007b40:	3401      	adds	r4, #1
 8007b42:	b2a4      	uxth	r4, r4
 8007b44:	42bc      	cmp	r4, r7
 8007b46:	d3f6      	bcc.n	8007b36 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007b48:	4a0d      	ldr	r2, [pc, #52]	; (8007b80 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8007b4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b56:	4630      	mov	r0, r6
 8007b58:	f7ff ff1a 	bl	8007990 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b5c:	68b3      	ldr	r3, [r6, #8]
 8007b5e:	b90b      	cbnz	r3, 8007b64 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8007b60:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b64:	2301      	movs	r3, #1
 8007b66:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007b68:	2300      	movs	r3, #0
 8007b6a:	7173      	strb	r3, [r6, #5]
}
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007b72:	f04f 0802 	mov.w	r8, #2
 8007b76:	e7f9      	b.n	8007b6c <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8007b78:	f04f 0802 	mov.w	r8, #2
 8007b7c:	e7f6      	b.n	8007b6c <HAL_SUBGHZ_ReadRegisters+0x90>
 8007b7e:	bf00      	nop
 8007b80:	58000400 	.word	0x58000400

08007b84 <HAL_SUBGHZ_ExecSetCmd>:
{
 8007b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b88:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b8a:	7980      	ldrb	r0, [r0, #6]
 8007b8c:	fa5f f980 	uxtb.w	r9, r0
 8007b90:	f1b9 0f01 	cmp.w	r9, #1
 8007b94:	d143      	bne.n	8007c1e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8007b96:	4688      	mov	r8, r1
 8007b98:	4617      	mov	r7, r2
 8007b9a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007b9c:	796b      	ldrb	r3, [r5, #5]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d040      	beq.n	8007c24 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f7ff ff1e 	bl	80079e8 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007bac:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8007bb0:	d005      	beq.n	8007bbe <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8007bb2:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8007bb6:	d002      	beq.n	8007bbe <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	712b      	strb	r3, [r5, #4]
 8007bbc:	e001      	b.n	8007bc2 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007bc2:	4a1a      	ldr	r2, [pc, #104]	; (8007c2c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8007bc4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007bc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f7ff fe60 	bl	8007898 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007bd8:	2400      	movs	r4, #0
 8007bda:	e005      	b.n	8007be8 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007bdc:	5d39      	ldrb	r1, [r7, r4]
 8007bde:	4628      	mov	r0, r5
 8007be0:	f7ff fe5a 	bl	8007898 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007be4:	3401      	adds	r4, #1
 8007be6:	b2a4      	uxth	r4, r4
 8007be8:	42b4      	cmp	r4, r6
 8007bea:	d3f7      	bcc.n	8007bdc <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007bec:	4a0f      	ldr	r2, [pc, #60]	; (8007c2c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8007bee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8007bfa:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8007bfe:	d10a      	bne.n	8007c16 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c00:	68ab      	ldr	r3, [r5, #8]
 8007c02:	b90b      	cbnz	r3, 8007c08 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8007c04:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	716b      	strb	r3, [r5, #5]
}
 8007c10:	4648      	mov	r0, r9
 8007c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c16:	4628      	mov	r0, r5
 8007c18:	f7ff feba 	bl	8007990 <SUBGHZ_WaitOnBusy>
 8007c1c:	e7f0      	b.n	8007c00 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8007c1e:	f04f 0902 	mov.w	r9, #2
 8007c22:	e7f5      	b.n	8007c10 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8007c24:	f04f 0902 	mov.w	r9, #2
 8007c28:	e7f2      	b.n	8007c10 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8007c2a:	bf00      	nop
 8007c2c:	58000400 	.word	0x58000400

08007c30 <HAL_SUBGHZ_ExecGetCmd>:
{
 8007c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c34:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007c36:	7980      	ldrb	r0, [r0, #6]
 8007c38:	fa5f f880 	uxtb.w	r8, r0
 8007c3c:	f1b8 0f01 	cmp.w	r8, #1
 8007c40:	d139      	bne.n	8007cb6 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8007c42:	460c      	mov	r4, r1
 8007c44:	4615      	mov	r5, r2
 8007c46:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007c48:	7973      	ldrb	r3, [r6, #5]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d036      	beq.n	8007cbc <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7ff fec8 	bl	80079e8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007c58:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8007c5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007c5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007c66:	4621      	mov	r1, r4
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f7ff fe15 	bl	8007898 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4630      	mov	r0, r6
 8007c72:	f7ff fe11 	bl	8007898 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007c76:	2400      	movs	r4, #0
 8007c78:	e006      	b.n	8007c88 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7ff fe47 	bl	8007910 <SUBGHZSPI_Receive>
      pData++;
 8007c82:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007c84:	3401      	adds	r4, #1
 8007c86:	b2a4      	uxth	r4, r4
 8007c88:	42bc      	cmp	r4, r7
 8007c8a:	d3f6      	bcc.n	8007c7a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007c8c:	4a0d      	ldr	r2, [pc, #52]	; (8007cc4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8007c8e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7ff fe78 	bl	8007990 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ca0:	68b3      	ldr	r3, [r6, #8]
 8007ca2:	b90b      	cbnz	r3, 8007ca8 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8007ca4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007cac:	2300      	movs	r3, #0
 8007cae:	7173      	strb	r3, [r6, #5]
}
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007cb6:	f04f 0802 	mov.w	r8, #2
 8007cba:	e7f9      	b.n	8007cb0 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8007cbc:	f04f 0802 	mov.w	r8, #2
 8007cc0:	e7f6      	b.n	8007cb0 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8007cc2:	bf00      	nop
 8007cc4:	58000400 	.word	0x58000400

08007cc8 <HAL_SUBGHZ_IRQHandler>:
{
 8007cc8:	b530      	push	{r4, r5, lr}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	aa01      	add	r2, sp, #4
 8007cd8:	2112      	movs	r1, #18
 8007cda:	f7ff ffa9 	bl	8007c30 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007cde:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007ce2:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8007ce6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007cea:	2302      	movs	r3, #2
 8007cec:	aa01      	add	r2, sp, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f7ff ff47 	bl	8007b84 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007cf6:	f014 0f01 	tst.w	r4, #1
 8007cfa:	d123      	bne.n	8007d44 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007cfc:	f014 0f02 	tst.w	r4, #2
 8007d00:	d124      	bne.n	8007d4c <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007d02:	f014 0f04 	tst.w	r4, #4
 8007d06:	d125      	bne.n	8007d54 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007d08:	f014 0f08 	tst.w	r4, #8
 8007d0c:	d126      	bne.n	8007d5c <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007d0e:	f014 0f10 	tst.w	r4, #16
 8007d12:	d127      	bne.n	8007d64 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007d14:	f014 0f20 	tst.w	r4, #32
 8007d18:	d128      	bne.n	8007d6c <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007d1a:	f014 0f40 	tst.w	r4, #64	; 0x40
 8007d1e:	d129      	bne.n	8007d74 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007d20:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007d24:	d006      	beq.n	8007d34 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007d26:	f414 7f80 	tst.w	r4, #256	; 0x100
 8007d2a:	d027      	beq.n	8007d7c <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f00c fd52 	bl	80147d8 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007d34:	f414 7f00 	tst.w	r4, #512	; 0x200
 8007d38:	d125      	bne.n	8007d86 <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007d3a:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8007d3e:	d126      	bne.n	8007d8e <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8007d40:	b003      	add	sp, #12
 8007d42:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007d44:	4628      	mov	r0, r5
 8007d46:	f00c fd2f 	bl	80147a8 <HAL_SUBGHZ_TxCpltCallback>
 8007d4a:	e7d7      	b.n	8007cfc <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f00c fd33 	bl	80147b8 <HAL_SUBGHZ_RxCpltCallback>
 8007d52:	e7d6      	b.n	8007d02 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007d54:	4628      	mov	r0, r5
 8007d56:	f00c fd63 	bl	8014820 <HAL_SUBGHZ_PreambleDetectedCallback>
 8007d5a:	e7d5      	b.n	8007d08 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f00c fd67 	bl	8014830 <HAL_SUBGHZ_SyncWordValidCallback>
 8007d62:	e7d4      	b.n	8007d0e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007d64:	4628      	mov	r0, r5
 8007d66:	f00c fd6b 	bl	8014840 <HAL_SUBGHZ_HeaderValidCallback>
 8007d6a:	e7d3      	b.n	8007d14 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f00c fd4f 	bl	8014810 <HAL_SUBGHZ_HeaderErrorCallback>
 8007d72:	e7d2      	b.n	8007d1a <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007d74:	4628      	mov	r0, r5
 8007d76:	f00c fd27 	bl	80147c8 <HAL_SUBGHZ_CRCErrorCallback>
 8007d7a:	e7d1      	b.n	8007d20 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f00c fd2a 	bl	80147d8 <HAL_SUBGHZ_CADStatusCallback>
 8007d84:	e7d6      	b.n	8007d34 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007d86:	4628      	mov	r0, r5
 8007d88:	f00c fd38 	bl	80147fc <HAL_SUBGHZ_RxTxTimeoutCallback>
 8007d8c:	e7d5      	b.n	8007d3a <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f00c fd5e 	bl	8014850 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8007d94:	e7d4      	b.n	8007d40 <HAL_SUBGHZ_IRQHandler+0x78>
	...

08007d98 <HAL_SUBGHZ_WriteBuffer>:
{
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007d9e:	7980      	ldrb	r0, [r0, #6]
 8007da0:	fa5f f880 	uxtb.w	r8, r0
 8007da4:	f1b8 0f01 	cmp.w	r8, #1
 8007da8:	d138      	bne.n	8007e1c <HAL_SUBGHZ_WriteBuffer+0x84>
 8007daa:	460c      	mov	r4, r1
 8007dac:	4617      	mov	r7, r2
 8007dae:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007db0:	796b      	ldrb	r3, [r5, #5]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d035      	beq.n	8007e22 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8007db6:	2301      	movs	r3, #1
 8007db8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f7ff fe14 	bl	80079e8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007dc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007dc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007dce:	210e      	movs	r1, #14
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f7ff fd61 	bl	8007898 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f7ff fd5d 	bl	8007898 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007dde:	2400      	movs	r4, #0
 8007de0:	e005      	b.n	8007dee <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007de2:	5d39      	ldrb	r1, [r7, r4]
 8007de4:	4628      	mov	r0, r5
 8007de6:	f7ff fd57 	bl	8007898 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007dea:	3401      	adds	r4, #1
 8007dec:	b2a4      	uxth	r4, r4
 8007dee:	42b4      	cmp	r4, r6
 8007df0:	d3f7      	bcc.n	8007de2 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007df2:	4a0d      	ldr	r2, [pc, #52]	; (8007e28 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007df4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007e00:	4628      	mov	r0, r5
 8007e02:	f7ff fdc5 	bl	8007990 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007e06:	68ab      	ldr	r3, [r5, #8]
 8007e08:	b90b      	cbnz	r3, 8007e0e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8007e0a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007e12:	2300      	movs	r3, #0
 8007e14:	716b      	strb	r3, [r5, #5]
}
 8007e16:	4640      	mov	r0, r8
 8007e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007e1c:	f04f 0802 	mov.w	r8, #2
 8007e20:	e7f9      	b.n	8007e16 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8007e22:	f04f 0802 	mov.w	r8, #2
 8007e26:	e7f6      	b.n	8007e16 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007e28:	58000400 	.word	0x58000400

08007e2c <HAL_SUBGHZ_ReadBuffer>:
{
 8007e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e30:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007e32:	7980      	ldrb	r0, [r0, #6]
 8007e34:	fa5f f880 	uxtb.w	r8, r0
 8007e38:	f1b8 0f01 	cmp.w	r8, #1
 8007e3c:	d13d      	bne.n	8007eba <HAL_SUBGHZ_ReadBuffer+0x8e>
 8007e3e:	460c      	mov	r4, r1
 8007e40:	4615      	mov	r5, r2
 8007e42:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007e44:	7973      	ldrb	r3, [r6, #5]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d03a      	beq.n	8007ec0 <HAL_SUBGHZ_ReadBuffer+0x94>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff fdca 	bl	80079e8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007e54:	4a1c      	ldr	r2, [pc, #112]	; (8007ec8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007e56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007e5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007e62:	211e      	movs	r1, #30
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff fd17 	bl	8007898 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f7ff fd13 	bl	8007898 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007e72:	2100      	movs	r1, #0
 8007e74:	4630      	mov	r0, r6
 8007e76:	f7ff fd0f 	bl	8007898 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007e7a:	2400      	movs	r4, #0
 8007e7c:	e006      	b.n	8007e8c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7ff fd45 	bl	8007910 <SUBGHZSPI_Receive>
      pData++;
 8007e86:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007e88:	3401      	adds	r4, #1
 8007e8a:	b2a4      	uxth	r4, r4
 8007e8c:	42bc      	cmp	r4, r7
 8007e8e:	d3f6      	bcc.n	8007e7e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007e90:	4a0d      	ldr	r2, [pc, #52]	; (8007ec8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007e92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f7ff fd76 	bl	8007990 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ea4:	68b3      	ldr	r3, [r6, #8]
 8007ea6:	b90b      	cbnz	r3, 8007eac <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8007ea8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007eac:	2301      	movs	r3, #1
 8007eae:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	7173      	strb	r3, [r6, #5]
}
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007eba:	f04f 0802 	mov.w	r8, #2
 8007ebe:	e7f9      	b.n	8007eb4 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8007ec0:	f04f 0802 	mov.w	r8, #2
 8007ec4:	e7f6      	b.n	8007eb4 <HAL_SUBGHZ_ReadBuffer+0x88>
 8007ec6:	bf00      	nop
 8007ec8:	58000400 	.word	0x58000400

08007ecc <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007ecc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	e852 3f00 	ldrex	r3, [r2]
 8007ed2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	e842 3100 	strex	r1, r3, [r2]
 8007eda:	2900      	cmp	r1, #0
 8007edc:	d1f6      	bne.n	8007ecc <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ede:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	f102 0308 	add.w	r3, r2, #8
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	3208      	adds	r2, #8
 8007eee:	e842 3100 	strex	r1, r3, [r2]
 8007ef2:	2900      	cmp	r1, #0
 8007ef4:	d1f3      	bne.n	8007ede <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ef6:	2320      	movs	r3, #32
 8007ef8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8007efc:	4770      	bx	lr

08007efe <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007efe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	e852 3f00 	ldrex	r3, [r2]
 8007f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	e842 3100 	strex	r1, r3, [r2]
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	d1f6      	bne.n	8007efe <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f10:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	f102 0308 	add.w	r3, r2, #8
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f1e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	3208      	adds	r2, #8
 8007f24:	e842 3100 	strex	r1, r3, [r2]
 8007f28:	2900      	cmp	r1, #0
 8007f2a:	d1f1      	bne.n	8007f10 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d006      	beq.n	8007f40 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f32:	2320      	movs	r3, #32
 8007f34:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f3c:	6743      	str	r3, [r0, #116]	; 0x74
}
 8007f3e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f40:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	e852 3f00 	ldrex	r3, [r2]
 8007f46:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	e842 3100 	strex	r1, r3, [r2]
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	d1f6      	bne.n	8007f40 <UART_EndRxTransfer+0x42>
 8007f52:	e7ee      	b.n	8007f32 <UART_EndRxTransfer+0x34>

08007f54 <HAL_UART_Transmit_DMA>:
{
 8007f54:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007f56:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007f5a:	2a20      	cmp	r2, #32
 8007f5c:	d13d      	bne.n	8007fda <HAL_UART_Transmit_DMA+0x86>
{
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8007f62:	2900      	cmp	r1, #0
 8007f64:	d03b      	beq.n	8007fde <HAL_UART_Transmit_DMA+0x8a>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d03b      	beq.n	8007fe2 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8007f6a:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007f6c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f70:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f7a:	2221      	movs	r2, #33	; 0x21
 8007f7c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8007f80:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007f82:	b1ca      	cbz	r2, 8007fb8 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f84:	4918      	ldr	r1, [pc, #96]	; (8007fe8 <HAL_UART_Transmit_DMA+0x94>)
 8007f86:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f88:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007f8a:	4918      	ldr	r1, [pc, #96]	; (8007fec <HAL_UART_Transmit_DMA+0x98>)
 8007f8c:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f8e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007f90:	4917      	ldr	r1, [pc, #92]	; (8007ff0 <HAL_UART_Transmit_DMA+0x9c>)
 8007f92:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007f94:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007f96:	2100      	movs	r1, #0
 8007f98:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007f9a:	6802      	ldr	r2, [r0, #0]
 8007f9c:	3228      	adds	r2, #40	; 0x28
 8007f9e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8007fa0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8007fa2:	f7fc fe97 	bl	8004cd4 <HAL_DMA_Start_IT>
 8007fa6:	b138      	cbz	r0, 8007fb8 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fa8:	2310      	movs	r3, #16
 8007faa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8007fae:	2320      	movs	r3, #32
 8007fb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	e00f      	b.n	8007fd8 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	2240      	movs	r2, #64	; 0x40
 8007fbc:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fbe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	f102 0308 	add.w	r3, r2, #8
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	3208      	adds	r2, #8
 8007fce:	e842 3100 	strex	r1, r3, [r2]
 8007fd2:	2900      	cmp	r1, #0
 8007fd4:	d1f3      	bne.n	8007fbe <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8007fd6:	2000      	movs	r0, #0
}
 8007fd8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007fda:	2002      	movs	r0, #2
}
 8007fdc:	4770      	bx	lr
      return HAL_ERROR;
 8007fde:	2001      	movs	r0, #1
 8007fe0:	e7fa      	b.n	8007fd8 <HAL_UART_Transmit_DMA+0x84>
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	e7f8      	b.n	8007fd8 <HAL_UART_Transmit_DMA+0x84>
 8007fe6:	bf00      	nop
 8007fe8:	08007ff5 	.word	0x08007ff5
 8007fec:	0800803f 	.word	0x0800803f
 8007ff0:	0800804b 	.word	0x0800804b

08007ff4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ff4:	b508      	push	{r3, lr}
 8007ff6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ff8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f013 0f20 	tst.w	r3, #32
 8008002:	d118      	bne.n	8008036 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800800a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	f102 0308 	add.w	r3, r2, #8
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	3208      	adds	r2, #8
 800801a:	e842 3100 	strex	r1, r3, [r2]
 800801e:	2900      	cmp	r1, #0
 8008020:	d1f3      	bne.n	800800a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008022:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	e852 3f00 	ldrex	r3, [r2]
 8008028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	e842 3100 	strex	r1, r3, [r2]
 8008030:	2900      	cmp	r1, #0
 8008032:	d1f6      	bne.n	8008022 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008034:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8008036:	f7fa fe61 	bl	8002cfc <HAL_UART_TxCpltCallback>
}
 800803a:	e7fb      	b.n	8008034 <UART_DMATransmitCplt+0x40>

0800803c <HAL_UART_TxHalfCpltCallback>:
}
 800803c:	4770      	bx	lr

0800803e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800803e:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008040:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008042:	f7ff fffb 	bl	800803c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008046:	bd08      	pop	{r3, pc}

08008048 <HAL_UART_ErrorCallback>:
}
 8008048:	4770      	bx	lr

0800804a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800804a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800804c:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800804e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008052:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800805e:	d001      	beq.n	8008064 <UART_DMAError+0x1a>
 8008060:	2a21      	cmp	r2, #33	; 0x21
 8008062:	d010      	beq.n	8008086 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f013 0f40 	tst.w	r3, #64	; 0x40
 800806c:	d001      	beq.n	8008072 <UART_DMAError+0x28>
 800806e:	2d22      	cmp	r5, #34	; 0x22
 8008070:	d010      	beq.n	8008094 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008072:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008076:	f043 0310 	orr.w	r3, r3, #16
 800807a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800807e:	4620      	mov	r0, r4
 8008080:	f7ff ffe2 	bl	8008048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008084:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800808c:	4620      	mov	r0, r4
 800808e:	f7ff ff1d 	bl	8007ecc <UART_EndTxTransfer>
 8008092:	e7e7      	b.n	8008064 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff ff2f 	bl	8007efe <UART_EndRxTransfer>
 80080a0:	e7e7      	b.n	8008072 <UART_DMAError+0x28>

080080a2 <HAL_UARTEx_RxEventCallback>:
}
 80080a2:	4770      	bx	lr

080080a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080a4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80080a6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080aa:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80080ae:	2a22      	cmp	r2, #34	; 0x22
 80080b0:	d005      	beq.n	80080be <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080b2:	6802      	ldr	r2, [r0, #0]
 80080b4:	6993      	ldr	r3, [r2, #24]
 80080b6:	f043 0308 	orr.w	r3, r3, #8
 80080ba:	6193      	str	r3, [r2, #24]
  }
}
 80080bc:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080be:	6802      	ldr	r2, [r0, #0]
 80080c0:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80080c6:	400b      	ands	r3, r1
 80080c8:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80080ca:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80080cc:	3301      	adds	r3, #1
 80080ce:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80080d0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29b      	uxth	r3, r3
 80080da:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80080de:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e9      	bne.n	80080bc <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	e852 3f00 	ldrex	r3, [r2]
 80080ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	e842 3100 	strex	r1, r3, [r2]
 80080f6:	2900      	cmp	r1, #0
 80080f8:	d1f6      	bne.n	80080e8 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	f102 0308 	add.w	r3, r2, #8
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008108:	3208      	adds	r2, #8
 800810a:	e842 3100 	strex	r1, r3, [r2]
 800810e:	2900      	cmp	r1, #0
 8008110:	d1f3      	bne.n	80080fa <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8008112:	2320      	movs	r3, #32
 8008114:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800811c:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800811e:	6803      	ldr	r3, [r0, #0]
 8008120:	4a16      	ldr	r2, [pc, #88]	; (800817c <UART_RxISR_8BIT+0xd8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00c      	beq.n	8008140 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800812c:	d008      	beq.n	8008140 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800812e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	e852 3f00 	ldrex	r3, [r2]
 8008134:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	e842 3100 	strex	r1, r3, [r2]
 800813c:	2900      	cmp	r1, #0
 800813e:	d1f6      	bne.n	800812e <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008140:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008142:	2b01      	cmp	r3, #1
 8008144:	d116      	bne.n	8008174 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008146:	2300      	movs	r3, #0
 8008148:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800814a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	e852 3f00 	ldrex	r3, [r2]
 8008150:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	e842 3100 	strex	r1, r3, [r2]
 8008158:	2900      	cmp	r1, #0
 800815a:	d1f6      	bne.n	800814a <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800815c:	6803      	ldr	r3, [r0, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	f012 0f10 	tst.w	r2, #16
 8008164:	d001      	beq.n	800816a <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008166:	2210      	movs	r2, #16
 8008168:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800816a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800816e:	f7ff ff98 	bl	80080a2 <HAL_UARTEx_RxEventCallback>
 8008172:	e7a3      	b.n	80080bc <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8008174:	f7fa fdd2 	bl	8002d1c <HAL_UART_RxCpltCallback>
 8008178:	e7a0      	b.n	80080bc <UART_RxISR_8BIT+0x18>
 800817a:	bf00      	nop
 800817c:	40008000 	.word	0x40008000

08008180 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008180:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008182:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008186:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800818a:	2b22      	cmp	r3, #34	; 0x22
 800818c:	d005      	beq.n	800819a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800818e:	6802      	ldr	r2, [r0, #0]
 8008190:	6993      	ldr	r3, [r2, #24]
 8008192:	f043 0308 	orr.w	r3, r3, #8
 8008196:	6193      	str	r3, [r2, #24]
  }
}
 8008198:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800819a:	6803      	ldr	r3, [r0, #0]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800819e:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80081a0:	4013      	ands	r3, r2
 80081a2:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80081a4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80081a6:	3302      	adds	r3, #2
 80081a8:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80081aa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80081b8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80081bc:	b29b      	uxth	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1ea      	bne.n	8008198 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	e852 3f00 	ldrex	r3, [r2]
 80081c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	e842 3100 	strex	r1, r3, [r2]
 80081d0:	2900      	cmp	r1, #0
 80081d2:	d1f6      	bne.n	80081c2 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	f102 0308 	add.w	r3, r2, #8
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	3208      	adds	r2, #8
 80081e4:	e842 3100 	strex	r1, r3, [r2]
 80081e8:	2900      	cmp	r1, #0
 80081ea:	d1f3      	bne.n	80081d4 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80081ec:	2320      	movs	r3, #32
 80081ee:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081f6:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081f8:	6803      	ldr	r3, [r0, #0]
 80081fa:	4a16      	ldr	r2, [pc, #88]	; (8008254 <UART_RxISR_16BIT+0xd4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00c      	beq.n	800821a <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008206:	d008      	beq.n	800821a <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008208:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	e852 3f00 	ldrex	r3, [r2]
 800820e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	e842 3100 	strex	r1, r3, [r2]
 8008216:	2900      	cmp	r1, #0
 8008218:	d1f6      	bne.n	8008208 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800821a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800821c:	2b01      	cmp	r3, #1
 800821e:	d116      	bne.n	800824e <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008220:	2300      	movs	r3, #0
 8008222:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008224:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	e852 3f00 	ldrex	r3, [r2]
 800822a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	e842 3100 	strex	r1, r3, [r2]
 8008232:	2900      	cmp	r1, #0
 8008234:	d1f6      	bne.n	8008224 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008236:	6803      	ldr	r3, [r0, #0]
 8008238:	69da      	ldr	r2, [r3, #28]
 800823a:	f012 0f10 	tst.w	r2, #16
 800823e:	d001      	beq.n	8008244 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008240:	2210      	movs	r2, #16
 8008242:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008244:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8008248:	f7ff ff2b 	bl	80080a2 <HAL_UARTEx_RxEventCallback>
 800824c:	e7a4      	b.n	8008198 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800824e:	f7fa fd65 	bl	8002d1c <HAL_UART_RxCpltCallback>
 8008252:	e7a1      	b.n	8008198 <UART_RxISR_16BIT+0x18>
 8008254:	40008000 	.word	0x40008000

08008258 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800825c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008260:	6803      	ldr	r3, [r0, #0]
 8008262:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008264:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008268:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800826c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8008270:	2a22      	cmp	r2, #34	; 0x22
 8008272:	d005      	beq.n	8008280 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	f042 0208 	orr.w	r2, r2, #8
 800827a:	619a      	str	r2, [r3, #24]
  }
}
 800827c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008280:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8008282:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008286:	e008      	b.n	800829a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008288:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800828c:	2b00      	cmp	r3, #0
 800828e:	d14c      	bne.n	800832a <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8008290:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008294:	b29b      	uxth	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d04e      	beq.n	8008338 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800829a:	2f00      	cmp	r7, #0
 800829c:	f000 809a 	beq.w	80083d4 <UART_RxISR_8BIT_FIFOEN+0x17c>
 80082a0:	f015 0f20 	tst.w	r5, #32
 80082a4:	f000 8096 	beq.w	80083d4 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082ac:	b2f3      	uxtb	r3, r6
 80082ae:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80082b0:	400b      	ands	r3, r1
 80082b2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80082b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082b6:	3301      	adds	r3, #1
 80082b8:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80082ba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082cc:	f015 0f07 	tst.w	r5, #7
 80082d0:	d0de      	beq.n	8008290 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082d2:	f015 0f01 	tst.w	r5, #1
 80082d6:	d009      	beq.n	80082ec <UART_RxISR_8BIT_FIFOEN+0x94>
 80082d8:	f419 7f80 	tst.w	r9, #256	; 0x100
 80082dc:	d006      	beq.n	80082ec <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082de:	2201      	movs	r2, #1
 80082e0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80082e6:	4313      	orrs	r3, r2
 80082e8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082ec:	f015 0f02 	tst.w	r5, #2
 80082f0:	d00b      	beq.n	800830a <UART_RxISR_8BIT_FIFOEN+0xb2>
 80082f2:	f018 0f01 	tst.w	r8, #1
 80082f6:	d008      	beq.n	800830a <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	2202      	movs	r2, #2
 80082fc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008302:	f043 0304 	orr.w	r3, r3, #4
 8008306:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800830a:	f015 0f04 	tst.w	r5, #4
 800830e:	d0bb      	beq.n	8008288 <UART_RxISR_8BIT_FIFOEN+0x30>
 8008310:	f018 0f01 	tst.w	r8, #1
 8008314:	d0b8      	beq.n	8008288 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	2204      	movs	r2, #4
 800831a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800831c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008320:	f043 0302 	orr.w	r3, r3, #2
 8008324:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8008328:	e7ae      	b.n	8008288 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800832a:	4620      	mov	r0, r4
 800832c:	f7ff fe8c 	bl	8008048 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008330:	2300      	movs	r3, #0
 8008332:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8008336:	e7ab      	b.n	8008290 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008338:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	e852 3f00 	ldrex	r3, [r2]
 800833e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	e842 3100 	strex	r1, r3, [r2]
 8008346:	2900      	cmp	r1, #0
 8008348:	d1f6      	bne.n	8008338 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800834a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	f102 0308 	add.w	r3, r2, #8
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008358:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835c:	3208      	adds	r2, #8
 800835e:	e842 3100 	strex	r1, r3, [r2]
 8008362:	2900      	cmp	r1, #0
 8008364:	d1f1      	bne.n	800834a <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8008366:	2320      	movs	r3, #32
 8008368:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800836c:	2300      	movs	r3, #0
 800836e:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008370:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	4a29      	ldr	r2, [pc, #164]	; (800841c <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d003      	beq.n	8008382 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008380:	d106      	bne.n	8008390 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008382:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008384:	2b01      	cmp	r3, #1
 8008386:	d00d      	beq.n	80083a4 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8008388:	4620      	mov	r0, r4
 800838a:	f7fa fcc7 	bl	8002d1c <HAL_UART_RxCpltCallback>
 800838e:	e784      	b.n	800829a <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008390:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	e852 3f00 	ldrex	r3, [r2]
 8008396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	e842 3100 	strex	r1, r3, [r2]
 800839e:	2900      	cmp	r1, #0
 80083a0:	d1f6      	bne.n	8008390 <UART_RxISR_8BIT_FIFOEN+0x138>
 80083a2:	e7ee      	b.n	8008382 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a4:	2300      	movs	r3, #0
 80083a6:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	e852 3f00 	ldrex	r3, [r2]
 80083ae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	e842 3100 	strex	r1, r3, [r2]
 80083b6:	2900      	cmp	r1, #0
 80083b8:	d1f6      	bne.n	80083a8 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	69da      	ldr	r2, [r3, #28]
 80083be:	f012 0f10 	tst.w	r2, #16
 80083c2:	d001      	beq.n	80083c8 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083c4:	2210      	movs	r2, #16
 80083c6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083c8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80083cc:	4620      	mov	r0, r4
 80083ce:	f7ff fe68 	bl	80080a2 <HAL_UARTEx_RxEventCallback>
 80083d2:	e762      	b.n	800829a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80083d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80083d8:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f43f af4e 	beq.w	800827c <UART_RxISR_8BIT_FIFOEN+0x24>
 80083e0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80083e4:	429a      	cmp	r2, r3
 80083e6:	f67f af49 	bls.w	800827c <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	f102 0308 	add.w	r3, r2, #8
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	3208      	adds	r2, #8
 80083fa:	e842 3100 	strex	r1, r3, [r2]
 80083fe:	2900      	cmp	r1, #0
 8008400:	d1f3      	bne.n	80083ea <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8008402:	4b07      	ldr	r3, [pc, #28]	; (8008420 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8008404:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008406:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	e852 3f00 	ldrex	r3, [r2]
 800840c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	e842 3100 	strex	r1, r3, [r2]
 8008414:	2900      	cmp	r1, #0
 8008416:	d1f6      	bne.n	8008406 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8008418:	e730      	b.n	800827c <UART_RxISR_8BIT_FIFOEN+0x24>
 800841a:	bf00      	nop
 800841c:	40008000 	.word	0x40008000
 8008420:	080080a5 	.word	0x080080a5

08008424 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008428:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800842c:	6803      	ldr	r3, [r0, #0]
 800842e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008430:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008434:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008438:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800843c:	2a22      	cmp	r2, #34	; 0x22
 800843e:	d005      	beq.n	800844c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	f042 0208 	orr.w	r2, r2, #8
 8008446:	619a      	str	r2, [r3, #24]
  }
}
 8008448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800844e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008452:	e008      	b.n	8008466 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008454:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008458:	2b00      	cmp	r3, #0
 800845a:	d14b      	bne.n	80084f4 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800845c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d04d      	beq.n	8008502 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008466:	2f00      	cmp	r7, #0
 8008468:	f000 8099 	beq.w	800859e <UART_RxISR_16BIT_FIFOEN+0x17a>
 800846c:	f015 0f20 	tst.w	r5, #32
 8008470:	f000 8095 	beq.w	800859e <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008478:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800847a:	4033      	ands	r3, r6
 800847c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800847e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008480:	3302      	adds	r3, #2
 8008482:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008484:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008488:	b29b      	uxth	r3, r3
 800848a:	3b01      	subs	r3, #1
 800848c:	b29b      	uxth	r3, r3
 800848e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008496:	f015 0f07 	tst.w	r5, #7
 800849a:	d0df      	beq.n	800845c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800849c:	f015 0f01 	tst.w	r5, #1
 80084a0:	d009      	beq.n	80084b6 <UART_RxISR_16BIT_FIFOEN+0x92>
 80084a2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80084a6:	d006      	beq.n	80084b6 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084a8:	2201      	movs	r2, #1
 80084aa:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80084b0:	4313      	orrs	r3, r2
 80084b2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084b6:	f015 0f02 	tst.w	r5, #2
 80084ba:	d00b      	beq.n	80084d4 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80084bc:	f018 0f01 	tst.w	r8, #1
 80084c0:	d008      	beq.n	80084d4 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	2202      	movs	r2, #2
 80084c6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80084cc:	f043 0304 	orr.w	r3, r3, #4
 80084d0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084d4:	f015 0f04 	tst.w	r5, #4
 80084d8:	d0bc      	beq.n	8008454 <UART_RxISR_16BIT_FIFOEN+0x30>
 80084da:	f018 0f01 	tst.w	r8, #1
 80084de:	d0b9      	beq.n	8008454 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	2204      	movs	r2, #4
 80084e4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80084ea:	f043 0302 	orr.w	r3, r3, #2
 80084ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80084f2:	e7af      	b.n	8008454 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80084f4:	4620      	mov	r0, r4
 80084f6:	f7ff fda7 	bl	8008048 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8008500:	e7ac      	b.n	800845c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008502:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	e852 3f00 	ldrex	r3, [r2]
 8008508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	e842 3100 	strex	r1, r3, [r2]
 8008510:	2900      	cmp	r1, #0
 8008512:	d1f6      	bne.n	8008502 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008514:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	f102 0308 	add.w	r3, r2, #8
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008522:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	3208      	adds	r2, #8
 8008528:	e842 3100 	strex	r1, r3, [r2]
 800852c:	2900      	cmp	r1, #0
 800852e:	d1f1      	bne.n	8008514 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8008530:	2320      	movs	r3, #32
 8008532:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800853a:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	4a29      	ldr	r2, [pc, #164]	; (80085e4 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d003      	beq.n	800854c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800854a:	d106      	bne.n	800855a <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800854c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800854e:	2b01      	cmp	r3, #1
 8008550:	d00d      	beq.n	800856e <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8008552:	4620      	mov	r0, r4
 8008554:	f7fa fbe2 	bl	8002d1c <HAL_UART_RxCpltCallback>
 8008558:	e785      	b.n	8008466 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800855a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	e852 3f00 	ldrex	r3, [r2]
 8008560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	e842 3100 	strex	r1, r3, [r2]
 8008568:	2900      	cmp	r1, #0
 800856a:	d1f6      	bne.n	800855a <UART_RxISR_16BIT_FIFOEN+0x136>
 800856c:	e7ee      	b.n	800854c <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856e:	2300      	movs	r3, #0
 8008570:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008572:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	e852 3f00 	ldrex	r3, [r2]
 8008578:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	e842 3100 	strex	r1, r3, [r2]
 8008580:	2900      	cmp	r1, #0
 8008582:	d1f6      	bne.n	8008572 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	69da      	ldr	r2, [r3, #28]
 8008588:	f012 0f10 	tst.w	r2, #16
 800858c:	d001      	beq.n	8008592 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800858e:	2210      	movs	r2, #16
 8008590:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008592:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008596:	4620      	mov	r0, r4
 8008598:	f7ff fd83 	bl	80080a2 <HAL_UARTEx_RxEventCallback>
 800859c:	e763      	b.n	8008466 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800859e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80085a2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f43f af4f 	beq.w	8008448 <UART_RxISR_16BIT_FIFOEN+0x24>
 80085aa:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80085ae:	429a      	cmp	r2, r3
 80085b0:	f67f af4a 	bls.w	8008448 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	f102 0308 	add.w	r3, r2, #8
 80085ba:	e853 3f00 	ldrex	r3, [r3]
 80085be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	3208      	adds	r2, #8
 80085c4:	e842 3100 	strex	r1, r3, [r2]
 80085c8:	2900      	cmp	r1, #0
 80085ca:	d1f3      	bne.n	80085b4 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 80085cc:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80085ce:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	e852 3f00 	ldrex	r3, [r2]
 80085d6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	e842 3100 	strex	r1, r3, [r2]
 80085de:	2900      	cmp	r1, #0
 80085e0:	d1f6      	bne.n	80085d0 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 80085e2:	e731      	b.n	8008448 <UART_RxISR_16BIT_FIFOEN+0x24>
 80085e4:	40008000 	.word	0x40008000
 80085e8:	08008181 	.word	0x08008181

080085ec <UART_SetConfig>:
{
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80085f0:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085f2:	6883      	ldr	r3, [r0, #8]
 80085f4:	6902      	ldr	r2, [r0, #16]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	6942      	ldr	r2, [r0, #20]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	69c2      	ldr	r2, [r0, #28]
 80085fe:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008600:	6808      	ldr	r0, [r1, #0]
 8008602:	4a9d      	ldr	r2, [pc, #628]	; (8008878 <UART_SetConfig+0x28c>)
 8008604:	4002      	ands	r2, r0
 8008606:	431a      	orrs	r2, r3
 8008608:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	6853      	ldr	r3, [r2, #4]
 800860e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008612:	68e1      	ldr	r1, [r4, #12]
 8008614:	430b      	orrs	r3, r1
 8008616:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008618:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800861a:	6822      	ldr	r2, [r4, #0]
 800861c:	4b97      	ldr	r3, [pc, #604]	; (800887c <UART_SetConfig+0x290>)
 800861e:	429a      	cmp	r2, r3
 8008620:	d001      	beq.n	8008626 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8008622:	6a23      	ldr	r3, [r4, #32]
 8008624:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008626:	6893      	ldr	r3, [r2, #8]
 8008628:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800862c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008630:	430b      	orrs	r3, r1
 8008632:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008638:	f023 030f 	bic.w	r3, r3, #15
 800863c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800863e:	430b      	orrs	r3, r1
 8008640:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	4a8e      	ldr	r2, [pc, #568]	; (8008880 <UART_SetConfig+0x294>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d01c      	beq.n	8008684 <UART_SetConfig+0x98>
 800864a:	4a8e      	ldr	r2, [pc, #568]	; (8008884 <UART_SetConfig+0x298>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d031      	beq.n	80086b4 <UART_SetConfig+0xc8>
 8008650:	4a8a      	ldr	r2, [pc, #552]	; (800887c <UART_SetConfig+0x290>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d04b      	beq.n	80086ee <UART_SetConfig+0x102>
 8008656:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8008658:	4988      	ldr	r1, [pc, #544]	; (800887c <UART_SetConfig+0x290>)
 800865a:	428b      	cmp	r3, r1
 800865c:	d068      	beq.n	8008730 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800865e:	69e0      	ldr	r0, [r4, #28]
 8008660:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008664:	f000 80a5 	beq.w	80087b2 <UART_SetConfig+0x1c6>
    switch (clocksource)
 8008668:	2a08      	cmp	r2, #8
 800866a:	f200 811f 	bhi.w	80088ac <UART_SetConfig+0x2c0>
 800866e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008672:	00d3      	.short	0x00d3
 8008674:	00d100f5 	.word	0x00d100f5
 8008678:	00f8011d 	.word	0x00f8011d
 800867c:	011d011d 	.word	0x011d011d
 8008680:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008688:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800868c:	f002 0203 	and.w	r2, r2, #3
 8008690:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008694:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8008698:	2a03      	cmp	r2, #3
 800869a:	d809      	bhi.n	80086b0 <UART_SetConfig+0xc4>
 800869c:	e8df f002 	tbb	[pc, r2]
 80086a0:	063c0402 	.word	0x063c0402
 80086a4:	2201      	movs	r2, #1
 80086a6:	e7d7      	b.n	8008658 <UART_SetConfig+0x6c>
 80086a8:	2204      	movs	r2, #4
 80086aa:	e7d5      	b.n	8008658 <UART_SetConfig+0x6c>
 80086ac:	2208      	movs	r2, #8
 80086ae:	e7d3      	b.n	8008658 <UART_SetConfig+0x6c>
 80086b0:	2210      	movs	r2, #16
 80086b2:	e7d1      	b.n	8008658 <UART_SetConfig+0x6c>
 80086b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086b8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80086bc:	f002 020c 	and.w	r2, r2, #12
 80086c0:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80086c4:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 80086c8:	2a0c      	cmp	r2, #12
 80086ca:	d80e      	bhi.n	80086ea <UART_SetConfig+0xfe>
 80086cc:	e8df f002 	tbb	[pc, r2]
 80086d0:	0d0d0d07 	.word	0x0d0d0d07
 80086d4:	0d0d0d09 	.word	0x0d0d0d09
 80086d8:	0d0d0d26 	.word	0x0d0d0d26
 80086dc:	0b          	.byte	0x0b
 80086dd:	00          	.byte	0x00
 80086de:	2200      	movs	r2, #0
 80086e0:	e7ba      	b.n	8008658 <UART_SetConfig+0x6c>
 80086e2:	2204      	movs	r2, #4
 80086e4:	e7b8      	b.n	8008658 <UART_SetConfig+0x6c>
 80086e6:	2208      	movs	r2, #8
 80086e8:	e7b6      	b.n	8008658 <UART_SetConfig+0x6c>
 80086ea:	2210      	movs	r2, #16
 80086ec:	e7b4      	b.n	8008658 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80086ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086f2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80086f6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80086fa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80086fe:	d00f      	beq.n	8008720 <UART_SetConfig+0x134>
 8008700:	d805      	bhi.n	800870e <UART_SetConfig+0x122>
 8008702:	b17a      	cbz	r2, 8008724 <UART_SetConfig+0x138>
 8008704:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008708:	d10e      	bne.n	8008728 <UART_SetConfig+0x13c>
 800870a:	2204      	movs	r2, #4
 800870c:	e7a4      	b.n	8008658 <UART_SetConfig+0x6c>
 800870e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008712:	d10b      	bne.n	800872c <UART_SetConfig+0x140>
 8008714:	2208      	movs	r2, #8
 8008716:	e79f      	b.n	8008658 <UART_SetConfig+0x6c>
 8008718:	2202      	movs	r2, #2
 800871a:	e79d      	b.n	8008658 <UART_SetConfig+0x6c>
 800871c:	2202      	movs	r2, #2
 800871e:	e79b      	b.n	8008658 <UART_SetConfig+0x6c>
 8008720:	2202      	movs	r2, #2
 8008722:	e799      	b.n	8008658 <UART_SetConfig+0x6c>
 8008724:	2200      	movs	r2, #0
 8008726:	e797      	b.n	8008658 <UART_SetConfig+0x6c>
 8008728:	2210      	movs	r2, #16
 800872a:	e795      	b.n	8008658 <UART_SetConfig+0x6c>
 800872c:	2210      	movs	r2, #16
 800872e:	e793      	b.n	8008658 <UART_SetConfig+0x6c>
    switch (clocksource)
 8008730:	2a08      	cmp	r2, #8
 8008732:	f200 809c 	bhi.w	800886e <UART_SetConfig+0x282>
 8008736:	e8df f002 	tbb	[pc, r2]
 800873a:	9a08      	.short	0x9a08
 800873c:	9a379a3a 	.word	0x9a379a3a
 8008740:	9a9a      	.short	0x9a9a
 8008742:	05          	.byte	0x05
 8008743:	00          	.byte	0x00
 8008744:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008748:	e004      	b.n	8008754 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800874a:	f7fd ffa1 	bl	8006690 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800874e:	2800      	cmp	r0, #0
 8008750:	f000 808f 	beq.w	8008872 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008754:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008756:	4b4c      	ldr	r3, [pc, #304]	; (8008888 <UART_SetConfig+0x29c>)
 8008758:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800875c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008760:	6865      	ldr	r5, [r4, #4]
 8008762:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008766:	4299      	cmp	r1, r3
 8008768:	f200 8094 	bhi.w	8008894 <UART_SetConfig+0x2a8>
 800876c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8008770:	f200 8092 	bhi.w	8008898 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008774:	2600      	movs	r6, #0
 8008776:	4633      	mov	r3, r6
 8008778:	4631      	mov	r1, r6
 800877a:	f7f8 fce1 	bl	8001140 <__aeabi_uldivmod>
 800877e:	0209      	lsls	r1, r1, #8
 8008780:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008784:	0200      	lsls	r0, r0, #8
 8008786:	086b      	lsrs	r3, r5, #1
 8008788:	18c0      	adds	r0, r0, r3
 800878a:	462a      	mov	r2, r5
 800878c:	4633      	mov	r3, r6
 800878e:	f141 0100 	adc.w	r1, r1, #0
 8008792:	f7f8 fcd5 	bl	8001140 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008796:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800879a:	4b3c      	ldr	r3, [pc, #240]	; (800888c <UART_SetConfig+0x2a0>)
 800879c:	429a      	cmp	r2, r3
 800879e:	d87d      	bhi.n	800889c <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	60d8      	str	r0, [r3, #12]
 80087a4:	4630      	mov	r0, r6
 80087a6:	e050      	b.n	800884a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 80087a8:	f7fd fa74 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
        break;
 80087ac:	e7cf      	b.n	800874e <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 80087ae:	4838      	ldr	r0, [pc, #224]	; (8008890 <UART_SetConfig+0x2a4>)
 80087b0:	e7d0      	b.n	8008754 <UART_SetConfig+0x168>
    switch (clocksource)
 80087b2:	2a08      	cmp	r2, #8
 80087b4:	d874      	bhi.n	80088a0 <UART_SetConfig+0x2b4>
 80087b6:	e8df f002 	tbb	[pc, r2]
 80087ba:	2707      	.short	0x2707
 80087bc:	732a7305 	.word	0x732a7305
 80087c0:	7373      	.short	0x7373
 80087c2:	0b          	.byte	0x0b
 80087c3:	00          	.byte	0x00
 80087c4:	4832      	ldr	r0, [pc, #200]	; (8008890 <UART_SetConfig+0x2a4>)
 80087c6:	e003      	b.n	80087d0 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80087c8:	f7fd ff62 	bl	8006690 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d069      	beq.n	80088a4 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80087d2:	4b2d      	ldr	r3, [pc, #180]	; (8008888 <UART_SetConfig+0x29c>)
 80087d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80087d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80087dc:	6862      	ldr	r2, [r4, #4]
 80087de:	0853      	lsrs	r3, r2, #1
 80087e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80087e4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e8:	f1a3 0110 	sub.w	r1, r3, #16
 80087ec:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80087f0:	4291      	cmp	r1, r2
 80087f2:	d859      	bhi.n	80088a8 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087fa:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80087fe:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8008800:	6822      	ldr	r2, [r4, #0]
 8008802:	60d3      	str	r3, [r2, #12]
 8008804:	2000      	movs	r0, #0
 8008806:	e020      	b.n	800884a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008808:	f7fd ff52 	bl	80066b0 <HAL_RCC_GetPCLK2Freq>
        break;
 800880c:	e7de      	b.n	80087cc <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800880e:	f7fd fa41 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
        break;
 8008812:	e7db      	b.n	80087cc <UART_SetConfig+0x1e0>
    switch (clocksource)
 8008814:	481e      	ldr	r0, [pc, #120]	; (8008890 <UART_SetConfig+0x2a4>)
 8008816:	e003      	b.n	8008820 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008818:	f7fd ff3a 	bl	8006690 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800881c:	2800      	cmp	r0, #0
 800881e:	d047      	beq.n	80088b0 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008820:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008822:	4b19      	ldr	r3, [pc, #100]	; (8008888 <UART_SetConfig+0x29c>)
 8008824:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008828:	fbb0 f0f3 	udiv	r0, r0, r3
 800882c:	6863      	ldr	r3, [r4, #4]
 800882e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008832:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008836:	f1a0 0210 	sub.w	r2, r0, #16
 800883a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800883e:	429a      	cmp	r2, r3
 8008840:	d838      	bhi.n	80088b4 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	b280      	uxth	r0, r0
 8008846:	60d8      	str	r0, [r3, #12]
 8008848:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800884a:	2301      	movs	r3, #1
 800884c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008850:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8008854:	2300      	movs	r3, #0
 8008856:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8008858:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800885a:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800885c:	f7fd ff28 	bl	80066b0 <HAL_RCC_GetPCLK2Freq>
        break;
 8008860:	e7dc      	b.n	800881c <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8008862:	f7fd fa17 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
        break;
 8008866:	e7d9      	b.n	800881c <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8008868:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800886c:	e7d8      	b.n	8008820 <UART_SetConfig+0x234>
    switch (clocksource)
 800886e:	2001      	movs	r0, #1
 8008870:	e7eb      	b.n	800884a <UART_SetConfig+0x25e>
 8008872:	2000      	movs	r0, #0
 8008874:	e7e9      	b.n	800884a <UART_SetConfig+0x25e>
 8008876:	bf00      	nop
 8008878:	cfff69f3 	.word	0xcfff69f3
 800887c:	40008000 	.word	0x40008000
 8008880:	40013800 	.word	0x40013800
 8008884:	40004400 	.word	0x40004400
 8008888:	0801a6a4 	.word	0x0801a6a4
 800888c:	000ffcff 	.word	0x000ffcff
 8008890:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8008894:	2001      	movs	r0, #1
 8008896:	e7d8      	b.n	800884a <UART_SetConfig+0x25e>
 8008898:	2001      	movs	r0, #1
 800889a:	e7d6      	b.n	800884a <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 800889c:	2001      	movs	r0, #1
 800889e:	e7d4      	b.n	800884a <UART_SetConfig+0x25e>
    switch (clocksource)
 80088a0:	2001      	movs	r0, #1
 80088a2:	e7d2      	b.n	800884a <UART_SetConfig+0x25e>
 80088a4:	2000      	movs	r0, #0
 80088a6:	e7d0      	b.n	800884a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80088a8:	2001      	movs	r0, #1
 80088aa:	e7ce      	b.n	800884a <UART_SetConfig+0x25e>
    switch (clocksource)
 80088ac:	2001      	movs	r0, #1
 80088ae:	e7cc      	b.n	800884a <UART_SetConfig+0x25e>
 80088b0:	2000      	movs	r0, #0
 80088b2:	e7ca      	b.n	800884a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80088b4:	2001      	movs	r0, #1
 80088b6:	e7c8      	b.n	800884a <UART_SetConfig+0x25e>

080088b8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80088ba:	f013 0f01 	tst.w	r3, #1
 80088be:	d006      	beq.n	80088ce <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088c0:	6802      	ldr	r2, [r0, #0]
 80088c2:	6853      	ldr	r3, [r2, #4]
 80088c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80088ca:	430b      	orrs	r3, r1
 80088cc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80088d0:	f013 0f02 	tst.w	r3, #2
 80088d4:	d006      	beq.n	80088e4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088d6:	6802      	ldr	r2, [r0, #0]
 80088d8:	6853      	ldr	r3, [r2, #4]
 80088da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088de:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80088e0:	430b      	orrs	r3, r1
 80088e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80088e6:	f013 0f04 	tst.w	r3, #4
 80088ea:	d006      	beq.n	80088fa <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088ec:	6802      	ldr	r2, [r0, #0]
 80088ee:	6853      	ldr	r3, [r2, #4]
 80088f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088f4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80088f6:	430b      	orrs	r3, r1
 80088f8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80088fc:	f013 0f08 	tst.w	r3, #8
 8008900:	d006      	beq.n	8008910 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008902:	6802      	ldr	r2, [r0, #0]
 8008904:	6853      	ldr	r3, [r2, #4]
 8008906:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800890a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800890c:	430b      	orrs	r3, r1
 800890e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008910:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008912:	f013 0f10 	tst.w	r3, #16
 8008916:	d006      	beq.n	8008926 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008918:	6802      	ldr	r2, [r0, #0]
 800891a:	6893      	ldr	r3, [r2, #8]
 800891c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008920:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008922:	430b      	orrs	r3, r1
 8008924:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008926:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008928:	f013 0f20 	tst.w	r3, #32
 800892c:	d006      	beq.n	800893c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800892e:	6802      	ldr	r2, [r0, #0]
 8008930:	6893      	ldr	r3, [r2, #8]
 8008932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008936:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008938:	430b      	orrs	r3, r1
 800893a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800893c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800893e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008942:	d00a      	beq.n	800895a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008944:	6802      	ldr	r2, [r0, #0]
 8008946:	6853      	ldr	r3, [r2, #4]
 8008948:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800894c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800894e:	430b      	orrs	r3, r1
 8008950:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008952:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008958:	d00b      	beq.n	8008972 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800895a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800895c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008960:	d006      	beq.n	8008970 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008962:	6802      	ldr	r2, [r0, #0]
 8008964:	6853      	ldr	r3, [r2, #4]
 8008966:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800896a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800896c:	430b      	orrs	r3, r1
 800896e:	6053      	str	r3, [r2, #4]
}
 8008970:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008972:	6802      	ldr	r2, [r0, #0]
 8008974:	6853      	ldr	r3, [r2, #4]
 8008976:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800897a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800897c:	430b      	orrs	r3, r1
 800897e:	6053      	str	r3, [r2, #4]
 8008980:	e7eb      	b.n	800895a <UART_AdvFeatureConfig+0xa2>

08008982 <UART_WaitOnFlagUntilTimeout>:
{
 8008982:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008986:	4605      	mov	r5, r0
 8008988:	460f      	mov	r7, r1
 800898a:	4616      	mov	r6, r2
 800898c:	4699      	mov	r9, r3
 800898e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	69dc      	ldr	r4, [r3, #28]
 8008996:	ea37 0404 	bics.w	r4, r7, r4
 800899a:	bf0c      	ite	eq
 800899c:	2401      	moveq	r4, #1
 800899e:	2400      	movne	r4, #0
 80089a0:	42b4      	cmp	r4, r6
 80089a2:	d157      	bne.n	8008a54 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 80089a4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80089a8:	d0f3      	beq.n	8008992 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089aa:	f7f9 fe03 	bl	80025b4 <HAL_GetTick>
 80089ae:	eba0 0009 	sub.w	r0, r0, r9
 80089b2:	4540      	cmp	r0, r8
 80089b4:	d82f      	bhi.n	8008a16 <UART_WaitOnFlagUntilTimeout+0x94>
 80089b6:	f1b8 0f00 	cmp.w	r8, #0
 80089ba:	d02c      	beq.n	8008a16 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	f012 0f04 	tst.w	r2, #4
 80089c4:	d0e5      	beq.n	8008992 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089c6:	69da      	ldr	r2, [r3, #28]
 80089c8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80089cc:	d0e1      	beq.n	8008992 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089d2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089d4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	e852 3f00 	ldrex	r3, [r2]
 80089da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	e842 3100 	strex	r1, r3, [r2]
 80089e2:	2900      	cmp	r1, #0
 80089e4:	d1f6      	bne.n	80089d4 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e8:	f102 0308 	add.w	r3, r2, #8
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	3208      	adds	r2, #8
 80089f6:	e842 3100 	strex	r1, r3, [r2]
 80089fa:	2900      	cmp	r1, #0
 80089fc:	d1f3      	bne.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 80089fe:	2320      	movs	r3, #32
 8008a00:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008a04:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a08:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 8008a12:	2003      	movs	r0, #3
 8008a14:	e01f      	b.n	8008a56 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a16:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	e852 3f00 	ldrex	r3, [r2]
 8008a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	e842 3100 	strex	r1, r3, [r2]
 8008a24:	2900      	cmp	r1, #0
 8008a26:	d1f6      	bne.n	8008a16 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a28:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	f102 0308 	add.w	r3, r2, #8
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	3208      	adds	r2, #8
 8008a38:	e842 3100 	strex	r1, r3, [r2]
 8008a3c:	2900      	cmp	r1, #0
 8008a3e:	d1f3      	bne.n	8008a28 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8008a40:	2320      	movs	r3, #32
 8008a42:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008a46:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 8008a50:	2003      	movs	r0, #3
 8008a52:	e000      	b.n	8008a56 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8008a54:	2000      	movs	r0, #0
}
 8008a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008a5a <UART_CheckIdleState>:
{
 8008a5a:	b530      	push	{r4, r5, lr}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a60:	2300      	movs	r3, #0
 8008a62:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8008a66:	f7f9 fda5 	bl	80025b4 <HAL_GetTick>
 8008a6a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	6812      	ldr	r2, [r2, #0]
 8008a70:	f012 0f08 	tst.w	r2, #8
 8008a74:	d110      	bne.n	8008a98 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f013 0f04 	tst.w	r3, #4
 8008a7e:	d119      	bne.n	8008ab4 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8008a80:	2320      	movs	r3, #32
 8008a82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a86:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a8e:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8008a90:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008a94:	b003      	add	sp, #12
 8008a96:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff ff6b 	bl	8008982 <UART_WaitOnFlagUntilTimeout>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d0e2      	beq.n	8008a76 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008ab0:	2003      	movs	r0, #3
 8008ab2:	e7ef      	b.n	8008a94 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	462b      	mov	r3, r5
 8008abc:	2200      	movs	r2, #0
 8008abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f7ff ff5d 	bl	8008982 <UART_WaitOnFlagUntilTimeout>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d0d9      	beq.n	8008a80 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008acc:	2003      	movs	r0, #3
 8008ace:	e7e1      	b.n	8008a94 <UART_CheckIdleState+0x3a>

08008ad0 <HAL_UART_Init>:
  if (huart == NULL)
 8008ad0:	b378      	cbz	r0, 8008b32 <HAL_UART_Init+0x62>
{
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008ad6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008ada:	b30b      	cbz	r3, 8008b20 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008adc:	2324      	movs	r3, #36	; 0x24
 8008ade:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	6813      	ldr	r3, [r2, #0]
 8008ae6:	f023 0301 	bic.w	r3, r3, #1
 8008aea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008aec:	4620      	mov	r0, r4
 8008aee:	f7ff fd7d 	bl	80085ec <UART_SetConfig>
 8008af2:	2801      	cmp	r0, #1
 8008af4:	d013      	beq.n	8008b1e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008af6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008af8:	b9bb      	cbnz	r3, 8008b2a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008afa:	6822      	ldr	r2, [r4, #0]
 8008afc:	6853      	ldr	r3, [r2, #4]
 8008afe:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008b02:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b04:	6822      	ldr	r2, [r4, #0]
 8008b06:	6893      	ldr	r3, [r2, #8]
 8008b08:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008b0c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008b0e:	6822      	ldr	r2, [r4, #0]
 8008b10:	6813      	ldr	r3, [r2, #0]
 8008b12:	f043 0301 	orr.w	r3, r3, #1
 8008b16:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f7ff ff9e 	bl	8008a5a <UART_CheckIdleState>
}
 8008b1e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008b20:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8008b24:	f7f9 ff8c 	bl	8002a40 <HAL_UART_MspInit>
 8008b28:	e7d8      	b.n	8008adc <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f7ff fec4 	bl	80088b8 <UART_AdvFeatureConfig>
 8008b30:	e7e3      	b.n	8008afa <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008b32:	2001      	movs	r0, #1
}
 8008b34:	4770      	bx	lr
	...

08008b38 <UART_Start_Receive_IT>:
{
 8008b38:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8008b3a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008b3c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008b40:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8008b48:	6883      	ldr	r3, [r0, #8]
 8008b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b4e:	d006      	beq.n	8008b5e <UART_Start_Receive_IT+0x26>
 8008b50:	b9a3      	cbnz	r3, 8008b7c <UART_Start_Receive_IT+0x44>
 8008b52:	6903      	ldr	r3, [r0, #16]
 8008b54:	b973      	cbnz	r3, 8008b74 <UART_Start_Receive_IT+0x3c>
 8008b56:	23ff      	movs	r3, #255	; 0xff
 8008b58:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008b5c:	e014      	b.n	8008b88 <UART_Start_Receive_IT+0x50>
 8008b5e:	6903      	ldr	r3, [r0, #16]
 8008b60:	b923      	cbnz	r3, 8008b6c <UART_Start_Receive_IT+0x34>
 8008b62:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008b66:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008b6a:	e00d      	b.n	8008b88 <UART_Start_Receive_IT+0x50>
 8008b6c:	23ff      	movs	r3, #255	; 0xff
 8008b6e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008b72:	e009      	b.n	8008b88 <UART_Start_Receive_IT+0x50>
 8008b74:	237f      	movs	r3, #127	; 0x7f
 8008b76:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008b7a:	e005      	b.n	8008b88 <UART_Start_Receive_IT+0x50>
 8008b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b80:	d02d      	beq.n	8008bde <UART_Start_Receive_IT+0xa6>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b8e:	2322      	movs	r3, #34	; 0x22
 8008b90:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b94:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	f101 0308 	add.w	r3, r1, #8
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	3108      	adds	r1, #8
 8008ba4:	e841 3400 	strex	r4, r3, [r1]
 8008ba8:	2c00      	cmp	r4, #0
 8008baa:	d1f3      	bne.n	8008b94 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008bac:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb2:	d01e      	beq.n	8008bf2 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bb4:	6883      	ldr	r3, [r0, #8]
 8008bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bba:	d042      	beq.n	8008c42 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8008bbc:	4b29      	ldr	r3, [pc, #164]	; (8008c64 <UART_Start_Receive_IT+0x12c>)
 8008bbe:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bc0:	6903      	ldr	r3, [r0, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d043      	beq.n	8008c4e <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008bc6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	e852 3f00 	ldrex	r3, [r2]
 8008bcc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	e842 3100 	strex	r1, r3, [r2]
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d1f6      	bne.n	8008bc6 <UART_Start_Receive_IT+0x8e>
}
 8008bd8:	2000      	movs	r0, #0
 8008bda:	bc10      	pop	{r4}
 8008bdc:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008bde:	6903      	ldr	r3, [r0, #16]
 8008be0:	b91b      	cbnz	r3, 8008bea <UART_Start_Receive_IT+0xb2>
 8008be2:	237f      	movs	r3, #127	; 0x7f
 8008be4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008be8:	e7ce      	b.n	8008b88 <UART_Start_Receive_IT+0x50>
 8008bea:	233f      	movs	r3, #63	; 0x3f
 8008bec:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008bf0:	e7ca      	b.n	8008b88 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008bf2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d8dc      	bhi.n	8008bb4 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bfa:	6883      	ldr	r3, [r0, #8]
 8008bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c00:	d019      	beq.n	8008c36 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c02:	4b19      	ldr	r3, [pc, #100]	; (8008c68 <UART_Start_Receive_IT+0x130>)
 8008c04:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c06:	6903      	ldr	r3, [r0, #16]
 8008c08:	b143      	cbz	r3, 8008c1c <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c0a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	e852 3f00 	ldrex	r3, [r2]
 8008c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	e842 3100 	strex	r1, r3, [r2]
 8008c18:	2900      	cmp	r1, #0
 8008c1a:	d1f6      	bne.n	8008c0a <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c1c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	f102 0308 	add.w	r3, r2, #8
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	3208      	adds	r2, #8
 8008c2c:	e842 3100 	strex	r1, r3, [r2]
 8008c30:	2900      	cmp	r1, #0
 8008c32:	d1f3      	bne.n	8008c1c <UART_Start_Receive_IT+0xe4>
 8008c34:	e7d0      	b.n	8008bd8 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c36:	6903      	ldr	r3, [r0, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e2      	bne.n	8008c02 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008c3c:	4b0b      	ldr	r3, [pc, #44]	; (8008c6c <UART_Start_Receive_IT+0x134>)
 8008c3e:	6743      	str	r3, [r0, #116]	; 0x74
 8008c40:	e7e1      	b.n	8008c06 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c42:	6903      	ldr	r3, [r0, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1b9      	bne.n	8008bbc <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008c48:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <UART_Start_Receive_IT+0x138>)
 8008c4a:	6743      	str	r3, [r0, #116]	; 0x74
 8008c4c:	e7b8      	b.n	8008bc0 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	e852 3f00 	ldrex	r3, [r2]
 8008c54:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	e842 3100 	strex	r1, r3, [r2]
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	d1f6      	bne.n	8008c4e <UART_Start_Receive_IT+0x116>
 8008c60:	e7ba      	b.n	8008bd8 <UART_Start_Receive_IT+0xa0>
 8008c62:	bf00      	nop
 8008c64:	080080a5 	.word	0x080080a5
 8008c68:	08008259 	.word	0x08008259
 8008c6c:	08008425 	.word	0x08008425
 8008c70:	08008181 	.word	0x08008181

08008c74 <HAL_UART_Receive_IT>:
{
 8008c74:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c76:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	d117      	bne.n	8008cae <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8008c7e:	b1c1      	cbz	r1, 8008cb2 <HAL_UART_Receive_IT+0x3e>
 8008c80:	b1ca      	cbz	r2, 8008cb6 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c82:	2300      	movs	r3, #0
 8008c84:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c86:	6803      	ldr	r3, [r0, #0]
 8008c88:	4c0c      	ldr	r4, [pc, #48]	; (8008cbc <HAL_UART_Receive_IT+0x48>)
 8008c8a:	42a3      	cmp	r3, r4
 8008c8c:	d00c      	beq.n	8008ca8 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008c94:	d008      	beq.n	8008ca8 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c96:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	e854 3f00 	ldrex	r3, [r4]
 8008c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca0:	e844 3500 	strex	r5, r3, [r4]
 8008ca4:	2d00      	cmp	r5, #0
 8008ca6:	d1f6      	bne.n	8008c96 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ca8:	f7ff ff46 	bl	8008b38 <UART_Start_Receive_IT>
 8008cac:	e000      	b.n	8008cb0 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8008cae:	2002      	movs	r0, #2
}
 8008cb0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e7fc      	b.n	8008cb0 <HAL_UART_Receive_IT+0x3c>
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	e7fa      	b.n	8008cb0 <HAL_UART_Receive_IT+0x3c>
 8008cba:	bf00      	nop
 8008cbc:	40008000 	.word	0x40008000

08008cc0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	ab02      	add	r3, sp, #8
 8008cc4:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008cc8:	6802      	ldr	r2, [r0, #0]
 8008cca:	6853      	ldr	r3, [r2, #4]
 8008ccc:	f023 0310 	bic.w	r3, r3, #16
 8008cd0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008cd8:	6802      	ldr	r2, [r0, #0]
 8008cda:	6853      	ldr	r3, [r2, #4]
 8008cdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008ce0:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008ce4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008ce8:	6053      	str	r3, [r2, #4]
}
 8008cea:	b002      	add	sp, #8
 8008cec:	4770      	bx	lr
	...

08008cf0 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cf0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008cf2:	b92b      	cbnz	r3, 8008d00 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cfa:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008cfe:	4770      	bx	lr
{
 8008d00:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d02:	6803      	ldr	r3, [r0, #0]
 8008d04:	689a      	ldr	r2, [r3, #8]
 8008d06:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d0a:	6899      	ldr	r1, [r3, #8]
 8008d0c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d0e:	4d09      	ldr	r5, [pc, #36]	; (8008d34 <UARTEx_SetNbDataToProcess+0x44>)
 8008d10:	5c6b      	ldrb	r3, [r5, r1]
 8008d12:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d14:	4c08      	ldr	r4, [pc, #32]	; (8008d38 <UARTEx_SetNbDataToProcess+0x48>)
 8008d16:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d18:	fb93 f3f1 	sdiv	r3, r3, r1
 8008d1c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d20:	5cab      	ldrb	r3, [r5, r2]
 8008d22:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d24:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d2a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8008d2e:	bc30      	pop	{r4, r5}
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	0801a6c4 	.word	0x0801a6c4
 8008d38:	0801a6bc 	.word	0x0801a6bc

08008d3c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	ab04      	add	r3, sp, #16
 8008d42:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008d46:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d035      	beq.n	8008dba <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8008d4e:	4604      	mov	r4, r0
 8008d50:	2301      	movs	r3, #1
 8008d52:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008d56:	2324      	movs	r3, #36	; 0x24
 8008d58:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8008d5c:	6802      	ldr	r2, [r0, #0]
 8008d5e:	6813      	ldr	r3, [r2, #0]
 8008d60:	f023 0301 	bic.w	r3, r3, #1
 8008d64:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008d66:	6801      	ldr	r1, [r0, #0]
 8008d68:	688b      	ldr	r3, [r1, #8]
 8008d6a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008d6e:	9a02      	ldr	r2, [sp, #8]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008d74:	b1aa      	cbz	r2, 8008da2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8008d76:	6822      	ldr	r2, [r4, #0]
 8008d78:	6813      	ldr	r3, [r2, #0]
 8008d7a:	f043 0301 	orr.w	r3, r3, #1
 8008d7e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8008d80:	f7f9 fc18 	bl	80025b4 <HAL_GetTick>
 8008d84:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d86:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008d8a:	9200      	str	r2, [sp, #0]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d92:	4620      	mov	r0, r4
 8008d94:	f7ff fdf5 	bl	8008982 <UART_WaitOnFlagUntilTimeout>
 8008d98:	b948      	cbnz	r0, 8008dae <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8008d9a:	2320      	movs	r3, #32
 8008d9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008da0:	e006      	b.n	8008db0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008da2:	ab04      	add	r3, sp, #16
 8008da4:	e913 0006 	ldmdb	r3, {r1, r2}
 8008da8:	f7ff ff8a 	bl	8008cc0 <UARTEx_Wakeup_AddressConfig>
 8008dac:	e7e3      	b.n	8008d76 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008dae:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008db0:	2300      	movs	r3, #0
 8008db2:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8008db6:	b004      	add	sp, #16
 8008db8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008dba:	2002      	movs	r0, #2
 8008dbc:	e7fb      	b.n	8008db6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08008dbe <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008dbe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d010      	beq.n	8008de8 <HAL_UARTEx_EnableStopMode+0x2a>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008dcc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	e852 3f00 	ldrex	r3, [r2]
 8008dd2:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	e842 3100 	strex	r1, r3, [r2]
 8008dda:	2900      	cmp	r1, #0
 8008ddc:	d1f6      	bne.n	8008dcc <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008dde:	2300      	movs	r3, #0
 8008de0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8008de4:	4618      	mov	r0, r3
 8008de6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008de8:	2002      	movs	r0, #2
}
 8008dea:	4770      	bx	lr

08008dec <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8008dec:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d018      	beq.n	8008e26 <HAL_UARTEx_DisableFifoMode+0x3a>
 8008df4:	2301      	movs	r3, #1
 8008df6:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008dfa:	2324      	movs	r3, #36	; 0x24
 8008dfc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e00:	6803      	ldr	r3, [r0, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008e04:	6819      	ldr	r1, [r3, #0]
 8008e06:	f021 0101 	bic.w	r1, r1, #1
 8008e0a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e0c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e14:	6801      	ldr	r1, [r0, #0]
 8008e16:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8008e1e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8008e22:	4618      	mov	r0, r3
 8008e24:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008e26:	2002      	movs	r0, #2
}
 8008e28:	4770      	bx	lr

08008e2a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008e2a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008e2c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d01d      	beq.n	8008e70 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008e34:	4604      	mov	r4, r0
 8008e36:	2301      	movs	r3, #1
 8008e38:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008e3c:	2324      	movs	r3, #36	; 0x24
 8008e3e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e42:	6803      	ldr	r3, [r0, #0]
 8008e44:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	f022 0201 	bic.w	r2, r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e4e:	6802      	ldr	r2, [r0, #0]
 8008e50:	6893      	ldr	r3, [r2, #8]
 8008e52:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008e56:	4319      	orrs	r1, r3
 8008e58:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008e5a:	f7ff ff49 	bl	8008cf0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008e62:	2320      	movs	r3, #32
 8008e64:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008e70:	2002      	movs	r0, #2
 8008e72:	e7fc      	b.n	8008e6e <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008e74 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008e74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008e76:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d01d      	beq.n	8008eba <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	2301      	movs	r3, #1
 8008e82:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008e86:	2324      	movs	r3, #36	; 0x24
 8008e88:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e8c:	6803      	ldr	r3, [r0, #0]
 8008e8e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	f022 0201 	bic.w	r2, r2, #1
 8008e96:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e98:	6802      	ldr	r2, [r0, #0]
 8008e9a:	6893      	ldr	r3, [r2, #8]
 8008e9c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008ea0:	4319      	orrs	r1, r3
 8008ea2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008ea4:	f7ff ff24 	bl	8008cf0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008eac:	2320      	movs	r3, #32
 8008eae:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008eb8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008eba:	2002      	movs	r0, #2
 8008ebc:	e7fc      	b.n	8008eb8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008ec0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008ec0:	4b13      	ldr	r3, [pc, #76]	; (8008f10 <FATFS_LinkDriverEx+0x50>)
 8008ec2:	7a5b      	ldrb	r3, [r3, #9]
 8008ec4:	bb13      	cbnz	r3, 8008f0c <FATFS_LinkDriverEx+0x4c>
{
 8008ec6:	b510      	push	{r4, lr}
 8008ec8:	4604      	mov	r4, r0
 8008eca:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8008ece:	4b10      	ldr	r3, [pc, #64]	; (8008f10 <FATFS_LinkDriverEx+0x50>)
 8008ed0:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008ed4:	fa5f fc8c 	uxtb.w	ip, ip
 8008ed8:	f04f 0e00 	mov.w	lr, #0
 8008edc:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8008ee0:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008ee4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8008ee8:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8008eec:	7a5c      	ldrb	r4, [r3, #9]
 8008eee:	441c      	add	r4, r3
 8008ef0:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008ef2:	7a5a      	ldrb	r2, [r3, #9]
 8008ef4:	1c54      	adds	r4, r2, #1
 8008ef6:	b2e4      	uxtb	r4, r4
 8008ef8:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008efa:	3230      	adds	r2, #48	; 0x30
 8008efc:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008efe:	233a      	movs	r3, #58	; 0x3a
 8008f00:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008f02:	232f      	movs	r3, #47	; 0x2f
 8008f04:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008f06:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8008f0a:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8008f0c:	2001      	movs	r0, #1
}
 8008f0e:	4770      	bx	lr
 8008f10:	2000090c 	.word	0x2000090c

08008f14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008f14:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f16:	2200      	movs	r2, #0
 8008f18:	f7ff ffd2 	bl	8008ec0 <FATFS_LinkDriverEx>
}
 8008f1c:	bd08      	pop	{r3, pc}
	...

08008f20 <SetRow>:
 * Fragmentation decoder algorithm utilities
 *=============================================================================
 */

static void SetRow( uint8_t *src, uint16_t row, uint16_t size )
{
 8008f20:	460b      	mov	r3, r1
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderWrite != NULL ) )
 8008f22:	4906      	ldr	r1, [pc, #24]	; (8008f3c <SetRow+0x1c>)
 8008f24:	6809      	ldr	r1, [r1, #0]
 8008f26:	b139      	cbz	r1, 8008f38 <SetRow+0x18>
{
 8008f28:	b510      	push	{r4, lr}
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderWrite != NULL ) )
 8008f2a:	684c      	ldr	r4, [r1, #4]
 8008f2c:	b11c      	cbz	r4, 8008f36 <SetRow+0x16>
    {
        FragDecoder.Callbacks->FragDecoderWrite( row * size, src, size );
 8008f2e:	4601      	mov	r1, r0
 8008f30:	fb02 f003 	mul.w	r0, r2, r3
 8008f34:	47a0      	blx	r4
    }
}
 8008f36:	bd10      	pop	{r4, pc}
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000918 	.word	0x20000918

08008f40 <GetRow>:

static void GetRow( uint8_t *dst, uint16_t row, uint16_t size )
{
 8008f40:	460b      	mov	r3, r1
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderRead != NULL ) )
 8008f42:	4906      	ldr	r1, [pc, #24]	; (8008f5c <GetRow+0x1c>)
 8008f44:	6809      	ldr	r1, [r1, #0]
 8008f46:	b139      	cbz	r1, 8008f58 <GetRow+0x18>
{
 8008f48:	b510      	push	{r4, lr}
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderRead != NULL ) )
 8008f4a:	688c      	ldr	r4, [r1, #8]
 8008f4c:	b11c      	cbz	r4, 8008f56 <GetRow+0x16>
    {
        FragDecoder.Callbacks->FragDecoderRead( row * size, dst, size );
 8008f4e:	4601      	mov	r1, r0
 8008f50:	fb02 f003 	mul.w	r0, r2, r3
 8008f54:	47a0      	blx	r4
    }
}
 8008f56:	bd10      	pop	{r4, pc}
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20000918 	.word	0x20000918

08008f60 <GetParity>:

static uint8_t GetParity( uint16_t index, uint8_t *matrixRow )
{
    uint8_t parity;
    parity = matrixRow[index >> 3];
 8008f60:	08c3      	lsrs	r3, r0, #3
 8008f62:	5ccb      	ldrb	r3, [r1, r3]
    parity = ( parity >> ( 7 - ( index % 8 ) ) ) & 0x01;
 8008f64:	43c0      	mvns	r0, r0
 8008f66:	f000 0007 	and.w	r0, r0, #7
 8008f6a:	fa43 f000 	asr.w	r0, r3, r0
    return parity;
}
 8008f6e:	f000 0001 	and.w	r0, r0, #1
 8008f72:	4770      	bx	lr

08008f74 <SetParity>:

static void SetParity( uint16_t index, uint8_t *matrixRow, uint8_t parity )
{
    uint8_t mask = 0xFF - ( 1 << ( 7 - ( index % 8 ) ) );
 8008f74:	ea6f 0c00 	mvn.w	ip, r0
 8008f78:	f00c 0c07 	and.w	ip, ip, #7
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	fa03 f30c 	lsl.w	r3, r3, ip
 8008f82:	b2db      	uxtb	r3, r3
    parity = parity << ( 7 - ( index % 8 ) );
 8008f84:	fa02 f20c 	lsl.w	r2, r2, ip
    matrixRow[index >> 3] = ( matrixRow[index >> 3] & mask ) + parity;
 8008f88:	08c0      	lsrs	r0, r0, #3
 8008f8a:	f811 c000 	ldrb.w	ip, [r1, r0]
 8008f8e:	ea2c 0303 	bic.w	r3, ip, r3
 8008f92:	fa53 f282 	uxtab	r2, r3, r2
 8008f96:	540a      	strb	r2, [r1, r0]
}
 8008f98:	4770      	bx	lr

08008f9a <IsPowerOfTwo>:

static bool IsPowerOfTwo( uint32_t x )
{
    uint8_t sumBit = 0;

    for( uint8_t i = 0; i < 32; i++ )
 8008f9a:	2200      	movs	r2, #0
    uint8_t sumBit = 0;
 8008f9c:	4611      	mov	r1, r2
    for( uint8_t i = 0; i < 32; i++ )
 8008f9e:	e007      	b.n	8008fb0 <IsPowerOfTwo+0x16>
    {
        sumBit += ( x & ( 1 << i ) ) >> i;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	4093      	lsls	r3, r2
 8008fa4:	4003      	ands	r3, r0
 8008fa6:	40d3      	lsrs	r3, r2
 8008fa8:	4419      	add	r1, r3
 8008faa:	b2c9      	uxtb	r1, r1
    for( uint8_t i = 0; i < 32; i++ )
 8008fac:	3201      	adds	r2, #1
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	2a1f      	cmp	r2, #31
 8008fb2:	d9f5      	bls.n	8008fa0 <IsPowerOfTwo+0x6>
    }
    if( sumBit == 1 )
 8008fb4:	2901      	cmp	r1, #1
 8008fb6:	d001      	beq.n	8008fbc <IsPowerOfTwo+0x22>
    {
        return true;
    }
    return false;
 8008fb8:	2000      	movs	r0, #0
 8008fba:	4770      	bx	lr
        return true;
 8008fbc:	2001      	movs	r0, #1
}
 8008fbe:	4770      	bx	lr

08008fc0 <XorDataLine>:

static void XorDataLine( uint8_t *line1, uint8_t *line2, int32_t size )
{
    for( int32_t i = 0; i < size; i++ )
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	da0d      	bge.n	8008fe2 <XorDataLine+0x22>
{
 8008fc6:	b500      	push	{lr}
    {
        line1[i] = line1[i] ^ line2[i];
 8008fc8:	f810 c003 	ldrb.w	ip, [r0, r3]
 8008fcc:	f811 e003 	ldrb.w	lr, [r1, r3]
 8008fd0:	ea8c 0c0e 	eor.w	ip, ip, lr
 8008fd4:	f800 c003 	strb.w	ip, [r0, r3]
    for( int32_t i = 0; i < size; i++ )
 8008fd8:	3301      	adds	r3, #1
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	dbf4      	blt.n	8008fc8 <XorDataLine+0x8>
    }
}
 8008fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <XorParityLine>:

static void XorParityLine( uint8_t *line1, uint8_t *line2, int32_t size )
{
 8008fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe8:	4607      	mov	r7, r0
 8008fea:	4689      	mov	r9, r1
 8008fec:	4690      	mov	r8, r2
    for( int32_t i = 0; i < size; i++ )
 8008fee:	2500      	movs	r5, #0
 8008ff0:	e011      	b.n	8009016 <XorParityLine+0x32>
    {
        SetParity( i, line1, ( GetParity( i, line1 ) ^ GetParity( i, line2 ) ) );
 8008ff2:	b2ae      	uxth	r6, r5
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7ff ffb2 	bl	8008f60 <GetParity>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	4649      	mov	r1, r9
 8009000:	4630      	mov	r0, r6
 8009002:	f7ff ffad 	bl	8008f60 <GetParity>
 8009006:	ea84 0200 	eor.w	r2, r4, r0
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	4639      	mov	r1, r7
 800900e:	4630      	mov	r0, r6
 8009010:	f7ff ffb0 	bl	8008f74 <SetParity>
    for( int32_t i = 0; i < size; i++ )
 8009014:	3501      	adds	r5, #1
 8009016:	4545      	cmp	r5, r8
 8009018:	dbeb      	blt.n	8008ff2 <XorParityLine+0xe>
    }
}
 800901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800901e <FragPrbs23>:

static int32_t FragPrbs23( int32_t value )
{
    int32_t b0 = value & 0x01;
    int32_t b1 = ( value & 0x20 ) >> 5;
    return ( value >> 1 ) + ( ( b0 ^ b1 ) << 22 );
 800901e:	ea80 1360 	eor.w	r3, r0, r0, asr #5
 8009022:	059b      	lsls	r3, r3, #22
 8009024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8009028:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800902c:	4770      	bx	lr
	...

08009030 <FragGetParityMatrixRow>:

static void FragGetParityMatrixRow( int32_t n, int32_t m, uint8_t *matrixRow )
{
 8009030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009034:	4604      	mov	r4, r0
 8009036:	460e      	mov	r6, r1
 8009038:	4690      	mov	r8, r2
    int32_t mTemp;
    int32_t x;
    int32_t nbCoeff = 0;
    int32_t r;

    if( IsPowerOfTwo( m ) != false )
 800903a:	4608      	mov	r0, r1
 800903c:	f7ff ffad 	bl	8008f9a <IsPowerOfTwo>
 8009040:	b138      	cbz	r0, 8009052 <FragGetParityMatrixRow+0x22>
    {
        mTemp = 1;
 8009042:	2701      	movs	r7, #1
    else
    {
        mTemp = 0;
    }

    x = 1 + ( 1001 * n );
 8009044:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8009048:	fb03 f404 	mul.w	r4, r3, r4
 800904c:	3401      	adds	r4, #1
    for( uint16_t i = 0; i < ( ( m >> 3 ) + 1 ); i++ )
 800904e:	2300      	movs	r3, #0
 8009050:	e006      	b.n	8009060 <FragGetParityMatrixRow+0x30>
        mTemp = 0;
 8009052:	2700      	movs	r7, #0
 8009054:	e7f6      	b.n	8009044 <FragGetParityMatrixRow+0x14>
    {
        matrixRow[i] = 0;
 8009056:	2200      	movs	r2, #0
 8009058:	f808 2003 	strb.w	r2, [r8, r3]
    for( uint16_t i = 0; i < ( ( m >> 3 ) + 1 ); i++ )
 800905c:	3301      	adds	r3, #1
 800905e:	b29b      	uxth	r3, r3
 8009060:	ebb3 0fe6 	cmp.w	r3, r6, asr #3
 8009064:	ddf7      	ble.n	8009056 <FragGetParityMatrixRow+0x26>
    int32_t nbCoeff = 0;
 8009066:	f04f 0900 	mov.w	r9, #0
 800906a:	e01b      	b.n	80090a4 <FragGetParityMatrixRow+0x74>
    while( nbCoeff < ( m >> 1 ) )
    {
        r = 1 << 16;
        while( r >= m )
        {
            x = FragPrbs23( x );
 800906c:	4620      	mov	r0, r4
 800906e:	f7ff ffd6 	bl	800901e <FragPrbs23>
 8009072:	4604      	mov	r4, r0
            r = x % ( m + mTemp );
 8009074:	19bb      	adds	r3, r7, r6
 8009076:	fb90 f0f3 	sdiv	r0, r0, r3
 800907a:	fb03 4010 	mls	r0, r3, r0, r4
        while( r >= m )
 800907e:	42b0      	cmp	r0, r6
 8009080:	daf4      	bge.n	800906c <FragGetParityMatrixRow+0x3c>
        }

        /* FEC algorithm optimization in V2.0.0 */
        if( ( GetParity( r, matrixRow ) == 0 ) || ( FragmentationPackageVersion == 1U ) )
 8009082:	b285      	uxth	r5, r0
 8009084:	4641      	mov	r1, r8
 8009086:	4628      	mov	r0, r5
 8009088:	f7ff ff6a 	bl	8008f60 <GetParity>
 800908c:	b118      	cbz	r0, 8009096 <FragGetParityMatrixRow+0x66>
 800908e:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <FragGetParityMatrixRow+0x84>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d106      	bne.n	80090a4 <FragGetParityMatrixRow+0x74>
        {
            SetParity( r, matrixRow, 1 );
 8009096:	2201      	movs	r2, #1
 8009098:	4641      	mov	r1, r8
 800909a:	4628      	mov	r0, r5
 800909c:	f7ff ff6a 	bl	8008f74 <SetParity>
            nbCoeff += 1;
 80090a0:	f109 0901 	add.w	r9, r9, #1
    while( nbCoeff < ( m >> 1 ) )
 80090a4:	ebb9 0f66 	cmp.w	r9, r6, asr #1
 80090a8:	da02      	bge.n	80090b0 <FragGetParityMatrixRow+0x80>
        r = 1 << 16;
 80090aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80090ae:	e7e6      	b.n	800907e <FragGetParityMatrixRow+0x4e>
        }
    }
}
 80090b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b4:	20000954 	.word	0x20000954

080090b8 <BitArrayFindFirstOne>:

static uint16_t BitArrayFindFirstOne( uint8_t *bitArray, uint16_t size )
{
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	4606      	mov	r6, r0
 80090bc:	460d      	mov	r5, r1
    for( uint16_t i = 0; i < size; i++ )
 80090be:	2400      	movs	r4, #0
 80090c0:	e001      	b.n	80090c6 <BitArrayFindFirstOne+0xe>
 80090c2:	3401      	adds	r4, #1
 80090c4:	b2a4      	uxth	r4, r4
 80090c6:	42ac      	cmp	r4, r5
 80090c8:	d206      	bcs.n	80090d8 <BitArrayFindFirstOne+0x20>
    {
        if( GetParity( i, bitArray ) == 1 )
 80090ca:	4631      	mov	r1, r6
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7ff ff47 	bl	8008f60 <GetParity>
 80090d2:	2801      	cmp	r0, #1
 80090d4:	d1f5      	bne.n	80090c2 <BitArrayFindFirstOne+0xa>
 80090d6:	e000      	b.n	80090da <BitArrayFindFirstOne+0x22>
        {
            return i;
        }
    }
    return 0;
 80090d8:	2400      	movs	r4, #0
}
 80090da:	4620      	mov	r0, r4
 80090dc:	bd70      	pop	{r4, r5, r6, pc}

080090de <BitArrayIsAllZeros>:

static uint8_t BitArrayIsAllZeros( uint8_t *bitArray, uint16_t  size )
{
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	4606      	mov	r6, r0
 80090e2:	460d      	mov	r5, r1
    for( uint16_t i = 0; i < size; i++ )
 80090e4:	2400      	movs	r4, #0
 80090e6:	e001      	b.n	80090ec <BitArrayIsAllZeros+0xe>
 80090e8:	3401      	adds	r4, #1
 80090ea:	b2a4      	uxth	r4, r4
 80090ec:	42ac      	cmp	r4, r5
 80090ee:	d207      	bcs.n	8009100 <BitArrayIsAllZeros+0x22>
    {
        if( GetParity( i, bitArray ) == 1 )
 80090f0:	4631      	mov	r1, r6
 80090f2:	4620      	mov	r0, r4
 80090f4:	f7ff ff34 	bl	8008f60 <GetParity>
 80090f8:	2801      	cmp	r0, #1
 80090fa:	d1f5      	bne.n	80090e8 <BitArrayIsAllZeros+0xa>
        {
            return 0;
 80090fc:	2000      	movs	r0, #0
 80090fe:	e000      	b.n	8009102 <BitArrayIsAllZeros+0x24>
        }
    }
    return 1;
 8009100:	2001      	movs	r0, #1
}
 8009102:	bd70      	pop	{r4, r5, r6, pc}

08009104 <FragFindMissingFrags>:

static void FragFindMissingFrags( uint16_t counter )
{
    int32_t i;
    for( i = FragDecoder.Status.FragNbLastRx; i < ( counter - 1 ); i++ )
 8009104:	4b10      	ldr	r3, [pc, #64]	; (8009148 <FragFindMissingFrags+0x44>)
 8009106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009108:	e000      	b.n	800910c <FragFindMissingFrags+0x8>
 800910a:	3301      	adds	r3, #1
 800910c:	1e42      	subs	r2, r0, #1
 800910e:	429a      	cmp	r2, r3
 8009110:	dd0e      	ble.n	8009130 <FragFindMissingFrags+0x2c>
    {
        if( i < FragDecoder.FragNb )
 8009112:	4a0d      	ldr	r2, [pc, #52]	; (8009148 <FragFindMissingFrags+0x44>)
 8009114:	8892      	ldrh	r2, [r2, #4]
 8009116:	429a      	cmp	r2, r3
 8009118:	ddf7      	ble.n	800910a <FragFindMissingFrags+0x6>
        {
            FragDecoder.Status.FragNbLost++;
 800911a:	490b      	ldr	r1, [pc, #44]	; (8009148 <FragFindMissingFrags+0x44>)
 800911c:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
 800911e:	3201      	adds	r2, #1
 8009120:	b292      	uxth	r2, r2
 8009122:	868a      	strh	r2, [r1, #52]	; 0x34
            FragDecoder.FragNbMissingIndex[i] = FragDecoder.Status.FragNbLost;
 8009124:	f103 0c04 	add.w	ip, r3, #4
 8009128:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 800912c:	80ca      	strh	r2, [r1, #6]
 800912e:	e7ec      	b.n	800910a <FragFindMissingFrags+0x6>
        }
    }
    if( i < FragDecoder.FragNb )
 8009130:	4a05      	ldr	r2, [pc, #20]	; (8009148 <FragFindMissingFrags+0x44>)
 8009132:	8892      	ldrh	r2, [r2, #4]
 8009134:	429a      	cmp	r2, r3
 8009136:	dd02      	ble.n	800913e <FragFindMissingFrags+0x3a>
    {
        FragDecoder.Status.FragNbLastRx = counter;
 8009138:	4b03      	ldr	r3, [pc, #12]	; (8009148 <FragFindMissingFrags+0x44>)
 800913a:	86d8      	strh	r0, [r3, #54]	; 0x36
 800913c:	4770      	bx	lr
    }
    else
    {
        FragDecoder.Status.FragNbLastRx = FragDecoder.FragNb + 1;
 800913e:	3201      	adds	r2, #1
 8009140:	4b01      	ldr	r3, [pc, #4]	; (8009148 <FragFindMissingFrags+0x44>)
 8009142:	86da      	strh	r2, [r3, #54]	; 0x36
    }
}
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	20000918 	.word	0x20000918

0800914c <FragFindMissingIndex>:

static uint16_t FragFindMissingIndex( uint16_t x )
{
 800914c:	4601      	mov	r1, r0
    for( uint16_t i = 0; i < FragDecoder.FragNb; i++ )
 800914e:	2000      	movs	r0, #0
 8009150:	e001      	b.n	8009156 <FragFindMissingIndex+0xa>
 8009152:	3001      	adds	r0, #1
 8009154:	b280      	uxth	r0, r0
 8009156:	4b07      	ldr	r3, [pc, #28]	; (8009174 <FragFindMissingIndex+0x28>)
 8009158:	889b      	ldrh	r3, [r3, #4]
 800915a:	4283      	cmp	r3, r0
 800915c:	d908      	bls.n	8009170 <FragFindMissingIndex+0x24>
    {
        if( FragDecoder.FragNbMissingIndex[i] == ( x + 1 ) )
 800915e:	1d02      	adds	r2, r0, #4
 8009160:	4b04      	ldr	r3, [pc, #16]	; (8009174 <FragFindMissingIndex+0x28>)
 8009162:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009166:	88da      	ldrh	r2, [r3, #6]
 8009168:	1c4b      	adds	r3, r1, #1
 800916a:	429a      	cmp	r2, r3
 800916c:	d1f1      	bne.n	8009152 <FragFindMissingIndex+0x6>
 800916e:	e000      	b.n	8009172 <FragFindMissingIndex+0x26>
        {
            return i;
        }
    }
    return 0;
 8009170:	2000      	movs	r0, #0
}
 8009172:	4770      	bx	lr
 8009174:	20000918 	.word	0x20000918

08009178 <FragExtractLineFromBinaryMatrix>:

static void FragExtractLineFromBinaryMatrix( uint8_t *bitArray, uint16_t rowIndex, uint16_t bitsInRow )
{
 8009178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800917c:	4606      	mov	r6, r0
 800917e:	4690      	mov	r8, r2
    uint32_t findByte = 0;
    uint32_t findBitInByte = 0;

    if( rowIndex > 0 )
 8009180:	460c      	mov	r4, r1
 8009182:	b1e9      	cbz	r1, 80091c0 <FragExtractLineFromBinaryMatrix+0x48>
    {
        findByte      = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) >> 3;
 8009184:	fb01 f502 	mul.w	r5, r1, r2
 8009188:	1e4b      	subs	r3, r1, #1
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 8009192:	10ef      	asrs	r7, r5, #3
        findBitInByte = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) % 8;
 8009194:	426b      	negs	r3, r5
 8009196:	f005 0507 	and.w	r5, r5, #7
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	bf58      	it	pl
 80091a0:	425d      	negpl	r5, r3
    }
    if( rowIndex > 0 )
 80091a2:	b194      	cbz	r4, 80091ca <FragExtractLineFromBinaryMatrix+0x52>
    {
        for( uint16_t i = 0; i < rowIndex; i++ )
 80091a4:	f04f 0900 	mov.w	r9, #0
 80091a8:	45a1      	cmp	r9, r4
 80091aa:	d20e      	bcs.n	80091ca <FragExtractLineFromBinaryMatrix+0x52>
        {
            SetParity( i, bitArray, 0 );
 80091ac:	2200      	movs	r2, #0
 80091ae:	4631      	mov	r1, r6
 80091b0:	4648      	mov	r0, r9
 80091b2:	f7ff fedf 	bl	8008f74 <SetParity>
        for( uint16_t i = 0; i < rowIndex; i++ )
 80091b6:	f109 0901 	add.w	r9, r9, #1
 80091ba:	fa1f f989 	uxth.w	r9, r9
 80091be:	e7f3      	b.n	80091a8 <FragExtractLineFromBinaryMatrix+0x30>
    uint32_t findBitInByte = 0;
 80091c0:	2500      	movs	r5, #0
    uint32_t findByte = 0;
 80091c2:	462f      	mov	r7, r5
 80091c4:	e7ed      	b.n	80091a2 <FragExtractLineFromBinaryMatrix+0x2a>
        }
    }
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 80091c6:	3401      	adds	r4, #1
 80091c8:	b2a4      	uxth	r4, r4
 80091ca:	4544      	cmp	r4, r8
 80091cc:	d211      	bcs.n	80091f2 <FragExtractLineFromBinaryMatrix+0x7a>
    {
        SetParity( i,
                   bitArray,
                   ( FragDecoder.MatrixM2B[findByte] >> ( 7 - findBitInByte ) ) & 0x01 );
 80091ce:	4b0a      	ldr	r3, [pc, #40]	; (80091f8 <FragExtractLineFromBinaryMatrix+0x80>)
 80091d0:	443b      	add	r3, r7
 80091d2:	7b1a      	ldrb	r2, [r3, #12]
 80091d4:	f1c5 0307 	rsb	r3, r5, #7
 80091d8:	411a      	asrs	r2, r3
        SetParity( i,
 80091da:	f002 0201 	and.w	r2, r2, #1
 80091de:	4631      	mov	r1, r6
 80091e0:	4620      	mov	r0, r4
 80091e2:	f7ff fec7 	bl	8008f74 <SetParity>

        findBitInByte++;
 80091e6:	3501      	adds	r5, #1
        if( findBitInByte == 8 )
 80091e8:	2d08      	cmp	r5, #8
 80091ea:	d1ec      	bne.n	80091c6 <FragExtractLineFromBinaryMatrix+0x4e>
        {
            findBitInByte = 0;
            findByte++;
 80091ec:	3701      	adds	r7, #1
            findBitInByte = 0;
 80091ee:	2500      	movs	r5, #0
 80091f0:	e7e9      	b.n	80091c6 <FragExtractLineFromBinaryMatrix+0x4e>
        }
    }
}
 80091f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f6:	bf00      	nop
 80091f8:	20000918 	.word	0x20000918

080091fc <FragPushLineToBinaryMatrix>:

static void FragPushLineToBinaryMatrix( uint8_t *bitArray, uint16_t rowIndex, uint16_t bitsInRow )
{
 80091fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	4607      	mov	r7, r0
 8009202:	4616      	mov	r6, r2
    uint32_t findByte = 0;
    uint32_t findBitInByte = 0;

    if( rowIndex > 0 )
 8009204:	460c      	mov	r4, r1
 8009206:	b369      	cbz	r1, 8009264 <FragPushLineToBinaryMatrix+0x68>
    {
        findByte      = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) >> 3;
 8009208:	fb01 f502 	mul.w	r5, r1, r2
 800920c:	1e4b      	subs	r3, r1, #1
 800920e:	fb01 f303 	mul.w	r3, r1, r3
 8009212:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 8009216:	ea4f 08e5 	mov.w	r8, r5, asr #3
        findBitInByte = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) % 8;
 800921a:	426b      	negs	r3, r5
 800921c:	f005 0507 	and.w	r5, r5, #7
 8009220:	f003 0307 	and.w	r3, r3, #7
 8009224:	bf58      	it	pl
 8009226:	425d      	negpl	r5, r3
 8009228:	e004      	b.n	8009234 <FragPushLineToBinaryMatrix+0x38>
    {
        if( GetParity( i, bitArray ) == 0 )
        {
            FragDecoder.MatrixM2B[findByte] = FragDecoder.MatrixM2B[findByte] & ( 0xFF - ( 1 << ( 7 - findBitInByte ) ) );
        }
        findBitInByte++;
 800922a:	3501      	adds	r5, #1
        if( findBitInByte == 8 )
 800922c:	2d08      	cmp	r5, #8
 800922e:	d015      	beq.n	800925c <FragPushLineToBinaryMatrix+0x60>
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 8009230:	3401      	adds	r4, #1
 8009232:	b2a4      	uxth	r4, r4
 8009234:	42b4      	cmp	r4, r6
 8009236:	d218      	bcs.n	800926a <FragPushLineToBinaryMatrix+0x6e>
        if( GetParity( i, bitArray ) == 0 )
 8009238:	4639      	mov	r1, r7
 800923a:	4620      	mov	r0, r4
 800923c:	f7ff fe90 	bl	8008f60 <GetParity>
 8009240:	2800      	cmp	r0, #0
 8009242:	d1f2      	bne.n	800922a <FragPushLineToBinaryMatrix+0x2e>
            FragDecoder.MatrixM2B[findByte] = FragDecoder.MatrixM2B[findByte] & ( 0xFF - ( 1 << ( 7 - findBitInByte ) ) );
 8009244:	4a0a      	ldr	r2, [pc, #40]	; (8009270 <FragPushLineToBinaryMatrix+0x74>)
 8009246:	4442      	add	r2, r8
 8009248:	7b11      	ldrb	r1, [r2, #12]
 800924a:	f1c5 0007 	rsb	r0, r5, #7
 800924e:	2301      	movs	r3, #1
 8009250:	4083      	lsls	r3, r0
 8009252:	43db      	mvns	r3, r3
 8009254:	b25b      	sxtb	r3, r3
 8009256:	400b      	ands	r3, r1
 8009258:	7313      	strb	r3, [r2, #12]
 800925a:	e7e6      	b.n	800922a <FragPushLineToBinaryMatrix+0x2e>
        {
            findBitInByte = 0;
            findByte++;
 800925c:	f108 0801 	add.w	r8, r8, #1
            findBitInByte = 0;
 8009260:	2500      	movs	r5, #0
 8009262:	e7e5      	b.n	8009230 <FragPushLineToBinaryMatrix+0x34>
    uint32_t findBitInByte = 0;
 8009264:	2500      	movs	r5, #0
    uint32_t findByte = 0;
 8009266:	46a8      	mov	r8, r5
 8009268:	e7e4      	b.n	8009234 <FragPushLineToBinaryMatrix+0x38>
        }
    }
}
 800926a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800926e:	bf00      	nop
 8009270:	20000918 	.word	0x20000918

08009274 <FragDecoderInit>:
{
 8009274:	b510      	push	{r4, lr}
    FragmentationPackageVersion = fragPVer;
 8009276:	4c17      	ldr	r4, [pc, #92]	; (80092d4 <FragDecoderInit+0x60>)
 8009278:	7023      	strb	r3, [r4, #0]
    FragDecoder.Callbacks = callbacks;
 800927a:	4c17      	ldr	r4, [pc, #92]	; (80092d8 <FragDecoderInit+0x64>)
 800927c:	6022      	str	r2, [r4, #0]
    FragDecoder.FragNb = fragNb;                                /* FragNb = FRAG_MAX_SIZE */
 800927e:	80a0      	strh	r0, [r4, #4]
    FragDecoder.FragSize = fragSize;                            /* number of byte on a row */
 8009280:	71a1      	strb	r1, [r4, #6]
    FragDecoder.Status.FragNbLastRx = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	86e3      	strh	r3, [r4, #54]	; 0x36
    FragDecoder.Status.FragNbLost = 0;
 8009286:	86a3      	strh	r3, [r4, #52]	; 0x34
    FragDecoder.M2BLine = 0;
 8009288:	60a3      	str	r3, [r4, #8]
    for( uint16_t i = 0; i < FRAG_MAX_NB; i++ )
 800928a:	e007      	b.n	800929c <FragDecoderInit+0x28>
        FragDecoder.FragNbMissingIndex[i] = 1;
 800928c:	1d18      	adds	r0, r3, #4
 800928e:	4912      	ldr	r1, [pc, #72]	; (80092d8 <FragDecoderInit+0x64>)
 8009290:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009294:	2001      	movs	r0, #1
 8009296:	80c8      	strh	r0, [r1, #6]
    for( uint16_t i = 0; i < FRAG_MAX_NB; i++ )
 8009298:	4403      	add	r3, r0
 800929a:	b29b      	uxth	r3, r3
 800929c:	2b10      	cmp	r3, #16
 800929e:	d9f5      	bls.n	800928c <FragDecoderInit+0x18>
    for( uint32_t i = 0; i < ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ); i++ )
 80092a0:	2300      	movs	r3, #0
 80092a2:	b10b      	cbz	r3, 80092a8 <FragDecoderInit+0x34>
    for( uint32_t i = 0; i < ( ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ) * FRAG_MAX_REDUNDANCY ); i++ )
 80092a4:	2300      	movs	r3, #0
 80092a6:	e00b      	b.n	80092c0 <FragDecoderInit+0x4c>
        FragDecoder.S[i] = 0;
 80092a8:	490b      	ldr	r1, [pc, #44]	; (80092d8 <FragDecoderInit+0x64>)
 80092aa:	4419      	add	r1, r3
 80092ac:	2000      	movs	r0, #0
 80092ae:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    for( uint32_t i = 0; i < ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ); i++ )
 80092b2:	3301      	adds	r3, #1
 80092b4:	e7f5      	b.n	80092a2 <FragDecoderInit+0x2e>
        FragDecoder.MatrixM2B[i] = 0xFF;
 80092b6:	4908      	ldr	r1, [pc, #32]	; (80092d8 <FragDecoderInit+0x64>)
 80092b8:	4419      	add	r1, r3
 80092ba:	20ff      	movs	r0, #255	; 0xff
 80092bc:	7308      	strb	r0, [r1, #12]
    for( uint32_t i = 0; i < ( ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ) * FRAG_MAX_REDUNDANCY ); i++ )
 80092be:	3301      	adds	r3, #1
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d9f8      	bls.n	80092b6 <FragDecoderInit+0x42>
    if( FragDecoder.Callbacks->FragDecoderErase != NULL )
 80092c4:	6813      	ldr	r3, [r2, #0]
 80092c6:	b103      	cbz	r3, 80092ca <FragDecoderInit+0x56>
        FragDecoder.Callbacks->FragDecoderErase();
 80092c8:	4798      	blx	r3
    FragDecoder.Status.FragNbLost = 0;
 80092ca:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <FragDecoderInit+0x64>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	869a      	strh	r2, [r3, #52]	; 0x34
    FragDecoder.Status.FragNbLastRx = 0;
 80092d0:	86da      	strh	r2, [r3, #54]	; 0x36
}
 80092d2:	bd10      	pop	{r4, pc}
 80092d4:	20000954 	.word	0x20000954
 80092d8:	20000918 	.word	0x20000918

080092dc <FragDecoderProcess>:
{
 80092dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	4604      	mov	r4, r0
 80092e2:	4689      	mov	r9, r1
    memset1( matrixRow, 0, ( FRAG_MAX_NB >> 3 ) + 1 );
 80092e4:	2203      	movs	r2, #3
 80092e6:	2100      	movs	r1, #0
 80092e8:	4896      	ldr	r0, [pc, #600]	; (8009544 <FragDecoderProcess+0x268>)
 80092ea:	f009 fd40 	bl	8012d6e <memset1>
    memset1( matrixDataTemp, 0, FRAG_MAX_SIZE );
 80092ee:	2278      	movs	r2, #120	; 0x78
 80092f0:	2100      	movs	r1, #0
 80092f2:	4895      	ldr	r0, [pc, #596]	; (8009548 <FragDecoderProcess+0x26c>)
 80092f4:	f009 fd3b 	bl	8012d6e <memset1>
    memset1( dataTempVector, 0, ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 );
 80092f8:	2201      	movs	r2, #1
 80092fa:	2100      	movs	r1, #0
 80092fc:	4893      	ldr	r0, [pc, #588]	; (800954c <FragDecoderProcess+0x270>)
 80092fe:	f009 fd36 	bl	8012d6e <memset1>
    memset1( dataTempVector2, 0, ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 );
 8009302:	2201      	movs	r2, #1
 8009304:	2100      	movs	r1, #0
 8009306:	4892      	ldr	r0, [pc, #584]	; (8009550 <FragDecoderProcess+0x274>)
 8009308:	f009 fd31 	bl	8012d6e <memset1>
    FragDecoder.Status.FragNbRx = fragCounter;
 800930c:	4b91      	ldr	r3, [pc, #580]	; (8009554 <FragDecoderProcess+0x278>)
 800930e:	865c      	strh	r4, [r3, #50]	; 0x32
    if( fragCounter < FragDecoder.Status.FragNbLastRx )
 8009310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009312:	42a3      	cmp	r3, r4
 8009314:	f200 810c 	bhi.w	8009530 <FragDecoderProcess+0x254>
    if( fragCounter < ( FragDecoder.FragNb + 1 ) )
 8009318:	4b8e      	ldr	r3, [pc, #568]	; (8009554 <FragDecoderProcess+0x278>)
 800931a:	889b      	ldrh	r3, [r3, #4]
 800931c:	42a3      	cmp	r3, r4
 800931e:	d20a      	bcs.n	8009336 <FragDecoderProcess+0x5a>
        if( FragDecoder.Status.FragNbLost > FRAG_MAX_REDUNDANCY )
 8009320:	4b8c      	ldr	r3, [pc, #560]	; (8009554 <FragDecoderProcess+0x278>)
 8009322:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8009324:	2b02      	cmp	r3, #2
 8009326:	d920      	bls.n	800936a <FragDecoderProcess+0x8e>
            FragDecoder.Status.MatrixError = 1;
 8009328:	4b8a      	ldr	r3, [pc, #552]	; (8009554 <FragDecoderProcess+0x278>)
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            return FRAG_SESSION_FINISHED;
 8009330:	2000      	movs	r0, #0
}
 8009332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        SetRow( rawData, fragCounter - 1, FragDecoder.FragSize );
 8009336:	4d87      	ldr	r5, [pc, #540]	; (8009554 <FragDecoderProcess+0x278>)
 8009338:	1e61      	subs	r1, r4, #1
 800933a:	79aa      	ldrb	r2, [r5, #6]
 800933c:	b289      	uxth	r1, r1
 800933e:	4648      	mov	r0, r9
 8009340:	f7ff fdee 	bl	8008f20 <SetRow>
        FragDecoder.FragNbMissingIndex[fragCounter - 1] = 0;
 8009344:	1ce3      	adds	r3, r4, #3
 8009346:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800934a:	2200      	movs	r2, #0
 800934c:	80da      	strh	r2, [r3, #6]
        FragFindMissingFrags( fragCounter );
 800934e:	4620      	mov	r0, r4
 8009350:	f7ff fed8 	bl	8009104 <FragFindMissingFrags>
        if( ( fragCounter == FragDecoder.FragNb ) && ( FragDecoder.Status.FragNbLost == 0U ) )
 8009354:	88ab      	ldrh	r3, [r5, #4]
 8009356:	42a3      	cmp	r3, r4
 8009358:	f040 80ed 	bne.w	8009536 <FragDecoderProcess+0x25a>
 800935c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800935e:	b90b      	cbnz	r3, 8009364 <FragDecoderProcess+0x88>
            return FRAG_SESSION_FINISHED;
 8009360:	2000      	movs	r0, #0
 8009362:	e7e6      	b.n	8009332 <FragDecoderProcess+0x56>
    return FRAG_SESSION_ONGOING;
 8009364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009368:	e7e3      	b.n	8009332 <FragDecoderProcess+0x56>
        FragFindMissingFrags( fragCounter );
 800936a:	4620      	mov	r0, r4
 800936c:	f7ff feca 	bl	8009104 <FragFindMissingFrags>
        if( FragDecoder.Status.FragNbLost == 0 )
 8009370:	4b78      	ldr	r3, [pc, #480]	; (8009554 <FragDecoderProcess+0x278>)
 8009372:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8009374:	2800      	cmp	r0, #0
 8009376:	d0dc      	beq.n	8009332 <FragDecoderProcess+0x56>
        FragGetParityMatrixRow( fragCounter - FragDecoder.FragNb, FragDecoder.FragNb, matrixRow );
 8009378:	8899      	ldrh	r1, [r3, #4]
 800937a:	4a72      	ldr	r2, [pc, #456]	; (8009544 <FragDecoderProcess+0x268>)
 800937c:	1a60      	subs	r0, r4, r1
 800937e:	f7ff fe57 	bl	8009030 <FragGetParityMatrixRow>
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 8009382:	2400      	movs	r4, #0
    int32_t first = 0;
 8009384:	4626      	mov	r6, r4
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 8009386:	e008      	b.n	800939a <FragDecoderProcess+0xbe>
                    SetParity( FragDecoder.FragNbMissingIndex[i] - 1, dataTempVector, 1 );
 8009388:	3801      	subs	r0, #1
 800938a:	2201      	movs	r2, #1
 800938c:	496f      	ldr	r1, [pc, #444]	; (800954c <FragDecoderProcess+0x270>)
 800938e:	b280      	uxth	r0, r0
 8009390:	f7ff fdf0 	bl	8008f74 <SetParity>
                    if( first == 0 )
 8009394:	b906      	cbnz	r6, 8009398 <FragDecoderProcess+0xbc>
                        first = 1;
 8009396:	2601      	movs	r6, #1
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 8009398:	3401      	adds	r4, #1
 800939a:	4b6e      	ldr	r3, [pc, #440]	; (8009554 <FragDecoderProcess+0x278>)
 800939c:	889b      	ldrh	r3, [r3, #4]
 800939e:	42a3      	cmp	r3, r4
 80093a0:	dd22      	ble.n	80093e8 <FragDecoderProcess+0x10c>
            if( GetParity( i, matrixRow ) == 1 )
 80093a2:	b2a5      	uxth	r5, r4
 80093a4:	4967      	ldr	r1, [pc, #412]	; (8009544 <FragDecoderProcess+0x268>)
 80093a6:	4628      	mov	r0, r5
 80093a8:	f7ff fdda 	bl	8008f60 <GetParity>
 80093ac:	2801      	cmp	r0, #1
 80093ae:	d1f3      	bne.n	8009398 <FragDecoderProcess+0xbc>
                if( FragDecoder.FragNbMissingIndex[i] == 0 )
 80093b0:	1d22      	adds	r2, r4, #4
 80093b2:	4b68      	ldr	r3, [pc, #416]	; (8009554 <FragDecoderProcess+0x278>)
 80093b4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80093b8:	88d8      	ldrh	r0, [r3, #6]
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d1e4      	bne.n	8009388 <FragDecoderProcess+0xac>
                    SetParity( i, matrixRow, 0 );
 80093be:	2200      	movs	r2, #0
 80093c0:	4960      	ldr	r1, [pc, #384]	; (8009544 <FragDecoderProcess+0x268>)
 80093c2:	4628      	mov	r0, r5
 80093c4:	f7ff fdd6 	bl	8008f74 <SetParity>
                    GetRow( matrixDataTemp, i, FragDecoder.FragSize );
 80093c8:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8009554 <FragDecoderProcess+0x278>
 80093cc:	4f5e      	ldr	r7, [pc, #376]	; (8009548 <FragDecoderProcess+0x26c>)
 80093ce:	f898 2006 	ldrb.w	r2, [r8, #6]
 80093d2:	4629      	mov	r1, r5
 80093d4:	4638      	mov	r0, r7
 80093d6:	f7ff fdb3 	bl	8008f40 <GetRow>
                    XorDataLine( rawData, matrixDataTemp, FragDecoder.FragSize );
 80093da:	f898 2006 	ldrb.w	r2, [r8, #6]
 80093de:	4639      	mov	r1, r7
 80093e0:	4648      	mov	r0, r9
 80093e2:	f7ff fded 	bl	8008fc0 <XorDataLine>
 80093e6:	e7d7      	b.n	8009398 <FragDecoderProcess+0xbc>
        firstOneInRow = BitArrayFindFirstOne( dataTempVector, FragDecoder.Status.FragNbLost );
 80093e8:	4b5a      	ldr	r3, [pc, #360]	; (8009554 <FragDecoderProcess+0x278>)
 80093ea:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80093ec:	4857      	ldr	r0, [pc, #348]	; (800954c <FragDecoderProcess+0x270>)
 80093ee:	f7ff fe63 	bl	80090b8 <BitArrayFindFirstOne>
 80093f2:	4604      	mov	r4, r0
        if( first > 0 )
 80093f4:	b366      	cbz	r6, 8009450 <FragDecoderProcess+0x174>
            while( GetParity( firstOneInRow, FragDecoder.S ) == 1 )
 80093f6:	4958      	ldr	r1, [pc, #352]	; (8009558 <FragDecoderProcess+0x27c>)
 80093f8:	4620      	mov	r0, r4
 80093fa:	f7ff fdb1 	bl	8008f60 <GetParity>
 80093fe:	2801      	cmp	r0, #1
 8009400:	d129      	bne.n	8009456 <FragDecoderProcess+0x17a>
                FragExtractLineFromBinaryMatrix( dataTempVector2, firstOneInRow, FragDecoder.Status.FragNbLost );
 8009402:	4d54      	ldr	r5, [pc, #336]	; (8009554 <FragDecoderProcess+0x278>)
 8009404:	4f52      	ldr	r7, [pc, #328]	; (8009550 <FragDecoderProcess+0x274>)
 8009406:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8009408:	4621      	mov	r1, r4
 800940a:	4638      	mov	r0, r7
 800940c:	f7ff feb4 	bl	8009178 <FragExtractLineFromBinaryMatrix>
                XorParityLine( dataTempVector, dataTempVector2, FragDecoder.Status.FragNbLost );
 8009410:	4e4e      	ldr	r6, [pc, #312]	; (800954c <FragDecoderProcess+0x270>)
 8009412:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8009414:	4639      	mov	r1, r7
 8009416:	4630      	mov	r0, r6
 8009418:	f7ff fde4 	bl	8008fe4 <XorParityLine>
                li = FragFindMissingIndex( firstOneInRow );
 800941c:	4620      	mov	r0, r4
 800941e:	f7ff fe95 	bl	800914c <FragFindMissingIndex>
 8009422:	4601      	mov	r1, r0
                GetRow( matrixDataTemp, li, FragDecoder.FragSize );
 8009424:	4f48      	ldr	r7, [pc, #288]	; (8009548 <FragDecoderProcess+0x26c>)
 8009426:	79aa      	ldrb	r2, [r5, #6]
 8009428:	4638      	mov	r0, r7
 800942a:	f7ff fd89 	bl	8008f40 <GetRow>
                XorDataLine( rawData, matrixDataTemp, FragDecoder.FragSize );
 800942e:	79aa      	ldrb	r2, [r5, #6]
 8009430:	4639      	mov	r1, r7
 8009432:	4648      	mov	r0, r9
 8009434:	f7ff fdc4 	bl	8008fc0 <XorDataLine>
                if( BitArrayIsAllZeros( dataTempVector, FragDecoder.Status.FragNbLost ) )
 8009438:	8ead      	ldrh	r5, [r5, #52]	; 0x34
 800943a:	4629      	mov	r1, r5
 800943c:	4630      	mov	r0, r6
 800943e:	f7ff fe4e 	bl	80090de <BitArrayIsAllZeros>
 8009442:	b9a8      	cbnz	r0, 8009470 <FragDecoderProcess+0x194>
                firstOneInRow = BitArrayFindFirstOne( dataTempVector, FragDecoder.Status.FragNbLost );
 8009444:	4629      	mov	r1, r5
 8009446:	4630      	mov	r0, r6
 8009448:	f7ff fe36 	bl	80090b8 <BitArrayFindFirstOne>
 800944c:	4604      	mov	r4, r0
 800944e:	e7d2      	b.n	80093f6 <FragDecoderProcess+0x11a>
    return FRAG_SESSION_ONGOING;
 8009450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009454:	e76d      	b.n	8009332 <FragDecoderProcess+0x56>
    int32_t noInfo = 0;
 8009456:	2300      	movs	r3, #0
            if( noInfo == 0 )
 8009458:	b163      	cbz	r3, 8009474 <FragDecoderProcess+0x198>
            if( FragDecoder.M2BLine == FragDecoder.Status.FragNbLost )
 800945a:	4b3e      	ldr	r3, [pc, #248]	; (8009554 <FragDecoderProcess+0x278>)
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8009460:	4282      	cmp	r2, r0
 8009462:	d16b      	bne.n	800953c <FragDecoderProcess+0x260>
                if( FragDecoder.Status.FragNbLost > 1 )
 8009464:	2801      	cmp	r0, #1
 8009466:	f67f af64 	bls.w	8009332 <FragDecoderProcess+0x56>
                    for( i = ( FragDecoder.Status.FragNbLost - 2 ); i >= 0 ; i-- )
 800946a:	f1a0 0802 	sub.w	r8, r0, #2
 800946e:	e04a      	b.n	8009506 <FragDecoderProcess+0x22a>
                    noInfo = 1;
 8009470:	2301      	movs	r3, #1
 8009472:	e7f1      	b.n	8009458 <FragDecoderProcess+0x17c>
                FragPushLineToBinaryMatrix( dataTempVector, firstOneInRow, FragDecoder.Status.FragNbLost );
 8009474:	4d37      	ldr	r5, [pc, #220]	; (8009554 <FragDecoderProcess+0x278>)
 8009476:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8009478:	4621      	mov	r1, r4
 800947a:	4834      	ldr	r0, [pc, #208]	; (800954c <FragDecoderProcess+0x270>)
 800947c:	f7ff febe 	bl	80091fc <FragPushLineToBinaryMatrix>
                li = FragFindMissingIndex( firstOneInRow );
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff fe63 	bl	800914c <FragFindMissingIndex>
 8009486:	4601      	mov	r1, r0
                SetRow( rawData, li, FragDecoder.FragSize );
 8009488:	79aa      	ldrb	r2, [r5, #6]
 800948a:	4648      	mov	r0, r9
 800948c:	f7ff fd48 	bl	8008f20 <SetRow>
                SetParity( firstOneInRow, FragDecoder.S, 1 );
 8009490:	2201      	movs	r2, #1
 8009492:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8009496:	4620      	mov	r0, r4
 8009498:	f7ff fd6c 	bl	8008f74 <SetParity>
                FragDecoder.M2BLine++;
 800949c:	68ab      	ldr	r3, [r5, #8]
 800949e:	3301      	adds	r3, #1
 80094a0:	60ab      	str	r3, [r5, #8]
 80094a2:	e7da      	b.n	800945a <FragDecoderProcess+0x17e>
                        for( j = ( FragDecoder.Status.FragNbLost - 1 ); j > i; j-- )
 80094a4:	3c01      	subs	r4, #1
 80094a6:	45a0      	cmp	r8, r4
 80094a8:	da25      	bge.n	80094f6 <FragDecoderProcess+0x21a>
                            FragExtractLineFromBinaryMatrix( dataTempVector2, i, FragDecoder.Status.FragNbLost );
 80094aa:	4f2a      	ldr	r7, [pc, #168]	; (8009554 <FragDecoderProcess+0x278>)
 80094ac:	4e28      	ldr	r6, [pc, #160]	; (8009550 <FragDecoderProcess+0x274>)
 80094ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094b0:	4651      	mov	r1, sl
 80094b2:	4630      	mov	r0, r6
 80094b4:	f7ff fe60 	bl	8009178 <FragExtractLineFromBinaryMatrix>
                            FragExtractLineFromBinaryMatrix( dataTempVector, j, FragDecoder.Status.FragNbLost );
 80094b8:	b2a5      	uxth	r5, r4
 80094ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094bc:	4629      	mov	r1, r5
 80094be:	4823      	ldr	r0, [pc, #140]	; (800954c <FragDecoderProcess+0x270>)
 80094c0:	f7ff fe5a 	bl	8009178 <FragExtractLineFromBinaryMatrix>
                            if( GetParity( j, dataTempVector2 ) == 1 )
 80094c4:	4631      	mov	r1, r6
 80094c6:	4628      	mov	r0, r5
 80094c8:	f7ff fd4a 	bl	8008f60 <GetParity>
 80094cc:	2801      	cmp	r0, #1
 80094ce:	d1e9      	bne.n	80094a4 <FragDecoderProcess+0x1c8>
                                XorParityLine( dataTempVector2, dataTempVector, FragDecoder.Status.FragNbLost );
 80094d0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094d2:	491e      	ldr	r1, [pc, #120]	; (800954c <FragDecoderProcess+0x270>)
 80094d4:	481e      	ldr	r0, [pc, #120]	; (8009550 <FragDecoderProcess+0x274>)
 80094d6:	f7ff fd85 	bl	8008fe4 <XorParityLine>
                                lj = FragFindMissingIndex( j );
 80094da:	4628      	mov	r0, r5
 80094dc:	f7ff fe36 	bl	800914c <FragFindMissingIndex>
 80094e0:	4601      	mov	r1, r0
                                GetRow( rawData, lj, FragDecoder.FragSize );
 80094e2:	79ba      	ldrb	r2, [r7, #6]
 80094e4:	4648      	mov	r0, r9
 80094e6:	f7ff fd2b 	bl	8008f40 <GetRow>
                                XorDataLine( matrixDataTemp, rawData, FragDecoder.FragSize );
 80094ea:	79ba      	ldrb	r2, [r7, #6]
 80094ec:	4649      	mov	r1, r9
 80094ee:	4816      	ldr	r0, [pc, #88]	; (8009548 <FragDecoderProcess+0x26c>)
 80094f0:	f7ff fd66 	bl	8008fc0 <XorDataLine>
 80094f4:	e7d6      	b.n	80094a4 <FragDecoderProcess+0x1c8>
                        SetRow( matrixDataTemp, li, FragDecoder.FragSize );
 80094f6:	4b17      	ldr	r3, [pc, #92]	; (8009554 <FragDecoderProcess+0x278>)
 80094f8:	799a      	ldrb	r2, [r3, #6]
 80094fa:	4659      	mov	r1, fp
 80094fc:	4812      	ldr	r0, [pc, #72]	; (8009548 <FragDecoderProcess+0x26c>)
 80094fe:	f7ff fd0f 	bl	8008f20 <SetRow>
                    for( i = ( FragDecoder.Status.FragNbLost - 2 ); i >= 0 ; i-- )
 8009502:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009506:	f1b8 0f00 	cmp.w	r8, #0
 800950a:	db0e      	blt.n	800952a <FragDecoderProcess+0x24e>
                        li = FragFindMissingIndex( i );
 800950c:	fa1f fa88 	uxth.w	sl, r8
 8009510:	4650      	mov	r0, sl
 8009512:	f7ff fe1b 	bl	800914c <FragFindMissingIndex>
 8009516:	4683      	mov	fp, r0
                        GetRow( matrixDataTemp, li, FragDecoder.FragSize );
 8009518:	4c0e      	ldr	r4, [pc, #56]	; (8009554 <FragDecoderProcess+0x278>)
 800951a:	79a2      	ldrb	r2, [r4, #6]
 800951c:	4601      	mov	r1, r0
 800951e:	480a      	ldr	r0, [pc, #40]	; (8009548 <FragDecoderProcess+0x26c>)
 8009520:	f7ff fd0e 	bl	8008f40 <GetRow>
                        for( j = ( FragDecoder.Status.FragNbLost - 1 ); j > i; j-- )
 8009524:	8ea4      	ldrh	r4, [r4, #52]	; 0x34
 8009526:	3c01      	subs	r4, #1
 8009528:	e7bd      	b.n	80094a6 <FragDecoderProcess+0x1ca>
                    return FragDecoder.Status.FragNbLost;
 800952a:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <FragDecoderProcess+0x278>)
 800952c:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 800952e:	e700      	b.n	8009332 <FragDecoderProcess+0x56>
        return FRAG_SESSION_ONGOING;  /* Drop frame out of order */
 8009530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009534:	e6fd      	b.n	8009332 <FragDecoderProcess+0x56>
    return FRAG_SESSION_ONGOING;
 8009536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800953a:	e6fa      	b.n	8009332 <FragDecoderProcess+0x56>
 800953c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009540:	e6f7      	b.n	8009332 <FragDecoderProcess+0x56>
 8009542:	bf00      	nop
 8009544:	200009d8 	.word	0x200009d8
 8009548:	20000960 	.word	0x20000960
 800954c:	20000958 	.word	0x20000958
 8009550:	2000095c 	.word	0x2000095c
 8009554:	20000918 	.word	0x20000918
 8009558:	20000948 	.word	0x20000948

0800955c <FragDecoderGetStatus>:
    return FragDecoder.Status;
 800955c:	4a03      	ldr	r2, [pc, #12]	; (800956c <FragDecoderGetStatus+0x10>)
 800955e:	f8d2 1032 	ldr.w	r1, [r2, #50]	; 0x32
 8009562:	f8d2 2036 	ldr.w	r2, [r2, #54]	; 0x36
 8009566:	6001      	str	r1, [r0, #0]
 8009568:	6042      	str	r2, [r0, #4]
}
 800956a:	4770      	bx	lr
 800956c:	20000918 	.word	0x20000918

08009570 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8009570:	2804      	cmp	r0, #4
 8009572:	d807      	bhi.n	8009584 <LmHandlerPackageIsInitialized+0x14>
{
 8009574:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8009576:	4b05      	ldr	r3, [pc, #20]	; (800958c <LmHandlerPackageIsInitialized+0x1c>)
 8009578:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	b11b      	cbz	r3, 8009588 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8009580:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8009582:	bd08      	pop	{r3, pc}
        return false;
 8009584:	2000      	movs	r0, #0
}
 8009586:	4770      	bx	lr
        return false;
 8009588:	2000      	movs	r0, #0
 800958a:	e7fa      	b.n	8009582 <LmHandlerPackageIsInitialized+0x12>
 800958c:	20000af8 	.word	0x20000af8

08009590 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	4605      	mov	r5, r0
 8009594:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009596:	2400      	movs	r4, #0
 8009598:	e005      	b.n	80095a6 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	b10b      	cbz	r3, 80095a2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800959e:	4630      	mov	r0, r6
 80095a0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80095a2:	3401      	adds	r4, #1
 80095a4:	b264      	sxtb	r4, r4
 80095a6:	2c04      	cmp	r4, #4
 80095a8:	dc24      	bgt.n	80095f4 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 80095aa:	4b13      	ldr	r3, [pc, #76]	; (80095f8 <LmHandlerPackagesNotify+0x68>)
 80095ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d0f6      	beq.n	80095a2 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 80095b4:	2d03      	cmp	r5, #3
 80095b6:	d8f4      	bhi.n	80095a2 <LmHandlerPackagesNotify+0x12>
 80095b8:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <LmHandlerPackagesNotify+0x30>)
 80095ba:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 80095be:	bf00      	nop
 80095c0:	0800959b 	.word	0x0800959b
 80095c4:	080095d1 	.word	0x080095d1
 80095c8:	080095dd 	.word	0x080095dd
 80095cc:	080095e9 	.word	0x080095e9
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0e5      	beq.n	80095a2 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 80095d6:	4630      	mov	r0, r6
 80095d8:	4798      	blx	r3
 80095da:	e7e2      	b.n	80095a2 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0df      	beq.n	80095a2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 80095e2:	4630      	mov	r0, r6
 80095e4:	4798      	blx	r3
 80095e6:	e7dc      	b.n	80095a2 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0d9      	beq.n	80095a2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80095ee:	4630      	mov	r0, r6
 80095f0:	4798      	blx	r3
 80095f2:	e7d6      	b.n	80095a2 <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 80095f4:	bd70      	pop	{r4, r5, r6, pc}
 80095f6:	bf00      	nop
 80095f8:	20000af8 	.word	0x20000af8

080095fc <MlmeIndication>:
{
 80095fc:	b510      	push	{r4, lr}
 80095fe:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8009600:	4b11      	ldr	r3, [pc, #68]	; (8009648 <MlmeIndication+0x4c>)
 8009602:	2200      	movs	r2, #0
 8009604:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8009606:	7842      	ldrb	r2, [r0, #1]
 8009608:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800960a:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800960e:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8009610:	f9b1 2000 	ldrsh.w	r2, [r1]
 8009614:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8009616:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800961a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800961c:	78ca      	ldrb	r2, [r1, #3]
 800961e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8009620:	6842      	ldr	r2, [r0, #4]
 8009622:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8009624:	4b09      	ldr	r3, [pc, #36]	; (800964c <MlmeIndication+0x50>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962a:	b13b      	cbz	r3, 800963c <MlmeIndication+0x40>
 800962c:	7802      	ldrb	r2, [r0, #0]
 800962e:	2a0a      	cmp	r2, #10
 8009630:	d004      	beq.n	800963c <MlmeIndication+0x40>
 8009632:	2a0e      	cmp	r2, #14
 8009634:	d002      	beq.n	800963c <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8009636:	4904      	ldr	r1, [pc, #16]	; (8009648 <MlmeIndication+0x4c>)
 8009638:	2000      	movs	r0, #0
 800963a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800963c:	4621      	mov	r1, r4
 800963e:	2003      	movs	r0, #3
 8009640:	f7ff ffa6 	bl	8009590 <LmHandlerPackagesNotify>
}
 8009644:	bd10      	pop	{r4, pc}
 8009646:	bf00      	nop
 8009648:	200000a0 	.word	0x200000a0
 800964c:	20000af4 	.word	0x20000af4

08009650 <McpsConfirm>:
{
 8009650:	b510      	push	{r4, lr}
 8009652:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8009654:	4b0d      	ldr	r3, [pc, #52]	; (800968c <McpsConfirm+0x3c>)
 8009656:	2201      	movs	r2, #1
 8009658:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800965a:	7842      	ldrb	r2, [r0, #1]
 800965c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800965e:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8009662:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8009664:	68c2      	ldr	r2, [r0, #12]
 8009666:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8009668:	f990 2003 	ldrsb.w	r2, [r0, #3]
 800966c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800966e:	6902      	ldr	r2, [r0, #16]
 8009670:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8009672:	7902      	ldrb	r2, [r0, #4]
 8009674:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8009676:	4b06      	ldr	r3, [pc, #24]	; (8009690 <McpsConfirm+0x40>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	b10b      	cbz	r3, 8009682 <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800967e:	4803      	ldr	r0, [pc, #12]	; (800968c <McpsConfirm+0x3c>)
 8009680:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8009682:	4621      	mov	r1, r4
 8009684:	2000      	movs	r0, #0
 8009686:	f7ff ff83 	bl	8009590 <LmHandlerPackagesNotify>
}
 800968a:	bd10      	pop	{r4, pc}
 800968c:	200000b4 	.word	0x200000b4
 8009690:	20000af4 	.word	0x20000af4

08009694 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8009694:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009696:	2400      	movs	r4, #0
 8009698:	e001      	b.n	800969e <LmHandlerPackageIsTxPending+0xa>
 800969a:	3401      	adds	r4, #1
 800969c:	b264      	sxtb	r4, r4
 800969e:	2c04      	cmp	r4, #4
 80096a0:	dc0a      	bgt.n	80096b8 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 80096a2:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <LmHandlerPackageIsTxPending+0x2c>)
 80096a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0f6      	beq.n	800969a <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	4798      	blx	r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d0f1      	beq.n	800969a <LmHandlerPackageIsTxPending+0x6>
 80096b6:	e000      	b.n	80096ba <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	bd10      	pop	{r4, pc}
 80096be:	bf00      	nop
 80096c0:	20000af8 	.word	0x20000af8

080096c4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 80096c4:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80096c6:	2400      	movs	r4, #0
 80096c8:	e001      	b.n	80096ce <LmHandlerPackagesProcess+0xa>
 80096ca:	3401      	adds	r4, #1
 80096cc:	b264      	sxtb	r4, r4
 80096ce:	2c04      	cmp	r4, #4
 80096d0:	dc12      	bgt.n	80096f8 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 80096d2:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <LmHandlerPackagesProcess+0x38>)
 80096d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0f6      	beq.n	80096ca <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80096dc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0f3      	beq.n	80096ca <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80096e2:	b2e0      	uxtb	r0, r4
 80096e4:	f7ff ff44 	bl	8009570 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d0ee      	beq.n	80096ca <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 80096ec:	4b03      	ldr	r3, [pc, #12]	; (80096fc <LmHandlerPackagesProcess+0x38>)
 80096ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	4798      	blx	r3
 80096f6:	e7e8      	b.n	80096ca <LmHandlerPackagesProcess+0x6>
        }
    }
}
 80096f8:	bd38      	pop	{r3, r4, r5, pc}
 80096fa:	bf00      	nop
 80096fc:	20000af8 	.word	0x20000af8

08009700 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 8009700:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8009702:	4b04      	ldr	r3, [pc, #16]	; (8009714 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 8009704:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 8009706:	4b04      	ldr	r3, [pc, #16]	; (8009718 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970c:	b103      	cbz	r3, 8009710 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800970e:	4798      	blx	r3
    }
}
 8009710:	bd08      	pop	{r3, pc}
 8009712:	bf00      	nop
 8009714:	20000b0c 	.word	0x20000b0c
 8009718:	20000af4 	.word	0x20000af4

0800971c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800971c:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800971e:	4b04      	ldr	r3, [pc, #16]	; (8009730 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 8009720:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 8009722:	4b04      	ldr	r3, [pc, #16]	; (8009734 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009728:	b103      	cbz	r3, 800972c <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800972a:	4798      	blx	r3
    }
}
 800972c:	bd08      	pop	{r3, pc}
 800972e:	bf00      	nop
 8009730:	20000b0c 	.word	0x20000b0c
 8009734:	20000af4 	.word	0x20000af4

08009738 <LmHandlerJoin>:
{
 8009738:	b530      	push	{r4, r5, lr}
 800973a:	b091      	sub	sp, #68	; 0x44
 800973c:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800973e:	2301      	movs	r3, #1
 8009740:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8009744:	4b33      	ldr	r3, [pc, #204]	; (8009814 <LmHandlerJoin+0xdc>)
 8009746:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800974a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800974e:	f993 1005 	ldrsb.w	r1, [r3, #5]
 8009752:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8009756:	2802      	cmp	r0, #2
 8009758:	d022      	beq.n	80097a0 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800975a:	2001      	movs	r0, #1
 800975c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8009760:	4b2d      	ldr	r3, [pc, #180]	; (8009818 <LmHandlerJoin+0xe0>)
 8009762:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8009764:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8009766:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8009768:	2100      	movs	r1, #0
 800976a:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800976c:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 800976e:	4b2b      	ldr	r3, [pc, #172]	; (800981c <LmHandlerJoin+0xe4>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b1f3      	cbz	r3, 80097b2 <LmHandlerJoin+0x7a>
        LoRaMacStart();
 8009774:	f004 ff1c 	bl	800e5b0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009778:	2301      	movs	r3, #1
 800977a:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800977e:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009782:	a801      	add	r0, sp, #4
 8009784:	f005 f952 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8009788:	4b24      	ldr	r3, [pc, #144]	; (800981c <LmHandlerJoin+0xe4>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	b103      	cbz	r3, 8009790 <LmHandlerJoin+0x58>
 800978e:	b114      	cbz	r4, 8009796 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 8009790:	a80b      	add	r0, sp, #44	; 0x2c
 8009792:	f005 fd45 	bl	800f220 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8009796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009798:	4b21      	ldr	r3, [pc, #132]	; (8009820 <LmHandlerJoin+0xe8>)
 800979a:	601a      	str	r2, [r3, #0]
}
 800979c:	b011      	add	sp, #68	; 0x44
 800979e:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80097a0:	2202      	movs	r2, #2
 80097a2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80097a6:	4b1c      	ldr	r3, [pc, #112]	; (8009818 <LmHandlerJoin+0xe0>)
 80097a8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 80097aa:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 80097ac:	f004 ff00 	bl	800e5b0 <LoRaMacStart>
 80097b0:	e7ea      	b.n	8009788 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 80097b2:	231f      	movs	r3, #31
 80097b4:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 80097b8:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80097bc:	a801      	add	r0, sp, #4
 80097be:	f005 f935 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 80097c2:	2320      	movs	r3, #32
 80097c4:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 80097c8:	4d12      	ldr	r5, [pc, #72]	; (8009814 <LmHandlerJoin+0xdc>)
 80097ca:	f995 3004 	ldrsb.w	r3, [r5, #4]
 80097ce:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80097d2:	a801      	add	r0, sp, #4
 80097d4:	f005 f92a 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 80097d8:	2322      	movs	r3, #34	; 0x22
 80097da:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 80097de:	f995 3005 	ldrsb.w	r3, [r5, #5]
 80097e2:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80097e6:	a801      	add	r0, sp, #4
 80097e8:	f005 f920 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 80097ec:	2321      	movs	r3, #33	; 0x21
 80097ee:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 80097f2:	f995 3005 	ldrsb.w	r3, [r5, #5]
 80097f6:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80097fa:	a801      	add	r0, sp, #4
 80097fc:	f005 f916 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8009800:	2329      	movs	r3, #41	; 0x29
 8009802:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8009806:	4b07      	ldr	r3, [pc, #28]	; (8009824 <LmHandlerJoin+0xec>)
 8009808:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800980a:	a801      	add	r0, sp, #4
 800980c:	f005 f90e 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
 8009810:	e7b0      	b.n	8009774 <LmHandlerJoin+0x3c>
 8009812:	bf00      	nop
 8009814:	20000b0c 	.word	0x20000b0c
 8009818:	20000094 	.word	0x20000094
 800981c:	20000ae8 	.word	0x20000ae8
 8009820:	20000aec 	.word	0x20000aec
 8009824:	01000400 	.word	0x01000400

08009828 <LmHandlerDeviceTimeReq>:
{
 8009828:	b500      	push	{lr}
 800982a:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800982c:	2309      	movs	r3, #9
 800982e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8009832:	a801      	add	r0, sp, #4
 8009834:	f005 fcf4 	bl	800f220 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8009838:	9a05      	ldr	r2, [sp, #20]
 800983a:	4b04      	ldr	r3, [pc, #16]	; (800984c <LmHandlerDeviceTimeReq+0x24>)
 800983c:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800983e:	b910      	cbnz	r0, 8009846 <LmHandlerDeviceTimeReq+0x1e>
}
 8009840:	b007      	add	sp, #28
 8009842:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8009846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800984a:	e7f9      	b.n	8009840 <LmHandlerDeviceTimeReq+0x18>
 800984c:	20000aec 	.word	0x20000aec

08009850 <LmHandlerGetDutyCycleWaitTime>:
}
 8009850:	4b01      	ldr	r3, [pc, #4]	; (8009858 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8009852:	6818      	ldr	r0, [r3, #0]
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20000aec 	.word	0x20000aec

0800985c <LmHandlerJoinStatus>:
{
 800985c:	b500      	push	{lr}
 800985e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009860:	2301      	movs	r3, #1
 8009862:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8009866:	4668      	mov	r0, sp
 8009868:	f004 ff6c 	bl	800e744 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800986c:	b920      	cbnz	r0, 8009878 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800986e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8009872:	b110      	cbz	r0, 800987a <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8009874:	2001      	movs	r0, #1
 8009876:	e000      	b.n	800987a <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8009878:	2000      	movs	r0, #0
}
 800987a:	b00b      	add	sp, #44	; 0x2c
 800987c:	f85d fb04 	ldr.w	pc, [sp], #4

08009880 <LmHandlerIsBusy>:
{
 8009880:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 8009882:	f004 fc43 	bl	800e10c <LoRaMacIsBusy>
 8009886:	b100      	cbz	r0, 800988a <LmHandlerIsBusy+0xa>
}
 8009888:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800988a:	f7ff ffe7 	bl	800985c <LmHandlerJoinStatus>
 800988e:	2801      	cmp	r0, #1
 8009890:	d006      	beq.n	80098a0 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8009892:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <LmHandlerIsBusy+0x28>)
 8009894:	7a19      	ldrb	r1, [r3, #8]
 8009896:	79d8      	ldrb	r0, [r3, #7]
 8009898:	f7ff ff4e 	bl	8009738 <LmHandlerJoin>
        return true;
 800989c:	2001      	movs	r0, #1
 800989e:	e7f3      	b.n	8009888 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 80098a0:	f7ff fef8 	bl	8009694 <LmHandlerPackageIsTxPending>
 80098a4:	e7f0      	b.n	8009888 <LmHandlerIsBusy+0x8>
 80098a6:	bf00      	nop
 80098a8:	20000094 	.word	0x20000094

080098ac <LmHandlerSend>:
{
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	4604      	mov	r4, r0
 80098b2:	460d      	mov	r5, r1
 80098b4:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 80098b6:	f004 fc29 	bl	800e10c <LoRaMacIsBusy>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d168      	bne.n	8009990 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 80098be:	f004 fc43 	bl	800e148 <LoRaMacIsStopped>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d167      	bne.n	8009996 <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80098c6:	f7ff ffc9 	bl	800985c <LmHandlerJoinStatus>
 80098ca:	2801      	cmp	r0, #1
 80098cc:	d137      	bne.n	800993e <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 80098ce:	4b35      	ldr	r3, [pc, #212]	; (80099a4 <LmHandlerSend+0xf8>)
 80098d0:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 80098d2:	3d00      	subs	r5, #0
 80098d4:	bf18      	it	ne
 80098d6:	2501      	movne	r5, #1
 80098d8:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80098dc:	4b32      	ldr	r3, [pc, #200]	; (80099a8 <LmHandlerSend+0xfc>)
 80098de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80098e2:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80098e6:	4669      	mov	r1, sp
 80098e8:	7860      	ldrb	r0, [r4, #1]
 80098ea:	f004 fec1 	bl	800e670 <LoRaMacQueryTxPossible>
 80098ee:	b370      	cbz	r0, 800994e <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80098f0:	2300      	movs	r3, #0
 80098f2:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80098f6:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80098f8:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80098fc:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8009900:	4b28      	ldr	r3, [pc, #160]	; (80099a4 <LmHandlerSend+0xf8>)
 8009902:	f103 0c10 	add.w	ip, r3, #16
 8009906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800990a:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800990e:	4a26      	ldr	r2, [pc, #152]	; (80099a8 <LmHandlerSend+0xfc>)
 8009910:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009914:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8009916:	4631      	mov	r1, r6
 8009918:	a801      	add	r0, sp, #4
 800991a:	f005 fd85 	bl	800f428 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800991e:	9a05      	ldr	r2, [sp, #20]
 8009920:	4b22      	ldr	r3, [pc, #136]	; (80099ac <LmHandlerSend+0x100>)
 8009922:	601a      	str	r2, [r3, #0]
    switch( status )
 8009924:	2811      	cmp	r0, #17
 8009926:	d830      	bhi.n	800998a <LmHandlerSend+0xde>
 8009928:	e8df f000 	tbb	[pc, r0]
 800992c:	2f2f1c21 	.word	0x2f2f1c21
 8009930:	382f2f2f 	.word	0x382f2f2f
 8009934:	2c2f2f2f 	.word	0x2c2f2f2f
 8009938:	1c1c2f2f 	.word	0x1c1c2f2f
 800993c:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800993e:	4b1c      	ldr	r3, [pc, #112]	; (80099b0 <LmHandlerSend+0x104>)
 8009940:	7a19      	ldrb	r1, [r3, #8]
 8009942:	79d8      	ldrb	r0, [r3, #7]
 8009944:	f7ff fef8 	bl	8009738 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009948:	f06f 0502 	mvn.w	r5, #2
 800994c:	e00c      	b.n	8009968 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800994e:	7823      	ldrb	r3, [r4, #0]
 8009950:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8009954:	7863      	ldrb	r3, [r4, #1]
 8009956:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800995a:	6863      	ldr	r3, [r4, #4]
 800995c:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800995e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009962:	e7cd      	b.n	8009900 <LmHandlerSend+0x54>
    switch( status )
 8009964:	f06f 0501 	mvn.w	r5, #1
}
 8009968:	4628      	mov	r0, r5
 800996a:	b006      	add	sp, #24
 800996c:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800996e:	4b11      	ldr	r3, [pc, #68]	; (80099b4 <LmHandlerSend+0x108>)
 8009970:	2200      	movs	r2, #0
 8009972:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8009974:	f115 0f07 	cmn.w	r5, #7
 8009978:	d0f6      	beq.n	8009968 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800997a:	2500      	movs	r5, #0
 800997c:	e7f4      	b.n	8009968 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800997e:	f06f 0504 	mvn.w	r5, #4
            break;
 8009982:	e7f1      	b.n	8009968 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8009984:	f06f 0505 	mvn.w	r5, #5
            break;
 8009988:	e7ee      	b.n	8009968 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800998a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            break;
 800998e:	e7eb      	b.n	8009968 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009990:	f06f 0501 	mvn.w	r5, #1
 8009994:	e7e8      	b.n	8009968 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009996:	f06f 0502 	mvn.w	r5, #2
 800999a:	e7e5      	b.n	8009968 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800999c:	f06f 0502 	mvn.w	r5, #2
 80099a0:	e7e2      	b.n	8009968 <LmHandlerSend+0xbc>
 80099a2:	bf00      	nop
 80099a4:	200000b4 	.word	0x200000b4
 80099a8:	20000b0c 	.word	0x20000b0c
 80099ac:	20000aec 	.word	0x20000aec
 80099b0:	20000094 	.word	0x20000094
 80099b4:	20000af0 	.word	0x20000af0

080099b8 <LmHandlerProcess>:
{
 80099b8:	b500      	push	{lr}
 80099ba:	b083      	sub	sp, #12
    LoRaMacProcess( );
 80099bc:	f004 fbd0 	bl	800e160 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 80099c0:	f7ff fe80 	bl	80096c4 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 80099c4:	f7ff fe66 	bl	8009694 <LmHandlerPackageIsTxPending>
 80099c8:	b910      	cbnz	r0, 80099d0 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 80099ca:	4b0b      	ldr	r3, [pc, #44]	; (80099f8 <LmHandlerProcess+0x40>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	b913      	cbnz	r3, 80099d6 <LmHandlerProcess+0x1e>
}
 80099d0:	b003      	add	sp, #12
 80099d2:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 80099d6:	2200      	movs	r2, #0
 80099d8:	f88d 2000 	strb.w	r2, [sp]
 80099dc:	f88d 2001 	strb.w	r2, [sp, #1]
 80099e0:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 80099e2:	4b06      	ldr	r3, [pc, #24]	; (80099fc <LmHandlerProcess+0x44>)
 80099e4:	78d9      	ldrb	r1, [r3, #3]
 80099e6:	4668      	mov	r0, sp
 80099e8:	f7ff ff60 	bl	80098ac <LmHandlerSend>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d1ef      	bne.n	80099d0 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 80099f0:	4b01      	ldr	r3, [pc, #4]	; (80099f8 <LmHandlerProcess+0x40>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	e7eb      	b.n	80099d0 <LmHandlerProcess+0x18>
 80099f8:	20000af0 	.word	0x20000af0
 80099fc:	20000b0c 	.word	0x20000b0c

08009a00 <LmHandlerRequestClass>:
{
 8009a00:	b510      	push	{r4, lr}
 8009a02:	b08a      	sub	sp, #40	; 0x28
 8009a04:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 8009a06:	f004 fb81 	bl	800e10c <LoRaMacIsBusy>
 8009a0a:	bbb0      	cbnz	r0, 8009a7a <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8009a0c:	f7ff ff26 	bl	800985c <LmHandlerJoinStatus>
 8009a10:	2801      	cmp	r0, #1
 8009a12:	d135      	bne.n	8009a80 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 8009a14:	2300      	movs	r3, #0
 8009a16:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009a1a:	4668      	mov	r0, sp
 8009a1c:	f004 fe92 	bl	800e744 <LoRaMacMibGetRequestConfirm>
 8009a20:	bb88      	cbnz	r0, 8009a86 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 8009a22:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	d030      	beq.n	8009a8c <LmHandlerRequestClass+0x8c>
        switch( newClass )
 8009a2a:	2c01      	cmp	r4, #1
 8009a2c:	d030      	beq.n	8009a90 <LmHandlerRequestClass+0x90>
 8009a2e:	2c02      	cmp	r4, #2
 8009a30:	d014      	beq.n	8009a5c <LmHandlerRequestClass+0x5c>
 8009a32:	b114      	cbz	r4, 8009a3a <LmHandlerRequestClass+0x3a>
 8009a34:	2000      	movs	r0, #0
}
 8009a36:	b00a      	add	sp, #40	; 0x28
 8009a38:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 8009a3a:	b90b      	cbnz	r3, 8009a40 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e7fa      	b.n	8009a36 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 8009a40:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009a44:	4668      	mov	r0, sp
 8009a46:	f004 fff1 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
 8009a4a:	bb20      	cbnz	r0, 8009a96 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8009a4c:	4b18      	ldr	r3, [pc, #96]	; (8009ab0 <LmHandlerRequestClass+0xb0>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a52:	b31b      	cbz	r3, 8009a9c <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8009a54:	4620      	mov	r0, r4
 8009a56:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7ec      	b.n	8009a36 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 8009a5c:	bb03      	cbnz	r3, 8009aa0 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 8009a5e:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009a62:	4668      	mov	r0, sp
 8009a64:	f004 ffe2 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
 8009a68:	b9e8      	cbnz	r0, 8009aa6 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8009a6a:	4b11      	ldr	r3, [pc, #68]	; (8009ab0 <LmHandlerRequestClass+0xb0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a70:	b1e3      	cbz	r3, 8009aac <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8009a72:	4620      	mov	r0, r4
 8009a74:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009a76:	2000      	movs	r0, #0
 8009a78:	e7dd      	b.n	8009a36 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009a7a:	f06f 0001 	mvn.w	r0, #1
 8009a7e:	e7da      	b.n	8009a36 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009a80:	f06f 0002 	mvn.w	r0, #2
 8009a84:	e7d7      	b.n	8009a36 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 8009a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a8a:	e7d4      	b.n	8009a36 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e7d2      	b.n	8009a36 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a94:	e7cf      	b.n	8009a36 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a9a:	e7cc      	b.n	8009a36 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	e7ca      	b.n	8009a36 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8009aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aa4:	e7c7      	b.n	8009a36 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8009aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aaa:	e7c4      	b.n	8009a36 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009aac:	2000      	movs	r0, #0
 8009aae:	e7c2      	b.n	8009a36 <LmHandlerRequestClass+0x36>
 8009ab0:	20000af4 	.word	0x20000af4

08009ab4 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8009ab4:	b170      	cbz	r0, 8009ad4 <LmHandlerGetCurrentClass+0x20>
{
 8009ab6:	b510      	push	{r4, lr}
 8009ab8:	b08a      	sub	sp, #40	; 0x28
 8009aba:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8009abc:	2300      	movs	r3, #0
 8009abe:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009ac2:	4668      	mov	r0, sp
 8009ac4:	f004 fe3e 	bl	800e744 <LoRaMacMibGetRequestConfirm>
 8009ac8:	b938      	cbnz	r0, 8009ada <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8009aca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009ace:	7023      	strb	r3, [r4, #0]
}
 8009ad0:	b00a      	add	sp, #40	; 0x28
 8009ad2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009ad8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ade:	e7f7      	b.n	8009ad0 <LmHandlerGetCurrentClass+0x1c>

08009ae0 <McpsIndication>:
{
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8009aea:	4a1d      	ldr	r2, [pc, #116]	; (8009b60 <McpsIndication+0x80>)
 8009aec:	2301      	movs	r3, #1
 8009aee:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8009af0:	7843      	ldrb	r3, [r0, #1]
 8009af2:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d131      	bne.n	8009b5c <McpsIndication+0x7c>
 8009af8:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8009afa:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8009afe:	4b18      	ldr	r3, [pc, #96]	; (8009b60 <McpsIndication+0x80>)
 8009b00:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8009b02:	f9b1 2000 	ldrsh.w	r2, [r1]
 8009b06:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8009b08:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8009b0c:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8009b0e:	78ca      	ldrb	r2, [r1, #3]
 8009b10:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8009b12:	6902      	ldr	r2, [r0, #16]
 8009b14:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 8009b16:	78c3      	ldrb	r3, [r0, #3]
 8009b18:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8009b1c:	7b03      	ldrb	r3, [r0, #12]
 8009b1e:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8009b22:	6883      	ldr	r3, [r0, #8]
 8009b24:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 8009b26:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <McpsIndication+0x84>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	b113      	cbz	r3, 8009b34 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8009b2e:	490c      	ldr	r1, [pc, #48]	; (8009b60 <McpsIndication+0x80>)
 8009b30:	a802      	add	r0, sp, #8
 8009b32:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8009b34:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <McpsIndication+0x84>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3a:	b113      	cbz	r3, 8009b42 <McpsIndication+0x62>
 8009b3c:	7e22      	ldrb	r2, [r4, #24]
 8009b3e:	b102      	cbz	r2, 8009b42 <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8009b40:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8009b42:	4621      	mov	r1, r4
 8009b44:	2001      	movs	r0, #1
 8009b46:	f7ff fd23 	bl	8009590 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8009b4a:	f10d 0007 	add.w	r0, sp, #7
 8009b4e:	f7ff ffb1 	bl	8009ab4 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8009b52:	7963      	ldrb	r3, [r4, #5]
 8009b54:	b113      	cbz	r3, 8009b5c <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 8009b56:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <McpsIndication+0x88>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	701a      	strb	r2, [r3, #0]
}
 8009b5c:	b004      	add	sp, #16
 8009b5e:	bd10      	pop	{r4, pc}
 8009b60:	200000a0 	.word	0x200000a0
 8009b64:	20000af4 	.word	0x20000af4
 8009b68:	20000af0 	.word	0x20000af0

08009b6c <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8009b6c:	b180      	cbz	r0, 8009b90 <LmHandlerGetTxDatarate+0x24>
{
 8009b6e:	b510      	push	{r4, lr}
 8009b70:	b08a      	sub	sp, #40	; 0x28
 8009b72:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8009b74:	2320      	movs	r3, #32
 8009b76:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8009b7a:	4668      	mov	r0, sp
 8009b7c:	f004 fde2 	bl	800e744 <LoRaMacMibGetRequestConfirm>
 8009b80:	b948      	cbnz	r0, 8009b96 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8009b82:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8009b86:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8009b88:	4a04      	ldr	r2, [pc, #16]	; (8009b9c <LmHandlerGetTxDatarate+0x30>)
 8009b8a:	7113      	strb	r3, [r2, #4]
}
 8009b8c:	b00a      	add	sp, #40	; 0x28
 8009b8e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009b94:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b9a:	e7f7      	b.n	8009b8c <LmHandlerGetTxDatarate+0x20>
 8009b9c:	20000b0c 	.word	0x20000b0c

08009ba0 <LmHandlerSetSystemMaxRxError>:
{
 8009ba0:	b500      	push	{lr}
 8009ba2:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8009ba4:	2323      	movs	r3, #35	; 0x23
 8009ba6:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8009baa:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009bac:	4668      	mov	r0, sp
 8009bae:	f004 ff3d 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
 8009bb2:	b910      	cbnz	r0, 8009bba <LmHandlerSetSystemMaxRxError+0x1a>
}
 8009bb4:	b00b      	add	sp, #44	; 0x2c
 8009bb6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bbe:	e7f9      	b.n	8009bb4 <LmHandlerSetSystemMaxRxError+0x14>

08009bc0 <LmHandlerConfigure>:
{
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	b08e      	sub	sp, #56	; 0x38
 8009bc4:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8009bc6:	4c6d      	ldr	r4, [pc, #436]	; (8009d7c <LmHandlerConfigure+0x1bc>)
 8009bc8:	2218      	movs	r2, #24
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f009 f8b7 	bl	8012d3e <memcpy1>
    IsUplinkTxPending = false;
 8009bd0:	4b6b      	ldr	r3, [pc, #428]	; (8009d80 <LmHandlerConfigure+0x1c0>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8009bd6:	f7fa f845 	bl	8003c64 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8009bda:	7822      	ldrb	r2, [r4, #0]
 8009bdc:	2301      	movs	r3, #1
 8009bde:	4093      	lsls	r3, r2
 8009be0:	6841      	ldr	r1, [r0, #4]
 8009be2:	420b      	tst	r3, r1
 8009be4:	d106      	bne.n	8009bf4 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8009be6:	4b67      	ldr	r3, [pc, #412]	; (8009d84 <LmHandlerConfigure+0x1c4>)
 8009be8:	2201      	movs	r2, #1
 8009bea:	2100      	movs	r1, #0
 8009bec:	4608      	mov	r0, r1
 8009bee:	f00a ff83 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8009bf2:	e7fe      	b.n	8009bf2 <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8009bf4:	4964      	ldr	r1, [pc, #400]	; (8009d88 <LmHandlerConfigure+0x1c8>)
 8009bf6:	4865      	ldr	r0, [pc, #404]	; (8009d8c <LmHandlerConfigure+0x1cc>)
 8009bf8:	f004 fafa 	bl	800e1f0 <LoRaMacInitialization>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	f040 80b7 	bne.w	8009d70 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 8009c02:	2327      	movs	r3, #39	; 0x27
 8009c04:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009c08:	a804      	add	r0, sp, #16
 8009c0a:	f004 ff0f 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d17c      	bne.n	8009d0c <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 8009c12:	4b5f      	ldr	r3, [pc, #380]	; (8009d90 <LmHandlerConfigure+0x1d0>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 8009c18:	4b5d      	ldr	r3, [pc, #372]	; (8009d90 <LmHandlerConfigure+0x1d0>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 809e 	beq.w	8009d5e <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8009c22:	4b5c      	ldr	r3, [pc, #368]	; (8009d94 <LmHandlerConfigure+0x1d4>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	b10b      	cbz	r3, 8009c2e <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8009c2e:	2327      	movs	r3, #39	; 0x27
 8009c30:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8009c34:	a804      	add	r0, sp, #16
 8009c36:	f004 fd85 	bl	800e744 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 8009c3a:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 8009c3c:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 8009c40:	4b4e      	ldr	r3, [pc, #312]	; (8009d7c <LmHandlerConfigure+0x1bc>)
 8009c42:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8009c44:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 8009c48:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8009c4a:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 8009c4e:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8009c50:	4b4d      	ldr	r3, [pc, #308]	; (8009d88 <LmHandlerConfigure+0x1c8>)
 8009c52:	68d9      	ldr	r1, [r3, #12]
 8009c54:	6898      	ldr	r0, [r3, #8]
 8009c56:	f008 ff85 	bl	8012b64 <SecureElementInitMcuID>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f040 808b 	bne.w	8009d76 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 8009c60:	2306      	movs	r3, #6
 8009c62:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009c66:	a804      	add	r0, sp, #16
 8009c68:	f004 fd6c 	bl	800e744 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8009c6c:	4c4a      	ldr	r4, [pc, #296]	; (8009d98 <LmHandlerConfigure+0x1d8>)
 8009c6e:	9b05      	ldr	r3, [sp, #20]
 8009c70:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009c72:	a804      	add	r0, sp, #16
 8009c74:	f004 feda 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 8009c7e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009c80:	a804      	add	r0, sp, #16
 8009c82:	f004 fd5f 	bl	800e744 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 8009c86:	2303      	movs	r3, #3
 8009c88:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 8009c8c:	3408      	adds	r4, #8
 8009c8e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009c90:	a804      	add	r0, sp, #16
 8009c92:	f004 fd57 	bl	800e744 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 8009c96:	f008 ffff 	bl	8012c98 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8009c9a:	260f      	movs	r6, #15
 8009c9c:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009ca6:	a804      	add	r0, sp, #16
 8009ca8:	f004 fec0 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8009cac:	2310      	movs	r3, #16
 8009cae:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8009cb2:	2500      	movs	r5, #0
 8009cb4:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009cb8:	eb0d 0003 	add.w	r0, sp, r3
 8009cbc:	f004 feb6 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8009cc6:	4c2d      	ldr	r4, [pc, #180]	; (8009d7c <LmHandlerConfigure+0x1bc>)
 8009cc8:	78a3      	ldrb	r3, [r4, #2]
 8009cca:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009cce:	a804      	add	r0, sp, #16
 8009cd0:	f004 feac 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8009cd4:	233a      	movs	r3, #58	; 0x3a
 8009cd6:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8009cda:	6963      	ldr	r3, [r4, #20]
 8009cdc:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009cde:	a804      	add	r0, sp, #16
 8009ce0:	f004 fea4 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009ce4:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8009ce8:	a902      	add	r1, sp, #8
 8009cea:	7820      	ldrb	r0, [r4, #0]
 8009cec:	f006 fdda 	bl	80108a4 <RegionGetPhyParam>
 8009cf0:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8009cf2:	1b43      	subs	r3, r0, r5
 8009cf4:	bf18      	it	ne
 8009cf6:	2301      	movne	r3, #1
 8009cf8:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 8009cfa:	2014      	movs	r0, #20
 8009cfc:	f7ff ff50 	bl	8009ba0 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8009d00:	79e0      	ldrb	r0, [r4, #7]
 8009d02:	f005 fc7f 	bl	800f604 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8009d06:	4628      	mov	r0, r5
}
 8009d08:	b00e      	add	sp, #56	; 0x38
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8009d0c:	2328      	movs	r3, #40	; 0x28
 8009d0e:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8009d12:	4b20      	ldr	r3, [pc, #128]	; (8009d94 <LmHandlerConfigure+0x1d4>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	b14b      	cbz	r3, 8009d2e <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8009d1a:	a804      	add	r0, sp, #16
 8009d1c:	f004 fd12 	bl	800e744 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8009d20:	4b1c      	ldr	r3, [pc, #112]	; (8009d94 <LmHandlerConfigure+0x1d4>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f240 51cc 	movw	r1, #1484	; 0x5cc
 8009d2a:	9805      	ldr	r0, [sp, #20]
 8009d2c:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8009d2e:	2327      	movs	r3, #39	; 0x27
 8009d30:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009d34:	a804      	add	r0, sp, #16
 8009d36:	f004 fe79 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	f47f af6c 	bne.w	8009c18 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8009d46:	a804      	add	r0, sp, #16
 8009d48:	f004 fcfc 	bl	800e744 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009d4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f43f af61 	beq.w	8009c18 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 8009d56:	4b0e      	ldr	r3, [pc, #56]	; (8009d90 <LmHandlerConfigure+0x1d0>)
 8009d58:	2201      	movs	r2, #1
 8009d5a:	701a      	strb	r2, [r3, #0]
 8009d5c:	e75c      	b.n	8009c18 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 8009d5e:	2305      	movs	r3, #5
 8009d60:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8009d64:	2300      	movs	r3, #0
 8009d66:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009d68:	a804      	add	r0, sp, #16
 8009d6a:	f004 fe5f 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
 8009d6e:	e76f      	b.n	8009c50 <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d74:	e7c8      	b.n	8009d08 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 8009d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d7a:	e7c5      	b.n	8009d08 <LmHandlerConfigure+0x148>
 8009d7c:	20000b0c 	.word	0x20000b0c
 8009d80:	20000af0 	.word	0x20000af0
 8009d84:	0801a6cc 	.word	0x0801a6cc
 8009d88:	20000b34 	.word	0x20000b34
 8009d8c:	20000b4c 	.word	0x20000b4c
 8009d90:	20000ae8 	.word	0x20000ae8
 8009d94:	20000af4 	.word	0x20000af4
 8009d98:	20000ad0 	.word	0x20000ad0

08009d9c <LmHandlerPackageRegister>:
{
 8009d9c:	b530      	push	{r4, r5, lr}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 8009da2:	2300      	movs	r3, #0
 8009da4:	9301      	str	r3, [sp, #4]
    switch( id )
 8009da6:	4604      	mov	r4, r0
 8009da8:	b9d8      	cbnz	r0, 8009de2 <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 8009daa:	f000 fe27 	bl	800a9fc <LmhpCompliancePackageFactory>
 8009dae:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	b1f3      	cbz	r3, 8009df2 <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 8009db4:	4a10      	ldr	r2, [pc, #64]	; (8009df8 <LmHandlerPackageRegister+0x5c>)
 8009db6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8009dba:	4a10      	ldr	r2, [pc, #64]	; (8009dfc <LmHandlerPackageRegister+0x60>)
 8009dbc:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8009dbe:	4a10      	ldr	r2, [pc, #64]	; (8009e00 <LmHandlerPackageRegister+0x64>)
 8009dc0:	6812      	ldr	r2, [r2, #0]
 8009dc2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009dc4:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8009dc6:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8009dc8:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8009dca:	490e      	ldr	r1, [pc, #56]	; (8009e04 <LmHandlerPackageRegister+0x68>)
 8009dcc:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8009dce:	6992      	ldr	r2, [r2, #24]
 8009dd0:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	22f2      	movs	r2, #242	; 0xf2
 8009dd6:	490c      	ldr	r1, [pc, #48]	; (8009e08 <LmHandlerPackageRegister+0x6c>)
 8009dd8:	4628      	mov	r0, r5
 8009dda:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8009ddc:	2000      	movs	r0, #0
}
 8009dde:	b003      	add	sp, #12
 8009de0:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8009de2:	a901      	add	r1, sp, #4
 8009de4:	f001 faa4 	bl	800b330 <LmhpPackagesRegister>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d0e1      	beq.n	8009db0 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009df0:	e7f5      	b.n	8009dde <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 8009df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009df6:	e7f2      	b.n	8009dde <LmHandlerPackageRegister+0x42>
 8009df8:	20000af8 	.word	0x20000af8
 8009dfc:	08009739 	.word	0x08009739
 8009e00:	20000af4 	.word	0x20000af4
 8009e04:	08009829 	.word	0x08009829
 8009e08:	200009dc 	.word	0x200009dc

08009e0c <LmHandlerInit>:
{
 8009e0c:	b500      	push	{lr}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 8009e12:	4b19      	ldr	r3, [pc, #100]	; (8009e78 <LmHandlerInit+0x6c>)
 8009e14:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8009e16:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <LmHandlerInit+0x70>)
 8009e18:	4a19      	ldr	r2, [pc, #100]	; (8009e80 <LmHandlerInit+0x74>)
 8009e1a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8009e1c:	4a19      	ldr	r2, [pc, #100]	; (8009e84 <LmHandlerInit+0x78>)
 8009e1e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8009e20:	4a19      	ldr	r2, [pc, #100]	; (8009e88 <LmHandlerInit+0x7c>)
 8009e22:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8009e24:	4a19      	ldr	r2, [pc, #100]	; (8009e8c <LmHandlerInit+0x80>)
 8009e26:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8009e28:	6802      	ldr	r2, [r0, #0]
 8009e2a:	4b19      	ldr	r3, [pc, #100]	; (8009e90 <LmHandlerInit+0x84>)
 8009e2c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8009e2e:	6842      	ldr	r2, [r0, #4]
 8009e30:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8009e32:	6882      	ldr	r2, [r0, #8]
 8009e34:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8009e36:	68c2      	ldr	r2, [r0, #12]
 8009e38:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8009e3a:	4a16      	ldr	r2, [pc, #88]	; (8009e94 <LmHandlerInit+0x88>)
 8009e3c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8009e3e:	6982      	ldr	r2, [r0, #24]
 8009e40:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8009e42:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <LmHandlerInit+0x8c>)
 8009e44:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8009e46:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009e48:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8009e4a:	4a14      	ldr	r2, [pc, #80]	; (8009e9c <LmHandlerInit+0x90>)
 8009e4c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 8009e4e:	4a14      	ldr	r2, [pc, #80]	; (8009ea0 <LmHandlerInit+0x94>)
 8009e50:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8009e52:	4619      	mov	r1, r3
 8009e54:	2000      	movs	r0, #0
 8009e56:	f7ff ffa1 	bl	8009d9c <LmHandlerPackageRegister>
 8009e5a:	b930      	cbnz	r0, 8009e6a <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8009e5c:	a801      	add	r0, sp, #4
 8009e5e:	f001 fa41 	bl	800b2e4 <LmhpPackagesRegistrationInit>
 8009e62:	b928      	cbnz	r0, 8009e70 <LmHandlerInit+0x64>
}
 8009e64:	b003      	add	sp, #12
 8009e66:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8009e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e6e:	e7f9      	b.n	8009e64 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 8009e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e74:	e7f6      	b.n	8009e64 <LmHandlerInit+0x58>
 8009e76:	bf00      	nop
 8009e78:	20000af4 	.word	0x20000af4
 8009e7c:	20000b4c 	.word	0x20000b4c
 8009e80:	08009651 	.word	0x08009651
 8009e84:	08009ae1 	.word	0x08009ae1
 8009e88:	08009f51 	.word	0x08009f51
 8009e8c:	080095fd 	.word	0x080095fd
 8009e90:	20000b34 	.word	0x20000b34
 8009e94:	08010855 	.word	0x08010855
 8009e98:	20000b24 	.word	0x20000b24
 8009e9c:	08009701 	.word	0x08009701
 8009ea0:	0800971d 	.word	0x0800971d

08009ea4 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 8009ea4:	b161      	cbz	r1, 8009ec0 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 8009ea6:	b118      	cbz	r0, 8009eb0 <LmHandlerGetVersion+0xc>
 8009ea8:	2801      	cmp	r0, #1
 8009eaa:	d005      	beq.n	8009eb8 <LmHandlerGetVersion+0x14>
 8009eac:	2000      	movs	r0, #0
 8009eae:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8009eb0:	4a05      	ldr	r2, [pc, #20]	; (8009ec8 <LmHandlerGetVersion+0x24>)
 8009eb2:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8009eb4:	2000      	movs	r0, #0
            break;
 8009eb6:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8009eb8:	4a04      	ldr	r2, [pc, #16]	; (8009ecc <LmHandlerGetVersion+0x28>)
 8009eba:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8009ebc:	2000      	movs	r0, #0
            break;
 8009ebe:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	01000400 	.word	0x01000400
 8009ecc:	02010001 	.word	0x02010001

08009ed0 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8009ed0:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8009ed2:	f005 fbb5 	bl	800f640 <LoRaMacDeInitialization>
 8009ed6:	b900      	cbnz	r0, 8009eda <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009ed8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009eda:	f06f 0001 	mvn.w	r0, #1
 8009ede:	e7fb      	b.n	8009ed8 <LmHandlerStop+0x8>

08009ee0 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8009ee0:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8009ee2:	f004 fb93 	bl	800e60c <LoRaMacHalt>
 8009ee6:	b900      	cbnz	r0, 8009eea <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009ee8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009eea:	f06f 0001 	mvn.w	r0, #1
 8009eee:	e7fb      	b.n	8009ee8 <LmHandlerHalt+0x8>

08009ef0 <LmHandlerGetDutyCycleEnable>:
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetDutyCycleEnable( bool *dutyCycleEnable )
{
    if( dutyCycleEnable == NULL )
 8009ef0:	b120      	cbz	r0, 8009efc <LmHandlerGetDutyCycleEnable+0xc>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 8009ef2:	4a04      	ldr	r2, [pc, #16]	; (8009f04 <LmHandlerGetDutyCycleEnable+0x14>)
 8009ef4:	79d2      	ldrb	r2, [r2, #7]
 8009ef6:	7002      	strb	r2, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8009ef8:	2000      	movs	r0, #0
 8009efa:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20000b0c 	.word	0x20000b0c

08009f08 <LmHandlerSetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerSetDutyCycleEnable( bool dutyCycleEnable )
{
 8009f08:	b508      	push	{r3, lr}
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 8009f0a:	4b03      	ldr	r3, [pc, #12]	; (8009f18 <LmHandlerSetDutyCycleEnable+0x10>)
 8009f0c:	71d8      	strb	r0, [r3, #7]
    LoRaMacTestSetDutyCycleOn( dutyCycleEnable );
 8009f0e:	f005 fb79 	bl	800f604 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
}
 8009f12:	2000      	movs	r0, #0
 8009f14:	bd08      	pop	{r3, pc}
 8009f16:	bf00      	nop
 8009f18:	20000b0c 	.word	0x20000b0c

08009f1c <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8009f1c:	b180      	cbz	r0, 8009f40 <LmHandlerGetTxPower+0x24>
{
 8009f1e:	b510      	push	{r4, lr}
 8009f20:	b08a      	sub	sp, #40	; 0x28
 8009f22:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8009f24:	2321      	movs	r3, #33	; 0x21
 8009f26:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009f2a:	4668      	mov	r0, sp
 8009f2c:	f004 fc0a 	bl	800e744 <LoRaMacMibGetRequestConfirm>
 8009f30:	b948      	cbnz	r0, 8009f46 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8009f32:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8009f36:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 8009f38:	4a04      	ldr	r2, [pc, #16]	; (8009f4c <LmHandlerGetTxPower+0x30>)
 8009f3a:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 8009f3c:	b00a      	add	sp, #40	; 0x28
 8009f3e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8009f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009f44:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f4a:	e7f7      	b.n	8009f3c <LmHandlerGetTxPower+0x20>
 8009f4c:	20000b0c 	.word	0x20000b0c

08009f50 <MlmeConfirm>:
{
 8009f50:	b510      	push	{r4, lr}
 8009f52:	b08a      	sub	sp, #40	; 0x28
 8009f54:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8009f56:	4b2c      	ldr	r3, [pc, #176]	; (800a008 <MlmeConfirm+0xb8>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8009f5c:	7842      	ldrb	r2, [r0, #1]
 8009f5e:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8009f60:	4b2a      	ldr	r3, [pc, #168]	; (800a00c <MlmeConfirm+0xbc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f66:	b10b      	cbz	r3, 8009f6c <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8009f68:	4827      	ldr	r0, [pc, #156]	; (800a008 <MlmeConfirm+0xb8>)
 8009f6a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	2002      	movs	r0, #2
 8009f70:	f7ff fb0e 	bl	8009590 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8009f74:	7823      	ldrb	r3, [r4, #0]
 8009f76:	2b05      	cmp	r3, #5
 8009f78:	d037      	beq.n	8009fea <MlmeConfirm+0x9a>
 8009f7a:	2b0b      	cmp	r3, #11
 8009f7c:	d03d      	beq.n	8009ffa <MlmeConfirm+0xaa>
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d001      	beq.n	8009f86 <MlmeConfirm+0x36>
}
 8009f82:	b00a      	add	sp, #40	; 0x28
 8009f84:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 8009f86:	2306      	movs	r3, #6
 8009f88:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8009f8c:	4668      	mov	r0, sp
 8009f8e:	f004 fbd9 	bl	800e744 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8009f92:	9901      	ldr	r1, [sp, #4]
 8009f94:	4b1e      	ldr	r3, [pc, #120]	; (800a010 <MlmeConfirm+0xc0>)
 8009f96:	79d8      	ldrb	r0, [r3, #7]
 8009f98:	f008 fdc2 	bl	8012b20 <SecureElementSetDevAddr>
 8009f9c:	b910      	cbnz	r0, 8009fa4 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8009f9e:	9a01      	ldr	r2, [sp, #4]
 8009fa0:	4b1c      	ldr	r3, [pc, #112]	; (800a014 <MlmeConfirm+0xc4>)
 8009fa2:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8009fa4:	4c1a      	ldr	r4, [pc, #104]	; (800a010 <MlmeConfirm+0xc0>)
 8009fa6:	1d20      	adds	r0, r4, #4
 8009fa8:	f7ff fde0 	bl	8009b6c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8009fac:	1d60      	adds	r0, r4, #5
 8009fae:	f7ff ffb5 	bl	8009f1c <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009fb2:	4b15      	ldr	r3, [pc, #84]	; (800a008 <MlmeConfirm+0xb8>)
 8009fb4:	785b      	ldrb	r3, [r3, #1]
 8009fb6:	b18b      	cbz	r3, 8009fdc <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8009fb8:	4b15      	ldr	r3, [pc, #84]	; (800a010 <MlmeConfirm+0xc0>)
 8009fba:	22ff      	movs	r2, #255	; 0xff
 8009fbc:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8009fbe:	4b13      	ldr	r3, [pc, #76]	; (800a00c <MlmeConfirm+0xbc>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	b10b      	cbz	r3, 8009fca <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8009fc6:	4812      	ldr	r0, [pc, #72]	; (800a010 <MlmeConfirm+0xc0>)
 8009fc8:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009fca:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <MlmeConfirm+0xb8>)
 8009fcc:	785b      	ldrb	r3, [r3, #1]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1d7      	bne.n	8009f82 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8009fd2:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <MlmeConfirm+0xc0>)
 8009fd4:	79d8      	ldrb	r0, [r3, #7]
 8009fd6:	f008 fe71 	bl	8012cbc <SecureElementPrintSessionKeys>
            break;
 8009fda:	e7d2      	b.n	8009f82 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8009fdc:	2200      	movs	r2, #0
 8009fde:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8009fe0:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <MlmeConfirm+0xc8>)
 8009fe2:	7858      	ldrb	r0, [r3, #1]
 8009fe4:	f7ff fd0c 	bl	8009a00 <LmHandlerRequestClass>
 8009fe8:	e7e9      	b.n	8009fbe <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 8009fea:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <MlmeConfirm+0xcc>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8009ff0:	7a22      	ldrb	r2, [r4, #8]
 8009ff2:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8009ff4:	7a62      	ldrb	r2, [r4, #9]
 8009ff6:	74da      	strb	r2, [r3, #19]
            break;
 8009ff8:	e7c3      	b.n	8009f82 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009ffa:	7863      	ldrb	r3, [r4, #1]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d0c0      	beq.n	8009f82 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 800a000:	f7ff fc12 	bl	8009828 <LmHandlerDeviceTimeReq>
}
 800a004:	e7bd      	b.n	8009f82 <MlmeConfirm+0x32>
 800a006:	bf00      	nop
 800a008:	200000b4 	.word	0x200000b4
 800a00c:	20000af4 	.word	0x20000af4
 800a010:	20000094 	.word	0x20000094
 800a014:	20000ad0 	.word	0x20000ad0
 800a018:	20000b0c 	.word	0x20000b0c
 800a01c:	200000a0 	.word	0x200000a0

0800a020 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800a020:	b510      	push	{r4, lr}
 800a022:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800a024:	f7ff ff5c 	bl	8009ee0 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800a028:	4604      	mov	r4, r0
 800a02a:	b148      	cbz	r0, 800a040 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800a02c:	b92c      	cbnz	r4, 800a03a <LmHandlerNvmDataStore+0x1a>
 800a02e:	4b18      	ldr	r3, [pc, #96]	; (800a090 <LmHandlerNvmDataStore+0x70>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69db      	ldr	r3, [r3, #28]
 800a034:	b10b      	cbz	r3, 800a03a <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800a036:	2001      	movs	r0, #1
 800a038:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800a03a:	4620      	mov	r0, r4
 800a03c:	b00a      	add	sp, #40	; 0x28
 800a03e:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800a040:	f006 fc10 	bl	8010864 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 800a044:	f110 0f02 	cmn.w	r0, #2
 800a048:	d012      	beq.n	800a070 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800a04a:	b9d0      	cbnz	r0, 800a082 <LmHandlerNvmDataStore+0x62>
 800a04c:	4b10      	ldr	r3, [pc, #64]	; (800a090 <LmHandlerNvmDataStore+0x70>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	b1cb      	cbz	r3, 800a088 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 800a054:	2327      	movs	r3, #39	; 0x27
 800a056:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800a05a:	4668      	mov	r0, sp
 800a05c:	f004 fb72 	bl	800e744 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800a060:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <LmHandlerNvmDataStore+0x70>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 800a06a:	9801      	ldr	r0, [sp, #4]
 800a06c:	4798      	blx	r3
 800a06e:	e001      	b.n	800a074 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800a070:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800a074:	f006 fc06 	bl	8010884 <NvmDataMgmtStoreEnd>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d0d7      	beq.n	800a02c <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800a07c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a080:	e7db      	b.n	800a03a <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800a082:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a086:	e7f5      	b.n	800a074 <LmHandlerNvmDataStore+0x54>
 800a088:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a08c:	e7f2      	b.n	800a074 <LmHandlerNvmDataStore+0x54>
 800a08e:	bf00      	nop
 800a090:	20000af4 	.word	0x20000af4

0800a094 <LmhpClockSyncIsInitialized>:
}

static bool LmhpClockSyncIsInitialized( void )
{
    return LmhpClockSyncState.Initialized;
}
 800a094:	4b01      	ldr	r3, [pc, #4]	; (800a09c <LmhpClockSyncIsInitialized+0x8>)
 800a096:	7818      	ldrb	r0, [r3, #0]
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20000b5c 	.word	0x20000b5c

0800a0a0 <LmhpClockSyncIsTxPending>:

static bool LmhpClockSyncIsTxPending( void )
{
    return LmhpClockSyncState.IsTxPending;
}
 800a0a0:	4b01      	ldr	r3, [pc, #4]	; (800a0a8 <LmhpClockSyncIsTxPending+0x8>)
 800a0a2:	7858      	ldrb	r0, [r3, #1]
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	20000b5c 	.word	0x20000b5c

0800a0ac <OnPeriodicTimeStartTimer>:

    return status;
}

static void OnPeriodicTimeStartTimer( void *context )
{
 800a0ac:	b508      	push	{r3, lr}
    LmhpClockSyncState.NbTransmissions = 1;
 800a0ae:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <OnPeriodicTimeStartTimer+0x18>)
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	739a      	strb	r2, [r3, #14]
    TimerStart( &PeriodicTimeStartTimer );
 800a0b4:	4804      	ldr	r0, [pc, #16]	; (800a0c8 <OnPeriodicTimeStartTimer+0x1c>)
 800a0b6:	f00b f8c1 	bl	801523c <UTIL_TIMER_Start>
    if( LmhpClockSyncPackage.OnPackageProcessEvent != NULL )
 800a0ba:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <OnPeriodicTimeStartTimer+0x20>)
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	b103      	cbz	r3, 800a0c2 <OnPeriodicTimeStartTimer+0x16>
    {
        LmhpClockSyncPackage.OnPackageProcessEvent();
 800a0c0:	4798      	blx	r3
    }
}
 800a0c2:	bd08      	pop	{r3, pc}
 800a0c4:	20000b5c 	.word	0x20000b5c
 800a0c8:	20000b6c 	.word	0x20000b6c
 800a0cc:	200000d0 	.word	0x200000d0

0800a0d0 <LmhpClockSyncOnMcpsIndication>:
    if( mcpsIndication->Port != CLOCK_SYNC_PORT )
 800a0d0:	78c3      	ldrb	r3, [r0, #3]
 800a0d2:	2bca      	cmp	r3, #202	; 0xca
 800a0d4:	f040 80eb 	bne.w	800a2ae <LmhpClockSyncOnMcpsIndication+0x1de>
{
 800a0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	4606      	mov	r6, r0
    uint8_t dataBufferIndex = 0;
 800a0e0:	2500      	movs	r5, #0
    uint8_t cmdIndex = 0;
 800a0e2:	462c      	mov	r4, r5
 800a0e4:	e00e      	b.n	800a104 <LmhpClockSyncOnMcpsIndication+0x34>
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_PKG_VERSION_ANS;
 800a0e6:	4b72      	ldr	r3, [pc, #456]	; (800a2b0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800a0e8:	6859      	ldr	r1, [r3, #4]
 800a0ea:	1c68      	adds	r0, r5, #1
 800a0ec:	b2c0      	uxtb	r0, r0
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	554b      	strb	r3, [r1, r5]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_ID;
 800a0f2:	1cab      	adds	r3, r5, #2
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2401      	movs	r4, #1
 800a0f8:	540c      	strb	r4, [r1, r0]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_VERSION;
 800a0fa:	3503      	adds	r5, #3
 800a0fc:	b2ed      	uxtb	r5, r5
 800a0fe:	2002      	movs	r0, #2
 800a100:	54c8      	strb	r0, [r1, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a102:	4614      	mov	r4, r2
    while( cmdIndex < mcpsIndication->BufferSize )
 800a104:	7b33      	ldrb	r3, [r6, #12]
 800a106:	42a3      	cmp	r3, r4
 800a108:	f240 80b4 	bls.w	800a274 <LmhpClockSyncOnMcpsIndication+0x1a4>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a10c:	68b1      	ldr	r1, [r6, #8]
 800a10e:	1c63      	adds	r3, r4, #1
 800a110:	b2da      	uxtb	r2, r3
 800a112:	5d0b      	ldrb	r3, [r1, r4]
 800a114:	2b03      	cmp	r3, #3
 800a116:	f200 80ab 	bhi.w	800a270 <LmhpClockSyncOnMcpsIndication+0x1a0>
 800a11a:	a001      	add	r0, pc, #4	; (adr r0, 800a120 <LmhpClockSyncOnMcpsIndication+0x50>)
 800a11c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a120:	0800a0e7 	.word	0x0800a0e7
 800a124:	0800a131 	.word	0x0800a131
 800a128:	0800a1d1 	.word	0x0800a1d1
 800a12c:	0800a261 	.word	0x0800a261
                    LmhpClockSyncState.NbTransmissions = 0;
 800a130:	4b5f      	ldr	r3, [pc, #380]	; (800a2b0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800a132:	2000      	movs	r0, #0
 800a134:	7398      	strb	r0, [r3, #14]
                    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800a136:	7e33      	ldrb	r3, [r6, #24]
 800a138:	b113      	cbz	r3, 800a140 <LmhpClockSyncOnMcpsIndication+0x70>
                        cmdIndex += 5;
 800a13a:	3406      	adds	r4, #6
 800a13c:	b2e4      	uxtb	r4, r4
                        break;
 800a13e:	e7e1      	b.n	800a104 <LmhpClockSyncOnMcpsIndication+0x34>
                    timeCorrection  = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800a140:	1ca0      	adds	r0, r4, #2
 800a142:	b2c0      	uxtb	r0, r0
 800a144:	5c8b      	ldrb	r3, [r1, r2]
                    timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800a146:	1ce2      	adds	r2, r4, #3
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	5c08      	ldrb	r0, [r1, r0]
 800a14c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
                    timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800a150:	1d20      	adds	r0, r4, #4
 800a152:	b2c0      	uxtb	r0, r0
 800a154:	5c8a      	ldrb	r2, [r1, r2]
 800a156:	eb03 4302 	add.w	r3, r3, r2, lsl #16
                    timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800a15a:	1d62      	adds	r2, r4, #5
 800a15c:	b2d2      	uxtb	r2, r2
 800a15e:	5c08      	ldrb	r0, [r1, r0]
 800a160:	eb03 6700 	add.w	r7, r3, r0, lsl #24
                    if( ( mcpsIndication->Buffer[cmdIndex++] & 0x0F ) == LmhpClockSyncState.TimeReqParam.Fields.TokenReq )
 800a164:	3406      	adds	r4, #6
 800a166:	b2e4      	uxtb	r4, r4
 800a168:	5c8a      	ldrb	r2, [r1, r2]
 800a16a:	4b51      	ldr	r3, [pc, #324]	; (800a2b0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800a16c:	7a1b      	ldrb	r3, [r3, #8]
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	f002 020f 	and.w	r2, r2, #15
 800a176:	429a      	cmp	r2, r3
 800a178:	d1c4      	bne.n	800a104 <LmhpClockSyncOnMcpsIndication+0x34>
                        SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 800a17a:	2300      	movs	r3, #0
 800a17c:	9302      	str	r3, [sp, #8]
 800a17e:	f8ad 300c 	strh.w	r3, [sp, #12]
                        curTime = SysTimeGet( );
 800a182:	a802      	add	r0, sp, #8
 800a184:	f00a ff12 	bl	8014fac <SysTimeGet>
                        if( LmhpClockSyncState.SysTimeNotSync == true )
 800a188:	4b49      	ldr	r3, [pc, #292]	; (800a2b0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800a18a:	7a9b      	ldrb	r3, [r3, #10]
 800a18c:	b11b      	cbz	r3, 800a196 <LmhpClockSyncOnMcpsIndication+0xc6>
                            curTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800a18e:	4b49      	ldr	r3, [pc, #292]	; (800a2b4 <LmhpClockSyncOnMcpsIndication+0x1e4>)
 800a190:	9a02      	ldr	r2, [sp, #8]
 800a192:	4413      	add	r3, r2
 800a194:	9302      	str	r3, [sp, #8]
                        curTime.Seconds += timeCorrection;
 800a196:	9b02      	ldr	r3, [sp, #8]
 800a198:	443b      	add	r3, r7
 800a19a:	9302      	str	r3, [sp, #8]
                        SysTimeSet( curTime );
 800a19c:	ab04      	add	r3, sp, #16
 800a19e:	e913 0003 	ldmdb	r3, {r0, r1}
 800a1a2:	f00a fee1 	bl	8014f68 <SysTimeSet>
                        LmhpClockSyncState.TimeReqParam.Fields.TokenReq = ( LmhpClockSyncState.TimeReqParam.Fields.TokenReq + 1 ) & 0x0F;
 800a1a6:	4942      	ldr	r1, [pc, #264]	; (800a2b0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800a1a8:	7a0b      	ldrb	r3, [r1, #8]
 800a1aa:	f003 020f 	and.w	r2, r3, #15
 800a1ae:	3201      	adds	r2, #1
 800a1b0:	f362 0303 	bfi	r3, r2, #0, #4
 800a1b4:	720b      	strb	r3, [r1, #8]
                        if( timeCorrection == ( int32_t )0x7FFFFFFF )
 800a1b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a1ba:	429f      	cmp	r7, r3
 800a1bc:	d005      	beq.n	800a1ca <LmhpClockSyncOnMcpsIndication+0xfa>
                        else if( LmhpClockSyncPackage.OnSysTimeUpdate != NULL )
 800a1be:	4b3e      	ldr	r3, [pc, #248]	; (800a2b8 <LmhpClockSyncOnMcpsIndication+0x1e8>)
 800a1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d09e      	beq.n	800a104 <LmhpClockSyncOnMcpsIndication+0x34>
                            LmhpClockSyncPackage.OnSysTimeUpdate( );
 800a1c6:	4798      	blx	r3
 800a1c8:	e79c      	b.n	800a104 <LmhpClockSyncOnMcpsIndication+0x34>
                            LmhpClockSyncState.NbTransmissions = 1;
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	738a      	strb	r2, [r1, #14]
 800a1ce:	e799      	b.n	800a104 <LmhpClockSyncOnMcpsIndication+0x34>
                    cmdIndex++;
 800a1d0:	1ca3      	adds	r3, r4, #2
 800a1d2:	b2db      	uxtb	r3, r3
                    uint32_t periodTime = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 800a1d4:	3403      	adds	r4, #3
 800a1d6:	b2e4      	uxtb	r4, r4
 800a1d8:	5ccb      	ldrb	r3, [r1, r3]
 800a1da:	f003 030f 	and.w	r3, r3, #15
                    periodTime = ( 128 << periodTime ) + randr( 0, 30 );
 800a1de:	2780      	movs	r7, #128	; 0x80
 800a1e0:	409f      	lsls	r7, r3
 800a1e2:	211e      	movs	r1, #30
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	f008 fd9d 	bl	8012d24 <randr>
 800a1ea:	4407      	add	r7, r0
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_PERIOD_ANS;
 800a1ec:	4b30      	ldr	r3, [pc, #192]	; (800a2b0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	1c6b      	adds	r3, r5, #1
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2102      	movs	r1, #2
 800a1f6:	5551      	strb	r1, [r2, r5]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = 0x00;
 800a1f8:	eb05 0801 	add.w	r8, r5, r1
 800a1fc:	fa5f f888 	uxtb.w	r8, r8
 800a200:	2100      	movs	r1, #0
 800a202:	54d1      	strb	r1, [r2, r3]
                    SysTime_t curTime = SysTimeGet( );
 800a204:	a802      	add	r0, sp, #8
 800a206:	f00a fed1 	bl	8014fac <SysTimeGet>
                    if( curTime.Seconds > UNIX_GPS_EPOCH_OFFSET )
 800a20a:	9b02      	ldr	r3, [sp, #8]
 800a20c:	4a29      	ldr	r2, [pc, #164]	; (800a2b4 <LmhpClockSyncOnMcpsIndication+0x1e4>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d902      	bls.n	800a218 <LmhpClockSyncOnMcpsIndication+0x148>
                        curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 800a212:	4a2a      	ldr	r2, [pc, #168]	; (800a2bc <LmhpClockSyncOnMcpsIndication+0x1ec>)
 800a214:	441a      	add	r2, r3
 800a216:	9202      	str	r2, [sp, #8]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 0 ) & 0xFF;
 800a218:	9b02      	ldr	r3, [sp, #8]
 800a21a:	4a25      	ldr	r2, [pc, #148]	; (800a2b0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800a21c:	6852      	ldr	r2, [r2, #4]
 800a21e:	1ce9      	adds	r1, r5, #3
 800a220:	b2c9      	uxtb	r1, r1
 800a222:	f802 3008 	strb.w	r3, [r2, r8]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 8 ) & 0xFF;
 800a226:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800a22a:	1d28      	adds	r0, r5, #4
 800a22c:	b2c0      	uxtb	r0, r0
 800a22e:	f802 c001 	strb.w	ip, [r2, r1]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 16 ) & 0xFF;
 800a232:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800a236:	1d69      	adds	r1, r5, #5
 800a238:	b2c9      	uxtb	r1, r1
 800a23a:	f802 c000 	strb.w	ip, [r2, r0]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 24 ) & 0xFF;
 800a23e:	0e1b      	lsrs	r3, r3, #24
 800a240:	3506      	adds	r5, #6
 800a242:	b2ed      	uxtb	r5, r5
 800a244:	5453      	strb	r3, [r2, r1]
                    TimerSetValue( &PeriodicTimeStartTimer, periodTime * 1000 );
 800a246:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a2c0 <LmhpClockSyncOnMcpsIndication+0x1f0>
 800a24a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a24e:	fb07 f101 	mul.w	r1, r7, r1
 800a252:	4640      	mov	r0, r8
 800a254:	f00b f838 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                    TimerStart( &PeriodicTimeStartTimer );
 800a258:	4640      	mov	r0, r8
 800a25a:	f00a ffef 	bl	801523c <UTIL_TIMER_Start>
                    break;
 800a25e:	e751      	b.n	800a104 <LmhpClockSyncOnMcpsIndication+0x34>
                    LmhpClockSyncState.NbTransmissions = mcpsIndication->Buffer[cmdIndex++] & 0X07;
 800a260:	3402      	adds	r4, #2
 800a262:	b2e4      	uxtb	r4, r4
 800a264:	5c8b      	ldrb	r3, [r1, r2]
 800a266:	f003 0307 	and.w	r3, r3, #7
 800a26a:	4a11      	ldr	r2, [pc, #68]	; (800a2b0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800a26c:	7393      	strb	r3, [r2, #14]
                    break;
 800a26e:	e749      	b.n	800a104 <LmhpClockSyncOnMcpsIndication+0x34>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a270:	4614      	mov	r4, r2
 800a272:	e747      	b.n	800a104 <LmhpClockSyncOnMcpsIndication+0x34>
    if( dataBufferIndex != 0 )
 800a274:	b915      	cbnz	r5, 800a27c <LmhpClockSyncOnMcpsIndication+0x1ac>
}
 800a276:	b004      	add	sp, #16
 800a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LmHandlerAppData_t appData =
 800a27c:	23ca      	movs	r3, #202	; 0xca
 800a27e:	f88d 3008 	strb.w	r3, [sp, #8]
 800a282:	f88d 5009 	strb.w	r5, [sp, #9]
            .Buffer = LmhpClockSyncState.DataBuffer,
 800a286:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800a288:	685b      	ldr	r3, [r3, #4]
        LmHandlerAppData_t appData =
 800a28a:	9303      	str	r3, [sp, #12]
        LmHandlerGetDutyCycleEnable( &current_dutycycle );
 800a28c:	f10d 0007 	add.w	r0, sp, #7
 800a290:	f7ff fe2e 	bl	8009ef0 <LmHandlerGetDutyCycleEnable>
        LmHandlerSetDutyCycleEnable( false );
 800a294:	2000      	movs	r0, #0
 800a296:	f7ff fe37 	bl	8009f08 <LmHandlerSetDutyCycleEnable>
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800a29a:	2201      	movs	r2, #1
 800a29c:	2100      	movs	r1, #0
 800a29e:	a802      	add	r0, sp, #8
 800a2a0:	f7ff fb04 	bl	80098ac <LmHandlerSend>
        LmHandlerSetDutyCycleEnable( current_dutycycle );
 800a2a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800a2a8:	f7ff fe2e 	bl	8009f08 <LmHandlerSetDutyCycleEnable>
 800a2ac:	e7e3      	b.n	800a276 <LmhpClockSyncOnMcpsIndication+0x1a6>
 800a2ae:	4770      	bx	lr
 800a2b0:	20000b5c 	.word	0x20000b5c
 800a2b4:	12d53d80 	.word	0x12d53d80
 800a2b8:	200000d0 	.word	0x200000d0
 800a2bc:	ed2ac280 	.word	0xed2ac280
 800a2c0:	20000b6c 	.word	0x20000b6c

0800a2c4 <LmhpClockSyncOnMcpsConfirm>:
    if( LmhpClockSyncState.AppTimeReqPending == true )
 800a2c4:	4b13      	ldr	r3, [pc, #76]	; (800a314 <LmhpClockSyncOnMcpsConfirm+0x50>)
 800a2c6:	7a5b      	ldrb	r3, [r3, #9]
 800a2c8:	b903      	cbnz	r3, 800a2cc <LmhpClockSyncOnMcpsConfirm+0x8>
 800a2ca:	4770      	bx	lr
{
 800a2cc:	b510      	push	{r4, lr}
 800a2ce:	b08a      	sub	sp, #40	; 0x28
        mibReq.Type = MIB_ADR;
 800a2d0:	2304      	movs	r3, #4
 800a2d2:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = LmhpClockSyncState.AdrEnabledPrev;
 800a2d6:	4c0f      	ldr	r4, [pc, #60]	; (800a314 <LmhpClockSyncOnMcpsConfirm+0x50>)
 800a2d8:	7ae3      	ldrb	r3, [r4, #11]
 800a2da:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a2de:	4668      	mov	r0, sp
 800a2e0:	f004 fba4 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_NB_TRANS;
 800a2e4:	2318      	movs	r3, #24
 800a2e6:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.ChannelsNbTrans = LmhpClockSyncState.NbTransPrev;
 800a2ea:	7b23      	ldrb	r3, [r4, #12]
 800a2ec:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a2f0:	4668      	mov	r0, sp
 800a2f2:	f004 fb9b 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_DATARATE;
 800a2f6:	2320      	movs	r3, #32
 800a2f8:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.ChannelsDatarate = LmhpClockSyncState.DataratePrev;
 800a2fc:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800a300:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a304:	4668      	mov	r0, sp
 800a306:	f004 fb91 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
        LmhpClockSyncState.AppTimeReqPending = false;
 800a30a:	2300      	movs	r3, #0
 800a30c:	7263      	strb	r3, [r4, #9]
}
 800a30e:	b00a      	add	sp, #40	; 0x28
 800a310:	bd10      	pop	{r4, pc}
 800a312:	bf00      	nop
 800a314:	20000b5c 	.word	0x20000b5c

0800a318 <LmhpClockSyncInit>:
    if( dataBuffer != NULL )
 800a318:	b1a1      	cbz	r1, 800a344 <LmhpClockSyncInit+0x2c>
{
 800a31a:	b500      	push	{lr}
 800a31c:	b083      	sub	sp, #12
        LmhpClockSyncState.DataBuffer = dataBuffer;
 800a31e:	4b0d      	ldr	r3, [pc, #52]	; (800a354 <LmhpClockSyncInit+0x3c>)
 800a320:	6059      	str	r1, [r3, #4]
        LmhpClockSyncState.DataBufferMaxSize = dataBufferMaxSize;
 800a322:	709a      	strb	r2, [r3, #2]
        LmhpClockSyncState.Initialized = true;
 800a324:	2201      	movs	r2, #1
 800a326:	701a      	strb	r2, [r3, #0]
        TimerInit( &PeriodicTimeStartTimer, OnPeriodicTimeStartTimer );
 800a328:	2200      	movs	r2, #0
 800a32a:	9200      	str	r2, [sp, #0]
 800a32c:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <LmhpClockSyncInit+0x40>)
 800a32e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a332:	480a      	ldr	r0, [pc, #40]	; (800a35c <LmhpClockSyncInit+0x44>)
 800a334:	f00a feca 	bl	80150cc <UTIL_TIMER_Create>
    LmhpClockSyncState.IsTxPending = false;
 800a338:	4b06      	ldr	r3, [pc, #24]	; (800a354 <LmhpClockSyncInit+0x3c>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	705a      	strb	r2, [r3, #1]
}
 800a33e:	b003      	add	sp, #12
 800a340:	f85d fb04 	ldr.w	pc, [sp], #4
        LmhpClockSyncState.Initialized = false;
 800a344:	4b03      	ldr	r3, [pc, #12]	; (800a354 <LmhpClockSyncInit+0x3c>)
 800a346:	2200      	movs	r2, #0
 800a348:	701a      	strb	r2, [r3, #0]
    LmhpClockSyncState.IsTxPending = false;
 800a34a:	4b02      	ldr	r3, [pc, #8]	; (800a354 <LmhpClockSyncInit+0x3c>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	705a      	strb	r2, [r3, #1]
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000b5c 	.word	0x20000b5c
 800a358:	0800a0ad 	.word	0x0800a0ad
 800a35c:	20000b6c 	.word	0x20000b6c

0800a360 <LmhpClockSyncPackageFactory>:
}
 800a360:	4800      	ldr	r0, [pc, #0]	; (800a364 <LmhpClockSyncPackageFactory+0x4>)
 800a362:	4770      	bx	lr
 800a364:	200000d0 	.word	0x200000d0

0800a368 <LmhpClockSyncAppTimeReq>:
{
 800a368:	b510      	push	{r4, lr}
 800a36a:	b090      	sub	sp, #64	; 0x40
    if( LmHandlerIsBusy( ) == true )
 800a36c:	f7ff fa88 	bl	8009880 <LmHandlerIsBusy>
 800a370:	2800      	cmp	r0, #0
 800a372:	d16c      	bne.n	800a44e <LmhpClockSyncAppTimeReq+0xe6>
    if( LmhpClockSyncState.AppTimeReqPending == false )
 800a374:	4b37      	ldr	r3, [pc, #220]	; (800a454 <LmhpClockSyncAppTimeReq+0xec>)
 800a376:	7a5b      	ldrb	r3, [r3, #9]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d03a      	beq.n	800a3f2 <LmhpClockSyncAppTimeReq+0x8a>
    SysTime_t curTime = SysTimeGet( );
 800a37c:	a80e      	add	r0, sp, #56	; 0x38
 800a37e:	f00a fe15 	bl	8014fac <SysTimeGet>
    curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 800a382:	4b35      	ldr	r3, [pc, #212]	; (800a458 <LmhpClockSyncAppTimeReq+0xf0>)
 800a384:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a386:	4413      	add	r3, r2
 800a388:	930e      	str	r3, [sp, #56]	; 0x38
    if( curTime.Seconds > UNIX_GPS_EPOCH_OFFSET )
 800a38a:	4a34      	ldr	r2, [pc, #208]	; (800a45c <LmhpClockSyncAppTimeReq+0xf4>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d95a      	bls.n	800a446 <LmhpClockSyncAppTimeReq+0xde>
        curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 800a390:	4a31      	ldr	r2, [pc, #196]	; (800a458 <LmhpClockSyncAppTimeReq+0xf0>)
 800a392:	441a      	add	r2, r3
 800a394:	920e      	str	r2, [sp, #56]	; 0x38
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_REQ;
 800a396:	492f      	ldr	r1, [pc, #188]	; (800a454 <LmhpClockSyncAppTimeReq+0xec>)
 800a398:	684b      	ldr	r3, [r1, #4]
 800a39a:	2401      	movs	r4, #1
 800a39c:	701c      	strb	r4, [r3, #0]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 0 ) & 0xFF;
 800a39e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3a0:	705a      	strb	r2, [r3, #1]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 8 ) & 0xFF;
 800a3a2:	0a10      	lsrs	r0, r2, #8
 800a3a4:	7098      	strb	r0, [r3, #2]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 16 ) & 0xFF;
 800a3a6:	0c10      	lsrs	r0, r2, #16
 800a3a8:	70d8      	strb	r0, [r3, #3]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 24 ) & 0xFF;
 800a3aa:	0e12      	lsrs	r2, r2, #24
 800a3ac:	711a      	strb	r2, [r3, #4]
    LmhpClockSyncState.TimeReqParam.Fields.AnsRequired = 0;
 800a3ae:	7a0a      	ldrb	r2, [r1, #8]
 800a3b0:	f36f 1204 	bfc	r2, #4, #1
 800a3b4:	720a      	strb	r2, [r1, #8]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = LmhpClockSyncState.TimeReqParam.Value;
 800a3b6:	b2d2      	uxtb	r2, r2
 800a3b8:	715a      	strb	r2, [r3, #5]
    LmHandlerAppData_t appData =
 800a3ba:	22ca      	movs	r2, #202	; 0xca
 800a3bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800a3c0:	2206      	movs	r2, #6
 800a3c2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800a3c6:	930d      	str	r3, [sp, #52]	; 0x34
    LmhpClockSyncState.AppTimeReqPending = true;
 800a3c8:	724c      	strb	r4, [r1, #9]
    LmHandlerGetDutyCycleEnable( &current_dutycycle );
 800a3ca:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 800a3ce:	f7ff fd8f 	bl	8009ef0 <LmHandlerGetDutyCycleEnable>
    LmHandlerSetDutyCycleEnable( false );
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	f7ff fd98 	bl	8009f08 <LmHandlerSetDutyCycleEnable>
    LmHandlerErrorStatus_t status = LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800a3d8:	4622      	mov	r2, r4
 800a3da:	2100      	movs	r1, #0
 800a3dc:	a80c      	add	r0, sp, #48	; 0x30
 800a3de:	f7ff fa65 	bl	80098ac <LmHandlerSend>
 800a3e2:	4604      	mov	r4, r0
    LmHandlerSetDutyCycleEnable( current_dutycycle );
 800a3e4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 800a3e8:	f7ff fd8e 	bl	8009f08 <LmHandlerSetDutyCycleEnable>
}
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	b010      	add	sp, #64	; 0x40
 800a3f0:	bd10      	pop	{r4, pc}
        mibReq.Type = MIB_ADR;
 800a3f2:	2304      	movs	r3, #4
 800a3f4:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800a3f8:	eb0d 0003 	add.w	r0, sp, r3
 800a3fc:	f004 f9a2 	bl	800e744 <LoRaMacMibGetRequestConfirm>
        LmhpClockSyncState.AdrEnabledPrev = mibReq.Param.AdrEnable;
 800a400:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a404:	4c13      	ldr	r4, [pc, #76]	; (800a454 <LmhpClockSyncAppTimeReq+0xec>)
 800a406:	72e3      	strb	r3, [r4, #11]
        mibReq.Param.AdrEnable = false;
 800a408:	2300      	movs	r3, #0
 800a40a:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a40e:	a801      	add	r0, sp, #4
 800a410:	f004 fb0c 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_NB_TRANS;
 800a414:	2318      	movs	r3, #24
 800a416:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800a41a:	a801      	add	r0, sp, #4
 800a41c:	f004 f992 	bl	800e744 <LoRaMacMibGetRequestConfirm>
        LmhpClockSyncState.NbTransPrev = mibReq.Param.ChannelsNbTrans;
 800a420:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a424:	7323      	strb	r3, [r4, #12]
        mibReq.Param.ChannelsNbTrans = 1;
 800a426:	2301      	movs	r3, #1
 800a428:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a42c:	a801      	add	r0, sp, #4
 800a42e:	f004 fafd 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_DATARATE;
 800a432:	2320      	movs	r3, #32
 800a434:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800a438:	a801      	add	r0, sp, #4
 800a43a:	f004 f983 	bl	800e744 <LoRaMacMibGetRequestConfirm>
        LmhpClockSyncState.DataratePrev = mibReq.Param.ChannelsDatarate;
 800a43e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a442:	7363      	strb	r3, [r4, #13]
 800a444:	e79a      	b.n	800a37c <LmhpClockSyncAppTimeReq+0x14>
        LmhpClockSyncState.SysTimeNotSync = true;
 800a446:	4b03      	ldr	r3, [pc, #12]	; (800a454 <LmhpClockSyncAppTimeReq+0xec>)
 800a448:	2201      	movs	r2, #1
 800a44a:	729a      	strb	r2, [r3, #10]
 800a44c:	e7a3      	b.n	800a396 <LmhpClockSyncAppTimeReq+0x2e>
        return LORAMAC_HANDLER_ERROR;
 800a44e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a452:	e7cb      	b.n	800a3ec <LmhpClockSyncAppTimeReq+0x84>
 800a454:	20000b5c 	.word	0x20000b5c
 800a458:	ed2ac280 	.word	0xed2ac280
 800a45c:	12d53d80 	.word	0x12d53d80

0800a460 <LmhpClockSyncProcess>:
{
 800a460:	b508      	push	{r3, lr}
    if( LmhpClockSyncState.NbTransmissions > 0 )
 800a462:	4b06      	ldr	r3, [pc, #24]	; (800a47c <LmhpClockSyncProcess+0x1c>)
 800a464:	7b9b      	ldrb	r3, [r3, #14]
 800a466:	b903      	cbnz	r3, 800a46a <LmhpClockSyncProcess+0xa>
}
 800a468:	bd08      	pop	{r3, pc}
        if( LmhpClockSyncAppTimeReq( ) == LORAMAC_HANDLER_SUCCESS )
 800a46a:	f7ff ff7d 	bl	800a368 <LmhpClockSyncAppTimeReq>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d1fa      	bne.n	800a468 <LmhpClockSyncProcess+0x8>
            LmhpClockSyncState.NbTransmissions--;
 800a472:	4a02      	ldr	r2, [pc, #8]	; (800a47c <LmhpClockSyncProcess+0x1c>)
 800a474:	7b93      	ldrb	r3, [r2, #14]
 800a476:	3b01      	subs	r3, #1
 800a478:	7393      	strb	r3, [r2, #14]
}
 800a47a:	e7f5      	b.n	800a468 <LmhpClockSyncProcess+0x8>
 800a47c:	20000b5c 	.word	0x20000b5c

0800a480 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800a480:	4b01      	ldr	r3, [pc, #4]	; (800a488 <LmhpComplianceIsInitialized+0x8>)
 800a482:	7818      	ldrb	r0, [r3, #0]
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	20000b88 	.word	0x20000b88

0800a48c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800a48c:	4b01      	ldr	r3, [pc, #4]	; (800a494 <LmhpComplianceIsTxPending+0x8>)
 800a48e:	7858      	ldrb	r0, [r3, #1]
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000b88 	.word	0x20000b88

0800a498 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800a498:	4770      	bx	lr

0800a49a <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800a49a:	4770      	bx	lr

0800a49c <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800a49c:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 800a49e:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <OnProcessTimer+0x18>)
 800a4a0:	7a9b      	ldrb	r3, [r3, #10]
 800a4a2:	b113      	cbz	r3, 800a4aa <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 800a4a4:	4b03      	ldr	r3, [pc, #12]	; (800a4b4 <OnProcessTimer+0x18>)
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800a4aa:	4b03      	ldr	r3, [pc, #12]	; (800a4b8 <OnProcessTimer+0x1c>)
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	b103      	cbz	r3, 800a4b2 <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 800a4b0:	4798      	blx	r3
    }
}
 800a4b2:	bd08      	pop	{r3, pc}
 800a4b4:	20000b88 	.word	0x20000b88
 800a4b8:	20000108 	.word	0x20000108

0800a4bc <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800a4bc:	4b8c      	ldr	r3, [pc, #560]	; (800a6f0 <LmhpComplianceOnMcpsIndication+0x234>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 8205 	beq.w	800a8d0 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800a4c6:	78c3      	ldrb	r3, [r0, #3]
 800a4c8:	b90b      	cbnz	r3, 800a4ce <LmhpComplianceOnMcpsIndication+0x12>
 800a4ca:	7b83      	ldrb	r3, [r0, #14]
 800a4cc:	b11b      	cbz	r3, 800a4d6 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800a4ce:	4a88      	ldr	r2, [pc, #544]	; (800a6f0 <LmhpComplianceOnMcpsIndication+0x234>)
 800a4d0:	8a13      	ldrh	r3, [r2, #16]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800a4d6:	7b43      	ldrb	r3, [r0, #13]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 81f9 	beq.w	800a8d0 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800a4de:	78c3      	ldrb	r3, [r0, #3]
 800a4e0:	2be0      	cmp	r3, #224	; 0xe0
 800a4e2:	f040 81f5 	bne.w	800a8d0 <LmhpComplianceOnMcpsIndication+0x414>
{
 800a4e6:	b570      	push	{r4, r5, r6, lr}
 800a4e8:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 800a4ea:	4b81      	ldr	r3, [pc, #516]	; (800a6f0 <LmhpComplianceOnMcpsIndication+0x234>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800a4f0:	6884      	ldr	r4, [r0, #8]
 800a4f2:	7823      	ldrb	r3, [r4, #0]
 800a4f4:	2b7f      	cmp	r3, #127	; 0x7f
 800a4f6:	f200 8093 	bhi.w	800a620 <LmhpComplianceOnMcpsIndication+0x164>
 800a4fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a4fe:	0080      	.short	0x0080
 800a500:	00a2009d 	.word	0x00a2009d
 800a504:	00b200aa 	.word	0x00b200aa
 800a508:	00c600bf 	.word	0x00c600bf
 800a50c:	00f000df 	.word	0x00f000df
 800a510:	0131011d 	.word	0x0131011d
 800a514:	00910091 	.word	0x00910091
 800a518:	00910091 	.word	0x00910091
 800a51c:	00910091 	.word	0x00910091
 800a520:	00910091 	.word	0x00910091
 800a524:	00910091 	.word	0x00910091
 800a528:	00910091 	.word	0x00910091
 800a52c:	00910091 	.word	0x00910091
 800a530:	00910091 	.word	0x00910091
 800a534:	00910091 	.word	0x00910091
 800a538:	00910091 	.word	0x00910091
 800a53c:	01350091 	.word	0x01350091
 800a540:	0140013c 	.word	0x0140013c
 800a544:	00910091 	.word	0x00910091
 800a548:	00910091 	.word	0x00910091
 800a54c:	00910091 	.word	0x00910091
 800a550:	00910091 	.word	0x00910091
 800a554:	00910091 	.word	0x00910091
 800a558:	00910091 	.word	0x00910091
 800a55c:	00910091 	.word	0x00910091
 800a560:	00910091 	.word	0x00910091
 800a564:	00910091 	.word	0x00910091
 800a568:	00910091 	.word	0x00910091
 800a56c:	00910091 	.word	0x00910091
 800a570:	00910091 	.word	0x00910091
 800a574:	00910091 	.word	0x00910091
 800a578:	00910091 	.word	0x00910091
 800a57c:	00910091 	.word	0x00910091
 800a580:	00910091 	.word	0x00910091
 800a584:	00910091 	.word	0x00910091
 800a588:	00910091 	.word	0x00910091
 800a58c:	00910091 	.word	0x00910091
 800a590:	00910091 	.word	0x00910091
 800a594:	00910091 	.word	0x00910091
 800a598:	00910091 	.word	0x00910091
 800a59c:	00910091 	.word	0x00910091
 800a5a0:	00910091 	.word	0x00910091
 800a5a4:	00910091 	.word	0x00910091
 800a5a8:	00910091 	.word	0x00910091
 800a5ac:	00910091 	.word	0x00910091
 800a5b0:	00910091 	.word	0x00910091
 800a5b4:	00910091 	.word	0x00910091
 800a5b8:	00910091 	.word	0x00910091
 800a5bc:	00910091 	.word	0x00910091
 800a5c0:	00910091 	.word	0x00910091
 800a5c4:	00910091 	.word	0x00910091
 800a5c8:	00910091 	.word	0x00910091
 800a5cc:	00910091 	.word	0x00910091
 800a5d0:	00910091 	.word	0x00910091
 800a5d4:	00910091 	.word	0x00910091
 800a5d8:	00910091 	.word	0x00910091
 800a5dc:	00910091 	.word	0x00910091
 800a5e0:	00910091 	.word	0x00910091
 800a5e4:	00910091 	.word	0x00910091
 800a5e8:	00910091 	.word	0x00910091
 800a5ec:	00910091 	.word	0x00910091
 800a5f0:	00910091 	.word	0x00910091
 800a5f4:	00910091 	.word	0x00910091
 800a5f8:	016c014b 	.word	0x016c014b
 800a5fc:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800a5fe:	4b3c      	ldr	r3, [pc, #240]	; (800a6f0 <LmhpComplianceOnMcpsIndication+0x234>)
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	2101      	movs	r1, #1
 800a604:	7299      	strb	r1, [r3, #10]
 800a606:	2000      	movs	r0, #0
 800a608:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800a60a:	68d8      	ldr	r0, [r3, #12]
 800a60c:	7a9a      	ldrb	r2, [r3, #10]
 800a60e:	1854      	adds	r4, r2, r1
 800a610:	729c      	strb	r4, [r3, #10]
 800a612:	2406      	movs	r4, #6
 800a614:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800a616:	68d8      	ldr	r0, [r3, #12]
 800a618:	7a9a      	ldrb	r2, [r3, #10]
 800a61a:	1854      	adds	r4, r2, r1
 800a61c:	729c      	strb	r4, [r3, #10]
 800a61e:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 800a620:	4b33      	ldr	r3, [pc, #204]	; (800a6f0 <LmhpComplianceOnMcpsIndication+0x234>)
 800a622:	7a9b      	ldrb	r3, [r3, #10]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 814c 	beq.w	800a8c2 <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 800a62a:	4b32      	ldr	r3, [pc, #200]	; (800a6f4 <LmhpComplianceOnMcpsIndication+0x238>)
 800a62c:	7a5b      	ldrb	r3, [r3, #9]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f000 813d 	beq.w	800a8ae <LmhpComplianceOnMcpsIndication+0x3f2>
}
 800a634:	b016      	add	sp, #88	; 0x58
 800a636:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 800a638:	4b2d      	ldr	r3, [pc, #180]	; (800a6f0 <LmhpComplianceOnMcpsIndication+0x234>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800a640:	e7ee      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 800a642:	4b2d      	ldr	r3, [pc, #180]	; (800a6f8 <LmhpComplianceOnMcpsIndication+0x23c>)
 800a644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0ea      	beq.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800a64a:	2101      	movs	r1, #1
 800a64c:	2002      	movs	r0, #2
 800a64e:	4798      	blx	r3
 800a650:	e7e6      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800a652:	7862      	ldrb	r2, [r4, #1]
 800a654:	4b26      	ldr	r3, [pc, #152]	; (800a6f0 <LmhpComplianceOnMcpsIndication+0x234>)
 800a656:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800a660:	e7de      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 800a662:	2304      	movs	r3, #4
 800a664:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800a668:	7863      	ldrb	r3, [r4, #1]
 800a66a:	3b00      	subs	r3, #0
 800a66c:	bf18      	it	ne
 800a66e:	2301      	movne	r3, #1
 800a670:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800a674:	a801      	add	r0, sp, #4
 800a676:	f004 f9d9 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
                break;
 800a67a:	e7d1      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800a67c:	7860      	ldrb	r0, [r4, #1]
 800a67e:	3800      	subs	r0, #0
 800a680:	bf18      	it	ne
 800a682:	2001      	movne	r0, #1
 800a684:	f004 ffbe 	bl	800f604 <LoRaMacTestSetDutyCycleOn>
                break;
 800a688:	e7ca      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800a68a:	ad01      	add	r5, sp, #4
 800a68c:	4e1b      	ldr	r6, [pc, #108]	; (800a6fc <LmhpComplianceOnMcpsIndication+0x240>)
 800a68e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a692:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a696:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a69a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800a69e:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800a6a0:	2b0a      	cmp	r3, #10
 800a6a2:	d8bd      	bhi.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800a6a4:	4a16      	ldr	r2, [pc, #88]	; (800a700 <LmhpComplianceOnMcpsIndication+0x244>)
 800a6a6:	6812      	ldr	r2, [r2, #0]
 800a6a8:	6852      	ldr	r2, [r2, #4]
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	d0b8      	beq.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800a6ae:	a916      	add	r1, sp, #88	; 0x58
 800a6b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a6b4:	f853 0c54 	ldr.w	r0, [r3, #-84]
 800a6b8:	4790      	blx	r2
                break;
 800a6ba:	e7b1      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800a6bc:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800a6be:	1e53      	subs	r3, r2, #1
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d8ac      	bhi.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800a6c6:	1e50      	subs	r0, r2, #1
 800a6c8:	bf18      	it	ne
 800a6ca:	2001      	movne	r0, #1
 800a6cc:	4b08      	ldr	r3, [pc, #32]	; (800a6f0 <LmhpComplianceOnMcpsIndication+0x234>)
 800a6ce:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800a6d0:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <LmhpComplianceOnMcpsIndication+0x244>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0a2      	beq.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800a6da:	4798      	blx	r3
 800a6dc:	e7a0      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800a6de:	4b04      	ldr	r3, [pc, #16]	; (800a6f0 <LmhpComplianceOnMcpsIndication+0x234>)
 800a6e0:	68da      	ldr	r2, [r3, #12]
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	7299      	strb	r1, [r3, #10]
 800a6e6:	2308      	movs	r3, #8
 800a6e8:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	e01b      	b.n	800a726 <LmhpComplianceOnMcpsIndication+0x26a>
 800a6ee:	bf00      	nop
 800a6f0:	20000b88 	.word	0x20000b88
 800a6f4:	20000bc0 	.word	0x20000bc0
 800a6f8:	20000108 	.word	0x20000108
 800a6fc:	08019f98 	.word	0x08019f98
 800a700:	20000b84 	.word	0x20000b84
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800a704:	6882      	ldr	r2, [r0, #8]
 800a706:	f101 0c01 	add.w	ip, r1, #1
 800a70a:	5c52      	ldrb	r2, [r2, r1]
 800a70c:	4971      	ldr	r1, [pc, #452]	; (800a8d4 <LmhpComplianceOnMcpsIndication+0x418>)
 800a70e:	68cd      	ldr	r5, [r1, #12]
 800a710:	7a8c      	ldrb	r4, [r1, #10]
 800a712:	f104 0e01 	add.w	lr, r4, #1
 800a716:	f881 e00a 	strb.w	lr, [r1, #10]
 800a71a:	3201      	adds	r2, #1
 800a71c:	552a      	strb	r2, [r5, r4]
                     i++ )
 800a71e:	3301      	adds	r3, #1
 800a720:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800a722:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800a726:	4a6b      	ldr	r2, [pc, #428]	; (800a8d4 <LmhpComplianceOnMcpsIndication+0x418>)
 800a728:	7a52      	ldrb	r2, [r2, #9]
 800a72a:	7b04      	ldrb	r4, [r0, #12]
 800a72c:	42a2      	cmp	r2, r4
 800a72e:	bf28      	it	cs
 800a730:	4622      	movcs	r2, r4
 800a732:	429a      	cmp	r2, r3
 800a734:	d8e6      	bhi.n	800a704 <LmhpComplianceOnMcpsIndication+0x248>
 800a736:	e773      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800a738:	4b66      	ldr	r3, [pc, #408]	; (800a8d4 <LmhpComplianceOnMcpsIndication+0x418>)
 800a73a:	68da      	ldr	r2, [r3, #12]
 800a73c:	2101      	movs	r1, #1
 800a73e:	7299      	strb	r1, [r3, #10]
 800a740:	2109      	movs	r1, #9
 800a742:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800a744:	8a18      	ldrh	r0, [r3, #16]
 800a746:	68d9      	ldr	r1, [r3, #12]
 800a748:	7a9a      	ldrb	r2, [r3, #10]
 800a74a:	1c54      	adds	r4, r2, #1
 800a74c:	729c      	strb	r4, [r3, #10]
 800a74e:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800a750:	8a1a      	ldrh	r2, [r3, #16]
 800a752:	68d8      	ldr	r0, [r3, #12]
 800a754:	7a99      	ldrb	r1, [r3, #10]
 800a756:	1c4c      	adds	r4, r1, #1
 800a758:	729c      	strb	r4, [r3, #10]
 800a75a:	0a13      	lsrs	r3, r2, #8
 800a75c:	5443      	strb	r3, [r0, r1]
                break;
 800a75e:	e75f      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 800a760:	4b5c      	ldr	r3, [pc, #368]	; (800a8d4 <LmhpComplianceOnMcpsIndication+0x418>)
 800a762:	2200      	movs	r2, #0
 800a764:	821a      	strh	r2, [r3, #16]
                break;
 800a766:	e75b      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 800a768:	2305      	movs	r3, #5
 800a76a:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 800a76e:	a801      	add	r0, sp, #4
 800a770:	f004 fd56 	bl	800f220 <LoRaMacMlmeRequest>
                break;
 800a774:	e754      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 800a776:	4b58      	ldr	r3, [pc, #352]	; (800a8d8 <LmhpComplianceOnMcpsIndication+0x41c>)
 800a778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77a:	4798      	blx	r3
                break;
 800a77c:	e750      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800a77e:	7860      	ldrb	r0, [r4, #1]
 800a780:	4b54      	ldr	r3, [pc, #336]	; (800a8d4 <LmhpComplianceOnMcpsIndication+0x418>)
 800a782:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800a784:	4b55      	ldr	r3, [pc, #340]	; (800a8dc <LmhpComplianceOnMcpsIndication+0x420>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f43f af48 	beq.w	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800a790:	4798      	blx	r3
 800a792:	e745      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 800a794:	7b03      	ldrb	r3, [r0, #12]
 800a796:	2b07      	cmp	r3, #7
 800a798:	f47f af42 	bne.w	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 800a79c:	2306      	movs	r3, #6
 800a79e:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800a7a2:	7863      	ldrb	r3, [r4, #1]
 800a7a4:	78a2      	ldrb	r2, [r4, #2]
 800a7a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 800a7aa:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800a7ae:	78e3      	ldrb	r3, [r4, #3]
 800a7b0:	7922      	ldrb	r2, [r4, #4]
 800a7b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800a7b6:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800a7b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800a7bc:	2264      	movs	r2, #100	; 0x64
 800a7be:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800a7c2:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800a7c4:	6883      	ldr	r3, [r0, #8]
 800a7c6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800a7ca:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 800a7ce:	a801      	add	r0, sp, #4
 800a7d0:	f004 fd26 	bl	800f220 <LoRaMacMlmeRequest>
                break;
 800a7d4:	e724      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800a7d6:	233b      	movs	r3, #59	; 0x3b
 800a7d8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 800a7e2:	a80c      	add	r0, sp, #48	; 0x30
 800a7e4:	f004 f922 	bl	800ea2c <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 800a7e8:	4b3a      	ldr	r3, [pc, #232]	; (800a8d4 <LmhpComplianceOnMcpsIndication+0x418>)
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800a7f0:	e716      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 800a7f2:	232a      	movs	r3, #42	; 0x2a
 800a7f4:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800a7f8:	a801      	add	r0, sp, #4
 800a7fa:	f003 ffa3 	bl	800e744 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800a7fe:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800a800:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800a802:	4b34      	ldr	r3, [pc, #208]	; (800a8d4 <LmhpComplianceOnMcpsIndication+0x418>)
 800a804:	68dc      	ldr	r4, [r3, #12]
 800a806:	7a98      	ldrb	r0, [r3, #10]
 800a808:	1c45      	adds	r5, r0, #1
 800a80a:	729d      	strb	r5, [r3, #10]
 800a80c:	257f      	movs	r5, #127	; 0x7f
 800a80e:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800a810:	4832      	ldr	r0, [pc, #200]	; (800a8dc <LmhpComplianceOnMcpsIndication+0x420>)
 800a812:	6800      	ldr	r0, [r0, #0]
 800a814:	68dd      	ldr	r5, [r3, #12]
 800a816:	7a9c      	ldrb	r4, [r3, #10]
 800a818:	1c66      	adds	r6, r4, #1
 800a81a:	729e      	strb	r6, [r3, #10]
 800a81c:	78c6      	ldrb	r6, [r0, #3]
 800a81e:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800a820:	68dd      	ldr	r5, [r3, #12]
 800a822:	7a9c      	ldrb	r4, [r3, #10]
 800a824:	1c66      	adds	r6, r4, #1
 800a826:	729e      	strb	r6, [r3, #10]
 800a828:	7886      	ldrb	r6, [r0, #2]
 800a82a:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800a82c:	68dd      	ldr	r5, [r3, #12]
 800a82e:	7a9c      	ldrb	r4, [r3, #10]
 800a830:	1c66      	adds	r6, r4, #1
 800a832:	729e      	strb	r6, [r3, #10]
 800a834:	7846      	ldrb	r6, [r0, #1]
 800a836:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800a838:	68dd      	ldr	r5, [r3, #12]
 800a83a:	7a9c      	ldrb	r4, [r3, #10]
 800a83c:	1c66      	adds	r6, r4, #1
 800a83e:	729e      	strb	r6, [r3, #10]
 800a840:	7800      	ldrb	r0, [r0, #0]
 800a842:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800a844:	68dc      	ldr	r4, [r3, #12]
 800a846:	7a98      	ldrb	r0, [r3, #10]
 800a848:	1c45      	adds	r5, r0, #1
 800a84a:	729d      	strb	r5, [r3, #10]
 800a84c:	f3c1 6507 	ubfx	r5, r1, #24, #8
 800a850:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800a852:	68dc      	ldr	r4, [r3, #12]
 800a854:	7a98      	ldrb	r0, [r3, #10]
 800a856:	1c45      	adds	r5, r0, #1
 800a858:	729d      	strb	r5, [r3, #10]
 800a85a:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800a85e:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800a860:	68dc      	ldr	r4, [r3, #12]
 800a862:	7a98      	ldrb	r0, [r3, #10]
 800a864:	1c45      	adds	r5, r0, #1
 800a866:	729d      	strb	r5, [r3, #10]
 800a868:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800a86c:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800a86e:	68dc      	ldr	r4, [r3, #12]
 800a870:	7a98      	ldrb	r0, [r3, #10]
 800a872:	1c45      	adds	r5, r0, #1
 800a874:	729d      	strb	r5, [r3, #10]
 800a876:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800a878:	68d8      	ldr	r0, [r3, #12]
 800a87a:	7a99      	ldrb	r1, [r3, #10]
 800a87c:	1c4c      	adds	r4, r1, #1
 800a87e:	729c      	strb	r4, [r3, #10]
 800a880:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800a884:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800a886:	68d8      	ldr	r0, [r3, #12]
 800a888:	7a99      	ldrb	r1, [r3, #10]
 800a88a:	1c4c      	adds	r4, r1, #1
 800a88c:	729c      	strb	r4, [r3, #10]
 800a88e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a892:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800a894:	68d8      	ldr	r0, [r3, #12]
 800a896:	7a99      	ldrb	r1, [r3, #10]
 800a898:	1c4c      	adds	r4, r1, #1
 800a89a:	729c      	strb	r4, [r3, #10]
 800a89c:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a8a0:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800a8a2:	68d8      	ldr	r0, [r3, #12]
 800a8a4:	7a99      	ldrb	r1, [r3, #10]
 800a8a6:	1c4c      	adds	r4, r1, #1
 800a8a8:	729c      	strb	r4, [r3, #10]
 800a8aa:	5442      	strb	r2, [r0, r1]
                break;
 800a8ac:	e6b8      	b.n	800a620 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 800a8ae:	4c0c      	ldr	r4, [pc, #48]	; (800a8e0 <LmhpComplianceOnMcpsIndication+0x424>)
 800a8b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f00a fd07 	bl	80152c8 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f00a fcbe 	bl	801523c <UTIL_TIMER_Start>
 800a8c0:	e6b8      	b.n	800a634 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 800a8c2:	4807      	ldr	r0, [pc, #28]	; (800a8e0 <LmhpComplianceOnMcpsIndication+0x424>)
 800a8c4:	f00a fc60 	bl	8015188 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800a8c8:	4b02      	ldr	r3, [pc, #8]	; (800a8d4 <LmhpComplianceOnMcpsIndication+0x418>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	705a      	strb	r2, [r3, #1]
 800a8ce:	e6b1      	b.n	800a634 <LmhpComplianceOnMcpsIndication+0x178>
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	20000b88 	.word	0x20000b88
 800a8d8:	20000108 	.word	0x20000108
 800a8dc:	20000b84 	.word	0x20000b84
 800a8e0:	20000bc0 	.word	0x20000bc0

0800a8e4 <LmhpComplianceProcess>:
{
 800a8e4:	b530      	push	{r4, r5, lr}
 800a8e6:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800a8e8:	4b27      	ldr	r3, [pc, #156]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a8ea:	785b      	ldrb	r3, [r3, #1]
 800a8ec:	b993      	cbnz	r3, 800a914 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800a8ee:	4b26      	ldr	r3, [pc, #152]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a8f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d13d      	bne.n	800a974 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 800a8f8:	4b23      	ldr	r3, [pc, #140]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a8fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8fe:	b13b      	cbz	r3, 800a910 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800a900:	4b21      	ldr	r3, [pc, #132]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 800a908:	4b20      	ldr	r3, [pc, #128]	; (800a98c <LmhpComplianceProcess+0xa8>)
 800a90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90c:	b103      	cbz	r3, 800a910 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800a90e:	4798      	blx	r3
}
 800a910:	b003      	add	sp, #12
 800a912:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800a914:	f00a fbf8 	bl	8015108 <UTIL_TIMER_GetCurrentTime>
 800a918:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800a91a:	4b1b      	ldr	r3, [pc, #108]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a91c:	685d      	ldr	r5, [r3, #4]
 800a91e:	f7fe ff97 	bl	8009850 <LmHandlerGetDutyCycleWaitTime>
 800a922:	4405      	add	r5, r0
 800a924:	42a5      	cmp	r5, r4
 800a926:	d2e7      	bcs.n	800a8f8 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 800a928:	4b17      	ldr	r3, [pc, #92]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a92a:	7a9b      	ldrb	r3, [r3, #10]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0e3      	beq.n	800a8f8 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 800a930:	22e0      	movs	r2, #224	; 0xe0
 800a932:	f88d 2000 	strb.w	r2, [sp]
 800a936:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800a93a:	4b13      	ldr	r3, [pc, #76]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a93c:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 800a93e:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800a940:	2201      	movs	r2, #1
 800a942:	7a19      	ldrb	r1, [r3, #8]
 800a944:	4668      	mov	r0, sp
 800a946:	f7fe ffb1 	bl	80098ac <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800a94a:	b110      	cbz	r0, 800a952 <LmhpComplianceProcess+0x6e>
 800a94c:	f110 0f07 	cmn.w	r0, #7
 800a950:	d106      	bne.n	800a960 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 800a952:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a954:	2200      	movs	r2, #0
 800a956:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800a958:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 800a95a:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a95c:	605c      	str	r4, [r3, #4]
 800a95e:	e7cb      	b.n	800a8f8 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 800a960:	4d0b      	ldr	r5, [pc, #44]	; (800a990 <LmhpComplianceProcess+0xac>)
 800a962:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800a966:	4628      	mov	r0, r5
 800a968:	f00a fcae 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800a96c:	4628      	mov	r0, r5
 800a96e:	f00a fc65 	bl	801523c <UTIL_TIMER_Start>
 800a972:	e7f2      	b.n	800a95a <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 800a974:	4b04      	ldr	r3, [pc, #16]	; (800a988 <LmhpComplianceProcess+0xa4>)
 800a976:	2200      	movs	r2, #0
 800a978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800a97c:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 800a980:	f7ff f83e 	bl	8009a00 <LmHandlerRequestClass>
 800a984:	e7b8      	b.n	800a8f8 <LmhpComplianceProcess+0x14>
 800a986:	bf00      	nop
 800a988:	20000b88 	.word	0x20000b88
 800a98c:	20000108 	.word	0x20000108
 800a990:	20000bc0 	.word	0x20000bc0

0800a994 <LmhpComplianceInit>:
{
 800a994:	b530      	push	{r4, r5, lr}
 800a996:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800a998:	b188      	cbz	r0, 800a9be <LmhpComplianceInit+0x2a>
 800a99a:	4603      	mov	r3, r0
 800a99c:	b179      	cbz	r1, 800a9be <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800a99e:	4813      	ldr	r0, [pc, #76]	; (800a9ec <LmhpComplianceInit+0x58>)
 800a9a0:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800a9a2:	4b13      	ldr	r3, [pc, #76]	; (800a9f0 <LmhpComplianceInit+0x5c>)
 800a9a4:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800a9a6:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	9200      	str	r2, [sp, #0]
 800a9b0:	4b10      	ldr	r3, [pc, #64]	; (800a9f4 <LmhpComplianceInit+0x60>)
 800a9b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a9b6:	4810      	ldr	r0, [pc, #64]	; (800a9f8 <LmhpComplianceInit+0x64>)
 800a9b8:	f00a fb88 	bl	80150cc <UTIL_TIMER_Create>
 800a9bc:	e004      	b.n	800a9c8 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	4a0a      	ldr	r2, [pc, #40]	; (800a9ec <LmhpComplianceInit+0x58>)
 800a9c2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800a9c4:	4a0a      	ldr	r2, [pc, #40]	; (800a9f0 <LmhpComplianceInit+0x5c>)
 800a9c6:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800a9c8:	4c09      	ldr	r4, [pc, #36]	; (800a9f0 <LmhpComplianceInit+0x5c>)
 800a9ca:	2500      	movs	r5, #0
 800a9cc:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	f104 0014 	add.w	r0, r4, #20
 800a9d6:	f008 f9ca 	bl	8012d6e <memset1>
    ComplianceTestState.IsTxPending = false;
 800a9da:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800a9dc:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800a9de:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800a9e2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800a9e6:	b003      	add	sp, #12
 800a9e8:	bd30      	pop	{r4, r5, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000b84 	.word	0x20000b84
 800a9f0:	20000b88 	.word	0x20000b88
 800a9f4:	0800a49d 	.word	0x0800a49d
 800a9f8:	20000bc0 	.word	0x20000bc0

0800a9fc <LmhpCompliancePackageFactory>:
}
 800a9fc:	4800      	ldr	r0, [pc, #0]	; (800aa00 <LmhpCompliancePackageFactory+0x4>)
 800a9fe:	4770      	bx	lr
 800aa00:	20000108 	.word	0x20000108

0800aa04 <LmhpFirmwareManagementIsInitialized>:
}

static bool LmhpFirmwareManagementIsInitialized( void )
{
    return LmhpFirmwareManagementState.Initialized;
}
 800aa04:	4b01      	ldr	r3, [pc, #4]	; (800aa0c <LmhpFirmwareManagementIsInitialized+0x8>)
 800aa06:	7818      	ldrb	r0, [r3, #0]
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	20000bd8 	.word	0x20000bd8

0800aa10 <LmhpFirmwareManagementIsTxPending>:

static bool LmhpFirmwareManagementIsTxPending( void )
{
    return LmhpFirmwareManagementState.IsTxPending;
}
 800aa10:	4b01      	ldr	r3, [pc, #4]	; (800aa18 <LmhpFirmwareManagementIsTxPending+0x8>)
 800aa12:	7858      	ldrb	r0, [r3, #1]
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	20000bd8 	.word	0x20000bd8

0800aa1c <LmhpFirmwareManagementProcess>:

static void LmhpFirmwareManagementProcess( void )
{
    /* Not yet implemented */
}
 800aa1c:	4770      	bx	lr
	...

0800aa20 <OnRebootTimer>:
        LmHandlerSetDutyCycleEnable( current_dutycycle );
    }
}

static void OnRebootTimer( void *context )
{
 800aa20:	b508      	push	{r3, lr}
#if (INTEROP_TEST_MODE == 0)
    /* Do a request to Run the Secure boot - The file is already in flash */
#if (LORAWAN_PACKAGES_VERSION == 2)
    FwUpdateAgent_Run();
 800aa22:	f7f8 fd51 	bl	80034c8 <FwUpdateAgent_Run>
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* INTEROP_TEST_MODE */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LmhpFirmwareManagementPackage.OnSystemReset != NULL )
 800aa26:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <OnRebootTimer+0x2c>)
 800aa28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2a:	b10b      	cbz	r3, 800aa30 <OnRebootTimer+0x10>
    {
        LmhpFirmwareManagementPackage.OnSystemReset();
 800aa2c:	4798      	blx	r3
    else
#endif /* LORAMAC_VERSION */
    {
        NVIC_SystemReset();
    }
}
 800aa2e:	bd08      	pop	{r3, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 800aa30:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800aa34:	4906      	ldr	r1, [pc, #24]	; (800aa50 <OnRebootTimer+0x30>)
 800aa36:	68ca      	ldr	r2, [r1, #12]
 800aa38:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <OnRebootTimer+0x34>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60cb      	str	r3, [r1, #12]
 800aa42:	f3bf 8f4f 	dsb	sy
    __NOP();
 800aa46:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800aa48:	e7fd      	b.n	800aa46 <OnRebootTimer+0x26>
 800aa4a:	bf00      	nop
 800aa4c:	20000140 	.word	0x20000140
 800aa50:	e000ed00 	.word	0xe000ed00
 800aa54:	05fa0004 	.word	0x05fa0004

0800aa58 <LmhpFirmwareManagementOnMcpsIndication>:
    if( mcpsIndication->Port != FW_MANAGEMENT_PORT )
 800aa58:	78c3      	ldrb	r3, [r0, #3]
 800aa5a:	2bcb      	cmp	r3, #203	; 0xcb
 800aa5c:	f040 8110 	bne.w	800ac80 <LmhpFirmwareManagementOnMcpsIndication+0x228>
{
 800aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	4606      	mov	r6, r0
    uint8_t dataBufferIndex = 0;
 800aa68:	2400      	movs	r4, #0
    uint8_t cmdIndex = 0;
 800aa6a:	4625      	mov	r5, r4
 800aa6c:	e00e      	b.n	800aa8c <LmhpFirmwareManagementOnMcpsIndication+0x34>
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_PKG_VERSION_ANS;
 800aa6e:	4b85      	ldr	r3, [pc, #532]	; (800ac84 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800aa70:	6859      	ldr	r1, [r3, #4]
 800aa72:	1c60      	adds	r0, r4, #1
 800aa74:	b2c0      	uxtb	r0, r0
 800aa76:	2300      	movs	r3, #0
 800aa78:	550b      	strb	r3, [r1, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_ID;
 800aa7a:	1ca3      	adds	r3, r4, #2
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2504      	movs	r5, #4
 800aa80:	540d      	strb	r5, [r1, r0]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_VERSION;
 800aa82:	3403      	adds	r4, #3
 800aa84:	b2e4      	uxtb	r4, r4
 800aa86:	2001      	movs	r0, #1
 800aa88:	54c8      	strb	r0, [r1, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800aa8a:	4615      	mov	r5, r2
    while( cmdIndex < mcpsIndication->BufferSize )
 800aa8c:	7b33      	ldrb	r3, [r6, #12]
 800aa8e:	42ab      	cmp	r3, r5
 800aa90:	f240 80d9 	bls.w	800ac46 <LmhpFirmwareManagementOnMcpsIndication+0x1ee>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800aa94:	68b1      	ldr	r1, [r6, #8]
 800aa96:	1c6b      	adds	r3, r5, #1
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	5d4b      	ldrb	r3, [r1, r5]
 800aa9c:	2b05      	cmp	r3, #5
 800aa9e:	f200 80d0 	bhi.w	800ac42 <LmhpFirmwareManagementOnMcpsIndication+0x1ea>
 800aaa2:	a001      	add	r0, pc, #4	; (adr r0, 800aaa8 <LmhpFirmwareManagementOnMcpsIndication+0x50>)
 800aaa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aaa8:	0800aa6f 	.word	0x0800aa6f
 800aaac:	0800aac1 	.word	0x0800aac1
 800aab0:	0800ab0d 	.word	0x0800ab0d
 800aab4:	0800aba1 	.word	0x0800aba1
 800aab8:	0800ac11 	.word	0x0800ac11
 800aabc:	0800ac29 	.word	0x0800ac29
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_VERSION_ANS;
 800aac0:	4970      	ldr	r1, [pc, #448]	; (800ac84 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800aac2:	684b      	ldr	r3, [r1, #4]
 800aac4:	1c65      	adds	r5, r4, #1
 800aac6:	b2ed      	uxtb	r5, r5
 800aac8:	2001      	movs	r0, #1
 800aaca:	5518      	strb	r0, [r3, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = LmhpFirmwareManagementState.fwVersion.Fields.Major;
 800aacc:	1ca0      	adds	r0, r4, #2
 800aace:	b2c0      	uxtb	r0, r0
 800aad0:	7acf      	ldrb	r7, [r1, #11]
 800aad2:	555f      	strb	r7, [r3, r5]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = LmhpFirmwareManagementState.fwVersion.Fields.Minor;
 800aad4:	1ce5      	adds	r5, r4, #3
 800aad6:	b2ed      	uxtb	r5, r5
 800aad8:	7a8f      	ldrb	r7, [r1, #10]
 800aada:	541f      	strb	r7, [r3, r0]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = LmhpFirmwareManagementState.fwVersion.Fields.Patch;
 800aadc:	1d20      	adds	r0, r4, #4
 800aade:	b2c0      	uxtb	r0, r0
 800aae0:	7a4f      	ldrb	r7, [r1, #9]
 800aae2:	555f      	strb	r7, [r3, r5]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = LmhpFirmwareManagementState.fwVersion.Fields.Revision;
 800aae4:	1d65      	adds	r5, r4, #5
 800aae6:	b2ed      	uxtb	r5, r5
 800aae8:	7a09      	ldrb	r1, [r1, #8]
 800aaea:	5419      	strb	r1, [r3, r0]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( HW_VERSION >> 0 ) & 0xFF;
 800aaec:	1da0      	adds	r0, r4, #6
 800aaee:	b2c0      	uxtb	r0, r0
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	5559      	strb	r1, [r3, r5]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( HW_VERSION >> 8 ) & 0xFF;
 800aaf4:	1de5      	adds	r5, r4, #7
 800aaf6:	b2ed      	uxtb	r5, r5
 800aaf8:	5419      	strb	r1, [r3, r0]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( HW_VERSION >> 16 ) & 0xFF;
 800aafa:	f104 0008 	add.w	r0, r4, #8
 800aafe:	b2c0      	uxtb	r0, r0
 800ab00:	5559      	strb	r1, [r3, r5]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( HW_VERSION >> 24 ) & 0xFF;
 800ab02:	3409      	adds	r4, #9
 800ab04:	b2e4      	uxtb	r4, r4
 800ab06:	5419      	strb	r1, [r3, r0]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800ab08:	4615      	mov	r5, r2
                    break;
 800ab0a:	e7bf      	b.n	800aa8c <LmhpFirmwareManagementOnMcpsIndication+0x34>
                    rebootTimeReq  = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800ab0c:	1cab      	adds	r3, r5, #2
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	5c8f      	ldrb	r7, [r1, r2]
                    rebootTimeReq += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800ab12:	1cea      	adds	r2, r5, #3
 800ab14:	b2d2      	uxtb	r2, r2
 800ab16:	5ccb      	ldrb	r3, [r1, r3]
 800ab18:	eb07 2703 	add.w	r7, r7, r3, lsl #8
                    rebootTimeReq += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800ab1c:	1d2b      	adds	r3, r5, #4
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	5c8a      	ldrb	r2, [r1, r2]
 800ab22:	eb07 4702 	add.w	r7, r7, r2, lsl #16
                    rebootTimeReq += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800ab26:	3505      	adds	r5, #5
 800ab28:	b2ed      	uxtb	r5, r5
 800ab2a:	5ccb      	ldrb	r3, [r1, r3]
                    if( rebootTimeReq == 0 )
 800ab2c:	eb17 6703 	adds.w	r7, r7, r3, lsl #24
 800ab30:	d019      	beq.n	800ab66 <LmhpFirmwareManagementOnMcpsIndication+0x10e>
                    else if( rebootTimeReq == 0xFFFFFFFF )
 800ab32:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800ab36:	d02f      	beq.n	800ab98 <LmhpFirmwareManagementOnMcpsIndication+0x140>
                        SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9302      	str	r3, [sp, #8]
 800ab3c:	f8ad 300c 	strh.w	r3, [sp, #12]
                        curTime = SysTimeGet();
 800ab40:	a802      	add	r0, sp, #8
 800ab42:	f00a fa33 	bl	8014fac <SysTimeGet>
                        rebootTimeAns = rebootTimeReq - curTime.Seconds;
 800ab46:	9b02      	ldr	r3, [sp, #8]
                        if( rebootTimeAns > 0 )
 800ab48:	1aff      	subs	r7, r7, r3
 800ab4a:	d00f      	beq.n	800ab6c <LmhpFirmwareManagementOnMcpsIndication+0x114>
                            TimerSetValue( &RebootTimer, rebootTimeAns * 1000 );
 800ab4c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800ac88 <LmhpFirmwareManagementOnMcpsIndication+0x230>
 800ab50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ab54:	fb07 f101 	mul.w	r1, r7, r1
 800ab58:	4640      	mov	r0, r8
 800ab5a:	f00a fbb5 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                            TimerStart( &RebootTimer );
 800ab5e:	4640      	mov	r0, r8
 800ab60:	f00a fb6c 	bl	801523c <UTIL_TIMER_Start>
 800ab64:	e002      	b.n	800ab6c <LmhpFirmwareManagementOnMcpsIndication+0x114>
                        OnRebootTimer( NULL );
 800ab66:	2000      	movs	r0, #0
 800ab68:	f7ff ff5a 	bl	800aa20 <OnRebootTimer>
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_REBOOT_TIME_ANS;
 800ab6c:	4b45      	ldr	r3, [pc, #276]	; (800ac84 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	1c61      	adds	r1, r4, #1
 800ab72:	b2c9      	uxtb	r1, r1
 800ab74:	2202      	movs	r2, #2
 800ab76:	551a      	strb	r2, [r3, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootTimeAns >> 0 ) & 0xFF;
 800ab78:	18a2      	adds	r2, r4, r2
 800ab7a:	b2d2      	uxtb	r2, r2
 800ab7c:	545f      	strb	r7, [r3, r1]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootTimeAns >> 8 ) & 0xFF;
 800ab7e:	0a38      	lsrs	r0, r7, #8
 800ab80:	1ce1      	adds	r1, r4, #3
 800ab82:	b2c9      	uxtb	r1, r1
 800ab84:	5498      	strb	r0, [r3, r2]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootTimeAns >> 16 ) & 0xFF;
 800ab86:	0c38      	lsrs	r0, r7, #16
 800ab88:	1d22      	adds	r2, r4, #4
 800ab8a:	b2d2      	uxtb	r2, r2
 800ab8c:	5458      	strb	r0, [r3, r1]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootTimeAns >> 24 ) & 0xFF;
 800ab8e:	0e3f      	lsrs	r7, r7, #24
 800ab90:	3405      	adds	r4, #5
 800ab92:	b2e4      	uxtb	r4, r4
 800ab94:	549f      	strb	r7, [r3, r2]
                    break;
 800ab96:	e779      	b.n	800aa8c <LmhpFirmwareManagementOnMcpsIndication+0x34>
                        TimerStop( &RebootTimer );
 800ab98:	483b      	ldr	r0, [pc, #236]	; (800ac88 <LmhpFirmwareManagementOnMcpsIndication+0x230>)
 800ab9a:	f00a faf5 	bl	8015188 <UTIL_TIMER_Stop>
 800ab9e:	e7e5      	b.n	800ab6c <LmhpFirmwareManagementOnMcpsIndication+0x114>
                    rebootCountdown  = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800aba0:	1ca8      	adds	r0, r5, #2
 800aba2:	b2c0      	uxtb	r0, r0
 800aba4:	5c8b      	ldrb	r3, [r1, r2]
                    rebootCountdown += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800aba6:	1cea      	adds	r2, r5, #3
 800aba8:	b2d2      	uxtb	r2, r2
 800abaa:	5c08      	ldrb	r0, [r1, r0]
 800abac:	eb03 2300 	add.w	r3, r3, r0, lsl #8
                    rebootCountdown += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800abb0:	3504      	adds	r5, #4
 800abb2:	b2ed      	uxtb	r5, r5
 800abb4:	5c8a      	ldrb	r2, [r1, r2]
                    if( rebootCountdown == 0 )
 800abb6:	eb13 4702 	adds.w	r7, r3, r2, lsl #16
 800abba:	d021      	beq.n	800ac00 <LmhpFirmwareManagementOnMcpsIndication+0x1a8>
                    else if( rebootCountdown == 0xFFFFFF )
 800abbc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800abc0:	429f      	cmp	r7, r3
 800abc2:	d021      	beq.n	800ac08 <LmhpFirmwareManagementOnMcpsIndication+0x1b0>
                            TimerSetValue( &RebootTimer, rebootCountdown * 1000 );
 800abc4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ac88 <LmhpFirmwareManagementOnMcpsIndication+0x230>
 800abc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800abcc:	fb07 f101 	mul.w	r1, r7, r1
 800abd0:	4640      	mov	r0, r8
 800abd2:	f00a fb79 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                            TimerStart( &RebootTimer );
 800abd6:	4640      	mov	r0, r8
 800abd8:	f00a fb30 	bl	801523c <UTIL_TIMER_Start>
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_REBOOT_COUNTDOWN_ANS;
 800abdc:	4b29      	ldr	r3, [pc, #164]	; (800ac84 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	1c61      	adds	r1, r4, #1
 800abe2:	b2c9      	uxtb	r1, r1
 800abe4:	2303      	movs	r3, #3
 800abe6:	5513      	strb	r3, [r2, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootCountdown >> 0 ) & 0xFF;
 800abe8:	1ca3      	adds	r3, r4, #2
 800abea:	b2db      	uxtb	r3, r3
 800abec:	5457      	strb	r7, [r2, r1]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootCountdown >> 8 ) & 0xFF;
 800abee:	0a38      	lsrs	r0, r7, #8
 800abf0:	1ce1      	adds	r1, r4, #3
 800abf2:	b2c9      	uxtb	r1, r1
 800abf4:	54d0      	strb	r0, [r2, r3]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootCountdown >> 16 ) & 0xFF;
 800abf6:	0c3b      	lsrs	r3, r7, #16
 800abf8:	3404      	adds	r4, #4
 800abfa:	b2e4      	uxtb	r4, r4
 800abfc:	5453      	strb	r3, [r2, r1]
                    break;
 800abfe:	e745      	b.n	800aa8c <LmhpFirmwareManagementOnMcpsIndication+0x34>
                        OnRebootTimer( NULL );
 800ac00:	2000      	movs	r0, #0
 800ac02:	f7ff ff0d 	bl	800aa20 <OnRebootTimer>
 800ac06:	e7e9      	b.n	800abdc <LmhpFirmwareManagementOnMcpsIndication+0x184>
                        TimerStop( &RebootTimer );
 800ac08:	481f      	ldr	r0, [pc, #124]	; (800ac88 <LmhpFirmwareManagementOnMcpsIndication+0x230>)
 800ac0a:	f00a fabd 	bl	8015188 <UTIL_TIMER_Stop>
 800ac0e:	e7e5      	b.n	800abdc <LmhpFirmwareManagementOnMcpsIndication+0x184>
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_UPGRADE_IMAGE_ANS;
 800ac10:	4b1c      	ldr	r3, [pc, #112]	; (800ac84 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800ac12:	6859      	ldr	r1, [r3, #4]
 800ac14:	1c63      	adds	r3, r4, #1
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2004      	movs	r0, #4
 800ac1a:	5508      	strb	r0, [r1, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = imageStatus & 0x03;
 800ac1c:	3402      	adds	r4, #2
 800ac1e:	b2e4      	uxtb	r4, r4
 800ac20:	2000      	movs	r0, #0
 800ac22:	54c8      	strb	r0, [r1, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800ac24:	4615      	mov	r5, r2
 800ac26:	e731      	b.n	800aa8c <LmhpFirmwareManagementOnMcpsIndication+0x34>
                    firmwareVersion += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800ac28:	3505      	adds	r5, #5
 800ac2a:	b2ed      	uxtb	r5, r5
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_DELETE_IMAGE_ANS;
 800ac2c:	4b15      	ldr	r3, [pc, #84]	; (800ac84 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	1c63      	adds	r3, r4, #1
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2105      	movs	r1, #5
 800ac36:	5511      	strb	r1, [r2, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = 0x01;
 800ac38:	3402      	adds	r4, #2
 800ac3a:	b2e4      	uxtb	r4, r4
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	54d1      	strb	r1, [r2, r3]
                    break;
 800ac40:	e724      	b.n	800aa8c <LmhpFirmwareManagementOnMcpsIndication+0x34>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800ac42:	4615      	mov	r5, r2
 800ac44:	e722      	b.n	800aa8c <LmhpFirmwareManagementOnMcpsIndication+0x34>
    if( dataBufferIndex != 0 )
 800ac46:	b914      	cbnz	r4, 800ac4e <LmhpFirmwareManagementOnMcpsIndication+0x1f6>
}
 800ac48:	b004      	add	sp, #16
 800ac4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LmHandlerAppData_t appData =
 800ac4e:	23cb      	movs	r3, #203	; 0xcb
 800ac50:	f88d 3008 	strb.w	r3, [sp, #8]
 800ac54:	f88d 4009 	strb.w	r4, [sp, #9]
            .Buffer = LmhpFirmwareManagementState.DataBuffer,
 800ac58:	4b0a      	ldr	r3, [pc, #40]	; (800ac84 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800ac5a:	685b      	ldr	r3, [r3, #4]
        LmHandlerAppData_t appData =
 800ac5c:	9303      	str	r3, [sp, #12]
        LmHandlerGetDutyCycleEnable( &current_dutycycle );
 800ac5e:	f10d 0007 	add.w	r0, sp, #7
 800ac62:	f7ff f945 	bl	8009ef0 <LmHandlerGetDutyCycleEnable>
        LmHandlerSetDutyCycleEnable( false );
 800ac66:	2000      	movs	r0, #0
 800ac68:	f7ff f94e 	bl	8009f08 <LmHandlerSetDutyCycleEnable>
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	2100      	movs	r1, #0
 800ac70:	a802      	add	r0, sp, #8
 800ac72:	f7fe fe1b 	bl	80098ac <LmHandlerSend>
        LmHandlerSetDutyCycleEnable( current_dutycycle );
 800ac76:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ac7a:	f7ff f945 	bl	8009f08 <LmHandlerSetDutyCycleEnable>
 800ac7e:	e7e3      	b.n	800ac48 <LmhpFirmwareManagementOnMcpsIndication+0x1f0>
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	20000bd8 	.word	0x20000bd8
 800ac88:	20000be4 	.word	0x20000be4

0800ac8c <LmhpFirmwareManagementInit>:
{
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	4604      	mov	r4, r0
    if( dataBuffer != NULL )
 800ac92:	b199      	cbz	r1, 800acbc <LmhpFirmwareManagementInit+0x30>
        LmhpFirmwareManagementState.DataBuffer = dataBuffer;
 800ac94:	4b0b      	ldr	r3, [pc, #44]	; (800acc4 <LmhpFirmwareManagementInit+0x38>)
 800ac96:	6059      	str	r1, [r3, #4]
        LmhpFirmwareManagementState.DataBufferMaxSize = dataBufferMaxSize;
 800ac98:	709a      	strb	r2, [r3, #2]
        LmhpFirmwareManagementState.Initialized = true;
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	701a      	strb	r2, [r3, #0]
        TimerInit( &RebootTimer, OnRebootTimer );
 800ac9e:	2200      	movs	r2, #0
 800aca0:	9200      	str	r2, [sp, #0]
 800aca2:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <LmhpFirmwareManagementInit+0x3c>)
 800aca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aca8:	4808      	ldr	r0, [pc, #32]	; (800accc <LmhpFirmwareManagementInit+0x40>)
 800acaa:	f00a fa0f 	bl	80150cc <UTIL_TIMER_Create>
    LmhpFirmwareManagementState.IsTxPending = false;
 800acae:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <LmhpFirmwareManagementInit+0x38>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	705a      	strb	r2, [r3, #1]
    LmhpFirmwareManagementState.fwVersion.Value = ( ( Version_t * )params )->Value;
 800acb4:	6822      	ldr	r2, [r4, #0]
 800acb6:	609a      	str	r2, [r3, #8]
}
 800acb8:	b002      	add	sp, #8
 800acba:	bd10      	pop	{r4, pc}
        LmhpFirmwareManagementState.Initialized = false;
 800acbc:	4b01      	ldr	r3, [pc, #4]	; (800acc4 <LmhpFirmwareManagementInit+0x38>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	701a      	strb	r2, [r3, #0]
 800acc2:	e7f4      	b.n	800acae <LmhpFirmwareManagementInit+0x22>
 800acc4:	20000bd8 	.word	0x20000bd8
 800acc8:	0800aa21 	.word	0x0800aa21
 800accc:	20000be4 	.word	0x20000be4

0800acd0 <LmhpFirmwareManagementPackageFactory>:
}
 800acd0:	4800      	ldr	r0, [pc, #0]	; (800acd4 <LmhpFirmwareManagementPackageFactory+0x4>)
 800acd2:	4770      	bx	lr
 800acd4:	20000140 	.word	0x20000140

0800acd8 <OnFragmentProcessTimer>:

/*!
 * \brief Callback function for Fragment delay timer.
 */
static void OnFragmentProcessTimer( void *context )
{
 800acd8:	b508      	push	{r3, lr}
    if( LmhpFragmentationState.DataBufferSize != 0 )
 800acda:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <OnFragmentProcessTimer+0x18>)
 800acdc:	791b      	ldrb	r3, [r3, #4]
 800acde:	b113      	cbz	r3, 800ace6 <OnFragmentProcessTimer+0xe>
    {
        LmhpFragmentationState.IsTxPending = true;
 800ace0:	4b03      	ldr	r3, [pc, #12]	; (800acf0 <OnFragmentProcessTimer+0x18>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	705a      	strb	r2, [r3, #1]
    }
    if( LmhpFragmentationPackage.OnPackageProcessEvent != NULL )
 800ace6:	4b03      	ldr	r3, [pc, #12]	; (800acf4 <OnFragmentProcessTimer+0x1c>)
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	b103      	cbz	r3, 800acee <OnFragmentProcessTimer+0x16>
    {
        LmhpFragmentationPackage.OnPackageProcessEvent();
 800acec:	4798      	blx	r3
    }
}
 800acee:	bd08      	pop	{r3, pc}
 800acf0:	20000c9c 	.word	0x20000c9c
 800acf4:	20000178 	.word	0x20000178

0800acf8 <LmhpFragmentationIsInitialized>:
}

static bool LmhpFragmentationIsInitialized( void )
{
    return LmhpFragmentationState.Initialized;
}
 800acf8:	4b01      	ldr	r3, [pc, #4]	; (800ad00 <LmhpFragmentationIsInitialized+0x8>)
 800acfa:	7818      	ldrb	r0, [r3, #0]
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	20000c9c 	.word	0x20000c9c

0800ad04 <LmhpFragmentationIsTxPending>:

static bool LmhpFragmentationIsTxPending( void )
{
    return LmhpFragmentationState.IsTxPending;
}
 800ad04:	4b01      	ldr	r3, [pc, #4]	; (800ad0c <LmhpFragmentationIsTxPending+0x8>)
 800ad06:	7858      	ldrb	r0, [r3, #1]
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	20000c9c 	.word	0x20000c9c

0800ad10 <LmhpFragmentationOnMcpsIndication>:
{
    uint8_t cmdIndex = 0;
    uint8_t dataBufferIndex = 0;
    bool isAnswerDelayed = false;

    if( mcpsIndication->Port != FRAGMENTATION_PORT )
 800ad10:	78c3      	ldrb	r3, [r0, #3]
 800ad12:	2bc9      	cmp	r3, #201	; 0xc9
 800ad14:	f040 8273 	bne.w	800b1fe <LmhpFragmentationOnMcpsIndication+0x4ee>
{
 800ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1c:	b08f      	sub	sp, #60	; 0x3c
 800ad1e:	4606      	mov	r6, r0
    {
        return;
    }
 
    LmhpFragmentationState.DataBufferSize = 0;
 800ad20:	2300      	movs	r3, #0
 800ad22:	4aba      	ldr	r2, [pc, #744]	; (800b00c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800ad24:	7113      	strb	r3, [r2, #4]
    bool isAnswerDelayed = false;
 800ad26:	4698      	mov	r8, r3
    uint8_t dataBufferIndex = 0;
 800ad28:	461f      	mov	r7, r3

    while( cmdIndex < mcpsIndication->BufferSize )
 800ad2a:	e011      	b.n	800ad50 <LmhpFragmentationOnMcpsIndication+0x40>
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
        {
            case FRAGMENTATION_PKG_VERSION_REQ:
                {
                    if( mcpsIndication->Multicast == 1 )
 800ad2c:	78b3      	ldrb	r3, [r6, #2]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d00d      	beq.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                    {
                        /* Multicast channel. Don't process command. */
                        break;
                    }
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_PKG_VERSION_ANS;
 800ad32:	4bb6      	ldr	r3, [pc, #728]	; (800b00c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800ad34:	689a      	ldr	r2, [r3, #8]
 800ad36:	1c79      	adds	r1, r7, #1
 800ad38:	b2c9      	uxtb	r1, r1
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	55d3      	strb	r3, [r2, r7]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_ID;
 800ad3e:	1cbb      	adds	r3, r7, #2
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2003      	movs	r0, #3
 800ad44:	5450      	strb	r0, [r2, r1]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_VERSION;
 800ad46:	4407      	add	r7, r0
 800ad48:	b2ff      	uxtb	r7, r7
 800ad4a:	2102      	movs	r1, #2
 800ad4c:	54d1      	strb	r1, [r2, r3]
                    if( mcpsIndication->Multicast == 1 )
                    {
                        /* Multicast channel. Don't process command. */
                        break;
                    }
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800ad4e:	462b      	mov	r3, r5
    while( cmdIndex < mcpsIndication->BufferSize )
 800ad50:	7b34      	ldrb	r4, [r6, #12]
 800ad52:	429c      	cmp	r4, r3
 800ad54:	f240 822e 	bls.w	800b1b4 <LmhpFragmentationOnMcpsIndication+0x4a4>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800ad58:	68b2      	ldr	r2, [r6, #8]
 800ad5a:	1c5d      	adds	r5, r3, #1
 800ad5c:	b2ed      	uxtb	r5, r5
 800ad5e:	5cd1      	ldrb	r1, [r2, r3]
 800ad60:	2908      	cmp	r1, #8
 800ad62:	d8f4      	bhi.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
 800ad64:	a001      	add	r0, pc, #4	; (adr r0, 800ad6c <LmhpFragmentationOnMcpsIndication+0x5c>)
 800ad66:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ad6a:	bf00      	nop
 800ad6c:	0800ad2d 	.word	0x0800ad2d
 800ad70:	0800ad91 	.word	0x0800ad91
 800ad74:	0800ae1d 	.word	0x0800ae1d
 800ad78:	0800af9b 	.word	0x0800af9b
 800ad7c:	0800afdd 	.word	0x0800afdd
 800ad80:	0800ad4f 	.word	0x0800ad4f
 800ad84:	0800ad4f 	.word	0x0800ad4f
 800ad88:	0800ad4f 	.word	0x0800ad4f
 800ad8c:	0800b035 	.word	0x0800b035
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 800ad90:	3302      	adds	r3, #2
 800ad92:	b2dc      	uxtb	r4, r3
 800ad94:	f812 9005 	ldrb.w	r9, [r2, r5]
                    uint8_t participants = fragIndex & 0x01;
 800ad98:	f009 0a01 	and.w	sl, r9, #1
                    fragIndex = ( fragIndex >> 1 ) & 0x03;
 800ad9c:	f3c9 0941 	ubfx	r9, r9, #1, #2
                    FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus( );
 800ada0:	4d9b      	ldr	r5, [pc, #620]	; (800b010 <LmhpFragmentationOnMcpsIndication+0x300>)
 800ada2:	eb05 1549 	add.w	r5, r5, r9, lsl #5
 800ada6:	a802      	add	r0, sp, #8
 800ada8:	f7fe fbd8 	bl	800955c <FragDecoderGetStatus>
 800adac:	f105 0314 	add.w	r3, r5, #20
 800adb0:	9802      	ldr	r0, [sp, #8]
 800adb2:	9903      	ldr	r1, [sp, #12]
 800adb4:	c303      	stmia	r3!, {r0, r1}
                    if( ( participants == 1 ) ||
 800adb6:	f1ba 0f00 	cmp.w	sl, #0
 800adba:	d107      	bne.n	800adcc <LmhpFragmentationOnMcpsIndication+0xbc>
 800adbc:	f1ba 0f00 	cmp.w	sl, #0
 800adc0:	f040 81f2 	bne.w	800b1a8 <LmhpFragmentationOnMcpsIndication+0x498>
                        ( ( participants == 0 ) && ( FragSessionData[fragIndex].FragDecoderStatus.FragNbLost > 0 ) ) )
 800adc4:	8aeb      	ldrh	r3, [r5, #22]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 81f0 	beq.w	800b1ac <LmhpFragmentationOnMcpsIndication+0x49c>
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_STATUS_ANS;
 800adcc:	4b8f      	ldr	r3, [pc, #572]	; (800b00c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800adce:	689a      	ldr	r2, [r3, #8]
 800add0:	1c79      	adds	r1, r7, #1
 800add2:	b2c9      	uxtb	r1, r1
 800add4:	f04f 0801 	mov.w	r8, #1
 800add8:	f802 8007 	strb.w	r8, [r2, r7]
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbRx & 0xFF;
 800addc:	4b8c      	ldr	r3, [pc, #560]	; (800b010 <LmhpFragmentationOnMcpsIndication+0x300>)
 800adde:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 800ade2:	8a98      	ldrh	r0, [r3, #20]
 800ade4:	1cbd      	adds	r5, r7, #2
 800ade6:	b2ed      	uxtb	r5, r5
 800ade8:	5450      	strb	r0, [r2, r1]
                                                                               ( ( FragSessionData[fragIndex].FragDecoderStatus.FragNbRx >> 8 ) & 0x3F );
 800adea:	8a99      	ldrh	r1, [r3, #20]
 800adec:	f3c1 2105 	ubfx	r1, r1, #8, #6
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = ( fragIndex << 6 ) |
 800adf0:	1cf8      	adds	r0, r7, #3
 800adf2:	b2c0      	uxtb	r0, r0
 800adf4:	ea41 1189 	orr.w	r1, r1, r9, lsl #6
 800adf8:	5551      	strb	r1, [r2, r5]
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbLost;
 800adfa:	8add      	ldrh	r5, [r3, #22]
 800adfc:	1d39      	adds	r1, r7, #4
 800adfe:	b2c9      	uxtb	r1, r1
 800ae00:	5415      	strb	r5, [r2, r0]
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.MatrixError & 0x01;
 800ae02:	7e98      	ldrb	r0, [r3, #26]
 800ae04:	3705      	adds	r7, #5
 800ae06:	b2ff      	uxtb	r7, r7
 800ae08:	ea00 0008 	and.w	r0, r0, r8
 800ae0c:	5450      	strb	r0, [r2, r1]
                        BlockAckDelay = FragSessionData[fragIndex].FragGroupData.Control.Fields.BlockAckDelay;
 800ae0e:	795b      	ldrb	r3, [r3, #5]
 800ae10:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800ae14:	4a7f      	ldr	r2, [pc, #508]	; (800b014 <LmhpFragmentationOnMcpsIndication+0x304>)
 800ae16:	7013      	strb	r3, [r2, #0]
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 800ae18:	4625      	mov	r5, r4
 800ae1a:	e798      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                    if( mcpsIndication->Multicast == 1 )
 800ae1c:	78b1      	ldrb	r1, [r6, #2]
 800ae1e:	2901      	cmp	r1, #1
 800ae20:	d095      	beq.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                    fragSessionData.FragGroupData.FragSession.Value = mcpsIndication->Buffer[cmdIndex++];
 800ae22:	1c98      	adds	r0, r3, #2
 800ae24:	b2c0      	uxtb	r0, r0
 800ae26:	5d51      	ldrb	r1, [r2, r5]
 800ae28:	f88d 1019 	strb.w	r1, [sp, #25]
                    fragSessionData.FragGroupData.FragNb = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 800ae2c:	1cd9      	adds	r1, r3, #3
 800ae2e:	b2c9      	uxtb	r1, r1
 800ae30:	5c14      	ldrb	r4, [r2, r0]
 800ae32:	f8ad 401a 	strh.w	r4, [sp, #26]
                    fragSessionData.FragGroupData.FragNb |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 800ae36:	1d18      	adds	r0, r3, #4
 800ae38:	b2c0      	uxtb	r0, r0
 800ae3a:	5c51      	ldrb	r1, [r2, r1]
 800ae3c:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 800ae40:	f8ad 401a 	strh.w	r4, [sp, #26]
                    fragSessionData.FragGroupData.FragSize = mcpsIndication->Buffer[cmdIndex++];
 800ae44:	1d59      	adds	r1, r3, #5
 800ae46:	b2c9      	uxtb	r1, r1
 800ae48:	f812 c000 	ldrb.w	ip, [r2, r0]
 800ae4c:	f88d c01c 	strb.w	ip, [sp, #28]
                    fragSessionData.FragGroupData.Control.Value = mcpsIndication->Buffer[cmdIndex++];
 800ae50:	1d9d      	adds	r5, r3, #6
 800ae52:	b2ed      	uxtb	r5, r5
 800ae54:	5c51      	ldrb	r1, [r2, r1]
 800ae56:	f88d 101d 	strb.w	r1, [sp, #29]
                    fragSessionData.FragGroupData.Padding = mcpsIndication->Buffer[cmdIndex++];
 800ae5a:	1dd8      	adds	r0, r3, #7
 800ae5c:	b2c0      	uxtb	r0, r0
 800ae5e:	5d55      	ldrb	r5, [r2, r5]
 800ae60:	f88d 501e 	strb.w	r5, [sp, #30]
                    fragSessionData.FragGroupData.Descriptor = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800ae64:	f103 0e08 	add.w	lr, r3, #8
 800ae68:	fa5f fe8e 	uxtb.w	lr, lr
 800ae6c:	5c10      	ldrb	r0, [r2, r0]
 800ae6e:	9008      	str	r0, [sp, #32]
                    fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800ae70:	f103 0509 	add.w	r5, r3, #9
 800ae74:	b2ed      	uxtb	r5, r5
 800ae76:	f812 e00e 	ldrb.w	lr, [r2, lr]
 800ae7a:	eb00 200e 	add.w	r0, r0, lr, lsl #8
 800ae7e:	9008      	str	r0, [sp, #32]
                    fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800ae80:	f103 0e0a 	add.w	lr, r3, #10
 800ae84:	fa5f fe8e 	uxtb.w	lr, lr
 800ae88:	5d55      	ldrb	r5, [r2, r5]
 800ae8a:	eb00 4005 	add.w	r0, r0, r5, lsl #16
 800ae8e:	9008      	str	r0, [sp, #32]
                    fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800ae90:	f103 050b 	add.w	r5, r3, #11
 800ae94:	b2ed      	uxtb	r5, r5
 800ae96:	f812 e00e 	ldrb.w	lr, [r2, lr]
 800ae9a:	eb00 600e 	add.w	r0, r0, lr, lsl #24
 800ae9e:	9008      	str	r0, [sp, #32]
                    fragSessionData.FragGroupData.SessionCnt = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 800aea0:	f103 000c 	add.w	r0, r3, #12
 800aea4:	b2c0      	uxtb	r0, r0
 800aea6:	f812 e005 	ldrb.w	lr, [r2, r5]
 800aeaa:	f8ad e024 	strh.w	lr, [sp, #36]	; 0x24
                    fragSessionData.FragGroupData.SessionCnt += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 800aeae:	f103 080d 	add.w	r8, r3, #13
 800aeb2:	fa5f f888 	uxtb.w	r8, r8
 800aeb6:	5c10      	ldrb	r0, [r2, r0]
 800aeb8:	eb0e 2e00 	add.w	lr, lr, r0, lsl #8
 800aebc:	fa1f fe8e 	uxth.w	lr, lr
 800aec0:	f8ad e024 	strh.w	lr, [sp, #36]	; 0x24
                    fragSessionData.FragGroupData.Mic = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800aec4:	f103 050e 	add.w	r5, r3, #14
 800aec8:	b2ed      	uxtb	r5, r5
 800aeca:	f812 0008 	ldrb.w	r0, [r2, r8]
 800aece:	900a      	str	r0, [sp, #40]	; 0x28
                    fragSessionData.FragGroupData.Mic += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800aed0:	f103 090f 	add.w	r9, r3, #15
 800aed4:	fa5f f989 	uxtb.w	r9, r9
 800aed8:	5d55      	ldrb	r5, [r2, r5]
 800aeda:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800aede:	900a      	str	r0, [sp, #40]	; 0x28
                    fragSessionData.FragGroupData.Mic += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800aee0:	f103 0810 	add.w	r8, r3, #16
 800aee4:	fa5f f888 	uxtb.w	r8, r8
 800aee8:	f812 5009 	ldrb.w	r5, [r2, r9]
 800aeec:	eb00 4005 	add.w	r0, r0, r5, lsl #16
 800aef0:	900a      	str	r0, [sp, #40]	; 0x28
                    fragSessionData.FragGroupData.Mic += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800aef2:	3311      	adds	r3, #17
 800aef4:	b2dd      	uxtb	r5, r3
 800aef6:	f812 3008 	ldrb.w	r3, [r2, r8]
 800aefa:	eb00 6003 	add.w	r0, r0, r3, lsl #24
 800aefe:	900a      	str	r0, [sp, #40]	; 0x28
                    if( fragSessionData.FragGroupData.Control.Fields.FragAlgo > 0 )
 800af00:	f011 0138 	ands.w	r1, r1, #56	; 0x38
 800af04:	d000      	beq.n	800af08 <LmhpFragmentationOnMcpsIndication+0x1f8>
                        status |= 0x01; /* Encoding unsupported */
 800af06:	2101      	movs	r1, #1
                    if( ( fragSessionData.FragGroupData.FragNb > FRAG_MAX_NB ) ||
 800af08:	2c11      	cmp	r4, #17
 800af0a:	d80a      	bhi.n	800af22 <LmhpFragmentationOnMcpsIndication+0x212>
 800af0c:	f1bc 0f78 	cmp.w	ip, #120	; 0x78
 800af10:	d807      	bhi.n	800af22 <LmhpFragmentationOnMcpsIndication+0x212>
                        ( fragSessionData.FragGroupData.FragSize > FRAG_MAX_SIZE ) ||
 800af12:	f1bc 0f27 	cmp.w	ip, #39	; 0x27
 800af16:	d904      	bls.n	800af22 <LmhpFragmentationOnMcpsIndication+0x212>
                        ( ( fragSessionData.FragGroupData.FragNb * fragSessionData.FragGroupData.FragSize ) > FRAG_DECODER_DWL_REGION_SIZE ) )
 800af18:	fb0c f304 	mul.w	r3, ip, r4
                        ( fragSessionData.FragGroupData.FragSize < FRAG_MIN_SIZE ) ||
 800af1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af20:	dd01      	ble.n	800af26 <LmhpFragmentationOnMcpsIndication+0x216>
                        status |= 0x02; /* Not enough Memory */
 800af22:	f041 0102 	orr.w	r1, r1, #2
                    status |= ( fragSessionData.FragGroupData.FragSession.Fields.FragIndex << 6 ) & 0xC0;
 800af26:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800af2a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800af2e:	ea41 1883 	orr.w	r8, r1, r3, lsl #6
                    if( SessionCntPrev[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] >=
 800af32:	4a39      	ldr	r2, [pc, #228]	; (800b018 <LmhpFragmentationOnMcpsIndication+0x308>)
 800af34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800af38:	4572      	cmp	r2, lr
 800af3a:	db03      	blt.n	800af44 <LmhpFragmentationOnMcpsIndication+0x234>
                        status |= 0x10; /* SessionCnt Replay */
 800af3c:	f048 0110 	orr.w	r1, r8, #16
 800af40:	fa5f f881 	uxtb.w	r8, r1
                    if( ( status & 0x1F ) == 0 )
 800af44:	f018 0f1f 	tst.w	r8, #31
 800af48:	d00c      	beq.n	800af64 <LmhpFragmentationOnMcpsIndication+0x254>
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_SETUP_ANS;
 800af4a:	4b30      	ldr	r3, [pc, #192]	; (800b00c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800af4c:	689a      	ldr	r2, [r3, #8]
 800af4e:	1c7b      	adds	r3, r7, #1
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2102      	movs	r1, #2
 800af54:	55d1      	strb	r1, [r2, r7]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 800af56:	440f      	add	r7, r1
 800af58:	b2ff      	uxtb	r7, r7
 800af5a:	f802 8003 	strb.w	r8, [r2, r3]
                    isAnswerDelayed = false;
 800af5e:	f04f 0800 	mov.w	r8, #0
                    break;
 800af62:	e6f4      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                        fragSessionData.FragGroupData.IsActive = true;
 800af64:	2201      	movs	r2, #1
 800af66:	f88d 2018 	strb.w	r2, [sp, #24]
                        fragSessionData.FragDecoderProcessStatus = FRAG_SESSION_ONGOING;
 800af6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af6e:	920d      	str	r2, [sp, #52]	; 0x34
                        FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 800af70:	4a27      	ldr	r2, [pc, #156]	; (800b010 <LmhpFragmentationOnMcpsIndication+0x300>)
 800af72:	eb02 1e43 	add.w	lr, r2, r3, lsl #5
 800af76:	f10d 0918 	add.w	r9, sp, #24
 800af7a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800af7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800af82:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800af86:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
                        FragDecoderInit( fragSessionData.FragGroupData.FragNb,
 800af8a:	2302      	movs	r3, #2
 800af8c:	4a23      	ldr	r2, [pc, #140]	; (800b01c <LmhpFragmentationOnMcpsIndication+0x30c>)
 800af8e:	6812      	ldr	r2, [r2, #0]
 800af90:	4661      	mov	r1, ip
 800af92:	4620      	mov	r0, r4
 800af94:	f7fe f96e 	bl	8009274 <FragDecoderInit>
 800af98:	e7d7      	b.n	800af4a <LmhpFragmentationOnMcpsIndication+0x23a>
                    if( mcpsIndication->Multicast == 1 )
 800af9a:	78b1      	ldrb	r1, [r6, #2]
 800af9c:	2901      	cmp	r1, #1
 800af9e:	f43f aed6 	beq.w	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                    uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800afa2:	3302      	adds	r3, #2
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	5d52      	ldrb	r2, [r2, r5]
 800afa8:	f002 0203 	and.w	r2, r2, #3
                    if( ( id >= FRAGMENTATION_MAX_SESSIONS ) || ( FragSessionData[id].FragGroupData.IsActive == false ) )
 800afac:	0151      	lsls	r1, r2, #5
 800afae:	4818      	ldr	r0, [pc, #96]	; (800b010 <LmhpFragmentationOnMcpsIndication+0x300>)
 800afb0:	5c41      	ldrb	r1, [r0, r1]
 800afb2:	b971      	cbnz	r1, 800afd2 <LmhpFragmentationOnMcpsIndication+0x2c2>
                        status |= 0x04; /* Session does not exist */
 800afb4:	f042 0204 	orr.w	r2, r2, #4
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_DELETE_ANS;
 800afb8:	4914      	ldr	r1, [pc, #80]	; (800b00c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800afba:	6888      	ldr	r0, [r1, #8]
 800afbc:	1c79      	adds	r1, r7, #1
 800afbe:	b2c9      	uxtb	r1, r1
 800afc0:	2403      	movs	r4, #3
 800afc2:	55c4      	strb	r4, [r0, r7]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 800afc4:	3702      	adds	r7, #2
 800afc6:	b2ff      	uxtb	r7, r7
 800afc8:	5442      	strb	r2, [r0, r1]
                    uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800afca:	461d      	mov	r5, r3
                    isAnswerDelayed = false;
 800afcc:	f04f 0800 	mov.w	r8, #0
                    break;
 800afd0:	e6bd      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                        FragSessionData[id].FragGroupData.IsActive = false;
 800afd2:	0151      	lsls	r1, r2, #5
 800afd4:	480e      	ldr	r0, [pc, #56]	; (800b010 <LmhpFragmentationOnMcpsIndication+0x300>)
 800afd6:	2400      	movs	r4, #0
 800afd8:	5444      	strb	r4, [r0, r1]
 800afda:	e7ed      	b.n	800afb8 <LmhpFragmentationOnMcpsIndication+0x2a8>
                    if( mcpsIndication->Multicast == 1 )
 800afdc:	78b1      	ldrb	r1, [r6, #2]
 800afde:	2901      	cmp	r1, #1
 800afe0:	f43f aeb5 	beq.w	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800afe4:	3302      	adds	r3, #2
 800afe6:	b2dc      	uxtb	r4, r3
 800afe8:	5d53      	ldrb	r3, [r2, r5]
 800afea:	f003 0303 	and.w	r3, r3, #3

                    if( ( FragSessionData[fragIndex].FragGroupData.FragSession.Fields.FragIndex == fragIndex )
 800afee:	4a08      	ldr	r2, [pc, #32]	; (800b010 <LmhpFragmentationOnMcpsIndication+0x300>)
 800aff0:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 800aff4:	7852      	ldrb	r2, [r2, #1]
 800aff6:	f3c2 1201 	ubfx	r2, r2, #4, #2
 800affa:	4293      	cmp	r3, r2
 800affc:	d001      	beq.n	800b002 <LmhpFragmentationOnMcpsIndication+0x2f2>
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800affe:	4625      	mov	r5, r4
 800b000:	e6a5      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                        && ( LmhpFragmentationState.FragDataBlockAnsRequired == true ) )
 800b002:	4b02      	ldr	r3, [pc, #8]	; (800b00c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800b004:	789b      	ldrb	r3, [r3, #2]
 800b006:	b95b      	cbnz	r3, 800b020 <LmhpFragmentationOnMcpsIndication+0x310>
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b008:	4625      	mov	r5, r4
 800b00a:	e6a0      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
 800b00c:	20000c9c 	.word	0x20000c9c
 800b010:	20000c00 	.word	0x20000c00
 800b014:	20000bfc 	.word	0x20000bfc
 800b018:	200001b0 	.word	0x200001b0
 800b01c:	20000c98 	.word	0x20000c98
                    {
                        TimerStop( &FragmentProcessTimer );
 800b020:	4877      	ldr	r0, [pc, #476]	; (800b200 <LmhpFragmentationOnMcpsIndication+0x4f0>)
 800b022:	f00a f8b1 	bl	8015188 <UTIL_TIMER_Stop>
                        LmhpFragmentationState.IsTxPending = false;
 800b026:	4b77      	ldr	r3, [pc, #476]	; (800b204 <LmhpFragmentationOnMcpsIndication+0x4f4>)
 800b028:	2200      	movs	r2, #0
 800b02a:	705a      	strb	r2, [r3, #1]
                        LmhpFragmentationState.DataBufferSize = 0;
 800b02c:	711a      	strb	r2, [r3, #4]
                        LmhpFragmentationState.FragDataBlockAnsRequired = false;
 800b02e:	709a      	strb	r2, [r3, #2]
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b030:	4625      	mov	r5, r4
 800b032:	e68c      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
            case FRAGMENTATION_DATA_FRAGMENT:
                {
                    uint8_t fragIndex = 0;
                    uint16_t fragCounter = 0;

                    fragCounter = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 800b034:	1c99      	adds	r1, r3, #2
 800b036:	b2c9      	uxtb	r1, r1
 800b038:	5d50      	ldrb	r0, [r2, r5]
                    fragCounter |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 800b03a:	3303      	adds	r3, #3
 800b03c:	fa5f f983 	uxtb.w	r9, r3
 800b040:	5c55      	ldrb	r5, [r2, r1]
 800b042:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

                    fragIndex = ( fragCounter >> 14 ) & 0x03;
 800b046:	09ad      	lsrs	r5, r5, #6
                    fragCounter &= 0x3FFF;
 800b048:	f3c0 0b0d 	ubfx	fp, r0, #0, #14
                    if( FragSessionData[fragIndex].FragGroupData.IsActive == false )
 800b04c:	46aa      	mov	sl, r5
 800b04e:	016b      	lsls	r3, r5, #5
 800b050:	4a6d      	ldr	r2, [pc, #436]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b052:	5cd3      	ldrb	r3, [r2, r3]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 80ab 	beq.w	800b1b0 <LmhpFragmentationOnMcpsIndication+0x4a0>
                    {
                        cmdIndex = mcpsIndication->BufferSize;
                        break;
                    }
                    if( mcpsIndication->Multicast == 1 )
 800b05a:	78b3      	ldrb	r3, [r6, #2]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d011      	beq.n	800b084 <LmhpFragmentationOnMcpsIndication+0x374>
                            cmdIndex = mcpsIndication->BufferSize;
                            break;
                        }
                    }

                    if( FragSessionData[fragIndex].FragDecoderProcessStatus == FRAG_SESSION_ONGOING )
 800b060:	4b69      	ldr	r3, [pc, #420]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b062:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b06c:	d01b      	beq.n	800b0a6 <LmhpFragmentationOnMcpsIndication+0x396>
#endif /* FRAGMENTATION_VERSION */

                            FragSessionData[fragIndex].FragDecoderProcessStatus = FRAG_SESSION_NOT_STARTED;
                        }
                    }
                    cmdIndex += FragSessionData[fragIndex].FragGroupData.FragSize;
 800b06e:	4b66      	ldr	r3, [pc, #408]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b070:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b074:	791d      	ldrb	r5, [r3, #4]
 800b076:	444d      	add	r5, r9
 800b078:	b2ed      	uxtb	r5, r5
#if ( FRAGMENTATION_VERSION == 2 )
                    /* Store the previous session counter*/
                    SessionCntPrev[fragIndex] = FragSessionData[fragIndex].FragGroupData.SessionCnt;
 800b07a:	899a      	ldrh	r2, [r3, #12]
 800b07c:	4b63      	ldr	r3, [pc, #396]	; (800b20c <LmhpFragmentationOnMcpsIndication+0x4fc>)
 800b07e:	f843 202a 	str.w	r2, [r3, sl, lsl #2]
#endif /* FRAGMENTATION_VERSION */
                    break;
 800b082:	e664      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                        uint8_t groupId = LoRaMacMcChannelGetGroupId( mcpsIndication->DevAddress );
 800b084:	6970      	ldr	r0, [r6, #20]
 800b086:	f004 f81f 	bl	800f0c8 <LoRaMacMcChannelGetGroupId>
                        if( ( groupId == 0xFF ) ||
 800b08a:	28ff      	cmp	r0, #255	; 0xff
 800b08c:	d009      	beq.n	800b0a2 <LmhpFragmentationOnMcpsIndication+0x392>
                            ( ( FragSessionData[fragIndex].FragGroupData.FragSession.Fields.McGroupBitMask & ( 1 << groupId ) ) == 0 ) )
 800b08e:	4b5e      	ldr	r3, [pc, #376]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b090:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800b094:	785b      	ldrb	r3, [r3, #1]
 800b096:	f003 030f 	and.w	r3, r3, #15
 800b09a:	4103      	asrs	r3, r0
                        if( ( groupId == 0xFF ) ||
 800b09c:	f013 0f01 	tst.w	r3, #1
 800b0a0:	d1de      	bne.n	800b060 <LmhpFragmentationOnMcpsIndication+0x350>
                            cmdIndex = mcpsIndication->BufferSize;
 800b0a2:	7b35      	ldrb	r5, [r6, #12]
                            break;
 800b0a4:	e653      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                        FragSessionData[fragIndex].FragDecoderProcessStatus = FragDecoderProcess( fragCounter, &mcpsIndication->Buffer[cmdIndex] );
 800b0a6:	68b1      	ldr	r1, [r6, #8]
 800b0a8:	4449      	add	r1, r9
 800b0aa:	4658      	mov	r0, fp
 800b0ac:	f7fe f916 	bl	80092dc <FragDecoderProcess>
 800b0b0:	4c55      	ldr	r4, [pc, #340]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b0b2:	eb04 144a 	add.w	r4, r4, sl, lsl #5
 800b0b6:	61e0      	str	r0, [r4, #28]
                        FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus( );
 800b0b8:	a802      	add	r0, sp, #8
 800b0ba:	f7fe fa4f 	bl	800955c <FragDecoderGetStatus>
 800b0be:	f104 0314 	add.w	r3, r4, #20
 800b0c2:	9802      	ldr	r0, [sp, #8]
 800b0c4:	9903      	ldr	r1, [sp, #12]
 800b0c6:	c303      	stmia	r3!, {r0, r1}
                        if( LmhpFragmentationParams->OnProgress != NULL )
 800b0c8:	4b51      	ldr	r3, [pc, #324]	; (800b210 <LmhpFragmentationOnMcpsIndication+0x500>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68dc      	ldr	r4, [r3, #12]
 800b0ce:	b13c      	cbz	r4, 800b0e0 <LmhpFragmentationOnMcpsIndication+0x3d0>
                            LmhpFragmentationParams->OnProgress( FragSessionData[fragIndex].FragDecoderStatus.FragNbRx,
 800b0d0:	484d      	ldr	r0, [pc, #308]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b0d2:	eb00 104a 	add.w	r0, r0, sl, lsl #5
 800b0d6:	8ac3      	ldrh	r3, [r0, #22]
 800b0d8:	7902      	ldrb	r2, [r0, #4]
 800b0da:	8841      	ldrh	r1, [r0, #2]
 800b0dc:	8a80      	ldrh	r0, [r0, #20]
 800b0de:	47a0      	blx	r4
                        if( FragSessionData[fragIndex].FragDecoderProcessStatus >= 0 )
 800b0e0:	4b49      	ldr	r3, [pc, #292]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b0e2:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b0e6:	69d8      	ldr	r0, [r3, #28]
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	dbc0      	blt.n	800b06e <LmhpFragmentationOnMcpsIndication+0x35e>
                            if( LmhpFragmentationParams->OnDone != NULL )
 800b0ec:	4b48      	ldr	r3, [pc, #288]	; (800b210 <LmhpFragmentationOnMcpsIndication+0x500>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	691c      	ldr	r4, [r3, #16]
 800b0f2:	b154      	cbz	r4, 800b10a <LmhpFragmentationOnMcpsIndication+0x3fa>
                                                                 ( FragSessionData[fragIndex].FragGroupData.FragNb * FragSessionData[fragIndex].FragGroupData.FragSize ) -
 800b0f4:	4b44      	ldr	r3, [pc, #272]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b0f6:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b0fa:	8859      	ldrh	r1, [r3, #2]
 800b0fc:	791a      	ldrb	r2, [r3, #4]
 800b0fe:	fb02 f101 	mul.w	r1, r2, r1
                                                                 FragSessionData[fragIndex].FragGroupData.Padding,
 800b102:	799b      	ldrb	r3, [r3, #6]
                                LmhpFragmentationParams->OnDone( FragSessionData[fragIndex].FragDecoderProcessStatus,
 800b104:	aa05      	add	r2, sp, #20
 800b106:	1ac9      	subs	r1, r1, r3
 800b108:	47a0      	blx	r4
                            if( FragSessionData[fragIndex].FragGroupData.Control.Fields.AckReception == 1 )
 800b10a:	4b3f      	ldr	r3, [pc, #252]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b10c:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b110:	795b      	ldrb	r3, [r3, #5]
 800b112:	f3c3 1480 	ubfx	r4, r3, #6, #1
 800b116:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b11a:	d106      	bne.n	800b12a <LmhpFragmentationOnMcpsIndication+0x41a>
                            FragSessionData[fragIndex].FragDecoderProcessStatus = FRAG_SESSION_NOT_STARTED;
 800b11c:	4b3a      	ldr	r3, [pc, #232]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b11e:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b122:	f06f 0201 	mvn.w	r2, #1
 800b126:	61da      	str	r2, [r3, #28]
 800b128:	e7a1      	b.n	800b06e <LmhpFragmentationOnMcpsIndication+0x35e>
                                uint32_t micComputed = 0;
 800b12a:	f04f 0b00 	mov.w	fp, #0
 800b12e:	f8cd b018 	str.w	fp, [sp, #24]
                                                               ( FragSessionData[fragIndex].FragGroupData.FragNb * FragSessionData[fragIndex].FragGroupData.FragSize ) -
 800b132:	4b35      	ldr	r3, [pc, #212]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b134:	eb03 184a 	add.w	r8, r3, sl, lsl #5
 800b138:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800b13c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800b140:	fb03 f101 	mul.w	r1, r3, r1
                                                               FragSessionData[fragIndex].FragGroupData.Padding,
 800b144:	f898 0006 	ldrb.w	r0, [r8, #6]
                                LoRaMacProcessMicForDatablock( ( uint8_t * )UnfragmentedBufferAddr,
 800b148:	ab06      	add	r3, sp, #24
 800b14a:	9301      	str	r3, [sp, #4]
 800b14c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	462b      	mov	r3, r5
 800b154:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800b158:	1a09      	subs	r1, r1, r0
 800b15a:	9805      	ldr	r0, [sp, #20]
 800b15c:	f004 f84e 	bl	800f1fc <LoRaMacProcessMicForDatablock>
                                MW_LOG( TS_OFF, VLEVEL_M, "MIC         : %08X\r\n", micComputed );
 800b160:	9b06      	ldr	r3, [sp, #24]
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	4b2b      	ldr	r3, [pc, #172]	; (800b214 <LmhpFragmentationOnMcpsIndication+0x504>)
 800b166:	465a      	mov	r2, fp
 800b168:	4659      	mov	r1, fp
 800b16a:	2002      	movs	r0, #2
 800b16c:	f009 fcc4 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                                if( micComputed != FragSessionData[fragIndex].FragGroupData.Mic )
 800b170:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b174:	9b06      	ldr	r3, [sp, #24]
 800b176:	429a      	cmp	r2, r3
 800b178:	d001      	beq.n	800b17e <LmhpFragmentationOnMcpsIndication+0x46e>
                                    status |= 0x04;
 800b17a:	f045 0504 	orr.w	r5, r5, #4
                                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_DATA_BLOCK_RECEIVED_REQ;
 800b17e:	4a21      	ldr	r2, [pc, #132]	; (800b204 <LmhpFragmentationOnMcpsIndication+0x4f4>)
 800b180:	6891      	ldr	r1, [r2, #8]
 800b182:	1c7b      	adds	r3, r7, #1
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2004      	movs	r0, #4
 800b188:	55c8      	strb	r0, [r1, r7]
                                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 800b18a:	3702      	adds	r7, #2
 800b18c:	b2ff      	uxtb	r7, r7
 800b18e:	54cd      	strb	r5, [r1, r3]
                                BlockAckDelay = FragSessionData[fragIndex].FragGroupData.Control.Fields.BlockAckDelay;
 800b190:	4b1d      	ldr	r3, [pc, #116]	; (800b208 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800b192:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b196:	795b      	ldrb	r3, [r3, #5]
 800b198:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b19c:	491e      	ldr	r1, [pc, #120]	; (800b218 <LmhpFragmentationOnMcpsIndication+0x508>)
 800b19e:	700b      	strb	r3, [r1, #0]
                                LmhpFragmentationState.FragDataBlockAnsRequired = true;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	7093      	strb	r3, [r2, #2]
                                isAnswerDelayed = true;
 800b1a4:	46a0      	mov	r8, r4
 800b1a6:	e7b9      	b.n	800b11c <LmhpFragmentationOnMcpsIndication+0x40c>
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 800b1a8:	4625      	mov	r5, r4
 800b1aa:	e5d0      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
 800b1ac:	4625      	mov	r5, r4
 800b1ae:	e5ce      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>
                        cmdIndex = mcpsIndication->BufferSize;
 800b1b0:	4625      	mov	r5, r4
 800b1b2:	e5cc      	b.n	800ad4e <LmhpFragmentationOnMcpsIndication+0x3e>

    /* After processing the commands, if the end-node has to reply back then a flag is checked if the */
    /* reply is to be sent immediately or with a delay. */
    /* In some scenarios it is not desired that multiple end-notes send uplinks at the same time to */
    /* the same server. (Example: Fragment status during a multicast FUOTA) */
    if( dataBufferIndex != 0 )
 800b1b4:	b18f      	cbz	r7, 800b1da <LmhpFragmentationOnMcpsIndication+0x4ca>
    {
        /* Prepare Answer that is to be transmitted */
        LmhpFragmentationState.DataBufferSize = dataBufferIndex;
 800b1b6:	4b13      	ldr	r3, [pc, #76]	; (800b204 <LmhpFragmentationOnMcpsIndication+0x4f4>)
 800b1b8:	711f      	strb	r7, [r3, #4]

        if( isAnswerDelayed == true )
 800b1ba:	f1b8 0f00 	cmp.w	r8, #0
 800b1be:	d10f      	bne.n	800b1e0 <LmhpFragmentationOnMcpsIndication+0x4d0>
             */
            TxDelayTime = 3000 + ( randr( 0, 1000 ) * ( 1 << ( BlockAckDelay + 4 ) ) );
        }
        else
        {
            TxDelayTime = 3000;
 800b1c0:	4b16      	ldr	r3, [pc, #88]	; (800b21c <LmhpFragmentationOnMcpsIndication+0x50c>)
 800b1c2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800b1c6:	601a      	str	r2, [r3, #0]
        }
        TimerSetValue( &FragmentProcessTimer, TxDelayTime );
 800b1c8:	4c0d      	ldr	r4, [pc, #52]	; (800b200 <LmhpFragmentationOnMcpsIndication+0x4f0>)
 800b1ca:	4b14      	ldr	r3, [pc, #80]	; (800b21c <LmhpFragmentationOnMcpsIndication+0x50c>)
 800b1cc:	6819      	ldr	r1, [r3, #0]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f00a f87a 	bl	80152c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &FragmentProcessTimer );
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f00a f831 	bl	801523c <UTIL_TIMER_Start>
    }
}
 800b1da:	b00f      	add	sp, #60	; 0x3c
 800b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            TxDelayTime = 3000 + ( randr( 0, 1000 ) * ( 1 << ( BlockAckDelay + 4 ) ) );
 800b1e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	f007 fd9d 	bl	8012d24 <randr>
 800b1ea:	4b0b      	ldr	r3, [pc, #44]	; (800b218 <LmhpFragmentationOnMcpsIndication+0x508>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	fa00 f303 	lsl.w	r3, r0, r3
 800b1f4:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800b1f8:	4a08      	ldr	r2, [pc, #32]	; (800b21c <LmhpFragmentationOnMcpsIndication+0x50c>)
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	e7e4      	b.n	800b1c8 <LmhpFragmentationOnMcpsIndication+0x4b8>
 800b1fe:	4770      	bx	lr
 800b200:	20000c80 	.word	0x20000c80
 800b204:	20000c9c 	.word	0x20000c9c
 800b208:	20000c00 	.word	0x20000c00
 800b20c:	200001b0 	.word	0x200001b0
 800b210:	20000c98 	.word	0x20000c98
 800b214:	0801a718 	.word	0x0801a718
 800b218:	20000bfc 	.word	0x20000bfc
 800b21c:	20000ca8 	.word	0x20000ca8

0800b220 <LmhpFragmentationProcess>:
    if( LmhpFragmentationState.IsTxPending == true )
 800b220:	4b13      	ldr	r3, [pc, #76]	; (800b270 <LmhpFragmentationProcess+0x50>)
 800b222:	785b      	ldrb	r3, [r3, #1]
 800b224:	b903      	cbnz	r3, 800b228 <LmhpFragmentationProcess+0x8>
 800b226:	4770      	bx	lr
{
 800b228:	b510      	push	{r4, lr}
 800b22a:	b082      	sub	sp, #8
        LmHandlerAppData_t appData =
 800b22c:	23c9      	movs	r3, #201	; 0xc9
 800b22e:	f88d 3000 	strb.w	r3, [sp]
            .BufferSize = LmhpFragmentationState.DataBufferSize,
 800b232:	4b0f      	ldr	r3, [pc, #60]	; (800b270 <LmhpFragmentationProcess+0x50>)
 800b234:	791a      	ldrb	r2, [r3, #4]
        LmHandlerAppData_t appData =
 800b236:	f88d 2001 	strb.w	r2, [sp, #1]
            .Buffer     = LmhpFragmentationState.DataBuffer,
 800b23a:	689b      	ldr	r3, [r3, #8]
        LmHandlerAppData_t appData =
 800b23c:	9301      	str	r3, [sp, #4]
        lmhStatus = LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800b23e:	2201      	movs	r2, #1
 800b240:	2100      	movs	r1, #0
 800b242:	4668      	mov	r0, sp
 800b244:	f7fe fb32 	bl	80098ac <LmHandlerSend>
        if( ( lmhStatus != LORAMAC_HANDLER_SUCCESS ) || ( LmhpFragmentationState.FragDataBlockAnsRequired == true ) )
 800b248:	b910      	cbnz	r0, 800b250 <LmhpFragmentationProcess+0x30>
 800b24a:	4b09      	ldr	r3, [pc, #36]	; (800b270 <LmhpFragmentationProcess+0x50>)
 800b24c:	789b      	ldrb	r3, [r3, #2]
 800b24e:	b153      	cbz	r3, 800b266 <LmhpFragmentationProcess+0x46>
            TimerSetValue( &FragmentProcessTimer, 1500 );
 800b250:	4c08      	ldr	r4, [pc, #32]	; (800b274 <LmhpFragmentationProcess+0x54>)
 800b252:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800b256:	4620      	mov	r0, r4
 800b258:	f00a f836 	bl	80152c8 <UTIL_TIMER_SetPeriod>
            TimerStart( &FragmentProcessTimer );
 800b25c:	4620      	mov	r0, r4
 800b25e:	f009 ffed 	bl	801523c <UTIL_TIMER_Start>
}
 800b262:	b002      	add	sp, #8
 800b264:	bd10      	pop	{r4, pc}
            LmhpFragmentationState.IsTxPending = false;
 800b266:	4b02      	ldr	r3, [pc, #8]	; (800b270 <LmhpFragmentationProcess+0x50>)
 800b268:	2200      	movs	r2, #0
 800b26a:	705a      	strb	r2, [r3, #1]
            LmhpFragmentationState.DataBufferSize = 0;
 800b26c:	711a      	strb	r2, [r3, #4]
}
 800b26e:	e7f8      	b.n	800b262 <LmhpFragmentationProcess+0x42>
 800b270:	20000c9c 	.word	0x20000c9c
 800b274:	20000c80 	.word	0x20000c80

0800b278 <LmhpFragmentationInit>:
{
 800b278:	b500      	push	{lr}
 800b27a:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800b27c:	b198      	cbz	r0, 800b2a6 <LmhpFragmentationInit+0x2e>
 800b27e:	4603      	mov	r3, r0
 800b280:	b189      	cbz	r1, 800b2a6 <LmhpFragmentationInit+0x2e>
        LmhpFragmentationParams = ( LmhpFragmentationParams_t * )params;
 800b282:	4810      	ldr	r0, [pc, #64]	; (800b2c4 <LmhpFragmentationInit+0x4c>)
 800b284:	6003      	str	r3, [r0, #0]
        LmhpFragmentationState.DataBuffer = dataBuffer;
 800b286:	4b10      	ldr	r3, [pc, #64]	; (800b2c8 <LmhpFragmentationInit+0x50>)
 800b288:	6099      	str	r1, [r3, #8]
        LmhpFragmentationState.DataBufferMaxSize = dataBufferMaxSize;
 800b28a:	70da      	strb	r2, [r3, #3]
        LmhpFragmentationState.Initialized = true;
 800b28c:	2201      	movs	r2, #1
 800b28e:	701a      	strb	r2, [r3, #0]
        TxDelayTime = 0;
 800b290:	2200      	movs	r2, #0
 800b292:	4b0e      	ldr	r3, [pc, #56]	; (800b2cc <LmhpFragmentationInit+0x54>)
 800b294:	601a      	str	r2, [r3, #0]
        TimerInit( &FragmentProcessTimer, OnFragmentProcessTimer );
 800b296:	9200      	str	r2, [sp, #0]
 800b298:	4b0d      	ldr	r3, [pc, #52]	; (800b2d0 <LmhpFragmentationInit+0x58>)
 800b29a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b29e:	480d      	ldr	r0, [pc, #52]	; (800b2d4 <LmhpFragmentationInit+0x5c>)
 800b2a0:	f009 ff14 	bl	80150cc <UTIL_TIMER_Create>
 800b2a4:	e004      	b.n	800b2b0 <LmhpFragmentationInit+0x38>
        LmhpFragmentationParams = NULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	4a06      	ldr	r2, [pc, #24]	; (800b2c4 <LmhpFragmentationInit+0x4c>)
 800b2aa:	6013      	str	r3, [r2, #0]
        LmhpFragmentationState.Initialized = false;
 800b2ac:	4a06      	ldr	r2, [pc, #24]	; (800b2c8 <LmhpFragmentationInit+0x50>)
 800b2ae:	7013      	strb	r3, [r2, #0]
    LmhpFragmentationState.IsTxPending = false;
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <LmhpFragmentationInit+0x50>)
 800b2b4:	7059      	strb	r1, [r3, #1]
    memset1( ( uint8_t * )FragSessionData, 0, sizeof( FragSessionData ) );
 800b2b6:	2280      	movs	r2, #128	; 0x80
 800b2b8:	4807      	ldr	r0, [pc, #28]	; (800b2d8 <LmhpFragmentationInit+0x60>)
 800b2ba:	f007 fd58 	bl	8012d6e <memset1>
}
 800b2be:	b003      	add	sp, #12
 800b2c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2c4:	20000c98 	.word	0x20000c98
 800b2c8:	20000c9c 	.word	0x20000c9c
 800b2cc:	20000ca8 	.word	0x20000ca8
 800b2d0:	0800acd9 	.word	0x0800acd9
 800b2d4:	20000c80 	.word	0x20000c80
 800b2d8:	20000c00 	.word	0x20000c00

0800b2dc <LmhpFragmentationPackageFactory>:
}
 800b2dc:	4800      	ldr	r0, [pc, #0]	; (800b2e0 <LmhpFragmentationPackageFactory+0x4>)
 800b2de:	4770      	bx	lr
 800b2e0:	20000178 	.word	0x20000178

0800b2e4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	4604      	mov	r4, r0
#if (defined (LORAWAN_DATA_DISTRIB_MGT) && (LORAWAN_DATA_DISTRIB_MGT == 1))
    if( LmHandlerPackageRegister( PACKAGE_ID_CLOCK_SYNC, NULL ) != LORAMAC_HANDLER_SUCCESS )
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	2001      	movs	r0, #1
 800b2ec:	f7fe fd56 	bl	8009d9c <LmHandlerPackageRegister>
 800b2f0:	b978      	cbnz	r0, 800b312 <LmhpPackagesRegistrationInit+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    else if( LmHandlerPackageRegister( PACKAGE_ID_REMOTE_MCAST_SETUP, NULL ) != LORAMAC_HANDLER_SUCCESS )
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	2002      	movs	r0, #2
 800b2f6:	f7fe fd51 	bl	8009d9c <LmHandlerPackageRegister>
 800b2fa:	b968      	cbnz	r0, 800b318 <LmhpPackagesRegistrationInit+0x34>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    else if( LmHandlerPackageRegister( PACKAGE_ID_FRAGMENTATION,
 800b2fc:	490b      	ldr	r1, [pc, #44]	; (800b32c <LmhpPackagesRegistrationInit+0x48>)
 800b2fe:	2003      	movs	r0, #3
 800b300:	f7fe fd4c 	bl	8009d9c <LmHandlerPackageRegister>
 800b304:	b958      	cbnz	r0, 800b31e <LmhpPackagesRegistrationInit+0x3a>
                                       ( LmhpFragmentationParams_t * )&FRAG_DECODER_IF_FragmentationParams ) != LORAMAC_HANDLER_SUCCESS )
    {
        return LORAMAC_HANDLER_ERROR;
    }
#if (LORAWAN_PACKAGES_VERSION == 2)
    else if( LmHandlerPackageRegister( PACKAGE_ID_FIRMWARE_MANAGEMENT, fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800b306:	4621      	mov	r1, r4
 800b308:	2004      	movs	r0, #4
 800b30a:	f7fe fd47 	bl	8009d9c <LmHandlerPackageRegister>
 800b30e:	b948      	cbnz	r0, 800b324 <LmhpPackagesRegistrationInit+0x40>
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800b310:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800b312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b316:	e7fb      	b.n	800b310 <LmhpPackagesRegistrationInit+0x2c>
        return LORAMAC_HANDLER_ERROR;
 800b318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b31c:	e7f8      	b.n	800b310 <LmhpPackagesRegistrationInit+0x2c>
        return LORAMAC_HANDLER_ERROR;
 800b31e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b322:	e7f5      	b.n	800b310 <LmhpPackagesRegistrationInit+0x2c>
        return LORAMAC_HANDLER_ERROR;
 800b324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b328:	e7f2      	b.n	800b310 <LmhpPackagesRegistrationInit+0x2c>
 800b32a:	bf00      	nop
 800b32c:	0801a5f0 	.word	0x0801a5f0

0800b330 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
#if (defined (LORAWAN_DATA_DISTRIB_MGT) && (LORAWAN_DATA_DISTRIB_MGT == 1))
    if( package == NULL )
 800b330:	b1e1      	cbz	r1, 800b36c <LmhpPackagesRegister+0x3c>
{
 800b332:	b510      	push	{r4, lr}
 800b334:	460c      	mov	r4, r1
    {
        return LORAMAC_HANDLER_ERROR;
    }
    switch( id )
 800b336:	3801      	subs	r0, #1
 800b338:	2803      	cmp	r0, #3
 800b33a:	d81a      	bhi.n	800b372 <LmhpPackagesRegister+0x42>
 800b33c:	e8df f000 	tbb	[pc, r0]
 800b340:	110c0702 	.word	0x110c0702
    {
        case PACKAGE_ID_CLOCK_SYNC:
            {
                *package = LmhpClockSyncPackageFactory();
 800b344:	f7ff f80c 	bl	800a360 <LmhpClockSyncPackageFactory>
 800b348:	6020      	str	r0, [r4, #0]
            {
                *package = LmhpFirmwareManagementPackageFactory();
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
 800b34a:	2000      	movs	r0, #0
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800b34c:	bd10      	pop	{r4, pc}
                *package = LmhpRemoteMcastSetupPackageFactory();
 800b34e:	f000 fd5f 	bl	800be10 <LmhpRemoteMcastSetupPackageFactory>
 800b352:	6020      	str	r0, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800b354:	2000      	movs	r0, #0
                break;
 800b356:	e7f9      	b.n	800b34c <LmhpPackagesRegister+0x1c>
                *package = LmhpFragmentationPackageFactory();
 800b358:	f7ff ffc0 	bl	800b2dc <LmhpFragmentationPackageFactory>
 800b35c:	6020      	str	r0, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800b35e:	2000      	movs	r0, #0
                break;
 800b360:	e7f4      	b.n	800b34c <LmhpPackagesRegister+0x1c>
                *package = LmhpFirmwareManagementPackageFactory();
 800b362:	f7ff fcb5 	bl	800acd0 <LmhpFirmwareManagementPackageFactory>
 800b366:	6020      	str	r0, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800b368:	2000      	movs	r0, #0
                break;
 800b36a:	e7ef      	b.n	800b34c <LmhpPackagesRegister+0x1c>
        return LORAMAC_HANDLER_ERROR;
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b370:	4770      	bx	lr
    switch( id )
 800b372:	2000      	movs	r0, #0
 800b374:	e7ea      	b.n	800b34c <LmhpPackagesRegister+0x1c>
	...

0800b378 <LmhpRemoteMcastSetupIsInitialized>:
}

static bool LmhpRemoteMcastSetupIsInitialized( void )
{
    return LmhpRemoteMcastSetupState.Initialized;
}
 800b378:	4b01      	ldr	r3, [pc, #4]	; (800b380 <LmhpRemoteMcastSetupIsInitialized+0x8>)
 800b37a:	7818      	ldrb	r0, [r3, #0]
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	200001f8 	.word	0x200001f8

0800b384 <LmhpRemoteMcastSetupIsTxPending>:

static bool LmhpRemoteMcastSetupIsTxPending( void )
{
    return LmhpRemoteMcastSetupState.IsTxPending;
}
 800b384:	4b01      	ldr	r3, [pc, #4]	; (800b38c <LmhpRemoteMcastSetupIsTxPending+0x8>)
 800b386:	7858      	ldrb	r0, [r3, #1]
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	200001f8 	.word	0x200001f8

0800b390 <LmhpRemoteMcastSetupOnMcpsIndication>:
{
    uint8_t cmdIndex = 0;
    uint8_t dataBufferIndex = 0;
    uint8_t id = 0xFF;

    if( mcpsIndication->Port != REMOTE_MCAST_SETUP_PORT )
 800b390:	78c3      	ldrb	r3, [r0, #3]
 800b392:	2bc8      	cmp	r3, #200	; 0xc8
 800b394:	f040 8406 	bne.w	800bba4 <LmhpRemoteMcastSetupOnMcpsIndication+0x814>
{
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	b08f      	sub	sp, #60	; 0x3c
 800b39e:	4607      	mov	r7, r0
    uint8_t id = 0xFF;
 800b3a0:	26ff      	movs	r6, #255	; 0xff
    uint8_t dataBufferIndex = 0;
 800b3a2:	2500      	movs	r5, #0
    uint8_t cmdIndex = 0;
 800b3a4:	46a9      	mov	r9, r5
 800b3a6:	e00d      	b.n	800b3c4 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
        {
            case REMOTE_MCAST_SETUP_PKG_VERSION_REQ:
                {
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_PKG_VERSION_ANS;
 800b3a8:	4bc8      	ldr	r3, [pc, #800]	; (800b6cc <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800b3aa:	689a      	ldr	r2, [r3, #8]
 800b3ac:	1c68      	adds	r0, r5, #1
 800b3ae:	b2c0      	uxtb	r0, r0
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	5553      	strb	r3, [r2, r5]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_ID;
 800b3b4:	1cab      	adds	r3, r5, #2
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2402      	movs	r4, #2
 800b3ba:	5414      	strb	r4, [r2, r0]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_VERSION;
 800b3bc:	3503      	adds	r5, #3
 800b3be:	b2ed      	uxtb	r5, r5
 800b3c0:	54d4      	strb	r4, [r2, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800b3c2:	4689      	mov	r9, r1
    while( cmdIndex < mcpsIndication->BufferSize )
 800b3c4:	7b3b      	ldrb	r3, [r7, #12]
 800b3c6:	454b      	cmp	r3, r9
 800b3c8:	f240 832f 	bls.w	800ba2a <LmhpRemoteMcastSetupOnMcpsIndication+0x69a>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	f109 0301 	add.w	r3, r9, #1
 800b3d2:	b2d9      	uxtb	r1, r3
 800b3d4:	f812 3009 	ldrb.w	r3, [r2, r9]
 800b3d8:	2b05      	cmp	r3, #5
 800b3da:	f200 8324 	bhi.w	800ba26 <LmhpRemoteMcastSetupOnMcpsIndication+0x696>
 800b3de:	a001      	add	r0, pc, #4	; (adr r0, 800b3e4 <LmhpRemoteMcastSetupOnMcpsIndication+0x54>)
 800b3e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b3e4:	0800b3a9 	.word	0x0800b3a9
 800b3e8:	0800b3fd 	.word	0x0800b3fd
 800b3ec:	0800b4b1 	.word	0x0800b4b1
 800b3f0:	0800b66b 	.word	0x0800b66b
 800b3f4:	0800b6e5 	.word	0x0800b6e5
 800b3f8:	0800b877 	.word	0x0800b877
                    break;
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_STATUS_REQ:
                {
                    uint8_t nbAvailableGroups = 0;
                    uint8_t reqGroupMask = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 800b3fc:	f109 0902 	add.w	r9, r9, #2
 800b400:	fa5f f989 	uxtb.w	r9, r9
 800b404:	f812 c001 	ldrb.w	ip, [r2, r1]
 800b408:	f00c 0c0f 	and.w	ip, ip, #15
                    uint8_t AnsGroupMask = 0x00;

                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_STATUS_ANS;
 800b40c:	4baf      	ldr	r3, [pc, #700]	; (800b6cc <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800b40e:	6899      	ldr	r1, [r3, #8]
 800b410:	2301      	movs	r3, #1
 800b412:	554b      	strb	r3, [r1, r5]

                    /* move index to the next first optional list */
                    dataBufferIndex++;
 800b414:	3502      	adds	r5, #2
 800b416:	b2ed      	uxtb	r5, r5
                    uint8_t AnsGroupMask = 0x00;
 800b418:	2200      	movs	r2, #0
                    uint8_t nbAvailableGroups = 0;
 800b41a:	4613      	mov	r3, r2
                    for( id = 0; id < LORAMAC_MAX_MC_CTX; id++ )
 800b41c:	4616      	mov	r6, r2
 800b41e:	e03d      	b.n	800b49c <LmhpRemoteMcastSetupOnMcpsIndication+0x10c>
                    {
                        if( McSessionData[id].McGroupData.McGroupEnabled )
 800b420:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 800b424:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 800b6d0 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>
 800b428:	f81e 0030 	ldrb.w	r0, [lr, r0, lsl #3]
 800b42c:	b3a0      	cbz	r0, 800b498 <LmhpRemoteMcastSetupOnMcpsIndication+0x108>
                        {
                            nbAvailableGroups++;
 800b42e:	3301      	adds	r3, #1
 800b430:	b2db      	uxtb	r3, r3

                            /* If multicast group defined in the input bit mask */
                            if( ( reqGroupMask & ( 1 << id ) ) != 0 )
 800b432:	fa4c f006 	asr.w	r0, ip, r6
 800b436:	f010 0f01 	tst.w	r0, #1
 800b43a:	d02d      	beq.n	800b498 <LmhpRemoteMcastSetupOnMcpsIndication+0x108>
                            {
                                AnsGroupMask |= ( 1 << id );
 800b43c:	2001      	movs	r0, #1
 800b43e:	40b0      	lsls	r0, r6
 800b440:	4302      	orrs	r2, r0
 800b442:	b2d2      	uxtb	r2, r2
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = id;
 800b444:	f105 0b01 	add.w	fp, r5, #1
 800b448:	fa5f fb8b 	uxtb.w	fp, fp
 800b44c:	554e      	strb	r6, [r1, r5]
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( McSessionData[id].McGroupData.McAddr >> 0 ) & 0xFF;
 800b44e:	46f0      	mov	r8, lr
 800b450:	ebc6 0ec6 	rsb	lr, r6, r6, lsl #3
 800b454:	eb08 0ece 	add.w	lr, r8, lr, lsl #3
 800b458:	f8de 0004 	ldr.w	r0, [lr, #4]
 800b45c:	f105 0a02 	add.w	sl, r5, #2
 800b460:	fa5f fa8a 	uxtb.w	sl, sl
 800b464:	f801 000b 	strb.w	r0, [r1, fp]
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( McSessionData[id].McGroupData.McAddr >> 8 ) & 0xFF;
 800b468:	f8de 0004 	ldr.w	r0, [lr, #4]
 800b46c:	0a00      	lsrs	r0, r0, #8
 800b46e:	f105 0b03 	add.w	fp, r5, #3
 800b472:	fa5f fb8b 	uxtb.w	fp, fp
 800b476:	f801 000a 	strb.w	r0, [r1, sl]
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( McSessionData[id].McGroupData.McAddr >> 16 ) & 0xFF;
 800b47a:	f8be e006 	ldrh.w	lr, [lr, #6]
 800b47e:	1d28      	adds	r0, r5, #4
 800b480:	b2c0      	uxtb	r0, r0
 800b482:	f801 e00b 	strb.w	lr, [r1, fp]
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( McSessionData[id].McGroupData.McAddr >> 24 ) & 0xFF;
 800b486:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 800b48a:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800b48e:	f898 4007 	ldrb.w	r4, [r8, #7]
 800b492:	3505      	adds	r5, #5
 800b494:	b2ed      	uxtb	r5, r5
 800b496:	540c      	strb	r4, [r1, r0]
                    for( id = 0; id < LORAMAC_MAX_MC_CTX; id++ )
 800b498:	3601      	adds	r6, #1
 800b49a:	b2f6      	uxtb	r6, r6
 800b49c:	2e00      	cmp	r6, #0
 800b49e:	d0bf      	beq.n	800b420 <LmhpRemoteMcastSetupOnMcpsIndication+0x90>
                            }
                        }
                    }
                    /* set the status bit */
                    LmhpRemoteMcastSetupState.DataBuffer[1] = ( nbAvailableGroups & 0x07 ) << 4 | ( AnsGroupMask & 0x0F );
 800b4a0:	011b      	lsls	r3, r3, #4
 800b4a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b4a6:	f002 020f 	and.w	r2, r2, #15
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	704b      	strb	r3, [r1, #1]

                    break;
 800b4ae:	e789      	b.n	800b3c4 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_SETUP_REQ:
                {
                    uint8_t idError = 0x01; /* One bit value */
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b4b0:	f109 0802 	add.w	r8, r9, #2
 800b4b4:	fa5f f888 	uxtb.w	r8, r8
 800b4b8:	5c56      	ldrb	r6, [r2, r1]
 800b4ba:	f006 0603 	and.w	r6, r6, #3

                    McSessionData[id].McGroupData.IdHeader.Value = id;
 800b4be:	4634      	mov	r4, r6
 800b4c0:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 800b4c4:	4b82      	ldr	r3, [pc, #520]	; (800b6d0 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800b4c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4ca:	705e      	strb	r6, [r3, #1]

                    if( id < LORAMAC_MAX_MC_CTX )
 800b4cc:	b1b6      	cbz	r6, 800b4fc <LmhpRemoteMcastSetupOnMcpsIndication+0x16c>
                    uint8_t idError = 0x01; /* One bit value */
 800b4ce:	f04f 0c01 	mov.w	ip, #1
                        {
                            idError = 0x00;
                            McSessionData[id].McGroupData.McGroupEnabled = true;
                        }
                    }
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_SETUP_ANS;
 800b4d2:	4b7e      	ldr	r3, [pc, #504]	; (800b6cc <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800b4d4:	6899      	ldr	r1, [r3, #8]
 800b4d6:	1c6a      	adds	r2, r5, #1
 800b4d8:	b2d2      	uxtb	r2, r2
 800b4da:	2302      	movs	r3, #2
 800b4dc:	554b      	strb	r3, [r1, r5]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( idError << 2 ) | McSessionData[id].McGroupData.IdHeader.Fields.McGroupId;
 800b4de:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800b4e2:	4b7b      	ldr	r3, [pc, #492]	; (800b6d0 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800b4e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4e8:	785b      	ldrb	r3, [r3, #1]
 800b4ea:	f003 0303 	and.w	r3, r3, #3
 800b4ee:	3502      	adds	r5, #2
 800b4f0:	b2ed      	uxtb	r5, r5
 800b4f2:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 800b4f6:	548b      	strb	r3, [r1, r2]
                    break;
 800b4f8:	46c1      	mov	r9, r8
 800b4fa:	e763      	b.n	800b3c4 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                        McSessionData[id].McGroupData.McAddr = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	f109 0c03 	add.w	ip, r9, #3
 800b502:	fa5f fc8c 	uxtb.w	ip, ip
 800b506:	f813 2008 	ldrb.w	r2, [r3, r8]
 800b50a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800b50e:	4970      	ldr	r1, [pc, #448]	; (800b6d0 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800b510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b514:	604a      	str	r2, [r1, #4]
                        McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	f109 0004 	add.w	r0, r9, #4
 800b51c:	b2c0      	uxtb	r0, r0
 800b51e:	f813 300c 	ldrb.w	r3, [r3, ip]
 800b522:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 800b526:	604a      	str	r2, [r1, #4]
                        McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	f109 0c05 	add.w	ip, r9, #5
 800b52e:	fa5f fc8c 	uxtb.w	ip, ip
 800b532:	5c1b      	ldrb	r3, [r3, r0]
 800b534:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 800b538:	604a      	str	r2, [r1, #4]
                        McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800b53a:	68b8      	ldr	r0, [r7, #8]
 800b53c:	f109 0906 	add.w	r9, r9, #6
 800b540:	fa5f f389 	uxtb.w	r3, r9
 800b544:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b548:	eb02 6a00 	add.w	sl, r2, r0, lsl #24
 800b54c:	f8c1 a004 	str.w	sl, [r1, #4]
                        for( int8_t i = 0; i < 16; i++ )
 800b550:	2100      	movs	r1, #0
 800b552:	e00e      	b.n	800b572 <LmhpRemoteMcastSetupOnMcpsIndication+0x1e2>
                            McSessionData[id].McGroupData.McKeyEncrypted[i] = mcpsIndication->Buffer[cmdIndex++];
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	1c58      	adds	r0, r3, #1
 800b558:	f812 c003 	ldrb.w	ip, [r2, r3]
 800b55c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800b560:	4b5b      	ldr	r3, [pc, #364]	; (800b6d0 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800b562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b566:	440b      	add	r3, r1
 800b568:	f883 c008 	strb.w	ip, [r3, #8]
                        for( int8_t i = 0; i < 16; i++ )
 800b56c:	3101      	adds	r1, #1
 800b56e:	b249      	sxtb	r1, r1
                            McSessionData[id].McGroupData.McKeyEncrypted[i] = mcpsIndication->Buffer[cmdIndex++];
 800b570:	b2c3      	uxtb	r3, r0
                        for( int8_t i = 0; i < 16; i++ )
 800b572:	290f      	cmp	r1, #15
 800b574:	ddee      	ble.n	800b554 <LmhpRemoteMcastSetupOnMcpsIndication+0x1c4>
                        McSessionData[id].McGroupData.McFCountMin = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	1c59      	adds	r1, r3, #1
 800b57a:	b2c9      	uxtb	r1, r1
 800b57c:	5cd2      	ldrb	r2, [r2, r3]
 800b57e:	ebc4 0bc4 	rsb	fp, r4, r4, lsl #3
 800b582:	4853      	ldr	r0, [pc, #332]	; (800b6d0 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800b584:	eb00 0bcb 	add.w	fp, r0, fp, lsl #3
 800b588:	f8cb 2018 	str.w	r2, [fp, #24]
                        McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800b58c:	68b8      	ldr	r0, [r7, #8]
 800b58e:	f103 0c02 	add.w	ip, r3, #2
 800b592:	fa5f fc8c 	uxtb.w	ip, ip
 800b596:	5c41      	ldrb	r1, [r0, r1]
 800b598:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800b59c:	f8cb 2018 	str.w	r2, [fp, #24]
                        McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	1cd8      	adds	r0, r3, #3
 800b5a4:	b2c0      	uxtb	r0, r0
 800b5a6:	f811 100c 	ldrb.w	r1, [r1, ip]
 800b5aa:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800b5ae:	f8cb 2018 	str.w	r2, [fp, #24]
                        McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800b5b2:	68b9      	ldr	r1, [r7, #8]
 800b5b4:	f103 0c04 	add.w	ip, r3, #4
 800b5b8:	fa5f fc8c 	uxtb.w	ip, ip
 800b5bc:	5c09      	ldrb	r1, [r1, r0]
 800b5be:	eb02 6901 	add.w	r9, r2, r1, lsl #24
 800b5c2:	f8cb 9018 	str.w	r9, [fp, #24]
                        McSessionData[id].McGroupData.McFCountMax = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	1d59      	adds	r1, r3, #5
 800b5ca:	b2c9      	uxtb	r1, r1
 800b5cc:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b5d0:	f8cb 201c 	str.w	r2, [fp, #28]
                        McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800b5d4:	68b8      	ldr	r0, [r7, #8]
 800b5d6:	f103 0c06 	add.w	ip, r3, #6
 800b5da:	fa5f fc8c 	uxtb.w	ip, ip
 800b5de:	5c41      	ldrb	r1, [r0, r1]
 800b5e0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800b5e4:	f8cb 201c 	str.w	r2, [fp, #28]
                        McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b5e8:	68b9      	ldr	r1, [r7, #8]
 800b5ea:	1dd8      	adds	r0, r3, #7
 800b5ec:	b2c0      	uxtb	r0, r0
 800b5ee:	f811 100c 	ldrb.w	r1, [r1, ip]
 800b5f2:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800b5f6:	f8cb 201c 	str.w	r2, [fp, #28]
                        McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800b5fa:	68b9      	ldr	r1, [r7, #8]
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	fa5f f883 	uxtb.w	r8, r3
 800b602:	5c0b      	ldrb	r3, [r1, r0]
 800b604:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 800b608:	9303      	str	r3, [sp, #12]
 800b60a:	f8cb 301c 	str.w	r3, [fp, #28]
                        McChannelParams_t channel =
 800b60e:	2224      	movs	r2, #36	; 0x24
 800b610:	2100      	movs	r1, #0
 800b612:	f10d 0c14 	add.w	ip, sp, #20
 800b616:	4660      	mov	r0, ip
 800b618:	f00b fe7a 	bl	8017310 <memset>
 800b61c:	2301      	movs	r3, #1
 800b61e:	f88d 3014 	strb.w	r3, [sp, #20]
 800b622:	f88d 3015 	strb.w	r3, [sp, #21]
                            .GroupID = ( AddressIdentifier_t )McSessionData[id].McGroupData.IdHeader.Fields.McGroupId,
 800b626:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800b62a:	f3c3 0301 	ubfx	r3, r3, #0, #2
                        McChannelParams_t channel =
 800b62e:	f88d 3016 	strb.w	r3, [sp, #22]
 800b632:	f8cd a018 	str.w	sl, [sp, #24]
                            .McKeys.McKeyE = McSessionData[id].McGroupData.McKeyEncrypted,
 800b636:	00e3      	lsls	r3, r4, #3
 800b638:	1b1b      	subs	r3, r3, r4
 800b63a:	00db      	lsls	r3, r3, #3
 800b63c:	3308      	adds	r3, #8
 800b63e:	4824      	ldr	r0, [pc, #144]	; (800b6d0 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800b640:	4403      	add	r3, r0
                        McChannelParams_t channel =
 800b642:	9307      	str	r3, [sp, #28]
 800b644:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b648:	9b03      	ldr	r3, [sp, #12]
 800b64a:	930a      	str	r3, [sp, #40]	; 0x28
                        if( LoRaMacMcChannelSetup( &channel ) == LORAMAC_STATUS_OK )
 800b64c:	a805      	add	r0, sp, #20
 800b64e:	f003 fca1 	bl	800ef94 <LoRaMacMcChannelSetup>
 800b652:	4684      	mov	ip, r0
 800b654:	b930      	cbnz	r0, 800b664 <LmhpRemoteMcastSetupOnMcpsIndication+0x2d4>
                            McSessionData[id].McGroupData.McGroupEnabled = true;
 800b656:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800b65a:	4a1d      	ldr	r2, [pc, #116]	; (800b6d0 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800b65c:	2101      	movs	r1, #1
 800b65e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800b662:	e736      	b.n	800b4d2 <LmhpRemoteMcastSetupOnMcpsIndication+0x142>
                    uint8_t idError = 0x01; /* One bit value */
 800b664:	f04f 0c01 	mov.w	ip, #1
 800b668:	e733      	b.n	800b4d2 <LmhpRemoteMcastSetupOnMcpsIndication+0x142>
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_DELETE_REQ:
                {
                    uint8_t status = 0x00;
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b66a:	f109 0902 	add.w	r9, r9, #2
 800b66e:	fa5f f989 	uxtb.w	r9, r9
 800b672:	5c56      	ldrb	r6, [r2, r1]
 800b674:	f006 0603 	and.w	r6, r6, #3

                    status = id;
                    McSessionData[id].McGroupData.IdHeader.Value = 0;
 800b678:	4815      	ldr	r0, [pc, #84]	; (800b6d0 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800b67a:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 800b67e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800b682:	f04f 0800 	mov.w	r8, #0
 800b686:	f884 8001 	strb.w	r8, [r4, #1]
                    McSessionData[id].McGroupData.McAddr = 0;
 800b68a:	f8c4 8004 	str.w	r8, [r4, #4]
                    memset1( McSessionData[id].McGroupData.McKeyEncrypted, 0x00, 16 );
 800b68e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	3308      	adds	r3, #8
 800b696:	2210      	movs	r2, #16
 800b698:	4641      	mov	r1, r8
 800b69a:	4418      	add	r0, r3
 800b69c:	f007 fb67 	bl	8012d6e <memset1>
                    McSessionData[id].McGroupData.McFCountMin = 0;
 800b6a0:	f8c4 8018 	str.w	r8, [r4, #24]
                    McSessionData[id].McGroupData.McFCountMax = 0;
 800b6a4:	f8c4 801c 	str.w	r8, [r4, #28]

                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_DELETE_ANS;
 800b6a8:	4b08      	ldr	r3, [pc, #32]	; (800b6cc <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	1c6c      	adds	r4, r5, #1
 800b6ae:	b2e4      	uxtb	r4, r4
 800b6b0:	2203      	movs	r2, #3
 800b6b2:	555a      	strb	r2, [r3, r5]

                    if( LoRaMacMcChannelDelete( ( AddressIdentifier_t )id ) != LORAMAC_STATUS_OK )
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f003 fcc7 	bl	800f048 <LoRaMacMcChannelDelete>
 800b6ba:	b158      	cbz	r0, 800b6d4 <LmhpRemoteMcastSetupOnMcpsIndication+0x344>
                    {
                        status |= 0x04; /* McGroupUndefined bit set */
 800b6bc:	f046 0204 	orr.w	r2, r6, #4
                    }
                    else
                    {
                        McSessionData[id].McGroupData.McGroupEnabled = false;
                    }
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 800b6c0:	4b02      	ldr	r3, [pc, #8]	; (800b6cc <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	3502      	adds	r5, #2
 800b6c6:	b2ed      	uxtb	r5, r5
 800b6c8:	551a      	strb	r2, [r3, r4]
                    break;
 800b6ca:	e67b      	b.n	800b3c4 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
 800b6cc:	200001f8 	.word	0x200001f8
 800b6d0:	20000cac 	.word	0x20000cac
                        McSessionData[id].McGroupData.McGroupEnabled = false;
 800b6d4:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	4ac0      	ldr	r2, [pc, #768]	; (800b9dc <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800b6dc:	2100      	movs	r1, #0
 800b6de:	54d1      	strb	r1, [r2, r3]
                    status = id;
 800b6e0:	4632      	mov	r2, r6
 800b6e2:	e7ed      	b.n	800b6c0 <LmhpRemoteMcastSetupOnMcpsIndication+0x330>
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_REQ:
                {
                    bool isTimerSet = false;
                    int32_t timeToSessionStart = 0;
                    uint8_t status = 0x00;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f88d 3013 	strb.w	r3, [sp, #19]
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b6ea:	f109 0002 	add.w	r0, r9, #2
 800b6ee:	b2c0      	uxtb	r0, r0
 800b6f0:	5c56      	ldrb	r6, [r2, r1]

                    if( id < LORAMAC_MAX_MC_CTX )
 800b6f2:	f016 0603 	ands.w	r6, r6, #3
 800b6f6:	d020      	beq.n	800b73a <LmhpRemoteMcastSetupOnMcpsIndication+0x3aa>
                            }
                        }
                    }
                    else
                    {
                        status |= 0x10; /* McGroupUndefined bit set */
 800b6f8:	2310      	movs	r3, #16
 800b6fa:	f88d 3013 	strb.w	r3, [sp, #19]
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b6fe:	4681      	mov	r9, r0
                    int32_t timeToSessionStart = 0;
 800b700:	2400      	movs	r4, #0
                    bool isTimerSet = false;
 800b702:	46a4      	mov	ip, r4
                    }

                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_ANS;
 800b704:	4bb6      	ldr	r3, [pc, #728]	; (800b9e0 <LmhpRemoteMcastSetupOnMcpsIndication+0x650>)
 800b706:	689a      	ldr	r2, [r3, #8]
 800b708:	1c69      	adds	r1, r5, #1
 800b70a:	b2c9      	uxtb	r1, r1
 800b70c:	2304      	movs	r3, #4
 800b70e:	5553      	strb	r3, [r2, r5]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 800b710:	1cab      	adds	r3, r5, #2
 800b712:	b2db      	uxtb	r3, r3
 800b714:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800b718:	5450      	strb	r0, [r2, r1]
                    if( isTimerSet == true )
 800b71a:	f1bc 0f00 	cmp.w	ip, #0
 800b71e:	d00a      	beq.n	800b736 <LmhpRemoteMcastSetupOnMcpsIndication+0x3a6>
                    {
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 0 ) & 0xFF;
 800b720:	1ce8      	adds	r0, r5, #3
 800b722:	b2c0      	uxtb	r0, r0
 800b724:	54d4      	strb	r4, [r2, r3]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 8 ) & 0xFF;
 800b726:	1223      	asrs	r3, r4, #8
 800b728:	1d29      	adds	r1, r5, #4
 800b72a:	b2c9      	uxtb	r1, r1
 800b72c:	5413      	strb	r3, [r2, r0]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 16 ) & 0xFF;
 800b72e:	1424      	asrs	r4, r4, #16
 800b730:	1d6b      	adds	r3, r5, #5
 800b732:	b2db      	uxtb	r3, r3
 800b734:	5454      	strb	r4, [r2, r1]
                    }
                    break;
 800b736:	461d      	mov	r5, r3
 800b738:	e644      	b.n	800b3c4 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                        McSessionData[id].RxParams.Class = CLASS_C;
 800b73a:	49a8      	ldr	r1, [pc, #672]	; (800b9dc <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800b73c:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800b740:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800b744:	2202      	movs	r2, #2
 800b746:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        McSessionData[id].SessionTime = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	f109 0403 	add.w	r4, r9, #3
 800b750:	b2e4      	uxtb	r4, r4
 800b752:	5c12      	ldrb	r2, [r2, r0]
 800b754:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800b756:	68b8      	ldr	r0, [r7, #8]
 800b758:	f109 0e04 	add.w	lr, r9, #4
 800b75c:	fa5f fe8e 	uxtb.w	lr, lr
 800b760:	5d00      	ldrb	r0, [r0, r4]
 800b762:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800b766:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b768:	68b8      	ldr	r0, [r7, #8]
 800b76a:	f109 0c05 	add.w	ip, r9, #5
 800b76e:	fa5f fc8c 	uxtb.w	ip, ip
 800b772:	f810 000e 	ldrb.w	r0, [r0, lr]
 800b776:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 800b77a:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800b77c:	68b8      	ldr	r0, [r7, #8]
 800b77e:	f109 0406 	add.w	r4, r9, #6
 800b782:	b2e4      	uxtb	r4, r4
 800b784:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b788:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 800b78c:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += UNIX_GPS_EPOCH_OFFSET;
 800b78e:	4895      	ldr	r0, [pc, #596]	; (800b9e4 <LmhpRemoteMcastSetupOnMcpsIndication+0x654>)
 800b790:	4410      	add	r0, r2
 800b792:	6258      	str	r0, [r3, #36]	; 0x24
                        McSessionData[id].SessionTimeout =  mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	f109 0007 	add.w	r0, r9, #7
 800b79a:	b2c0      	uxtb	r0, r0
 800b79c:	5d12      	ldrb	r2, [r2, r4]
 800b79e:	f002 020f 	and.w	r2, r2, #15
 800b7a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        McSessionData[id].RxParams.Params.ClassC.Frequency = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	f109 0408 	add.w	r4, r9, #8
 800b7ac:	b2e4      	uxtb	r4, r4
 800b7ae:	5c12      	ldrb	r2, [r2, r0]
 800b7b0:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassC.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800b7b2:	68b8      	ldr	r0, [r7, #8]
 800b7b4:	f109 0c09 	add.w	ip, r9, #9
 800b7b8:	fa5f fc8c 	uxtb.w	ip, ip
 800b7bc:	5d00      	ldrb	r0, [r0, r4]
 800b7be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b7c2:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassC.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b7c4:	68b8      	ldr	r0, [r7, #8]
 800b7c6:	f109 040a 	add.w	r4, r9, #10
 800b7ca:	b2e4      	uxtb	r4, r4
 800b7cc:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b7d0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b7d4:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassC.Frequency *= 100;
 800b7d6:	2064      	movs	r0, #100	; 0x64
 800b7d8:	fb00 f202 	mul.w	r2, r0, r2
 800b7dc:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassC.Datarate = mcpsIndication->Buffer[cmdIndex++];
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	f109 090b 	add.w	r9, r9, #11
 800b7e4:	fa5f f989 	uxtb.w	r9, r9
 800b7e8:	5712      	ldrsb	r2, [r2, r4]
 800b7ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        if( LoRaMacMcChannelSetupRxParams( ( AddressIdentifier_t )id, &McSessionData[id].RxParams,
 800b7ee:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	3328      	adds	r3, #40	; 0x28
 800b7f6:	4419      	add	r1, r3
 800b7f8:	f10d 0213 	add.w	r2, sp, #19
 800b7fc:	3104      	adds	r1, #4
 800b7fe:	4630      	mov	r0, r6
 800b800:	f003 fc76 	bl	800f0f0 <LoRaMacMcChannelSetupRxParams>
 800b804:	b110      	cbz	r0, 800b80c <LmhpRemoteMcastSetupOnMcpsIndication+0x47c>
                    int32_t timeToSessionStart = 0;
 800b806:	2400      	movs	r4, #0
                    bool isTimerSet = false;
 800b808:	46a4      	mov	ip, r4
 800b80a:	e77b      	b.n	800b704 <LmhpRemoteMcastSetupOnMcpsIndication+0x374>
                            SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 800b80c:	2300      	movs	r3, #0
 800b80e:	9305      	str	r3, [sp, #20]
 800b810:	f8ad 3018 	strh.w	r3, [sp, #24]
                            curTime = SysTimeGet( );
 800b814:	a805      	add	r0, sp, #20
 800b816:	f009 fbc9 	bl	8014fac <SysTimeGet>
                            timeToSessionStart = McSessionData[id].SessionTime - curTime.Seconds;
 800b81a:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 800b81e:	4b6f      	ldr	r3, [pc, #444]	; (800b9dc <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800b820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b824:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b826:	9b05      	ldr	r3, [sp, #20]
 800b828:	1ae4      	subs	r4, r4, r3
                            if( timeToSessionStart > 0 )
 800b82a:	2c00      	cmp	r4, #0
 800b82c:	dc08      	bgt.n	800b840 <LmhpRemoteMcastSetupOnMcpsIndication+0x4b0>
                                status |= 0x10; /* McGroupUndefined bit set */
 800b82e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800b832:	f043 0310 	orr.w	r3, r3, #16
 800b836:	f88d 3013 	strb.w	r3, [sp, #19]
                    bool isTimerSet = false;
 800b83a:	f04f 0c00 	mov.w	ip, #0
 800b83e:	e761      	b.n	800b704 <LmhpRemoteMcastSetupOnMcpsIndication+0x374>
                                TimerSetValue( &SessionStartTimer[id], timeToSessionStart * 1000 );
 800b840:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800b844:	4b68      	ldr	r3, [pc, #416]	; (800b9e8 <LmhpRemoteMcastSetupOnMcpsIndication+0x658>)
 800b846:	eb03 0ac8 	add.w	sl, r3, r8, lsl #3
 800b84a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800b84e:	fb08 f804 	mul.w	r8, r8, r4
 800b852:	4641      	mov	r1, r8
 800b854:	4650      	mov	r0, sl
 800b856:	f009 fd37 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                                TimerStart( &SessionStartTimer[id] );
 800b85a:	4650      	mov	r0, sl
 800b85c:	f009 fcee 	bl	801523c <UTIL_TIMER_Start>
                                MW_LOG( TS_OFF, VLEVEL_M, "Time2SessionStart: %d ms\r\n", timeToSessionStart * 1000 );
 800b860:	f8cd 8000 	str.w	r8, [sp]
 800b864:	4b61      	ldr	r3, [pc, #388]	; (800b9ec <LmhpRemoteMcastSetupOnMcpsIndication+0x65c>)
 800b866:	2200      	movs	r2, #0
 800b868:	4611      	mov	r1, r2
 800b86a:	2002      	movs	r0, #2
 800b86c:	f009 f944 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                                isTimerSet = true;
 800b870:	f04f 0c01 	mov.w	ip, #1
 800b874:	e746      	b.n	800b704 <LmhpRemoteMcastSetupOnMcpsIndication+0x374>
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_CLASS_B_SESSION_REQ:
                {
                    bool isTimerSet = false;
                    int32_t timeToSessionStart = 0;
                    uint8_t status = 0x00;
 800b876:	2300      	movs	r3, #0
 800b878:	f88d 3013 	strb.w	r3, [sp, #19]
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b87c:	f109 0002 	add.w	r0, r9, #2
 800b880:	b2c0      	uxtb	r0, r0
 800b882:	5c56      	ldrb	r6, [r2, r1]

                    if( id < LORAMAC_MAX_MC_CTX )
 800b884:	f016 0603 	ands.w	r6, r6, #3
 800b888:	d020      	beq.n	800b8cc <LmhpRemoteMcastSetupOnMcpsIndication+0x53c>
                            }
                        }
                    }
                    else
                    {
                        status |= 0x10; /* McGroupUndefined bit set */
 800b88a:	2310      	movs	r3, #16
 800b88c:	f88d 3013 	strb.w	r3, [sp, #19]
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b890:	4681      	mov	r9, r0
                    int32_t timeToSessionStart = 0;
 800b892:	2400      	movs	r4, #0
                    bool isTimerSet = false;
 800b894:	46a4      	mov	ip, r4
                    }

                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_B_SESSION_ANS;
 800b896:	4b52      	ldr	r3, [pc, #328]	; (800b9e0 <LmhpRemoteMcastSetupOnMcpsIndication+0x650>)
 800b898:	689a      	ldr	r2, [r3, #8]
 800b89a:	1c69      	adds	r1, r5, #1
 800b89c:	b2c9      	uxtb	r1, r1
 800b89e:	2305      	movs	r3, #5
 800b8a0:	5553      	strb	r3, [r2, r5]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 800b8a2:	1cab      	adds	r3, r5, #2
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800b8aa:	5450      	strb	r0, [r2, r1]
                    if( isTimerSet == true )
 800b8ac:	f1bc 0f00 	cmp.w	ip, #0
 800b8b0:	d00a      	beq.n	800b8c8 <LmhpRemoteMcastSetupOnMcpsIndication+0x538>
                    {
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 0 ) & 0xFF;
 800b8b2:	1ce8      	adds	r0, r5, #3
 800b8b4:	b2c0      	uxtb	r0, r0
 800b8b6:	54d4      	strb	r4, [r2, r3]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 8 ) & 0xFF;
 800b8b8:	1223      	asrs	r3, r4, #8
 800b8ba:	1d29      	adds	r1, r5, #4
 800b8bc:	b2c9      	uxtb	r1, r1
 800b8be:	5413      	strb	r3, [r2, r0]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 16 ) & 0xFF;
 800b8c0:	1424      	asrs	r4, r4, #16
 800b8c2:	1d6b      	adds	r3, r5, #5
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	5454      	strb	r4, [r2, r1]
                    }
                    break;
 800b8c8:	461d      	mov	r5, r3
 800b8ca:	e57b      	b.n	800b3c4 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                        McSessionData[id].RxParams.Class = CLASS_B;
 800b8cc:	4943      	ldr	r1, [pc, #268]	; (800b9dc <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800b8ce:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800b8d2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        McSessionData[id].SessionTime = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	f109 0403 	add.w	r4, r9, #3
 800b8e2:	b2e4      	uxtb	r4, r4
 800b8e4:	5c12      	ldrb	r2, [r2, r0]
 800b8e6:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800b8e8:	68b8      	ldr	r0, [r7, #8]
 800b8ea:	f109 0e04 	add.w	lr, r9, #4
 800b8ee:	fa5f fe8e 	uxtb.w	lr, lr
 800b8f2:	5d00      	ldrb	r0, [r0, r4]
 800b8f4:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800b8f8:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b8fa:	68b8      	ldr	r0, [r7, #8]
 800b8fc:	f109 0c05 	add.w	ip, r9, #5
 800b900:	fa5f fc8c 	uxtb.w	ip, ip
 800b904:	f810 000e 	ldrb.w	r0, [r0, lr]
 800b908:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 800b90c:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800b90e:	68b8      	ldr	r0, [r7, #8]
 800b910:	f109 0406 	add.w	r4, r9, #6
 800b914:	b2e4      	uxtb	r4, r4
 800b916:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b91a:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 800b91e:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += UNIX_GPS_EPOCH_OFFSET;
 800b920:	4830      	ldr	r0, [pc, #192]	; (800b9e4 <LmhpRemoteMcastSetupOnMcpsIndication+0x654>)
 800b922:	4410      	add	r0, r2
 800b924:	6258      	str	r0, [r3, #36]	; 0x24
                        McSessionData[id].RxParams.Params.ClassB.Periodicity = ( mcpsIndication->Buffer[cmdIndex] >> 4 ) & 0x07;
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	5d12      	ldrb	r2, [r2, r4]
 800b92a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800b92e:	86da      	strh	r2, [r3, #54]	; 0x36
                        McSessionData[id].SessionTimeout =  mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	f109 0007 	add.w	r0, r9, #7
 800b936:	b2c0      	uxtb	r0, r0
 800b938:	5d12      	ldrb	r2, [r2, r4]
 800b93a:	f002 020f 	and.w	r2, r2, #15
 800b93e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        McSessionData[id].RxParams.Params.ClassB.Frequency = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	f109 0408 	add.w	r4, r9, #8
 800b948:	b2e4      	uxtb	r4, r4
 800b94a:	5c12      	ldrb	r2, [r2, r0]
 800b94c:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassB.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800b94e:	68b8      	ldr	r0, [r7, #8]
 800b950:	f109 0c09 	add.w	ip, r9, #9
 800b954:	fa5f fc8c 	uxtb.w	ip, ip
 800b958:	5d00      	ldrb	r0, [r0, r4]
 800b95a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b95e:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassB.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b960:	68b8      	ldr	r0, [r7, #8]
 800b962:	f109 040a 	add.w	r4, r9, #10
 800b966:	b2e4      	uxtb	r4, r4
 800b968:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b96c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b970:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassB.Frequency *= 100;
 800b972:	2064      	movs	r0, #100	; 0x64
 800b974:	fb00 f202 	mul.w	r2, r0, r2
 800b978:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassB.Datarate = mcpsIndication->Buffer[cmdIndex++];
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	f109 090b 	add.w	r9, r9, #11
 800b980:	fa5f f989 	uxtb.w	r9, r9
 800b984:	5712      	ldrsb	r2, [r2, r4]
 800b986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        if( LoRaMacMcChannelSetupRxParams( ( AddressIdentifier_t )id, &McSessionData[id].RxParams,
 800b98a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800b98e:	00db      	lsls	r3, r3, #3
 800b990:	3328      	adds	r3, #40	; 0x28
 800b992:	4419      	add	r1, r3
 800b994:	f10d 0213 	add.w	r2, sp, #19
 800b998:	3104      	adds	r1, #4
 800b99a:	4630      	mov	r0, r6
 800b99c:	f003 fba8 	bl	800f0f0 <LoRaMacMcChannelSetupRxParams>
 800b9a0:	b110      	cbz	r0, 800b9a8 <LmhpRemoteMcastSetupOnMcpsIndication+0x618>
                    int32_t timeToSessionStart = 0;
 800b9a2:	2400      	movs	r4, #0
                    bool isTimerSet = false;
 800b9a4:	46a4      	mov	ip, r4
 800b9a6:	e776      	b.n	800b896 <LmhpRemoteMcastSetupOnMcpsIndication+0x506>
                            SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	9305      	str	r3, [sp, #20]
 800b9ac:	f8ad 3018 	strh.w	r3, [sp, #24]
                            curTime = SysTimeGet( );
 800b9b0:	a805      	add	r0, sp, #20
 800b9b2:	f009 fafb 	bl	8014fac <SysTimeGet>
                            timeToSessionStart = McSessionData[id].SessionTime - curTime.Seconds;
 800b9b6:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 800b9ba:	4b08      	ldr	r3, [pc, #32]	; (800b9dc <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800b9bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b9c2:	9b05      	ldr	r3, [sp, #20]
 800b9c4:	1ae4      	subs	r4, r4, r3
                            if( timeToSessionStart > 0 )
 800b9c6:	2c00      	cmp	r4, #0
 800b9c8:	dc12      	bgt.n	800b9f0 <LmhpRemoteMcastSetupOnMcpsIndication+0x660>
                                status |= 0x10; /* McGroupUndefined bit set */
 800b9ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800b9ce:	f043 0310 	orr.w	r3, r3, #16
 800b9d2:	f88d 3013 	strb.w	r3, [sp, #19]
                    bool isTimerSet = false;
 800b9d6:	f04f 0c00 	mov.w	ip, #0
 800b9da:	e75c      	b.n	800b896 <LmhpRemoteMcastSetupOnMcpsIndication+0x506>
 800b9dc:	20000cac 	.word	0x20000cac
 800b9e0:	200001f8 	.word	0x200001f8
 800b9e4:	12d53d80 	.word	0x12d53d80
 800b9e8:	20000ce4 	.word	0x20000ce4
 800b9ec:	0801a730 	.word	0x0801a730
                                TimerSetValue( &SessionStartTimer[id], timeToSessionStart * 1000 );
 800b9f0:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800b9f4:	4b6c      	ldr	r3, [pc, #432]	; (800bba8 <LmhpRemoteMcastSetupOnMcpsIndication+0x818>)
 800b9f6:	eb03 0ac8 	add.w	sl, r3, r8, lsl #3
 800b9fa:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800b9fe:	fb08 f804 	mul.w	r8, r8, r4
 800ba02:	4641      	mov	r1, r8
 800ba04:	4650      	mov	r0, sl
 800ba06:	f009 fc5f 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                                TimerStart( &SessionStartTimer[id] );
 800ba0a:	4650      	mov	r0, sl
 800ba0c:	f009 fc16 	bl	801523c <UTIL_TIMER_Start>
                                MW_LOG( TS_OFF, VLEVEL_M, "Time2SessionStart: %d ms\r\n", timeToSessionStart * 1000 );
 800ba10:	f8cd 8000 	str.w	r8, [sp]
 800ba14:	4b65      	ldr	r3, [pc, #404]	; (800bbac <LmhpRemoteMcastSetupOnMcpsIndication+0x81c>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	4611      	mov	r1, r2
 800ba1a:	2002      	movs	r0, #2
 800ba1c:	f009 f86c 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                                isTimerSet = true;
 800ba20:	f04f 0c01 	mov.w	ip, #1
 800ba24:	e737      	b.n	800b896 <LmhpRemoteMcastSetupOnMcpsIndication+0x506>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800ba26:	4689      	mov	r9, r1
 800ba28:	e4cc      	b.n	800b3c4 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                    break;
                }
        }
    }

    if( dataBufferIndex != 0 )
 800ba2a:	b915      	cbnz	r5, 800ba32 <LmhpRemoteMcastSetupOnMcpsIndication+0x6a2>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx Freq     : %u\r\n", McSessionData[id].RxParams.Params.ClassC.Frequency );
                MW_LOG( TS_OFF, VLEVEL_M, "Rx DR       : DR_%d\r\n", McSessionData[id].RxParams.Params.ClassC.Datarate );
            }
        }
    }
}
 800ba2c:	b00f      	add	sp, #60	; 0x3c
 800ba2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LmHandlerAppData_t appData =
 800ba32:	23c8      	movs	r3, #200	; 0xc8
 800ba34:	f88d 3014 	strb.w	r3, [sp, #20]
 800ba38:	f88d 5015 	strb.w	r5, [sp, #21]
            .Buffer = LmhpRemoteMcastSetupState.DataBuffer,
 800ba3c:	4b5c      	ldr	r3, [pc, #368]	; (800bbb0 <LmhpRemoteMcastSetupOnMcpsIndication+0x820>)
 800ba3e:	689b      	ldr	r3, [r3, #8]
        LmHandlerAppData_t appData =
 800ba40:	9306      	str	r3, [sp, #24]
        LmHandlerGetDutyCycleEnable( &current_dutycycle );
 800ba42:	f10d 0013 	add.w	r0, sp, #19
 800ba46:	f7fe fa53 	bl	8009ef0 <LmHandlerGetDutyCycleEnable>
        LmHandlerSetDutyCycleEnable( false );
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	f7fe fa5c 	bl	8009f08 <LmHandlerSetDutyCycleEnable>
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ba50:	2201      	movs	r2, #1
 800ba52:	2100      	movs	r1, #0
 800ba54:	a805      	add	r0, sp, #20
 800ba56:	f7fd ff29 	bl	80098ac <LmHandlerSend>
        LmHandlerSetDutyCycleEnable( current_dutycycle );
 800ba5a:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800ba5e:	f7fe fa53 	bl	8009f08 <LmHandlerSetDutyCycleEnable>
        if( id != 0xFF && id < LORAMAC_MAX_MC_CTX )
 800ba62:	2e00      	cmp	r6, #0
 800ba64:	d1e2      	bne.n	800ba2c <LmhpRemoteMcastSetupOnMcpsIndication+0x69c>
            MW_LOG( TS_OFF, VLEVEL_M, "ID          : %d\r\n", McSessionData[id].McGroupData.IdHeader.Fields.McGroupId );
 800ba66:	4635      	mov	r5, r6
 800ba68:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800ba6c:	4c51      	ldr	r4, [pc, #324]	; (800bbb4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800ba6e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ba72:	7863      	ldrb	r3, [r4, #1]
 800ba74:	f003 0303 	and.w	r3, r3, #3
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	4b4f      	ldr	r3, [pc, #316]	; (800bbb8 <LmhpRemoteMcastSetupOnMcpsIndication+0x828>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	4611      	mov	r1, r2
 800ba80:	2002      	movs	r0, #2
 800ba82:	f009 f839 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "McAddr      : %08X\r\n", McSessionData[id].McGroupData.McAddr );
 800ba86:	6863      	ldr	r3, [r4, #4]
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	4b4c      	ldr	r3, [pc, #304]	; (800bbbc <LmhpRemoteMcastSetupOnMcpsIndication+0x82c>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4611      	mov	r1, r2
 800ba90:	2002      	movs	r0, #2
 800ba92:	f009 f831 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "McKey       : %02X", McSessionData[id].McGroupData.McKeyEncrypted[0] );
 800ba96:	7a23      	ldrb	r3, [r4, #8]
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	4b49      	ldr	r3, [pc, #292]	; (800bbc0 <LmhpRemoteMcastSetupOnMcpsIndication+0x830>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	4611      	mov	r1, r2
 800baa0:	2002      	movs	r0, #2
 800baa2:	f009 f829 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
            for( int32_t i = 1; i < 16; i++ )
 800baa6:	2401      	movs	r4, #1
 800baa8:	e00e      	b.n	800bac8 <LmhpRemoteMcastSetupOnMcpsIndication+0x738>
                MW_LOG( TS_OFF, VLEVEL_M, "-%02X",  McSessionData[id].McGroupData.McKeyEncrypted[i] );
 800baaa:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800baae:	4b41      	ldr	r3, [pc, #260]	; (800bbb4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800bab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bab4:	4423      	add	r3, r4
 800bab6:	7a1b      	ldrb	r3, [r3, #8]
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	4b42      	ldr	r3, [pc, #264]	; (800bbc4 <LmhpRemoteMcastSetupOnMcpsIndication+0x834>)
 800babc:	2200      	movs	r2, #0
 800babe:	4611      	mov	r1, r2
 800bac0:	2002      	movs	r0, #2
 800bac2:	f009 f819 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
            for( int32_t i = 1; i < 16; i++ )
 800bac6:	3401      	adds	r4, #1
 800bac8:	2c0f      	cmp	r4, #15
 800baca:	ddee      	ble.n	800baaa <LmhpRemoteMcastSetupOnMcpsIndication+0x71a>
            MW_LOG( TS_OFF, VLEVEL_M, "\r\n" );
 800bacc:	4b3e      	ldr	r3, [pc, #248]	; (800bbc8 <LmhpRemoteMcastSetupOnMcpsIndication+0x838>)
 800bace:	2200      	movs	r2, #0
 800bad0:	4611      	mov	r1, r2
 800bad2:	2002      	movs	r0, #2
 800bad4:	f009 f810 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "McFCountMin : %u\r\n",  McSessionData[id].McGroupData.McFCountMin );
 800bad8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800badc:	4c35      	ldr	r4, [pc, #212]	; (800bbb4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800bade:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800bae2:	69a3      	ldr	r3, [r4, #24]
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	4b39      	ldr	r3, [pc, #228]	; (800bbcc <LmhpRemoteMcastSetupOnMcpsIndication+0x83c>)
 800bae8:	2200      	movs	r2, #0
 800baea:	4611      	mov	r1, r2
 800baec:	2002      	movs	r0, #2
 800baee:	f009 f803 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "McFCountMax : %u\r\n",  McSessionData[id].McGroupData.McFCountMax );
 800baf2:	69e3      	ldr	r3, [r4, #28]
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	4b36      	ldr	r3, [pc, #216]	; (800bbd0 <LmhpRemoteMcastSetupOnMcpsIndication+0x840>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	4611      	mov	r1, r2
 800bafc:	2002      	movs	r0, #2
 800bafe:	f008 fffb 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "SessionTime : %u\r\n",  McSessionData[id].SessionTime );
 800bb02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	4b33      	ldr	r3, [pc, #204]	; (800bbd4 <LmhpRemoteMcastSetupOnMcpsIndication+0x844>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	2002      	movs	r0, #2
 800bb0e:	f008 fff3 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "SessionTimeT: %d s\r\n", ( 1 << McSessionData[id].SessionTimeout ) );
 800bb12:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bb16:	2301      	movs	r3, #1
 800bb18:	4093      	lsls	r3, r2
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	4b2e      	ldr	r3, [pc, #184]	; (800bbd8 <LmhpRemoteMcastSetupOnMcpsIndication+0x848>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	4611      	mov	r1, r2
 800bb22:	2002      	movs	r0, #2
 800bb24:	f008 ffe8 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
            if( McSessionData[id].RxParams.Class == CLASS_B )
 800bb28:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d01a      	beq.n	800bb66 <LmhpRemoteMcastSetupOnMcpsIndication+0x7d6>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx Freq     : %u\r\n", McSessionData[id].RxParams.Params.ClassC.Frequency );
 800bb30:	4c20      	ldr	r4, [pc, #128]	; (800bbb4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800bb32:	00ee      	lsls	r6, r5, #3
 800bb34:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800bb38:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800bb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	4b26      	ldr	r3, [pc, #152]	; (800bbdc <LmhpRemoteMcastSetupOnMcpsIndication+0x84c>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	4611      	mov	r1, r2
 800bb46:	2002      	movs	r0, #2
 800bb48:	f008 ffd6 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx DR       : DR_%d\r\n", McSessionData[id].RxParams.Params.ClassC.Datarate );
 800bb4c:	1b76      	subs	r6, r6, r5
 800bb4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bb52:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	4b21      	ldr	r3, [pc, #132]	; (800bbe0 <LmhpRemoteMcastSetupOnMcpsIndication+0x850>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	2002      	movs	r0, #2
 800bb60:	f008 ffca 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
 800bb64:	e762      	b.n	800ba2c <LmhpRemoteMcastSetupOnMcpsIndication+0x69c>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx Freq     : %u\r\n", McSessionData[id].RxParams.Params.ClassB.Frequency );
 800bb66:	4c13      	ldr	r4, [pc, #76]	; (800bbb4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800bb68:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800bb6c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800bb70:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	4b19      	ldr	r3, [pc, #100]	; (800bbdc <LmhpRemoteMcastSetupOnMcpsIndication+0x84c>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	4611      	mov	r1, r2
 800bb7a:	2002      	movs	r0, #2
 800bb7c:	f008 ffbc 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx DR       : DR_%d\r\n", McSessionData[id].RxParams.Params.ClassB.Datarate );
 800bb80:	f996 3034 	ldrsb.w	r3, [r6, #52]	; 0x34
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	4b16      	ldr	r3, [pc, #88]	; (800bbe0 <LmhpRemoteMcastSetupOnMcpsIndication+0x850>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	2002      	movs	r0, #2
 800bb8e:	f008 ffb3 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                MW_LOG( TS_OFF, VLEVEL_M, "Periodicity : %u\r\n", McSessionData[id].RxParams.Params.ClassB.Periodicity );
 800bb92:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	4b13      	ldr	r3, [pc, #76]	; (800bbe4 <LmhpRemoteMcastSetupOnMcpsIndication+0x854>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4611      	mov	r1, r2
 800bb9c:	2002      	movs	r0, #2
 800bb9e:	f008 ffab 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
 800bba2:	e743      	b.n	800ba2c <LmhpRemoteMcastSetupOnMcpsIndication+0x69c>
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	20000ce4 	.word	0x20000ce4
 800bbac:	0801a730 	.word	0x0801a730
 800bbb0:	200001f8 	.word	0x200001f8
 800bbb4:	20000cac 	.word	0x20000cac
 800bbb8:	0801a74c 	.word	0x0801a74c
 800bbbc:	0801a760 	.word	0x0801a760
 800bbc0:	0801a778 	.word	0x0801a778
 800bbc4:	0801a78c 	.word	0x0801a78c
 800bbc8:	0801a538 	.word	0x0801a538
 800bbcc:	0801a794 	.word	0x0801a794
 800bbd0:	0801a7a8 	.word	0x0801a7a8
 800bbd4:	0801a7bc 	.word	0x0801a7bc
 800bbd8:	0801a7d0 	.word	0x0801a7d0
 800bbdc:	0801a7e8 	.word	0x0801a7e8
 800bbe0:	0801a7fc 	.word	0x0801a7fc
 800bbe4:	0801a814 	.word	0x0801a814

0800bbe8 <LmhpRemoteMcastSetupProcess>:
{
 800bbe8:	b510      	push	{r4, lr}
 800bbea:	b082      	sub	sp, #8
    DeviceClass_t deviceClass = CLASS_A;
 800bbec:	2300      	movs	r3, #0
 800bbee:	f88d 3007 	strb.w	r3, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbf2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bbf6:	b672      	cpsid	i
    state = LmhpRemoteMcastSetupState.SessionState;
 800bbf8:	4a4b      	ldr	r2, [pc, #300]	; (800bd28 <LmhpRemoteMcastSetupProcess+0x140>)
 800bbfa:	7893      	ldrb	r3, [r2, #2]
    id = LmhpRemoteMcastSetupState.ID;
 800bbfc:	78d4      	ldrb	r4, [r2, #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbfe:	f381 8810 	msr	PRIMASK, r1
    switch( state )
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d003      	beq.n	800bc0e <LmhpRemoteMcastSetupProcess+0x26>
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d070      	beq.n	800bcec <LmhpRemoteMcastSetupProcess+0x104>
}
 800bc0a:	b002      	add	sp, #8
 800bc0c:	bd10      	pop	{r4, pc}
            LmHandlerGetCurrentClass( &deviceClass );
 800bc0e:	f10d 0007 	add.w	r0, sp, #7
 800bc12:	f7fd ff4f 	bl	8009ab4 <LmHandlerGetCurrentClass>
            if( ( ( McSessionData[id].RxParams.Class == CLASS_B ) && ( deviceClass == CLASS_C ) ) ||
 800bc16:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800bc1a:	4b44      	ldr	r3, [pc, #272]	; (800bd2c <LmhpRemoteMcastSetupProcess+0x144>)
 800bc1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc20:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
 800bc24:	2801      	cmp	r0, #1
 800bc26:	d02e      	beq.n	800bc86 <LmhpRemoteMcastSetupProcess+0x9e>
 800bc28:	2802      	cmp	r0, #2
 800bc2a:	d103      	bne.n	800bc34 <LmhpRemoteMcastSetupProcess+0x4c>
                ( ( McSessionData[id].RxParams.Class == CLASS_C ) && ( deviceClass == CLASS_B ) ) )
 800bc2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d02c      	beq.n	800bc8e <LmhpRemoteMcastSetupProcess+0xa6>
                if( LmHandlerRequestClass( McSessionData[id].RxParams.Class ) == LORAMAC_HANDLER_SUCCESS )
 800bc34:	f7fd fee4 	bl	8009a00 <LmHandlerRequestClass>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d13d      	bne.n	800bcb8 <LmhpRemoteMcastSetupProcess+0xd0>
                    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_IDLE;
 800bc3c:	4b3a      	ldr	r3, [pc, #232]	; (800bd28 <LmhpRemoteMcastSetupProcess+0x140>)
 800bc3e:	2200      	movs	r2, #0
 800bc40:	709a      	strb	r2, [r3, #2]
                    if( McSessionData[id].RxParams.Class == CLASS_B )
 800bc42:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800bc46:	4b39      	ldr	r3, [pc, #228]	; (800bd2c <LmhpRemoteMcastSetupProcess+0x144>)
 800bc48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d020      	beq.n	800bc96 <LmhpRemoteMcastSetupProcess+0xae>
                        TimerSetValue( &SessionStopTimer[id], ( 1 << McSessionData[id].SessionTimeout ) * 1000 );
 800bc54:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800bc58:	4b34      	ldr	r3, [pc, #208]	; (800bd2c <LmhpRemoteMcastSetupProcess+0x144>)
 800bc5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc62:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800bc66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bc6a:	4099      	lsls	r1, r3
 800bc6c:	4b30      	ldr	r3, [pc, #192]	; (800bd30 <LmhpRemoteMcastSetupProcess+0x148>)
 800bc6e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800bc72:	f009 fb29 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                    TimerStart( &SessionStopTimer[id] );
 800bc76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800bc7a:	482d      	ldr	r0, [pc, #180]	; (800bd30 <LmhpRemoteMcastSetupProcess+0x148>)
 800bc7c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800bc80:	f009 fadc 	bl	801523c <UTIL_TIMER_Start>
 800bc84:	e7c1      	b.n	800bc0a <LmhpRemoteMcastSetupProcess+0x22>
            if( ( ( McSessionData[id].RxParams.Class == CLASS_B ) && ( deviceClass == CLASS_C ) ) ||
 800bc86:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d1cc      	bne.n	800bc28 <LmhpRemoteMcastSetupProcess+0x40>
                LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_IDLE;
 800bc8e:	4b26      	ldr	r3, [pc, #152]	; (800bd28 <LmhpRemoteMcastSetupProcess+0x140>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	709a      	strb	r2, [r3, #2]
 800bc94:	e7b9      	b.n	800bc0a <LmhpRemoteMcastSetupProcess+0x22>
                        TimerSetValue( &SessionStopTimer[id], ( 1 << McSessionData[id].SessionTimeout ) * 1000 * 128 );
 800bc96:	4b25      	ldr	r3, [pc, #148]	; (800bd2c <LmhpRemoteMcastSetupProcess+0x144>)
 800bc98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bca4:	4099      	lsls	r1, r3
 800bca6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800bcaa:	01c9      	lsls	r1, r1, #7
 800bcac:	4b20      	ldr	r3, [pc, #128]	; (800bd30 <LmhpRemoteMcastSetupProcess+0x148>)
 800bcae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800bcb2:	f009 fb09 	bl	80152c8 <UTIL_TIMER_SetPeriod>
 800bcb6:	e7de      	b.n	800bc76 <LmhpRemoteMcastSetupProcess+0x8e>
                    TimerSetValue( &SessionStartTimer[id], 1000 );
 800bcb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800bcbc:	4b1d      	ldr	r3, [pc, #116]	; (800bd34 <LmhpRemoteMcastSetupProcess+0x14c>)
 800bcbe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bcc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f009 fafe 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                    TimerStart( &SessionStartTimer[id] );
 800bccc:	4620      	mov	r0, r4
 800bcce:	f009 fab5 	bl	801523c <UTIL_TIMER_Start>
 800bcd2:	e79a      	b.n	800bc0a <LmhpRemoteMcastSetupProcess+0x22>
                if( McSessionData[id_index].SessionState == SESSION_STARTED )
 800bcd4:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800bcd8:	4a14      	ldr	r2, [pc, #80]	; (800bd2c <LmhpRemoteMcastSetupProcess+0x144>)
 800bcda:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bcde:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bce2:	2a01      	cmp	r2, #1
 800bce4:	d010      	beq.n	800bd08 <LmhpRemoteMcastSetupProcess+0x120>
            for( uint8_t id_index = 0; id_index < LORAMAC_MAX_MC_CTX; id_index++ )
 800bce6:	3301      	adds	r3, #1
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	e000      	b.n	800bcee <LmhpRemoteMcastSetupProcess+0x106>
    switch( state )
 800bcec:	2300      	movs	r3, #0
            for( uint8_t id_index = 0; id_index < LORAMAC_MAX_MC_CTX; id_index++ )
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d0f0      	beq.n	800bcd4 <LmhpRemoteMcastSetupProcess+0xec>
    bool active_session = false;
 800bcf2:	2300      	movs	r3, #0
            if( active_session == false )
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d188      	bne.n	800bc0a <LmhpRemoteMcastSetupProcess+0x22>
                if( LmHandlerRequestClass( CLASS_A ) == LORAMAC_HANDLER_SUCCESS )
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	f7fd fe81 	bl	8009a00 <LmHandlerRequestClass>
 800bcfe:	b928      	cbnz	r0, 800bd0c <LmhpRemoteMcastSetupProcess+0x124>
                    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_IDLE;
 800bd00:	4b09      	ldr	r3, [pc, #36]	; (800bd28 <LmhpRemoteMcastSetupProcess+0x140>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	709a      	strb	r2, [r3, #2]
 800bd06:	e780      	b.n	800bc0a <LmhpRemoteMcastSetupProcess+0x22>
                    active_session = true;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e7f3      	b.n	800bcf4 <LmhpRemoteMcastSetupProcess+0x10c>
                    TimerSetValue( &SessionStopTimer[id], 1000 );
 800bd0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800bd10:	4b07      	ldr	r3, [pc, #28]	; (800bd30 <LmhpRemoteMcastSetupProcess+0x148>)
 800bd12:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bd16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f009 fad4 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                    TimerStart( &SessionStopTimer[id] );
 800bd20:	4620      	mov	r0, r4
 800bd22:	f009 fa8b 	bl	801523c <UTIL_TIMER_Start>
}
 800bd26:	e770      	b.n	800bc0a <LmhpRemoteMcastSetupProcess+0x22>
 800bd28:	200001f8 	.word	0x200001f8
 800bd2c:	20000cac 	.word	0x20000cac
 800bd30:	20000cfc 	.word	0x20000cfc
 800bd34:	20000ce4 	.word	0x20000ce4

0800bd38 <LmhpRemoteMcastSetupInit>:
{
 800bd38:	b510      	push	{r4, lr}
 800bd3a:	b082      	sub	sp, #8
    if( dataBuffer != NULL )
 800bd3c:	b1d9      	cbz	r1, 800bd76 <LmhpRemoteMcastSetupInit+0x3e>
        LmhpRemoteMcastSetupState.DataBuffer = dataBuffer;
 800bd3e:	4b14      	ldr	r3, [pc, #80]	; (800bd90 <LmhpRemoteMcastSetupInit+0x58>)
 800bd40:	6099      	str	r1, [r3, #8]
        LmhpRemoteMcastSetupState.DataBufferMaxSize = dataBufferMaxSize;
 800bd42:	711a      	strb	r2, [r3, #4]
        LmhpRemoteMcastSetupState.Initialized = true;
 800bd44:	2201      	movs	r2, #1
 800bd46:	701a      	strb	r2, [r3, #0]
        TimerInit( &SessionStartTimer[0], OnSessionStartTimer0 );
 800bd48:	2400      	movs	r4, #0
 800bd4a:	9400      	str	r4, [sp, #0]
 800bd4c:	4b11      	ldr	r3, [pc, #68]	; (800bd94 <LmhpRemoteMcastSetupInit+0x5c>)
 800bd4e:	4622      	mov	r2, r4
 800bd50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bd54:	4810      	ldr	r0, [pc, #64]	; (800bd98 <LmhpRemoteMcastSetupInit+0x60>)
 800bd56:	f009 f9b9 	bl	80150cc <UTIL_TIMER_Create>
        TimerInit( &SessionStopTimer[0], OnSessionStopTimer0 );
 800bd5a:	9400      	str	r4, [sp, #0]
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <LmhpRemoteMcastSetupInit+0x64>)
 800bd5e:	4622      	mov	r2, r4
 800bd60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bd64:	480e      	ldr	r0, [pc, #56]	; (800bda0 <LmhpRemoteMcastSetupInit+0x68>)
 800bd66:	f009 f9b1 	bl	80150cc <UTIL_TIMER_Create>
    LmhpRemoteMcastSetupState.IsTxPending = false;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	4a08      	ldr	r2, [pc, #32]	; (800bd90 <LmhpRemoteMcastSetupInit+0x58>)
 800bd6e:	7053      	strb	r3, [r2, #1]
    for( uint8_t id = 0; id < LORAMAC_MAX_MC_CTX; id++ )
 800bd70:	b12b      	cbz	r3, 800bd7e <LmhpRemoteMcastSetupInit+0x46>
}
 800bd72:	b002      	add	sp, #8
 800bd74:	bd10      	pop	{r4, pc}
        LmhpRemoteMcastSetupState.Initialized = false;
 800bd76:	4b06      	ldr	r3, [pc, #24]	; (800bd90 <LmhpRemoteMcastSetupInit+0x58>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	e7f5      	b.n	800bd6a <LmhpRemoteMcastSetupInit+0x32>
        McSessionData[id].McGroupData.McGroupEnabled = false;
 800bd7e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800bd82:	00d2      	lsls	r2, r2, #3
 800bd84:	4907      	ldr	r1, [pc, #28]	; (800bda4 <LmhpRemoteMcastSetupInit+0x6c>)
 800bd86:	2000      	movs	r0, #0
 800bd88:	5488      	strb	r0, [r1, r2]
    for( uint8_t id = 0; id < LORAMAC_MAX_MC_CTX; id++ )
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	e7ef      	b.n	800bd70 <LmhpRemoteMcastSetupInit+0x38>
 800bd90:	200001f8 	.word	0x200001f8
 800bd94:	0800bddd 	.word	0x0800bddd
 800bd98:	20000ce4 	.word	0x20000ce4
 800bd9c:	0800bda9 	.word	0x0800bda9
 800bda0:	20000cfc 	.word	0x20000cfc
 800bda4:	20000cac 	.word	0x20000cac

0800bda8 <OnSessionStopTimer0>:
        LmhpRemoteMcastSetupPackage.OnPackageProcessEvent();
    }
}

static void OnSessionStopTimer0( void *context )
{
 800bda8:	b508      	push	{r3, lr}
    TimerStop( &SessionStopTimer[0] );
 800bdaa:	4808      	ldr	r0, [pc, #32]	; (800bdcc <OnSessionStopTimer0+0x24>)
 800bdac:	f009 f9ec 	bl	8015188 <UTIL_TIMER_Stop>

    McSessionData[0].SessionState = SESSION_STOPPED;
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	4b07      	ldr	r3, [pc, #28]	; (800bdd0 <OnSessionStopTimer0+0x28>)
 800bdb4:	f883 2020 	strb.w	r2, [r3, #32]
    LmhpRemoteMcastSetupState.ID = 0;
 800bdb8:	4b06      	ldr	r3, [pc, #24]	; (800bdd4 <OnSessionStopTimer0+0x2c>)
 800bdba:	70da      	strb	r2, [r3, #3]
    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_STOP;
 800bdbc:	2202      	movs	r2, #2
 800bdbe:	709a      	strb	r2, [r3, #2]
    if( LmhpRemoteMcastSetupPackage.OnPackageProcessEvent != NULL )
 800bdc0:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <OnSessionStopTimer0+0x30>)
 800bdc2:	695b      	ldr	r3, [r3, #20]
 800bdc4:	b103      	cbz	r3, 800bdc8 <OnSessionStopTimer0+0x20>
    {
        LmhpRemoteMcastSetupPackage.OnPackageProcessEvent();
 800bdc6:	4798      	blx	r3
    }
}
 800bdc8:	bd08      	pop	{r3, pc}
 800bdca:	bf00      	nop
 800bdcc:	20000cfc 	.word	0x20000cfc
 800bdd0:	20000cac 	.word	0x20000cac
 800bdd4:	200001f8 	.word	0x200001f8
 800bdd8:	200001c0 	.word	0x200001c0

0800bddc <OnSessionStartTimer0>:
{
 800bddc:	b508      	push	{r3, lr}
    TimerStop( &SessionStartTimer[0] );
 800bdde:	4808      	ldr	r0, [pc, #32]	; (800be00 <OnSessionStartTimer0+0x24>)
 800bde0:	f009 f9d2 	bl	8015188 <UTIL_TIMER_Stop>
    McSessionData[0].SessionState = SESSION_STARTED;
 800bde4:	2201      	movs	r2, #1
 800bde6:	4b07      	ldr	r3, [pc, #28]	; (800be04 <OnSessionStartTimer0+0x28>)
 800bde8:	f883 2020 	strb.w	r2, [r3, #32]
    LmhpRemoteMcastSetupState.ID = 0;
 800bdec:	4b06      	ldr	r3, [pc, #24]	; (800be08 <OnSessionStartTimer0+0x2c>)
 800bdee:	2100      	movs	r1, #0
 800bdf0:	70d9      	strb	r1, [r3, #3]
    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_START;
 800bdf2:	709a      	strb	r2, [r3, #2]
    if( LmhpRemoteMcastSetupPackage.OnPackageProcessEvent != NULL )
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <OnSessionStartTimer0+0x30>)
 800bdf6:	695b      	ldr	r3, [r3, #20]
 800bdf8:	b103      	cbz	r3, 800bdfc <OnSessionStartTimer0+0x20>
        LmhpRemoteMcastSetupPackage.OnPackageProcessEvent();
 800bdfa:	4798      	blx	r3
}
 800bdfc:	bd08      	pop	{r3, pc}
 800bdfe:	bf00      	nop
 800be00:	20000ce4 	.word	0x20000ce4
 800be04:	20000cac 	.word	0x20000cac
 800be08:	200001f8 	.word	0x200001f8
 800be0c:	200001c0 	.word	0x200001c0

0800be10 <LmhpRemoteMcastSetupPackageFactory>:
}
 800be10:	4800      	ldr	r0, [pc, #0]	; (800be14 <LmhpRemoteMcastSetupPackageFactory+0x4>)
 800be12:	4770      	bx	lr
 800be14:	200001c0 	.word	0x200001c0

0800be18 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800be18:	4b07      	ldr	r3, [pc, #28]	; (800be38 <UpdateRxSlotIdleState+0x20>)
 800be1a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d004      	beq.n	800be2c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800be22:	4b06      	ldr	r3, [pc, #24]	; (800be3c <UpdateRxSlotIdleState+0x24>)
 800be24:	2206      	movs	r2, #6
 800be26:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 800be2a:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800be2c:	4b03      	ldr	r3, [pc, #12]	; (800be3c <UpdateRxSlotIdleState+0x24>)
 800be2e:	2202      	movs	r2, #2
 800be30:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	20008000 	.word	0x20008000
 800be3c:	20000d18 	.word	0x20000d18

0800be40 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800be40:	4b01      	ldr	r3, [pc, #4]	; (800be48 <LoRaMacEnableRequests+0x8>)
 800be42:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 800be46:	4770      	bx	lr
 800be48:	20000d18 	.word	0x20000d18

0800be4c <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800be4c:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800be4e:	4b15      	ldr	r3, [pc, #84]	; (800bea4 <LoRaMacHandleIndicationEvents+0x58>)
 800be50:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800be54:	f013 0f08 	tst.w	r3, #8
 800be58:	d00e      	beq.n	800be78 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800be5a:	4812      	ldr	r0, [pc, #72]	; (800bea4 <LoRaMacHandleIndicationEvents+0x58>)
 800be5c:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800be60:	f36f 03c3 	bfc	r3, #3, #1
 800be64:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800be68:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800be72:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 800be76:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800be78:	4b0a      	ldr	r3, [pc, #40]	; (800bea4 <LoRaMacHandleIndicationEvents+0x58>)
 800be7a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800be7e:	f013 0f02 	tst.w	r3, #2
 800be82:	d00e      	beq.n	800bea2 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800be84:	4807      	ldr	r0, [pc, #28]	; (800bea4 <LoRaMacHandleIndicationEvents+0x58>)
 800be86:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800be8a:	f36f 0341 	bfc	r3, #1, #1
 800be8e:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800be92:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800be9c:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 800bea0:	4798      	blx	r3
    }
}
 800bea2:	bd08      	pop	{r3, pc}
 800bea4:	20000d18 	.word	0x20000d18

0800bea8 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800bea8:	b110      	cbz	r0, 800beb0 <CheckForMinimumAbpDatarate+0x8>
 800beaa:	2901      	cmp	r1, #1
 800beac:	d001      	beq.n	800beb2 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800beae:	2000      	movs	r0, #0
}
 800beb0:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800beb2:	2a00      	cmp	r2, #0
 800beb4:	d0fc      	beq.n	800beb0 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800beb6:	2000      	movs	r0, #0
 800beb8:	4770      	bx	lr
	...

0800bebc <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800bebc:	4b07      	ldr	r3, [pc, #28]	; (800bedc <LoRaMacCheckForRxAbort+0x20>)
 800bebe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bec2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bec6:	d008      	beq.n	800beda <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800bec8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800becc:	4a03      	ldr	r2, [pc, #12]	; (800bedc <LoRaMacCheckForRxAbort+0x20>)
 800bece:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800bed2:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800bed6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800beda:	4770      	bx	lr
 800bedc:	20000d18 	.word	0x20000d18

0800bee0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800bee0:	4b06      	ldr	r3, [pc, #24]	; (800befc <CalculateBackOff+0x1c>)
 800bee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee4:	b94b      	cbnz	r3, 800befa <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800bee6:	4a05      	ldr	r2, [pc, #20]	; (800befc <CalculateBackOff+0x1c>)
 800bee8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 800beec:	4904      	ldr	r1, [pc, #16]	; (800bf00 <CalculateBackOff+0x20>)
 800beee:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 800bef2:	3b01      	subs	r3, #1
 800bef4:	fb01 f303 	mul.w	r3, r1, r3
 800bef8:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800befa:	4770      	bx	lr
 800befc:	20008000 	.word	0x20008000
 800bf00:	20000d18 	.word	0x20000d18

0800bf04 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800bf04:	b508      	push	{r3, lr}
 800bf06:	4684      	mov	ip, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800bf0c:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <SetTxContinuousWave+0x24>)
 800bf0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf10:	4662      	mov	r2, ip
 800bf12:	b249      	sxtb	r1, r1
 800bf14:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800bf16:	4a05      	ldr	r2, [pc, #20]	; (800bf2c <SetTxContinuousWave+0x28>)
 800bf18:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800bf1c:	f043 0302 	orr.w	r3, r3, #2
 800bf20:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800bf24:	2000      	movs	r0, #0
 800bf26:	bd08      	pop	{r3, pc}
 800bf28:	0801af08 	.word	0x0801af08
 800bf2c:	20000d18 	.word	0x20000d18

0800bf30 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800bf30:	4602      	mov	r2, r0
 800bf32:	b1f8      	cbz	r0, 800bf74 <DetermineFrameType+0x44>
 800bf34:	b301      	cbz	r1, 800bf78 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800bf36:	7b03      	ldrb	r3, [r0, #12]
 800bf38:	f013 030f 	ands.w	r3, r3, #15
 800bf3c:	d005      	beq.n	800bf4a <DetermineFrameType+0x1a>
 800bf3e:	f890 0020 	ldrb.w	r0, [r0, #32]
 800bf42:	b110      	cbz	r0, 800bf4a <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800bf44:	2000      	movs	r0, #0
 800bf46:	7008      	strb	r0, [r1, #0]
 800bf48:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800bf4a:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800bf4e:	b910      	cbnz	r0, 800bf56 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800bf50:	2301      	movs	r3, #1
 800bf52:	700b      	strb	r3, [r1, #0]
 800bf54:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800bf56:	b92b      	cbnz	r3, 800bf64 <DetermineFrameType+0x34>
 800bf58:	f892 0020 	ldrb.w	r0, [r2, #32]
 800bf5c:	b910      	cbnz	r0, 800bf64 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	700b      	strb	r3, [r1, #0]
 800bf62:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800bf64:	b953      	cbnz	r3, 800bf7c <DetermineFrameType+0x4c>
 800bf66:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bf6a:	b14a      	cbz	r2, 800bf80 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800bf6c:	2203      	movs	r2, #3
 800bf6e:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800bf70:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800bf72:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bf74:	2003      	movs	r0, #3
 800bf76:	4770      	bx	lr
 800bf78:	2003      	movs	r0, #3
 800bf7a:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800bf7c:	2018      	movs	r0, #24
 800bf7e:	4770      	bx	lr
 800bf80:	2018      	movs	r0, #24
}
 800bf82:	4770      	bx	lr

0800bf84 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800bf84:	4288      	cmp	r0, r1
 800bf86:	d201      	bcs.n	800bf8c <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800bf88:	2000      	movs	r0, #0
 800bf8a:	4770      	bx	lr
        return true;
 800bf8c:	2001      	movs	r0, #1
}
 800bf8e:	4770      	bx	lr

0800bf90 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800bf90:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800bf92:	4b0b      	ldr	r3, [pc, #44]	; (800bfc0 <CheckRetransUnconfirmedUplink+0x30>)
 800bf94:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800bf98:	4b0a      	ldr	r3, [pc, #40]	; (800bfc4 <CheckRetransUnconfirmedUplink+0x34>)
 800bf9a:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800bf9e:	f7ff fff1 	bl	800bf84 <CheckRetrans>
 800bfa2:	b950      	cbnz	r0, 800bfba <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800bfa4:	4b07      	ldr	r3, [pc, #28]	; (800bfc4 <CheckRetransUnconfirmedUplink+0x34>)
 800bfa6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800bfaa:	f013 0f02 	tst.w	r3, #2
 800bfae:	d004      	beq.n	800bfba <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800bfb0:	4b04      	ldr	r3, [pc, #16]	; (800bfc4 <CheckRetransUnconfirmedUplink+0x34>)
 800bfb2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d900      	bls.n	800bfbc <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800bfba:	bd08      	pop	{r3, pc}
            return true;
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	e7fc      	b.n	800bfba <CheckRetransUnconfirmedUplink+0x2a>
 800bfc0:	20008000 	.word	0x20008000
 800bfc4:	20000d18 	.word	0x20000d18

0800bfc8 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800bfc8:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800bfca:	4b09      	ldr	r3, [pc, #36]	; (800bff0 <CheckRetransConfirmedUplink+0x28>)
 800bfcc:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800bfd0:	4b08      	ldr	r3, [pc, #32]	; (800bff4 <CheckRetransConfirmedUplink+0x2c>)
 800bfd2:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800bfd6:	f7ff ffd5 	bl	800bf84 <CheckRetrans>
 800bfda:	b940      	cbnz	r0, 800bfee <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800bfdc:	4b05      	ldr	r3, [pc, #20]	; (800bff4 <CheckRetransConfirmedUplink+0x2c>)
 800bfde:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800bfe2:	f013 0f02 	tst.w	r3, #2
 800bfe6:	d002      	beq.n	800bfee <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800bfe8:	4b02      	ldr	r3, [pc, #8]	; (800bff4 <CheckRetransConfirmedUplink+0x2c>)
 800bfea:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 800bfee:	bd08      	pop	{r3, pc}
 800bff0:	20008000 	.word	0x20008000
 800bff4:	20000d18 	.word	0x20000d18

0800bff8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800bff8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bffc:	d000      	beq.n	800c000 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800bffe:	3001      	adds	r0, #1
    }
    return counter;
}
 800c000:	4770      	bx	lr
	...

0800c004 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800c004:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800c006:	4b12      	ldr	r3, [pc, #72]	; (800c050 <StopRetransmission+0x4c>)
 800c008:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800c00c:	f013 0f02 	tst.w	r3, #2
 800c010:	d004      	beq.n	800c01c <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800c012:	4b0f      	ldr	r3, [pc, #60]	; (800c050 <StopRetransmission+0x4c>)
 800c014:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d908      	bls.n	800c02e <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800c01c:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <StopRetransmission+0x50>)
 800c01e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800c022:	b123      	cbz	r3, 800c02e <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800c024:	4c0b      	ldr	r4, [pc, #44]	; (800c054 <StopRetransmission+0x50>)
 800c026:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c028:	f7ff ffe6 	bl	800bff8 <IncreaseAdrAckCounter>
 800c02c:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800c02e:	4b08      	ldr	r3, [pc, #32]	; (800c050 <StopRetransmission+0x4c>)
 800c030:	2200      	movs	r2, #0
 800c032:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 800c036:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800c03a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c03e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800c042:	f022 0202 	bic.w	r2, r2, #2
 800c046:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800c04a:	2001      	movs	r0, #1
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	bf00      	nop
 800c050:	20000d18 	.word	0x20000d18
 800c054:	20008000 	.word	0x20008000

0800c058 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800c058:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c05a:	4b04      	ldr	r3, [pc, #16]	; (800c06c <OnMacProcessNotify+0x14>)
 800c05c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c060:	b113      	cbz	r3, 800c068 <OnMacProcessNotify+0x10>
 800c062:	695b      	ldr	r3, [r3, #20]
 800c064:	b103      	cbz	r3, 800c068 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c066:	4798      	blx	r3
    }
}
 800c068:	bd08      	pop	{r3, pc}
 800c06a:	bf00      	nop
 800c06c:	20000d18 	.word	0x20000d18

0800c070 <OnRadioRxError>:
{
 800c070:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800c072:	4a04      	ldr	r2, [pc, #16]	; (800c084 <OnRadioRxError+0x14>)
 800c074:	7813      	ldrb	r3, [r2, #0]
 800c076:	f043 0304 	orr.w	r3, r3, #4
 800c07a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800c07c:	f7ff ffec 	bl	800c058 <OnMacProcessNotify>
}
 800c080:	bd08      	pop	{r3, pc}
 800c082:	bf00      	nop
 800c084:	20000d14 	.word	0x20000d14

0800c088 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800c088:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800c08a:	4b04      	ldr	r3, [pc, #16]	; (800c09c <CallNvmDataChangeCallback+0x14>)
 800c08c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c090:	b113      	cbz	r3, 800c098 <CallNvmDataChangeCallback+0x10>
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	b103      	cbz	r3, 800c098 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800c096:	4798      	blx	r3
    }
}
 800c098:	bd08      	pop	{r3, pc}
 800c09a:	bf00      	nop
 800c09c:	20000d18 	.word	0x20000d18

0800c0a0 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800c0a0:	4b04      	ldr	r3, [pc, #16]	; (800c0b4 <IsRequestPending+0x14>)
 800c0a2:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 800c0a6:	f010 0005 	ands.w	r0, r0, #5
 800c0aa:	d100      	bne.n	800c0ae <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800c0ac:	4770      	bx	lr
        return 1;
 800c0ae:	2001      	movs	r0, #1
 800c0b0:	e7fc      	b.n	800c0ac <IsRequestPending+0xc>
 800c0b2:	bf00      	nop
 800c0b4:	20000d18 	.word	0x20000d18

0800c0b8 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800c0b8:	b500      	push	{lr}
 800c0ba:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c0bc:	4b0d      	ldr	r3, [pc, #52]	; (800c0f4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800c0be:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c0c2:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800c0c6:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c0ca:	220d      	movs	r2, #13
 800c0cc:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c0d0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c0d4:	b113      	cbz	r3, 800c0dc <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c0d6:	230e      	movs	r3, #14
 800c0d8:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c0dc:	a902      	add	r1, sp, #8
 800c0de:	4b05      	ldr	r3, [pc, #20]	; (800c0f4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800c0e0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c0e4:	f004 fbde 	bl	80108a4 <RegionGetPhyParam>
 800c0e8:	9001      	str	r0, [sp, #4]
}
 800c0ea:	b2c0      	uxtb	r0, r0
 800c0ec:	b005      	add	sp, #20
 800c0ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0f2:	bf00      	nop
 800c0f4:	20008000 	.word	0x20008000

0800c0f8 <ValidatePayloadLength>:
{
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c0fe:	4608      	mov	r0, r1
 800c100:	f7ff ffda 	bl	800c0b8 <GetMaxAppPayloadWithoutFOptsLength>
 800c104:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800c106:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800c108:	4293      	cmp	r3, r2
 800c10a:	d303      	bcc.n	800c114 <ValidatePayloadLength+0x1c>
 800c10c:	2aff      	cmp	r2, #255	; 0xff
 800c10e:	d903      	bls.n	800c118 <ValidatePayloadLength+0x20>
    return false;
 800c110:	2000      	movs	r0, #0
 800c112:	e000      	b.n	800c116 <ValidatePayloadLength+0x1e>
 800c114:	2000      	movs	r0, #0
}
 800c116:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800c118:	2001      	movs	r0, #1
 800c11a:	e7fc      	b.n	800c116 <ValidatePayloadLength+0x1e>

0800c11c <ProcessRadioTxDone>:
{
 800c11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c11e:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c120:	4b3b      	ldr	r3, [pc, #236]	; (800c210 <ProcessRadioTxDone+0xf4>)
 800c122:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c126:	2b02      	cmp	r3, #2
 800c128:	d002      	beq.n	800c130 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800c12a:	4b3a      	ldr	r3, [pc, #232]	; (800c214 <ProcessRadioTxDone+0xf8>)
 800c12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c130:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c134:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800c136:	f008 ffe7 	bl	8015108 <UTIL_TIMER_GetCurrentTime>
 800c13a:	4b37      	ldr	r3, [pc, #220]	; (800c218 <ProcessRadioTxDone+0xfc>)
 800c13c:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800c13e:	4c37      	ldr	r4, [pc, #220]	; (800c21c <ProcessRadioTxDone+0x100>)
 800c140:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800c144:	1a2d      	subs	r5, r5, r0
 800c146:	f504 7660 	add.w	r6, r4, #896	; 0x380
 800c14a:	4429      	add	r1, r5
 800c14c:	4630      	mov	r0, r6
 800c14e:	f009 f8bb 	bl	80152c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800c152:	4630      	mov	r0, r6
 800c154:	f009 f872 	bl	801523c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800c158:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800c15c:	f504 7666 	add.w	r6, r4, #920	; 0x398
 800c160:	4429      	add	r1, r5
 800c162:	4630      	mov	r0, r6
 800c164:	f009 f8b0 	bl	80152c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800c168:	4630      	mov	r0, r6
 800c16a:	f009 f867 	bl	801523c <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c16e:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 800c172:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800c176:	2b00      	cmp	r3, #0
 800c178:	d134      	bne.n	800c1e4 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c17a:	4b28      	ldr	r3, [pc, #160]	; (800c21c <ProcessRadioTxDone+0x100>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800c182:	4b25      	ldr	r3, [pc, #148]	; (800c218 <ProcessRadioTxDone+0xfc>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4c22      	ldr	r4, [pc, #136]	; (800c210 <ProcessRadioTxDone+0xf4>)
 800c188:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800c18a:	4f24      	ldr	r7, [pc, #144]	; (800c21c <ProcessRadioTxDone+0x100>)
 800c18c:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 800c190:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800c194:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c196:	ae0c      	add	r6, sp, #48	; 0x30
 800c198:	4630      	mov	r0, r6
 800c19a:	f008 ff29 	bl	8014ff0 <SysTimeGetMcuTime>
 800c19e:	ad02      	add	r5, sp, #8
 800c1a0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800c1aa:	e896 0006 	ldmia.w	r6, {r1, r2}
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f008 febb 	bl	8014f2a <SysTimeSub>
 800c1b4:	ab07      	add	r3, sp, #28
 800c1b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c1ba:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800c1be:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800c1c2:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c1ca:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800c1ce:	b90b      	cbnz	r3, 800c1d4 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 800c1d0:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800c1d4:	a904      	add	r1, sp, #16
 800c1d6:	4b0e      	ldr	r3, [pc, #56]	; (800c210 <ProcessRadioTxDone+0xf4>)
 800c1d8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c1dc:	f004 fb73 	bl	80108c6 <RegionSetBandTxDone>
}
 800c1e0:	b00f      	add	sp, #60	; 0x3c
 800c1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800c1e4:	2315      	movs	r3, #21
 800c1e6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c1ea:	a90a      	add	r1, sp, #40	; 0x28
 800c1ec:	4b08      	ldr	r3, [pc, #32]	; (800c210 <ProcessRadioTxDone+0xf4>)
 800c1ee:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c1f2:	f004 fb57 	bl	80108a4 <RegionGetPhyParam>
 800c1f6:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800c1f8:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800c1fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800c200:	4401      	add	r1, r0
 800c202:	4620      	mov	r0, r4
 800c204:	f009 f860 	bl	80152c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800c208:	4620      	mov	r0, r4
 800c20a:	f009 f817 	bl	801523c <UTIL_TIMER_Start>
 800c20e:	e7b8      	b.n	800c182 <ProcessRadioTxDone+0x66>
 800c210:	20008000 	.word	0x20008000
 800c214:	0801af08 	.word	0x0801af08
 800c218:	200012d4 	.word	0x200012d4
 800c21c:	20000d18 	.word	0x20000d18

0800c220 <OnRetransmitTimeoutTimerEvent>:
{
 800c220:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800c222:	4c07      	ldr	r4, [pc, #28]	; (800c240 <OnRetransmitTimeoutTimerEvent+0x20>)
 800c224:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800c228:	f008 ffae 	bl	8015188 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800c22c:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800c230:	b113      	cbz	r3, 800c238 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800c232:	2201      	movs	r2, #1
 800c234:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 800c238:	f7ff ff0e 	bl	800c058 <OnMacProcessNotify>
}
 800c23c:	bd10      	pop	{r4, pc}
 800c23e:	bf00      	nop
 800c240:	20000d18 	.word	0x20000d18

0800c244 <PrepareRxDoneAbort>:
{
 800c244:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800c246:	4b0e      	ldr	r3, [pc, #56]	; (800c280 <PrepareRxDoneAbort+0x3c>)
 800c248:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800c24c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c250:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800c254:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800c258:	b973      	cbnz	r3, 800c278 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800c25a:	4b09      	ldr	r3, [pc, #36]	; (800c280 <PrepareRxDoneAbort+0x3c>)
 800c25c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800c260:	f042 0202 	orr.w	r2, r2, #2
 800c264:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c268:	b2d2      	uxtb	r2, r2
 800c26a:	f042 0210 	orr.w	r2, r2, #16
 800c26e:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800c272:	f7ff fdd1 	bl	800be18 <UpdateRxSlotIdleState>
}
 800c276:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800c278:	2000      	movs	r0, #0
 800c27a:	f7ff ffd1 	bl	800c220 <OnRetransmitTimeoutTimerEvent>
 800c27e:	e7ec      	b.n	800c25a <PrepareRxDoneAbort+0x16>
 800c280:	20000d18 	.word	0x20000d18

0800c284 <LoRaMacCheckForBeaconAcquisition>:
{
 800c284:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c286:	200b      	movs	r0, #11
 800c288:	f003 fcfa 	bl	800fc80 <LoRaMacConfirmQueueIsCmdActive>
 800c28c:	b188      	cbz	r0, 800c2b2 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800c28e:	4b0b      	ldr	r3, [pc, #44]	; (800c2bc <LoRaMacCheckForBeaconAcquisition+0x38>)
 800c290:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c294:	f010 0f01 	tst.w	r0, #1
 800c298:	d10d      	bne.n	800c2b6 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c29a:	f010 0004 	ands.w	r0, r0, #4
 800c29e:	d009      	beq.n	800c2b4 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c2a6:	f023 0302 	bic.w	r3, r3, #2
 800c2aa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	e000      	b.n	800c2b4 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800c2b2:	2000      	movs	r0, #0
}
 800c2b4:	bd08      	pop	{r3, pc}
    return 0x00;
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	e7fc      	b.n	800c2b4 <LoRaMacCheckForBeaconAcquisition+0x30>
 800c2ba:	bf00      	nop
 800c2bc:	20000d18 	.word	0x20000d18

0800c2c0 <GetFCntDown>:
{
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	9c04      	ldr	r4, [sp, #16]
 800c2c4:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800c2c6:	b1f2      	cbz	r2, 800c306 <GetFCntDown+0x46>
 800c2c8:	4694      	mov	ip, r2
 800c2ca:	b1f4      	cbz	r4, 800c30a <GetFCntDown+0x4a>
 800c2cc:	b1fd      	cbz	r5, 800c30e <GetFCntDown+0x4e>
    switch( addrID )
 800c2ce:	b188      	cbz	r0, 800c2f4 <GetFCntDown+0x34>
 800c2d0:	2801      	cmp	r0, #1
 800c2d2:	d11e      	bne.n	800c312 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800c2d4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d002      	beq.n	800c2e2 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	7023      	strb	r3, [r4, #0]
 800c2e0:	e00a      	b.n	800c2f8 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800c2e2:	b121      	cbz	r1, 800c2ee <GetFCntDown+0x2e>
 800c2e4:	2903      	cmp	r1, #3
 800c2e6:	d002      	beq.n	800c2ee <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	7023      	strb	r3, [r4, #0]
 800c2ec:	e004      	b.n	800c2f8 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800c2ee:	2302      	movs	r3, #2
 800c2f0:	7023      	strb	r3, [r4, #0]
 800c2f2:	e001      	b.n	800c2f8 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800c2f4:	2304      	movs	r3, #4
 800c2f6:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800c2fe:	7820      	ldrb	r0, [r4, #0]
 800c300:	f003 ff2e 	bl	8010160 <LoRaMacCryptoGetFCntDown>
}
 800c304:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c306:	2009      	movs	r0, #9
 800c308:	e7fc      	b.n	800c304 <GetFCntDown+0x44>
 800c30a:	2009      	movs	r0, #9
 800c30c:	e7fa      	b.n	800c304 <GetFCntDown+0x44>
 800c30e:	2009      	movs	r0, #9
 800c310:	e7f8      	b.n	800c304 <GetFCntDown+0x44>
    switch( addrID )
 800c312:	2005      	movs	r0, #5
 800c314:	e7f6      	b.n	800c304 <GetFCntDown+0x44>

0800c316 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800c316:	2801      	cmp	r0, #1
 800c318:	d900      	bls.n	800c31c <RemoveMacCommands+0x6>
 800c31a:	4770      	bx	lr
{
 800c31c:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800c31e:	2a01      	cmp	r2, #1
 800c320:	d105      	bne.n	800c32e <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800c322:	f011 0f20 	tst.w	r1, #32
 800c326:	d004      	beq.n	800c332 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800c328:	f003 fb56 	bl	800f9d8 <LoRaMacCommandsRemoveStickyAnsCmds>
 800c32c:	e001      	b.n	800c332 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800c32e:	f003 fb53 	bl	800f9d8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800c332:	bd08      	pop	{r3, pc}

0800c334 <ProcessMacCommands>:
{
 800c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c338:	b08f      	sub	sp, #60	; 0x3c
 800c33a:	4698      	mov	r8, r3
    uint8_t status = 0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c342:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800c346:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	f200 82da 	bhi.w	800c904 <ProcessMacCommands+0x5d0>
 800c350:	4605      	mov	r5, r0
 800c352:	460c      	mov	r4, r1
 800c354:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800c356:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800c35a:	42bc      	cmp	r4, r7
 800c35c:	f080 82d2 	bcs.w	800c904 <ProcessMacCommands+0x5d0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800c360:	5d28      	ldrb	r0, [r5, r4]
 800c362:	f003 fb91 	bl	800fa88 <LoRaMacCommandsGetCmdSize>
 800c366:	4420      	add	r0, r4
 800c368:	42b8      	cmp	r0, r7
 800c36a:	f300 82cb 	bgt.w	800c904 <ProcessMacCommands+0x5d0>
        switch( payload[macIndex++] )
 800c36e:	1c66      	adds	r6, r4, #1
 800c370:	b2f6      	uxtb	r6, r6
 800c372:	5d2b      	ldrb	r3, [r5, r4]
 800c374:	3b02      	subs	r3, #2
 800c376:	2b11      	cmp	r3, #17
 800c378:	f200 82c4 	bhi.w	800c904 <ProcessMacCommands+0x5d0>
 800c37c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c380:	00280012 	.word	0x00280012
 800c384:	00c000ad 	.word	0x00c000ad
 800c388:	011e0106 	.word	0x011e0106
 800c38c:	01740157 	.word	0x01740157
 800c390:	02c201c0 	.word	0x02c201c0
 800c394:	01f002c2 	.word	0x01f002c2
 800c398:	02c202c2 	.word	0x02c202c2
 800c39c:	02690252 	.word	0x02690252
 800c3a0:	02a20288 	.word	0x02a20288
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800c3a4:	2005      	movs	r0, #5
 800c3a6:	f003 fc6b 	bl	800fc80 <LoRaMacConfirmQueueIsCmdActive>
 800c3aa:	b908      	cbnz	r0, 800c3b0 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800c3ac:	4634      	mov	r4, r6
 800c3ae:	e7d4      	b.n	800c35a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800c3b0:	2105      	movs	r1, #5
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	f003 fc18 	bl	800fbe8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800c3b8:	1ca3      	adds	r3, r4, #2
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	5da9      	ldrb	r1, [r5, r6]
 800c3be:	4aa7      	ldr	r2, [pc, #668]	; (800c65c <ProcessMacCommands+0x328>)
 800c3c0:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800c3c4:	3403      	adds	r4, #3
 800c3c6:	b2e4      	uxtb	r4, r4
 800c3c8:	5ceb      	ldrb	r3, [r5, r3]
 800c3ca:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 800c3ce:	e7c4      	b.n	800c35a <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800c3d6:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800c3da:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800c3de:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800c3e2:	f1b9 0f00 	cmp.w	r9, #0
 800c3e6:	d036      	beq.n	800c456 <ProcessMacCommands+0x122>
                    macIndex += 4;
 800c3e8:	3405      	adds	r4, #5
 800c3ea:	b2e4      	uxtb	r4, r4
 800c3ec:	e7b5      	b.n	800c35a <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800c3ee:	2305      	movs	r3, #5
 800c3f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c3f4:	e050      	b.n	800c498 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800c3f6:	4b9a      	ldr	r3, [pc, #616]	; (800c660 <ProcessMacCommands+0x32c>)
 800c3f8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800c3fc:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800c400:	4293      	cmp	r3, r2
 800c402:	da03      	bge.n	800c40c <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800c404:	4b96      	ldr	r3, [pc, #600]	; (800c660 <ProcessMacCommands+0x32c>)
 800c406:	2101      	movs	r1, #1
 800c408:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800c40c:	4b94      	ldr	r3, [pc, #592]	; (800c660 <ProcessMacCommands+0x32c>)
 800c40e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800c412:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800c416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800c41a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c41e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c422:	e04d      	b.n	800c4c0 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800c424:	2201      	movs	r2, #1
 800c426:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800c42a:	2003      	movs	r0, #3
 800c42c:	f003 fa60 	bl	800f8f0 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c430:	3401      	adds	r4, #1
 800c432:	b2e4      	uxtb	r4, r4
 800c434:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800c438:	498a      	ldr	r1, [pc, #552]	; (800c664 <ProcessMacCommands+0x330>)
 800c43a:	fba1 2103 	umull	r2, r1, r1, r3
 800c43e:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800c442:	d3ef      	bcc.n	800c424 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 800c444:	4433      	add	r3, r6
 800c446:	b2de      	uxtb	r6, r3
 800c448:	1e74      	subs	r4, r6, #1
 800c44a:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800c44c:	42a7      	cmp	r7, r4
 800c44e:	d93a      	bls.n	800c4c6 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800c450:	5d2b      	ldrb	r3, [r5, r4]
 800c452:	2b03      	cmp	r3, #3
 800c454:	d136      	bne.n	800c4c4 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800c456:	1e73      	subs	r3, r6, #1
 800c458:	442b      	add	r3, r5
 800c45a:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800c45c:	4b80      	ldr	r3, [pc, #512]	; (800c660 <ProcessMacCommands+0x32c>)
 800c45e:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800c462:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c466:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800c46a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c46e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800c472:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c476:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800c47a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c47e:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800c482:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800c486:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c48a:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800c48c:	2a00      	cmp	r2, #0
 800c48e:	d0ae      	beq.n	800c3ee <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800c490:	1bbb      	subs	r3, r7, r6
 800c492:	3301      	adds	r3, #1
 800c494:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800c498:	ab05      	add	r3, sp, #20
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	ab03      	add	r3, sp, #12
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	f10d 030b 	add.w	r3, sp, #11
 800c4a4:	f10d 020a 	add.w	r2, sp, #10
 800c4a8:	a907      	add	r1, sp, #28
 800c4aa:	486d      	ldr	r0, [pc, #436]	; (800c660 <ProcessMacCommands+0x32c>)
 800c4ac:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800c4b0:	f004 fa58 	bl	8010964 <RegionLinkAdrReq>
 800c4b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800c4b8:	f000 0007 	and.w	r0, r0, #7
 800c4bc:	2807      	cmp	r0, #7
 800c4be:	d09a      	beq.n	800c3f6 <ProcessMacCommands+0xc2>
{
 800c4c0:	2400      	movs	r4, #0
 800c4c2:	e7b7      	b.n	800c434 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800c4c4:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800c4c6:	42bc      	cmp	r4, r7
 800c4c8:	d204      	bcs.n	800c4d4 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800c4ca:	3c01      	subs	r4, #1
 800c4cc:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800c4ce:	f04f 0901 	mov.w	r9, #1
 800c4d2:	e742      	b.n	800c35a <ProcessMacCommands+0x26>
 800c4d4:	f04f 0901 	mov.w	r9, #1
                break;
 800c4d8:	e73f      	b.n	800c35a <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800c4da:	3402      	adds	r4, #2
 800c4dc:	b2e4      	uxtb	r4, r4
 800c4de:	5dab      	ldrb	r3, [r5, r6]
 800c4e0:	f003 030f 	and.w	r3, r3, #15
 800c4e4:	495e      	ldr	r1, [pc, #376]	; (800c660 <ProcessMacCommands+0x32c>)
 800c4e6:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f0:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	a90b      	add	r1, sp, #44	; 0x2c
 800c4f8:	2004      	movs	r0, #4
 800c4fa:	f003 f9f9 	bl	800f8f0 <LoRaMacCommandsAddCmd>
                break;
 800c4fe:	e72c      	b.n	800c35a <ProcessMacCommands+0x26>
                status = 0x07;
 800c500:	2307      	movs	r3, #7
 800c502:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800c506:	5dab      	ldrb	r3, [r5, r6]
 800c508:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c50c:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800c510:	57ab      	ldrsb	r3, [r5, r6]
 800c512:	f003 030f 	and.w	r3, r3, #15
 800c516:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800c51a:	1ca3      	adds	r3, r4, #2
 800c51c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800c51e:	1ce1      	adds	r1, r4, #3
 800c520:	b2c9      	uxtb	r1, r1
 800c522:	5ceb      	ldrb	r3, [r5, r3]
 800c524:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c526:	1d22      	adds	r2, r4, #4
 800c528:	b2d2      	uxtb	r2, r2
 800c52a:	5c69      	ldrb	r1, [r5, r1]
 800c52c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c530:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c532:	3405      	adds	r4, #5
 800c534:	b2e4      	uxtb	r4, r4
 800c536:	5caa      	ldrb	r2, [r5, r2]
 800c538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c53c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800c53e:	2264      	movs	r2, #100	; 0x64
 800c540:	fb02 f303 	mul.w	r3, r2, r3
 800c544:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800c546:	a907      	add	r1, sp, #28
 800c548:	4b45      	ldr	r3, [pc, #276]	; (800c660 <ProcessMacCommands+0x32c>)
 800c54a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c54e:	f004 fa1b 	bl	8010988 <RegionRxParamSetupReq>
 800c552:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800c556:	f000 0307 	and.w	r3, r0, #7
 800c55a:	2b07      	cmp	r3, #7
 800c55c:	d007      	beq.n	800c56e <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800c55e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800c562:	2201      	movs	r2, #1
 800c564:	a90b      	add	r1, sp, #44	; 0x2c
 800c566:	2005      	movs	r0, #5
 800c568:	f003 f9c2 	bl	800f8f0 <LoRaMacCommandsAddCmd>
                break;
 800c56c:	e6f5      	b.n	800c35a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800c56e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800c572:	4b3b      	ldr	r3, [pc, #236]	; (800c660 <ProcessMacCommands+0x32c>)
 800c574:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800c578:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800c57c:	9a08      	ldr	r2, [sp, #32]
 800c57e:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800c580:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800c582:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800c586:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800c58a:	e7e8      	b.n	800c55e <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800c58c:	4b33      	ldr	r3, [pc, #204]	; (800c65c <ProcessMacCommands+0x328>)
 800c58e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c592:	b17b      	cbz	r3, 800c5b4 <ProcessMacCommands+0x280>
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	b17b      	cbz	r3, 800c5b8 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800c598:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800c59a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800c59e:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800c5a2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	a90b      	add	r1, sp, #44	; 0x2c
 800c5aa:	2006      	movs	r0, #6
 800c5ac:	f003 f9a0 	bl	800f8f0 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800c5b0:	4634      	mov	r4, r6
                break;
 800c5b2:	e6d2      	b.n	800c35a <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800c5b4:	20ff      	movs	r0, #255	; 0xff
 800c5b6:	e7f0      	b.n	800c59a <ProcessMacCommands+0x266>
 800c5b8:	20ff      	movs	r0, #255	; 0xff
 800c5ba:	e7ee      	b.n	800c59a <ProcessMacCommands+0x266>
                status = 0x03;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800c5c2:	1ca3      	adds	r3, r4, #2
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	57aa      	ldrsb	r2, [r5, r6]
 800c5c8:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800c5cc:	aa07      	add	r2, sp, #28
 800c5ce:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800c5d0:	1ce2      	adds	r2, r4, #3
 800c5d2:	b2d2      	uxtb	r2, r2
 800c5d4:	5ceb      	ldrb	r3, [r5, r3]
 800c5d6:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c5d8:	1d21      	adds	r1, r4, #4
 800c5da:	b2c9      	uxtb	r1, r1
 800c5dc:	5caa      	ldrb	r2, [r5, r2]
 800c5de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c5e2:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c5e4:	1d62      	adds	r2, r4, #5
 800c5e6:	b2d2      	uxtb	r2, r2
 800c5e8:	5c69      	ldrb	r1, [r5, r1]
 800c5ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c5ee:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800c5f0:	2164      	movs	r1, #100	; 0x64
 800c5f2:	fb01 f303 	mul.w	r3, r1, r3
 800c5f6:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800c5fc:	3406      	adds	r4, #6
 800c5fe:	b2e4      	uxtb	r4, r4
 800c600:	56ab      	ldrsb	r3, [r5, r2]
 800c602:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800c606:	a905      	add	r1, sp, #20
 800c608:	4b15      	ldr	r3, [pc, #84]	; (800c660 <ProcessMacCommands+0x32c>)
 800c60a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c60e:	f004 f9c4 	bl	801099a <RegionNewChannelReq>
 800c612:	b2c3      	uxtb	r3, r0
 800c614:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800c618:	2800      	cmp	r0, #0
 800c61a:	f6ff ae9e 	blt.w	800c35a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800c61e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c622:	2201      	movs	r2, #1
 800c624:	a90b      	add	r1, sp, #44	; 0x2c
 800c626:	2007      	movs	r0, #7
 800c628:	f003 f962 	bl	800f8f0 <LoRaMacCommandsAddCmd>
                break;
 800c62c:	e695      	b.n	800c35a <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c62e:	3402      	adds	r4, #2
 800c630:	b2e4      	uxtb	r4, r4
 800c632:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800c634:	f013 030f 	ands.w	r3, r3, #15
 800c638:	d100      	bne.n	800c63c <ProcessMacCommands+0x308>
                    delay++;
 800c63a:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800c63c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c640:	fb02 f303 	mul.w	r3, r2, r3
 800c644:	4a06      	ldr	r2, [pc, #24]	; (800c660 <ProcessMacCommands+0x32c>)
 800c646:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c648:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800c64c:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c64e:	2200      	movs	r2, #0
 800c650:	a90b      	add	r1, sp, #44	; 0x2c
 800c652:	2008      	movs	r0, #8
 800c654:	f003 f94c 	bl	800f8f0 <LoRaMacCommandsAddCmd>
                break;
 800c658:	e67f      	b.n	800c35a <ProcessMacCommands+0x26>
 800c65a:	bf00      	nop
 800c65c:	20000d18 	.word	0x20000d18
 800c660:	20008000 	.word	0x20008000
 800c664:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800c668:	3402      	adds	r4, #2
 800c66a:	b2e4      	uxtb	r4, r4
 800c66c:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800c66e:	2200      	movs	r2, #0
 800c670:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800c674:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c678:	f013 0f20 	tst.w	r3, #32
 800c67c:	d002      	beq.n	800c684 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c67e:	2201      	movs	r2, #1
 800c680:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c684:	f013 0f10 	tst.w	r3, #16
 800c688:	d002      	beq.n	800c690 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800c68a:	2201      	movs	r2, #1
 800c68c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c690:	f003 030f 	and.w	r3, r3, #15
 800c694:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800c698:	a903      	add	r1, sp, #12
 800c69a:	4b9c      	ldr	r3, [pc, #624]	; (800c90c <ProcessMacCommands+0x5d8>)
 800c69c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c6a0:	f004 f984 	bl	80109ac <RegionTxParamSetupReq>
 800c6a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c6a8:	f43f ae57 	beq.w	800c35a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c6ac:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800c6b0:	4e96      	ldr	r6, [pc, #600]	; (800c90c <ProcessMacCommands+0x5d8>)
 800c6b2:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c6b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800c6ba:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c6be:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800c6c2:	4a93      	ldr	r2, [pc, #588]	; (800c910 <ProcessMacCommands+0x5dc>)
 800c6c4:	5cd0      	ldrb	r0, [r2, r3]
 800c6c6:	f7f4 fb6d 	bl	8000da4 <__aeabi_ui2f>
 800c6ca:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c6d4:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c6d8:	a907      	add	r1, sp, #28
 800c6da:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800c6de:	f004 f8e1 	bl	80108a4 <RegionGetPhyParam>
 800c6e2:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c6e4:	b240      	sxtb	r0, r0
 800c6e6:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800c6ea:	4298      	cmp	r0, r3
 800c6ec:	bfb8      	it	lt
 800c6ee:	4618      	movlt	r0, r3
 800c6f0:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	a90b      	add	r1, sp, #44	; 0x2c
 800c6f8:	2009      	movs	r0, #9
 800c6fa:	f003 f8f9 	bl	800f8f0 <LoRaMacCommandsAddCmd>
                break;
 800c6fe:	e62c      	b.n	800c35a <ProcessMacCommands+0x26>
                status = 0x03;
 800c700:	2303      	movs	r3, #3
 800c702:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800c706:	1ca3      	adds	r3, r4, #2
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	5daa      	ldrb	r2, [r5, r6]
 800c70c:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c710:	1ce1      	adds	r1, r4, #3
 800c712:	b2c9      	uxtb	r1, r1
 800c714:	5ceb      	ldrb	r3, [r5, r3]
 800c716:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c718:	1d22      	adds	r2, r4, #4
 800c71a:	b2d2      	uxtb	r2, r2
 800c71c:	5c69      	ldrb	r1, [r5, r1]
 800c71e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c722:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c724:	3405      	adds	r4, #5
 800c726:	b2e4      	uxtb	r4, r4
 800c728:	5caa      	ldrb	r2, [r5, r2]
 800c72a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c72e:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800c730:	2264      	movs	r2, #100	; 0x64
 800c732:	fb02 f303 	mul.w	r3, r2, r3
 800c736:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800c738:	a907      	add	r1, sp, #28
 800c73a:	4b74      	ldr	r3, [pc, #464]	; (800c90c <ProcessMacCommands+0x5d8>)
 800c73c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c740:	f004 f93d 	bl	80109be <RegionDlChannelReq>
 800c744:	b2c3      	uxtb	r3, r0
 800c746:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800c74a:	2800      	cmp	r0, #0
 800c74c:	f6ff ae05 	blt.w	800c35a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800c750:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c754:	2201      	movs	r2, #1
 800c756:	a90b      	add	r1, sp, #44	; 0x2c
 800c758:	200a      	movs	r0, #10
 800c75a:	f003 f8c9 	bl	800f8f0 <LoRaMacCommandsAddCmd>
                break;
 800c75e:	e5fc      	b.n	800c35a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c760:	2009      	movs	r0, #9
 800c762:	f003 fa8d 	bl	800fc80 <LoRaMacConfirmQueueIsCmdActive>
 800c766:	b928      	cbnz	r0, 800c774 <ProcessMacCommands+0x440>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800c768:	4b6a      	ldr	r3, [pc, #424]	; (800c914 <ProcessMacCommands+0x5e0>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 800c770:	4634      	mov	r4, r6
 800c772:	e5f2      	b.n	800c35a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c774:	2109      	movs	r1, #9
 800c776:	2000      	movs	r0, #0
 800c778:	f003 fa36 	bl	800fbe8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800c77c:	a903      	add	r1, sp, #12
 800c77e:	2300      	movs	r3, #0
 800c780:	9303      	str	r3, [sp, #12]
 800c782:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800c784:	f10d 0a14 	add.w	sl, sp, #20
 800c788:	9305      	str	r3, [sp, #20]
 800c78a:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800c78c:	f10d 0b1c 	add.w	fp, sp, #28
 800c790:	9307      	str	r3, [sp, #28]
 800c792:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c794:	1ca0      	adds	r0, r4, #2
 800c796:	b2c0      	uxtb	r0, r0
 800c798:	5dab      	ldrb	r3, [r5, r6]
 800c79a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c79c:	1ce2      	adds	r2, r4, #3
 800c79e:	b2d2      	uxtb	r2, r2
 800c7a0:	5c28      	ldrb	r0, [r5, r0]
 800c7a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c7a6:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c7a8:	1d20      	adds	r0, r4, #4
 800c7aa:	b2c0      	uxtb	r0, r0
 800c7ac:	5caa      	ldrb	r2, [r5, r2]
 800c7ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7b2:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c7b4:	1d62      	adds	r2, r4, #5
 800c7b6:	b2d2      	uxtb	r2, r2
 800c7b8:	5c28      	ldrb	r0, [r5, r0]
 800c7ba:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c7be:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800c7c0:	3406      	adds	r4, #6
 800c7c2:	b2e4      	uxtb	r4, r4
 800c7c4:	5caa      	ldrb	r2, [r5, r2]
 800c7c6:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800c7ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c7ce:	fb00 f202 	mul.w	r2, r0, r2
 800c7d2:	0a12      	lsrs	r2, r2, #8
 800c7d4:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800c7d8:	c903      	ldmia	r1, {r0, r1}
 800c7da:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c7de:	4a4e      	ldr	r2, [pc, #312]	; (800c918 <ProcessMacCommands+0x5e4>)
 800c7e0:	441a      	add	r2, r3
 800c7e2:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800c7e4:	4658      	mov	r0, fp
 800c7e6:	f008 fbe1 	bl	8014fac <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800c7ea:	4e4a      	ldr	r6, [pc, #296]	; (800c914 <ProcessMacCommands+0x5e0>)
 800c7ec:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800c7f6:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800c7fa:	a80c      	add	r0, sp, #48	; 0x30
 800c7fc:	f008 fb95 	bl	8014f2a <SysTimeSub>
 800c800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c806:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800c80a:	4650      	mov	r0, sl
 800c80c:	f008 fb6e 	bl	8014eec <SysTimeAdd>
                    SysTimeSet( sysTime );
 800c810:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c814:	f008 fba8 	bl	8014f68 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800c818:	f002 ffce 	bl	800f7b8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800c81c:	2301      	movs	r3, #1
 800c81e:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 800c822:	e59a      	b.n	800c35a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800c824:	200c      	movs	r0, #12
 800c826:	f003 fa2b 	bl	800fc80 <LoRaMacConfirmQueueIsCmdActive>
 800c82a:	b908      	cbnz	r0, 800c830 <ProcessMacCommands+0x4fc>
        switch( payload[macIndex++] )
 800c82c:	4634      	mov	r4, r6
 800c82e:	e594      	b.n	800c35a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800c830:	210c      	movs	r1, #12
 800c832:	2000      	movs	r0, #0
 800c834:	f003 f9d8 	bl	800fbe8 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800c838:	4b36      	ldr	r3, [pc, #216]	; (800c914 <ProcessMacCommands+0x5e0>)
 800c83a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800c83e:	3b04      	subs	r3, #4
 800c840:	b2db      	uxtb	r3, r3
 800c842:	2b01      	cmp	r3, #1
 800c844:	d801      	bhi.n	800c84a <ProcessMacCommands+0x516>
        switch( payload[macIndex++] )
 800c846:	4634      	mov	r4, r6
 800c848:	e587      	b.n	800c35a <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800c84a:	f002 ffb1 	bl	800f7b0 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800c84e:	4634      	mov	r4, r6
 800c850:	e583      	b.n	800c35a <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800c852:	1ca2      	adds	r2, r4, #2
 800c854:	b2d2      	uxtb	r2, r2
 800c856:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c858:	1ce1      	adds	r1, r4, #3
 800c85a:	b2c9      	uxtb	r1, r1
 800c85c:	5caa      	ldrb	r2, [r5, r2]
 800c85e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c862:	1d22      	adds	r2, r4, #4
 800c864:	b2d2      	uxtb	r2, r2
 800c866:	5c69      	ldrb	r1, [r5, r1]
 800c868:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800c86c:	3405      	adds	r4, #5
 800c86e:	b2e4      	uxtb	r4, r4
 800c870:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800c872:	2164      	movs	r1, #100	; 0x64
 800c874:	fb03 f101 	mul.w	r1, r3, r1
 800c878:	f000 000f 	and.w	r0, r0, #15
 800c87c:	f002 ff99 	bl	800f7b2 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800c880:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800c884:	2201      	movs	r2, #1
 800c886:	a90b      	add	r1, sp, #44	; 0x2c
 800c888:	2011      	movs	r0, #17
 800c88a:	f003 f831 	bl	800f8f0 <LoRaMacCommandsAddCmd>
                break;
 800c88e:	e564      	b.n	800c35a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800c890:	200d      	movs	r0, #13
 800c892:	f003 f9f5 	bl	800fc80 <LoRaMacConfirmQueueIsCmdActive>
 800c896:	b908      	cbnz	r0, 800c89c <ProcessMacCommands+0x568>
        switch( payload[macIndex++] )
 800c898:	4634      	mov	r4, r6
 800c89a:	e55e      	b.n	800c35a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800c89c:	210d      	movs	r1, #13
 800c89e:	2000      	movs	r0, #0
 800c8a0:	f003 f9a2 	bl	800fbe8 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800c8a4:	1ca2      	adds	r2, r4, #2
 800c8a6:	b2d2      	uxtb	r2, r2
 800c8a8:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800c8aa:	1ce3      	adds	r3, r4, #3
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800c8b0:	3404      	adds	r4, #4
 800c8b2:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800c8b4:	4a19      	ldr	r2, [pc, #100]	; (800c91c <ProcessMacCommands+0x5e8>)
 800c8b6:	6812      	ldr	r2, [r2, #0]
 800c8b8:	5ce9      	ldrb	r1, [r5, r3]
 800c8ba:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800c8be:	f002 ff7a 	bl	800f7b6 <LoRaMacClassBBeaconTimingAns>
 800c8c2:	e54a      	b.n	800c35a <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800c8c4:	1ca1      	adds	r1, r4, #2
 800c8c6:	b2c9      	uxtb	r1, r1
 800c8c8:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c8ca:	1ce2      	adds	r2, r4, #3
 800c8cc:	b2d2      	uxtb	r2, r2
 800c8ce:	5c69      	ldrb	r1, [r5, r1]
 800c8d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c8d4:	3404      	adds	r4, #4
 800c8d6:	b2e4      	uxtb	r4, r4
 800c8d8:	5caa      	ldrb	r2, [r5, r2]
 800c8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800c8de:	2064      	movs	r0, #100	; 0x64
 800c8e0:	fb03 f000 	mul.w	r0, r3, r0
 800c8e4:	f002 ff69 	bl	800f7ba <LoRaMacClassBBeaconFreqReq>
 800c8e8:	b140      	cbz	r0, 800c8fc <ProcessMacCommands+0x5c8>
                        macCmdPayload[0] = 1;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	a90b      	add	r1, sp, #44	; 0x2c
 800c8f4:	2013      	movs	r0, #19
 800c8f6:	f002 fffb 	bl	800f8f0 <LoRaMacCommandsAddCmd>
                break;
 800c8fa:	e52e      	b.n	800c35a <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800c902:	e7f5      	b.n	800c8f0 <ProcessMacCommands+0x5bc>
}
 800c904:	b00f      	add	sp, #60	; 0x3c
 800c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90a:	bf00      	nop
 800c90c:	20008000 	.word	0x20008000
 800c910:	0801a868 	.word	0x0801a868
 800c914:	20000d18 	.word	0x20000d18
 800c918:	12d53d80 	.word	0x12d53d80
 800c91c:	200012c4 	.word	0x200012c4

0800c920 <ProcessRadioRxDone>:
{
 800c920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c924:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800c926:	4ba5      	ldr	r3, [pc, #660]	; (800cbbc <ProcessRadioRxDone+0x29c>)
 800c928:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800c92a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800c92c:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800c930:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800c934:	2300      	movs	r3, #0
 800c936:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800c938:	4aa1      	ldr	r2, [pc, #644]	; (800cbc0 <ProcessRadioRxDone+0x2a0>)
 800c93a:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800c93e:	4aa1      	ldr	r2, [pc, #644]	; (800cbc4 <ProcessRadioRxDone+0x2a4>)
 800c940:	7811      	ldrb	r1, [r2, #0]
 800c942:	f363 0100 	bfi	r1, r3, #0, #1
 800c946:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800c948:	4c9f      	ldr	r4, [pc, #636]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800c94a:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800c94e:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800c952:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800c956:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 800c95a:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800c95e:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800c962:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800c966:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800c96a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800c96e:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800c972:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800c976:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800c97a:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c97e:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800c982:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800c986:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800c98a:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 800c98e:	4b8f      	ldr	r3, [pc, #572]	; (800cbcc <ProcessRadioRxDone+0x2ac>)
 800c990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c992:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800c994:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800c998:	b1d3      	cbz	r3, 800c9d0 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800c99a:	4629      	mov	r1, r5
 800c99c:	4630      	mov	r0, r6
 800c99e:	f002 fef4 	bl	800f78a <LoRaMacClassBRxBeacon>
 800c9a2:	b9d0      	cbnz	r0, 800c9da <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c9a4:	4b86      	ldr	r3, [pc, #536]	; (800cbc0 <ProcessRadioRxDone+0x2a0>)
 800c9a6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d01d      	beq.n	800c9ea <ProcessRadioRxDone+0xca>
    if( size == 0 )
 800c9ae:	2d00      	cmp	r5, #0
 800c9b0:	d038      	beq.n	800ca24 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800c9b2:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800c9b4:	0963      	lsrs	r3, r4, #5
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	2b06      	cmp	r3, #6
 800c9ba:	f200 82fd 	bhi.w	800cfb8 <ProcessRadioRxDone+0x698>
 800c9be:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c9c2:	0038      	.short	0x0038
 800c9c4:	00d102fb 	.word	0x00d102fb
 800c9c8:	00cd02fb 	.word	0x00cd02fb
 800c9cc:	02cd02fb 	.word	0x02cd02fb
        TimerStop( &MacCtx.RxWindowTimer2 );
 800c9d0:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800c9d4:	f008 fbd8 	bl	8015188 <UTIL_TIMER_Stop>
 800c9d8:	e7df      	b.n	800c99a <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800c9da:	4b7b      	ldr	r3, [pc, #492]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800c9dc:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800c9e0:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 800c9e4:	b025      	add	sp, #148	; 0x94
 800c9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c9ea:	f002 fed2 	bl	800f792 <LoRaMacClassBIsPingExpected>
 800c9ee:	b150      	cbz	r0, 800ca06 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	f002 fec3 	bl	800f77c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	f002 fec5 	bl	800f786 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800c9fc:	4b72      	ldr	r3, [pc, #456]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800c9fe:	2204      	movs	r2, #4
 800ca00:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800ca04:	e7d3      	b.n	800c9ae <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ca06:	f002 fec6 	bl	800f796 <LoRaMacClassBIsMulticastExpected>
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	d0cf      	beq.n	800c9ae <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f002 feb5 	bl	800f77e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ca14:	2000      	movs	r0, #0
 800ca16:	f002 feb7 	bl	800f788 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ca1a:	4b6b      	ldr	r3, [pc, #428]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800ca1c:	2205      	movs	r2, #5
 800ca1e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800ca22:	e7c4      	b.n	800c9ae <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ca24:	4b68      	ldr	r3, [pc, #416]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800ca2c:	f7ff fc0a 	bl	800c244 <PrepareRxDoneAbort>
        return;
 800ca30:	e7d8      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ca32:	2d10      	cmp	r5, #16
 800ca34:	d92e      	bls.n	800ca94 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 800ca36:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 800ca38:	b2ed      	uxtb	r5, r5
 800ca3a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ca3e:	4b60      	ldr	r3, [pc, #384]	; (800cbc0 <ProcessRadioRxDone+0x2a0>)
 800ca40:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ca44:	bb6b      	cbnz	r3, 800caa2 <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 800ca46:	a804      	add	r0, sp, #16
 800ca48:	f006 f85c 	bl	8012b04 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800ca4c:	aa08      	add	r2, sp, #32
 800ca4e:	a904      	add	r1, sp, #16
 800ca50:	20ff      	movs	r0, #255	; 0xff
 800ca52:	f003 fce9 	bl	8010428 <LoRaMacCryptoHandleJoinAccept>
 800ca56:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ca58:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ca5c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ca60:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ca64:	4b56      	ldr	r3, [pc, #344]	; (800cbc0 <ProcessRadioRxDone+0x2a0>)
 800ca66:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ca6a:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800ca6e:	2207      	movs	r2, #7
 800ca70:	a903      	add	r1, sp, #12
 800ca72:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ca76:	f003 ff36 	bl	80108e6 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800ca7a:	b904      	cbnz	r4, 800ca7e <ProcessRadioRxDone+0x15e>
 800ca7c:	b9c0      	cbnz	r0, 800cab0 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ca7e:	2001      	movs	r0, #1
 800ca80:	f003 f8fe 	bl	800fc80 <LoRaMacConfirmQueueIsCmdActive>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	f000 8283 	beq.w	800cf90 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ca8a:	2101      	movs	r1, #1
 800ca8c:	2007      	movs	r0, #7
 800ca8e:	f003 f8ab 	bl	800fbe8 <LoRaMacConfirmQueueSetStatus>
 800ca92:	e27d      	b.n	800cf90 <ProcessRadioRxDone+0x670>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ca94:	4b4c      	ldr	r3, [pc, #304]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ca9c:	f7ff fbd2 	bl	800c244 <PrepareRxDoneAbort>
                return;
 800caa0:	e7a0      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800caa2:	4b49      	ldr	r3, [pc, #292]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800caa4:	2201      	movs	r2, #1
 800caa6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800caaa:	f7ff fbcb 	bl	800c244 <PrepareRxDoneAbort>
                return;
 800caae:	e799      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800cab0:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800cab4:	4c42      	ldr	r4, [pc, #264]	; (800cbc0 <ProcessRadioRxDone+0x2a0>)
 800cab6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800caba:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 800cabe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cac2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800cac6:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800caca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cace:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800cad2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cad4:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800cad8:	2002      	movs	r0, #2
 800cada:	f006 f821 	bl	8012b20 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800cade:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cae2:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800cae6:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800caea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800caee:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800caf2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800caf6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800cafa:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800cafc:	b90b      	cbnz	r3, 800cb02 <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800cafe:	2201      	movs	r2, #1
 800cb00:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800cb02:	4c2f      	ldr	r4, [pc, #188]	; (800cbc0 <ProcessRadioRxDone+0x2a0>)
 800cb04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb0a:	fb02 f303 	mul.w	r3, r2, r3
 800cb0e:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800cb10:	4413      	add	r3, r2
 800cb12:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800cb14:	2601      	movs	r6, #1
 800cb16:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800cb20:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800cb24:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 800cb26:	3d11      	subs	r5, #17
 800cb28:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 800cb2c:	4b26      	ldr	r3, [pc, #152]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800cb2e:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800cb32:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800cb36:	a921      	add	r1, sp, #132	; 0x84
 800cb38:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800cb3c:	f003 fede 	bl	80108fc <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cb40:	2302      	movs	r3, #2
 800cb42:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800cb46:	4630      	mov	r0, r6
 800cb48:	f003 f89a 	bl	800fc80 <LoRaMacConfirmQueueIsCmdActive>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	f000 821f 	beq.w	800cf90 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800cb52:	4631      	mov	r1, r6
 800cb54:	2000      	movs	r0, #0
 800cb56:	f003 f847 	bl	800fbe8 <LoRaMacConfirmQueueSetStatus>
 800cb5a:	e219      	b.n	800cf90 <ProcessRadioRxDone+0x670>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800cb5c:	4b1a      	ldr	r3, [pc, #104]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cb64:	4b16      	ldr	r3, [pc, #88]	; (800cbc0 <ProcessRadioRxDone+0x2a0>)
 800cb66:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cb6a:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800cb6e:	4a16      	ldr	r2, [pc, #88]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800cb70:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 800cb74:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800cb78:	220d      	movs	r2, #13
 800cb7a:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800cb7e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800cb82:	b113      	cbz	r3, 800cb8a <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800cb84:	230e      	movs	r3, #14
 800cb86:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cb8a:	a91f      	add	r1, sp, #124	; 0x7c
 800cb8c:	4b0c      	ldr	r3, [pc, #48]	; (800cbc0 <ProcessRadioRxDone+0x2a0>)
 800cb8e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cb92:	f003 fe87 	bl	80108a4 <RegionGetPhyParam>
 800cb96:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800cb98:	f1a5 030d 	sub.w	r3, r5, #13
 800cb9c:	b21b      	sxth	r3, r3
 800cb9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cba2:	b200      	sxth	r0, r0
 800cba4:	4283      	cmp	r3, r0
 800cba6:	dc01      	bgt.n	800cbac <ProcessRadioRxDone+0x28c>
 800cba8:	2d0b      	cmp	r5, #11
 800cbaa:	d811      	bhi.n	800cbd0 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cbac:	4b06      	ldr	r3, [pc, #24]	; (800cbc8 <ProcessRadioRxDone+0x2a8>)
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800cbb4:	f7ff fb46 	bl	800c244 <PrepareRxDoneAbort>
                return;
 800cbb8:	e714      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
 800cbba:	bf00      	nop
 800cbbc:	200012c4 	.word	0x200012c4
 800cbc0:	20008000 	.word	0x20008000
 800cbc4:	20000d14 	.word	0x20000d14
 800cbc8:	20000d18 	.word	0x20000d18
 800cbcc:	0801af08 	.word	0x0801af08
            macMsgData.Buffer = payload;
 800cbd0:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800cbd2:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800cbd6:	4ba5      	ldr	r3, [pc, #660]	; (800ce6c <ProcessRadioRxDone+0x54c>)
 800cbd8:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800cbda:	23ff      	movs	r3, #255	; 0xff
 800cbdc:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800cbe0:	a812      	add	r0, sp, #72	; 0x48
 800cbe2:	f003 fd33 	bl	801064c <LoRaMacParserData>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d142      	bne.n	800cc70 <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800cbea:	4ba1      	ldr	r3, [pc, #644]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800cbec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d044      	beq.n	800cc7e <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800cbf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbf6:	4b9f      	ldr	r3, [pc, #636]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cbf8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800cbfc:	a904      	add	r1, sp, #16
 800cbfe:	a812      	add	r0, sp, #72	; 0x48
 800cc00:	f7ff f996 	bl	800bf30 <DetermineFrameType>
 800cc04:	4605      	mov	r5, r0
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d164      	bne.n	800ccd4 <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d066      	beq.n	800cce2 <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800cc14:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800cc16:	2d01      	cmp	r5, #1
 800cc18:	d10a      	bne.n	800cc30 <ProcessRadioRxDone+0x310>
 800cc1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	f040 808e 	bne.w	800cd40 <ProcessRadioRxDone+0x420>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800cc24:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800cc28:	f013 0f60 	tst.w	r3, #96	; 0x60
 800cc2c:	f040 8088 	bne.w	800cd40 <ProcessRadioRxDone+0x420>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800cc30:	ab07      	add	r3, sp, #28
 800cc32:	9301      	str	r3, [sp, #4]
 800cc34:	f10d 031b 	add.w	r3, sp, #27
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	4b8d      	ldr	r3, [pc, #564]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800cc3c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800cc40:	aa12      	add	r2, sp, #72	; 0x48
 800cc42:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800cc46:	4630      	mov	r0, r6
 800cc48:	f7ff fb3a 	bl	800c2c0 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f000 8083 	beq.w	800cd58 <ProcessRadioRxDone+0x438>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800cc52:	2807      	cmp	r0, #7
 800cc54:	d07b      	beq.n	800cd4e <ProcessRadioRxDone+0x42e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cc56:	4b87      	ldr	r3, [pc, #540]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cc58:	2201      	movs	r2, #1
 800cc5a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800cc5e:	9a07      	ldr	r2, [sp, #28]
 800cc60:	4b84      	ldr	r3, [pc, #528]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cc62:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800cc66:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800cc6a:	f7ff faeb 	bl	800c244 <PrepareRxDoneAbort>
                return;
 800cc6e:	e6b9      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cc70:	4b80      	ldr	r3, [pc, #512]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cc72:	2201      	movs	r2, #1
 800cc74:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800cc78:	f7ff fae4 	bl	800c244 <PrepareRxDoneAbort>
                return;
 800cc7c:	e6b2      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800cc7e:	f002 fd88 	bl	800f792 <LoRaMacClassBIsPingExpected>
 800cc82:	b188      	cbz	r0, 800cca8 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cc84:	2000      	movs	r0, #0
 800cc86:	f002 fd79 	bl	800f77c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	f002 fd7b 	bl	800f786 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800cc90:	4b78      	ldr	r3, [pc, #480]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cc92:	2204      	movs	r2, #4
 800cc94:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800cc98:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800cc9c:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800cca0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cca2:	f002 fd90 	bl	800f7c6 <LoRaMacClassBSetFPendingBit>
 800cca6:	e7a5      	b.n	800cbf4 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800cca8:	f002 fd75 	bl	800f796 <LoRaMacClassBIsMulticastExpected>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d0a1      	beq.n	800cbf4 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	f002 fd64 	bl	800f77e <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	f002 fd66 	bl	800f788 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ccbc:	4b6d      	ldr	r3, [pc, #436]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800ccbe:	2205      	movs	r2, #5
 800ccc0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ccc4:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800ccc8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800cccc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ccce:	f002 fd7a 	bl	800f7c6 <LoRaMacClassBSetFPendingBit>
 800ccd2:	e78f      	b.n	800cbf4 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ccd4:	4b67      	ldr	r3, [pc, #412]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ccdc:	f7ff fab2 	bl	800c244 <PrepareRxDoneAbort>
                return;
 800cce0:	e680      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800cce2:	4618      	mov	r0, r3
 800cce4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800cce8:	4a61      	ldr	r2, [pc, #388]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800ccea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ccee:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800ccf2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ccf4:	428a      	cmp	r2, r1
 800ccf6:	d002      	beq.n	800ccfe <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	e788      	b.n	800cc10 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ccfe:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800cd02:	495b      	ldr	r1, [pc, #364]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800cd04:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800cd08:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	d0f3      	beq.n	800ccf8 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800cd10:	4b57      	ldr	r3, [pc, #348]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800cd12:	2130      	movs	r1, #48	; 0x30
 800cd14:	fb01 3000 	mla	r0, r1, r0, r3
 800cd18:	f890 60ea 	ldrb.w	r6, [r0, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800cd1c:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800cd20:	6809      	ldr	r1, [r1, #0]
 800cd22:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800cd24:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d002      	beq.n	800cd32 <ProcessRadioRxDone+0x412>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800cd2c:	4691      	mov	r9, r2
                    multicast = 1;
 800cd2e:	2501      	movs	r5, #1
 800cd30:	e771      	b.n	800cc16 <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800cd32:	4b50      	ldr	r3, [pc, #320]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cd34:	2103      	movs	r1, #3
 800cd36:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800cd3a:	4691      	mov	r9, r2
                    multicast = 1;
 800cd3c:	2501      	movs	r5, #1
 800cd3e:	e76a      	b.n	800cc16 <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd40:	4b4c      	ldr	r3, [pc, #304]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800cd48:	f7ff fa7c 	bl	800c244 <PrepareRxDoneAbort>
                return;
 800cd4c:	e64a      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800cd4e:	4b49      	ldr	r3, [pc, #292]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cd50:	2208      	movs	r2, #8
 800cd52:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800cd56:	e782      	b.n	800cc5e <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800cd58:	ab12      	add	r3, sp, #72	; 0x48
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	9b07      	ldr	r3, [sp, #28]
 800cd5e:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800cd62:	4649      	mov	r1, r9
 800cd64:	4630      	mov	r0, r6
 800cd66:	f003 faa5 	bl	80102b4 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d14a      	bne.n	800ce04 <ProcessRadioRxDone+0x4e4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cd6e:	4b41      	ldr	r3, [pc, #260]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cd70:	2100      	movs	r1, #0
 800cd72:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800cd76:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800cd7a:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800cd7e:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800cd82:	9a07      	ldr	r2, [sp, #28]
 800cd84:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800cd88:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800cd8c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800cd90:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800cd94:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cd98:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800cd9c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800cda0:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 800cda4:	2801      	cmp	r0, #1
 800cda6:	d93b      	bls.n	800ce20 <ProcessRadioRxDone+0x500>
            if( multicast == 1 )
 800cda8:	2d01      	cmp	r5, #1
 800cdaa:	d03f      	beq.n	800ce2c <ProcessRadioRxDone+0x50c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800cdac:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800cdb0:	2ca0      	cmp	r4, #160	; 0xa0
 800cdb2:	d040      	beq.n	800ce36 <ProcessRadioRxDone+0x516>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	4a2e      	ldr	r2, [pc, #184]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800cdb8:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800cdbc:	4a2d      	ldr	r2, [pc, #180]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cdbe:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800cdc2:	4b2b      	ldr	r3, [pc, #172]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800cdc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cdc8:	b923      	cbnz	r3, 800cdd4 <ProcessRadioRxDone+0x4b4>
 800cdca:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800cdce:	f013 0f10 	tst.w	r3, #16
 800cdd2:	d007      	beq.n	800cde4 <ProcessRadioRxDone+0x4c4>
 800cdd4:	4b26      	ldr	r3, [pc, #152]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800cdd6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cdda:	b91b      	cbnz	r3, 800cde4 <ProcessRadioRxDone+0x4c4>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800cddc:	4b25      	ldr	r3, [pc, #148]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800cde4:	4b23      	ldr	r3, [pc, #140]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800cde6:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 800cdea:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800cdee:	f7ff fa92 	bl	800c316 <RemoveMacCommands>
            switch( fType )
 800cdf2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	f200 8099 	bhi.w	800cf2e <ProcessRadioRxDone+0x60e>
 800cdfc:	e8df f003 	tbb	[pc, r3]
 800ce00:	8777653e 	.word	0x8777653e
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ce04:	2802      	cmp	r0, #2
 800ce06:	d006      	beq.n	800ce16 <ProcessRadioRxDone+0x4f6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ce08:	4b1a      	ldr	r3, [pc, #104]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800ce0a:	220b      	movs	r2, #11
 800ce0c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ce10:	f7ff fa18 	bl	800c244 <PrepareRxDoneAbort>
                return;
 800ce14:	e5e6      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ce16:	4b17      	ldr	r3, [pc, #92]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800ce18:	220a      	movs	r2, #10
 800ce1a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800ce1e:	e7f7      	b.n	800ce10 <ProcessRadioRxDone+0x4f0>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ce20:	4b13      	ldr	r3, [pc, #76]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800ce22:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800ce24:	2201      	movs	r2, #1
 800ce26:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 800ce2a:	e7bd      	b.n	800cda8 <ProcessRadioRxDone+0x488>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ce2c:	4b11      	ldr	r3, [pc, #68]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800ce2e:	2202      	movs	r2, #2
 800ce30:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800ce34:	e7c5      	b.n	800cdc2 <ProcessRadioRxDone+0x4a2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ce36:	4b0e      	ldr	r3, [pc, #56]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ce3e:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800ce42:	b913      	cbnz	r3, 800ce4a <ProcessRadioRxDone+0x52a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ce44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ce46:	4b0a      	ldr	r3, [pc, #40]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800ce48:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ce4a:	4b0a      	ldr	r3, [pc, #40]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ce52:	4290      	cmp	r0, r2
 800ce54:	d9b5      	bls.n	800cdc2 <ProcessRadioRxDone+0x4a2>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ce56:	4b06      	ldr	r3, [pc, #24]	; (800ce70 <ProcessRadioRxDone+0x550>)
 800ce58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800ce5c:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <ProcessRadioRxDone+0x554>)
 800ce5e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ce62:	4a05      	ldr	r2, [pc, #20]	; (800ce78 <ProcessRadioRxDone+0x558>)
 800ce64:	6812      	ldr	r2, [r2, #0]
 800ce66:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 800ce6a:	e7aa      	b.n	800cdc2 <ProcessRadioRxDone+0x4a2>
 800ce6c:	20000f50 	.word	0x20000f50
 800ce70:	20008000 	.word	0x20008000
 800ce74:	20000d18 	.word	0x20000d18
 800ce78:	200012c4 	.word	0x200012c4
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ce7c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800ce80:	4c58      	ldr	r4, [pc, #352]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800ce82:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	463b      	mov	r3, r7
 800ce8a:	f002 020f 	and.w	r2, r2, #15
 800ce8e:	2100      	movs	r1, #0
 800ce90:	a816      	add	r0, sp, #88	; 0x58
 800ce92:	f7ff fa4f 	bl	800c334 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ce96:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ce9a:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ce9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cea0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800cea4:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800cea8:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ceac:	2301      	movs	r3, #1
 800ceae:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800ceb2:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ceb6:	2be0      	cmp	r3, #224	; 0xe0
 800ceb8:	d040      	beq.n	800cf3c <ProcessRadioRxDone+0x61c>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ceba:	4a4a      	ldr	r2, [pc, #296]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cebc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800cec0:	f043 0302 	orr.w	r3, r3, #2
 800cec4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800cec8:	e062      	b.n	800cf90 <ProcessRadioRxDone+0x670>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ceca:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800cece:	4c45      	ldr	r4, [pc, #276]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800ced0:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800ced4:	9300      	str	r3, [sp, #0]
 800ced6:	463b      	mov	r3, r7
 800ced8:	f002 020f 	and.w	r2, r2, #15
 800cedc:	2100      	movs	r1, #0
 800cede:	a816      	add	r0, sp, #88	; 0x58
 800cee0:	f7ff fa28 	bl	800c334 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800cee4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800cee8:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800ceec:	e7e1      	b.n	800ceb2 <ProcessRadioRxDone+0x592>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ceee:	4c3d      	ldr	r4, [pc, #244]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cef0:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	463b      	mov	r3, r7
 800cef8:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800cefc:	2100      	movs	r1, #0
 800cefe:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800cf00:	f7ff fa18 	bl	800c334 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800cf04:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800cf08:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800cf0c:	e7d1      	b.n	800ceb2 <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800cf0e:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800cf12:	4b34      	ldr	r3, [pc, #208]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cf14:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800cf18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cf1a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800cf1e:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800cf22:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800cf2c:	e7c1      	b.n	800ceb2 <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cf2e:	4b2d      	ldr	r3, [pc, #180]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800cf36:	f7ff f985 	bl	800c244 <PrepareRxDoneAbort>
                    break;
 800cf3a:	e7ba      	b.n	800ceb2 <ProcessRadioRxDone+0x592>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800cf3c:	4a2a      	ldr	r2, [pc, #168]	; (800cfe8 <ProcessRadioRxDone+0x6c8>)
 800cf3e:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 800cf42:	2a00      	cmp	r2, #0
 800cf44:	d1b9      	bne.n	800ceba <ProcessRadioRxDone+0x59a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800cf46:	4a27      	ldr	r2, [pc, #156]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cf48:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800cf52:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800cf56:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 800cf5a:	e7ae      	b.n	800ceba <ProcessRadioRxDone+0x59a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800cf5c:	1e6a      	subs	r2, r5, #1
 800cf5e:	4c21      	ldr	r4, [pc, #132]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cf60:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800cf64:	b292      	uxth	r2, r2
 800cf66:	1c71      	adds	r1, r6, #1
 800cf68:	4638      	mov	r0, r7
 800cf6a:	f005 fee8 	bl	8012d3e <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800cf6e:	2303      	movs	r3, #3
 800cf70:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cf74:	2300      	movs	r3, #0
 800cf76:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800cf7a:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800cf7e:	3d01      	subs	r5, #1
 800cf80:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800cf84:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800cf88:	f043 0302 	orr.w	r3, r3, #2
 800cf8c:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800cf90:	4b14      	ldr	r3, [pc, #80]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cf92:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d915      	bls.n	800cfc6 <ProcessRadioRxDone+0x6a6>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800cf9a:	4b12      	ldr	r3, [pc, #72]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cf9c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	d006      	beq.n	800cfb2 <ProcessRadioRxDone+0x692>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800cfa4:	4a0f      	ldr	r2, [pc, #60]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cfa6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800cfaa:	f043 0310 	orr.w	r3, r3, #16
 800cfae:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800cfb2:	f7fe ff31 	bl	800be18 <UpdateRxSlotIdleState>
 800cfb6:	e515      	b.n	800c9e4 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cfb8:	4b0a      	ldr	r3, [pc, #40]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800cfc0:	f7ff f940 	bl	800c244 <PrepareRxDoneAbort>
            break;
 800cfc4:	e7e4      	b.n	800cf90 <ProcessRadioRxDone+0x670>
        if( MacCtx.NodeAckRequested == true )
 800cfc6:	4b07      	ldr	r3, [pc, #28]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cfc8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d0e4      	beq.n	800cf9a <ProcessRadioRxDone+0x67a>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800cfd0:	4b04      	ldr	r3, [pc, #16]	; (800cfe4 <ProcessRadioRxDone+0x6c4>)
 800cfd2:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d0df      	beq.n	800cf9a <ProcessRadioRxDone+0x67a>
                OnRetransmitTimeoutTimerEvent( NULL );
 800cfda:	2000      	movs	r0, #0
 800cfdc:	f7ff f920 	bl	800c220 <OnRetransmitTimeoutTimerEvent>
 800cfe0:	e7db      	b.n	800cf9a <ProcessRadioRxDone+0x67a>
 800cfe2:	bf00      	nop
 800cfe4:	20000d18 	.word	0x20000d18
 800cfe8:	20008000 	.word	0x20008000

0800cfec <ProcessRadioTxTimeout>:
{
 800cfec:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800cfee:	4b0f      	ldr	r3, [pc, #60]	; (800d02c <ProcessRadioTxTimeout+0x40>)
 800cff0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d002      	beq.n	800cffe <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800cff8:	4b0d      	ldr	r3, [pc, #52]	; (800d030 <ProcessRadioTxTimeout+0x44>)
 800cffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffc:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800cffe:	f7fe ff0b 	bl	800be18 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d002:	4c0c      	ldr	r4, [pc, #48]	; (800d034 <ProcessRadioTxTimeout+0x48>)
 800d004:	2002      	movs	r0, #2
 800d006:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d00a:	f002 fe1b 	bl	800fc44 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d00e:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800d012:	b113      	cbz	r3, 800d01a <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800d014:	2201      	movs	r2, #1
 800d016:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d01a:	4a06      	ldr	r2, [pc, #24]	; (800d034 <ProcessRadioTxTimeout+0x48>)
 800d01c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d020:	f043 0310 	orr.w	r3, r3, #16
 800d024:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800d028:	bd10      	pop	{r4, pc}
 800d02a:	bf00      	nop
 800d02c:	20008000 	.word	0x20008000
 800d030:	0801af08 	.word	0x0801af08
 800d034:	20000d18 	.word	0x20000d18

0800d038 <CheckForClassBCollision>:
{
 800d038:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d03a:	f002 fba8 	bl	800f78e <LoRaMacClassBIsBeaconExpected>
 800d03e:	b978      	cbnz	r0, 800d060 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d040:	4b09      	ldr	r3, [pc, #36]	; (800d068 <CheckForClassBCollision+0x30>)
 800d042:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d046:	2b01      	cmp	r3, #1
 800d048:	d001      	beq.n	800d04e <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800d04a:	2000      	movs	r0, #0
}
 800d04c:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d04e:	f002 fba0 	bl	800f792 <LoRaMacClassBIsPingExpected>
 800d052:	b938      	cbnz	r0, 800d064 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d054:	f002 fb9f 	bl	800f796 <LoRaMacClassBIsMulticastExpected>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d0f7      	beq.n	800d04c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d05c:	200f      	movs	r0, #15
 800d05e:	e7f5      	b.n	800d04c <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800d060:	200e      	movs	r0, #14
 800d062:	e7f3      	b.n	800d04c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d064:	200f      	movs	r0, #15
 800d066:	e7f1      	b.n	800d04c <CheckForClassBCollision+0x14>
 800d068:	20008000 	.word	0x20008000

0800d06c <HandleRadioRxErrorTimeout>:
{
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	4605      	mov	r5, r0
 800d070:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d072:	4b34      	ldr	r3, [pc, #208]	; (800d144 <HandleRadioRxErrorTimeout+0xd8>)
 800d074:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d002      	beq.n	800d082 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800d07c:	4b32      	ldr	r3, [pc, #200]	; (800d148 <HandleRadioRxErrorTimeout+0xdc>)
 800d07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d080:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d082:	f002 fb84 	bl	800f78e <LoRaMacClassBIsBeaconExpected>
 800d086:	4606      	mov	r6, r0
 800d088:	bb50      	cbnz	r0, 800d0e0 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d08a:	4b2e      	ldr	r3, [pc, #184]	; (800d144 <HandleRadioRxErrorTimeout+0xd8>)
 800d08c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d090:	2b01      	cmp	r3, #1
 800d092:	d02c      	beq.n	800d0ee <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800d094:	2e00      	cmp	r6, #0
 800d096:	d152      	bne.n	800d13e <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d098:	4b2c      	ldr	r3, [pc, #176]	; (800d14c <HandleRadioRxErrorTimeout+0xe0>)
 800d09a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d13c      	bne.n	800d11c <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800d0a2:	4b2a      	ldr	r3, [pc, #168]	; (800d14c <HandleRadioRxErrorTimeout+0xe0>)
 800d0a4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800d0a8:	b113      	cbz	r3, 800d0b0 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800d0aa:	4b28      	ldr	r3, [pc, #160]	; (800d14c <HandleRadioRxErrorTimeout+0xe0>)
 800d0ac:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	f002 fdc7 	bl	800fc44 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800d0b6:	4b23      	ldr	r3, [pc, #140]	; (800d144 <HandleRadioRxErrorTimeout+0xd8>)
 800d0b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d0ba:	f008 f82f 	bl	801511c <UTIL_TIMER_GetElapsedTime>
 800d0be:	4b23      	ldr	r3, [pc, #140]	; (800d14c <HandleRadioRxErrorTimeout+0xe0>)
 800d0c0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d0c4:	4298      	cmp	r0, r3
 800d0c6:	d33a      	bcc.n	800d13e <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800d0c8:	4c20      	ldr	r4, [pc, #128]	; (800d14c <HandleRadioRxErrorTimeout+0xe0>)
 800d0ca:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800d0ce:	f008 f85b 	bl	8015188 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d0d2:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800d0d6:	f043 0310 	orr.w	r3, r3, #16
 800d0da:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 800d0de:	e02e      	b.n	800d13e <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800d0e0:	2002      	movs	r0, #2
 800d0e2:	f002 fb4a 	bl	800f77a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	f002 fb4c 	bl	800f784 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800d0ec:	e7cd      	b.n	800d08a <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d0ee:	f002 fb50 	bl	800f792 <LoRaMacClassBIsPingExpected>
 800d0f2:	4607      	mov	r7, r0
 800d0f4:	b950      	cbnz	r0, 800d10c <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d0f6:	f002 fb4e 	bl	800f796 <LoRaMacClassBIsMulticastExpected>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d0ca      	beq.n	800d094 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d0fe:	2000      	movs	r0, #0
 800d100:	f002 fb3d 	bl	800f77e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d104:	2000      	movs	r0, #0
 800d106:	f002 fb3f 	bl	800f788 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800d10a:	e018      	b.n	800d13e <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d10c:	2000      	movs	r0, #0
 800d10e:	f002 fb35 	bl	800f77c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d112:	2000      	movs	r0, #0
 800d114:	f002 fb37 	bl	800f786 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800d118:	463e      	mov	r6, r7
 800d11a:	e7ec      	b.n	800d0f6 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800d11c:	4b0b      	ldr	r3, [pc, #44]	; (800d14c <HandleRadioRxErrorTimeout+0xe0>)
 800d11e:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800d122:	b113      	cbz	r3, 800d12a <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800d124:	4b09      	ldr	r3, [pc, #36]	; (800d14c <HandleRadioRxErrorTimeout+0xe0>)
 800d126:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800d12a:	4620      	mov	r0, r4
 800d12c:	f002 fd8a 	bl	800fc44 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800d130:	4a06      	ldr	r2, [pc, #24]	; (800d14c <HandleRadioRxErrorTimeout+0xe0>)
 800d132:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d136:	f043 0310 	orr.w	r3, r3, #16
 800d13a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800d13e:	f7fe fe6b 	bl	800be18 <UpdateRxSlotIdleState>
}
 800d142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d144:	20008000 	.word	0x20008000
 800d148:	0801af08 	.word	0x0801af08
 800d14c:	20000d18 	.word	0x20000d18

0800d150 <ProcessRadioRxError>:
{
 800d150:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800d152:	2106      	movs	r1, #6
 800d154:	2005      	movs	r0, #5
 800d156:	f7ff ff89 	bl	800d06c <HandleRadioRxErrorTimeout>
}
 800d15a:	bd08      	pop	{r3, pc}

0800d15c <ProcessRadioRxTimeout>:
{
 800d15c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800d15e:	2104      	movs	r1, #4
 800d160:	2003      	movs	r0, #3
 800d162:	f7ff ff83 	bl	800d06c <HandleRadioRxErrorTimeout>
}
 800d166:	bd08      	pop	{r3, pc}

0800d168 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d168:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d16c:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800d16e:	4a14      	ldr	r2, [pc, #80]	; (800d1c0 <LoRaMacHandleIrqEvents+0x58>)
 800d170:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800d172:	2000      	movs	r0, #0
 800d174:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d176:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800d17a:	b303      	cbz	r3, 800d1be <LoRaMacHandleIrqEvents+0x56>
{
 800d17c:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800d17e:	b2dc      	uxtb	r4, r3
 800d180:	f013 0f20 	tst.w	r3, #32
 800d184:	d10c      	bne.n	800d1a0 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800d186:	f014 0f10 	tst.w	r4, #16
 800d18a:	d10c      	bne.n	800d1a6 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800d18c:	f014 0f08 	tst.w	r4, #8
 800d190:	d10c      	bne.n	800d1ac <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800d192:	f014 0f04 	tst.w	r4, #4
 800d196:	d10c      	bne.n	800d1b2 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800d198:	f014 0f02 	tst.w	r4, #2
 800d19c:	d10c      	bne.n	800d1b8 <LoRaMacHandleIrqEvents+0x50>
}
 800d19e:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800d1a0:	f7fe ffbc 	bl	800c11c <ProcessRadioTxDone>
 800d1a4:	e7ef      	b.n	800d186 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800d1a6:	f7ff fbbb 	bl	800c920 <ProcessRadioRxDone>
 800d1aa:	e7ef      	b.n	800d18c <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800d1ac:	f7ff ff1e 	bl	800cfec <ProcessRadioTxTimeout>
 800d1b0:	e7ef      	b.n	800d192 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800d1b2:	f7ff ffcd 	bl	800d150 <ProcessRadioRxError>
 800d1b6:	e7ef      	b.n	800d198 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800d1b8:	f7ff ffd0 	bl	800d15c <ProcessRadioRxTimeout>
}
 800d1bc:	e7ef      	b.n	800d19e <LoRaMacHandleIrqEvents+0x36>
 800d1be:	4770      	bx	lr
 800d1c0:	20000d14 	.word	0x20000d14

0800d1c4 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800d1c4:	b909      	cbnz	r1, 800d1ca <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800d1c6:	2000      	movs	r0, #0
}
 800d1c8:	4770      	bx	lr
{
 800d1ca:	b510      	push	{r4, lr}
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800d1d0:	f007 ffa4 	bl	801511c <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800d1d4:	42a0      	cmp	r0, r4
 800d1d6:	d801      	bhi.n	800d1dc <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800d1d8:	2000      	movs	r0, #0
}
 800d1da:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800d1dc:	4b02      	ldr	r3, [pc, #8]	; (800d1e8 <LoRaMacHandleResponseTimeout+0x24>)
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	e7f8      	b.n	800d1da <LoRaMacHandleResponseTimeout+0x16>
 800d1e8:	20008000 	.word	0x20008000

0800d1ec <LoRaMacHandleMlmeRequest>:
{
 800d1ec:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d1ee:	4b14      	ldr	r3, [pc, #80]	; (800d240 <LoRaMacHandleMlmeRequest+0x54>)
 800d1f0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800d1f4:	f013 0f04 	tst.w	r3, #4
 800d1f8:	d100      	bne.n	800d1fc <LoRaMacHandleMlmeRequest+0x10>
}
 800d1fa:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	f002 fd3f 	bl	800fc80 <LoRaMacConfirmQueueIsCmdActive>
 800d202:	b178      	cbz	r0, 800d224 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800d204:	2001      	movs	r0, #1
 800d206:	f002 fd05 	bl	800fc14 <LoRaMacConfirmQueueGetStatus>
 800d20a:	b918      	cbnz	r0, 800d214 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800d20c:	4b0c      	ldr	r3, [pc, #48]	; (800d240 <LoRaMacHandleMlmeRequest+0x54>)
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d214:	4a0a      	ldr	r2, [pc, #40]	; (800d240 <LoRaMacHandleMlmeRequest+0x54>)
 800d216:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800d21a:	f023 0302 	bic.w	r3, r3, #2
 800d21e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800d222:	e7ea      	b.n	800d1fa <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800d224:	2006      	movs	r0, #6
 800d226:	f002 fd2b 	bl	800fc80 <LoRaMacConfirmQueueIsCmdActive>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d0e5      	beq.n	800d1fa <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d22e:	4a04      	ldr	r2, [pc, #16]	; (800d240 <LoRaMacHandleMlmeRequest+0x54>)
 800d230:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800d234:	f023 0302 	bic.w	r3, r3, #2
 800d238:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800d23c:	e7dd      	b.n	800d1fa <LoRaMacHandleMlmeRequest+0xe>
 800d23e:	bf00      	nop
 800d240:	20000d18 	.word	0x20000d18

0800d244 <SerializeTxFrame>:
{
 800d244:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800d246:	4b0f      	ldr	r3, [pc, #60]	; (800d284 <SerializeTxFrame+0x40>)
 800d248:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d24c:	b11b      	cbz	r3, 800d256 <SerializeTxFrame+0x12>
 800d24e:	2b04      	cmp	r3, #4
 800d250:	d00a      	beq.n	800d268 <SerializeTxFrame+0x24>
 800d252:	2003      	movs	r0, #3
}
 800d254:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d256:	480c      	ldr	r0, [pc, #48]	; (800d288 <SerializeTxFrame+0x44>)
 800d258:	f003 fa57 	bl	801070a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d25c:	b968      	cbnz	r0, 800d27a <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d25e:	4b09      	ldr	r3, [pc, #36]	; (800d284 <SerializeTxFrame+0x40>)
 800d260:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d264:	801a      	strh	r2, [r3, #0]
            break;
 800d266:	e7f5      	b.n	800d254 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800d268:	4807      	ldr	r0, [pc, #28]	; (800d288 <SerializeTxFrame+0x44>)
 800d26a:	f003 fa84 	bl	8010776 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d26e:	b930      	cbnz	r0, 800d27e <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d270:	4b04      	ldr	r3, [pc, #16]	; (800d284 <SerializeTxFrame+0x40>)
 800d272:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d276:	801a      	strh	r2, [r3, #0]
            break;
 800d278:	e7ec      	b.n	800d254 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d27a:	2011      	movs	r0, #17
 800d27c:	e7ea      	b.n	800d254 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d27e:	2011      	movs	r0, #17
 800d280:	e7e8      	b.n	800d254 <SerializeTxFrame+0x10>
 800d282:	bf00      	nop
 800d284:	20000d18 	.word	0x20000d18
 800d288:	20000e20 	.word	0x20000e20

0800d28c <ComputeRxWindowParameters>:
{
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d290:	4c1e      	ldr	r4, [pc, #120]	; (800d30c <ComputeRxWindowParameters+0x80>)
 800d292:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800d296:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800d29a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800d29e:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	f003 fbac 	bl	8010a00 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d2a8:	4d19      	ldr	r5, [pc, #100]	; (800d310 <ComputeRxWindowParameters+0x84>)
 800d2aa:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d2b2:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800d2b6:	b241      	sxtb	r1, r0
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f003 fb30 	bl	801091e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d2be:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d2c6:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800d2ca:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800d2ce:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d2d2:	f003 fb24 	bl	801091e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d2d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2d8:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800d2dc:	440b      	add	r3, r1
 800d2de:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d2e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d2e4:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800d2e8:	4413      	add	r3, r2
 800d2ea:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800d2ee:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800d2f2:	2b04      	cmp	r3, #4
 800d2f4:	d007      	beq.n	800d306 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d2f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d2f8:	4419      	add	r1, r3
 800d2fa:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d2fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d300:	440a      	add	r2, r1
 800d302:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800d306:	b002      	add	sp, #8
 800d308:	bd70      	pop	{r4, r5, r6, pc}
 800d30a:	bf00      	nop
 800d30c:	20008000 	.word	0x20008000
 800d310:	20000d18 	.word	0x20000d18

0800d314 <VerifyTxFrame>:
{
 800d314:	b510      	push	{r4, lr}
 800d316:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800d318:	2300      	movs	r3, #0
 800d31a:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d31c:	4b0d      	ldr	r3, [pc, #52]	; (800d354 <VerifyTxFrame+0x40>)
 800d31e:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 800d322:	b914      	cbnz	r4, 800d32a <VerifyTxFrame+0x16>
}
 800d324:	4620      	mov	r0, r4
 800d326:	b002      	add	sp, #8
 800d328:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d32a:	a801      	add	r0, sp, #4
 800d32c:	f002 fb6e 	bl	800fa0c <LoRaMacCommandsGetSizeSerializedCmds>
 800d330:	4604      	mov	r4, r0
 800d332:	b968      	cbnz	r0, 800d350 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800d334:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d338:	4b06      	ldr	r3, [pc, #24]	; (800d354 <VerifyTxFrame+0x40>)
 800d33a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800d33e:	4b06      	ldr	r3, [pc, #24]	; (800d358 <VerifyTxFrame+0x44>)
 800d340:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800d344:	f7fe fed8 	bl	800c0f8 <ValidatePayloadLength>
 800d348:	2800      	cmp	r0, #0
 800d34a:	d1eb      	bne.n	800d324 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800d34c:	2408      	movs	r4, #8
 800d34e:	e7e9      	b.n	800d324 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d350:	2413      	movs	r4, #19
 800d352:	e7e7      	b.n	800d324 <VerifyTxFrame+0x10>
 800d354:	20008000 	.word	0x20008000
 800d358:	20000d18 	.word	0x20000d18

0800d35c <SecureFrame>:
{
 800d35c:	b530      	push	{r4, r5, lr}
 800d35e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800d360:	2300      	movs	r3, #0
 800d362:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800d364:	4b18      	ldr	r3, [pc, #96]	; (800d3c8 <SecureFrame+0x6c>)
 800d366:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d36a:	b133      	cbz	r3, 800d37a <SecureFrame+0x1e>
 800d36c:	4605      	mov	r5, r0
 800d36e:	460c      	mov	r4, r1
 800d370:	2b04      	cmp	r3, #4
 800d372:	d00b      	beq.n	800d38c <SecureFrame+0x30>
 800d374:	2003      	movs	r0, #3
}
 800d376:	b003      	add	sp, #12
 800d378:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d37a:	4814      	ldr	r0, [pc, #80]	; (800d3cc <SecureFrame+0x70>)
 800d37c:	f002 ff30 	bl	80101e0 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d380:	b9d8      	cbnz	r0, 800d3ba <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d382:	4b11      	ldr	r3, [pc, #68]	; (800d3c8 <SecureFrame+0x6c>)
 800d384:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d388:	801a      	strh	r2, [r3, #0]
            break;
 800d38a:	e7f4      	b.n	800d376 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d38c:	a801      	add	r0, sp, #4
 800d38e:	f002 fedb 	bl	8010148 <LoRaMacCryptoGetFCntUp>
 800d392:	b9a0      	cbnz	r0, 800d3be <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800d394:	4b0c      	ldr	r3, [pc, #48]	; (800d3c8 <SecureFrame+0x6c>)
 800d396:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800d39a:	b113      	cbz	r3, 800d3a2 <SecureFrame+0x46>
                fCntUp -= 1;
 800d39c:	9b01      	ldr	r3, [sp, #4]
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800d3a2:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <SecureFrame+0x70>)
 800d3a4:	4622      	mov	r2, r4
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	9801      	ldr	r0, [sp, #4]
 800d3aa:	f002 ff3f 	bl	801022c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d3ae:	b940      	cbnz	r0, 800d3c2 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d3b0:	4b05      	ldr	r3, [pc, #20]	; (800d3c8 <SecureFrame+0x6c>)
 800d3b2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d3b6:	801a      	strh	r2, [r3, #0]
            break;
 800d3b8:	e7dd      	b.n	800d376 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d3ba:	2011      	movs	r0, #17
 800d3bc:	e7db      	b.n	800d376 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d3be:	2012      	movs	r0, #18
 800d3c0:	e7d9      	b.n	800d376 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d3c2:	2011      	movs	r0, #17
 800d3c4:	e7d7      	b.n	800d376 <SecureFrame+0x1a>
 800d3c6:	bf00      	nop
 800d3c8:	20000d18 	.word	0x20000d18
 800d3cc:	20000e20 	.word	0x20000e20

0800d3d0 <SendFrameOnChannel>:
{
 800d3d0:	b570      	push	{r4, r5, r6, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800d3dc:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d3e0:	4d36      	ldr	r5, [pc, #216]	; (800d4bc <SendFrameOnChannel+0xec>)
 800d3e2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800d3e6:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d3ea:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800d3ee:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800d3f2:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800d3f6:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800d3f8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800d3fc:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800d3fe:	4c30      	ldr	r4, [pc, #192]	; (800d4c0 <SendFrameOnChannel+0xf0>)
 800d400:	8823      	ldrh	r3, [r4, #0]
 800d402:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d406:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 800d40a:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800d40e:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800d412:	f10d 0207 	add.w	r2, sp, #7
 800d416:	a902      	add	r1, sp, #8
 800d418:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800d41c:	f003 fa96 	bl	801094c <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d426:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800d42a:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800d42e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d432:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800d436:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d43a:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 800d43e:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d442:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800d446:	f002 f9a8 	bl	800f79a <LoRaMacClassBIsBeaconModeActive>
 800d44a:	bb60      	cbnz	r0, 800d4a6 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d44c:	4b1b      	ldr	r3, [pc, #108]	; (800d4bc <SendFrameOnChannel+0xec>)
 800d44e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d452:	2b01      	cmp	r3, #1
 800d454:	d02f      	beq.n	800d4b6 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800d456:	f002 f9a3 	bl	800f7a0 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800d45a:	4b18      	ldr	r3, [pc, #96]	; (800d4bc <SendFrameOnChannel+0xec>)
 800d45c:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800d460:	4b17      	ldr	r3, [pc, #92]	; (800d4c0 <SendFrameOnChannel+0xf0>)
 800d462:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800d466:	b2c0      	uxtb	r0, r0
 800d468:	f7ff ff78 	bl	800d35c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800d46c:	4604      	mov	r4, r0
 800d46e:	b9b8      	cbnz	r0, 800d4a0 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d470:	4813      	ldr	r0, [pc, #76]	; (800d4c0 <SendFrameOnChannel+0xf0>)
 800d472:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800d476:	f043 0302 	orr.w	r3, r3, #2
 800d47a:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800d47e:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 800d482:	3301      	adds	r3, #1
 800d484:	b2db      	uxtb	r3, r3
 800d486:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800d48a:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800d48e:	2300      	movs	r3, #0
 800d490:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800d494:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <SendFrameOnChannel+0xf4>)
 800d496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d498:	f830 1b02 	ldrh.w	r1, [r0], #2
 800d49c:	b2c9      	uxtb	r1, r1
 800d49e:	4798      	blx	r3
}
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	b006      	add	sp, #24
 800d4a4:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800d4a6:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 800d4aa:	f002 f988 	bl	800f7be <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d0cc      	beq.n	800d44c <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800d4b2:	2410      	movs	r4, #16
 800d4b4:	e7f4      	b.n	800d4a0 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800d4b6:	f002 f984 	bl	800f7c2 <LoRaMacClassBStopRxSlots>
 800d4ba:	e7cc      	b.n	800d456 <SendFrameOnChannel+0x86>
 800d4bc:	20008000 	.word	0x20008000
 800d4c0:	20000d18 	.word	0x20000d18
 800d4c4:	0801af08 	.word	0x0801af08

0800d4c8 <ScheduleTx>:
{
 800d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4cc:	b08c      	sub	sp, #48	; 0x30
 800d4ce:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800d4d0:	f7ff fdb2 	bl	800d038 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	b118      	cbz	r0, 800d4e0 <ScheduleTx+0x18>
}
 800d4d8:	4620      	mov	r0, r4
 800d4da:	b00c      	add	sp, #48	; 0x30
 800d4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800d4e0:	f7fe fcfe 	bl	800bee0 <CalculateBackOff>
    status = SerializeTxFrame( );
 800d4e4:	f7ff feae 	bl	800d244 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d1f4      	bne.n	800d4d8 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800d4ee:	4e36      	ldr	r6, [pc, #216]	; (800d5c8 <ScheduleTx+0x100>)
 800d4f0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800d4f2:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d4f4:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800d4f8:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800d4fc:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800d500:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d504:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d508:	4640      	mov	r0, r8
 800d50a:	f007 fd71 	bl	8014ff0 <SysTimeGetMcuTime>
 800d50e:	af02      	add	r7, sp, #8
 800d510:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800d51a:	e898 0006 	ldmia.w	r8, {r1, r2}
 800d51e:	4638      	mov	r0, r7
 800d520:	f007 fd03 	bl	8014f2a <SysTimeSub>
 800d524:	ab07      	add	r3, sp, #28
 800d526:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d52a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800d52e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d530:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800d532:	2300      	movs	r3, #0
 800d534:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800d538:	2301      	movs	r3, #1
 800d53a:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800d53e:	4b23      	ldr	r3, [pc, #140]	; (800d5cc <ScheduleTx+0x104>)
 800d540:	881b      	ldrh	r3, [r3, #0]
 800d542:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d546:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800d54a:	b92b      	cbnz	r3, 800d558 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800d54c:	2301      	movs	r3, #1
 800d54e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800d552:	2300      	movs	r3, #0
 800d554:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800d558:	4a1c      	ldr	r2, [pc, #112]	; (800d5cc <ScheduleTx+0x104>)
 800d55a:	481b      	ldr	r0, [pc, #108]	; (800d5c8 <ScheduleTx+0x100>)
 800d55c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800d566:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 800d56a:	a904      	add	r1, sp, #16
 800d56c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800d570:	f003 fa39 	bl	80109e6 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800d574:	b1c0      	cbz	r0, 800d5a8 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800d576:	280b      	cmp	r0, #11
 800d578:	d124      	bne.n	800d5c4 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800d57a:	4a14      	ldr	r2, [pc, #80]	; (800d5cc <ScheduleTx+0x104>)
 800d57c:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 800d580:	b191      	cbz	r1, 800d5a8 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800d582:	b90d      	cbnz	r5, 800d588 <ScheduleTx+0xc0>
                return status;
 800d584:	4604      	mov	r4, r0
 800d586:	e7a7      	b.n	800d4d8 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800d588:	4615      	mov	r5, r2
 800d58a:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800d58e:	f042 0220 	orr.w	r2, r2, #32
 800d592:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800d596:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800d59a:	4628      	mov	r0, r5
 800d59c:	f007 fe94 	bl	80152c8 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f007 fe4b 	bl	801523c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800d5a6:	e797      	b.n	800d4d8 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800d5a8:	f7ff fe70 	bl	800d28c <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800d5ac:	f7ff feb2 	bl	800d314 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d190      	bne.n	800d4d8 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800d5b6:	4b05      	ldr	r3, [pc, #20]	; (800d5cc <ScheduleTx+0x104>)
 800d5b8:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800d5bc:	f7ff ff08 	bl	800d3d0 <SendFrameOnChannel>
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	e789      	b.n	800d4d8 <ScheduleTx+0x10>
            return status;
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	e787      	b.n	800d4d8 <ScheduleTx+0x10>
 800d5c8:	20008000 	.word	0x20008000
 800d5cc:	20000d18 	.word	0x20000d18

0800d5d0 <OnTxDelayedTimerEvent>:
{
 800d5d0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800d5d2:	4c16      	ldr	r4, [pc, #88]	; (800d62c <OnTxDelayedTimerEvent+0x5c>)
 800d5d4:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800d5d8:	f007 fdd6 	bl	8015188 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d5dc:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800d5e0:	f023 0320 	bic.w	r3, r3, #32
 800d5e4:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800d5e8:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800d5ec:	4b10      	ldr	r3, [pc, #64]	; (800d630 <OnTxDelayedTimerEvent+0x60>)
 800d5ee:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800d5f2:	f7ff fde7 	bl	800d1c4 <LoRaMacHandleResponseTimeout>
 800d5f6:	b100      	cbz	r0, 800d5fa <OnTxDelayedTimerEvent+0x2a>
}
 800d5f8:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	f7ff ff64 	bl	800d4c8 <ScheduleTx>
 800d600:	2800      	cmp	r0, #0
 800d602:	d0f9      	beq.n	800d5f8 <OnTxDelayedTimerEvent+0x28>
 800d604:	280b      	cmp	r0, #11
 800d606:	d0f7      	beq.n	800d5f8 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d608:	4b09      	ldr	r3, [pc, #36]	; (800d630 <OnTxDelayedTimerEvent+0x60>)
 800d60a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800d60e:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800d612:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800d616:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800d61a:	2009      	movs	r0, #9
 800d61c:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800d620:	f002 fb10 	bl	800fc44 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800d624:	f7fe fcee 	bl	800c004 <StopRetransmission>
            break;
 800d628:	e7e6      	b.n	800d5f8 <OnTxDelayedTimerEvent+0x28>
 800d62a:	bf00      	nop
 800d62c:	20000d18 	.word	0x20000d18
 800d630:	20008000 	.word	0x20008000

0800d634 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d634:	4b1c      	ldr	r3, [pc, #112]	; (800d6a8 <LoRaMacHandleMcpsRequest+0x74>)
 800d636:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800d63a:	f013 0f01 	tst.w	r3, #1
 800d63e:	d032      	beq.n	800d6a6 <LoRaMacHandleMcpsRequest+0x72>
{
 800d640:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d642:	4b19      	ldr	r3, [pc, #100]	; (800d6a8 <LoRaMacHandleMcpsRequest+0x74>)
 800d644:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800d648:	b12b      	cbz	r3, 800d656 <LoRaMacHandleMcpsRequest+0x22>
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d003      	beq.n	800d656 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d006      	beq.n	800d660 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800d652:	2000      	movs	r0, #0
 800d654:	e002      	b.n	800d65c <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800d656:	f7fe fc9b 	bl	800bf90 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800d65a:	b940      	cbnz	r0, 800d66e <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800d65c:	b1b8      	cbz	r0, 800d68e <LoRaMacHandleMcpsRequest+0x5a>
}
 800d65e:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800d660:	4b11      	ldr	r3, [pc, #68]	; (800d6a8 <LoRaMacHandleMcpsRequest+0x74>)
 800d662:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800d666:	b183      	cbz	r3, 800d68a <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800d668:	f7fe fcae 	bl	800bfc8 <CheckRetransConfirmedUplink>
 800d66c:	e7f5      	b.n	800d65a <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800d66e:	4c0e      	ldr	r4, [pc, #56]	; (800d6a8 <LoRaMacHandleMcpsRequest+0x74>)
 800d670:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800d674:	f007 fd88 	bl	8015188 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d678:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800d67c:	f023 0320 	bic.w	r3, r3, #32
 800d680:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800d684:	f7fe fcbe 	bl	800c004 <StopRetransmission>
 800d688:	e7e9      	b.n	800d65e <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800d68a:	2001      	movs	r0, #1
 800d68c:	e7e6      	b.n	800d65c <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800d68e:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <LoRaMacHandleMcpsRequest+0x74>)
 800d690:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800d694:	f36f 1204 	bfc	r2, #4, #1
 800d698:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800d69c:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800d6a0:	f7ff ff96 	bl	800d5d0 <OnTxDelayedTimerEvent>
}
 800d6a4:	e7db      	b.n	800d65e <LoRaMacHandleMcpsRequest+0x2a>
 800d6a6:	4770      	bx	lr
 800d6a8:	20000d18 	.word	0x20000d18

0800d6ac <LoRaMacHandleRequestEvents>:
{
 800d6ac:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d6ae:	4b22      	ldr	r3, [pc, #136]	; (800d738 <LoRaMacHandleRequestEvents+0x8c>)
 800d6b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d6b4:	bb7b      	cbnz	r3, 800d716 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d6b6:	4b20      	ldr	r3, [pc, #128]	; (800d738 <LoRaMacHandleRequestEvents+0x8c>)
 800d6b8:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 800d6bc:	f014 0501 	ands.w	r5, r4, #1
 800d6c0:	d005      	beq.n	800d6ce <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800d6c2:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800d6c6:	f36f 0200 	bfc	r2, #0, #1
 800d6ca:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d6ce:	4b1a      	ldr	r3, [pc, #104]	; (800d738 <LoRaMacHandleRequestEvents+0x8c>)
 800d6d0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800d6d4:	f013 0f04 	tst.w	r3, #4
 800d6d8:	d006      	beq.n	800d6e8 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d6da:	4b17      	ldr	r3, [pc, #92]	; (800d738 <LoRaMacHandleRequestEvents+0x8c>)
 800d6dc:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800d6e0:	f36f 0282 	bfc	r2, #2, #1
 800d6e4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	f7fe fba9 	bl	800be40 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800d6ee:	b135      	cbz	r5, 800d6fe <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800d6f0:	4811      	ldr	r0, [pc, #68]	; (800d738 <LoRaMacHandleRequestEvents+0x8c>)
 800d6f2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 800d6fc:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800d6fe:	f014 0f04 	tst.w	r4, #4
 800d702:	d109      	bne.n	800d718 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800d704:	f002 f84d 	bl	800f7a2 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800d708:	4b0b      	ldr	r3, [pc, #44]	; (800d738 <LoRaMacHandleRequestEvents+0x8c>)
 800d70a:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800d70e:	f36f 1204 	bfc	r2, #4, #1
 800d712:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800d716:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800d718:	4808      	ldr	r0, [pc, #32]	; (800d73c <LoRaMacHandleRequestEvents+0x90>)
 800d71a:	f002 fabd 	bl	800fc98 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800d71e:	f002 faf3 	bl	800fd08 <LoRaMacConfirmQueueGetCnt>
 800d722:	2800      	cmp	r0, #0
 800d724:	d0ee      	beq.n	800d704 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800d726:	4a04      	ldr	r2, [pc, #16]	; (800d738 <LoRaMacHandleRequestEvents+0x8c>)
 800d728:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d72c:	f043 0304 	orr.w	r3, r3, #4
 800d730:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800d734:	e7e6      	b.n	800d704 <LoRaMacHandleRequestEvents+0x58>
 800d736:	bf00      	nop
 800d738:	20000d18 	.word	0x20000d18
 800d73c:	2000116c 	.word	0x2000116c

0800d740 <OpenContinuousRxCWindow>:
{
 800d740:	b570      	push	{r4, r5, r6, lr}
 800d742:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800d744:	4c16      	ldr	r4, [pc, #88]	; (800d7a0 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d746:	4d17      	ldr	r5, [pc, #92]	; (800d7a4 <OpenContinuousRxCWindow+0x64>)
 800d748:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800d74c:	9600      	str	r6, [sp, #0]
 800d74e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d750:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800d754:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800d758:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d75c:	f003 f8df 	bl	801091e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d760:	2302      	movs	r3, #2
 800d762:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d766:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800d76a:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d76e:	2301      	movs	r3, #1
 800d770:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d774:	f205 4224 	addw	r2, r5, #1060	; 0x424
 800d778:	4631      	mov	r1, r6
 800d77a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d77e:	f003 f8da 	bl	8010936 <RegionRxConfig>
 800d782:	b158      	cbz	r0, 800d79c <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d784:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800d788:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800d78c:	4b06      	ldr	r3, [pc, #24]	; (800d7a8 <OpenContinuousRxCWindow+0x68>)
 800d78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d790:	2000      	movs	r0, #0
 800d792:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800d794:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800d798:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800d79c:	b002      	add	sp, #8
 800d79e:	bd70      	pop	{r4, r5, r6, pc}
 800d7a0:	20008000 	.word	0x20008000
 800d7a4:	20000d18 	.word	0x20000d18
 800d7a8:	0801af08 	.word	0x0801af08

0800d7ac <RxWindowSetup>:
{
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800d7b0:	f007 fcea 	bl	8015188 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800d7b4:	4b0c      	ldr	r3, [pc, #48]	; (800d7e8 <RxWindowSetup+0x3c>)
 800d7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7b8:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d7ba:	4a0c      	ldr	r2, [pc, #48]	; (800d7ec <RxWindowSetup+0x40>)
 800d7bc:	4621      	mov	r1, r4
 800d7be:	4b0c      	ldr	r3, [pc, #48]	; (800d7f0 <RxWindowSetup+0x44>)
 800d7c0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d7c4:	f003 f8b7 	bl	8010936 <RegionRxConfig>
 800d7c8:	b160      	cbz	r0, 800d7e4 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d7ca:	4d0a      	ldr	r5, [pc, #40]	; (800d7f4 <RxWindowSetup+0x48>)
 800d7cc:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800d7d0:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800d7d4:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <RxWindowSetup+0x3c>)
 800d7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d8:	4a05      	ldr	r2, [pc, #20]	; (800d7f0 <RxWindowSetup+0x44>)
 800d7da:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800d7dc:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800d7de:	7ce3      	ldrb	r3, [r4, #19]
 800d7e0:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800d7e4:	bd38      	pop	{r3, r4, r5, pc}
 800d7e6:	bf00      	nop
 800d7e8:	0801af08 	.word	0x0801af08
 800d7ec:	2000113c 	.word	0x2000113c
 800d7f0:	20008000 	.word	0x20008000
 800d7f4:	20000d18 	.word	0x20000d18

0800d7f8 <OnRxWindow2TimerEvent>:
{
 800d7f8:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d7fa:	4b13      	ldr	r3, [pc, #76]	; (800d848 <OnRxWindow2TimerEvent+0x50>)
 800d7fc:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800d800:	b903      	cbnz	r3, 800d804 <OnRxWindow2TimerEvent+0xc>
}
 800d802:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800d804:	4810      	ldr	r0, [pc, #64]	; (800d848 <OnRxWindow2TimerEvent+0x50>)
 800d806:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800d80a:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800d80e:	4b0f      	ldr	r3, [pc, #60]	; (800d84c <OnRxWindow2TimerEvent+0x54>)
 800d810:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d812:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d816:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800d81a:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d81e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800d822:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800d826:	2200      	movs	r2, #0
 800d828:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800d82c:	2201      	movs	r2, #1
 800d82e:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d832:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d836:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800d83a:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800d83e:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800d842:	f7ff ffb3 	bl	800d7ac <RxWindowSetup>
 800d846:	e7dc      	b.n	800d802 <OnRxWindow2TimerEvent+0xa>
 800d848:	20000d18 	.word	0x20000d18
 800d84c:	20008000 	.word	0x20008000

0800d850 <OnRxWindow1TimerEvent>:
{
 800d850:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800d852:	4811      	ldr	r0, [pc, #68]	; (800d898 <OnRxWindow1TimerEvent+0x48>)
 800d854:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800d858:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800d85c:	4b0f      	ldr	r3, [pc, #60]	; (800d89c <OnRxWindow1TimerEvent+0x4c>)
 800d85e:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800d862:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d866:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800d86a:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d86e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800d872:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800d876:	2200      	movs	r2, #0
 800d878:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800d87c:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d880:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d884:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800d888:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800d88c:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800d890:	f7ff ff8c 	bl	800d7ac <RxWindowSetup>
}
 800d894:	bd08      	pop	{r3, pc}
 800d896:	bf00      	nop
 800d898:	20000d18 	.word	0x20000d18
 800d89c:	20008000 	.word	0x20008000

0800d8a0 <LoRaMacHandleNvm>:
{
 800d8a0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800d8a2:	4b31      	ldr	r3, [pc, #196]	; (800d968 <LoRaMacHandleNvm+0xc8>)
 800d8a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d8a8:	b103      	cbz	r3, 800d8ac <LoRaMacHandleNvm+0xc>
}
 800d8aa:	bd38      	pop	{r3, r4, r5, pc}
 800d8ac:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800d8ae:	2124      	movs	r1, #36	; 0x24
 800d8b0:	f005 fa66 	bl	8012d80 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800d8b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8b6:	4283      	cmp	r3, r0
 800d8b8:	d053      	beq.n	800d962 <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800d8ba:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800d8bc:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800d8be:	211c      	movs	r1, #28
 800d8c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d8c4:	f005 fa5c 	bl	8012d80 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800d8c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d8ca:	4283      	cmp	r3, r0
 800d8cc:	d002      	beq.n	800d8d4 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800d8ce:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800d8d0:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800d8d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d8d8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800d8dc:	f005 fa50 	bl	8012d80 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800d8e0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800d8e4:	4283      	cmp	r3, r0
 800d8e6:	d003      	beq.n	800d8f0 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800d8e8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800d8ec:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800d8f0:	21d4      	movs	r1, #212	; 0xd4
 800d8f2:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800d8f6:	f005 fa43 	bl	8012d80 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800d8fa:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800d8fe:	4283      	cmp	r3, r0
 800d900:	d003      	beq.n	800d90a <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800d902:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800d906:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800d90a:	2110      	movs	r1, #16
 800d90c:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800d910:	f005 fa36 	bl	8012d80 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800d914:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800d918:	4283      	cmp	r3, r0
 800d91a:	d003      	beq.n	800d924 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800d91c:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800d920:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800d924:	f44f 715e 	mov.w	r1, #888	; 0x378
 800d928:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800d92c:	f005 fa28 	bl	8012d80 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800d930:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800d934:	4283      	cmp	r3, r0
 800d936:	d003      	beq.n	800d940 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800d938:	f8c4 05b0 	str.w	r0, [r4, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800d93c:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800d940:	2114      	movs	r1, #20
 800d942:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800d946:	f005 fa1b 	bl	8012d80 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800d94a:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800d94e:	4283      	cmp	r3, r0
 800d950:	d003      	beq.n	800d95a <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800d952:	f8c4 05c8 	str.w	r0, [r4, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800d956:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800d95a:	4628      	mov	r0, r5
 800d95c:	f7fe fb94 	bl	800c088 <CallNvmDataChangeCallback>
 800d960:	e7a3      	b.n	800d8aa <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d962:	2500      	movs	r5, #0
 800d964:	e7ab      	b.n	800d8be <LoRaMacHandleNvm+0x1e>
 800d966:	bf00      	nop
 800d968:	20000d18 	.word	0x20000d18

0800d96c <RestoreNvmData>:
{
 800d96c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800d96e:	4b3d      	ldr	r3, [pc, #244]	; (800da64 <RestoreNvmData+0xf8>)
 800d970:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d974:	2b01      	cmp	r3, #1
 800d976:	d001      	beq.n	800d97c <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800d978:	2001      	movs	r0, #1
}
 800d97a:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800d97c:	4c3a      	ldr	r4, [pc, #232]	; (800da68 <RestoreNvmData+0xfc>)
 800d97e:	2124      	movs	r1, #36	; 0x24
 800d980:	4620      	mov	r0, r4
 800d982:	f005 f9fd 	bl	8012d80 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800d986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d988:	4283      	cmp	r3, r0
 800d98a:	d001      	beq.n	800d990 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d98c:	2017      	movs	r0, #23
 800d98e:	e7f4      	b.n	800d97a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800d990:	211c      	movs	r1, #28
 800d992:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d996:	f005 f9f3 	bl	8012d80 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800d99a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d99c:	4283      	cmp	r3, r0
 800d99e:	d001      	beq.n	800d9a4 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d9a0:	2017      	movs	r0, #23
 800d9a2:	e7ea      	b.n	800d97a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800d9a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d9a8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800d9ac:	f005 f9e8 	bl	8012d80 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800d9b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800d9b4:	4283      	cmp	r3, r0
 800d9b6:	d001      	beq.n	800d9bc <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d9b8:	2017      	movs	r0, #23
 800d9ba:	e7de      	b.n	800d97a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800d9bc:	21d4      	movs	r1, #212	; 0xd4
 800d9be:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800d9c2:	f005 f9dd 	bl	8012d80 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800d9c6:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800d9ca:	4283      	cmp	r3, r0
 800d9cc:	d001      	beq.n	800d9d2 <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d9ce:	2017      	movs	r0, #23
 800d9d0:	e7d3      	b.n	800d97a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800d9d2:	2110      	movs	r1, #16
 800d9d4:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800d9d8:	f005 f9d2 	bl	8012d80 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800d9dc:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800d9e0:	4283      	cmp	r3, r0
 800d9e2:	d001      	beq.n	800d9e8 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d9e4:	2017      	movs	r0, #23
 800d9e6:	e7c8      	b.n	800d97a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800d9e8:	f44f 715e 	mov.w	r1, #888	; 0x378
 800d9ec:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800d9f0:	f005 f9c6 	bl	8012d80 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800d9f4:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800d9f8:	4283      	cmp	r3, r0
 800d9fa:	d001      	beq.n	800da00 <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d9fc:	2017      	movs	r0, #23
 800d9fe:	e7bc      	b.n	800d97a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800da00:	2114      	movs	r1, #20
 800da02:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800da06:	f005 f9bb 	bl	8012d80 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800da0a:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800da0e:	4283      	cmp	r3, r0
 800da10:	d001      	beq.n	800da16 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800da12:	2017      	movs	r0, #23
 800da14:	e7b1      	b.n	800d97a <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800da16:	4625      	mov	r5, r4
 800da18:	4c14      	ldr	r4, [pc, #80]	; (800da6c <RestoreNvmData+0x100>)
 800da1a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800da1e:	4629      	mov	r1, r5
 800da20:	4620      	mov	r0, r4
 800da22:	f005 f98c 	bl	8012d3e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800da26:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800da2a:	2100      	movs	r1, #0
 800da2c:	4628      	mov	r0, r5
 800da2e:	f005 f99e 	bl	8012d6e <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800da32:	4b0c      	ldr	r3, [pc, #48]	; (800da64 <RestoreNvmData+0xf8>)
 800da34:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800da38:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800da3c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800da3e:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800da42:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800da46:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800da50:	2202      	movs	r2, #2
 800da52:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800da56:	4b06      	ldr	r3, [pc, #24]	; (800da70 <RestoreNvmData+0x104>)
 800da58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da5a:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800da5e:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800da60:	2000      	movs	r0, #0
 800da62:	e78a      	b.n	800d97a <RestoreNvmData+0xe>
 800da64:	20000d18 	.word	0x20000d18
 800da68:	200085cc 	.word	0x200085cc
 800da6c:	20008000 	.word	0x20008000
 800da70:	0801af08 	.word	0x0801af08

0800da74 <OnRadioRxTimeout>:
{
 800da74:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800da76:	4a07      	ldr	r2, [pc, #28]	; (800da94 <OnRadioRxTimeout+0x20>)
 800da78:	7813      	ldrb	r3, [r2, #0]
 800da7a:	f043 0302 	orr.w	r3, r3, #2
 800da7e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800da80:	f7fe faea 	bl	800c058 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800da84:	4b04      	ldr	r3, [pc, #16]	; (800da98 <OnRadioRxTimeout+0x24>)
 800da86:	2201      	movs	r2, #1
 800da88:	2100      	movs	r1, #0
 800da8a:	2002      	movs	r0, #2
 800da8c:	f007 f834 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 800da90:	bd08      	pop	{r3, pc}
 800da92:	bf00      	nop
 800da94:	20000d14 	.word	0x20000d14
 800da98:	0801a828 	.word	0x0801a828

0800da9c <OnRadioTxTimeout>:
{
 800da9c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800da9e:	4a07      	ldr	r2, [pc, #28]	; (800dabc <OnRadioTxTimeout+0x20>)
 800daa0:	7813      	ldrb	r3, [r2, #0]
 800daa2:	f043 0308 	orr.w	r3, r3, #8
 800daa6:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800daa8:	f7fe fad6 	bl	800c058 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800daac:	4b04      	ldr	r3, [pc, #16]	; (800dac0 <OnRadioTxTimeout+0x24>)
 800daae:	2201      	movs	r2, #1
 800dab0:	2100      	movs	r1, #0
 800dab2:	2002      	movs	r0, #2
 800dab4:	f007 f820 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 800dab8:	bd08      	pop	{r3, pc}
 800daba:	bf00      	nop
 800dabc:	20000d14 	.word	0x20000d14
 800dac0:	0801a838 	.word	0x0801a838

0800dac4 <OnRadioRxDone>:
{
 800dac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac8:	4680      	mov	r8, r0
 800daca:	460f      	mov	r7, r1
 800dacc:	4616      	mov	r6, r2
 800dace:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800dad0:	f007 fb1a 	bl	8015108 <UTIL_TIMER_GetCurrentTime>
 800dad4:	4c0c      	ldr	r4, [pc, #48]	; (800db08 <OnRadioRxDone+0x44>)
 800dad6:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800dad8:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800dadc:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800dade:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800dae0:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800dae2:	4b0a      	ldr	r3, [pc, #40]	; (800db0c <OnRadioRxDone+0x48>)
 800dae4:	781a      	ldrb	r2, [r3, #0]
 800dae6:	f042 0210 	orr.w	r2, r2, #16
 800daea:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800daec:	b2d2      	uxtb	r2, r2
 800daee:	f042 0201 	orr.w	r2, r2, #1
 800daf2:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800daf4:	f7fe fab0 	bl	800c058 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800daf8:	4b05      	ldr	r3, [pc, #20]	; (800db10 <OnRadioRxDone+0x4c>)
 800dafa:	2201      	movs	r2, #1
 800dafc:	2100      	movs	r1, #0
 800dafe:	2002      	movs	r0, #2
 800db00:	f006 fffa 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 800db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db08:	200012c4 	.word	0x200012c4
 800db0c:	20000d14 	.word	0x20000d14
 800db10:	0801a848 	.word	0x0801a848

0800db14 <OnRadioTxDone>:
{
 800db14:	b510      	push	{r4, lr}
 800db16:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800db18:	f007 faf6 	bl	8015108 <UTIL_TIMER_GetCurrentTime>
 800db1c:	4b0c      	ldr	r3, [pc, #48]	; (800db50 <OnRadioTxDone+0x3c>)
 800db1e:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800db20:	466c      	mov	r4, sp
 800db22:	4620      	mov	r0, r4
 800db24:	f007 fa42 	bl	8014fac <SysTimeGet>
 800db28:	4b0a      	ldr	r3, [pc, #40]	; (800db54 <OnRadioTxDone+0x40>)
 800db2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800db2e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800db32:	4a09      	ldr	r2, [pc, #36]	; (800db58 <OnRadioTxDone+0x44>)
 800db34:	7813      	ldrb	r3, [r2, #0]
 800db36:	f043 0320 	orr.w	r3, r3, #32
 800db3a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800db3c:	f7fe fa8c 	bl	800c058 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800db40:	4b06      	ldr	r3, [pc, #24]	; (800db5c <OnRadioTxDone+0x48>)
 800db42:	2201      	movs	r2, #1
 800db44:	2100      	movs	r1, #0
 800db46:	2002      	movs	r0, #2
 800db48:	f006 ffd6 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 800db4c:	b002      	add	sp, #8
 800db4e:	bd10      	pop	{r4, pc}
 800db50:	200012d4 	.word	0x200012d4
 800db54:	20001050 	.word	0x20001050
 800db58:	20000d14 	.word	0x20000d14
 800db5c:	0801a858 	.word	0x0801a858

0800db60 <ResetMacParameters>:
{
 800db60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db62:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 800db64:	b918      	cbnz	r0, 800db6e <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800db66:	4b61      	ldr	r3, [pc, #388]	; (800dcec <ResetMacParameters+0x18c>)
 800db68:	2200      	movs	r2, #0
 800db6a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800db6e:	4c5f      	ldr	r4, [pc, #380]	; (800dcec <ResetMacParameters+0x18c>)
 800db70:	2500      	movs	r5, #0
 800db72:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800db74:	4e5e      	ldr	r6, [pc, #376]	; (800dcf0 <ResetMacParameters+0x190>)
 800db76:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800db7a:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800db7e:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800db82:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800db86:	2701      	movs	r7, #1
 800db88:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800db8c:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800db90:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800db94:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800db98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800db9c:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800dba0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800dba4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800dba8:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800dbac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dbb0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800dbb4:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800dbb8:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800dbbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dbc0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800dbc4:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800dbc8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800dbcc:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800dbd0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800dbd4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800dbd8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800dbdc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800dbe0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800dbe4:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800dbe8:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800dbec:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800dbf0:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800dbf4:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800dbf8:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800dbfc:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800dc00:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800dc04:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800dc08:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800dc0c:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800dc10:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800dc14:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800dc18:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800dc1c:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800dc20:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800dc24:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800dc28:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800dc2c:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800dc2e:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800dc32:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800dc34:	4b2f      	ldr	r3, [pc, #188]	; (800dcf4 <ResetMacParameters+0x194>)
 800dc36:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800dc38:	a901      	add	r1, sp, #4
 800dc3a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dc3e:	f002 fe4a 	bl	80108d6 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800dc42:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800dc46:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800dc4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800dc4c:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dc50:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800dc54:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800dc58:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800dc5c:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800dc60:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800dc64:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800dc68:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800dc6c:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800dc70:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800dc74:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800dc78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc7e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800dc82:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800dc86:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dc8a:	2302      	movs	r3, #2
 800dc8c:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800dc90:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800dc92:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800dc94:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800dc98:	b11b      	cbz	r3, 800dca2 <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800dc9e:	695b      	ldr	r3, [r3, #20]
 800dca0:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800dca2:	4b13      	ldr	r3, [pc, #76]	; (800dcf0 <ResetMacParameters+0x190>)
 800dca4:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 800dca8:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800dcaa:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800dcae:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800dcb0:	f203 4254 	addw	r2, r3, #1108	; 0x454
 800dcb4:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800dcb6:	f203 4391 	addw	r3, r3, #1169	; 0x491
 800dcba:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800dcbc:	4a0b      	ldr	r2, [pc, #44]	; (800dcec <ResetMacParameters+0x18c>)
 800dcbe:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800dcc2:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800dcc4:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800dcc8:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800dcca:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800dcce:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800dcd0:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800dcd4:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800dcd6:	f502 7398 	add.w	r3, r2, #304	; 0x130
 800dcda:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800dcdc:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800dce0:	a90e      	add	r1, sp, #56	; 0x38
 800dce2:	a805      	add	r0, sp, #20
 800dce4:	f001 fd48 	bl	800f778 <LoRaMacClassBInit>
}
 800dce8:	b011      	add	sp, #68	; 0x44
 800dcea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcec:	20008000 	.word	0x20008000
 800dcf0:	20000d18 	.word	0x20000d18
 800dcf4:	20001234 	.word	0x20001234

0800dcf8 <SwitchClass>:
{
 800dcf8:	b570      	push	{r4, r5, r6, lr}
 800dcfa:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800dcfc:	4b45      	ldr	r3, [pc, #276]	; (800de14 <SwitchClass+0x11c>)
 800dcfe:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800dd02:	2d01      	cmp	r5, #1
 800dd04:	d06e      	beq.n	800dde4 <SwitchClass+0xec>
 800dd06:	2d02      	cmp	r5, #2
 800dd08:	d074      	beq.n	800ddf4 <SwitchClass+0xfc>
 800dd0a:	b10d      	cbz	r5, 800dd10 <SwitchClass+0x18>
 800dd0c:	2003      	movs	r0, #3
}
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800dd10:	bb58      	cbnz	r0, 800dd6a <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800dd12:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800dd16:	336c      	adds	r3, #108	; 0x6c
 800dd18:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd1c:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800dd20:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800dd22:	2c01      	cmp	r4, #1
 800dd24:	d023      	beq.n	800dd6e <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800dd26:	2c02      	cmp	r4, #2
 800dd28:	d1f1      	bne.n	800dd0e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800dd2a:	4b3a      	ldr	r3, [pc, #232]	; (800de14 <SwitchClass+0x11c>)
 800dd2c:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800dd30:	4e39      	ldr	r6, [pc, #228]	; (800de18 <SwitchClass+0x120>)
 800dd32:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800dd36:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800dd3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dd3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd40:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800dd44:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dd48:	2302      	movs	r3, #2
 800dd4a:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dd4e:	2300      	movs	r3, #0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	dd15      	ble.n	800dd80 <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800dd54:	4b30      	ldr	r3, [pc, #192]	; (800de18 <SwitchClass+0x120>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 800dd5c:	4b2f      	ldr	r3, [pc, #188]	; (800de1c <SwitchClass+0x124>)
 800dd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd60:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800dd62:	f7ff fced 	bl	800d740 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800dd66:	4628      	mov	r0, r5
 800dd68:	e7d1      	b.n	800dd0e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dd6a:	2003      	movs	r0, #3
 800dd6c:	e7d9      	b.n	800dd22 <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f001 fd18 	bl	800f7a4 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d1d6      	bne.n	800dd26 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800dd78:	4b26      	ldr	r3, [pc, #152]	; (800de14 <SwitchClass+0x11c>)
 800dd7a:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800dd7e:	e7d2      	b.n	800dd26 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800dd80:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800dd84:	4a23      	ldr	r2, [pc, #140]	; (800de14 <SwitchClass+0x11c>)
 800dd86:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800dd8a:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800dd8e:	b132      	cbz	r2, 800dd9e <SwitchClass+0xa6>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800dd90:	4a20      	ldr	r2, [pc, #128]	; (800de14 <SwitchClass+0x11c>)
 800dd92:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800dd96:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800dd9a:	2a02      	cmp	r2, #2
 800dd9c:	d002      	beq.n	800dda4 <SwitchClass+0xac>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dd9e:	3301      	adds	r3, #1
 800dda0:	b25b      	sxtb	r3, r3
 800dda2:	e7d5      	b.n	800dd50 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800dda4:	4a1b      	ldr	r2, [pc, #108]	; (800de14 <SwitchClass+0x11c>)
 800dda6:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800ddaa:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800ddae:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800ddb0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800ddb4:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ddb8:	4b17      	ldr	r3, [pc, #92]	; (800de18 <SwitchClass+0x120>)
 800ddba:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800ddbe:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ddc2:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ddc6:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800ddca:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ddce:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800ddd2:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ddd6:	2203      	movs	r2, #3
 800ddd8:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800dddc:	2201      	movs	r2, #1
 800ddde:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800dde2:	e7b7      	b.n	800dd54 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800dde4:	f001 fcde 	bl	800f7a4 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800dde8:	2800      	cmp	r0, #0
 800ddea:	d190      	bne.n	800dd0e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ddec:	4b09      	ldr	r3, [pc, #36]	; (800de14 <SwitchClass+0x11c>)
 800ddee:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800ddf2:	e78c      	b.n	800dd0e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800ddf4:	b958      	cbnz	r0, 800de0e <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800ddf6:	4b08      	ldr	r3, [pc, #32]	; (800de18 <SwitchClass+0x120>)
 800ddf8:	2206      	movs	r2, #6
 800ddfa:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ddfe:	4b05      	ldr	r3, [pc, #20]	; (800de14 <SwitchClass+0x11c>)
 800de00:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800de04:	4b05      	ldr	r3, [pc, #20]	; (800de1c <SwitchClass+0x124>)
 800de06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de08:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800de0a:	4620      	mov	r0, r4
 800de0c:	e77f      	b.n	800dd0e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800de0e:	2003      	movs	r0, #3
 800de10:	e77d      	b.n	800dd0e <SwitchClass+0x16>
 800de12:	bf00      	nop
 800de14:	20008000 	.word	0x20008000
 800de18:	20000d18 	.word	0x20000d18
 800de1c:	0801af08 	.word	0x0801af08

0800de20 <SendReJoinReq>:
{
 800de20:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800de22:	28ff      	cmp	r0, #255	; 0xff
 800de24:	d003      	beq.n	800de2e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800de26:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800de28:	f7ff fb4e 	bl	800d4c8 <ScheduleTx>
}
 800de2c:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800de2e:	2000      	movs	r0, #0
 800de30:	f7ff ff62 	bl	800dcf8 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800de34:	4d0a      	ldr	r5, [pc, #40]	; (800de60 <SendReJoinReq+0x40>)
 800de36:	2400      	movs	r4, #0
 800de38:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800de3c:	1cab      	adds	r3, r5, #2
 800de3e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800de42:	23ff      	movs	r3, #255	; 0xff
 800de44:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800de48:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800de4c:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800de50:	f004 fe58 	bl	8012b04 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800de54:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800de58:	f004 fe36 	bl	8012ac8 <SecureElementGetDevEui>
            allowDelayedTx = false;
 800de5c:	4620      	mov	r0, r4
            break;
 800de5e:	e7e3      	b.n	800de28 <SendReJoinReq+0x8>
 800de60:	20000d18 	.word	0x20000d18

0800de64 <PrepareFrame>:
{
 800de64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de68:	b083      	sub	sp, #12
 800de6a:	4605      	mov	r5, r0
 800de6c:	460e      	mov	r6, r1
 800de6e:	4617      	mov	r7, r2
 800de70:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800de74:	4959      	ldr	r1, [pc, #356]	; (800dfdc <PrepareFrame+0x178>)
 800de76:	2200      	movs	r2, #0
 800de78:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800de7a:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 800de7e:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800de80:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800de82:	4698      	mov	r8, r3
 800de84:	b1cb      	cbz	r3, 800deba <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800de86:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800dfdc <PrepareFrame+0x178>
 800de8a:	4622      	mov	r2, r4
 800de8c:	4641      	mov	r1, r8
 800de8e:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800de92:	f004 ff54 	bl	8012d3e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800de96:	b2e0      	uxtb	r0, r4
 800de98:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800de9c:	782b      	ldrb	r3, [r5, #0]
 800de9e:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800dea2:	782b      	ldrb	r3, [r5, #0]
 800dea4:	095b      	lsrs	r3, r3, #5
 800dea6:	2b04      	cmp	r3, #4
 800dea8:	d009      	beq.n	800debe <PrepareFrame+0x5a>
 800deaa:	2b07      	cmp	r3, #7
 800deac:	d079      	beq.n	800dfa2 <PrepareFrame+0x13e>
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d009      	beq.n	800dec6 <PrepareFrame+0x62>
 800deb2:	2002      	movs	r0, #2
}
 800deb4:	b003      	add	sp, #12
 800deb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800deba:	4614      	mov	r4, r2
 800debc:	e7e3      	b.n	800de86 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800debe:	4b47      	ldr	r3, [pc, #284]	; (800dfdc <PrepareFrame+0x178>)
 800dec0:	2201      	movs	r2, #1
 800dec2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800dec6:	4b45      	ldr	r3, [pc, #276]	; (800dfdc <PrepareFrame+0x178>)
 800dec8:	2204      	movs	r2, #4
 800deca:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800dece:	1c9a      	adds	r2, r3, #2
 800ded0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ded4:	22ff      	movs	r2, #255	; 0xff
 800ded6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800deda:	782a      	ldrb	r2, [r5, #0]
 800dedc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800dee0:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800dee4:	4a3e      	ldr	r2, [pc, #248]	; (800dfe0 <PrepareFrame+0x17c>)
 800dee6:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800deea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800deee:	7832      	ldrb	r2, [r6, #0]
 800def0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800def4:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800def8:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800defc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800df00:	a801      	add	r0, sp, #4
 800df02:	f002 f921 	bl	8010148 <LoRaMacCryptoGetFCntUp>
 800df06:	2800      	cmp	r0, #0
 800df08:	d15c      	bne.n	800dfc4 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800df0a:	9a01      	ldr	r2, [sp, #4]
 800df0c:	4b33      	ldr	r3, [pc, #204]	; (800dfdc <PrepareFrame+0x178>)
 800df0e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800df12:	2100      	movs	r1, #0
 800df14:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800df18:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800df1c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800df20:	4668      	mov	r0, sp
 800df22:	f001 fd73 	bl	800fa0c <LoRaMacCommandsGetSizeSerializedCmds>
 800df26:	2800      	cmp	r0, #0
 800df28:	d14e      	bne.n	800dfc8 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800df2a:	9b00      	ldr	r3, [sp, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d0c1      	beq.n	800deb4 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800df30:	4b2b      	ldr	r3, [pc, #172]	; (800dfe0 <PrepareFrame+0x17c>)
 800df32:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800df36:	f7fe f8bf 	bl	800c0b8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800df3a:	4b28      	ldr	r3, [pc, #160]	; (800dfdc <PrepareFrame+0x178>)
 800df3c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800df40:	b113      	cbz	r3, 800df48 <PrepareFrame+0xe4>
 800df42:	9a00      	ldr	r2, [sp, #0]
 800df44:	2a0f      	cmp	r2, #15
 800df46:	d915      	bls.n	800df74 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800df48:	b113      	cbz	r3, 800df50 <PrepareFrame+0xec>
 800df4a:	9b00      	ldr	r3, [sp, #0]
 800df4c:	2b0f      	cmp	r3, #15
 800df4e:	d821      	bhi.n	800df94 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800df50:	4a24      	ldr	r2, [pc, #144]	; (800dfe4 <PrepareFrame+0x180>)
 800df52:	4669      	mov	r1, sp
 800df54:	f001 fd66 	bl	800fa24 <LoRaMacCommandsSerializeCmds>
 800df58:	2800      	cmp	r0, #0
 800df5a:	d13b      	bne.n	800dfd4 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800df5c:	4b1f      	ldr	r3, [pc, #124]	; (800dfdc <PrepareFrame+0x178>)
 800df5e:	2200      	movs	r2, #0
 800df60:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800df64:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800df68:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800df6c:	9a00      	ldr	r2, [sp, #0]
 800df6e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800df72:	e79f      	b.n	800deb4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800df74:	4a1c      	ldr	r2, [pc, #112]	; (800dfe8 <PrepareFrame+0x184>)
 800df76:	4669      	mov	r1, sp
 800df78:	200f      	movs	r0, #15
 800df7a:	f001 fd53 	bl	800fa24 <LoRaMacCommandsSerializeCmds>
 800df7e:	bb28      	cbnz	r0, 800dfcc <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800df80:	7833      	ldrb	r3, [r6, #0]
 800df82:	9a00      	ldr	r2, [sp, #0]
 800df84:	f362 0303 	bfi	r3, r2, #0, #4
 800df88:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	4b13      	ldr	r3, [pc, #76]	; (800dfdc <PrepareFrame+0x178>)
 800df8e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800df92:	e78f      	b.n	800deb4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800df94:	4a13      	ldr	r2, [pc, #76]	; (800dfe4 <PrepareFrame+0x180>)
 800df96:	4669      	mov	r1, sp
 800df98:	f001 fd44 	bl	800fa24 <LoRaMacCommandsSerializeCmds>
 800df9c:	b1c0      	cbz	r0, 800dfd0 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800df9e:	2013      	movs	r0, #19
 800dfa0:	e788      	b.n	800deb4 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800dfa2:	f1b8 0f00 	cmp.w	r8, #0
 800dfa6:	d017      	beq.n	800dfd8 <PrepareFrame+0x174>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d083      	beq.n	800deb4 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800dfac:	4c0b      	ldr	r4, [pc, #44]	; (800dfdc <PrepareFrame+0x178>)
 800dfae:	b282      	uxth	r2, r0
 800dfb0:	4641      	mov	r1, r8
 800dfb2:	1ce0      	adds	r0, r4, #3
 800dfb4:	f004 fec3 	bl	8012d3e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800dfb8:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	e777      	b.n	800deb4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800dfc4:	2012      	movs	r0, #18
 800dfc6:	e775      	b.n	800deb4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dfc8:	2013      	movs	r0, #19
 800dfca:	e773      	b.n	800deb4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dfcc:	2013      	movs	r0, #19
 800dfce:	e771      	b.n	800deb4 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800dfd0:	200a      	movs	r0, #10
 800dfd2:	e76f      	b.n	800deb4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dfd4:	2013      	movs	r0, #19
 800dfd6:	e76d      	b.n	800deb4 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800dfd8:	2000      	movs	r0, #0
 800dfda:	e76b      	b.n	800deb4 <PrepareFrame+0x50>
 800dfdc:	20000d18 	.word	0x20000d18
 800dfe0:	20008000 	.word	0x20008000
 800dfe4:	200011b4 	.word	0x200011b4
 800dfe8:	20000e30 	.word	0x20000e30

0800dfec <Send>:
{
 800dfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff0:	b08a      	sub	sp, #40	; 0x28
 800dff2:	4617      	mov	r7, r2
 800dff4:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dff6:	4c44      	ldr	r4, [pc, #272]	; (800e108 <Send+0x11c>)
 800dff8:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800dffc:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e000:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e002:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e004:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d07a      	beq.n	800e102 <Send+0x116>
 800e00c:	4605      	mov	r5, r0
 800e00e:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800e010:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800e014:	b90b      	cbnz	r3, 800e01a <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e016:	2100      	movs	r1, #0
 800e018:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800e01a:	2300      	movs	r3, #0
 800e01c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800e020:	4839      	ldr	r0, [pc, #228]	; (800e108 <Send+0x11c>)
 800e022:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800e026:	f361 13c7 	bfi	r3, r1, #7, #1
 800e02a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e02e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800e032:	2b01      	cmp	r3, #1
 800e034:	d052      	beq.n	800e0dc <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800e036:	4b34      	ldr	r3, [pc, #208]	; (800e108 <Send+0x11c>)
 800e038:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e03c:	b12b      	cbz	r3, 800e04a <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800e03e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e042:	f043 0320 	orr.w	r3, r3, #32
 800e046:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800e04a:	2301      	movs	r3, #1
 800e04c:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800e050:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e054:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e056:	492c      	ldr	r1, [pc, #176]	; (800e108 <Send+0x11c>)
 800e058:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800e05c:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e060:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800e064:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e068:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e06c:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e070:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800e074:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800e078:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800e07c:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e080:	460b      	mov	r3, r1
 800e082:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800e086:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800e08a:	aa08      	add	r2, sp, #32
 800e08c:	9200      	str	r2, [sp, #0]
 800e08e:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800e092:	3139      	adds	r1, #57	; 0x39
 800e094:	a803      	add	r0, sp, #12
 800e096:	f001 faf5 	bl	800f684 <LoRaMacAdrCalcNext>
 800e09a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e09e:	f360 1386 	bfi	r3, r0, #6, #1
 800e0a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800e0a6:	f8cd 8000 	str.w	r8, [sp]
 800e0aa:	463b      	mov	r3, r7
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	a909      	add	r1, sp, #36	; 0x24
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	f7ff fed7 	bl	800de64 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	b108      	cbz	r0, 800e0be <Send+0xd2>
 800e0ba:	280a      	cmp	r0, #10
 800e0bc:	d104      	bne.n	800e0c8 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800e0be:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800e0c2:	f7ff fa01 	bl	800d4c8 <ScheduleTx>
 800e0c6:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800e0c8:	b17c      	cbz	r4, 800e0ea <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800e0ca:	4b0f      	ldr	r3, [pc, #60]	; (800e108 <Send+0x11c>)
 800e0cc:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800e0d0:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	b00a      	add	sp, #40	; 0x28
 800e0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800e0dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e0e0:	f043 0310 	orr.w	r3, r3, #16
 800e0e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e0e8:	e7a5      	b.n	800e036 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800e0ea:	4b07      	ldr	r3, [pc, #28]	; (800e108 <Send+0x11c>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800e0f2:	9a08      	ldr	r2, [sp, #32]
 800e0f4:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800e0f6:	f001 fc57 	bl	800f9a8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d0ea      	beq.n	800e0d4 <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e0fe:	2413      	movs	r4, #19
 800e100:	e7e8      	b.n	800e0d4 <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800e102:	2407      	movs	r4, #7
 800e104:	e7e6      	b.n	800e0d4 <Send+0xe8>
 800e106:	bf00      	nop
 800e108:	20008000 	.word	0x20008000

0800e10c <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e10c:	4b0c      	ldr	r3, [pc, #48]	; (800e140 <LoRaMacIsBusy+0x34>)
 800e10e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e112:	2b01      	cmp	r3, #1
 800e114:	d00c      	beq.n	800e130 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800e116:	4a0b      	ldr	r2, [pc, #44]	; (800e144 <LoRaMacIsBusy+0x38>)
 800e118:	7812      	ldrb	r2, [r2, #0]
 800e11a:	f012 0f01 	tst.w	r2, #1
 800e11e:	d109      	bne.n	800e134 <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e120:	b953      	cbnz	r3, 800e138 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e122:	4b07      	ldr	r3, [pc, #28]	; (800e140 <LoRaMacIsBusy+0x34>)
 800e124:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d007      	beq.n	800e13c <LoRaMacIsBusy+0x30>
    return true;
 800e12c:	2001      	movs	r0, #1
 800e12e:	4770      	bx	lr
        return false;
 800e130:	2000      	movs	r0, #0
 800e132:	4770      	bx	lr
        return true;
 800e134:	2001      	movs	r0, #1
 800e136:	4770      	bx	lr
    return true;
 800e138:	2001      	movs	r0, #1
 800e13a:	4770      	bx	lr
        return false;
 800e13c:	2000      	movs	r0, #0
}
 800e13e:	4770      	bx	lr
 800e140:	20000d18 	.word	0x20000d18
 800e144:	20000d14 	.word	0x20000d14

0800e148 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e148:	4b04      	ldr	r3, [pc, #16]	; (800e15c <LoRaMacIsStopped+0x14>)
 800e14a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d001      	beq.n	800e156 <LoRaMacIsStopped+0xe>
    return false;
 800e152:	2000      	movs	r0, #0
 800e154:	4770      	bx	lr
        return true;
 800e156:	2001      	movs	r0, #1
}
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	20000d18 	.word	0x20000d18

0800e160 <LoRaMacProcess>:
{
 800e160:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800e162:	f7ff f801 	bl	800d168 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e166:	f001 fb2f 	bl	800f7c8 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e16a:	4b1f      	ldr	r3, [pc, #124]	; (800e1e8 <LoRaMacProcess+0x88>)
 800e16c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800e170:	f013 0f10 	tst.w	r3, #16
 800e174:	d10d      	bne.n	800e192 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800e176:	f7fd fe69 	bl	800be4c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e17a:	4b1b      	ldr	r3, [pc, #108]	; (800e1e8 <LoRaMacProcess+0x88>)
 800e17c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e180:	2b02      	cmp	r3, #2
 800e182:	d022      	beq.n	800e1ca <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800e184:	4b18      	ldr	r3, [pc, #96]	; (800e1e8 <LoRaMacProcess+0x88>)
 800e186:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800e18a:	f013 0f20 	tst.w	r3, #32
 800e18e:	d11f      	bne.n	800e1d0 <LoRaMacProcess+0x70>
}
 800e190:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e192:	2000      	movs	r0, #0
 800e194:	f7fd fe54 	bl	800be40 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e198:	f7fd fe90 	bl	800bebc <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800e19c:	f7fd ff80 	bl	800c0a0 <IsRequestPending>
 800e1a0:	b110      	cbz	r0, 800e1a8 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e1a2:	f7fe f86f 	bl	800c284 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800e1a6:	b918      	cbnz	r0, 800e1b0 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800e1a8:	f7ff f820 	bl	800d1ec <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e1ac:	f7ff fa42 	bl	800d634 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800e1b0:	f7ff fa7c 	bl	800d6ac <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e1b4:	2001      	movs	r0, #1
 800e1b6:	f7fd fe43 	bl	800be40 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e1ba:	4a0b      	ldr	r2, [pc, #44]	; (800e1e8 <LoRaMacProcess+0x88>)
 800e1bc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e1c0:	f043 0320 	orr.w	r3, r3, #32
 800e1c4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800e1c8:	e7d5      	b.n	800e176 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800e1ca:	f7ff fab9 	bl	800d740 <OpenContinuousRxCWindow>
 800e1ce:	e7d9      	b.n	800e184 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800e1d0:	4b05      	ldr	r3, [pc, #20]	; (800e1e8 <LoRaMacProcess+0x88>)
 800e1d2:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800e1d6:	f36f 1245 	bfc	r2, #5, #1
 800e1da:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800e1de:	4803      	ldr	r0, [pc, #12]	; (800e1ec <LoRaMacProcess+0x8c>)
 800e1e0:	f7ff fb5e 	bl	800d8a0 <LoRaMacHandleNvm>
}
 800e1e4:	e7d4      	b.n	800e190 <LoRaMacProcess+0x30>
 800e1e6:	bf00      	nop
 800e1e8:	20000d18 	.word	0x20000d18
 800e1ec:	20008000 	.word	0x20008000

0800e1f0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f4:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	f000 81a3 	beq.w	800e542 <LoRaMacInitialization+0x352>
 800e1fc:	4688      	mov	r8, r1
 800e1fe:	4691      	mov	r9, r2
 800e200:	4607      	mov	r7, r0
 800e202:	2900      	cmp	r1, #0
 800e204:	f000 819f 	beq.w	800e546 <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e208:	6803      	ldr	r3, [r0, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f000 819d 	beq.w	800e54a <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800e210:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 819b 	beq.w	800e54e <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e218:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f000 8199 	beq.w	800e552 <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800e220:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 8197 	beq.w	800e556 <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800e228:	4610      	mov	r0, r2
 800e22a:	f002 fb35 	bl	8010898 <RegionIsActive>
 800e22e:	2800      	cmp	r0, #0
 800e230:	f000 8193 	beq.w	800e55a <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800e234:	4638      	mov	r0, r7
 800e236:	f001 fc89 	bl	800fb4c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800e23a:	4ccb      	ldr	r4, [pc, #812]	; (800e568 <LoRaMacInitialization+0x378>)
 800e23c:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800e240:	2100      	movs	r1, #0
 800e242:	4620      	mov	r0, r4
 800e244:	f004 fd93 	bl	8012d6e <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800e248:	4ec8      	ldr	r6, [pc, #800]	; (800e56c <LoRaMacInitialization+0x37c>)
 800e24a:	f240 521c 	movw	r2, #1308	; 0x51c
 800e24e:	2100      	movs	r1, #0
 800e250:	4630      	mov	r0, r6
 800e252:	f004 fd8c 	bl	8012d6e <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800e256:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800e25a:	2500      	movs	r5, #0
 800e25c:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800e260:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800e264:	4bc2      	ldr	r3, [pc, #776]	; (800e570 <LoRaMacInitialization+0x380>)
 800e266:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800e26a:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800e26e:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800e272:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800e274:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800e278:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800e27a:	4bbe      	ldr	r3, [pc, #760]	; (800e574 <LoRaMacInitialization+0x384>)
 800e27c:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e27e:	a905      	add	r1, sp, #20
 800e280:	4648      	mov	r0, r9
 800e282:	f002 fb28 	bl	80108d6 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e286:	230f      	movs	r3, #15
 800e288:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e28c:	a90a      	add	r1, sp, #40	; 0x28
 800e28e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e292:	f002 fb07 	bl	80108a4 <RegionGetPhyParam>
 800e296:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800e298:	1b40      	subs	r0, r0, r5
 800e29a:	bf18      	it	ne
 800e29c:	2001      	movne	r0, #1
 800e29e:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800e2a2:	f04f 0a0a 	mov.w	sl, #10
 800e2a6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e2aa:	a90a      	add	r1, sp, #40	; 0x28
 800e2ac:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e2b0:	f002 faf8 	bl	80108a4 <RegionGetPhyParam>
 800e2b4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800e2b6:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800e2ba:	f04f 0906 	mov.w	r9, #6
 800e2be:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e2c2:	a90a      	add	r1, sp, #40	; 0x28
 800e2c4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e2c8:	f002 faec 	bl	80108a4 <RegionGetPhyParam>
 800e2cc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800e2ce:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800e2d2:	2310      	movs	r3, #16
 800e2d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e2d8:	a90a      	add	r1, sp, #40	; 0x28
 800e2da:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e2de:	f002 fae1 	bl	80108a4 <RegionGetPhyParam>
 800e2e2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800e2e4:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800e2e8:	2311      	movs	r3, #17
 800e2ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e2ee:	a90a      	add	r1, sp, #40	; 0x28
 800e2f0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e2f4:	f002 fad6 	bl	80108a4 <RegionGetPhyParam>
 800e2f8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800e2fa:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800e2fe:	2312      	movs	r3, #18
 800e300:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e304:	a90a      	add	r1, sp, #40	; 0x28
 800e306:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e30a:	f002 facb 	bl	80108a4 <RegionGetPhyParam>
 800e30e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800e310:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800e314:	2313      	movs	r3, #19
 800e316:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e31a:	a90a      	add	r1, sp, #40	; 0x28
 800e31c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e320:	f002 fac0 	bl	80108a4 <RegionGetPhyParam>
 800e324:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800e326:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800e32a:	2314      	movs	r3, #20
 800e32c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e330:	a90a      	add	r1, sp, #40	; 0x28
 800e332:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e336:	f002 fab5 	bl	80108a4 <RegionGetPhyParam>
 800e33a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800e33c:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800e340:	2316      	movs	r3, #22
 800e342:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e346:	a90a      	add	r1, sp, #40	; 0x28
 800e348:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e34c:	f002 faaa 	bl	80108a4 <RegionGetPhyParam>
 800e350:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800e352:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800e356:	2317      	movs	r3, #23
 800e358:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e35c:	a90a      	add	r1, sp, #40	; 0x28
 800e35e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e362:	f002 fa9f 	bl	80108a4 <RegionGetPhyParam>
 800e366:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800e368:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800e36c:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800e370:	2318      	movs	r3, #24
 800e372:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e376:	a90a      	add	r1, sp, #40	; 0x28
 800e378:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e37c:	f002 fa92 	bl	80108a4 <RegionGetPhyParam>
 800e380:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800e382:	b2c0      	uxtb	r0, r0
 800e384:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800e388:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800e38c:	231d      	movs	r3, #29
 800e38e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e392:	a90a      	add	r1, sp, #40	; 0x28
 800e394:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e398:	f002 fa84 	bl	80108a4 <RegionGetPhyParam>
 800e39c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800e39e:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800e3a2:	231e      	movs	r3, #30
 800e3a4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e3a8:	a90a      	add	r1, sp, #40	; 0x28
 800e3aa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e3ae:	f002 fa79 	bl	80108a4 <RegionGetPhyParam>
 800e3b2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800e3b4:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800e3b8:	231f      	movs	r3, #31
 800e3ba:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e3be:	a90a      	add	r1, sp, #40	; 0x28
 800e3c0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e3c4:	f002 fa6e 	bl	80108a4 <RegionGetPhyParam>
 800e3c8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800e3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3cc:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800e3d0:	2320      	movs	r3, #32
 800e3d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e3d6:	a90a      	add	r1, sp, #40	; 0x28
 800e3d8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e3dc:	f002 fa62 	bl	80108a4 <RegionGetPhyParam>
 800e3e0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800e3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800e3e8:	230b      	movs	r3, #11
 800e3ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e3ee:	a90a      	add	r1, sp, #40	; 0x28
 800e3f0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e3f4:	f002 fa56 	bl	80108a4 <RegionGetPhyParam>
 800e3f8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800e3fa:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800e3fe:	230c      	movs	r3, #12
 800e400:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e404:	a90a      	add	r1, sp, #40	; 0x28
 800e406:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e40a:	f002 fa4b 	bl	80108a4 <RegionGetPhyParam>
 800e40e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800e410:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800e414:	f04f 0b01 	mov.w	fp, #1
 800e418:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800e41c:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800e420:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800e424:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800e428:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800e42c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800e430:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800e432:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800e436:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800e438:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800e43c:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800e43e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800e442:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800e444:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800e448:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800e44a:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800e44e:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800e452:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 800e456:	4628      	mov	r0, r5
 800e458:	f7ff fb82 	bl	800db60 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800e45c:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800e460:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800e464:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800e468:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800e46c:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e46e:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800e470:	9500      	str	r5, [sp, #0]
 800e472:	4b41      	ldr	r3, [pc, #260]	; (800e578 <LoRaMacInitialization+0x388>)
 800e474:	462a      	mov	r2, r5
 800e476:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e47a:	f506 705a 	add.w	r0, r6, #872	; 0x368
 800e47e:	f006 fe25 	bl	80150cc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800e482:	9500      	str	r5, [sp, #0]
 800e484:	4b3d      	ldr	r3, [pc, #244]	; (800e57c <LoRaMacInitialization+0x38c>)
 800e486:	462a      	mov	r2, r5
 800e488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e48c:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800e490:	f006 fe1c 	bl	80150cc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800e494:	9500      	str	r5, [sp, #0]
 800e496:	4b3a      	ldr	r3, [pc, #232]	; (800e580 <LoRaMacInitialization+0x390>)
 800e498:	462a      	mov	r2, r5
 800e49a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e49e:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800e4a2:	f006 fe13 	bl	80150cc <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800e4a6:	9500      	str	r5, [sp, #0]
 800e4a8:	4b36      	ldr	r3, [pc, #216]	; (800e584 <LoRaMacInitialization+0x394>)
 800e4aa:	462a      	mov	r2, r5
 800e4ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e4b0:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800e4b4:	f006 fe0a 	bl	80150cc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800e4b8:	af02      	add	r7, sp, #8
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	f006 fd98 	bl	8014ff0 <SysTimeGetMcuTime>
 800e4c0:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800e4c4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e4c8:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800e4cc:	4b2e      	ldr	r3, [pc, #184]	; (800e588 <LoRaMacInitialization+0x398>)
 800e4ce:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800e4d0:	4b2e      	ldr	r3, [pc, #184]	; (800e58c <LoRaMacInitialization+0x39c>)
 800e4d2:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800e4d6:	4b2e      	ldr	r3, [pc, #184]	; (800e590 <LoRaMacInitialization+0x3a0>)
 800e4d8:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800e4dc:	4b2d      	ldr	r3, [pc, #180]	; (800e594 <LoRaMacInitialization+0x3a4>)
 800e4de:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e4e2:	4b2d      	ldr	r3, [pc, #180]	; (800e598 <LoRaMacInitialization+0x3a8>)
 800e4e4:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e4e8:	4b2c      	ldr	r3, [pc, #176]	; (800e59c <LoRaMacInitialization+0x3ac>)
 800e4ea:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800e4ee:	4b2c      	ldr	r3, [pc, #176]	; (800e5a0 <LoRaMacInitialization+0x3b0>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 800e4f6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800e4f8:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800e4fc:	f004 f94c 	bl	8012798 <SecureElementInit>
 800e500:	bb80      	cbnz	r0, 800e564 <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800e502:	4620      	mov	r0, r4
 800e504:	f001 fe00 	bl	8010108 <LoRaMacCryptoInit>
 800e508:	2800      	cmp	r0, #0
 800e50a:	d14b      	bne.n	800e5a4 <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800e50c:	f001 f9e0 	bl	800f8d0 <LoRaMacCommandsInit>
 800e510:	2800      	cmp	r0, #0
 800e512:	d149      	bne.n	800e5a8 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800e514:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800e518:	f001 fe48 	bl	80101ac <LoRaMacCryptoSetMulticastReference>
 800e51c:	4604      	mov	r4, r0
 800e51e:	2800      	cmp	r0, #0
 800e520:	d144      	bne.n	800e5ac <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800e522:	4d1f      	ldr	r5, [pc, #124]	; (800e5a0 <LoRaMacInitialization+0x3b0>)
 800e524:	696b      	ldr	r3, [r5, #20]
 800e526:	4798      	blx	r3
 800e528:	f004 fbf6 	bl	8012d18 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e52c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800e52e:	4a0e      	ldr	r2, [pc, #56]	; (800e568 <LoRaMacInitialization+0x378>)
 800e530:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800e534:	4798      	blx	r3
    Radio.Sleep( );
 800e536:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e538:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e53a:	4658      	mov	r0, fp
 800e53c:	f7fd fc80 	bl	800be40 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800e540:	e00c      	b.n	800e55c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e542:	2403      	movs	r4, #3
 800e544:	e00a      	b.n	800e55c <LoRaMacInitialization+0x36c>
 800e546:	2403      	movs	r4, #3
 800e548:	e008      	b.n	800e55c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e54a:	2403      	movs	r4, #3
 800e54c:	e006      	b.n	800e55c <LoRaMacInitialization+0x36c>
 800e54e:	2403      	movs	r4, #3
 800e550:	e004      	b.n	800e55c <LoRaMacInitialization+0x36c>
 800e552:	2403      	movs	r4, #3
 800e554:	e002      	b.n	800e55c <LoRaMacInitialization+0x36c>
 800e556:	2403      	movs	r4, #3
 800e558:	e000      	b.n	800e55c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800e55a:	2409      	movs	r4, #9
}
 800e55c:	4620      	mov	r0, r4
 800e55e:	b00d      	add	sp, #52	; 0x34
 800e560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e564:	2411      	movs	r4, #17
 800e566:	e7f9      	b.n	800e55c <LoRaMacInitialization+0x36c>
 800e568:	20008000 	.word	0x20008000
 800e56c:	20000d18 	.word	0x20000d18
 800e570:	01000400 	.word	0x01000400
 800e574:	20001234 	.word	0x20001234
 800e578:	0800d5d1 	.word	0x0800d5d1
 800e57c:	0800d851 	.word	0x0800d851
 800e580:	0800d7f9 	.word	0x0800d7f9
 800e584:	0800c221 	.word	0x0800c221
 800e588:	20000d14 	.word	0x20000d14
 800e58c:	0800db15 	.word	0x0800db15
 800e590:	0800dac5 	.word	0x0800dac5
 800e594:	0800c071 	.word	0x0800c071
 800e598:	0800da9d 	.word	0x0800da9d
 800e59c:	0800da75 	.word	0x0800da75
 800e5a0:	0801af08 	.word	0x0801af08
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e5a4:	2411      	movs	r4, #17
 800e5a6:	e7d9      	b.n	800e55c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e5a8:	2413      	movs	r4, #19
 800e5aa:	e7d7      	b.n	800e55c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e5ac:	2411      	movs	r4, #17
 800e5ae:	e7d5      	b.n	800e55c <LoRaMacInitialization+0x36c>

0800e5b0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800e5b0:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800e5b2:	2400      	movs	r4, #0
 800e5b4:	4b03      	ldr	r3, [pc, #12]	; (800e5c4 <LoRaMacStart+0x14>)
 800e5b6:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800e5ba:	f7fd fc2d 	bl	800be18 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800e5be:	4620      	mov	r0, r4
 800e5c0:	bd10      	pop	{r4, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20000d18 	.word	0x20000d18

0800e5c8 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800e5c8:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800e5ca:	f7ff fd9f 	bl	800e10c <LoRaMacIsBusy>
 800e5ce:	b130      	cbz	r0, 800e5de <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800e5d0:	4b0b      	ldr	r3, [pc, #44]	; (800e600 <LoRaMacStop+0x38>)
 800e5d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d010      	beq.n	800e5fc <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800e5da:	2001      	movs	r0, #1
}
 800e5dc:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e5de:	4b09      	ldr	r3, [pc, #36]	; (800e604 <LoRaMacStop+0x3c>)
 800e5e0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d005      	beq.n	800e5f4 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800e5e8:	4b05      	ldr	r3, [pc, #20]	; (800e600 <LoRaMacStop+0x38>)
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	e7f3      	b.n	800e5dc <LoRaMacStop+0x14>
            Radio.Sleep( );
 800e5f4:	4b04      	ldr	r3, [pc, #16]	; (800e608 <LoRaMacStop+0x40>)
 800e5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f8:	4798      	blx	r3
 800e5fa:	e7f5      	b.n	800e5e8 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	e7ed      	b.n	800e5dc <LoRaMacStop+0x14>
 800e600:	20000d18 	.word	0x20000d18
 800e604:	20008000 	.word	0x20008000
 800e608:	0801af08 	.word	0x0801af08

0800e60c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800e60c:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800e60e:	4c14      	ldr	r4, [pc, #80]	; (800e660 <LoRaMacHalt+0x54>)
 800e610:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800e614:	f006 fdb8 	bl	8015188 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800e618:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800e61c:	f006 fdb4 	bl	8015188 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800e620:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800e624:	f006 fdb0 	bl	8015188 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800e628:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800e62c:	f006 fdac 	bl	8015188 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800e630:	f001 f8b6 	bl	800f7a0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800e634:	4b0b      	ldr	r3, [pc, #44]	; (800e664 <LoRaMacHalt+0x58>)
 800e636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e638:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800e63a:	2500      	movs	r5, #0
 800e63c:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800e640:	4e09      	ldr	r6, [pc, #36]	; (800e668 <LoRaMacHalt+0x5c>)
 800e642:	4630      	mov	r0, r6
 800e644:	f7ff f92c 	bl	800d8a0 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800e648:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800e64c:	4631      	mov	r1, r6
 800e64e:	4807      	ldr	r0, [pc, #28]	; (800e66c <LoRaMacHalt+0x60>)
 800e650:	f004 fb75 	bl	8012d3e <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800e654:	2301      	movs	r3, #1
 800e656:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800e65a:	4628      	mov	r0, r5
 800e65c:	bd70      	pop	{r4, r5, r6, pc}
 800e65e:	bf00      	nop
 800e660:	20000d18 	.word	0x20000d18
 800e664:	0801af08 	.word	0x0801af08
 800e668:	20008000 	.word	0x20008000
 800e66c:	200085cc 	.word	0x200085cc

0800e670 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e670:	b530      	push	{r4, r5, lr}
 800e672:	b08b      	sub	sp, #44	; 0x2c
 800e674:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e676:	4b31      	ldr	r3, [pc, #196]	; (800e73c <LoRaMacQueryTxPossible+0xcc>)
 800e678:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e67a:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e67c:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800e680:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e684:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800e688:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800e68c:	4b2c      	ldr	r3, [pc, #176]	; (800e740 <LoRaMacQueryTxPossible+0xd0>)
 800e68e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800e692:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800e696:	2300      	movs	r3, #0
 800e698:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800e69a:	2900      	cmp	r1, #0
 800e69c:	d048      	beq.n	800e730 <LoRaMacQueryTxPossible+0xc0>
 800e69e:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800e6a0:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e6a4:	4b25      	ldr	r3, [pc, #148]	; (800e73c <LoRaMacQueryTxPossible+0xcc>)
 800e6a6:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800e6aa:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e6ae:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e6b0:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 800e6b4:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e6b8:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 800e6bc:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e6c0:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800e6c4:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e6c8:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800e6cc:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800e6d0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e6d4:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e6d8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800e6dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e6e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800e6e4:	ab04      	add	r3, sp, #16
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	f10d 030d 	add.w	r3, sp, #13
 800e6ec:	f10d 020e 	add.w	r2, sp, #14
 800e6f0:	f10d 010f 	add.w	r1, sp, #15
 800e6f4:	a805      	add	r0, sp, #20
 800e6f6:	f000 ffc5 	bl	800f684 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e6fa:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800e6fe:	f7fd fcdb 	bl	800c0b8 <GetMaxAppPayloadWithoutFOptsLength>
 800e702:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e704:	a802      	add	r0, sp, #8
 800e706:	f001 f981 	bl	800fa0c <LoRaMacCommandsGetSizeSerializedCmds>
 800e70a:	b998      	cbnz	r0, 800e734 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800e70c:	9b02      	ldr	r3, [sp, #8]
 800e70e:	2b0f      	cmp	r3, #15
 800e710:	d80a      	bhi.n	800e728 <LoRaMacQueryTxPossible+0xb8>
 800e712:	786a      	ldrb	r2, [r5, #1]
 800e714:	4293      	cmp	r3, r2
 800e716:	d807      	bhi.n	800e728 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800e718:	1ad3      	subs	r3, r2, r3
 800e71a:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800e71c:	9b02      	ldr	r3, [sp, #8]
 800e71e:	441c      	add	r4, r3
 800e720:	42a2      	cmp	r2, r4
 800e722:	d309      	bcc.n	800e738 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800e724:	b00b      	add	sp, #44	; 0x2c
 800e726:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800e728:	2300      	movs	r3, #0
 800e72a:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800e72c:	2008      	movs	r0, #8
 800e72e:	e7f9      	b.n	800e724 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e730:	2003      	movs	r0, #3
 800e732:	e7f7      	b.n	800e724 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e734:	2013      	movs	r0, #19
 800e736:	e7f5      	b.n	800e724 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800e738:	2008      	movs	r0, #8
 800e73a:	e7f3      	b.n	800e724 <LoRaMacQueryTxPossible+0xb4>
 800e73c:	20008000 	.word	0x20008000
 800e740:	20000d18 	.word	0x20000d18

0800e744 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800e744:	2800      	cmp	r0, #0
 800e746:	f000 815f 	beq.w	800ea08 <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800e74a:	b510      	push	{r4, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800e750:	7800      	ldrb	r0, [r0, #0]
 800e752:	2841      	cmp	r0, #65	; 0x41
 800e754:	f200 8154 	bhi.w	800ea00 <LoRaMacMibGetRequestConfirm+0x2bc>
 800e758:	e8df f010 	tbh	[pc, r0, lsl #1]
 800e75c:	00470042 	.word	0x00470042
 800e760:	0052004d 	.word	0x0052004d
 800e764:	005d0057 	.word	0x005d0057
 800e768:	01520063 	.word	0x01520063
 800e76c:	01520152 	.word	0x01520152
 800e770:	01520152 	.word	0x01520152
 800e774:	01520152 	.word	0x01520152
 800e778:	006b0152 	.word	0x006b0152
 800e77c:	00770071 	.word	0x00770071
 800e780:	008c0084 	.word	0x008c0084
 800e784:	009c0094 	.word	0x009c0094
 800e788:	00a400b1 	.word	0x00a400b1
 800e78c:	00c400be 	.word	0x00c400be
 800e790:	00ce00c9 	.word	0x00ce00c9
 800e794:	00d800d3 	.word	0x00d800d3
 800e798:	00ee00dd 	.word	0x00ee00dd
 800e79c:	010000f4 	.word	0x010000f4
 800e7a0:	010600fa 	.word	0x010600fa
 800e7a4:	0111010b 	.word	0x0111010b
 800e7a8:	0117011f 	.word	0x0117011f
 800e7ac:	0152011b 	.word	0x0152011b
 800e7b0:	01520125 	.word	0x01520125
 800e7b4:	01520152 	.word	0x01520152
 800e7b8:	01520152 	.word	0x01520152
 800e7bc:	01520152 	.word	0x01520152
 800e7c0:	01520152 	.word	0x01520152
 800e7c4:	01520152 	.word	0x01520152
 800e7c8:	01520152 	.word	0x01520152
 800e7cc:	01520152 	.word	0x01520152
 800e7d0:	0134012e 	.word	0x0134012e
 800e7d4:	0140013a 	.word	0x0140013a
 800e7d8:	014c0146 	.word	0x014c0146
 800e7dc:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800e7e0:	4b8c      	ldr	r3, [pc, #560]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e7e2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e7e6:	7123      	strb	r3, [r4, #4]
            break;
 800e7e8:	e111      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e7ea:	4b8a      	ldr	r3, [pc, #552]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e7ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e7f0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e7f2:	2000      	movs	r0, #0
            break;
 800e7f4:	e10b      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800e7f6:	6860      	ldr	r0, [r4, #4]
 800e7f8:	f004 f966 	bl	8012ac8 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e7fc:	2000      	movs	r0, #0
            break;
 800e7fe:	e106      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800e800:	6860      	ldr	r0, [r4, #4]
 800e802:	f004 f97f 	bl	8012b04 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e806:	2000      	movs	r0, #0
            break;
 800e808:	e101      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800e80a:	4b82      	ldr	r3, [pc, #520]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e80c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800e810:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e812:	2000      	movs	r0, #0
            break;
 800e814:	e0fb      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800e816:	4b7f      	ldr	r3, [pc, #508]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e81c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e81e:	2000      	movs	r0, #0
            break;
 800e820:	e0f5      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800e822:	1d21      	adds	r1, r4, #4
 800e824:	4b7b      	ldr	r3, [pc, #492]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e826:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800e82a:	f004 f987 	bl	8012b3c <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e82e:	2000      	movs	r0, #0
            break;
 800e830:	e0ed      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800e832:	4b78      	ldr	r3, [pc, #480]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e834:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800e838:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e83a:	2000      	movs	r0, #0
            break;
 800e83c:	e0e7      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e83e:	4b75      	ldr	r3, [pc, #468]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e840:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e844:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e846:	2000      	movs	r0, #0
            break;
 800e848:	e0e1      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800e84a:	231c      	movs	r3, #28
 800e84c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e850:	a902      	add	r1, sp, #8
 800e852:	4b70      	ldr	r3, [pc, #448]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e854:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e858:	f002 f824 	bl	80108a4 <RegionGetPhyParam>
 800e85c:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800e85e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e860:	2000      	movs	r0, #0
            break;
 800e862:	e0d4      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e864:	3404      	adds	r4, #4
 800e866:	4b6c      	ldr	r3, [pc, #432]	; (800ea18 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800e868:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e86c:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e870:	2000      	movs	r0, #0
            break;
 800e872:	e0cc      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800e874:	3404      	adds	r4, #4
 800e876:	4b69      	ldr	r3, [pc, #420]	; (800ea1c <LoRaMacMibGetRequestConfirm+0x2d8>)
 800e878:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e87c:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e880:	2000      	movs	r0, #0
            break;
 800e882:	e0c4      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800e884:	3404      	adds	r4, #4
 800e886:	4b66      	ldr	r3, [pc, #408]	; (800ea20 <LoRaMacMibGetRequestConfirm+0x2dc>)
 800e888:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e88c:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e890:	2000      	movs	r0, #0
            break;
 800e892:	e0bc      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800e894:	3404      	adds	r4, #4
 800e896:	4b63      	ldr	r3, [pc, #396]	; (800ea24 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800e898:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e89c:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8a0:	2000      	movs	r0, #0
            break;
 800e8a2:	e0b4      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800e8a4:	231a      	movs	r3, #26
 800e8a6:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e8aa:	a902      	add	r1, sp, #8
 800e8ac:	4b59      	ldr	r3, [pc, #356]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e8ae:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e8b2:	f001 fff7 	bl	80108a4 <RegionGetPhyParam>
 800e8b6:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800e8b8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8ba:	2000      	movs	r0, #0
            break;
 800e8bc:	e0a7      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800e8be:	2319      	movs	r3, #25
 800e8c0:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e8c4:	a902      	add	r1, sp, #8
 800e8c6:	4b53      	ldr	r3, [pc, #332]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e8c8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e8cc:	f001 ffea 	bl	80108a4 <RegionGetPhyParam>
 800e8d0:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800e8d2:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8d4:	2000      	movs	r0, #0
            break;
 800e8d6:	e09a      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e8d8:	4b4e      	ldr	r3, [pc, #312]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e8da:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e8de:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8e0:	2000      	movs	r0, #0
            break;
 800e8e2:	e094      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800e8e4:	4b4b      	ldr	r3, [pc, #300]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e8e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8e8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8ea:	2000      	movs	r0, #0
            break;
 800e8ec:	e08f      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800e8ee:	4b49      	ldr	r3, [pc, #292]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8f2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8f4:	2000      	movs	r0, #0
            break;
 800e8f6:	e08a      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800e8f8:	4b46      	ldr	r3, [pc, #280]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e8fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8fc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8fe:	2000      	movs	r0, #0
            break;
 800e900:	e085      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800e902:	4b44      	ldr	r3, [pc, #272]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e906:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e908:	2000      	movs	r0, #0
            break;
 800e90a:	e080      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800e90c:	4b41      	ldr	r3, [pc, #260]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e910:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e912:	2000      	movs	r0, #0
            break;
 800e914:	e07b      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800e916:	2302      	movs	r3, #2
 800e918:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e91c:	4b3d      	ldr	r3, [pc, #244]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e91e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e922:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e926:	a902      	add	r1, sp, #8
 800e928:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e92c:	f001 ffba 	bl	80108a4 <RegionGetPhyParam>
 800e930:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800e932:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e934:	2000      	movs	r0, #0
            break;
 800e936:	e06a      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e938:	4b36      	ldr	r3, [pc, #216]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e93a:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800e93e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e940:	2000      	movs	r0, #0
            break;
 800e942:	e064      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e944:	4b33      	ldr	r3, [pc, #204]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e946:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e94a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e94c:	2000      	movs	r0, #0
            break;
 800e94e:	e05e      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e950:	4b30      	ldr	r3, [pc, #192]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e952:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800e956:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e958:	2000      	movs	r0, #0
            break;
 800e95a:	e058      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e95c:	4b2d      	ldr	r3, [pc, #180]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e95e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e962:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e964:	2000      	movs	r0, #0
            break;
 800e966:	e052      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800e968:	4b2a      	ldr	r3, [pc, #168]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e96a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e96c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e96e:	2000      	movs	r0, #0
            break;
 800e970:	e04d      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800e972:	4b28      	ldr	r3, [pc, #160]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e974:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e978:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e97a:	2000      	movs	r0, #0
            break;
 800e97c:	e047      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e97e:	4b25      	ldr	r3, [pc, #148]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e984:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e986:	2000      	movs	r0, #0
            break;
 800e988:	e041      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800e98a:	4b22      	ldr	r3, [pc, #136]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e98c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e98e:	2000      	movs	r0, #0
            break;
 800e990:	e03d      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800e992:	4b25      	ldr	r3, [pc, #148]	; (800ea28 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800e994:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e996:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800e998:	e039      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800e99a:	4b1e      	ldr	r3, [pc, #120]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e99c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e9a0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9a2:	2000      	movs	r0, #0
            break;
 800e9a4:	e033      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800e9a6:	4b1b      	ldr	r3, [pc, #108]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e9a8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800e9ac:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800e9ae:	f002 f833 	bl	8010a18 <RegionGetVersion>
 800e9b2:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9b4:	2000      	movs	r0, #0
            break;
 800e9b6:	e02a      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e9b8:	4b16      	ldr	r3, [pc, #88]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9be:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9c0:	2000      	movs	r0, #0
            break;
 800e9c2:	e024      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800e9c4:	4b13      	ldr	r3, [pc, #76]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e9c6:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800e9ca:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9cc:	2000      	movs	r0, #0
            break;
 800e9ce:	e01e      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e9d0:	4b10      	ldr	r3, [pc, #64]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e9d2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800e9d6:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9d8:	2000      	movs	r0, #0
            break;
 800e9da:	e018      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e9dc:	4b0d      	ldr	r3, [pc, #52]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e9de:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800e9e2:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9e4:	2000      	movs	r0, #0
            break;
 800e9e6:	e012      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800e9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e9ea:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800e9ee:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9f0:	2000      	movs	r0, #0
            break;
 800e9f2:	e00c      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800e9f4:	4b07      	ldr	r3, [pc, #28]	; (800ea14 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e9f6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800e9fa:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9fc:	2000      	movs	r0, #0
            break;
 800e9fe:	e006      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ea00:	4620      	mov	r0, r4
 800ea02:	f000 fed1 	bl	800f7a8 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800ea06:	e002      	b.n	800ea0e <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ea08:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800ea0a:	4770      	bx	lr
    switch( mibGet->Type )
 800ea0c:	2018      	movs	r0, #24
}
 800ea0e:	b004      	add	sp, #16
 800ea10:	bd10      	pop	{r4, pc}
 800ea12:	bf00      	nop
 800ea14:	20008000 	.word	0x20008000
 800ea18:	2000806c 	.word	0x2000806c
 800ea1c:	200080b4 	.word	0x200080b4
 800ea20:	20008074 	.word	0x20008074
 800ea24:	200080bc 	.word	0x200080bc
 800ea28:	200085cc 	.word	0x200085cc

0800ea2c <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	f000 827f 	beq.w	800ef30 <LoRaMacMibSetRequestConfirm+0x504>
{
 800ea32:	b530      	push	{r4, r5, lr}
 800ea34:	b085      	sub	sp, #20
 800ea36:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ea38:	4b9b      	ldr	r3, [pc, #620]	; (800eca8 <LoRaMacMibSetRequestConfirm+0x27c>)
 800ea3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ea3e:	f013 0f02 	tst.w	r3, #2
 800ea42:	f040 8277 	bne.w	800ef34 <LoRaMacMibSetRequestConfirm+0x508>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800ea46:	7805      	ldrb	r5, [r0, #0]
 800ea48:	2d41      	cmp	r5, #65	; 0x41
 800ea4a:	f200 826e 	bhi.w	800ef2a <LoRaMacMibSetRequestConfirm+0x4fe>
 800ea4e:	e8df f015 	tbh	[pc, r5, lsl #1]
 800ea52:	0042      	.short	0x0042
 800ea54:	0058004f 	.word	0x0058004f
 800ea58:	0066005f 	.word	0x0066005f
 800ea5c:	0072006c 	.word	0x0072006c
 800ea60:	008b0080 	.word	0x008b0080
 800ea64:	00a10096 	.word	0x00a10096
 800ea68:	00b700ac 	.word	0x00b700ac
 800ea6c:	00ce00c2 	.word	0x00ce00c2
 800ea70:	00e500da 	.word	0x00e500da
 800ea74:	00eb026c 	.word	0x00eb026c
 800ea78:	01350111 	.word	0x01350111
 800ea7c:	018d0163 	.word	0x018d0163
 800ea80:	019d017d 	.word	0x019d017d
 800ea84:	01ad01a8 	.word	0x01ad01a8
 800ea88:	01b701b2 	.word	0x01b701b2
 800ea8c:	026c01bc 	.word	0x026c01bc
 800ea90:	01d601c1 	.word	0x01d601c1
 800ea94:	01ef0204 	.word	0x01ef0204
 800ea98:	02200219 	.word	0x02200219
 800ea9c:	022e0228 	.word	0x022e0228
 800eaa0:	026c0234 	.word	0x026c0234
 800eaa4:	026c0237 	.word	0x026c0237
 800eaa8:	026c026c 	.word	0x026c026c
 800eaac:	026c026c 	.word	0x026c026c
 800eab0:	026c026c 	.word	0x026c026c
 800eab4:	026c026c 	.word	0x026c026c
 800eab8:	026c026c 	.word	0x026c026c
 800eabc:	026c026c 	.word	0x026c026c
 800eac0:	026c026c 	.word	0x026c026c
 800eac4:	0248026c 	.word	0x0248026c
 800eac8:	0254024e 	.word	0x0254024e
 800eacc:	0260025a 	.word	0x0260025a
 800ead0:	02730266 	.word	0x02730266
 800ead4:	0273      	.short	0x0273
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ead6:	7900      	ldrb	r0, [r0, #4]
 800ead8:	f7ff f90e 	bl	800dcf8 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800eadc:	b930      	cbnz	r0, 800eaec <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800eade:	4a72      	ldr	r2, [pc, #456]	; (800eca8 <LoRaMacMibSetRequestConfirm+0x27c>)
 800eae0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800eae4:	f043 0320 	orr.w	r3, r3, #32
 800eae8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800eaec:	b005      	add	sp, #20
 800eaee:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800eaf0:	7903      	ldrb	r3, [r0, #4]
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	f000 8222 	beq.w	800ef3c <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800eaf8:	4a6c      	ldr	r2, [pc, #432]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800eafa:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eafe:	2000      	movs	r0, #0
 800eb00:	e7ed      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800eb02:	6840      	ldr	r0, [r0, #4]
 800eb04:	f003 ffd2 	bl	8012aac <SecureElementSetDevEui>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d0e8      	beq.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb0c:	2003      	movs	r0, #3
 800eb0e:	e7ed      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800eb10:	6840      	ldr	r0, [r0, #4]
 800eb12:	f003 ffe7 	bl	8012ae4 <SecureElementSetJoinEui>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	d0e1      	beq.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	e7e6      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800eb1e:	7902      	ldrb	r2, [r0, #4]
 800eb20:	4b62      	ldr	r3, [pc, #392]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800eb22:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb26:	2000      	movs	r0, #0
 800eb28:	e7d9      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800eb2a:	6842      	ldr	r2, [r0, #4]
 800eb2c:	4b5f      	ldr	r3, [pc, #380]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800eb2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb32:	2000      	movs	r0, #0
 800eb34:	e7d3      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800eb36:	6841      	ldr	r1, [r0, #4]
 800eb38:	4b5c      	ldr	r3, [pc, #368]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800eb3a:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800eb3e:	f003 ffef 	bl	8012b20 <SecureElementSetDevAddr>
 800eb42:	2800      	cmp	r0, #0
 800eb44:	f040 81fc 	bne.w	800ef40 <LoRaMacMibSetRequestConfirm+0x514>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800eb48:	6862      	ldr	r2, [r4, #4]
 800eb4a:	4b58      	ldr	r3, [pc, #352]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800eb4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 800eb50:	e7c5      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800eb52:	6841      	ldr	r1, [r0, #4]
 800eb54:	2900      	cmp	r1, #0
 800eb56:	f000 81f5 	beq.w	800ef44 <LoRaMacMibSetRequestConfirm+0x518>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	f001 fc42 	bl	80103e4 <LoRaMacCryptoSetKey>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d0bc      	beq.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb64:	2011      	movs	r0, #17
 800eb66:	e7c1      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800eb68:	6841      	ldr	r1, [r0, #4]
 800eb6a:	2900      	cmp	r1, #0
 800eb6c:	f000 81ec 	beq.w	800ef48 <LoRaMacMibSetRequestConfirm+0x51c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800eb70:	2001      	movs	r0, #1
 800eb72:	f001 fc37 	bl	80103e4 <LoRaMacCryptoSetKey>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	d0b0      	beq.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb7a:	2011      	movs	r0, #17
 800eb7c:	e7b6      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800eb7e:	6841      	ldr	r1, [r0, #4]
 800eb80:	2900      	cmp	r1, #0
 800eb82:	f000 81e3 	beq.w	800ef4c <LoRaMacMibSetRequestConfirm+0x520>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800eb86:	2008      	movs	r0, #8
 800eb88:	f001 fc2c 	bl	80103e4 <LoRaMacCryptoSetKey>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d0a5      	beq.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb90:	2011      	movs	r0, #17
 800eb92:	e7ab      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800eb94:	6841      	ldr	r1, [r0, #4]
 800eb96:	2900      	cmp	r1, #0
 800eb98:	f000 81da 	beq.w	800ef50 <LoRaMacMibSetRequestConfirm+0x524>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800eb9c:	2009      	movs	r0, #9
 800eb9e:	f001 fc21 	bl	80103e4 <LoRaMacCryptoSetKey>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d09a      	beq.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eba6:	2011      	movs	r0, #17
 800eba8:	e7a0      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800ebaa:	6841      	ldr	r1, [r0, #4]
 800ebac:	2900      	cmp	r1, #0
 800ebae:	f000 81d1 	beq.w	800ef54 <LoRaMacMibSetRequestConfirm+0x528>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ebb2:	200c      	movs	r0, #12
 800ebb4:	f001 fc16 	bl	80103e4 <LoRaMacCryptoSetKey>
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d08f      	beq.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ebbc:	2011      	movs	r0, #17
 800ebbe:	e795      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800ebc0:	6841      	ldr	r1, [r0, #4]
 800ebc2:	2900      	cmp	r1, #0
 800ebc4:	f000 81c8 	beq.w	800ef58 <LoRaMacMibSetRequestConfirm+0x52c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ebc8:	200d      	movs	r0, #13
 800ebca:	f001 fc0b 	bl	80103e4 <LoRaMacCryptoSetKey>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d084      	beq.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ebd2:	2011      	movs	r0, #17
 800ebd4:	e78a      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800ebd6:	6841      	ldr	r1, [r0, #4]
 800ebd8:	2900      	cmp	r1, #0
 800ebda:	f000 81bf 	beq.w	800ef5c <LoRaMacMibSetRequestConfirm+0x530>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ebde:	200e      	movs	r0, #14
 800ebe0:	f001 fc00 	bl	80103e4 <LoRaMacCryptoSetKey>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	f43f af79 	beq.w	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ebea:	2011      	movs	r0, #17
 800ebec:	e77e      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ebee:	6841      	ldr	r1, [r0, #4]
 800ebf0:	2900      	cmp	r1, #0
 800ebf2:	f000 81b5 	beq.w	800ef60 <LoRaMacMibSetRequestConfirm+0x534>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ebf6:	200f      	movs	r0, #15
 800ebf8:	f001 fbf4 	bl	80103e4 <LoRaMacCryptoSetKey>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	f43f af6d 	beq.w	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec02:	2011      	movs	r0, #17
 800ec04:	e772      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ec06:	7900      	ldrb	r0, [r0, #4]
 800ec08:	4b28      	ldr	r3, [pc, #160]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800ec0a:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ec0e:	4c28      	ldr	r4, [pc, #160]	; (800ecb0 <LoRaMacMibSetRequestConfirm+0x284>)
 800ec10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec12:	4798      	blx	r3
            Radio.Sleep( );
 800ec14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ec16:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ec18:	2000      	movs	r0, #0
 800ec1a:	e760      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ec1c:	7902      	ldrb	r2, [r0, #4]
 800ec1e:	4b23      	ldr	r3, [pc, #140]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800ec20:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ec24:	2000      	movs	r0, #0
 800ec26:	e75a      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ec28:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ec2c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec30:	4b1e      	ldr	r3, [pc, #120]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800ec32:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ec36:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ec3a:	2207      	movs	r2, #7
 800ec3c:	a901      	add	r1, sp, #4
 800ec3e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ec42:	f001 fe50 	bl	80108e6 <RegionVerify>
 800ec46:	b908      	cbnz	r0, 800ec4c <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec48:	2003      	movs	r0, #3
 800ec4a:	e747      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ec4c:	6863      	ldr	r3, [r4, #4]
 800ec4e:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800ec50:	2200      	movs	r2, #0
 800ec52:	a901      	add	r1, sp, #4
 800ec54:	4b15      	ldr	r3, [pc, #84]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800ec56:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ec5a:	f001 fe44 	bl	80108e6 <RegionVerify>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	f000 8180 	beq.w	800ef64 <LoRaMacMibSetRequestConfirm+0x538>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ec64:	4b13      	ldr	r3, [pc, #76]	; (800ecb4 <LoRaMacMibSetRequestConfirm+0x288>)
 800ec66:	3404      	adds	r4, #4
 800ec68:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ec6c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ec70:	2000      	movs	r0, #0
 800ec72:	e733      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ec74:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ec78:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec7c:	4b0b      	ldr	r3, [pc, #44]	; (800ecac <LoRaMacMibSetRequestConfirm+0x280>)
 800ec7e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ec82:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ec86:	2207      	movs	r2, #7
 800ec88:	a901      	add	r1, sp, #4
 800ec8a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ec8e:	f001 fe2a 	bl	80108e6 <RegionVerify>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	f000 8168 	beq.w	800ef68 <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800ec98:	4b07      	ldr	r3, [pc, #28]	; (800ecb8 <LoRaMacMibSetRequestConfirm+0x28c>)
 800ec9a:	3404      	adds	r4, #4
 800ec9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eca0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eca4:	2000      	movs	r0, #0
 800eca6:	e719      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
 800eca8:	20000d18 	.word	0x20000d18
 800ecac:	20008000 	.word	0x20008000
 800ecb0:	0801af08 	.word	0x0801af08
 800ecb4:	2000806c 	.word	0x2000806c
 800ecb8:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ecbc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ecc0:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ecc4:	4bb0      	ldr	r3, [pc, #704]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ecc6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ecca:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ecce:	2207      	movs	r2, #7
 800ecd0:	a901      	add	r1, sp, #4
 800ecd2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ecd6:	f001 fe06 	bl	80108e6 <RegionVerify>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	f000 8146 	beq.w	800ef6c <LoRaMacMibSetRequestConfirm+0x540>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800ece0:	4ba9      	ldr	r3, [pc, #676]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ece2:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800ece6:	3404      	adds	r4, #4
 800ece8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ecec:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ecf0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d001      	beq.n	800ecfc <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	e6ef      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ecfc:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800ed00:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800ed04:	2800      	cmp	r0, #0
 800ed06:	f43f aee9 	beq.w	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 800ed0a:	4ba0      	ldr	r3, [pc, #640]	; (800ef8c <LoRaMacMibSetRequestConfirm+0x560>)
 800ed0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800ed10:	f7fe fd16 	bl	800d740 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed14:	2000      	movs	r0, #0
 800ed16:	e6e1      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ed18:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ed1c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ed20:	4b99      	ldr	r3, [pc, #612]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ed22:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ed26:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ed2a:	2207      	movs	r2, #7
 800ed2c:	a901      	add	r1, sp, #4
 800ed2e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ed32:	f001 fdd8 	bl	80108e6 <RegionVerify>
 800ed36:	2800      	cmp	r0, #0
 800ed38:	f000 811a 	beq.w	800ef70 <LoRaMacMibSetRequestConfirm+0x544>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ed3c:	4b94      	ldr	r3, [pc, #592]	; (800ef90 <LoRaMacMibSetRequestConfirm+0x564>)
 800ed3e:	3404      	adds	r4, #4
 800ed40:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ed44:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed48:	2000      	movs	r0, #0
 800ed4a:	e6c7      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800ed4c:	6843      	ldr	r3, [r0, #4]
 800ed4e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800ed50:	2301      	movs	r3, #1
 800ed52:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ed56:	a902      	add	r1, sp, #8
 800ed58:	4b8b      	ldr	r3, [pc, #556]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ed5a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ed5e:	f001 fdd5 	bl	801090c <RegionChanMaskSet>
 800ed62:	b108      	cbz	r0, 800ed68 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed64:	2000      	movs	r0, #0
 800ed66:	e6b9      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed68:	2003      	movs	r0, #3
 800ed6a:	e6bf      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ed6c:	6843      	ldr	r3, [r0, #4]
 800ed6e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ed70:	2300      	movs	r3, #0
 800ed72:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ed76:	a902      	add	r1, sp, #8
 800ed78:	4b83      	ldr	r3, [pc, #524]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ed7a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ed7e:	f001 fdc5 	bl	801090c <RegionChanMaskSet>
 800ed82:	b108      	cbz	r0, 800ed88 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed84:	2000      	movs	r0, #0
 800ed86:	e6a9      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed88:	2003      	movs	r0, #3
 800ed8a:	e6af      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ed8c:	7902      	ldrb	r2, [r0, #4]
 800ed8e:	1e53      	subs	r3, r2, #1
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	2b0e      	cmp	r3, #14
 800ed94:	f200 80ee 	bhi.w	800ef74 <LoRaMacMibSetRequestConfirm+0x548>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ed98:	4b7b      	ldr	r3, [pc, #492]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ed9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed9e:	2000      	movs	r0, #0
 800eda0:	e69c      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800eda2:	6842      	ldr	r2, [r0, #4]
 800eda4:	4b78      	ldr	r3, [pc, #480]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800eda6:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eda8:	2000      	movs	r0, #0
 800edaa:	e698      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800edac:	6842      	ldr	r2, [r0, #4]
 800edae:	4b76      	ldr	r3, [pc, #472]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800edb0:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800edb2:	2000      	movs	r0, #0
 800edb4:	e693      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800edb6:	6842      	ldr	r2, [r0, #4]
 800edb8:	4b73      	ldr	r3, [pc, #460]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800edba:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800edbc:	2000      	movs	r0, #0
 800edbe:	e68e      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800edc0:	6842      	ldr	r2, [r0, #4]
 800edc2:	4b71      	ldr	r3, [pc, #452]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800edc4:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800edc6:	2000      	movs	r0, #0
 800edc8:	e689      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800edca:	6842      	ldr	r2, [r0, #4]
 800edcc:	4b6e      	ldr	r3, [pc, #440]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800edce:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800edd0:	2000      	movs	r0, #0
 800edd2:	e684      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800edd4:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800edd8:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800eddc:	2206      	movs	r2, #6
 800edde:	a901      	add	r1, sp, #4
 800ede0:	4b69      	ldr	r3, [pc, #420]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ede2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ede6:	f001 fd7e 	bl	80108e6 <RegionVerify>
 800edea:	2800      	cmp	r0, #0
 800edec:	f000 80c4 	beq.w	800ef78 <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800edf0:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800edf4:	4b64      	ldr	r3, [pc, #400]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800edf6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800edfa:	2000      	movs	r0, #0
 800edfc:	e66e      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800edfe:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ee02:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ee06:	4b60      	ldr	r3, [pc, #384]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ee08:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ee0c:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ee10:	2205      	movs	r2, #5
 800ee12:	a901      	add	r1, sp, #4
 800ee14:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ee18:	f001 fd65 	bl	80108e6 <RegionVerify>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	f000 80ad 	beq.w	800ef7c <LoRaMacMibSetRequestConfirm+0x550>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ee22:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ee26:	4b58      	ldr	r3, [pc, #352]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ee28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	e655      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ee30:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ee34:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ee38:	220a      	movs	r2, #10
 800ee3a:	a901      	add	r1, sp, #4
 800ee3c:	4b52      	ldr	r3, [pc, #328]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ee3e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ee42:	f001 fd50 	bl	80108e6 <RegionVerify>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	f000 809a 	beq.w	800ef80 <LoRaMacMibSetRequestConfirm+0x554>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800ee4c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ee50:	4b4d      	ldr	r3, [pc, #308]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ee52:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee56:	2000      	movs	r0, #0
 800ee58:	e640      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800ee5a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ee5e:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800ee62:	2209      	movs	r2, #9
 800ee64:	a901      	add	r1, sp, #4
 800ee66:	4b48      	ldr	r3, [pc, #288]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ee68:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ee6c:	f001 fd3b 	bl	80108e6 <RegionVerify>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f000 8087 	beq.w	800ef84 <LoRaMacMibSetRequestConfirm+0x558>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800ee76:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ee7a:	4b43      	ldr	r3, [pc, #268]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ee7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee80:	2000      	movs	r0, #0
 800ee82:	e62b      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ee84:	6842      	ldr	r2, [r0, #4]
 800ee86:	4b40      	ldr	r3, [pc, #256]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ee88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800ee8c:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee8e:	2000      	movs	r0, #0
 800ee90:	e625      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ee92:	7902      	ldrb	r2, [r0, #4]
 800ee94:	4b3c      	ldr	r3, [pc, #240]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ee96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800ee9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee9e:	2000      	movs	r0, #0
 800eea0:	e61d      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800eea2:	6842      	ldr	r2, [r0, #4]
 800eea4:	4b38      	ldr	r3, [pc, #224]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800eea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eeaa:	2000      	movs	r0, #0
 800eeac:	e617      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800eeae:	6842      	ldr	r2, [r0, #4]
 800eeb0:	4b35      	ldr	r3, [pc, #212]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800eeb2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	e611      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800eeba:	f7fe fd57 	bl	800d96c <RestoreNvmData>
            break;
 800eebe:	e60d      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800eec0:	7983      	ldrb	r3, [r0, #6]
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d901      	bls.n	800eeca <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eec6:	2003      	movs	r0, #3
 800eec8:	e610      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800eeca:	6842      	ldr	r2, [r0, #4]
 800eecc:	4b2e      	ldr	r3, [pc, #184]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800eece:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800eed2:	6840      	ldr	r0, [r0, #4]
 800eed4:	f001 f930 	bl	8010138 <LoRaMacCryptoSetLrWanVersion>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	f43f ae00 	beq.w	800eade <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eede:	2011      	movs	r0, #17
 800eee0:	e604      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800eee2:	6842      	ldr	r2, [r0, #4]
 800eee4:	4b28      	ldr	r3, [pc, #160]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800eee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eeea:	2000      	movs	r0, #0
 800eeec:	e5f7      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800eeee:	7902      	ldrb	r2, [r0, #4]
 800eef0:	4b25      	ldr	r3, [pc, #148]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800eef2:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eef6:	2000      	movs	r0, #0
 800eef8:	e5f1      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800eefa:	8882      	ldrh	r2, [r0, #4]
 800eefc:	4b22      	ldr	r3, [pc, #136]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800eefe:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef02:	2000      	movs	r0, #0
 800ef04:	e5eb      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800ef06:	8882      	ldrh	r2, [r0, #4]
 800ef08:	4b1f      	ldr	r3, [pc, #124]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ef0a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef0e:	2000      	movs	r0, #0
 800ef10:	e5e5      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800ef12:	8882      	ldrh	r2, [r0, #4]
 800ef14:	4b1c      	ldr	r3, [pc, #112]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ef16:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	e5df      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800ef1e:	8882      	ldrh	r2, [r0, #4]
 800ef20:	4b19      	ldr	r3, [pc, #100]	; (800ef88 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ef22:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef26:	2000      	movs	r0, #0
 800ef28:	e5d9      	b.n	800eade <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800ef2a:	f000 fc3f 	bl	800f7ac <LoRaMacMibClassBSetRequestConfirm>
            break;
 800ef2e:	e5d5      	b.n	800eadc <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ef30:	2003      	movs	r0, #3
}
 800ef32:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800ef34:	2001      	movs	r0, #1
 800ef36:	e5d9      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
    switch( mibSet->Type )
 800ef38:	2018      	movs	r0, #24
 800ef3a:	e5d7      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef3c:	2003      	movs	r0, #3
 800ef3e:	e5d5      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef40:	2003      	movs	r0, #3
 800ef42:	e5d3      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef44:	2003      	movs	r0, #3
 800ef46:	e5d1      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef48:	2003      	movs	r0, #3
 800ef4a:	e5cf      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef4c:	2003      	movs	r0, #3
 800ef4e:	e5cd      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef50:	2003      	movs	r0, #3
 800ef52:	e5cb      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef54:	2003      	movs	r0, #3
 800ef56:	e5c9      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef58:	2003      	movs	r0, #3
 800ef5a:	e5c7      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef5c:	2003      	movs	r0, #3
 800ef5e:	e5c5      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef60:	2003      	movs	r0, #3
 800ef62:	e5c3      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef64:	2003      	movs	r0, #3
 800ef66:	e5c1      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef68:	2003      	movs	r0, #3
 800ef6a:	e5bf      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef6c:	2003      	movs	r0, #3
 800ef6e:	e5bd      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef70:	2003      	movs	r0, #3
 800ef72:	e5bb      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef74:	2003      	movs	r0, #3
 800ef76:	e5b9      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef78:	2003      	movs	r0, #3
 800ef7a:	e5b7      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef7c:	2003      	movs	r0, #3
 800ef7e:	e5b5      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef80:	2003      	movs	r0, #3
 800ef82:	e5b3      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef84:	2003      	movs	r0, #3
 800ef86:	e5b1      	b.n	800eaec <LoRaMacMibSetRequestConfirm+0xc0>
 800ef88:	20008000 	.word	0x20008000
 800ef8c:	0801af08 	.word	0x0801af08
 800ef90:	200080bc 	.word	0x200080bc

0800ef94 <LoRaMacMcChannelSetup>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMcChannelSetup( McChannelParams_t *channel )
{
 800ef94:	b538      	push	{r3, r4, r5, lr}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ef96:	4b2a      	ldr	r3, [pc, #168]	; (800f040 <LoRaMacMcChannelSetup+0xac>)
 800ef98:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ef9c:	f013 0f02 	tst.w	r3, #2
 800efa0:	d143      	bne.n	800f02a <LoRaMacMcChannelSetup+0x96>
 800efa2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_BUSY;
    }

    if( channel->GroupID >= LORAMAC_MAX_MC_CTX )
 800efa4:	7885      	ldrb	r5, [r0, #2]
 800efa6:	2d00      	cmp	r5, #0
 800efa8:	d142      	bne.n	800f030 <LoRaMacMcChannelSetup+0x9c>
    {
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
    }

    Nvm.MacGroup2.MulticastChannelList[channel->GroupID].ChannelParams = *channel;
 800efaa:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800efae:	4b25      	ldr	r3, [pc, #148]	; (800f044 <LoRaMacMcChannelSetup+0xb0>)
 800efb0:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 800efb4:	f10c 0ce8 	add.w	ip, ip, #232	; 0xe8
 800efb8:	4686      	mov	lr, r0
 800efba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800efbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800efc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efca:	f8de 3000 	ldr.w	r3, [lr]
 800efce:	f8cc 3000 	str.w	r3, [ip]
    MacCtx.MacFlags.Bits.NvmHandle = 1;
 800efd2:	4a1b      	ldr	r2, [pc, #108]	; (800f040 <LoRaMacMcChannelSetup+0xac>)
 800efd4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800efd8:	f043 0320 	orr.w	r3, r3, #32
 800efdc:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    if( channel->IsRemotelySetup == true )
 800efe0:	7823      	ldrb	r3, [r4, #0]
 800efe2:	b1ab      	cbz	r3, 800f010 <LoRaMacMcChannelSetup+0x7c>
    {
        if( LoRaMacCryptoSetKey( MCKeys[channel->GroupID], channel->McKeys.McKeyE ) != LORAMAC_CRYPTO_SUCCESS )
 800efe4:	68a1      	ldr	r1, [r4, #8]
 800efe6:	200d      	movs	r0, #13
 800efe8:	f001 f9fc 	bl	80103e4 <LoRaMacCryptoSetKey>
 800efec:	bb10      	cbnz	r0, 800f034 <LoRaMacMcChannelSetup+0xa0>
        {
            return LORAMAC_STATUS_CRYPTO_ERROR;
        }

        if( LoRaMacCryptoDeriveMcSessionKeyPair( channel->GroupID, channel->Address ) != LORAMAC_CRYPTO_SUCCESS )
 800efee:	6861      	ldr	r1, [r4, #4]
 800eff0:	78a0      	ldrb	r0, [r4, #2]
 800eff2:	f001 fa95 	bl	8010520 <LoRaMacCryptoDeriveMcSessionKeyPair>
 800eff6:	b9f8      	cbnz	r0, 800f038 <LoRaMacMcChannelSetup+0xa4>
            return LORAMAC_STATUS_CRYPTO_ERROR;
        }
    }

    // Reset multicast channel downlink counter to initial value.
    *Nvm.MacGroup2.MulticastChannelList[channel->GroupID].DownLinkCounter = FCNT_DOWN_INITIAL_VALUE;
 800eff8:	78a3      	ldrb	r3, [r4, #2]
 800effa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800effe:	4a11      	ldr	r2, [pc, #68]	; (800f044 <LoRaMacMcChannelSetup+0xb0>)
 800f000:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800f004:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f00c:	601a      	str	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800f00e:	e00d      	b.n	800f02c <LoRaMacMcChannelSetup+0x98>
        if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MCAppSKeys[channel->GroupID], channel->McKeys.Session.McAppSKey ) )
 800f010:	68a1      	ldr	r1, [r4, #8]
 800f012:	200e      	movs	r0, #14
 800f014:	f001 f9e6 	bl	80103e4 <LoRaMacCryptoSetKey>
 800f018:	b980      	cbnz	r0, 800f03c <LoRaMacMcChannelSetup+0xa8>
        if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MCNwkSKeys[channel->GroupID], channel->McKeys.Session.McNwkSKey ) )
 800f01a:	68e1      	ldr	r1, [r4, #12]
 800f01c:	200f      	movs	r0, #15
 800f01e:	f001 f9e1 	bl	80103e4 <LoRaMacCryptoSetKey>
 800f022:	2800      	cmp	r0, #0
 800f024:	d0e8      	beq.n	800eff8 <LoRaMacMcChannelSetup+0x64>
            return LORAMAC_STATUS_CRYPTO_ERROR;
 800f026:	2511      	movs	r5, #17
 800f028:	e000      	b.n	800f02c <LoRaMacMcChannelSetup+0x98>
        return LORAMAC_STATUS_BUSY;
 800f02a:	2501      	movs	r5, #1
}
 800f02c:	4628      	mov	r0, r5
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 800f030:	2516      	movs	r5, #22
 800f032:	e7fb      	b.n	800f02c <LoRaMacMcChannelSetup+0x98>
            return LORAMAC_STATUS_CRYPTO_ERROR;
 800f034:	2511      	movs	r5, #17
 800f036:	e7f9      	b.n	800f02c <LoRaMacMcChannelSetup+0x98>
            return LORAMAC_STATUS_CRYPTO_ERROR;
 800f038:	2511      	movs	r5, #17
 800f03a:	e7f7      	b.n	800f02c <LoRaMacMcChannelSetup+0x98>
            return LORAMAC_STATUS_CRYPTO_ERROR;
 800f03c:	2511      	movs	r5, #17
 800f03e:	e7f5      	b.n	800f02c <LoRaMacMcChannelSetup+0x98>
 800f040:	20000d18 	.word	0x20000d18
 800f044:	20008000 	.word	0x20008000

0800f048 <LoRaMacMcChannelDelete>:

LoRaMacStatus_t LoRaMacMcChannelDelete( AddressIdentifier_t groupID )
{
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f048:	4b1d      	ldr	r3, [pc, #116]	; (800f0c0 <LoRaMacMcChannelDelete+0x78>)
 800f04a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f04e:	f013 0f02 	tst.w	r3, #2
 800f052:	d12f      	bne.n	800f0b4 <LoRaMacMcChannelDelete+0x6c>
{
 800f054:	b510      	push	{r4, lr}
 800f056:	b08a      	sub	sp, #40	; 0x28
 800f058:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_BUSY;
    }

    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 800f05a:	bb68      	cbnz	r0, 800f0b8 <LoRaMacMcChannelDelete+0x70>
        ( Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
 800f05c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800f060:	4b18      	ldr	r3, [pc, #96]	; (800f0c4 <LoRaMacMcChannelDelete+0x7c>)
 800f062:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f066:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 800f06a:	b33b      	cbz	r3, 800f0bc <LoRaMacMcChannelDelete+0x74>
    }

    McChannelParams_t channel;

    // Set all channel fields with 0
    memset1( ( uint8_t* )&channel, 0, sizeof( McChannelParams_t ) );
 800f06c:	2224      	movs	r2, #36	; 0x24
 800f06e:	2100      	movs	r1, #0
 800f070:	a801      	add	r0, sp, #4
 800f072:	f003 fe7c 	bl	8012d6e <memset1>

    Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams = channel;
 800f076:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f07a:	4b12      	ldr	r3, [pc, #72]	; (800f0c4 <LoRaMacMcChannelDelete+0x7c>)
 800f07c:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 800f080:	f10c 0ce8 	add.w	ip, ip, #232	; 0xe8
 800f084:	f10d 0e04 	add.w	lr, sp, #4
 800f088:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f08c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f090:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f098:	f8de 3000 	ldr.w	r3, [lr]
 800f09c:	f8cc 3000 	str.w	r3, [ip]
    MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f0a0:	4a07      	ldr	r2, [pc, #28]	; (800f0c0 <LoRaMacMcChannelDelete+0x78>)
 800f0a2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f0a6:	f043 0320 	orr.w	r3, r3, #32
 800f0aa:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    return LORAMAC_STATUS_OK;
 800f0ae:	4620      	mov	r0, r4
}
 800f0b0:	b00a      	add	sp, #40	; 0x28
 800f0b2:	bd10      	pop	{r4, pc}
        return LORAMAC_STATUS_BUSY;
 800f0b4:	2001      	movs	r0, #1
}
 800f0b6:	4770      	bx	lr
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 800f0b8:	2016      	movs	r0, #22
 800f0ba:	e7f9      	b.n	800f0b0 <LoRaMacMcChannelDelete+0x68>
 800f0bc:	2016      	movs	r0, #22
 800f0be:	e7f7      	b.n	800f0b0 <LoRaMacMcChannelDelete+0x68>
 800f0c0:	20000d18 	.word	0x20000d18
 800f0c4:	20008000 	.word	0x20008000

0800f0c8 <LoRaMacMcChannelGetGroupId>:

uint8_t LoRaMacMcChannelGetGroupId( uint32_t mcAddress )
{
 800f0c8:	4602      	mov	r2, r0
    for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	b108      	cbz	r0, 800f0d2 <LoRaMacMcChannelGetGroupId+0xa>
        if( mcAddress == Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address )
        {
            return i;
        }
    }
    return 0xFF;
 800f0ce:	20ff      	movs	r0, #255	; 0xff
}
 800f0d0:	4770      	bx	lr
        if( mcAddress == Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address )
 800f0d2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800f0d6:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <LoRaMacMcChannelGetGroupId+0x24>)
 800f0d8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f0dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d0f5      	beq.n	800f0d0 <LoRaMacMcChannelGetGroupId+0x8>
    for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f0e4:	1c43      	adds	r3, r0, #1
 800f0e6:	b2d8      	uxtb	r0, r3
 800f0e8:	e7f0      	b.n	800f0cc <LoRaMacMcChannelGetGroupId+0x4>
 800f0ea:	bf00      	nop
 800f0ec:	20008000 	.word	0x20008000

0800f0f0 <LoRaMacMcChannelSetupRxParams>:

LoRaMacStatus_t LoRaMacMcChannelSetupRxParams( AddressIdentifier_t groupID, McRxParams_t *rxParams, uint8_t *status )
{
 800f0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	4616      	mov	r6, r2
   *status = 0x1C + ( groupID & 0x03 );
 800f0f6:	f000 0703 	and.w	r7, r0, #3
 800f0fa:	f107 021c 	add.w	r2, r7, #28
 800f0fe:	7032      	strb	r2, [r6, #0]

    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f100:	4b3c      	ldr	r3, [pc, #240]	; (800f1f4 <LoRaMacMcChannelSetupRxParams+0x104>)
 800f102:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f106:	f013 0f02 	tst.w	r3, #2
 800f10a:	d168      	bne.n	800f1de <LoRaMacMcChannelSetupRxParams+0xee>
 800f10c:	4604      	mov	r4, r0
 800f10e:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_BUSY;
    }

    if( ( rxParams->Class == CLASS_A ) || ( rxParams->Class > CLASS_C ) )
 800f110:	780b      	ldrb	r3, [r1, #0]
 800f112:	3b01      	subs	r3, #1
 800f114:	b2db      	uxtb	r3, r3
 800f116:	2b01      	cmp	r3, #1
 800f118:	d864      	bhi.n	800f1e4 <LoRaMacMcChannelSetupRxParams+0xf4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 800f11a:	2800      	cmp	r0, #0
 800f11c:	d164      	bne.n	800f1e8 <LoRaMacMcChannelSetupRxParams+0xf8>
        ( Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
 800f11e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800f122:	4b35      	ldr	r3, [pc, #212]	; (800f1f8 <LoRaMacMcChannelSetupRxParams+0x108>)
 800f124:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f128:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d05d      	beq.n	800f1ec <LoRaMacMcChannelSetupRxParams+0xfc>
    {
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
    }
    *status &= 0x0F; // groupID OK
 800f130:	f002 020f 	and.w	r2, r2, #15
 800f134:	7032      	strb	r2, [r6, #0]

    VerifyParams_t verify;
    // Check datarate
    if( rxParams->Class == CLASS_B )
 800f136:	782b      	ldrb	r3, [r5, #0]
 800f138:	2b01      	cmp	r3, #1
 800f13a:	d03e      	beq.n	800f1ba <LoRaMacMcChannelSetupRxParams+0xca>
    {
        verify.DatarateParams.Datarate = rxParams->Params.ClassB.Datarate;
    }
    else
    {
        verify.DatarateParams.Datarate = rxParams->Params.ClassC.Datarate;
 800f13c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800f140:	f88d 3004 	strb.w	r3, [sp, #4]
    }
    verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f144:	4b2c      	ldr	r3, [pc, #176]	; (800f1f8 <LoRaMacMcChannelSetupRxParams+0x108>)
 800f146:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f14a:	f88d 2005 	strb.w	r2, [sp, #5]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f14e:	2207      	movs	r2, #7
 800f150:	a901      	add	r1, sp, #4
 800f152:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f156:	f001 fbc6 	bl	80108e6 <RegionVerify>
 800f15a:	b118      	cbz	r0, 800f164 <LoRaMacMcChannelSetupRxParams+0x74>
    {
        *status &= 0xFB; // datarate OK
 800f15c:	7833      	ldrb	r3, [r6, #0]
 800f15e:	f023 0304 	bic.w	r3, r3, #4
 800f162:	7033      	strb	r3, [r6, #0]
    }

    // Check frequency
    if( rxParams->Class == CLASS_B )
 800f164:	782b      	ldrb	r3, [r5, #0]
 800f166:	2b01      	cmp	r3, #1
 800f168:	d02c      	beq.n	800f1c4 <LoRaMacMcChannelSetupRxParams+0xd4>
    {
        verify.Frequency = rxParams->Params.ClassB.Frequency;
    }
    else
    {
        verify.Frequency = rxParams->Params.ClassC.Frequency;
 800f16a:	686b      	ldr	r3, [r5, #4]
 800f16c:	9301      	str	r3, [sp, #4]
    }
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) == true )
 800f16e:	2200      	movs	r2, #0
 800f170:	a901      	add	r1, sp, #4
 800f172:	4b21      	ldr	r3, [pc, #132]	; (800f1f8 <LoRaMacMcChannelSetupRxParams+0x108>)
 800f174:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f178:	f001 fbb5 	bl	80108e6 <RegionVerify>
 800f17c:	b118      	cbz	r0, 800f186 <LoRaMacMcChannelSetupRxParams+0x96>
    {
        *status &= 0xF7; // frequency OK
 800f17e:	7833      	ldrb	r3, [r6, #0]
 800f180:	f023 0308 	bic.w	r3, r3, #8
 800f184:	7033      	strb	r3, [r6, #0]
    }

    if( *status == ( groupID & 0x03 ) )
 800f186:	7833      	ldrb	r3, [r6, #0]
 800f188:	429f      	cmp	r7, r3
 800f18a:	d131      	bne.n	800f1f0 <LoRaMacMcChannelSetupRxParams+0x100>
    {
        // Apply parameters
        Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.RxParams = *rxParams;
 800f18c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f190:	4b19      	ldr	r3, [pc, #100]	; (800f1f8 <LoRaMacMcChannelSetupRxParams+0x108>)
 800f192:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f196:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f19a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f19e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f1a2:	4a14      	ldr	r2, [pc, #80]	; (800f1f4 <LoRaMacMcChannelSetupRxParams+0x104>)
 800f1a4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f1a8:	f043 0320 	orr.w	r3, r3, #32
 800f1ac:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    else
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( rxParams->Class == CLASS_B )
 800f1b0:	782b      	ldrb	r3, [r5, #0]
 800f1b2:	2b01      	cmp	r3, #1
 800f1b4:	d009      	beq.n	800f1ca <LoRaMacMcChannelSetupRxParams+0xda>
    {
        // Calculate class b parameters
        LoRaMacClassBSetMulticastPeriodicity( &Nvm.MacGroup2.MulticastChannelList[groupID] );
    }
    return LORAMAC_STATUS_OK;
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	e012      	b.n	800f1e0 <LoRaMacMcChannelSetupRxParams+0xf0>
        verify.DatarateParams.Datarate = rxParams->Params.ClassB.Datarate;
 800f1ba:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800f1be:	f88d 3004 	strb.w	r3, [sp, #4]
 800f1c2:	e7bf      	b.n	800f144 <LoRaMacMcChannelSetupRxParams+0x54>
        verify.Frequency = rxParams->Params.ClassB.Frequency;
 800f1c4:	686b      	ldr	r3, [r5, #4]
 800f1c6:	9301      	str	r3, [sp, #4]
 800f1c8:	e7d1      	b.n	800f16e <LoRaMacMcChannelSetupRxParams+0x7e>
        LoRaMacClassBSetMulticastPeriodicity( &Nvm.MacGroup2.MulticastChannelList[groupID] );
 800f1ca:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f1ce:	011b      	lsls	r3, r3, #4
 800f1d0:	33e8      	adds	r3, #232	; 0xe8
 800f1d2:	4809      	ldr	r0, [pc, #36]	; (800f1f8 <LoRaMacMcChannelSetupRxParams+0x108>)
 800f1d4:	4418      	add	r0, r3
 800f1d6:	f000 faf5 	bl	800f7c4 <LoRaMacClassBSetMulticastPeriodicity>
    return LORAMAC_STATUS_OK;
 800f1da:	4620      	mov	r0, r4
 800f1dc:	e000      	b.n	800f1e0 <LoRaMacMcChannelSetupRxParams+0xf0>
        return LORAMAC_STATUS_BUSY;
 800f1de:	2001      	movs	r0, #1
}
 800f1e0:	b003      	add	sp, #12
 800f1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f1e4:	2003      	movs	r0, #3
 800f1e6:	e7fb      	b.n	800f1e0 <LoRaMacMcChannelSetupRxParams+0xf0>
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 800f1e8:	2016      	movs	r0, #22
 800f1ea:	e7f9      	b.n	800f1e0 <LoRaMacMcChannelSetupRxParams+0xf0>
 800f1ec:	2016      	movs	r0, #22
 800f1ee:	e7f7      	b.n	800f1e0 <LoRaMacMcChannelSetupRxParams+0xf0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f1f0:	2003      	movs	r0, #3
 800f1f2:	e7f5      	b.n	800f1e0 <LoRaMacMcChannelSetupRxParams+0xf0>
 800f1f4:	20000d18 	.word	0x20000d18
 800f1f8:	20008000 	.word	0x20008000

0800f1fc <LoRaMacProcessMicForDatablock>:

LoRaMacStatus_t LoRaMacProcessMicForDatablock( uint8_t *buffer, uint32_t size, uint16_t sessionCnt, uint8_t fragIndex, uint32_t descriptor, uint32_t *mic )
{
 800f1fc:	b500      	push	{lr}
 800f1fe:	b083      	sub	sp, #12
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;

    macCryptoStatus = LoRaMacCryptoComputeDataBlock( buffer, size, sessionCnt, fragIndex, descriptor, mic );
 800f200:	f8dd c014 	ldr.w	ip, [sp, #20]
 800f204:	f8cd c004 	str.w	ip, [sp, #4]
 800f208:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f20c:	f8cd c000 	str.w	ip, [sp]
 800f210:	f001 f8ae 	bl	8010370 <LoRaMacCryptoComputeDataBlock>
    if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f214:	b910      	cbnz	r0, 800f21c <LoRaMacProcessMicForDatablock+0x20>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    return LORAMAC_STATUS_OK;
}
 800f216:	b003      	add	sp, #12
 800f218:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800f21c:	2011      	movs	r0, #17
 800f21e:	e7fa      	b.n	800f216 <LoRaMacProcessMicForDatablock+0x1a>

0800f220 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f224:	2300      	movs	r3, #0
 800f226:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800f22a:	2800      	cmp	r0, #0
 800f22c:	f000 80f3 	beq.w	800f416 <LoRaMacMlmeRequest+0x1f6>
 800f230:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800f232:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800f234:	f7fe ff6a 	bl	800e10c <LoRaMacIsBusy>
 800f238:	b118      	cbz	r0, 800f242 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800f23a:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800f23c:	4620      	mov	r0, r4
 800f23e:	b006      	add	sp, #24
 800f240:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800f242:	f000 fd67 	bl	800fd14 <LoRaMacConfirmQueueIsFull>
 800f246:	b108      	cbz	r0, 800f24c <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800f248:	2401      	movs	r4, #1
 800f24a:	e7f7      	b.n	800f23c <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f24c:	f000 fd5c 	bl	800fd08 <LoRaMacConfirmQueueGetCnt>
 800f250:	b308      	cbz	r0, 800f296 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f252:	4b72      	ldr	r3, [pc, #456]	; (800f41c <LoRaMacMlmeRequest+0x1fc>)
 800f254:	2101      	movs	r1, #1
 800f256:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f25a:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800f25e:	f042 0204 	orr.w	r2, r2, #4
 800f262:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 800f266:	782b      	ldrb	r3, [r5, #0]
 800f268:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f26c:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800f270:	2200      	movs	r2, #0
 800f272:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800f276:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800f27a:	461c      	mov	r4, r3
 800f27c:	3b01      	subs	r3, #1
 800f27e:	2b0c      	cmp	r3, #12
 800f280:	f200 80af 	bhi.w	800f3e2 <LoRaMacMlmeRequest+0x1c2>
 800f284:	e8df f003 	tbb	[pc, r3]
 800f288:	adadad0d 	.word	0xadadad0d
 800f28c:	adad675d 	.word	0xadad675d
 800f290:	7f9ead70 	.word	0x7f9ead70
 800f294:	95          	.byte	0x95
 800f295:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800f296:	2214      	movs	r2, #20
 800f298:	2100      	movs	r1, #0
 800f29a:	4861      	ldr	r0, [pc, #388]	; (800f420 <LoRaMacMlmeRequest+0x200>)
 800f29c:	f003 fd67 	bl	8012d6e <memset1>
 800f2a0:	e7d7      	b.n	800f252 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800f2a2:	4b5e      	ldr	r3, [pc, #376]	; (800f41c <LoRaMacMlmeRequest+0x1fc>)
 800f2a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f2a8:	f013 0f20 	tst.w	r3, #32
 800f2ac:	d1c6      	bne.n	800f23c <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800f2ae:	792b      	ldrb	r3, [r5, #4]
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	d003      	beq.n	800f2bc <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d026      	beq.n	800f306 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f2b8:	2402      	movs	r4, #2
 800f2ba:	e093      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800f2bc:	2000      	movs	r0, #0
 800f2be:	f7fe fc4f 	bl	800db60 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800f2c2:	4c58      	ldr	r4, [pc, #352]	; (800f424 <LoRaMacMlmeRequest+0x204>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800f2ca:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800f2ce:	f001 fb7f 	bl	80109d0 <RegionAlternateDr>
 800f2d2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800f2d6:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800f2da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800f2de:	2307      	movs	r3, #7
 800f2e0:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800f2e4:	20ff      	movs	r0, #255	; 0xff
 800f2e6:	f7fe fd9b 	bl	800de20 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d079      	beq.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800f2f0:	4e4c      	ldr	r6, [pc, #304]	; (800f424 <LoRaMacMlmeRequest+0x204>)
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800f2f8:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800f2fc:	f001 fb68 	bl	80109d0 <RegionAlternateDr>
 800f300:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800f304:	e06e      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800f306:	4e47      	ldr	r6, [pc, #284]	; (800f424 <LoRaMacMlmeRequest+0x204>)
 800f308:	2400      	movs	r4, #0
 800f30a:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f30e:	2302      	movs	r3, #2
 800f310:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f314:	4669      	mov	r1, sp
 800f316:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800f31a:	f001 fadc 	bl	80108d6 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800f31e:	792b      	ldrb	r3, [r5, #4]
 800f320:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f324:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800f328:	2301      	movs	r3, #1
 800f32a:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800f32e:	f7fc fe93 	bl	800c058 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f332:	4a3a      	ldr	r2, [pc, #232]	; (800f41c <LoRaMacMlmeRequest+0x1fc>)
 800f334:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f338:	f043 0310 	orr.w	r3, r3, #16
 800f33c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 800f340:	e050      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f342:	2200      	movs	r2, #0
 800f344:	a904      	add	r1, sp, #16
 800f346:	2002      	movs	r0, #2
 800f348:	f000 fad2 	bl	800f8f0 <LoRaMacCommandsAddCmd>
 800f34c:	4604      	mov	r4, r0
 800f34e:	2800      	cmp	r0, #0
 800f350:	d048      	beq.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f352:	2413      	movs	r4, #19
 800f354:	e046      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800f356:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800f35a:	b2d2      	uxtb	r2, r2
 800f35c:	68a9      	ldr	r1, [r5, #8]
 800f35e:	88a8      	ldrh	r0, [r5, #4]
 800f360:	f7fc fdd0 	bl	800bf04 <SetTxContinuousWave>
 800f364:	4604      	mov	r4, r0
            break;
 800f366:	e03d      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800f368:	4669      	mov	r1, sp
 800f36a:	200d      	movs	r0, #13
 800f36c:	f000 fb0c 	bl	800f988 <LoRaMacCommandsGetCmd>
 800f370:	4604      	mov	r4, r0
 800f372:	b3b8      	cbz	r0, 800f3e4 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f374:	2200      	movs	r2, #0
 800f376:	a904      	add	r1, sp, #16
 800f378:	200d      	movs	r0, #13
 800f37a:	f000 fab9 	bl	800f8f0 <LoRaMacCommandsAddCmd>
 800f37e:	4604      	mov	r4, r0
 800f380:	b380      	cbz	r0, 800f3e4 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f382:	2413      	movs	r4, #19
            break;
 800f384:	e02e      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800f386:	4b27      	ldr	r3, [pc, #156]	; (800f424 <LoRaMacMlmeRequest+0x204>)
 800f388:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f38c:	b10b      	cbz	r3, 800f392 <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f38e:	2402      	movs	r4, #2
 800f390:	e028      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f392:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f394:	f004 0007 	and.w	r0, r4, #7
 800f398:	f000 fa01 	bl	800f79e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800f39c:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	a904      	add	r1, sp, #16
 800f3a4:	2010      	movs	r0, #16
 800f3a6:	f000 faa3 	bl	800f8f0 <LoRaMacCommandsAddCmd>
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	b1d0      	cbz	r0, 800f3e4 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f3ae:	2413      	movs	r4, #19
 800f3b0:	e018      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	a904      	add	r1, sp, #16
 800f3b6:	2012      	movs	r0, #18
 800f3b8:	f000 fa9a 	bl	800f8f0 <LoRaMacCommandsAddCmd>
 800f3bc:	4604      	mov	r4, r0
 800f3be:	b188      	cbz	r0, 800f3e4 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f3c0:	2413      	movs	r4, #19
 800f3c2:	e00f      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f3ca:	f000 f9d9 	bl	800f780 <LoRaMacClassBIsAcquisitionInProgress>
 800f3ce:	b108      	cbz	r0, 800f3d4 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800f3d0:	2401      	movs	r4, #1
 800f3d2:	e007      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f3d4:	f000 f9d1 	bl	800f77a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f3d8:	2000      	movs	r0, #0
 800f3da:	f000 f9d3 	bl	800f784 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800f3de:	2400      	movs	r4, #0
 800f3e0:	e000      	b.n	800f3e4 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800f3e2:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f3e4:	4b0d      	ldr	r3, [pc, #52]	; (800f41c <LoRaMacMlmeRequest+0x1fc>)
 800f3e6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800f3ea:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800f3ec:	b17c      	cbz	r4, 800f40e <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f3ee:	f000 fc8b 	bl	800fd08 <LoRaMacConfirmQueueGetCnt>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	f47f af22 	bne.w	800f23c <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800f3f8:	4b08      	ldr	r3, [pc, #32]	; (800f41c <LoRaMacMlmeRequest+0x1fc>)
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f400:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800f404:	f361 0282 	bfi	r2, r1, #2, #1
 800f408:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800f40c:	e716      	b.n	800f23c <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800f40e:	a805      	add	r0, sp, #20
 800f410:	f000 fbb0 	bl	800fb74 <LoRaMacConfirmQueueAdd>
 800f414:	e712      	b.n	800f23c <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f416:	2403      	movs	r4, #3
 800f418:	e710      	b.n	800f23c <LoRaMacMlmeRequest+0x1c>
 800f41a:	bf00      	nop
 800f41c:	20000d18 	.word	0x20000d18
 800f420:	2000116c 	.word	0x2000116c
 800f424:	20008000 	.word	0x20008000

0800f428 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800f428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42c:	b091      	sub	sp, #68	; 0x44
 800f42e:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800f430:	2800      	cmp	r0, #0
 800f432:	f000 80de 	beq.w	800f5f2 <LoRaMacMcpsRequest+0x1ca>
 800f436:	f04f 0a00 	mov.w	sl, #0
 800f43a:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800f43c:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800f440:	f7fe fe64 	bl	800e10c <LoRaMacIsBusy>
 800f444:	4680      	mov	r8, r0
 800f446:	b118      	cbz	r0, 800f450 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800f448:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800f44a:	b011      	add	sp, #68	; 0x44
 800f44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800f450:	ac06      	add	r4, sp, #24
 800f452:	462e      	mov	r6, r5
 800f454:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f458:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800f45c:	4651      	mov	r1, sl
 800f45e:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f462:	4c66      	ldr	r4, [pc, #408]	; (800f5fc <LoRaMacMcpsRequest+0x1d4>)
 800f464:	2214      	movs	r2, #20
 800f466:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 800f46a:	f003 fc80 	bl	8012d6e <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f46e:	2301      	movs	r3, #1
 800f470:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800f474:	4b62      	ldr	r3, [pc, #392]	; (800f600 <LoRaMacMcpsRequest+0x1d8>)
 800f476:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800f47a:	2b02      	cmp	r3, #2
 800f47c:	d065      	beq.n	800f54a <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800f47e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800f482:	2f01      	cmp	r7, #1
 800f484:	f000 8086 	beq.w	800f594 <LoRaMacMcpsRequest+0x16c>
 800f488:	2f03      	cmp	r7, #3
 800f48a:	f000 8096 	beq.w	800f5ba <LoRaMacMcpsRequest+0x192>
 800f48e:	2f00      	cmp	r7, #0
 800f490:	d06d      	beq.n	800f56e <LoRaMacMcpsRequest+0x146>
 800f492:	f04f 0b00 	mov.w	fp, #0
 800f496:	f8cd b014 	str.w	fp, [sp, #20]
 800f49a:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f49e:	2302      	movs	r3, #2
 800f4a0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f4a4:	4e56      	ldr	r6, [pc, #344]	; (800f600 <LoRaMacMcpsRequest+0x1d8>)
 800f4a6:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800f4aa:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f4ae:	a90e      	add	r1, sp, #56	; 0x38
 800f4b0:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800f4b4:	f001 f9f6 	bl	80108a4 <RegionGetPhyParam>
 800f4b8:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f4ba:	b244      	sxtb	r4, r0
 800f4bc:	45a3      	cmp	fp, r4
 800f4be:	bfb8      	it	lt
 800f4c0:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800f4c2:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 800f4c6:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 800f4ca:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 800f4ce:	4648      	mov	r0, r9
 800f4d0:	f7fc fcea 	bl	800bea8 <CheckForMinimumAbpDatarate>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	b900      	cbnz	r0, 800f4da <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f4d8:	465c      	mov	r4, fp
    if( readyToSend == true )
 800f4da:	f1b8 0f00 	cmp.w	r8, #0
 800f4de:	f000 8082 	beq.w	800f5e6 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800f4e2:	f1b9 0f00 	cmp.w	r9, #0
 800f4e6:	d000      	beq.n	800f4ea <LoRaMacMcpsRequest+0xc2>
 800f4e8:	b19b      	cbz	r3, 800f512 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800f4ea:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f4ee:	4b44      	ldr	r3, [pc, #272]	; (800f600 <LoRaMacMcpsRequest+0x1d8>)
 800f4f0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800f4f4:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800f4f8:	2205      	movs	r2, #5
 800f4fa:	a90b      	add	r1, sp, #44	; 0x2c
 800f4fc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f500:	f001 f9f1 	bl	80108e6 <RegionVerify>
 800f504:	2800      	cmp	r0, #0
 800f506:	d076      	beq.n	800f5f6 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f508:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800f50c:	4b3c      	ldr	r3, [pc, #240]	; (800f600 <LoRaMacMcpsRequest+0x1d8>)
 800f50e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f512:	4b3a      	ldr	r3, [pc, #232]	; (800f5fc <LoRaMacMcpsRequest+0x1d4>)
 800f514:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800f518:	4b39      	ldr	r3, [pc, #228]	; (800f600 <LoRaMacMcpsRequest+0x1d8>)
 800f51a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800f51e:	f7fd fe51 	bl	800d1c4 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800f522:	9b03      	ldr	r3, [sp, #12]
 800f524:	9300      	str	r3, [sp, #0]
 800f526:	4653      	mov	r3, sl
 800f528:	9a05      	ldr	r2, [sp, #20]
 800f52a:	9904      	ldr	r1, [sp, #16]
 800f52c:	a80c      	add	r0, sp, #48	; 0x30
 800f52e:	f7fe fd5d 	bl	800dfec <Send>
        if( status == LORAMAC_STATUS_OK )
 800f532:	2800      	cmp	r0, #0
 800f534:	d152      	bne.n	800f5dc <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800f536:	4b31      	ldr	r3, [pc, #196]	; (800f5fc <LoRaMacMcpsRequest+0x1d4>)
 800f538:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800f53c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800f540:	f042 0201 	orr.w	r2, r2, #1
 800f544:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800f548:	e04e      	b.n	800f5e8 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800f54a:	4b2d      	ldr	r3, [pc, #180]	; (800f600 <LoRaMacMcpsRequest+0x1d8>)
 800f54c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800f550:	2b02      	cmp	r3, #2
 800f552:	d194      	bne.n	800f47e <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800f554:	4b2a      	ldr	r3, [pc, #168]	; (800f600 <LoRaMacMcpsRequest+0x1d8>)
 800f556:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d18f      	bne.n	800f47e <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800f55e:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800f562:	2b00      	cmp	r3, #0
 800f564:	d18b      	bne.n	800f47e <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800f566:	2301      	movs	r3, #1
 800f568:	f88d 3018 	strb.w	r3, [sp, #24]
 800f56c:	e787      	b.n	800f47e <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800f56e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f572:	2202      	movs	r2, #2
 800f574:	f362 1347 	bfi	r3, r2, #5, #3
 800f578:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800f57c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800f580:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800f582:	9b08      	ldr	r3, [sp, #32]
 800f584:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800f586:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800f58a:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800f58e:	f04f 0801 	mov.w	r8, #1
            break;
 800f592:	e784      	b.n	800f49e <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800f594:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f598:	2204      	movs	r2, #4
 800f59a:	f362 1347 	bfi	r3, r2, #5, #3
 800f59e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800f5a2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800f5a6:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800f5a8:	9b08      	ldr	r3, [sp, #32]
 800f5aa:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800f5ac:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800f5b0:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800f5b4:	f04f 0801 	mov.w	r8, #1
            break;
 800f5b8:	e771      	b.n	800f49e <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800f5ba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f5be:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800f5c2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800f5c6:	9b07      	ldr	r3, [sp, #28]
 800f5c8:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800f5ca:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800f5ce:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800f5d2:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	9304      	str	r3, [sp, #16]
            break;
 800f5da:	e760      	b.n	800f49e <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800f5dc:	4b07      	ldr	r3, [pc, #28]	; (800f5fc <LoRaMacMcpsRequest+0x1d4>)
 800f5de:	2200      	movs	r2, #0
 800f5e0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800f5e4:	e000      	b.n	800f5e8 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f5e6:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f5e8:	4b04      	ldr	r3, [pc, #16]	; (800f5fc <LoRaMacMcpsRequest+0x1d4>)
 800f5ea:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800f5ee:	612b      	str	r3, [r5, #16]
    return status;
 800f5f0:	e72b      	b.n	800f44a <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f5f2:	2003      	movs	r0, #3
 800f5f4:	e729      	b.n	800f44a <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f5f6:	2003      	movs	r0, #3
 800f5f8:	e727      	b.n	800f44a <LoRaMacMcpsRequest+0x22>
 800f5fa:	bf00      	nop
 800f5fc:	20000d18 	.word	0x20000d18
 800f600:	20008000 	.word	0x20008000

0800f604 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800f604:	b510      	push	{r4, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800f60a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800f60e:	220f      	movs	r2, #15
 800f610:	a901      	add	r1, sp, #4
 800f612:	4b09      	ldr	r3, [pc, #36]	; (800f638 <LoRaMacTestSetDutyCycleOn+0x34>)
 800f614:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f618:	f001 f965 	bl	80108e6 <RegionVerify>
 800f61c:	b148      	cbz	r0, 800f632 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800f61e:	4b06      	ldr	r3, [pc, #24]	; (800f638 <LoRaMacTestSetDutyCycleOn+0x34>)
 800f620:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f624:	4a05      	ldr	r2, [pc, #20]	; (800f63c <LoRaMacTestSetDutyCycleOn+0x38>)
 800f626:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f62a:	f043 0320 	orr.w	r3, r3, #32
 800f62e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800f632:	b002      	add	sp, #8
 800f634:	bd10      	pop	{r4, pc}
 800f636:	bf00      	nop
 800f638:	20008000 	.word	0x20008000
 800f63c:	20000d18 	.word	0x20000d18

0800f640 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800f640:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800f642:	f7fe ffc1 	bl	800e5c8 <LoRaMacStop>
 800f646:	b110      	cbz	r0, 800f64e <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800f648:	2401      	movs	r4, #1
    }
}
 800f64a:	4620      	mov	r0, r4
 800f64c:	bd38      	pop	{r3, r4, r5, pc}
 800f64e:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800f650:	4d0a      	ldr	r5, [pc, #40]	; (800f67c <LoRaMacDeInitialization+0x3c>)
 800f652:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800f656:	f005 fd97 	bl	8015188 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800f65a:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800f65e:	f005 fd93 	bl	8015188 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f662:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800f666:	f005 fd8f 	bl	8015188 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800f66a:	f000 f899 	bl	800f7a0 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800f66e:	2000      	movs	r0, #0
 800f670:	f7fe fa76 	bl	800db60 <ResetMacParameters>
        Radio.Sleep( );
 800f674:	4b02      	ldr	r3, [pc, #8]	; (800f680 <LoRaMacDeInitialization+0x40>)
 800f676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f678:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800f67a:	e7e6      	b.n	800f64a <LoRaMacDeInitialization+0xa>
 800f67c:	20000d18 	.word	0x20000d18
 800f680:	0801af08 	.word	0x0801af08

0800f684 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800f684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f688:	b08b      	sub	sp, #44	; 0x2c
 800f68a:	460f      	mov	r7, r1
 800f68c:	4616      	mov	r6, r2
 800f68e:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800f690:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800f694:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800f698:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800f69c:	6842      	ldr	r2, [r0, #4]
 800f69e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6a0:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800f6a2:	f890 8001 	ldrb.w	r8, [r0, #1]
 800f6a6:	f1b8 0f00 	cmp.w	r8, #0
 800f6aa:	d109      	bne.n	800f6c0 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800f6ac:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800f6b0:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800f6b4:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	b00b      	add	sp, #44	; 0x2c
 800f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c0:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800f6c2:	2302      	movs	r3, #2
 800f6c4:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f6c8:	7bc3      	ldrb	r3, [r0, #15]
 800f6ca:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f6ce:	a908      	add	r1, sp, #32
 800f6d0:	7c00      	ldrb	r0, [r0, #16]
 800f6d2:	f001 f8e7 	bl	80108a4 <RegionGetPhyParam>
 800f6d6:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800f6d8:	b243      	sxtb	r3, r0
 800f6da:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800f6dc:	454b      	cmp	r3, r9
 800f6de:	bfb8      	it	lt
 800f6e0:	464b      	movlt	r3, r9
 800f6e2:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800f6e4:	6862      	ldr	r2, [r4, #4]
 800f6e6:	8923      	ldrh	r3, [r4, #8]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d201      	bcs.n	800f6f0 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800f6ec:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800f6f0:	8961      	ldrh	r1, [r4, #10]
 800f6f2:	440b      	add	r3, r1
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d224      	bcs.n	800f742 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800f6f8:	6863      	ldr	r3, [r4, #4]
 800f6fa:	8921      	ldrh	r1, [r4, #8]
 800f6fc:	8962      	ldrh	r2, [r4, #10]
 800f6fe:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800f702:	4283      	cmp	r3, r0
 800f704:	d332      	bcc.n	800f76c <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800f706:	1a5b      	subs	r3, r3, r1
 800f708:	fbb3 f1f2 	udiv	r1, r3, r2
 800f70c:	fb02 3311 	mls	r3, r2, r1, r3
 800f710:	bb7b      	cbnz	r3, 800f772 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800f712:	9b01      	ldr	r3, [sp, #4]
 800f714:	4599      	cmp	r9, r3
 800f716:	dc03      	bgt.n	800f720 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800f718:	7823      	ldrb	r3, [r4, #0]
 800f71a:	b9eb      	cbnz	r3, 800f758 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800f71c:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800f720:	2321      	movs	r3, #33	; 0x21
 800f722:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800f726:	9b00      	ldr	r3, [sp, #0]
 800f728:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f72c:	7be3      	ldrb	r3, [r4, #15]
 800f72e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f732:	a908      	add	r1, sp, #32
 800f734:	7c20      	ldrb	r0, [r4, #16]
 800f736:	f001 f8b5 	bl	80108a4 <RegionGetPhyParam>
 800f73a:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800f73c:	fa4f f980 	sxtb.w	r9, r0
 800f740:	e7b4      	b.n	800f6ac <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800f742:	230a      	movs	r3, #10
 800f744:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f748:	a908      	add	r1, sp, #32
 800f74a:	7c20      	ldrb	r0, [r4, #16]
 800f74c:	f001 f8aa 	bl	80108a4 <RegionGetPhyParam>
 800f750:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800f752:	fa4f fa80 	sxtb.w	sl, r0
 800f756:	e7cf      	b.n	800f6f8 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f758:	2302      	movs	r3, #2
 800f75a:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800f75e:	a903      	add	r1, sp, #12
 800f760:	7c20      	ldrb	r0, [r4, #16]
 800f762:	f001 f8b8 	bl	80108d6 <RegionInitDefaults>
                    nbTrans = 1;
 800f766:	f04f 0b01 	mov.w	fp, #1
 800f76a:	e7d9      	b.n	800f720 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800f76c:	f8dd 9000 	ldr.w	r9, [sp]
 800f770:	e79c      	b.n	800f6ac <LoRaMacAdrCalcNext+0x28>
 800f772:	f8dd 9000 	ldr.w	r9, [sp]
 800f776:	e799      	b.n	800f6ac <LoRaMacAdrCalcNext+0x28>

0800f778 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f778:	4770      	bx	lr

0800f77a <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f77a:	4770      	bx	lr

0800f77c <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f77c:	4770      	bx	lr

0800f77e <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f77e:	4770      	bx	lr

0800f780 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f780:	2000      	movs	r0, #0
 800f782:	4770      	bx	lr

0800f784 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f784:	4770      	bx	lr

0800f786 <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f786:	4770      	bx	lr

0800f788 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f788:	4770      	bx	lr

0800f78a <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f78a:	2000      	movs	r0, #0
 800f78c:	4770      	bx	lr

0800f78e <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f78e:	2000      	movs	r0, #0
 800f790:	4770      	bx	lr

0800f792 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f792:	2000      	movs	r0, #0
 800f794:	4770      	bx	lr

0800f796 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f796:	2000      	movs	r0, #0
 800f798:	4770      	bx	lr

0800f79a <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f79a:	2000      	movs	r0, #0
 800f79c:	4770      	bx	lr

0800f79e <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f79e:	4770      	bx	lr

0800f7a0 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7a0:	4770      	bx	lr

0800f7a2 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7a2:	4770      	bx	lr

0800f7a4 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7a4:	2002      	movs	r0, #2
 800f7a6:	4770      	bx	lr

0800f7a8 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7a8:	2002      	movs	r0, #2
 800f7aa:	4770      	bx	lr

0800f7ac <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7ac:	2002      	movs	r0, #2
 800f7ae:	4770      	bx	lr

0800f7b0 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7b0:	4770      	bx	lr

0800f7b2 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7b2:	2000      	movs	r0, #0
 800f7b4:	4770      	bx	lr

0800f7b6 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7b6:	4770      	bx	lr

0800f7b8 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7b8:	4770      	bx	lr

0800f7ba <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	4770      	bx	lr

0800f7be <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7be:	2000      	movs	r0, #0
 800f7c0:	4770      	bx	lr

0800f7c2 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7c2:	4770      	bx	lr

0800f7c4 <LoRaMacClassBSetMulticastPeriodicity>:
    {
        multicastChannel->PingNb = CalcPingNb( multicastChannel->ChannelParams.RxParams.Params.ClassB.Periodicity );
        multicastChannel->PingPeriod = CalcPingPeriod( multicastChannel->PingNb );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7c4:	4770      	bx	lr

0800f7c6 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7c6:	4770      	bx	lr

0800f7c8 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f7c8:	4770      	bx	lr

0800f7ca <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	2b0f      	cmp	r3, #15
 800f7ce:	d804      	bhi.n	800f7da <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800f7d0:	5cc2      	ldrb	r2, [r0, r3]
 800f7d2:	b922      	cbnz	r2, 800f7de <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	e7f8      	b.n	800f7cc <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800f7da:	2001      	movs	r0, #1
 800f7dc:	4770      	bx	lr
            return false;
 800f7de:	2000      	movs	r0, #0
}
 800f7e0:	4770      	bx	lr
	...

0800f7e4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800f7e4:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800f7e6:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800f7e8:	0123      	lsls	r3, r4, #4
 800f7ea:	3308      	adds	r3, #8
 800f7ec:	4d06      	ldr	r5, [pc, #24]	; (800f808 <MallocNewMacCommandSlot+0x24>)
 800f7ee:	441d      	add	r5, r3
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	f7ff ffea 	bl	800f7ca <IsSlotFree>
 800f7f6:	b920      	cbnz	r0, 800f802 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800f7f8:	3401      	adds	r4, #1
 800f7fa:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800f7fc:	2c20      	cmp	r4, #32
 800f7fe:	d1f3      	bne.n	800f7e8 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800f800:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800f802:	4628      	mov	r0, r5
 800f804:	bd38      	pop	{r3, r4, r5, pc}
 800f806:	bf00      	nop
 800f808:	200012d8 	.word	0x200012d8

0800f80c <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800f80c:	b120      	cbz	r0, 800f818 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800f80e:	2200      	movs	r2, #0
 800f810:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800f812:	6042      	str	r2, [r0, #4]

    return true;
 800f814:	2001      	movs	r0, #1
 800f816:	4770      	bx	lr
        return false;
 800f818:	2000      	movs	r0, #0
}
 800f81a:	4770      	bx	lr

0800f81c <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800f81c:	4603      	mov	r3, r0
 800f81e:	b160      	cbz	r0, 800f83a <LinkedListAdd+0x1e>
 800f820:	b169      	cbz	r1, 800f83e <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800f822:	6802      	ldr	r2, [r0, #0]
 800f824:	b13a      	cbz	r2, 800f836 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800f826:	685a      	ldr	r2, [r3, #4]
 800f828:	b102      	cbz	r2, 800f82c <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800f82a:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800f82c:	2200      	movs	r2, #0
 800f82e:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800f830:	6059      	str	r1, [r3, #4]

    return true;
 800f832:	2001      	movs	r0, #1
 800f834:	4770      	bx	lr
        list->First = element;
 800f836:	6001      	str	r1, [r0, #0]
 800f838:	e7f5      	b.n	800f826 <LinkedListAdd+0xa>
        return false;
 800f83a:	2000      	movs	r0, #0
 800f83c:	4770      	bx	lr
 800f83e:	2000      	movs	r0, #0
}
 800f840:	4770      	bx	lr

0800f842 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800f842:	b160      	cbz	r0, 800f85e <LinkedListGetPrevious+0x1c>
 800f844:	b161      	cbz	r1, 800f860 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800f846:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800f848:	4281      	cmp	r1, r0
 800f84a:	d102      	bne.n	800f852 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800f84c:	2000      	movs	r0, #0
    }

    return curElement;
}
 800f84e:	4770      	bx	lr
            curElement = curElement->Next;
 800f850:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f852:	2800      	cmp	r0, #0
 800f854:	d0fb      	beq.n	800f84e <LinkedListGetPrevious+0xc>
 800f856:	6803      	ldr	r3, [r0, #0]
 800f858:	428b      	cmp	r3, r1
 800f85a:	d1f9      	bne.n	800f850 <LinkedListGetPrevious+0xe>
 800f85c:	4770      	bx	lr
 800f85e:	4770      	bx	lr
        return NULL;
 800f860:	4608      	mov	r0, r1
 800f862:	4770      	bx	lr

0800f864 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800f864:	b1b8      	cbz	r0, 800f896 <LinkedListRemove+0x32>
{
 800f866:	b538      	push	{r3, r4, r5, lr}
 800f868:	460c      	mov	r4, r1
 800f86a:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800f86c:	b1a9      	cbz	r1, 800f89a <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800f86e:	f7ff ffe8 	bl	800f842 <LinkedListGetPrevious>

    if( list->First == element )
 800f872:	682b      	ldr	r3, [r5, #0]
 800f874:	42a3      	cmp	r3, r4
 800f876:	d009      	beq.n	800f88c <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800f878:	686b      	ldr	r3, [r5, #4]
 800f87a:	42a3      	cmp	r3, r4
 800f87c:	d009      	beq.n	800f892 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800f87e:	b108      	cbz	r0, 800f884 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800f880:	6823      	ldr	r3, [r4, #0]
 800f882:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800f884:	2300      	movs	r3, #0
 800f886:	6023      	str	r3, [r4, #0]

    return true;
 800f888:	2001      	movs	r0, #1
}
 800f88a:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800f88c:	6823      	ldr	r3, [r4, #0]
 800f88e:	602b      	str	r3, [r5, #0]
 800f890:	e7f2      	b.n	800f878 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800f892:	6068      	str	r0, [r5, #4]
 800f894:	e7f3      	b.n	800f87e <LinkedListRemove+0x1a>
        return false;
 800f896:	2000      	movs	r0, #0
}
 800f898:	4770      	bx	lr
        return false;
 800f89a:	2000      	movs	r0, #0
 800f89c:	e7f5      	b.n	800f88a <LinkedListRemove+0x26>
	...

0800f8a0 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800f8a0:	2811      	cmp	r0, #17
 800f8a2:	d805      	bhi.n	800f8b0 <IsSticky+0x10>
 800f8a4:	4b03      	ldr	r3, [pc, #12]	; (800f8b4 <IsSticky+0x14>)
 800f8a6:	fa23 f000 	lsr.w	r0, r3, r0
 800f8aa:	f000 0001 	and.w	r0, r0, #1
 800f8ae:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800f8b0:	2000      	movs	r0, #0
    }
}
 800f8b2:	4770      	bx	lr
 800f8b4:	00020720 	.word	0x00020720

0800f8b8 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	4770      	bx	lr

0800f8bc <FreeMacCommandSlot>:
    if( slot == NULL )
 800f8bc:	b130      	cbz	r0, 800f8cc <FreeMacCommandSlot+0x10>
{
 800f8be:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800f8c0:	2210      	movs	r2, #16
 800f8c2:	2100      	movs	r1, #0
 800f8c4:	f003 fa53 	bl	8012d6e <memset1>
    return true;
 800f8c8:	2001      	movs	r0, #1
}
 800f8ca:	bd08      	pop	{r3, pc}
        return false;
 800f8cc:	2000      	movs	r0, #0
}
 800f8ce:	4770      	bx	lr

0800f8d0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800f8d0:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800f8d2:	4c06      	ldr	r4, [pc, #24]	; (800f8ec <LoRaMacCommandsInit+0x1c>)
 800f8d4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800f8d8:	2100      	movs	r1, #0
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f003 fa47 	bl	8012d6e <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f7ff ff93 	bl	800f80c <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	bd10      	pop	{r4, pc}
 800f8ea:	bf00      	nop
 800f8ec:	200012d8 	.word	0x200012d8

0800f8f0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800f8f0:	b321      	cbz	r1, 800f93c <LoRaMacCommandsAddCmd+0x4c>
{
 800f8f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8f4:	4605      	mov	r5, r0
 800f8f6:	4614      	mov	r4, r2
 800f8f8:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800f8fa:	f7ff ff73 	bl	800f7e4 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800f8fe:	4606      	mov	r6, r0
 800f900:	b1f0      	cbz	r0, 800f940 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800f902:	4601      	mov	r1, r0
 800f904:	4810      	ldr	r0, [pc, #64]	; (800f948 <LoRaMacCommandsAddCmd+0x58>)
 800f906:	f7ff ff89 	bl	800f81c <LinkedListAdd>
 800f90a:	b1d8      	cbz	r0, 800f944 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800f90c:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800f90e:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800f910:	b2a2      	uxth	r2, r4
 800f912:	4639      	mov	r1, r7
 800f914:	1d70      	adds	r0, r6, #5
 800f916:	f003 fa12 	bl	8012d3e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800f91a:	4628      	mov	r0, r5
 800f91c:	f7ff ffc0 	bl	800f8a0 <IsSticky>
 800f920:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800f922:	4628      	mov	r0, r5
 800f924:	f7ff ffc8 	bl	800f8b8 <IsConfirmationRequired>
 800f928:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800f92a:	4b07      	ldr	r3, [pc, #28]	; (800f948 <LoRaMacCommandsAddCmd+0x58>)
 800f92c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f930:	4414      	add	r4, r2
 800f932:	3401      	adds	r4, #1
 800f934:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800f938:	2000      	movs	r0, #0
}
 800f93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f93c:	2001      	movs	r0, #1
}
 800f93e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800f940:	2002      	movs	r0, #2
 800f942:	e7fa      	b.n	800f93a <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800f944:	2005      	movs	r0, #5
 800f946:	e7f8      	b.n	800f93a <LoRaMacCommandsAddCmd+0x4a>
 800f948:	200012d8 	.word	0x200012d8

0800f94c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800f94c:	b1a0      	cbz	r0, 800f978 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800f94e:	b510      	push	{r4, lr}
 800f950:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800f952:	4601      	mov	r1, r0
 800f954:	480b      	ldr	r0, [pc, #44]	; (800f984 <LoRaMacCommandsRemoveCmd+0x38>)
 800f956:	f7ff ff85 	bl	800f864 <LinkedListRemove>
 800f95a:	b178      	cbz	r0, 800f97c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800f95c:	68a1      	ldr	r1, [r4, #8]
 800f95e:	4a09      	ldr	r2, [pc, #36]	; (800f984 <LoRaMacCommandsRemoveCmd+0x38>)
 800f960:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800f964:	1a5b      	subs	r3, r3, r1
 800f966:	3b01      	subs	r3, #1
 800f968:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800f96c:	4620      	mov	r0, r4
 800f96e:	f7ff ffa5 	bl	800f8bc <FreeMacCommandSlot>
 800f972:	b128      	cbz	r0, 800f980 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f974:	2000      	movs	r0, #0
}
 800f976:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f978:	2001      	movs	r0, #1
}
 800f97a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f97c:	2003      	movs	r0, #3
 800f97e:	e7fa      	b.n	800f976 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800f980:	2005      	movs	r0, #5
 800f982:	e7f8      	b.n	800f976 <LoRaMacCommandsRemoveCmd+0x2a>
 800f984:	200012d8 	.word	0x200012d8

0800f988 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f988:	4b06      	ldr	r3, [pc, #24]	; (800f9a4 <LoRaMacCommandsGetCmd+0x1c>)
 800f98a:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800f98c:	e000      	b.n	800f990 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800f98e:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800f990:	b113      	cbz	r3, 800f998 <LoRaMacCommandsGetCmd+0x10>
 800f992:	791a      	ldrb	r2, [r3, #4]
 800f994:	4282      	cmp	r2, r0
 800f996:	d1fa      	bne.n	800f98e <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800f998:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800f99a:	b10b      	cbz	r3, 800f9a0 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800f99c:	2000      	movs	r0, #0
 800f99e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f9a0:	2003      	movs	r0, #3
}
 800f9a2:	4770      	bx	lr
 800f9a4:	200012d8 	.word	0x200012d8

0800f9a8 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f9a8:	4b0a      	ldr	r3, [pc, #40]	; (800f9d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800f9aa:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f9ac:	b120      	cbz	r0, 800f9b8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800f9ae:	7b03      	ldrb	r3, [r0, #12]
 800f9b0:	b11b      	cbz	r3, 800f9ba <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800f9b2:	6800      	ldr	r0, [r0, #0]
 800f9b4:	e7fa      	b.n	800f9ac <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f9b6:	bd10      	pop	{r4, pc}
 800f9b8:	4770      	bx	lr
{
 800f9ba:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800f9bc:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800f9be:	f7ff ffc5 	bl	800f94c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800f9c2:	4620      	mov	r0, r4
    while( curElement != NULL )
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d0f6      	beq.n	800f9b6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800f9c8:	7b03      	ldrb	r3, [r0, #12]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d0f6      	beq.n	800f9bc <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800f9ce:	6800      	ldr	r0, [r0, #0]
 800f9d0:	e7f8      	b.n	800f9c4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800f9d2:	bf00      	nop
 800f9d4:	200012d8 	.word	0x200012d8

0800f9d8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800f9d8:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f9da:	4b0b      	ldr	r3, [pc, #44]	; (800fa08 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800f9dc:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f9de:	e000      	b.n	800f9e2 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800f9e0:	4634      	mov	r4, r6
    while( curElement != NULL )
 800f9e2:	b17c      	cbz	r4, 800fa04 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800f9e4:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800f9e6:	7925      	ldrb	r5, [r4, #4]
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	f7ff ff59 	bl	800f8a0 <IsSticky>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	d0f6      	beq.n	800f9e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	f7ff ff60 	bl	800f8b8 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d1f1      	bne.n	800f9e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f7ff ffa5 	bl	800f94c <LoRaMacCommandsRemoveCmd>
 800fa02:	e7ed      	b.n	800f9e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800fa04:	2000      	movs	r0, #0
 800fa06:	bd70      	pop	{r4, r5, r6, pc}
 800fa08:	200012d8 	.word	0x200012d8

0800fa0c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800fa0c:	b128      	cbz	r0, 800fa1a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800fa0e:	4a04      	ldr	r2, [pc, #16]	; (800fa20 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800fa10:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800fa14:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800fa16:	2000      	movs	r0, #0
 800fa18:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fa1a:	2001      	movs	r0, #1
}
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	200012d8 	.word	0x200012d8

0800fa24 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800fa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800fa28:	4b16      	ldr	r3, [pc, #88]	; (800fa84 <LoRaMacCommandsSerializeCmds+0x60>)
 800fa2a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800fa2c:	b32a      	cbz	r2, 800fa7a <LoRaMacCommandsSerializeCmds+0x56>
 800fa2e:	4607      	mov	r7, r0
 800fa30:	4688      	mov	r8, r1
 800fa32:	4616      	mov	r6, r2
 800fa34:	b319      	cbz	r1, 800fa7e <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800fa36:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800fa38:	b194      	cbz	r4, 800fa60 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800fa3a:	1a7a      	subs	r2, r7, r1
 800fa3c:	68a3      	ldr	r3, [r4, #8]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d30d      	bcc.n	800fa60 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800fa44:	1c4d      	adds	r5, r1, #1
 800fa46:	b2ed      	uxtb	r5, r5
 800fa48:	7923      	ldrb	r3, [r4, #4]
 800fa4a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800fa4c:	8922      	ldrh	r2, [r4, #8]
 800fa4e:	1d61      	adds	r1, r4, #5
 800fa50:	1970      	adds	r0, r6, r5
 800fa52:	f003 f974 	bl	8012d3e <memcpy1>
            itr += curElement->PayloadSize;
 800fa56:	68a3      	ldr	r3, [r4, #8]
 800fa58:	441d      	add	r5, r3
 800fa5a:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800fa5c:	6824      	ldr	r4, [r4, #0]
 800fa5e:	e7eb      	b.n	800fa38 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800fa60:	b12c      	cbz	r4, 800fa6e <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800fa62:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800fa64:	4620      	mov	r0, r4
 800fa66:	f7ff ff71 	bl	800f94c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800fa6a:	462c      	mov	r4, r5
 800fa6c:	e7f8      	b.n	800fa60 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800fa6e:	4640      	mov	r0, r8
 800fa70:	f7ff ffcc 	bl	800fa0c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800fa74:	2000      	movs	r0, #0
}
 800fa76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fa7a:	2001      	movs	r0, #1
 800fa7c:	e7fb      	b.n	800fa76 <LoRaMacCommandsSerializeCmds+0x52>
 800fa7e:	2001      	movs	r0, #1
 800fa80:	e7f9      	b.n	800fa76 <LoRaMacCommandsSerializeCmds+0x52>
 800fa82:	bf00      	nop
 800fa84:	200012d8 	.word	0x200012d8

0800fa88 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800fa88:	1e83      	subs	r3, r0, #2
 800fa8a:	2b11      	cmp	r3, #17
 800fa8c:	d80a      	bhi.n	800faa4 <LoRaMacCommandsGetCmdSize+0x1c>
 800fa8e:	e8df f003 	tbb	[pc, r3]
 800fa92:	0b23      	.short	0x0b23
 800fa94:	110f240d 	.word	0x110f240d
 800fa98:	09171513 	.word	0x09171513
 800fa9c:	09091909 	.word	0x09091909
 800faa0:	211f1d1b 	.word	0x211f1d1b
 800faa4:	2000      	movs	r0, #0
 800faa6:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800faa8:	2005      	movs	r0, #5
            break;
 800faaa:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800faac:	2002      	movs	r0, #2
            break;
 800faae:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800fab0:	2001      	movs	r0, #1
            break;
 800fab2:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800fab4:	2006      	movs	r0, #6
            break;
 800fab6:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800fab8:	2002      	movs	r0, #2
            break;
 800faba:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800fabc:	2002      	movs	r0, #2
            break;
 800fabe:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800fac0:	2005      	movs	r0, #5
            break;
 800fac2:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800fac4:	2006      	movs	r0, #6
            break;
 800fac6:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800fac8:	2001      	movs	r0, #1
            break;
 800faca:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800facc:	2005      	movs	r0, #5
            break;
 800face:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800fad0:	2004      	movs	r0, #4
            break;
 800fad2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800fad4:	2004      	movs	r0, #4
            break;
 800fad6:	4770      	bx	lr
            cidSize = 3;
 800fad8:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800fada:	4770      	bx	lr

0800fadc <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800fadc:	4b03      	ldr	r3, [pc, #12]	; (800faec <IncreaseBufferPointer+0x10>)
 800fade:	4298      	cmp	r0, r3
 800fae0:	d001      	beq.n	800fae6 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800fae2:	3004      	adds	r0, #4
 800fae4:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800fae6:	4802      	ldr	r0, [pc, #8]	; (800faf0 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	20001500 	.word	0x20001500
 800faf0:	200014f0 	.word	0x200014f0

0800faf4 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800faf4:	b108      	cbz	r0, 800fafa <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800faf6:	2000      	movs	r0, #0
 800faf8:	4770      	bx	lr
        return true;
 800fafa:	2001      	movs	r0, #1
}
 800fafc:	4770      	bx	lr

0800fafe <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800fafe:	2804      	cmp	r0, #4
 800fb00:	d801      	bhi.n	800fb06 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800fb02:	2000      	movs	r0, #0
 800fb04:	4770      	bx	lr
        return true;
 800fb06:	2001      	movs	r0, #1
}
 800fb08:	4770      	bx	lr
	...

0800fb0c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800fb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb0e:	4606      	mov	r6, r0
 800fb10:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fb12:	4b0d      	ldr	r3, [pc, #52]	; (800fb48 <GetElement+0x3c>)
 800fb14:	f893 7020 	ldrb.w	r7, [r3, #32]
 800fb18:	4638      	mov	r0, r7
 800fb1a:	f7ff ffeb 	bl	800faf4 <IsListEmpty>
 800fb1e:	b970      	cbnz	r0, 800fb3e <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800fb20:	2500      	movs	r5, #0
 800fb22:	42af      	cmp	r7, r5
 800fb24:	d909      	bls.n	800fb3a <GetElement+0x2e>
    {
        if( element->Request == request )
 800fb26:	7823      	ldrb	r3, [r4, #0]
 800fb28:	42b3      	cmp	r3, r6
 800fb2a:	d00a      	beq.n	800fb42 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f7ff ffd5 	bl	800fadc <IncreaseBufferPointer>
 800fb32:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800fb34:	3501      	adds	r5, #1
 800fb36:	b2ed      	uxtb	r5, r5
 800fb38:	e7f3      	b.n	800fb22 <GetElement+0x16>
    }

    return NULL;
 800fb3a:	2000      	movs	r0, #0
}
 800fb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800fb3e:	2000      	movs	r0, #0
 800fb40:	e7fc      	b.n	800fb3c <GetElement+0x30>
            return element;
 800fb42:	4620      	mov	r0, r4
 800fb44:	e7fa      	b.n	800fb3c <GetElement+0x30>
 800fb46:	bf00      	nop
 800fb48:	200014e4 	.word	0x200014e4

0800fb4c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800fb4c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800fb4e:	4c08      	ldr	r4, [pc, #32]	; (800fb70 <LoRaMacConfirmQueueInit+0x24>)
 800fb50:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800fb52:	2300      	movs	r3, #0
 800fb54:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800fb58:	f104 000c 	add.w	r0, r4, #12
 800fb5c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800fb5e:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800fb60:	2214      	movs	r2, #20
 800fb62:	21ff      	movs	r1, #255	; 0xff
 800fb64:	f003 f903 	bl	8012d6e <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800fb6e:	bd10      	pop	{r4, pc}
 800fb70:	200014e4 	.word	0x200014e4

0800fb74 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800fb74:	b538      	push	{r3, r4, r5, lr}
 800fb76:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fb78:	4b0f      	ldr	r3, [pc, #60]	; (800fbb8 <LoRaMacConfirmQueueAdd+0x44>)
 800fb7a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fb7e:	f7ff ffbe 	bl	800fafe <IsListFull>
 800fb82:	b9b8      	cbnz	r0, 800fbb4 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800fb84:	4c0c      	ldr	r4, [pc, #48]	; (800fbb8 <LoRaMacConfirmQueueAdd+0x44>)
 800fb86:	68a3      	ldr	r3, [r4, #8]
 800fb88:	782a      	ldrb	r2, [r5, #0]
 800fb8a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800fb8c:	68a3      	ldr	r3, [r4, #8]
 800fb8e:	786a      	ldrb	r2, [r5, #1]
 800fb90:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800fb92:	68a3      	ldr	r3, [r4, #8]
 800fb94:	78ea      	ldrb	r2, [r5, #3]
 800fb96:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800fb98:	68a3      	ldr	r3, [r4, #8]
 800fb9a:	78aa      	ldrb	r2, [r5, #2]
 800fb9c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800fb9e:	f894 3020 	ldrb.w	r3, [r4, #32]
 800fba2:	3301      	adds	r3, #1
 800fba4:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800fba8:	68a0      	ldr	r0, [r4, #8]
 800fbaa:	f7ff ff97 	bl	800fadc <IncreaseBufferPointer>
 800fbae:	60a0      	str	r0, [r4, #8]

    return true;
 800fbb0:	2001      	movs	r0, #1
}
 800fbb2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800fbb4:	2000      	movs	r0, #0
 800fbb6:	e7fc      	b.n	800fbb2 <LoRaMacConfirmQueueAdd+0x3e>
 800fbb8:	200014e4 	.word	0x200014e4

0800fbbc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800fbbc:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fbbe:	4b09      	ldr	r3, [pc, #36]	; (800fbe4 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800fbc0:	f893 4020 	ldrb.w	r4, [r3, #32]
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	f7ff ff95 	bl	800faf4 <IsListEmpty>
 800fbca:	b948      	cbnz	r0, 800fbe0 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800fbcc:	4d05      	ldr	r5, [pc, #20]	; (800fbe4 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800fbce:	3c01      	subs	r4, #1
 800fbd0:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800fbd4:	6868      	ldr	r0, [r5, #4]
 800fbd6:	f7ff ff81 	bl	800fadc <IncreaseBufferPointer>
 800fbda:	6068      	str	r0, [r5, #4]

    return true;
 800fbdc:	2001      	movs	r0, #1
}
 800fbde:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	e7fc      	b.n	800fbde <LoRaMacConfirmQueueRemoveFirst+0x22>
 800fbe4:	200014e4 	.word	0x200014e4

0800fbe8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800fbe8:	b538      	push	{r3, r4, r5, lr}
 800fbea:	4605      	mov	r5, r0
 800fbec:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800fbee:	4b08      	ldr	r3, [pc, #32]	; (800fc10 <LoRaMacConfirmQueueSetStatus+0x28>)
 800fbf0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fbf4:	f7ff ff7e 	bl	800faf4 <IsListEmpty>
 800fbf8:	b948      	cbnz	r0, 800fc0e <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fbfa:	4b05      	ldr	r3, [pc, #20]	; (800fc10 <LoRaMacConfirmQueueSetStatus+0x28>)
 800fbfc:	689a      	ldr	r2, [r3, #8]
 800fbfe:	6859      	ldr	r1, [r3, #4]
 800fc00:	4620      	mov	r0, r4
 800fc02:	f7ff ff83 	bl	800fb0c <GetElement>
        if( element != NULL )
 800fc06:	b110      	cbz	r0, 800fc0e <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800fc08:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800fc0e:	bd38      	pop	{r3, r4, r5, pc}
 800fc10:	200014e4 	.word	0x200014e4

0800fc14 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800fc14:	b510      	push	{r4, lr}
 800fc16:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800fc18:	4b09      	ldr	r3, [pc, #36]	; (800fc40 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800fc1a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fc1e:	f7ff ff69 	bl	800faf4 <IsListEmpty>
 800fc22:	b940      	cbnz	r0, 800fc36 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fc24:	4b06      	ldr	r3, [pc, #24]	; (800fc40 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800fc26:	689a      	ldr	r2, [r3, #8]
 800fc28:	6859      	ldr	r1, [r3, #4]
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f7ff ff6e 	bl	800fb0c <GetElement>
        if( element != NULL )
 800fc30:	b118      	cbz	r0, 800fc3a <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800fc32:	7840      	ldrb	r0, [r0, #1]
 800fc34:	e000      	b.n	800fc38 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc36:	2001      	movs	r0, #1
}
 800fc38:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc3a:	2001      	movs	r0, #1
 800fc3c:	e7fc      	b.n	800fc38 <LoRaMacConfirmQueueGetStatus+0x24>
 800fc3e:	bf00      	nop
 800fc40:	200014e4 	.word	0x200014e4

0800fc44 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800fc48:	4b0c      	ldr	r3, [pc, #48]	; (800fc7c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800fc4a:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800fc4c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800fc50:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fc54:	f7ff ff4e 	bl	800faf4 <IsListEmpty>
 800fc58:	b150      	cbz	r0, 800fc70 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800fc5a:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800fc60:	4620      	mov	r0, r4
 800fc62:	f7ff ff3b 	bl	800fadc <IncreaseBufferPointer>
 800fc66:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800fc68:	4b04      	ldr	r3, [pc, #16]	; (800fc7c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	4283      	cmp	r3, r0
 800fc6e:	d0f4      	beq.n	800fc5a <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800fc70:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800fc72:	78e3      	ldrb	r3, [r4, #3]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1f3      	bne.n	800fc60 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800fc78:	e7f0      	b.n	800fc5c <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800fc7a:	bf00      	nop
 800fc7c:	200014e4 	.word	0x200014e4

0800fc80 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800fc80:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800fc82:	4b04      	ldr	r3, [pc, #16]	; (800fc94 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800fc84:	689a      	ldr	r2, [r3, #8]
 800fc86:	6859      	ldr	r1, [r3, #4]
 800fc88:	f7ff ff40 	bl	800fb0c <GetElement>
 800fc8c:	b100      	cbz	r0, 800fc90 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800fc8e:	2001      	movs	r0, #1
    }
    return false;
}
 800fc90:	bd08      	pop	{r3, pc}
 800fc92:	bf00      	nop
 800fc94:	200014e4 	.word	0x200014e4

0800fc98 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800fc98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800fc9e:	4b19      	ldr	r3, [pc, #100]	; (800fd04 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800fca0:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800fca4:	2204      	movs	r2, #4
 800fca6:	2100      	movs	r1, #0
 800fca8:	eb0d 0002 	add.w	r0, sp, r2
 800fcac:	f003 f85f 	bl	8012d6e <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800fcb0:	2400      	movs	r4, #0
 800fcb2:	e00d      	b.n	800fcd0 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800fcb4:	781a      	ldrb	r2, [r3, #0]
 800fcb6:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800fcba:	785a      	ldrb	r2, [r3, #1]
 800fcbc:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800fcc0:	78db      	ldrb	r3, [r3, #3]
 800fcc2:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800fcc6:	f7ff ff79 	bl	800fbbc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800fcca:	b1a5      	cbz	r5, 800fcf6 <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800fccc:	3401      	adds	r4, #1
 800fcce:	b2e4      	uxtb	r4, r4
 800fcd0:	42bc      	cmp	r4, r7
 800fcd2:	d214      	bcs.n	800fcfe <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800fcd4:	4b0b      	ldr	r3, [pc, #44]	; (800fd04 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800fcd6:	685a      	ldr	r2, [r3, #4]
 800fcd8:	7812      	ldrb	r2, [r2, #0]
 800fcda:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800fcdc:	685a      	ldr	r2, [r3, #4]
 800fcde:	7852      	ldrb	r2, [r2, #1]
 800fce0:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800fce6:	2d00      	cmp	r5, #0
 800fce8:	d0e4      	beq.n	800fcb4 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800fcea:	4b06      	ldr	r3, [pc, #24]	; (800fd04 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	689b      	ldr	r3, [r3, #8]
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	4798      	blx	r3
 800fcf4:	e7e7      	b.n	800fcc6 <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800fcf6:	a801      	add	r0, sp, #4
 800fcf8:	f7ff ff3c 	bl	800fb74 <LoRaMacConfirmQueueAdd>
 800fcfc:	e7e6      	b.n	800fccc <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800fcfe:	b003      	add	sp, #12
 800fd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd02:	bf00      	nop
 800fd04:	200014e4 	.word	0x200014e4

0800fd08 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800fd08:	4b01      	ldr	r3, [pc, #4]	; (800fd10 <LoRaMacConfirmQueueGetCnt+0x8>)
 800fd0a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fd0e:	4770      	bx	lr
 800fd10:	200014e4 	.word	0x200014e4

0800fd14 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800fd14:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fd16:	4b03      	ldr	r3, [pc, #12]	; (800fd24 <LoRaMacConfirmQueueIsFull+0x10>)
 800fd18:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fd1c:	f7ff feef 	bl	800fafe <IsListFull>
    }
    else
    {
        return false;
    }
}
 800fd20:	bd08      	pop	{r3, pc}
 800fd22:	bf00      	nop
 800fd24:	200014e4 	.word	0x200014e4

0800fd28 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800fd28:	b410      	push	{r4}
 800fd2a:	9c01      	ldr	r4, [sp, #4]
 800fd2c:	9902      	ldr	r1, [sp, #8]
 800fd2e:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800fd30:	b1da      	cbz	r2, 800fd6a <PrepareB0+0x42>
 800fd32:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800fd34:	2049      	movs	r0, #73	; 0x49
 800fd36:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800fd38:	2000      	movs	r0, #0
 800fd3a:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800fd3c:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800fd3e:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800fd40:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800fd42:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800fd44:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800fd46:	0a23      	lsrs	r3, r4, #8
 800fd48:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800fd4a:	0c23      	lsrs	r3, r4, #16
 800fd4c:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800fd4e:	0e24      	lsrs	r4, r4, #24
 800fd50:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800fd52:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800fd54:	0a0b      	lsrs	r3, r1, #8
 800fd56:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800fd58:	0c0b      	lsrs	r3, r1, #16
 800fd5a:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800fd5c:	0e09      	lsrs	r1, r1, #24
 800fd5e:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800fd60:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800fd62:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800fd66:	bc10      	pop	{r4}
 800fd68:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fd6a:	2009      	movs	r0, #9
 800fd6c:	e7fb      	b.n	800fd66 <PrepareB0+0x3e>

0800fd6e <PrepareB0ForDataBlock>:
 * \param [in] msgLen         - Length of message
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0ForDataBlock( uint16_t sessionCnt, uint8_t fragIndex, uint32_t descriptor, uint32_t msgLen, uint8_t* b0 )
{
 800fd6e:	b410      	push	{r4}
 800fd70:	9c01      	ldr	r4, [sp, #4]
    if( b0 == 0 )
 800fd72:	b1e4      	cbz	r4, 800fdae <PrepareB0ForDataBlock+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800fd74:	f04f 0c49 	mov.w	ip, #73	; 0x49
 800fd78:	f884 c000 	strb.w	ip, [r4]

    b0[1] = sessionCnt & 0xFF;
 800fd7c:	7060      	strb	r0, [r4, #1]
    b0[2] = ( sessionCnt >> 8 ) & 0xFF;
 800fd7e:	0a00      	lsrs	r0, r0, #8
 800fd80:	70a0      	strb	r0, [r4, #2]
 
    b0[3] = fragIndex;
 800fd82:	70e1      	strb	r1, [r4, #3]
    
    b0[4] = descriptor & 0xFF;
 800fd84:	7122      	strb	r2, [r4, #4]
    b0[5] = ( descriptor >> 8 ) & 0xFF;
 800fd86:	0a11      	lsrs	r1, r2, #8
 800fd88:	7161      	strb	r1, [r4, #5]
    b0[6] = ( descriptor >> 16 ) & 0xFF;
 800fd8a:	0c11      	lsrs	r1, r2, #16
 800fd8c:	71a1      	strb	r1, [r4, #6]
    b0[7] = ( descriptor >> 24 ) & 0xFF;
 800fd8e:	0e12      	lsrs	r2, r2, #24
 800fd90:	71e2      	strb	r2, [r4, #7]
    
    b0[8] = 0x00;
 800fd92:	2000      	movs	r0, #0
 800fd94:	7220      	strb	r0, [r4, #8]
    b0[9] = 0x00;
 800fd96:	7260      	strb	r0, [r4, #9]
    b0[10] = 0x00;
 800fd98:	72a0      	strb	r0, [r4, #10]
    b0[11] = 0x00;
 800fd9a:	72e0      	strb	r0, [r4, #11]

    b0[12] = msgLen & 0xFF;
 800fd9c:	7323      	strb	r3, [r4, #12]
    b0[13] = (msgLen >> 8) & 0xFF;
 800fd9e:	0a1a      	lsrs	r2, r3, #8
 800fda0:	7362      	strb	r2, [r4, #13]
    b0[14] = (msgLen >> 16) & 0xFF;
 800fda2:	0c1a      	lsrs	r2, r3, #16
 800fda4:	73a2      	strb	r2, [r4, #14]
    b0[15] = (msgLen >> 24) & 0xFF;
 800fda6:	0e1b      	lsrs	r3, r3, #24
 800fda8:	73e3      	strb	r3, [r4, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800fdaa:	bc10      	pop	{r4}
 800fdac:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fdae:	2009      	movs	r0, #9
 800fdb0:	e7fb      	b.n	800fdaa <PrepareB0ForDataBlock+0x3c>
	...

0800fdb4 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d80e      	bhi.n	800fdd8 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800fdba:	469c      	mov	ip, r3
 800fdbc:	4a07      	ldr	r2, [pc, #28]	; (800fddc <GetKeyAddrItem+0x28>)
 800fdbe:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800fdc2:	4282      	cmp	r2, r0
 800fdc4:	d002      	beq.n	800fdcc <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	e7f4      	b.n	800fdb6 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800fdcc:	4b03      	ldr	r3, [pc, #12]	; (800fddc <GetKeyAddrItem+0x28>)
 800fdce:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800fdd2:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800fdd4:	2000      	movs	r0, #0
 800fdd6:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800fdd8:	200b      	movs	r0, #11
}
 800fdda:	4770      	bx	lr
 800fddc:	20000204 	.word	0x20000204

0800fde0 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800fde0:	b1f1      	cbz	r1, 800fe20 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800fde2:	3801      	subs	r0, #1
 800fde4:	2803      	cmp	r0, #3
 800fde6:	d81d      	bhi.n	800fe24 <GetLastFcntDown+0x44>
 800fde8:	e8df f000 	tbb	[pc, r0]
 800fdec:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800fdf0:	4a0d      	ldr	r2, [pc, #52]	; (800fe28 <GetLastFcntDown+0x48>)
 800fdf2:	6812      	ldr	r2, [r2, #0]
 800fdf4:	6912      	ldr	r2, [r2, #16]
 800fdf6:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800fdf8:	2000      	movs	r0, #0
            break;
 800fdfa:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800fdfc:	4a0a      	ldr	r2, [pc, #40]	; (800fe28 <GetLastFcntDown+0x48>)
 800fdfe:	6812      	ldr	r2, [r2, #0]
 800fe00:	6952      	ldr	r2, [r2, #20]
 800fe02:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800fe04:	2000      	movs	r0, #0
            break;
 800fe06:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800fe08:	4a07      	ldr	r2, [pc, #28]	; (800fe28 <GetLastFcntDown+0x48>)
 800fe0a:	6812      	ldr	r2, [r2, #0]
 800fe0c:	6992      	ldr	r2, [r2, #24]
 800fe0e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800fe10:	2000      	movs	r0, #0
            break;
 800fe12:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800fe14:	4a04      	ldr	r2, [pc, #16]	; (800fe28 <GetLastFcntDown+0x48>)
 800fe16:	6812      	ldr	r2, [r2, #0]
 800fe18:	69d2      	ldr	r2, [r2, #28]
 800fe1a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800fe1c:	2000      	movs	r0, #0
            break;
 800fe1e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fe20:	2009      	movs	r0, #9
 800fe22:	4770      	bx	lr
    switch( fCntID )
 800fe24:	2005      	movs	r0, #5
}
 800fe26:	4770      	bx	lr
 800fe28:	20001508 	.word	0x20001508

0800fe2c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800fe2c:	b510      	push	{r4, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800fe32:	2300      	movs	r3, #0
 800fe34:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800fe36:	a901      	add	r1, sp, #4
 800fe38:	f7ff ffd2 	bl	800fde0 <GetLastFcntDown>
 800fe3c:	b948      	cbnz	r0, 800fe52 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800fe3e:	9b01      	ldr	r3, [sp, #4]
 800fe40:	42a3      	cmp	r3, r4
 800fe42:	d309      	bcc.n	800fe58 <CheckFCntDown+0x2c>
 800fe44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe48:	d001      	beq.n	800fe4e <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800fe4a:	2000      	movs	r0, #0
 800fe4c:	e002      	b.n	800fe54 <CheckFCntDown+0x28>
        return true;
 800fe4e:	2001      	movs	r0, #1
 800fe50:	e000      	b.n	800fe54 <CheckFCntDown+0x28>
        return false;
 800fe52:	2000      	movs	r0, #0
    }
}
 800fe54:	b002      	add	sp, #8
 800fe56:	bd10      	pop	{r4, pc}
        return true;
 800fe58:	2001      	movs	r0, #1
 800fe5a:	e7fb      	b.n	800fe54 <CheckFCntDown+0x28>

0800fe5c <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800fe5c:	3801      	subs	r0, #1
 800fe5e:	2803      	cmp	r0, #3
 800fe60:	d815      	bhi.n	800fe8e <UpdateFCntDown+0x32>
 800fe62:	e8df f000 	tbb	[pc, r0]
 800fe66:	0702      	.short	0x0702
 800fe68:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800fe6a:	4b09      	ldr	r3, [pc, #36]	; (800fe90 <UpdateFCntDown+0x34>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800fe70:	6219      	str	r1, [r3, #32]
            break;
 800fe72:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800fe74:	4b06      	ldr	r3, [pc, #24]	; (800fe90 <UpdateFCntDown+0x34>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800fe7a:	6219      	str	r1, [r3, #32]
            break;
 800fe7c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800fe7e:	4b04      	ldr	r3, [pc, #16]	; (800fe90 <UpdateFCntDown+0x34>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800fe84:	6219      	str	r1, [r3, #32]
            break;
 800fe86:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800fe88:	4b01      	ldr	r3, [pc, #4]	; (800fe90 <UpdateFCntDown+0x34>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800fe8e:	4770      	bx	lr
 800fe90:	20001508 	.word	0x20001508

0800fe94 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800fe94:	4b0a      	ldr	r3, [pc, #40]	; (800fec0 <ResetFCnts+0x2c>)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	2300      	movs	r3, #0
 800fe9a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fe9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fea0:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fea2:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fea4:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800fea6:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	dd00      	ble.n	800feae <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800feac:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800feae:	1d99      	adds	r1, r3, #6
 800feb0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800feb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800feb8:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800feba:	3301      	adds	r3, #1
 800febc:	e7f4      	b.n	800fea8 <ResetFCnts+0x14>
 800febe:	bf00      	nop
 800fec0:	20001508 	.word	0x20001508

0800fec4 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800fec4:	4b03      	ldr	r3, [pc, #12]	; (800fed4 <IsJoinNonce10xOk+0x10>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800feca:	4283      	cmp	r3, r0
 800fecc:	bf2c      	ite	cs
 800fece:	2000      	movcs	r0, #0
 800fed0:	2001      	movcc	r0, #1
 800fed2:	4770      	bx	lr
 800fed4:	20001508 	.word	0x20001508

0800fed8 <ComputeCmacB0>:
{
 800fed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fedc:	b088      	sub	sp, #32
 800fede:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800fee0:	b1f0      	cbz	r0, 800ff20 <ComputeCmacB0+0x48>
 800fee2:	460c      	mov	r4, r1
 800fee4:	4615      	mov	r5, r2
 800fee6:	461a      	mov	r2, r3
 800fee8:	4680      	mov	r8, r0
 800feea:	b1de      	cbz	r6, 800ff24 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800feec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800fef0:	d81a      	bhi.n	800ff28 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800fef2:	af04      	add	r7, sp, #16
 800fef4:	9702      	str	r7, [sp, #8]
 800fef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fef8:	9301      	str	r3, [sp, #4]
 800fefa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fefc:	9300      	str	r3, [sp, #0]
 800fefe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800ff02:	4629      	mov	r1, r5
 800ff04:	4620      	mov	r0, r4
 800ff06:	f7ff ff0f 	bl	800fd28 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ff0a:	9600      	str	r6, [sp, #0]
 800ff0c:	462b      	mov	r3, r5
 800ff0e:	4622      	mov	r2, r4
 800ff10:	4641      	mov	r1, r8
 800ff12:	4638      	mov	r0, r7
 800ff14:	f002 fcce 	bl	80128b4 <SecureElementComputeAesCmac>
 800ff18:	b940      	cbnz	r0, 800ff2c <ComputeCmacB0+0x54>
}
 800ff1a:	b008      	add	sp, #32
 800ff1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff20:	2009      	movs	r0, #9
 800ff22:	e7fa      	b.n	800ff1a <ComputeCmacB0+0x42>
 800ff24:	2009      	movs	r0, #9
 800ff26:	e7f8      	b.n	800ff1a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ff28:	200d      	movs	r0, #13
 800ff2a:	e7f6      	b.n	800ff1a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ff2c:	200e      	movs	r0, #14
 800ff2e:	e7f4      	b.n	800ff1a <ComputeCmacB0+0x42>

0800ff30 <ComputeCmacB0ForDataBlock>:
{
 800ff30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff34:	b086      	sub	sp, #24
 800ff36:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800ff38:	b1c0      	cbz	r0, 800ff6c <ComputeCmacB0ForDataBlock+0x3c>
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	4615      	mov	r5, r2
 800ff3e:	469c      	mov	ip, r3
 800ff40:	4680      	mov	r8, r0
 800ff42:	b1ae      	cbz	r6, 800ff70 <ComputeCmacB0ForDataBlock+0x40>
    PrepareB0ForDataBlock( sessionCnt, fragIndex, descriptor, len, micBuff );
 800ff44:	af02      	add	r7, sp, #8
 800ff46:	9700      	str	r7, [sp, #0]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff4c:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 800ff50:	4660      	mov	r0, ip
 800ff52:	f7ff ff0c 	bl	800fd6e <PrepareB0ForDataBlock>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ff56:	9600      	str	r6, [sp, #0]
 800ff58:	462b      	mov	r3, r5
 800ff5a:	4622      	mov	r2, r4
 800ff5c:	4641      	mov	r1, r8
 800ff5e:	4638      	mov	r0, r7
 800ff60:	f002 fca8 	bl	80128b4 <SecureElementComputeAesCmac>
 800ff64:	b930      	cbnz	r0, 800ff74 <ComputeCmacB0ForDataBlock+0x44>
}
 800ff66:	b006      	add	sp, #24
 800ff68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff6c:	2009      	movs	r0, #9
 800ff6e:	e7fa      	b.n	800ff66 <ComputeCmacB0ForDataBlock+0x36>
 800ff70:	2009      	movs	r0, #9
 800ff72:	e7f8      	b.n	800ff66 <ComputeCmacB0ForDataBlock+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ff74:	200e      	movs	r0, #14
 800ff76:	e7f6      	b.n	800ff66 <ComputeCmacB0ForDataBlock+0x36>

0800ff78 <DeriveSessionKey10x>:
{
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800ff7c:	2400      	movs	r4, #0
 800ff7e:	9400      	str	r4, [sp, #0]
 800ff80:	9401      	str	r4, [sp, #4]
 800ff82:	9402      	str	r4, [sp, #8]
 800ff84:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800ff86:	2808      	cmp	r0, #8
 800ff88:	d003      	beq.n	800ff92 <DeriveSessionKey10x+0x1a>
 800ff8a:	2809      	cmp	r0, #9
 800ff8c:	d025      	beq.n	800ffda <DeriveSessionKey10x+0x62>
 800ff8e:	200a      	movs	r0, #10
 800ff90:	e021      	b.n	800ffd6 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800ff92:	2401      	movs	r4, #1
 800ff94:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800ff98:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800ff9c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ffa0:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800ffa4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ffa8:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800ffac:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800ffb0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ffb4:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800ffb8:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800ffbc:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800ffc0:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800ffc4:	0a1b      	lsrs	r3, r3, #8
 800ffc6:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800ffca:	4602      	mov	r2, r0
 800ffcc:	2101      	movs	r1, #1
 800ffce:	4668      	mov	r0, sp
 800ffd0:	f002 fd0e 	bl	80129f0 <SecureElementDeriveAndStoreKey>
 800ffd4:	b928      	cbnz	r0, 800ffe2 <DeriveSessionKey10x+0x6a>
}
 800ffd6:	b004      	add	sp, #16
 800ffd8:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800ffda:	2402      	movs	r4, #2
 800ffdc:	f88d 4000 	strb.w	r4, [sp]
            break;
 800ffe0:	e7da      	b.n	800ff98 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ffe2:	200e      	movs	r0, #14
 800ffe4:	e7f7      	b.n	800ffd6 <DeriveSessionKey10x+0x5e>

0800ffe6 <PayloadEncrypt>:
{
 800ffe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffea:	b088      	sub	sp, #32
 800ffec:	4690      	mov	r8, r2
 800ffee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d052      	beq.n	801009a <PayloadEncrypt+0xb4>
 800fff4:	460d      	mov	r5, r1
 800fff6:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800fff8:	2600      	movs	r6, #0
 800fffa:	9604      	str	r6, [sp, #16]
 800fffc:	9605      	str	r6, [sp, #20]
 800fffe:	9606      	str	r6, [sp, #24]
 8010000:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 8010002:	9600      	str	r6, [sp, #0]
 8010004:	9601      	str	r6, [sp, #4]
 8010006:	9602      	str	r6, [sp, #8]
 8010008:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 801000a:	2701      	movs	r7, #1
 801000c:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 8010010:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8010014:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 8010018:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801001c:	0a19      	lsrs	r1, r3, #8
 801001e:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010022:	0c19      	lsrs	r1, r3, #16
 8010024:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8010028:	0e1b      	lsrs	r3, r3, #24
 801002a:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 801002e:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010032:	0a13      	lsrs	r3, r2, #8
 8010034:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010038:	0c13      	lsrs	r3, r2, #16
 801003a:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801003e:	0e12      	lsrs	r2, r2, #24
 8010040:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 8010044:	e014      	b.n	8010070 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010046:	18f2      	adds	r2, r6, r3
 8010048:	5ca0      	ldrb	r0, [r4, r2]
 801004a:	f103 0120 	add.w	r1, r3, #32
 801004e:	4469      	add	r1, sp
 8010050:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8010054:	4048      	eors	r0, r1
 8010056:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8010058:	3301      	adds	r3, #1
 801005a:	b2db      	uxtb	r3, r3
 801005c:	462a      	mov	r2, r5
 801005e:	2d10      	cmp	r5, #16
 8010060:	bfa8      	it	ge
 8010062:	2210      	movge	r2, #16
 8010064:	4293      	cmp	r3, r2
 8010066:	dbee      	blt.n	8010046 <PayloadEncrypt+0x60>
        size -= 16;
 8010068:	3d10      	subs	r5, #16
 801006a:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 801006c:	3610      	adds	r6, #16
 801006e:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 8010070:	2d00      	cmp	r5, #0
 8010072:	dd0e      	ble.n	8010092 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 8010074:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 8010078:	3701      	adds	r7, #1
 801007a:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801007c:	ab04      	add	r3, sp, #16
 801007e:	4642      	mov	r2, r8
 8010080:	2110      	movs	r1, #16
 8010082:	4668      	mov	r0, sp
 8010084:	f002 fc3b 	bl	80128fe <SecureElementAesEncrypt>
 8010088:	4603      	mov	r3, r0
 801008a:	2800      	cmp	r0, #0
 801008c:	d0e6      	beq.n	801005c <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801008e:	200e      	movs	r0, #14
 8010090:	e000      	b.n	8010094 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 8010092:	2000      	movs	r0, #0
}
 8010094:	b008      	add	sp, #32
 8010096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 801009a:	2009      	movs	r0, #9
 801009c:	e7fa      	b.n	8010094 <PayloadEncrypt+0xae>

0801009e <VerifyCmacB0>:
    if( msg == 0 )
 801009e:	b368      	cbz	r0, 80100fc <VerifyCmacB0+0x5e>
{
 80100a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100a4:	b0c8      	sub	sp, #288	; 0x120
 80100a6:	460c      	mov	r4, r1
 80100a8:	4615      	mov	r5, r2
 80100aa:	461e      	mov	r6, r3
 80100ac:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80100ae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80100b2:	d825      	bhi.n	8010100 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80100b4:	af04      	add	r7, sp, #16
 80100b6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80100ba:	2100      	movs	r1, #0
 80100bc:	4638      	mov	r0, r7
 80100be:	f002 fe56 	bl	8012d6e <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80100c2:	9702      	str	r7, [sp, #8]
 80100c4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80100c6:	9301      	str	r3, [sp, #4]
 80100c8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 80100d0:	4632      	mov	r2, r6
 80100d2:	4629      	mov	r1, r5
 80100d4:	4620      	mov	r0, r4
 80100d6:	f7ff fe27 	bl	800fd28 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80100da:	4622      	mov	r2, r4
 80100dc:	4641      	mov	r1, r8
 80100de:	a808      	add	r0, sp, #32
 80100e0:	f002 fe2d 	bl	8012d3e <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80100e4:	462b      	mov	r3, r5
 80100e6:	9a51      	ldr	r2, [sp, #324]	; 0x144
 80100e8:	f104 0110 	add.w	r1, r4, #16
 80100ec:	4638      	mov	r0, r7
 80100ee:	f002 fbf0 	bl	80128d2 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 80100f2:	b130      	cbz	r0, 8010102 <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80100f4:	2801      	cmp	r0, #1
 80100f6:	d004      	beq.n	8010102 <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80100f8:	200e      	movs	r0, #14
 80100fa:	e002      	b.n	8010102 <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80100fc:	2009      	movs	r0, #9
}
 80100fe:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010100:	200d      	movs	r0, #13
}
 8010102:	b048      	add	sp, #288	; 0x120
 8010104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010108 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 8010108:	b188      	cbz	r0, 801012e <LoRaMacCryptoInit+0x26>
{
 801010a:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801010c:	4c09      	ldr	r4, [pc, #36]	; (8010134 <LoRaMacCryptoInit+0x2c>)
 801010e:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8010110:	2228      	movs	r2, #40	; 0x28
 8010112:	2100      	movs	r1, #0
 8010114:	f002 fe2b 	bl	8012d6e <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8010118:	6823      	ldr	r3, [r4, #0]
 801011a:	2201      	movs	r2, #1
 801011c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801011e:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8010120:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8010122:	2400      	movs	r4, #0
 8010124:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8010126:	f7ff feb5 	bl	800fe94 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801012a:	4620      	mov	r0, r4
}
 801012c:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801012e:	2008      	movs	r0, #8
}
 8010130:	4770      	bx	lr
 8010132:	bf00      	nop
 8010134:	20001508 	.word	0x20001508

08010138 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 8010138:	4b02      	ldr	r3, [pc, #8]	; (8010144 <LoRaMacCryptoSetLrWanVersion+0xc>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 801013e:	2000      	movs	r0, #0
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop
 8010144:	20001508 	.word	0x20001508

08010148 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 8010148:	b130      	cbz	r0, 8010158 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801014a:	4b04      	ldr	r3, [pc, #16]	; (801015c <LoRaMacCryptoGetFCntUp+0x14>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	68db      	ldr	r3, [r3, #12]
 8010150:	3301      	adds	r3, #1
 8010152:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010154:	2000      	movs	r0, #0
 8010156:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010158:	2009      	movs	r0, #9
}
 801015a:	4770      	bx	lr
 801015c:	20001508 	.word	0x20001508

08010160 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8010160:	b530      	push	{r4, r5, lr}
 8010162:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 8010164:	2300      	movs	r3, #0
 8010166:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 8010168:	b1f2      	cbz	r2, 80101a8 <LoRaMacCryptoGetFCntDown+0x48>
 801016a:	460c      	mov	r4, r1
 801016c:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801016e:	a901      	add	r1, sp, #4
 8010170:	f7ff fe36 	bl	800fde0 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010174:	b948      	cbnz	r0, 801018a <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8010176:	9b01      	ldr	r3, [sp, #4]
 8010178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801017c:	d007      	beq.n	801018e <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801017e:	b29a      	uxth	r2, r3
 8010180:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 8010182:	2a00      	cmp	r2, #0
 8010184:	dd05      	ble.n	8010192 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8010186:	4413      	add	r3, r2
 8010188:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 801018a:	b003      	add	sp, #12
 801018c:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 801018e:	602c      	str	r4, [r5, #0]
 8010190:	e7fb      	b.n	801018a <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 8010192:	b132      	cbz	r2, 80101a2 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8010194:	0c1b      	lsrs	r3, r3, #16
 8010196:	041b      	lsls	r3, r3, #16
 8010198:	4423      	add	r3, r4
 801019a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801019e:	602b      	str	r3, [r5, #0]
 80101a0:	e7f3      	b.n	801018a <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 80101a2:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80101a4:	2007      	movs	r0, #7
 80101a6:	e7f0      	b.n	801018a <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80101a8:	2009      	movs	r0, #9
 80101aa:	e7ee      	b.n	801018a <LoRaMacCryptoGetFCntDown+0x2a>

080101ac <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 80101ac:	4601      	mov	r1, r0
 80101ae:	b908      	cbnz	r0, 80101b4 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80101b0:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 80101b2:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80101b4:	2300      	movs	r3, #0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	dd01      	ble.n	80101be <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 80101ba:	2000      	movs	r0, #0
 80101bc:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80101be:	4a07      	ldr	r2, [pc, #28]	; (80101dc <LoRaMacCryptoSetMulticastReference+0x30>)
 80101c0:	6812      	ldr	r2, [r2, #0]
 80101c2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80101c6:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80101ca:	f103 0c06 	add.w	ip, r3, #6
 80101ce:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 80101d2:	3204      	adds	r2, #4
 80101d4:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80101d6:	3301      	adds	r3, #1
 80101d8:	e7ed      	b.n	80101b6 <LoRaMacCryptoSetMulticastReference+0xa>
 80101da:	bf00      	nop
 80101dc:	20001508 	.word	0x20001508

080101e0 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 80101e0:	b1d8      	cbz	r0, 801021a <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 80101e2:	b510      	push	{r4, lr}
 80101e4:	b082      	sub	sp, #8
 80101e6:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80101e8:	4b0f      	ldr	r3, [pc, #60]	; (8010228 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	8893      	ldrh	r3, [r2, #4]
 80101ee:	3301      	adds	r3, #1
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80101f4:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80101f6:	f000 fa88 	bl	801070a <LoRaMacSerializerJoinRequest>
 80101fa:	b980      	cbnz	r0, 801021e <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80101fc:	4623      	mov	r3, r4
 80101fe:	f853 1b18 	ldr.w	r1, [r3], #24
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	2301      	movs	r3, #1
 8010206:	2213      	movs	r2, #19
 8010208:	f002 fb54 	bl	80128b4 <SecureElementComputeAesCmac>
 801020c:	b950      	cbnz	r0, 8010224 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801020e:	4620      	mov	r0, r4
 8010210:	f000 fa7b 	bl	801070a <LoRaMacSerializerJoinRequest>
 8010214:	b120      	cbz	r0, 8010220 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010216:	2010      	movs	r0, #16
 8010218:	e002      	b.n	8010220 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 801021a:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 801021c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801021e:	2010      	movs	r0, #16
}
 8010220:	b002      	add	sp, #8
 8010222:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010224:	200e      	movs	r0, #14
 8010226:	e7fb      	b.n	8010220 <LoRaMacCryptoPrepareJoinRequest+0x40>
 8010228:	20001508 	.word	0x20001508

0801022c <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 801022c:	2b00      	cmp	r3, #0
 801022e:	d036      	beq.n	801029e <LoRaMacCryptoSecureMessage+0x72>
{
 8010230:	b530      	push	{r4, r5, lr}
 8010232:	b085      	sub	sp, #20
 8010234:	4604      	mov	r4, r0
 8010236:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8010238:	4b1d      	ldr	r3, [pc, #116]	; (80102b0 <LoRaMacCryptoSecureMessage+0x84>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	4283      	cmp	r3, r0
 8010240:	d82f      	bhi.n	80102a2 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8010242:	f895 2020 	ldrb.w	r2, [r5, #32]
 8010246:	b342      	cbz	r2, 801029a <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8010248:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801024a:	42a3      	cmp	r3, r4
 801024c:	d209      	bcs.n	8010262 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801024e:	9401      	str	r4, [sp, #4]
 8010250:	2300      	movs	r3, #0
 8010252:	9300      	str	r3, [sp, #0]
 8010254:	68ab      	ldr	r3, [r5, #8]
 8010256:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 801025a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801025c:	f7ff fec3 	bl	800ffe6 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010260:	bb10      	cbnz	r0, 80102a8 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010262:	4628      	mov	r0, r5
 8010264:	f000 fa87 	bl	8010776 <LoRaMacSerializerData>
 8010268:	b9e8      	cbnz	r0, 80102a6 <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801026a:	7929      	ldrb	r1, [r5, #4]
 801026c:	3904      	subs	r1, #4
 801026e:	462b      	mov	r3, r5
 8010270:	f853 0b2c 	ldr.w	r0, [r3], #44
 8010274:	9303      	str	r3, [sp, #12]
 8010276:	9402      	str	r4, [sp, #8]
 8010278:	68ab      	ldr	r3, [r5, #8]
 801027a:	9301      	str	r3, [sp, #4]
 801027c:	2300      	movs	r3, #0
 801027e:	9300      	str	r3, [sp, #0]
 8010280:	2208      	movs	r2, #8
 8010282:	b289      	uxth	r1, r1
 8010284:	f7ff fe28 	bl	800fed8 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010288:	b970      	cbnz	r0, 80102a8 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801028a:	4628      	mov	r0, r5
 801028c:	f000 fa73 	bl	8010776 <LoRaMacSerializerData>
 8010290:	b960      	cbnz	r0, 80102ac <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8010292:	4b07      	ldr	r3, [pc, #28]	; (80102b0 <LoRaMacCryptoSecureMessage+0x84>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8010298:	e006      	b.n	80102a8 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 801029a:	2208      	movs	r2, #8
 801029c:	e7d5      	b.n	801024a <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 801029e:	2009      	movs	r0, #9
}
 80102a0:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80102a2:	2006      	movs	r0, #6
 80102a4:	e000      	b.n	80102a8 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80102a6:	2010      	movs	r0, #16
}
 80102a8:	b005      	add	sp, #20
 80102aa:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80102ac:	2010      	movs	r0, #16
 80102ae:	e7fb      	b.n	80102a8 <LoRaMacCryptoSecureMessage+0x7c>
 80102b0:	20001508 	.word	0x20001508

080102b4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80102b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102b8:	b087      	sub	sp, #28
 80102ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 80102bc:	2e00      	cmp	r6, #0
 80102be:	d049      	beq.n	8010354 <LoRaMacCryptoUnsecureMessage+0xa0>
 80102c0:	4605      	mov	r5, r0
 80102c2:	4688      	mov	r8, r1
 80102c4:	4617      	mov	r7, r2
 80102c6:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80102c8:	4619      	mov	r1, r3
 80102ca:	4610      	mov	r0, r2
 80102cc:	f7ff fdae 	bl	800fe2c <CheckFCntDown>
 80102d0:	2800      	cmp	r0, #0
 80102d2:	d041      	beq.n	8010358 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80102d4:	4630      	mov	r0, r6
 80102d6:	f000 f9b9 	bl	801064c <LoRaMacParserData>
 80102da:	2800      	cmp	r0, #0
 80102dc:	d141      	bne.n	8010362 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80102de:	a905      	add	r1, sp, #20
 80102e0:	4628      	mov	r0, r5
 80102e2:	f7ff fd67 	bl	800fdb4 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80102e6:	4605      	mov	r5, r0
 80102e8:	2800      	cmp	r0, #0
 80102ea:	d136      	bne.n	801035a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80102ec:	9b05      	ldr	r3, [sp, #20]
 80102ee:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 80102f2:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80102f4:	68b3      	ldr	r3, [r6, #8]
 80102f6:	4543      	cmp	r3, r8
 80102f8:	d135      	bne.n	8010366 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80102fa:	7b33      	ldrb	r3, [r6, #12]
 80102fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8010300:	491a      	ldr	r1, [pc, #104]	; (801036c <LoRaMacCryptoUnsecureMessage+0xb8>)
 8010302:	6809      	ldr	r1, [r1, #0]
 8010304:	7889      	ldrb	r1, [r1, #2]
 8010306:	b901      	cbnz	r1, 801030a <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8010308:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801030a:	7931      	ldrb	r1, [r6, #4]
 801030c:	3904      	subs	r1, #4
 801030e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8010310:	9003      	str	r0, [sp, #12]
 8010312:	9402      	str	r4, [sp, #8]
 8010314:	f8cd 8004 	str.w	r8, [sp, #4]
 8010318:	2001      	movs	r0, #1
 801031a:	9000      	str	r0, [sp, #0]
 801031c:	b289      	uxth	r1, r1
 801031e:	6830      	ldr	r0, [r6, #0]
 8010320:	f7ff febd 	bl	801009e <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010324:	4605      	mov	r5, r0
 8010326:	b9c0      	cbnz	r0, 801035a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8010328:	f896 3020 	ldrb.w	r3, [r6, #32]
 801032c:	b90b      	cbnz	r3, 8010332 <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801032e:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8010332:	9401      	str	r4, [sp, #4]
 8010334:	2301      	movs	r3, #1
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	4643      	mov	r3, r8
 801033a:	464a      	mov	r2, r9
 801033c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8010340:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8010342:	f7ff fe50 	bl	800ffe6 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010346:	4605      	mov	r5, r0
 8010348:	b938      	cbnz	r0, 801035a <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801034a:	4621      	mov	r1, r4
 801034c:	4638      	mov	r0, r7
 801034e:	f7ff fd85 	bl	800fe5c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8010352:	e002      	b.n	801035a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010354:	2509      	movs	r5, #9
 8010356:	e000      	b.n	801035a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8010358:	2506      	movs	r5, #6
}
 801035a:	4628      	mov	r0, r5
 801035c:	b007      	add	sp, #28
 801035e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8010362:	250f      	movs	r5, #15
 8010364:	e7f9      	b.n	801035a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8010366:	2502      	movs	r5, #2
 8010368:	e7f7      	b.n	801035a <LoRaMacCryptoUnsecureMessage+0xa6>
 801036a:	bf00      	nop
 801036c:	20001508 	.word	0x20001508

08010370 <LoRaMacCryptoComputeDataBlock>:

LoRaMacCryptoStatus_t LoRaMacCryptoComputeDataBlock( uint8_t *buffer, uint32_t size, uint16_t sessionCnt, uint8_t fragIndex, uint32_t descriptor, uint32_t *cmac )
{
 8010370:	b500      	push	{lr}
 8010372:	b085      	sub	sp, #20
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;

    // Compute mic
    retval = ComputeCmacB0ForDataBlock( buffer, size, DATABLOCK_INT_KEY, sessionCnt, fragIndex, descriptor, cmac );
 8010374:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010378:	f8cd c008 	str.w	ip, [sp, #8]
 801037c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8010380:	f8cd c004 	str.w	ip, [sp, #4]
 8010384:	9300      	str	r3, [sp, #0]
 8010386:	4613      	mov	r3, r2
 8010388:	220a      	movs	r2, #10
 801038a:	f7ff fdd1 	bl	800ff30 <ComputeCmacB0ForDataBlock>
    {
        return retval;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 801038e:	b005      	add	sp, #20
 8010390:	f85d fb04 	ldr.w	pc, [sp], #4

08010394 <LoRaMacCryptoDeriveLifeTimeKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8010394:	b500      	push	{lr}
 8010396:	b085      	sub	sp, #20
 8010398:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 801039a:	2300      	movs	r3, #0
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	9301      	str	r3, [sp, #4]
 80103a0:	9302      	str	r3, [sp, #8]
 80103a2:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 80103a4:	290b      	cmp	r1, #11
 80103a6:	d007      	beq.n	80103b8 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 80103a8:	290c      	cmp	r1, #12
 80103aa:	d013      	beq.n	80103d4 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 80103ac:	290a      	cmp	r1, #10
 80103ae:	d00c      	beq.n	80103ca <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 80103b0:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 80103b2:	b005      	add	sp, #20
 80103b4:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 80103b8:	2801      	cmp	r0, #1
 80103ba:	d001      	beq.n	80103c0 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 80103bc:	2100      	movs	r1, #0
 80103be:	e00a      	b.n	80103d6 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 80103c0:	2320      	movs	r3, #32
 80103c2:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80103c6:	2100      	movs	r1, #0
 80103c8:	e005      	b.n	80103d6 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 80103ca:	2330      	movs	r3, #48	; 0x30
 80103cc:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80103d0:	2100      	movs	r1, #0
            break;
 80103d2:	e000      	b.n	80103d6 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 80103d4:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80103d6:	4668      	mov	r0, sp
 80103d8:	f002 fb0a 	bl	80129f0 <SecureElementDeriveAndStoreKey>
 80103dc:	2800      	cmp	r0, #0
 80103de:	d0e8      	beq.n	80103b2 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80103e0:	200e      	movs	r0, #14
 80103e2:	e7e6      	b.n	80103b2 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

080103e4 <LoRaMacCryptoSetKey>:
{
 80103e4:	b510      	push	{r4, lr}
 80103e6:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80103e8:	f002 fac0 	bl	801296c <SecureElementSetKey>
 80103ec:	b998      	cbnz	r0, 8010416 <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 80103ee:	b104      	cbz	r4, 80103f2 <LoRaMacCryptoSetKey+0xe>
}
 80103f0:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80103f2:	4b0c      	ldr	r3, [pc, #48]	; (8010424 <LoRaMacCryptoSetKey+0x40>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	210b      	movs	r1, #11
 80103f8:	7898      	ldrb	r0, [r3, #2]
 80103fa:	f7ff ffcb 	bl	8010394 <LoRaMacCryptoDeriveLifeTimeKey>
 80103fe:	b960      	cbnz	r0, 801041a <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010400:	210c      	movs	r1, #12
 8010402:	f7ff ffc7 	bl	8010394 <LoRaMacCryptoDeriveLifeTimeKey>
 8010406:	b950      	cbnz	r0, 801041e <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010408:	210a      	movs	r1, #10
 801040a:	f7ff ffc3 	bl	8010394 <LoRaMacCryptoDeriveLifeTimeKey>
 801040e:	2800      	cmp	r0, #0
 8010410:	d0ee      	beq.n	80103f0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010412:	200e      	movs	r0, #14
 8010414:	e7ec      	b.n	80103f0 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010416:	200e      	movs	r0, #14
 8010418:	e7ea      	b.n	80103f0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801041a:	200e      	movs	r0, #14
 801041c:	e7e8      	b.n	80103f0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801041e:	200e      	movs	r0, #14
 8010420:	e7e6      	b.n	80103f0 <LoRaMacCryptoSetKey+0xc>
 8010422:	bf00      	nop
 8010424:	20001508 	.word	0x20001508

08010428 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8010428:	2a00      	cmp	r2, #0
 801042a:	d06c      	beq.n	8010506 <LoRaMacCryptoHandleJoinAccept+0xde>
{
 801042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801042e:	b08f      	sub	sp, #60	; 0x3c
 8010430:	4607      	mov	r7, r0
 8010432:	460d      	mov	r5, r1
 8010434:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8010436:	2900      	cmp	r1, #0
 8010438:	d067      	beq.n	801050a <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801043a:	2600      	movs	r6, #0
 801043c:	9605      	str	r6, [sp, #20]
 801043e:	221d      	movs	r2, #29
 8010440:	4631      	mov	r1, r6
 8010442:	a806      	add	r0, sp, #24
 8010444:	f006 ff64 	bl	8017310 <memset>
    uint8_t versionMinor         = 0;
 8010448:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801044c:	4b33      	ldr	r3, [pc, #204]	; (801051c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8010452:	f10d 0313 	add.w	r3, sp, #19
 8010456:	9302      	str	r3, [sp, #8]
 8010458:	ab05      	add	r3, sp, #20
 801045a:	9301      	str	r3, [sp, #4]
 801045c:	7923      	ldrb	r3, [r4, #4]
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	4632      	mov	r2, r6
 8010464:	4629      	mov	r1, r5
 8010466:	4638      	mov	r0, r7
 8010468:	f002 fae2 	bl	8012a30 <SecureElementProcessJoinAccept>
 801046c:	2800      	cmp	r0, #0
 801046e:	d14e      	bne.n	801050e <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8010470:	7922      	ldrb	r2, [r4, #4]
 8010472:	a905      	add	r1, sp, #20
 8010474:	6820      	ldr	r0, [r4, #0]
 8010476:	f002 fc62 	bl	8012d3e <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801047a:	4620      	mov	r0, r4
 801047c:	f000 f894 	bl	80105a8 <LoRaMacParserJoinAccept>
 8010480:	2800      	cmp	r0, #0
 8010482:	d147      	bne.n	8010514 <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8010484:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8010486:	79e3      	ldrb	r3, [r4, #7]
 8010488:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801048c:	7a23      	ldrb	r3, [r4, #8]
 801048e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8010492:	4628      	mov	r0, r5
 8010494:	f7ff fd16 	bl	800fec4 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 8010498:	2800      	cmp	r0, #0
 801049a:	d03d      	beq.n	8010518 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 801049c:	4b1f      	ldr	r3, [pc, #124]	; (801051c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80104a2:	210b      	movs	r1, #11
 80104a4:	f89d 0013 	ldrb.w	r0, [sp, #19]
 80104a8:	f7ff ff74 	bl	8010394 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80104ac:	bb80      	cbnz	r0, 8010510 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80104ae:	210c      	movs	r1, #12
 80104b0:	2000      	movs	r0, #0
 80104b2:	f7ff ff6f 	bl	8010394 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80104b6:	bb58      	cbnz	r0, 8010510 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80104b8:	210a      	movs	r1, #10
 80104ba:	2000      	movs	r0, #0
 80104bc:	f7ff ff6a 	bl	8010394 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80104c0:	bb30      	cbnz	r0, 8010510 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 80104c2:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80104c4:	7aa2      	ldrb	r2, [r4, #10]
 80104c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80104ca:	7ae2      	ldrb	r2, [r4, #11]
 80104cc:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80104d0:	4633      	mov	r3, r6
 80104d2:	4622      	mov	r2, r4
 80104d4:	4629      	mov	r1, r5
 80104d6:	2009      	movs	r0, #9
 80104d8:	f7ff fd4e 	bl	800ff78 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80104dc:	b9c0      	cbnz	r0, 8010510 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80104de:	4633      	mov	r3, r6
 80104e0:	4622      	mov	r2, r4
 80104e2:	4629      	mov	r1, r5
 80104e4:	2008      	movs	r0, #8
 80104e6:	f7ff fd47 	bl	800ff78 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80104ea:	b988      	cbnz	r0, 8010510 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80104ec:	4b0b      	ldr	r3, [pc, #44]	; (801051c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80104f4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 80104f6:	2200      	movs	r2, #0
 80104f8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80104fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104fe:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010500:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010502:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 8010504:	e004      	b.n	8010510 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010506:	2009      	movs	r0, #9
}
 8010508:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 801050a:	2009      	movs	r0, #9
 801050c:	e000      	b.n	8010510 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801050e:	200e      	movs	r0, #14
}
 8010510:	b00f      	add	sp, #60	; 0x3c
 8010512:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8010514:	200f      	movs	r0, #15
 8010516:	e7fb      	b.n	8010510 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8010518:	2003      	movs	r0, #3
 801051a:	e7f9      	b.n	8010510 <LoRaMacCryptoHandleJoinAccept+0xe8>
 801051c:	20001508 	.word	0x20001508

08010520 <LoRaMacCryptoDeriveMcSessionKeyPair>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcSessionKeyPair( AddressIdentifier_t addrID, uint32_t mcAddr )
{
    if( mcAddr == 0 )
 8010520:	2900      	cmp	r1, #0
 8010522:	d03d      	beq.n	80105a0 <LoRaMacCryptoDeriveMcSessionKeyPair+0x80>
{
 8010524:	b510      	push	{r4, lr}
 8010526:	b08a      	sub	sp, #40	; 0x28
 8010528:	460c      	mov	r4, r1

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;

    // Determine current security context
    KeyAddr_t* curItem;
    retval = GetKeyAddrItem( addrID, &curItem );
 801052a:	a909      	add	r1, sp, #36	; 0x24
 801052c:	f7ff fc42 	bl	800fdb4 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010530:	b108      	cbz	r0, 8010536 <LoRaMacCryptoDeriveMcSessionKeyPair+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8010532:	b00a      	add	sp, #40	; 0x28
 8010534:	bd10      	pop	{r4, pc}
    uint8_t compBaseAppS[16] = { 0 };
 8010536:	9005      	str	r0, [sp, #20]
 8010538:	9006      	str	r0, [sp, #24]
 801053a:	9007      	str	r0, [sp, #28]
 801053c:	9008      	str	r0, [sp, #32]
    uint8_t compBaseNwkS[16] = { 0 };
 801053e:	9001      	str	r0, [sp, #4]
 8010540:	9002      	str	r0, [sp, #8]
 8010542:	9003      	str	r0, [sp, #12]
 8010544:	9004      	str	r0, [sp, #16]
    compBaseAppS[0] = 0x01;
 8010546:	2301      	movs	r3, #1
 8010548:	f88d 3014 	strb.w	r3, [sp, #20]
    compBaseAppS[1] = mcAddr & 0xFF;
 801054c:	b2e1      	uxtb	r1, r4
 801054e:	f88d 1015 	strb.w	r1, [sp, #21]
    compBaseAppS[2] = ( mcAddr >> 8 ) & 0xFF;
 8010552:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8010556:	f88d 2016 	strb.w	r2, [sp, #22]
    compBaseAppS[3] = ( mcAddr >> 16 ) & 0xFF;
 801055a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801055e:	f88d 3017 	strb.w	r3, [sp, #23]
    compBaseAppS[4] = ( mcAddr >> 24 ) & 0xFF;
 8010562:	0e24      	lsrs	r4, r4, #24
 8010564:	f88d 4018 	strb.w	r4, [sp, #24]
    compBaseNwkS[0] = 0x02;
 8010568:	2002      	movs	r0, #2
 801056a:	f88d 0004 	strb.w	r0, [sp, #4]
    compBaseNwkS[1] = mcAddr & 0xFF;
 801056e:	f88d 1005 	strb.w	r1, [sp, #5]
    compBaseNwkS[2] = ( mcAddr >> 8 ) & 0xFF;
 8010572:	f88d 2006 	strb.w	r2, [sp, #6]
    compBaseNwkS[3] = ( mcAddr >> 16 ) & 0xFF;
 8010576:	f88d 3007 	strb.w	r3, [sp, #7]
    compBaseNwkS[4] = ( mcAddr >> 24 ) & 0xFF;
 801057a:	f88d 4008 	strb.w	r4, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBaseAppS, curItem->RootKey, curItem->AppSkey ) != SECURE_ELEMENT_SUCCESS )
 801057e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010580:	785a      	ldrb	r2, [r3, #1]
 8010582:	78d9      	ldrb	r1, [r3, #3]
 8010584:	a805      	add	r0, sp, #20
 8010586:	f002 fa33 	bl	80129f0 <SecureElementDeriveAndStoreKey>
 801058a:	b958      	cbnz	r0, 80105a4 <LoRaMacCryptoDeriveMcSessionKeyPair+0x84>
    if( SecureElementDeriveAndStoreKey( compBaseNwkS, curItem->RootKey, curItem->NwkSkey ) != SECURE_ELEMENT_SUCCESS )
 801058c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801058e:	789a      	ldrb	r2, [r3, #2]
 8010590:	78d9      	ldrb	r1, [r3, #3]
 8010592:	a801      	add	r0, sp, #4
 8010594:	f002 fa2c 	bl	80129f0 <SecureElementDeriveAndStoreKey>
 8010598:	2800      	cmp	r0, #0
 801059a:	d0ca      	beq.n	8010532 <LoRaMacCryptoDeriveMcSessionKeyPair+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801059c:	200e      	movs	r0, #14
 801059e:	e7c8      	b.n	8010532 <LoRaMacCryptoDeriveMcSessionKeyPair+0x12>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80105a0:	2009      	movs	r0, #9
}
 80105a2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80105a4:	200e      	movs	r0, #14
 80105a6:	e7c4      	b.n	8010532 <LoRaMacCryptoDeriveMcSessionKeyPair+0x12>

080105a8 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d049      	beq.n	8010640 <LoRaMacParserJoinAccept+0x98>
{
 80105ac:	b510      	push	{r4, lr}
 80105ae:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80105b0:	6801      	ldr	r1, [r0, #0]
 80105b2:	2900      	cmp	r1, #0
 80105b4:	d046      	beq.n	8010644 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80105b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105ba:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80105bc:	2203      	movs	r2, #3
 80105be:	3006      	adds	r0, #6
 80105c0:	f002 fbbd 	bl	8012d3e <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80105c4:	4620      	mov	r0, r4
 80105c6:	f850 1b09 	ldr.w	r1, [r0], #9
 80105ca:	2203      	movs	r2, #3
 80105cc:	3104      	adds	r1, #4
 80105ce:	f002 fbb6 	bl	8012d3e <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80105d2:	6821      	ldr	r1, [r4, #0]
 80105d4:	79cb      	ldrb	r3, [r1, #7]
 80105d6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80105d8:	7a0a      	ldrb	r2, [r1, #8]
 80105da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80105de:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80105e0:	7a4a      	ldrb	r2, [r1, #9]
 80105e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105e6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80105e8:	7a8a      	ldrb	r2, [r1, #10]
 80105ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80105ee:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80105f0:	7acb      	ldrb	r3, [r1, #11]
 80105f2:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80105f4:	7b0b      	ldrb	r3, [r1, #12]
 80105f6:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80105f8:	7923      	ldrb	r3, [r4, #4]
 80105fa:	2b21      	cmp	r3, #33	; 0x21
 80105fc:	d018      	beq.n	8010630 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80105fe:	2b11      	cmp	r3, #17
 8010600:	dc22      	bgt.n	8010648 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8010602:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010604:	6821      	ldr	r1, [r4, #0]
 8010606:	f102 0c01 	add.w	ip, r2, #1
 801060a:	5c8b      	ldrb	r3, [r1, r2]
 801060c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801060e:	1c90      	adds	r0, r2, #2
 8010610:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8010614:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8010618:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801061a:	3203      	adds	r2, #3
 801061c:	5c08      	ldrb	r0, [r1, r0]
 801061e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010622:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010624:	5c8a      	ldrb	r2, [r1, r2]
 8010626:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801062a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801062c:	2000      	movs	r0, #0
}
 801062e:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8010630:	2210      	movs	r2, #16
 8010632:	310d      	adds	r1, #13
 8010634:	f104 0012 	add.w	r0, r4, #18
 8010638:	f002 fb81 	bl	8012d3e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801063c:	221d      	movs	r2, #29
 801063e:	e7e1      	b.n	8010604 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 8010640:	2002      	movs	r0, #2
}
 8010642:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8010644:	2002      	movs	r0, #2
 8010646:	e7f2      	b.n	801062e <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 8010648:	2001      	movs	r0, #1
 801064a:	e7f0      	b.n	801062e <LoRaMacParserJoinAccept+0x86>

0801064c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801064c:	2800      	cmp	r0, #0
 801064e:	d058      	beq.n	8010702 <LoRaMacParserData+0xb6>
{
 8010650:	b510      	push	{r4, lr}
 8010652:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010654:	6801      	ldr	r1, [r0, #0]
 8010656:	2900      	cmp	r1, #0
 8010658:	d055      	beq.n	8010706 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801065a:	780b      	ldrb	r3, [r1, #0]
 801065c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801065e:	784b      	ldrb	r3, [r1, #1]
 8010660:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010662:	788a      	ldrb	r2, [r1, #2]
 8010664:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010668:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801066a:	78ca      	ldrb	r2, [r1, #3]
 801066c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010670:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010672:	790a      	ldrb	r2, [r1, #4]
 8010674:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010678:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801067a:	794b      	ldrb	r3, [r1, #5]
 801067c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801067e:	798b      	ldrb	r3, [r1, #6]
 8010680:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8010682:	79ca      	ldrb	r2, [r1, #7]
 8010684:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010688:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801068a:	7b02      	ldrb	r2, [r0, #12]
 801068c:	f002 020f 	and.w	r2, r2, #15
 8010690:	3108      	adds	r1, #8
 8010692:	3010      	adds	r0, #16
 8010694:	f002 fb53 	bl	8012d3e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010698:	7b23      	ldrb	r3, [r4, #12]
 801069a:	f003 030f 	and.w	r3, r3, #15
 801069e:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80106a2:	2200      	movs	r2, #0
 80106a4:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 80106a8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80106ac:	7922      	ldrb	r2, [r4, #4]
 80106ae:	1a11      	subs	r1, r2, r0
 80106b0:	2904      	cmp	r1, #4
 80106b2:	dc16      	bgt.n	80106e2 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80106b4:	6822      	ldr	r2, [r4, #0]
 80106b6:	7923      	ldrb	r3, [r4, #4]
 80106b8:	441a      	add	r2, r3
 80106ba:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 80106be:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80106c0:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80106c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80106c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80106ca:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80106ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80106d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80106d4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80106d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80106dc:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80106de:	2000      	movs	r0, #0
}
 80106e0:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80106e2:	6821      	ldr	r1, [r4, #0]
 80106e4:	3309      	adds	r3, #9
 80106e6:	5c08      	ldrb	r0, [r1, r0]
 80106e8:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80106ec:	1ad2      	subs	r2, r2, r3
 80106ee:	b2d2      	uxtb	r2, r2
 80106f0:	3a04      	subs	r2, #4
 80106f2:	b2d2      	uxtb	r2, r2
 80106f4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80106f8:	4419      	add	r1, r3
 80106fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80106fc:	f002 fb1f 	bl	8012d3e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8010700:	e7d8      	b.n	80106b4 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 8010702:	2002      	movs	r0, #2
}
 8010704:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8010706:	2002      	movs	r0, #2
 8010708:	e7ea      	b.n	80106e0 <LoRaMacParserData+0x94>

0801070a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801070a:	b370      	cbz	r0, 801076a <LoRaMacSerializerJoinRequest+0x60>
{
 801070c:	b510      	push	{r4, lr}
 801070e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010710:	6803      	ldr	r3, [r0, #0]
 8010712:	b363      	cbz	r3, 801076e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8010714:	7902      	ldrb	r2, [r0, #4]
 8010716:	2a16      	cmp	r2, #22
 8010718:	d92b      	bls.n	8010772 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801071a:	7942      	ldrb	r2, [r0, #5]
 801071c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801071e:	4601      	mov	r1, r0
 8010720:	f851 0b06 	ldr.w	r0, [r1], #6
 8010724:	2208      	movs	r2, #8
 8010726:	3001      	adds	r0, #1
 8010728:	f002 fb14 	bl	8012d54 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801072c:	4621      	mov	r1, r4
 801072e:	f851 0b0e 	ldr.w	r0, [r1], #14
 8010732:	2208      	movs	r2, #8
 8010734:	3009      	adds	r0, #9
 8010736:	f002 fb0d 	bl	8012d54 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801073a:	8ae2      	ldrh	r2, [r4, #22]
 801073c:	6823      	ldr	r3, [r4, #0]
 801073e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8010740:	8ae3      	ldrh	r3, [r4, #22]
 8010742:	6822      	ldr	r2, [r4, #0]
 8010744:	0a1b      	lsrs	r3, r3, #8
 8010746:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8010748:	69a2      	ldr	r2, [r4, #24]
 801074a:	6823      	ldr	r3, [r4, #0]
 801074c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801074e:	69a3      	ldr	r3, [r4, #24]
 8010750:	0a1b      	lsrs	r3, r3, #8
 8010752:	6822      	ldr	r2, [r4, #0]
 8010754:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8010756:	8b62      	ldrh	r2, [r4, #26]
 8010758:	6823      	ldr	r3, [r4, #0]
 801075a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801075c:	7ee2      	ldrb	r2, [r4, #27]
 801075e:	6823      	ldr	r3, [r4, #0]
 8010760:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8010762:	2317      	movs	r3, #23
 8010764:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8010766:	2000      	movs	r0, #0
}
 8010768:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801076a:	2001      	movs	r0, #1
}
 801076c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801076e:	2001      	movs	r0, #1
 8010770:	e7fa      	b.n	8010768 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8010772:	2002      	movs	r0, #2
 8010774:	e7f8      	b.n	8010768 <LoRaMacSerializerJoinRequest+0x5e>

08010776 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010776:	2800      	cmp	r0, #0
 8010778:	d066      	beq.n	8010848 <LoRaMacSerializerData+0xd2>
{
 801077a:	b538      	push	{r3, r4, r5, lr}
 801077c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801077e:	6801      	ldr	r1, [r0, #0]
 8010780:	2900      	cmp	r1, #0
 8010782:	d063      	beq.n	801084c <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010784:	7b02      	ldrb	r2, [r0, #12]
 8010786:	f002 020f 	and.w	r2, r2, #15
 801078a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 801078e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010792:	b10b      	cbz	r3, 8010798 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8010794:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8010798:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801079a:	3304      	adds	r3, #4
 801079c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 801079e:	7922      	ldrb	r2, [r4, #4]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d355      	bcc.n	8010850 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80107a4:	7963      	ldrb	r3, [r4, #5]
 80107a6:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80107a8:	68a2      	ldr	r2, [r4, #8]
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80107ae:	68a3      	ldr	r3, [r4, #8]
 80107b0:	0a1b      	lsrs	r3, r3, #8
 80107b2:	6822      	ldr	r2, [r4, #0]
 80107b4:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80107b6:	8962      	ldrh	r2, [r4, #10]
 80107b8:	6823      	ldr	r3, [r4, #0]
 80107ba:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80107bc:	7ae2      	ldrb	r2, [r4, #11]
 80107be:	6823      	ldr	r3, [r4, #0]
 80107c0:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80107c2:	6823      	ldr	r3, [r4, #0]
 80107c4:	7b22      	ldrb	r2, [r4, #12]
 80107c6:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80107c8:	89e2      	ldrh	r2, [r4, #14]
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80107ce:	89e3      	ldrh	r3, [r4, #14]
 80107d0:	6822      	ldr	r2, [r4, #0]
 80107d2:	0a1b      	lsrs	r3, r3, #8
 80107d4:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80107d6:	4621      	mov	r1, r4
 80107d8:	f851 0b10 	ldr.w	r0, [r1], #16
 80107dc:	7b22      	ldrb	r2, [r4, #12]
 80107de:	f002 020f 	and.w	r2, r2, #15
 80107e2:	3008      	adds	r0, #8
 80107e4:	f002 faab 	bl	8012d3e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80107e8:	7b23      	ldrb	r3, [r4, #12]
 80107ea:	f003 030f 	and.w	r3, r3, #15
 80107ee:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 80107f2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80107f6:	b12a      	cbz	r2, 8010804 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80107f8:	6822      	ldr	r2, [r4, #0]
 80107fa:	f894 1020 	ldrb.w	r1, [r4, #32]
 80107fe:	5551      	strb	r1, [r2, r5]
 8010800:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8010804:	6820      	ldr	r0, [r4, #0]
 8010806:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801080a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801080c:	4428      	add	r0, r5
 801080e:	f002 fa96 	bl	8012d3e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8010812:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010816:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8010818:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801081a:	6821      	ldr	r1, [r4, #0]
 801081c:	1c5a      	adds	r2, r3, #1
 801081e:	b292      	uxth	r2, r2
 8010820:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8010822:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010824:	0a08      	lsrs	r0, r1, #8
 8010826:	6825      	ldr	r5, [r4, #0]
 8010828:	1c99      	adds	r1, r3, #2
 801082a:	b289      	uxth	r1, r1
 801082c:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801082e:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8010830:	6820      	ldr	r0, [r4, #0]
 8010832:	1cda      	adds	r2, r3, #3
 8010834:	b292      	uxth	r2, r2
 8010836:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8010838:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 801083c:	6821      	ldr	r1, [r4, #0]
 801083e:	3304      	adds	r3, #4
 8010840:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 8010842:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8010844:	2000      	movs	r0, #0
}
 8010846:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8010848:	2001      	movs	r0, #1
}
 801084a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801084c:	2001      	movs	r0, #1
 801084e:	e7fa      	b.n	8010846 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8010850:	2002      	movs	r0, #2
 8010852:	e7f8      	b.n	8010846 <LoRaMacSerializerData+0xd0>

08010854 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 8010854:	4b02      	ldr	r3, [pc, #8]	; (8010860 <NvmDataMgmtEvent+0xc>)
 8010856:	881a      	ldrh	r2, [r3, #0]
 8010858:	4310      	orrs	r0, r2
 801085a:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	2000150c 	.word	0x2000150c

08010864 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 8010864:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 8010866:	4b06      	ldr	r3, [pc, #24]	; (8010880 <NvmDataMgmtStoreBegin+0x1c>)
 8010868:	881b      	ldrh	r3, [r3, #0]
 801086a:	b11b      	cbz	r3, 8010874 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 801086c:	f7fd feac 	bl	800e5c8 <LoRaMacStop>
 8010870:	b918      	cbnz	r0, 801087a <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010872:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 8010874:	f06f 0001 	mvn.w	r0, #1
 8010878:	e7fb      	b.n	8010872 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 801087a:	f06f 0002 	mvn.w	r0, #2
 801087e:	e7f8      	b.n	8010872 <NvmDataMgmtStoreBegin+0xe>
 8010880:	2000150c 	.word	0x2000150c

08010884 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8010884:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010886:	2400      	movs	r4, #0
 8010888:	4b02      	ldr	r3, [pc, #8]	; (8010894 <NvmDataMgmtStoreEnd+0x10>)
 801088a:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 801088c:	f7fd fe90 	bl	800e5b0 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010890:	4620      	mov	r0, r4
 8010892:	bd10      	pop	{r4, pc}
 8010894:	2000150c 	.word	0x2000150c

08010898 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 8010898:	2808      	cmp	r0, #8
 801089a:	d001      	beq.n	80108a0 <RegionIsActive+0x8>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801089c:	2000      	movs	r0, #0
        }
    }
}
 801089e:	4770      	bx	lr
        US915_IS_ACTIVE( );
 80108a0:	2001      	movs	r0, #1
 80108a2:	4770      	bx	lr

080108a4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80108a4:	b500      	push	{lr}
 80108a6:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 80108a8:	2300      	movs	r3, #0
 80108aa:	9300      	str	r3, [sp, #0]
    switch( region )
 80108ac:	2808      	cmp	r0, #8
 80108ae:	d005      	beq.n	80108bc <RegionGetPhyParam+0x18>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80108b0:	9b00      	ldr	r3, [sp, #0]
 80108b2:	9301      	str	r3, [sp, #4]
        }
    }
}
 80108b4:	9801      	ldr	r0, [sp, #4]
 80108b6:	b003      	add	sp, #12
 80108b8:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 80108bc:	4608      	mov	r0, r1
 80108be:	f000 fd5d 	bl	801137c <RegionUS915GetPhyParam>
 80108c2:	9001      	str	r0, [sp, #4]
 80108c4:	e7f6      	b.n	80108b4 <RegionGetPhyParam+0x10>

080108c6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 80108c6:	2808      	cmp	r0, #8
 80108c8:	d000      	beq.n	80108cc <RegionSetBandTxDone+0x6>
 80108ca:	4770      	bx	lr
{
 80108cc:	b508      	push	{r3, lr}
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 80108ce:	4608      	mov	r0, r1
 80108d0:	f000 fe2a 	bl	8011528 <RegionUS915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 80108d4:	bd08      	pop	{r3, pc}

080108d6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 80108d6:	2808      	cmp	r0, #8
 80108d8:	d000      	beq.n	80108dc <RegionInitDefaults+0x6>
 80108da:	4770      	bx	lr
{
 80108dc:	b508      	push	{r3, lr}
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 80108de:	4608      	mov	r0, r1
 80108e0:	f000 fe40 	bl	8011564 <RegionUS915InitDefaults>
        default:
        {
            break;
        }
    }
}
 80108e4:	bd08      	pop	{r3, pc}

080108e6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 80108e6:	2808      	cmp	r0, #8
 80108e8:	d001      	beq.n	80108ee <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80108ea:	2000      	movs	r0, #0
        }
    }
}
 80108ec:	4770      	bx	lr
{
 80108ee:	b508      	push	{r3, lr}
 80108f0:	460b      	mov	r3, r1
        US915_VERIFY( );
 80108f2:	4611      	mov	r1, r2
 80108f4:	4618      	mov	r0, r3
 80108f6:	f000 fed9 	bl	80116ac <RegionUS915Verify>
}
 80108fa:	bd08      	pop	{r3, pc}

080108fc <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 80108fc:	2808      	cmp	r0, #8
 80108fe:	d000      	beq.n	8010902 <RegionApplyCFList+0x6>
 8010900:	4770      	bx	lr
{
 8010902:	b508      	push	{r3, lr}
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 8010904:	4608      	mov	r0, r1
 8010906:	f000 ff0b 	bl	8011720 <RegionUS915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 801090a:	bd08      	pop	{r3, pc}

0801090c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 801090c:	2808      	cmp	r0, #8
 801090e:	d001      	beq.n	8010914 <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8010910:	2000      	movs	r0, #0
        }
    }
}
 8010912:	4770      	bx	lr
{
 8010914:	b508      	push	{r3, lr}
        US915_CHAN_MASK_SET( );
 8010916:	4608      	mov	r0, r1
 8010918:	f000 ff40 	bl	801179c <RegionUS915ChanMaskSet>
}
 801091c:	bd08      	pop	{r3, pc}

0801091e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 801091e:	2808      	cmp	r0, #8
 8010920:	d000      	beq.n	8010924 <RegionComputeRxWindowParameters+0x6>
 8010922:	4770      	bx	lr
{
 8010924:	b508      	push	{r3, lr}
 8010926:	468c      	mov	ip, r1
 8010928:	4611      	mov	r1, r2
 801092a:	461a      	mov	r2, r3
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801092c:	9b02      	ldr	r3, [sp, #8]
 801092e:	4660      	mov	r0, ip
 8010930:	f000 ff76 	bl	8011820 <RegionUS915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 8010934:	bd08      	pop	{r3, pc}

08010936 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 8010936:	2808      	cmp	r0, #8
 8010938:	d001      	beq.n	801093e <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801093a:	2000      	movs	r0, #0
        }
    }
}
 801093c:	4770      	bx	lr
{
 801093e:	b508      	push	{r3, lr}
 8010940:	460b      	mov	r3, r1
        US915_RX_CONFIG( );
 8010942:	4611      	mov	r1, r2
 8010944:	4618      	mov	r0, r3
 8010946:	f000 ff99 	bl	801187c <RegionUS915RxConfig>
}
 801094a:	bd08      	pop	{r3, pc}

0801094c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 801094c:	2808      	cmp	r0, #8
 801094e:	d001      	beq.n	8010954 <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8010950:	2000      	movs	r0, #0
        }
    }
}
 8010952:	4770      	bx	lr
{
 8010954:	b508      	push	{r3, lr}
 8010956:	468c      	mov	ip, r1
 8010958:	4611      	mov	r1, r2
        US915_TX_CONFIG( );
 801095a:	461a      	mov	r2, r3
 801095c:	4660      	mov	r0, ip
 801095e:	f000 ffe7 	bl	8011930 <RegionUS915TxConfig>
}
 8010962:	bd08      	pop	{r3, pc}

08010964 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 8010964:	2808      	cmp	r0, #8
 8010966:	d001      	beq.n	801096c <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8010968:	2000      	movs	r0, #0
        }
    }
}
 801096a:	4770      	bx	lr
{
 801096c:	b500      	push	{lr}
 801096e:	b083      	sub	sp, #12
 8010970:	468c      	mov	ip, r1
 8010972:	4611      	mov	r1, r2
 8010974:	461a      	mov	r2, r3
        US915_LINK_ADR_REQ( );
 8010976:	9b05      	ldr	r3, [sp, #20]
 8010978:	9300      	str	r3, [sp, #0]
 801097a:	9b04      	ldr	r3, [sp, #16]
 801097c:	4660      	mov	r0, ip
 801097e:	f001 f851 	bl	8011a24 <RegionUS915LinkAdrReq>
}
 8010982:	b003      	add	sp, #12
 8010984:	f85d fb04 	ldr.w	pc, [sp], #4

08010988 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 8010988:	2808      	cmp	r0, #8
 801098a:	d001      	beq.n	8010990 <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801098c:	2000      	movs	r0, #0
        }
    }
}
 801098e:	4770      	bx	lr
{
 8010990:	b508      	push	{r3, lr}
        US915_RX_PARAM_SETUP_REQ( );
 8010992:	4608      	mov	r0, r1
 8010994:	f001 f992 	bl	8011cbc <RegionUS915RxParamSetupReq>
}
 8010998:	bd08      	pop	{r3, pc}

0801099a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 801099a:	2808      	cmp	r0, #8
 801099c:	d001      	beq.n	80109a2 <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801099e:	2000      	movs	r0, #0
        }
    }
}
 80109a0:	4770      	bx	lr
{
 80109a2:	b508      	push	{r3, lr}
        US915_NEW_CHANNEL_REQ( );
 80109a4:	4608      	mov	r0, r1
 80109a6:	f001 f9b4 	bl	8011d12 <RegionUS915NewChannelReq>
}
 80109aa:	bd08      	pop	{r3, pc}

080109ac <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 80109ac:	2808      	cmp	r0, #8
 80109ae:	d001      	beq.n	80109b4 <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80109b0:	2000      	movs	r0, #0
        }
    }
}
 80109b2:	4770      	bx	lr
{
 80109b4:	b508      	push	{r3, lr}
        US915_TX_PARAM_SETUP_REQ( );
 80109b6:	4608      	mov	r0, r1
 80109b8:	f001 f9ae 	bl	8011d18 <RegionUS915TxParamSetupReq>
}
 80109bc:	bd08      	pop	{r3, pc}

080109be <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 80109be:	2808      	cmp	r0, #8
 80109c0:	d001      	beq.n	80109c6 <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80109c2:	2000      	movs	r0, #0
        }
    }
}
 80109c4:	4770      	bx	lr
{
 80109c6:	b508      	push	{r3, lr}
        US915_DL_CHANNEL_REQ( );
 80109c8:	4608      	mov	r0, r1
 80109ca:	f001 f9a8 	bl	8011d1e <RegionUS915DlChannelReq>
}
 80109ce:	bd08      	pop	{r3, pc}

080109d0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 80109d0:	2808      	cmp	r0, #8
 80109d2:	d001      	beq.n	80109d8 <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80109d4:	2000      	movs	r0, #0
        }
    }
}
 80109d6:	4770      	bx	lr
{
 80109d8:	b508      	push	{r3, lr}
 80109da:	460b      	mov	r3, r1
        US915_ALTERNATE_DR( );
 80109dc:	4611      	mov	r1, r2
 80109de:	4618      	mov	r0, r3
 80109e0:	f001 f9a0 	bl	8011d24 <RegionUS915AlternateDr>
}
 80109e4:	bd08      	pop	{r3, pc}

080109e6 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 80109e6:	2808      	cmp	r0, #8
 80109e8:	d001      	beq.n	80109ee <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80109ea:	2009      	movs	r0, #9
        }
    }
}
 80109ec:	4770      	bx	lr
{
 80109ee:	b508      	push	{r3, lr}
 80109f0:	468c      	mov	ip, r1
 80109f2:	4611      	mov	r1, r2
 80109f4:	461a      	mov	r2, r3
        US915_NEXT_CHANNEL( );
 80109f6:	9b02      	ldr	r3, [sp, #8]
 80109f8:	4660      	mov	r0, ip
 80109fa:	f001 f9b5 	bl	8011d68 <RegionUS915NextChannel>
}
 80109fe:	bd08      	pop	{r3, pc}

08010a00 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8010a00:	468c      	mov	ip, r1
 8010a02:	4611      	mov	r1, r2
    switch( region )
 8010a04:	2808      	cmp	r0, #8
 8010a06:	d001      	beq.n	8010a0c <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8010a08:	b2d0      	uxtb	r0, r2
        }
    }
}
 8010a0a:	4770      	bx	lr
{
 8010a0c:	b508      	push	{r3, lr}
        US915_APPLY_DR_OFFSET( );
 8010a0e:	461a      	mov	r2, r3
 8010a10:	4660      	mov	r0, ip
 8010a12:	f001 fa57 	bl	8011ec4 <RegionUS915ApplyDrOffset>
}
 8010a16:	bd08      	pop	{r3, pc}

08010a18 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8010a18:	4800      	ldr	r0, [pc, #0]	; (8010a1c <RegionGetVersion+0x4>)
 8010a1a:	4770      	bx	lr
 8010a1c:	02010001 	.word	0x02010001

08010a20 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8010a20:	468c      	mov	ip, r1
 8010a22:	b1a9      	cbz	r1, 8010a50 <FindAvailable125kHzChannels+0x30>
 8010a24:	b1b2      	cbz	r2, 8010a54 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8010a2a:	e001      	b.n	8010a30 <FindAvailable125kHzChannels+0x10>
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	2b07      	cmp	r3, #7
 8010a32:	d80b      	bhi.n	8010a4c <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8010a34:	fa40 f103 	asr.w	r1, r0, r3
 8010a38:	f011 0f01 	tst.w	r1, #1
 8010a3c:	d0f6      	beq.n	8010a2c <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8010a3e:	7811      	ldrb	r1, [r2, #0]
 8010a40:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8010a44:	7811      	ldrb	r1, [r2, #0]
 8010a46:	3101      	adds	r1, #1
 8010a48:	7011      	strb	r1, [r2, #0]
 8010a4a:	e7ef      	b.n	8010a2c <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 8010a4c:	2000      	movs	r0, #0
 8010a4e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a50:	2003      	movs	r0, #3
 8010a52:	4770      	bx	lr
 8010a54:	2003      	movs	r0, #3
}
 8010a56:	4770      	bx	lr

08010a58 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8010a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a5a:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	9302      	str	r3, [sp, #8]
 8010a60:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 8010a62:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8010a66:	2800      	cmp	r0, #0
 8010a68:	d03e      	beq.n	8010ae8 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 8010a6a:	460d      	mov	r5, r1
 8010a6c:	4617      	mov	r7, r2
 8010a6e:	4606      	mov	r6, r0
 8010a70:	2900      	cmp	r1, #0
 8010a72:	d03b      	beq.n	8010aec <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 8010a74:	2a00      	cmp	r2, #0
 8010a76:	d03b      	beq.n	8010af0 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8010a78:	780c      	ldrb	r4, [r1, #0]
 8010a7a:	e017      	b.n	8010aac <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8010a7c:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 8010a80:	0a00      	lsrs	r0, r0, #8
 8010a82:	e019      	b.n	8010ab8 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8010a84:	3901      	subs	r1, #1
 8010a86:	2000      	movs	r0, #0
 8010a88:	f002 f94c 	bl	8012d24 <randr>
 8010a8c:	f100 0310 	add.w	r3, r0, #16
 8010a90:	eb0d 0003 	add.w	r0, sp, r3
 8010a94:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 8010a98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a9c:	703b      	strb	r3, [r7, #0]
 8010a9e:	e016      	b.n	8010ace <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8010aa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010aa4:	b9cb      	cbnz	r3, 8010ada <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 8010aa6:	782a      	ldrb	r2, [r5, #0]
 8010aa8:	42a2      	cmp	r2, r4
 8010aaa:	d016      	beq.n	8010ada <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8010aac:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 8010aae:	f014 0f01 	tst.w	r4, #1
 8010ab2:	d1e3      	bne.n	8010a7c <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8010ab4:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8010ab8:	f10d 0207 	add.w	r2, sp, #7
 8010abc:	a902      	add	r1, sp, #8
 8010abe:	f7ff ffaf 	bl	8010a20 <FindAvailable125kHzChannels>
 8010ac2:	2803      	cmp	r0, #3
 8010ac4:	d00b      	beq.n	8010ade <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 8010ac6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010aca:	2900      	cmp	r1, #0
 8010acc:	d1da      	bne.n	8010a84 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 8010ace:	3401      	adds	r4, #1
 8010ad0:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 8010ad2:	2c07      	cmp	r4, #7
 8010ad4:	d9e4      	bls.n	8010aa0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 8010ad6:	2400      	movs	r4, #0
 8010ad8:	e7e2      	b.n	8010aa0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 8010ada:	b913      	cbnz	r3, 8010ae2 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8010adc:	2003      	movs	r0, #3
}
 8010ade:	b005      	add	sp, #20
 8010ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 8010ae2:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	e7fa      	b.n	8010ade <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010ae8:	2003      	movs	r0, #3
 8010aea:	e7f8      	b.n	8010ade <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 8010aec:	2003      	movs	r0, #3
 8010aee:	e7f6      	b.n	8010ade <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 8010af0:	2003      	movs	r0, #3
 8010af2:	e7f4      	b.n	8010ade <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

08010af4 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 8010af4:	fb02 1000 	mla	r0, r2, r0, r1
 8010af8:	4770      	bx	lr

08010afa <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8010afa:	b082      	sub	sp, #8
 8010afc:	f10d 0c08 	add.w	ip, sp, #8
 8010b00:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 8010b04:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 8010b06:	b971      	cbnz	r1, 8010b26 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8010b08:	4613      	mov	r3, r2
 8010b0a:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 8010b0e:	d306      	bcc.n	8010b1e <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8010b10:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d80a      	bhi.n	8010b2e <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8010b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b1c:	e000      	b.n	8010b20 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8010b1e:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8010b20:	4298      	cmp	r0, r3
 8010b22:	bf38      	it	cc
 8010b24:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8010b26:	b900      	cbnz	r0, 8010b2a <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 8010b28:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 8010b2a:	b002      	add	sp, #8
 8010b2c:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8010b2e:	f242 7310 	movw	r3, #10000	; 0x2710
 8010b32:	e7f5      	b.n	8010b20 <GetDutyCycle+0x26>

08010b34 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8010b34:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 8010b36:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 8010b38:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 8010b3a:	e001      	b.n	8010b40 <CountChannels+0xc>
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	428b      	cmp	r3, r1
 8010b42:	d207      	bcs.n	8010b54 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8010b44:	2201      	movs	r2, #1
 8010b46:	409a      	lsls	r2, r3
 8010b48:	ea32 020c 	bics.w	r2, r2, ip
 8010b4c:	d1f6      	bne.n	8010b3c <CountChannels+0x8>
        {
            nbActiveBits++;
 8010b4e:	3001      	adds	r0, #1
 8010b50:	b2c0      	uxtb	r0, r0
 8010b52:	e7f3      	b.n	8010b3c <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 8010b54:	4770      	bx	lr
	...

08010b58 <SetMaxTimeCredits>:
{
 8010b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b5c:	b089      	sub	sp, #36	; 0x24
 8010b5e:	4604      	mov	r4, r0
 8010b60:	460e      	mov	r6, r1
 8010b62:	ad02      	add	r5, sp, #8
 8010b64:	e885 000c 	stmia.w	r5, {r2, r3}
 8010b68:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 8010b6c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8010b70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b74:	f004 fa52 	bl	801501c <SysTimeToMs>
 8010b78:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	9304      	str	r3, [sp, #16]
 8010b7e:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8010b80:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010b84:	4631      	mov	r1, r6
 8010b86:	4620      	mov	r0, r4
 8010b88:	f7ff ffb7 	bl	8010afa <GetDutyCycle>
 8010b8c:	4605      	mov	r5, r0
    if( joined == false )
 8010b8e:	2e00      	cmp	r6, #0
 8010b90:	d14c      	bne.n	8010c2c <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8010b92:	2864      	cmp	r0, #100	; 0x64
 8010b94:	d025      	beq.n	8010be2 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8010b96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010b9a:	d025      	beq.n	8010be8 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8010b9c:	4e27      	ldr	r6, [pc, #156]	; (8010c3c <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8010b9e:	68a1      	ldr	r1, [r4, #8]
 8010ba0:	a806      	add	r0, sp, #24
 8010ba2:	f004 fa5b 	bl	801505c <SysTimeFromMs>
 8010ba6:	9b07      	ldr	r3, [sp, #28]
 8010ba8:	9300      	str	r3, [sp, #0]
 8010baa:	9b06      	ldr	r3, [sp, #24]
 8010bac:	aa02      	add	r2, sp, #8
 8010bae:	ca06      	ldmia	r2, {r1, r2}
 8010bb0:	a804      	add	r0, sp, #16
 8010bb2:	f004 f9ba 	bl	8014f2a <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8010bb6:	f1b8 0f00 	cmp.w	r8, #0
 8010bba:	d102      	bne.n	8010bc2 <SetMaxTimeCredits+0x6a>
 8010bbc:	f1b9 0f00 	cmp.w	r9, #0
 8010bc0:	d002      	beq.n	8010bc8 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 8010bc2:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8010bc4:	42b3      	cmp	r3, r6
 8010bc6:	d012      	beq.n	8010bee <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 8010bc8:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8010bca:	9b02      	ldr	r3, [sp, #8]
 8010bcc:	4a1c      	ldr	r2, [pc, #112]	; (8010c40 <SetMaxTimeCredits+0xe8>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d812      	bhi.n	8010bf8 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 8010bd2:	6863      	ldr	r3, [r4, #4]
 8010bd4:	b903      	cbnz	r3, 8010bd8 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 8010bd6:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 8010bd8:	6126      	str	r6, [r4, #16]
}
 8010bda:	4628      	mov	r0, r5
 8010bdc:	b009      	add	sp, #36	; 0x24
 8010bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 8010be2:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8010be4:	4e17      	ldr	r6, [pc, #92]	; (8010c44 <SetMaxTimeCredits+0xec>)
 8010be6:	e7da      	b.n	8010b9e <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 8010be8:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8010bea:	4e17      	ldr	r6, [pc, #92]	; (8010c48 <SetMaxTimeCredits+0xf0>)
 8010bec:	e7d7      	b.n	8010b9e <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 8010bee:	9a04      	ldr	r2, [sp, #16]
 8010bf0:	4b16      	ldr	r3, [pc, #88]	; (8010c4c <SetMaxTimeCredits+0xf4>)
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d9ed      	bls.n	8010bd2 <SetMaxTimeCredits+0x7a>
 8010bf6:	e7e7      	b.n	8010bc8 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8010bf8:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8010bfc:	3b30      	subs	r3, #48	; 0x30
 8010bfe:	4a14      	ldr	r2, [pc, #80]	; (8010c50 <SetMaxTimeCredits+0xf8>)
 8010c00:	fba2 2303 	umull	r2, r3, r2, r3
 8010c04:	0c1b      	lsrs	r3, r3, #16
 8010c06:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8010c08:	4a12      	ldr	r2, [pc, #72]	; (8010c54 <SetMaxTimeCredits+0xfc>)
 8010c0a:	fb02 f303 	mul.w	r3, r2, r3
 8010c0e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8010c10:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8010c14:	3330      	adds	r3, #48	; 0x30
 8010c16:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8010c1e:	ab04      	add	r3, sp, #16
 8010c20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c24:	f004 f9fa 	bl	801501c <SysTimeToMs>
 8010c28:	60a0      	str	r0, [r4, #8]
 8010c2a:	e7d2      	b.n	8010bd2 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 8010c2c:	f1b8 0f00 	cmp.w	r8, #0
 8010c30:	d102      	bne.n	8010c38 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 8010c32:	4e04      	ldr	r6, [pc, #16]	; (8010c44 <SetMaxTimeCredits+0xec>)
 8010c34:	60e6      	str	r6, [r4, #12]
 8010c36:	e7cc      	b.n	8010bd2 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8010c38:	4e02      	ldr	r6, [pc, #8]	; (8010c44 <SetMaxTimeCredits+0xec>)
 8010c3a:	e7ca      	b.n	8010bd2 <SetMaxTimeCredits+0x7a>
 8010c3c:	02932e00 	.word	0x02932e00
 8010c40:	0001ec2f 	.word	0x0001ec2f
 8010c44:	001b7740 	.word	0x001b7740
 8010c48:	0112a880 	.word	0x0112a880
 8010c4c:	0001517f 	.word	0x0001517f
 8010c50:	c22e4507 	.word	0xc22e4507
 8010c54:	00015180 	.word	0x00015180

08010c58 <UpdateTimeCredits>:
{
 8010c58:	b570      	push	{r4, r5, r6, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	4604      	mov	r4, r0
 8010c5e:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8010c60:	9301      	str	r3, [sp, #4]
 8010c62:	9200      	str	r2, [sp, #0]
 8010c64:	ab06      	add	r3, sp, #24
 8010c66:	cb0c      	ldmia	r3, {r2, r3}
 8010c68:	f7ff ff76 	bl	8010b58 <SetMaxTimeCredits>
 8010c6c:	4605      	mov	r5, r0
    if( joined == true )
 8010c6e:	b94e      	cbnz	r6, 8010c84 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 8010c70:	68e2      	ldr	r2, [r4, #12]
 8010c72:	6923      	ldr	r3, [r4, #16]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d900      	bls.n	8010c7a <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 8010c78:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 8010c7a:	9b08      	ldr	r3, [sp, #32]
 8010c7c:	6063      	str	r3, [r4, #4]
}
 8010c7e:	4628      	mov	r0, r5
 8010c80:	b002      	add	sp, #8
 8010c82:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8010c84:	6860      	ldr	r0, [r4, #4]
 8010c86:	f004 fa49 	bl	801511c <UTIL_TIMER_GetElapsedTime>
 8010c8a:	68e3      	ldr	r3, [r4, #12]
 8010c8c:	4403      	add	r3, r0
 8010c8e:	60e3      	str	r3, [r4, #12]
 8010c90:	e7ee      	b.n	8010c70 <UpdateTimeCredits+0x18>

08010c92 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8010c92:	4288      	cmp	r0, r1
 8010c94:	db03      	blt.n	8010c9e <RegionCommonValueInRange+0xc>
 8010c96:	4290      	cmp	r0, r2
 8010c98:	dd03      	ble.n	8010ca2 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	4770      	bx	lr
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	4770      	bx	lr
        return 1;
 8010ca2:	2001      	movs	r0, #1
}
 8010ca4:	4770      	bx	lr

08010ca6 <RegionCommonChanVerifyDr>:
{
 8010ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010caa:	4682      	mov	sl, r0
 8010cac:	460e      	mov	r6, r1
 8010cae:	4690      	mov	r8, r2
 8010cb0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8010cb4:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 8010cb8:	4619      	mov	r1, r3
 8010cba:	4640      	mov	r0, r8
 8010cbc:	f7ff ffe9 	bl	8010c92 <RegionCommonValueInRange>
 8010cc0:	b338      	cbz	r0, 8010d12 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8010cc2:	2500      	movs	r5, #0
 8010cc4:	462f      	mov	r7, r5
 8010cc6:	e01e      	b.n	8010d06 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 8010cc8:	3401      	adds	r4, #1
 8010cca:	b2e4      	uxtb	r4, r4
 8010ccc:	2c0f      	cmp	r4, #15
 8010cce:	d816      	bhi.n	8010cfe <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8010cd0:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8010cd4:	4123      	asrs	r3, r4
 8010cd6:	f013 0f01 	tst.w	r3, #1
 8010cda:	d0f5      	beq.n	8010cc8 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8010cdc:	193b      	adds	r3, r7, r4
 8010cde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010ce2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8010ce6:	7a19      	ldrb	r1, [r3, #8]
 8010ce8:	090a      	lsrs	r2, r1, #4
 8010cea:	f001 010f 	and.w	r1, r1, #15
 8010cee:	4640      	mov	r0, r8
 8010cf0:	f7ff ffcf 	bl	8010c92 <RegionCommonValueInRange>
 8010cf4:	2801      	cmp	r0, #1
 8010cf6:	d1e7      	bne.n	8010cc8 <RegionCommonChanVerifyDr+0x22>
                    return true;
 8010cf8:	2001      	movs	r0, #1
}
 8010cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8010cfe:	3710      	adds	r7, #16
 8010d00:	b2ff      	uxtb	r7, r7
 8010d02:	3501      	adds	r5, #1
 8010d04:	b2ed      	uxtb	r5, r5
 8010d06:	4557      	cmp	r7, sl
 8010d08:	d201      	bcs.n	8010d0e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 8010d0a:	2400      	movs	r4, #0
 8010d0c:	e7de      	b.n	8010ccc <RegionCommonChanVerifyDr+0x26>
    return false;
 8010d0e:	2000      	movs	r0, #0
 8010d10:	e7f3      	b.n	8010cfa <RegionCommonChanVerifyDr+0x54>
        return false;
 8010d12:	2000      	movs	r0, #0
 8010d14:	e7f1      	b.n	8010cfa <RegionCommonChanVerifyDr+0x54>

08010d16 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8010d16:	0913      	lsrs	r3, r2, #4
 8010d18:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 8010d1c:	d313      	bcc.n	8010d46 <RegionCommonChanDisable+0x30>
{
 8010d1e:	b500      	push	{lr}
 8010d20:	4684      	mov	ip, r0
 8010d22:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8010d26:	4291      	cmp	r1, r2
 8010d28:	d20f      	bcs.n	8010d4a <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8010d2a:	f001 030f 	and.w	r3, r1, #15
 8010d2e:	2001      	movs	r0, #1
 8010d30:	fa00 f303 	lsl.w	r3, r0, r3
 8010d34:	43db      	mvns	r3, r3
 8010d36:	b21b      	sxth	r3, r3
 8010d38:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 8010d3c:	4013      	ands	r3, r2
 8010d3e:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 8010d42:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 8010d46:	2000      	movs	r0, #0
}
 8010d48:	4770      	bx	lr
        return false;
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	e7f9      	b.n	8010d42 <RegionCommonChanDisable+0x2c>

08010d4e <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8010d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8010d50:	b188      	cbz	r0, 8010d76 <RegionCommonCountChannels+0x28>
 8010d52:	460c      	mov	r4, r1
 8010d54:	4616      	mov	r6, r2
 8010d56:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 8010d58:	2500      	movs	r5, #0
 8010d5a:	e008      	b.n	8010d6e <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8010d5c:	2110      	movs	r1, #16
 8010d5e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8010d62:	f7ff fee7 	bl	8010b34 <CountChannels>
 8010d66:	4405      	add	r5, r0
 8010d68:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8010d6a:	3401      	adds	r4, #1
 8010d6c:	b2e4      	uxtb	r4, r4
 8010d6e:	42b4      	cmp	r4, r6
 8010d70:	d3f4      	bcc.n	8010d5c <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 8010d72:	4628      	mov	r0, r5
 8010d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8010d76:	2500      	movs	r5, #0
 8010d78:	e7fb      	b.n	8010d72 <RegionCommonCountChannels+0x24>

08010d7a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8010d7a:	4684      	mov	ip, r0
 8010d7c:	b158      	cbz	r0, 8010d96 <RegionCommonChanMaskCopy+0x1c>
 8010d7e:	b109      	cbz	r1, 8010d84 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 8010d80:	2300      	movs	r3, #0
 8010d82:	e006      	b.n	8010d92 <RegionCommonChanMaskCopy+0x18>
 8010d84:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8010d86:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010d8a:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8010d8e:	3301      	adds	r3, #1
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d3f7      	bcc.n	8010d86 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 8010d96:	4770      	bx	lr

08010d98 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8010d98:	b082      	sub	sp, #8
 8010d9a:	b538      	push	{r3, r4, r5, lr}
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	460d      	mov	r5, r1
 8010da0:	4611      	mov	r1, r2
 8010da2:	aa04      	add	r2, sp, #16
 8010da4:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8010da8:	ca0c      	ldmia	r2, {r2, r3}
 8010daa:	f7ff fea6 	bl	8010afa <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8010dae:	68e3      	ldr	r3, [r4, #12]
 8010db0:	fb05 f100 	mul.w	r1, r5, r0
 8010db4:	428b      	cmp	r3, r1
 8010db6:	d905      	bls.n	8010dc4 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8010db8:	1a5b      	subs	r3, r3, r1
 8010dba:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8010dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc0:	b002      	add	sp, #8
 8010dc2:	4770      	bx	lr
        band->TimeCredits = 0;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	60e3      	str	r3, [r4, #12]
}
 8010dc8:	e7f8      	b.n	8010dbc <RegionCommonSetBandTxDone+0x24>
	...

08010dcc <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8010dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd0:	b089      	sub	sp, #36	; 0x24
 8010dd2:	4607      	mov	r7, r0
 8010dd4:	468b      	mov	fp, r1
 8010dd6:	4691      	mov	r9, r2
 8010dd8:	4698      	mov	r8, r3
 8010dda:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8010dde:	f004 f993 	bl	8015108 <UTIL_TIMER_GetCurrentTime>
 8010de2:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 8010de4:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 8010de6:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8010de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dec:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 8010dee:	e005      	b.n	8010dfc <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 8010df0:	2301      	movs	r3, #1
 8010df2:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8010df4:	441e      	add	r6, r3
 8010df6:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 8010df8:	3401      	adds	r4, #1
 8010dfa:	b2e4      	uxtb	r4, r4
 8010dfc:	454c      	cmp	r4, r9
 8010dfe:	d25d      	bcs.n	8010ebc <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8010e00:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8010e04:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8010e08:	9b04      	ldr	r3, [sp, #16]
 8010e0a:	9302      	str	r3, [sp, #8]
 8010e0c:	ab13      	add	r3, sp, #76	; 0x4c
 8010e0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010e12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010e16:	4653      	mov	r3, sl
 8010e18:	4642      	mov	r2, r8
 8010e1a:	4639      	mov	r1, r7
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	f7ff ff1b 	bl	8010c58 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 8010e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e24:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8010e28:	68ea      	ldr	r2, [r5, #12]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d2e0      	bcs.n	8010df0 <RegionCommonUpdateBandTimeOff+0x24>
 8010e2e:	f1b8 0f00 	cmp.w	r8, #0
 8010e32:	d101      	bne.n	8010e38 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8010e34:	2f00      	cmp	r7, #0
 8010e36:	d1db      	bne.n	8010df0 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8010e38:	2100      	movs	r1, #0
 8010e3a:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8010e3c:	6929      	ldr	r1, [r5, #16]
 8010e3e:	4299      	cmp	r1, r3
 8010e40:	d307      	bcc.n	8010e52 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8010e42:	1a9b      	subs	r3, r3, r2
 8010e44:	9a05      	ldr	r2, [sp, #20]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	bf28      	it	cs
 8010e4a:	461a      	movcs	r2, r3
 8010e4c:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8010e4e:	3601      	adds	r6, #1
 8010e50:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8010e52:	2f00      	cmp	r7, #0
 8010e54:	d1d0      	bne.n	8010df8 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 8010e56:	2300      	movs	r3, #0
 8010e58:	9306      	str	r3, [sp, #24]
 8010e5a:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8010e5e:	2864      	cmp	r0, #100	; 0x64
 8010e60:	d024      	beq.n	8010eac <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8010e62:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010e66:	d025      	beq.n	8010eb4 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8010e68:	4b19      	ldr	r3, [pc, #100]	; (8010ed0 <RegionCommonUpdateBandTimeOff+0x104>)
 8010e6a:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8010e6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e6e:	4a18      	ldr	r2, [pc, #96]	; (8010ed0 <RegionCommonUpdateBandTimeOff+0x104>)
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d90c      	bls.n	8010e8e <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8010e74:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8010e78:	3b30      	subs	r3, #48	; 0x30
 8010e7a:	4a16      	ldr	r2, [pc, #88]	; (8010ed4 <RegionCommonUpdateBandTimeOff+0x108>)
 8010e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8010e80:	0c1b      	lsrs	r3, r3, #16
 8010e82:	4a15      	ldr	r2, [pc, #84]	; (8010ed8 <RegionCommonUpdateBandTimeOff+0x10c>)
 8010e84:	fb03 2202 	mla	r2, r3, r2, r2
 8010e88:	9b06      	ldr	r3, [sp, #24]
 8010e8a:	4413      	add	r3, r2
 8010e8c:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8010e8e:	ad06      	add	r5, sp, #24
 8010e90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e92:	9300      	str	r3, [sp, #0]
 8010e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e96:	e895 0006 	ldmia.w	r5, {r1, r2}
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	f004 f845 	bl	8014f2a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8010ea0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010ea4:	f004 f8ba 	bl	801501c <SysTimeToMs>
 8010ea8:	9005      	str	r0, [sp, #20]
 8010eaa:	e7a5      	b.n	8010df8 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8010eac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8010eb0:	9306      	str	r3, [sp, #24]
 8010eb2:	e7db      	b.n	8010e6c <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8010eb4:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8010eb8:	9306      	str	r3, [sp, #24]
 8010eba:	e7d7      	b.n	8010e6c <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 8010ebc:	b11e      	cbz	r6, 8010ec6 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 8010ebe:	9805      	ldr	r0, [sp, #20]
 8010ec0:	b009      	add	sp, #36	; 0x24
 8010ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 8010ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010eca:	9305      	str	r3, [sp, #20]
 8010ecc:	e7f7      	b.n	8010ebe <RegionCommonUpdateBandTimeOff+0xf2>
 8010ece:	bf00      	nop
 8010ed0:	0001ec30 	.word	0x0001ec30
 8010ed4:	c22e4507 	.word	0xc22e4507
 8010ed8:	00015180 	.word	0x00015180

08010edc <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8010edc:	7803      	ldrb	r3, [r0, #0]
 8010ede:	2b03      	cmp	r3, #3
 8010ee0:	d001      	beq.n	8010ee6 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 8010ee2:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8010ee4:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 8010ee6:	7842      	ldrb	r2, [r0, #1]
 8010ee8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010eec:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8010eee:	f003 030f 	and.w	r3, r3, #15
 8010ef2:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8010ef4:	0913      	lsrs	r3, r2, #4
 8010ef6:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8010ef8:	7883      	ldrb	r3, [r0, #2]
 8010efa:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8010efc:	78c2      	ldrb	r2, [r0, #3]
 8010efe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010f02:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8010f04:	7903      	ldrb	r3, [r0, #4]
 8010f06:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8010f08:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8010f0c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8010f0e:	f003 030f 	and.w	r3, r3, #15
 8010f12:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8010f14:	2005      	movs	r0, #5
 8010f16:	4770      	bx	lr

08010f18 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8010f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f1c:	b085      	sub	sp, #20
 8010f1e:	4604      	mov	r4, r0
 8010f20:	4688      	mov	r8, r1
 8010f22:	4617      	mov	r7, r2
 8010f24:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 8010f26:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8010f28:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 8010f2c:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8010f30:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8010f34:	7943      	ldrb	r3, [r0, #5]
 8010f36:	b92b      	cbnz	r3, 8010f44 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8010f38:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8010f3c:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8010f40:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 8010f44:	b355      	cbz	r5, 8010f9c <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8010f46:	f1ba 0f0f 	cmp.w	sl, #15
 8010f4a:	d114      	bne.n	8010f76 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8010f4c:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8010f50:	f1b9 0f0f 	cmp.w	r9, #15
 8010f54:	d020      	beq.n	8010f98 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8010f56:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8010f5a:	9303      	str	r3, [sp, #12]
 8010f5c:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8010f60:	461c      	mov	r4, r3
 8010f62:	4619      	mov	r1, r3
 8010f64:	4648      	mov	r0, r9
 8010f66:	f7ff fe94 	bl	8010c92 <RegionCommonValueInRange>
 8010f6a:	b9b8      	cbnz	r0, 8010f9c <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8010f6c:	454c      	cmp	r4, r9
 8010f6e:	dc21      	bgt.n	8010fb4 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8010f70:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 8010f74:	e012      	b.n	8010f9c <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8010f76:	69a3      	ldr	r3, [r4, #24]
 8010f78:	9301      	str	r3, [sp, #4]
 8010f7a:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8010f7e:	9300      	str	r3, [sp, #0]
 8010f80:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8010f84:	4652      	mov	r2, sl
 8010f86:	6921      	ldr	r1, [r4, #16]
 8010f88:	7b20      	ldrb	r0, [r4, #12]
 8010f8a:	f7ff fe8c 	bl	8010ca6 <RegionCommonChanVerifyDr>
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d1de      	bne.n	8010f50 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 8010f92:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8010f96:	e7db      	b.n	8010f50 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 8010f98:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8010f9c:	2d07      	cmp	r5, #7
 8010f9e:	d00c      	beq.n	8010fba <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 8010fa0:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 8010fa4:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 8010fa8:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 8010fac:	4628      	mov	r0, r5
 8010fae:	b005      	add	sp, #20
 8010fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 8010fb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010fb8:	e7f0      	b.n	8010f9c <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 8010fba:	f1bb 0f00 	cmp.w	fp, #0
 8010fbe:	d1ef      	bne.n	8010fa0 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 8010fc0:	f04f 0b01 	mov.w	fp, #1
 8010fc4:	e7ec      	b.n	8010fa0 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

08010fc8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8010fc8:	4b02      	ldr	r3, [pc, #8]	; (8010fd4 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 8010fca:	fa03 f000 	lsl.w	r0, r3, r0
}
 8010fce:	fbb0 f0f1 	udiv	r0, r0, r1
 8010fd2:	4770      	bx	lr
 8010fd4:	000f4240 	.word	0x000f4240

08010fd8 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8010fd8:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8010fda:	f1a1 0c04 	sub.w	ip, r1, #4
 8010fde:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8010fe2:	fb0e f202 	mul.w	r2, lr, r2
 8010fe6:	fb00 220c 	mla	r2, r0, ip, r2
 8010fea:	0052      	lsls	r2, r2, #1
 8010fec:	d021      	beq.n	8011032 <RegionCommonComputeRxWindowParameters+0x5a>
 8010fee:	4402      	add	r2, r0
 8010ff0:	3a01      	subs	r2, #1
 8010ff2:	fbb2 f2f0 	udiv	r2, r2, r0
 8010ff6:	4291      	cmp	r1, r2
 8010ff8:	bf38      	it	cc
 8010ffa:	4611      	movcc	r1, r2
 8010ffc:	9a01      	ldr	r2, [sp, #4]
 8010ffe:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8011000:	0082      	lsls	r2, r0, #2
 8011002:	fb01 f000 	mul.w	r0, r1, r0
 8011006:	b1b8      	cbz	r0, 8011038 <RegionCommonComputeRxWindowParameters+0x60>
 8011008:	3001      	adds	r0, #1
 801100a:	0840      	lsrs	r0, r0, #1
 801100c:	1a12      	subs	r2, r2, r0
 801100e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011012:	fb01 2313 	mls	r3, r1, r3, r2
 8011016:	2b00      	cmp	r3, #0
 8011018:	dd10      	ble.n	801103c <RegionCommonComputeRxWindowParameters+0x64>
 801101a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801101e:	4a0b      	ldr	r2, [pc, #44]	; (801104c <RegionCommonComputeRxWindowParameters+0x74>)
 8011020:	fb82 1203 	smull	r1, r2, r2, r3
 8011024:	17db      	asrs	r3, r3, #31
 8011026:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801102a:	9a02      	ldr	r2, [sp, #8]
 801102c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801102e:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8011032:	fbb2 f2f0 	udiv	r2, r2, r0
 8011036:	e7de      	b.n	8010ff6 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8011038:	0840      	lsrs	r0, r0, #1
 801103a:	e7e7      	b.n	801100c <RegionCommonComputeRxWindowParameters+0x34>
 801103c:	4a03      	ldr	r2, [pc, #12]	; (801104c <RegionCommonComputeRxWindowParameters+0x74>)
 801103e:	fb82 1203 	smull	r1, r2, r2, r3
 8011042:	17db      	asrs	r3, r3, #31
 8011044:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011048:	e7ef      	b.n	801102a <RegionCommonComputeRxWindowParameters+0x52>
 801104a:	bf00      	nop
 801104c:	10624dd3 	.word	0x10624dd3

08011050 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8011050:	b538      	push	{r3, r4, r5, lr}
 8011052:	460d      	mov	r5, r1
 8011054:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8011056:	0040      	lsls	r0, r0, #1
 8011058:	f7ef fea4 	bl	8000da4 <__aeabi_ui2f>
 801105c:	4601      	mov	r1, r0
 801105e:	4628      	mov	r0, r5
 8011060:	f7ef fdee 	bl	8000c40 <__aeabi_fsub>
 8011064:	4621      	mov	r1, r4
 8011066:	f7ef fdeb 	bl	8000c40 <__aeabi_fsub>
 801106a:	f7ef fa45 	bl	80004f8 <__aeabi_f2d>
 801106e:	f008 fef3 	bl	8019e58 <floor>
 8011072:	f7ef fd49 	bl	8000b08 <__aeabi_d2iz>

    return phyTxPower;
}
 8011076:	b240      	sxtb	r0, r0
 8011078:	bd38      	pop	{r3, r4, r5, pc}

0801107a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801107a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801107e:	b083      	sub	sp, #12
 8011080:	4605      	mov	r5, r0
 8011082:	468b      	mov	fp, r1
 8011084:	9200      	str	r2, [sp, #0]
 8011086:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8011088:	2600      	movs	r6, #0
 801108a:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 801108c:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 801108e:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8011090:	e049      	b.n	8011126 <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8011092:	7a3a      	ldrb	r2, [r7, #8]
 8011094:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8011098:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801109c:	b252      	sxtb	r2, r2
 801109e:	b249      	sxtb	r1, r1
 80110a0:	f995 0001 	ldrsb.w	r0, [r5, #1]
 80110a4:	f7ff fdf5 	bl	8010c92 <RegionCommonValueInRange>
 80110a8:	b178      	cbz	r0, 80110ca <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80110aa:	68ea      	ldr	r2, [r5, #12]
 80110ac:	7a7b      	ldrb	r3, [r7, #9]
 80110ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80110b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80110b6:	7d13      	ldrb	r3, [r2, #20]
 80110b8:	b353      	cbz	r3, 8011110 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 80110ba:	f109 0301 	add.w	r3, r9, #1
 80110be:	eb08 0204 	add.w	r2, r8, r4
 80110c2:	f80b 2009 	strb.w	r2, [fp, r9]
 80110c6:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 80110ca:	3401      	adds	r4, #1
 80110cc:	b2e4      	uxtb	r4, r4
 80110ce:	2c0f      	cmp	r4, #15
 80110d0:	d823      	bhi.n	801111a <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80110d2:	686b      	ldr	r3, [r5, #4]
 80110d4:	0072      	lsls	r2, r6, #1
 80110d6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80110da:	4123      	asrs	r3, r4
 80110dc:	f013 0f01 	tst.w	r3, #1
 80110e0:	d0f3      	beq.n	80110ca <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80110e2:	68a8      	ldr	r0, [r5, #8]
 80110e4:	eb08 0304 	add.w	r3, r8, r4
 80110e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80110ec:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80110f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d0e8      	beq.n	80110ca <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80110f8:	782b      	ldrb	r3, [r5, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d1c9      	bne.n	8011092 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80110fe:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8011100:	2b00      	cmp	r3, #0
 8011102:	d0c6      	beq.n	8011092 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8011104:	5a9b      	ldrh	r3, [r3, r2]
 8011106:	4123      	asrs	r3, r4
 8011108:	f013 0f01 	tst.w	r3, #1
 801110c:	d1c1      	bne.n	8011092 <RegionCommonCountNbOfEnabledChannels+0x18>
 801110e:	e7dc      	b.n	80110ca <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 8011110:	f10a 0a01 	add.w	sl, sl, #1
 8011114:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 8011118:	e7d7      	b.n	80110ca <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801111a:	f108 0810 	add.w	r8, r8, #16
 801111e:	fa5f f888 	uxtb.w	r8, r8
 8011122:	3601      	adds	r6, #1
 8011124:	b2f6      	uxtb	r6, r6
 8011126:	8a2b      	ldrh	r3, [r5, #16]
 8011128:	fa1f f288 	uxth.w	r2, r8
 801112c:	429a      	cmp	r2, r3
 801112e:	d201      	bcs.n	8011134 <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 8011130:	2400      	movs	r4, #0
 8011132:	e7cc      	b.n	80110ce <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8011134:	9b00      	ldr	r3, [sp, #0]
 8011136:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801113a:	9b01      	ldr	r3, [sp, #4]
 801113c:	f883 a000 	strb.w	sl, [r3]
}
 8011140:	b003      	add	sp, #12
 8011142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011146 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8011146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801114a:	b085      	sub	sp, #20
 801114c:	4604      	mov	r4, r0
 801114e:	460f      	mov	r7, r1
 8011150:	4616      	mov	r6, r2
 8011152:	461d      	mov	r5, r3
 8011154:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8011158:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801115c:	6840      	ldr	r0, [r0, #4]
 801115e:	f003 ffdd 	bl	801511c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8011162:	6823      	ldr	r3, [r4, #0]
 8011164:	1a1b      	subs	r3, r3, r0
 8011166:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 801116a:	2301      	movs	r3, #1
 801116c:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 8011170:	2300      	movs	r3, #0
 8011172:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8011174:	6863      	ldr	r3, [r4, #4]
 8011176:	b113      	cbz	r3, 801117e <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8011178:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801117a:	4283      	cmp	r3, r0
 801117c:	d81e      	bhi.n	80111bc <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801117e:	2300      	movs	r3, #0
 8011180:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8011182:	69e3      	ldr	r3, [r4, #28]
 8011184:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8011188:	781f      	ldrb	r7, [r3, #0]
 801118a:	69a3      	ldr	r3, [r4, #24]
 801118c:	9303      	str	r3, [sp, #12]
 801118e:	ab01      	add	r3, sp, #4
 8011190:	f104 020c 	add.w	r2, r4, #12
 8011194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011198:	e883 0003 	stmia.w	r3, {r0, r1}
 801119c:	7d23      	ldrb	r3, [r4, #20]
 801119e:	9300      	str	r3, [sp, #0]
 80111a0:	7a23      	ldrb	r3, [r4, #8]
 80111a2:	7a62      	ldrb	r2, [r4, #9]
 80111a4:	4661      	mov	r1, ip
 80111a6:	4638      	mov	r0, r7
 80111a8:	f7ff fe10 	bl	8010dcc <RegionCommonUpdateBandTimeOff>
 80111ac:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80111b0:	4643      	mov	r3, r8
 80111b2:	462a      	mov	r2, r5
 80111b4:	4631      	mov	r1, r6
 80111b6:	69e0      	ldr	r0, [r4, #28]
 80111b8:	f7ff ff5f 	bl	801107a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80111bc:	782b      	ldrb	r3, [r5, #0]
 80111be:	b923      	cbnz	r3, 80111ca <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 80111c0:	f898 3000 	ldrb.w	r3, [r8]
 80111c4:	b13b      	cbz	r3, 80111d6 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80111c6:	200b      	movs	r0, #11
 80111c8:	e002      	b.n	80111d0 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 80111ca:	2000      	movs	r0, #0
 80111cc:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 80111d0:	b005      	add	sp, #20
 80111d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80111d6:	200c      	movs	r0, #12
 80111d8:	e7fa      	b.n	80111d0 <RegionCommonIdentifyChannels+0x8a>

080111da <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80111da:	b570      	push	{r4, r5, r6, lr}
 80111dc:	b082      	sub	sp, #8
 80111de:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 80111e0:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 80111e4:	f990 6002 	ldrsb.w	r6, [r0, #2]
 80111e8:	42a6      	cmp	r6, r4
 80111ea:	d011      	beq.n	8011210 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80111ec:	3c01      	subs	r4, #1
 80111ee:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 80111f0:	42a6      	cmp	r6, r4
 80111f2:	d00e      	beq.n	8011212 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80111f4:	68ab      	ldr	r3, [r5, #8]
 80111f6:	9301      	str	r3, [sp, #4]
 80111f8:	f995 3001 	ldrsb.w	r3, [r5, #1]
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	4633      	mov	r3, r6
 8011200:	4622      	mov	r2, r4
 8011202:	6869      	ldr	r1, [r5, #4]
 8011204:	78e8      	ldrb	r0, [r5, #3]
 8011206:	f7ff fd4e 	bl	8010ca6 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 801120a:	2800      	cmp	r0, #0
 801120c:	d0ee      	beq.n	80111ec <RegionCommonGetNextLowerTxDr+0x12>
 801120e:	e000      	b.n	8011212 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 8011210:	4634      	mov	r4, r6

        return drLocal;
    }
}
 8011212:	4620      	mov	r0, r4
 8011214:	b002      	add	sp, #8
 8011216:	bd70      	pop	{r4, r5, r6, pc}

08011218 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 8011218:	4288      	cmp	r0, r1
 801121a:	bfb8      	it	lt
 801121c:	4608      	movlt	r0, r1
 801121e:	4770      	bx	lr

08011220 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8011220:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8011224:	4a05      	ldr	r2, [pc, #20]	; (801123c <RegionCommonGetBandwidth+0x1c>)
 8011226:	4293      	cmp	r3, r2
 8011228:	d004      	beq.n	8011234 <RegionCommonGetBandwidth+0x14>
 801122a:	4a05      	ldr	r2, [pc, #20]	; (8011240 <RegionCommonGetBandwidth+0x20>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d103      	bne.n	8011238 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8011230:	2002      	movs	r0, #2
 8011232:	4770      	bx	lr
            return 1;
 8011234:	2001      	movs	r0, #1
 8011236:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 8011238:	2000      	movs	r0, #0
    }
}
 801123a:	4770      	bx	lr
 801123c:	0003d090 	.word	0x0003d090
 8011240:	0007a120 	.word	0x0007a120

08011244 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8011244:	b500      	push	{lr}
 8011246:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 8011248:	2805      	cmp	r0, #5
 801124a:	d80e      	bhi.n	801126a <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801124c:	9202      	str	r2, [sp, #8]
 801124e:	9101      	str	r1, [sp, #4]
 8011250:	4b0a      	ldr	r3, [pc, #40]	; (801127c <RegionCommonRxConfigPrint+0x38>)
 8011252:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011256:	9300      	str	r3, [sp, #0]
 8011258:	4b09      	ldr	r3, [pc, #36]	; (8011280 <RegionCommonRxConfigPrint+0x3c>)
 801125a:	2201      	movs	r2, #1
 801125c:	2100      	movs	r1, #0
 801125e:	2002      	movs	r0, #2
 8011260:	f003 fc4a 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8011264:	b005      	add	sp, #20
 8011266:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801126a:	9201      	str	r2, [sp, #4]
 801126c:	9100      	str	r1, [sp, #0]
 801126e:	4b05      	ldr	r3, [pc, #20]	; (8011284 <RegionCommonRxConfigPrint+0x40>)
 8011270:	2201      	movs	r2, #1
 8011272:	2100      	movs	r1, #0
 8011274:	2002      	movs	r0, #2
 8011276:	f003 fc3f 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 801127a:	e7f3      	b.n	8011264 <RegionCommonRxConfigPrint+0x20>
 801127c:	0801a8e0 	.word	0x0801a8e0
 8011280:	0801a878 	.word	0x0801a878
 8011284:	0801a898 	.word	0x0801a898

08011288 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8011288:	b500      	push	{lr}
 801128a:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801128c:	9101      	str	r1, [sp, #4]
 801128e:	9000      	str	r0, [sp, #0]
 8011290:	4b04      	ldr	r3, [pc, #16]	; (80112a4 <RegionCommonTxConfigPrint+0x1c>)
 8011292:	2201      	movs	r2, #1
 8011294:	2100      	movs	r1, #0
 8011296:	2002      	movs	r0, #2
 8011298:	f003 fc2e 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 801129c:	b003      	add	sp, #12
 801129e:	f85d fb04 	ldr.w	pc, [sp], #4
 80112a2:	bf00      	nop
 80112a4:	0801a8b4 	.word	0x0801a8b4

080112a8 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 80112a8:	b510      	push	{r4, lr}
 80112aa:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80112ac:	4b10      	ldr	r3, [pc, #64]	; (80112f0 <VerifyRfFreq+0x48>)
 80112ae:	6a1b      	ldr	r3, [r3, #32]
 80112b0:	4798      	blx	r3
 80112b2:	b1c8      	cbz	r0, 80112e8 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80112b4:	4b0f      	ldr	r3, [pc, #60]	; (80112f4 <VerifyRfFreq+0x4c>)
 80112b6:	4423      	add	r3, r4
 80112b8:	4a0f      	ldr	r2, [pc, #60]	; (80112f8 <VerifyRfFreq+0x50>)
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d813      	bhi.n	80112e6 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80112be:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 80112c2:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 80112c6:	f202 7245 	addw	r2, r2, #1861	; 0x745
 80112ca:	fba2 1203 	umull	r1, r2, r2, r3
 80112ce:	0c92      	lsrs	r2, r2, #18
 80112d0:	490a      	ldr	r1, [pc, #40]	; (80112fc <VerifyRfFreq+0x54>)
 80112d2:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 80112d6:	b942      	cbnz	r2, 80112ea <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 80112d8:	4b09      	ldr	r3, [pc, #36]	; (8011300 <VerifyRfFreq+0x58>)
 80112da:	4423      	add	r3, r4
 80112dc:	4a09      	ldr	r2, [pc, #36]	; (8011304 <VerifyRfFreq+0x5c>)
 80112de:	4293      	cmp	r3, r2
 80112e0:	d902      	bls.n	80112e8 <VerifyRfFreq+0x40>
    {
        return false;
 80112e2:	2000      	movs	r0, #0
 80112e4:	e000      	b.n	80112e8 <VerifyRfFreq+0x40>
        return false;
 80112e6:	2000      	movs	r0, #0
    }
    return true;
}
 80112e8:	bd10      	pop	{r4, pc}
        return false;
 80112ea:	2000      	movs	r0, #0
 80112ec:	e7fc      	b.n	80112e8 <VerifyRfFreq+0x40>
 80112ee:	bf00      	nop
 80112f0:	0801af08 	.word	0x0801af08
 80112f4:	c8f78f60 	.word	0xc8f78f60
 80112f8:	00401640 	.word	0x00401640
 80112fc:	000927c0 	.word	0x000927c0
 8011300:	ca37fea0 	.word	0xca37fea0
 8011304:	01808580 	.word	0x01808580

08011308 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8011308:	b570      	push	{r4, r5, r6, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 801130e:	4b0a      	ldr	r3, [pc, #40]	; (8011338 <GetTimeOnAir+0x30>)
 8011310:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8011312:	490a      	ldr	r1, [pc, #40]	; (801133c <GetTimeOnAir+0x34>)
 8011314:	f7ff ff84 	bl	8011220 <RegionCommonGetBandwidth>
 8011318:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801131a:	4b09      	ldr	r3, [pc, #36]	; (8011340 <GetTimeOnAir+0x38>)
 801131c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801131e:	2001      	movs	r0, #1
 8011320:	9003      	str	r0, [sp, #12]
 8011322:	b2e4      	uxtb	r4, r4
 8011324:	9402      	str	r4, [sp, #8]
 8011326:	2200      	movs	r2, #0
 8011328:	9201      	str	r2, [sp, #4]
 801132a:	2208      	movs	r2, #8
 801132c:	9200      	str	r2, [sp, #0]
 801132e:	4603      	mov	r3, r0
 8011330:	4632      	mov	r2, r6
 8011332:	47a8      	blx	r5
}
 8011334:	b004      	add	sp, #16
 8011336:	bd70      	pop	{r4, r5, r6, pc}
 8011338:	0801a94c 	.word	0x0801a94c
 801133c:	0801a8f8 	.word	0x0801a8f8
 8011340:	0801af08 	.word	0x0801af08

08011344 <LimitTxPower>:
{
 8011344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011346:	4606      	mov	r6, r0
 8011348:	4615      	mov	r5, r2
 801134a:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801134c:	f7ff ff64 	bl	8011218 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8011350:	2d04      	cmp	r5, #4
 8011352:	d105      	bne.n	8011360 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8011354:	4634      	mov	r4, r6
 8011356:	2e02      	cmp	r6, #2
 8011358:	bfb8      	it	lt
 801135a:	2402      	movlt	r4, #2
}
 801135c:	4620      	mov	r0, r4
 801135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011360:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8011362:	2204      	movs	r2, #4
 8011364:	2100      	movs	r1, #0
 8011366:	4638      	mov	r0, r7
 8011368:	f7ff fcf1 	bl	8010d4e <RegionCommonCountChannels>
 801136c:	2831      	cmp	r0, #49	; 0x31
 801136e:	d8f5      	bhi.n	801135c <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8011370:	4634      	mov	r4, r6
 8011372:	2e05      	cmp	r6, #5
 8011374:	bfb8      	it	lt
 8011376:	2405      	movlt	r4, #5
 8011378:	e7f0      	b.n	801135c <LimitTxPower+0x18>
	...

0801137c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801137c:	b500      	push	{lr}
 801137e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8011380:	2300      	movs	r3, #0
 8011382:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8011384:	7803      	ldrb	r3, [r0, #0]
 8011386:	3b01      	subs	r3, #1
 8011388:	2b37      	cmp	r3, #55	; 0x37
 801138a:	d81f      	bhi.n	80113cc <RegionUS915GetPhyParam+0x50>
 801138c:	e8df f003 	tbb	[pc, r3]
 8011390:	1e1e1e1c 	.word	0x1e1e1e1c
 8011394:	1e1e1e1e 	.word	0x1e1e1e1e
 8011398:	3e3b1e1e 	.word	0x3e3b1e1e
 801139c:	4d1e4741 	.word	0x4d1e4741
 80113a0:	5d595551 	.word	0x5d595551
 80113a4:	6d6a1e61 	.word	0x6d6a1e61
 80113a8:	7f7c7670 	.word	0x7f7c7670
 80113ac:	86831e1e 	.word	0x86831e1e
 80113b0:	1e1e1e23 	.word	0x1e1e1e23
 80113b4:	1e1e1e1e 	.word	0x1e1e1e1e
 80113b8:	1e1e1e1e 	.word	0x1e1e1e1e
 80113bc:	90891e1e 	.word	0x90891e1e
 80113c0:	a01e9d9a 	.word	0xa01e9d9a
 80113c4:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 80113c8:	2308      	movs	r3, #8
 80113ca:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 80113cc:	9804      	ldr	r0, [sp, #16]
 80113ce:	9005      	str	r0, [sp, #20]
}
 80113d0:	b007      	add	sp, #28
 80113d2:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 80113d6:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80113da:	f88d 3004 	strb.w	r3, [sp, #4]
 80113de:	2304      	movs	r3, #4
 80113e0:	f88d 3005 	strb.w	r3, [sp, #5]
 80113e4:	2300      	movs	r3, #0
 80113e6:	f88d 3006 	strb.w	r3, [sp, #6]
 80113ea:	2348      	movs	r3, #72	; 0x48
 80113ec:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80113f0:	4b44      	ldr	r3, [pc, #272]	; (8011504 <RegionUS915GetPhyParam+0x188>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80113f8:	9202      	str	r2, [sp, #8]
 80113fa:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80113fc:	a801      	add	r0, sp, #4
 80113fe:	f7ff feec 	bl	80111da <RegionCommonGetNextLowerTxDr>
 8011402:	9004      	str	r0, [sp, #16]
            break;
 8011404:	e7e2      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8011406:	2340      	movs	r3, #64	; 0x40
 8011408:	9304      	str	r3, [sp, #16]
            break;
 801140a:	e7df      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801140c:	2320      	movs	r3, #32
 801140e:	9304      	str	r3, [sp, #16]
            break;
 8011410:	e7dc      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8011412:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011416:	4a3c      	ldr	r2, [pc, #240]	; (8011508 <RegionUS915GetPhyParam+0x18c>)
 8011418:	5cd3      	ldrb	r3, [r2, r3]
 801141a:	9304      	str	r3, [sp, #16]
            break;
 801141c:	e7d6      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801141e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011422:	4a3a      	ldr	r2, [pc, #232]	; (801150c <RegionUS915GetPhyParam+0x190>)
 8011424:	5cd3      	ldrb	r3, [r2, r3]
 8011426:	9304      	str	r3, [sp, #16]
            break;
 8011428:	e7d0      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 801142a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801142e:	9304      	str	r3, [sp, #16]
            break;
 8011430:	e7cc      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8011432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011436:	9304      	str	r3, [sp, #16]
            break;
 8011438:	e7c8      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801143a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801143e:	9304      	str	r3, [sp, #16]
            break;
 8011440:	e7c4      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8011442:	f241 3388 	movw	r3, #5000	; 0x1388
 8011446:	9304      	str	r3, [sp, #16]
            break;
 8011448:	e7c0      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801144a:	f241 7370 	movw	r3, #6000	; 0x1770
 801144e:	9304      	str	r3, [sp, #16]
            break;
 8011450:	e7bc      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8011452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011456:	482e      	ldr	r0, [pc, #184]	; (8011510 <RegionUS915GetPhyParam+0x194>)
 8011458:	f001 fc64 	bl	8012d24 <randr>
 801145c:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8011460:	9004      	str	r0, [sp, #16]
            break;
 8011462:	e7b3      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8011464:	4b2b      	ldr	r3, [pc, #172]	; (8011514 <RegionUS915GetPhyParam+0x198>)
 8011466:	9304      	str	r3, [sp, #16]
            break;
 8011468:	e7b0      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 801146a:	2308      	movs	r3, #8
 801146c:	9304      	str	r3, [sp, #16]
            break;
 801146e:	e7ad      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011470:	4b24      	ldr	r3, [pc, #144]	; (8011504 <RegionUS915GetPhyParam+0x188>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8011478:	9304      	str	r3, [sp, #16]
            break;
 801147a:	e7a7      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801147c:	4b21      	ldr	r3, [pc, #132]	; (8011504 <RegionUS915GetPhyParam+0x188>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8011484:	9304      	str	r3, [sp, #16]
            break;
 8011486:	e7a1      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8011488:	2348      	movs	r3, #72	; 0x48
 801148a:	9304      	str	r3, [sp, #16]
            break;
 801148c:	e79e      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801148e:	4b1d      	ldr	r3, [pc, #116]	; (8011504 <RegionUS915GetPhyParam+0x188>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	9304      	str	r3, [sp, #16]
            break;
 8011494:	e79a      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8011496:	4b20      	ldr	r3, [pc, #128]	; (8011518 <RegionUS915GetPhyParam+0x19c>)
 8011498:	9304      	str	r3, [sp, #16]
            break;
 801149a:	e797      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 801149c:	2300      	movs	r3, #0
 801149e:	9304      	str	r3, [sp, #16]
            break;
 80114a0:	e794      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80114a2:	4a1e      	ldr	r2, [pc, #120]	; (801151c <RegionUS915GetPhyParam+0x1a0>)
 80114a4:	491b      	ldr	r1, [pc, #108]	; (8011514 <RegionUS915GetPhyParam+0x198>)
 80114a6:	7900      	ldrb	r0, [r0, #4]
 80114a8:	f7ff fb24 	bl	8010af4 <RegionBaseUSCalcDownlinkFrequency>
 80114ac:	9004      	str	r0, [sp, #16]
            break;
 80114ae:	e78d      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 80114b0:	2317      	movs	r3, #23
 80114b2:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 80114b6:	2304      	movs	r3, #4
 80114b8:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 80114bc:	2303      	movs	r3, #3
 80114be:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 80114c2:	e783      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 80114c4:	2308      	movs	r3, #8
 80114c6:	9304      	str	r3, [sp, #16]
            break;
 80114c8:	e780      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80114ca:	2308      	movs	r3, #8
 80114cc:	9304      	str	r3, [sp, #16]
            break;
 80114ce:	e77d      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80114d0:	4a12      	ldr	r2, [pc, #72]	; (801151c <RegionUS915GetPhyParam+0x1a0>)
 80114d2:	4910      	ldr	r1, [pc, #64]	; (8011514 <RegionUS915GetPhyParam+0x198>)
 80114d4:	7900      	ldrb	r0, [r0, #4]
 80114d6:	f7ff fb0d 	bl	8010af4 <RegionBaseUSCalcDownlinkFrequency>
 80114da:	9004      	str	r0, [sp, #16]
            break;
 80114dc:	e776      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 80114de:	2308      	movs	r3, #8
 80114e0:	9304      	str	r3, [sp, #16]
            break;
 80114e2:	e773      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80114e4:	2308      	movs	r3, #8
 80114e6:	9304      	str	r3, [sp, #16]
            break;
 80114e8:	e770      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80114ea:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80114ee:	4a0c      	ldr	r2, [pc, #48]	; (8011520 <RegionUS915GetPhyParam+0x1a4>)
 80114f0:	5cd3      	ldrb	r3, [r2, r3]
 80114f2:	9304      	str	r3, [sp, #16]
            break;
 80114f4:	e76a      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 80114f6:	490b      	ldr	r1, [pc, #44]	; (8011524 <RegionUS915GetPhyParam+0x1a8>)
 80114f8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80114fc:	f7ff fe90 	bl	8011220 <RegionCommonGetBandwidth>
 8011500:	9004      	str	r0, [sp, #16]
            break;
 8011502:	e763      	b.n	80113cc <RegionUS915GetPhyParam+0x50>
 8011504:	20001518 	.word	0x20001518
 8011508:	0801a96c 	.word	0x0801a96c
 801150c:	0801a95c 	.word	0x0801a95c
 8011510:	fffffc18 	.word	0xfffffc18
 8011514:	370870a0 	.word	0x370870a0
 8011518:	4200999a 	.word	0x4200999a
 801151c:	000927c0 	.word	0x000927c0
 8011520:	0801a94c 	.word	0x0801a94c
 8011524:	0801a8f8 	.word	0x0801a8f8

08011528 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8011528:	b510      	push	{r4, lr}
 801152a:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801152c:	4b0b      	ldr	r3, [pc, #44]	; (801155c <RegionUS915SetBandTxDone+0x34>)
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	7803      	ldrb	r3, [r0, #0]
 8011532:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011536:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801153a:	7a5b      	ldrb	r3, [r3, #9]
 801153c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8011540:	4b07      	ldr	r3, [pc, #28]	; (8011560 <RegionUS915SetBandTxDone+0x38>)
 8011542:	681c      	ldr	r4, [r3, #0]
 8011544:	6903      	ldr	r3, [r0, #16]
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	68c3      	ldr	r3, [r0, #12]
 801154a:	7842      	ldrb	r2, [r0, #1]
 801154c:	6881      	ldr	r1, [r0, #8]
 801154e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8011552:	f7ff fc21 	bl	8010d98 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8011556:	b002      	add	sp, #8
 8011558:	bd10      	pop	{r4, pc}
 801155a:	bf00      	nop
 801155c:	20001518 	.word	0x20001518
 8011560:	20001510 	.word	0x20001510

08011564 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8011564:	b510      	push	{r4, lr}
 8011566:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8011568:	2301      	movs	r3, #1
 801156a:	f8ad 3000 	strh.w	r3, [sp]
 801156e:	2300      	movs	r3, #0
 8011570:	f88d 3002 	strb.w	r3, [sp, #2]
 8011574:	9301      	str	r3, [sp, #4]
 8011576:	9302      	str	r3, [sp, #8]
 8011578:	9303      	str	r3, [sp, #12]
 801157a:	9304      	str	r3, [sp, #16]
 801157c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8011580:	7b04      	ldrb	r4, [r0, #12]
 8011582:	b174      	cbz	r4, 80115a2 <RegionUS915InitDefaults+0x3e>
 8011584:	3c01      	subs	r4, #1
 8011586:	b2e4      	uxtb	r4, r4
 8011588:	2c01      	cmp	r4, #1
 801158a:	d87e      	bhi.n	801168a <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801158c:	4b40      	ldr	r3, [pc, #256]	; (8011690 <RegionUS915InitDefaults+0x12c>)
 801158e:	6818      	ldr	r0, [r3, #0]
 8011590:	2206      	movs	r2, #6
 8011592:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8011596:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801159a:	f7ff fbee 	bl	8010d7a <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801159e:	2300      	movs	r3, #0
 80115a0:	e071      	b.n	8011686 <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80115a2:	6803      	ldr	r3, [r0, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d070      	beq.n	801168a <RegionUS915InitDefaults+0x126>
 80115a8:	6842      	ldr	r2, [r0, #4]
 80115aa:	2a00      	cmp	r2, #0
 80115ac:	d06d      	beq.n	801168a <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80115ae:	4939      	ldr	r1, [pc, #228]	; (8011694 <RegionUS915InitDefaults+0x130>)
 80115b0:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80115b2:	4937      	ldr	r1, [pc, #220]	; (8011690 <RegionUS915InitDefaults+0x12c>)
 80115b4:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 80115b6:	6880      	ldr	r0, [r0, #8]
 80115b8:	4a37      	ldr	r2, [pc, #220]	; (8011698 <RegionUS915InitDefaults+0x134>)
 80115ba:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80115bc:	2200      	movs	r2, #0
 80115be:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 80115c0:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80115c2:	2218      	movs	r2, #24
 80115c4:	4669      	mov	r1, sp
 80115c6:	f001 fbba 	bl	8012d3e <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80115ca:	e011      	b.n	80115f0 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80115cc:	4b30      	ldr	r3, [pc, #192]	; (8011690 <RegionUS915InitDefaults+0x12c>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4932      	ldr	r1, [pc, #200]	; (801169c <RegionUS915InitDefaults+0x138>)
 80115d2:	4a33      	ldr	r2, [pc, #204]	; (80116a0 <RegionUS915InitDefaults+0x13c>)
 80115d4:	fb01 2204 	mla	r2, r1, r4, r2
 80115d8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80115dc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80115e0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80115e4:	2230      	movs	r2, #48	; 0x30
 80115e6:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 80115e8:	2200      	movs	r2, #0
 80115ea:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80115ec:	3401      	adds	r4, #1
 80115ee:	b2e4      	uxtb	r4, r4
 80115f0:	2c3f      	cmp	r4, #63	; 0x3f
 80115f2:	d9eb      	bls.n	80115cc <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80115f4:	2340      	movs	r3, #64	; 0x40
 80115f6:	2b47      	cmp	r3, #71	; 0x47
 80115f8:	d814      	bhi.n	8011624 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80115fa:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 80115fe:	4a24      	ldr	r2, [pc, #144]	; (8011690 <RegionUS915InitDefaults+0x12c>)
 8011600:	6812      	ldr	r2, [r2, #0]
 8011602:	4c28      	ldr	r4, [pc, #160]	; (80116a4 <RegionUS915InitDefaults+0x140>)
 8011604:	4928      	ldr	r1, [pc, #160]	; (80116a8 <RegionUS915InitDefaults+0x144>)
 8011606:	fb04 1100 	mla	r1, r4, r0, r1
 801160a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 801160e:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8011612:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8011616:	2144      	movs	r1, #68	; 0x44
 8011618:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 801161a:	2100      	movs	r1, #0
 801161c:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801161e:	3301      	adds	r3, #1
 8011620:	b2db      	uxtb	r3, r3
 8011622:	e7e8      	b.n	80115f6 <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8011624:	4c1a      	ldr	r4, [pc, #104]	; (8011690 <RegionUS915InitDefaults+0x12c>)
 8011626:	6820      	ldr	r0, [r4, #0]
 8011628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801162c:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8011630:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8011634:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8011638:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801163c:	23ff      	movs	r3, #255	; 0xff
 801163e:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8011642:	2300      	movs	r3, #0
 8011644:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8011648:	2206      	movs	r2, #6
 801164a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801164e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011652:	f7ff fb92 	bl	8010d7a <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8011656:	6821      	ldr	r1, [r4, #0]
 8011658:	2206      	movs	r2, #6
 801165a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801165e:	4b0d      	ldr	r3, [pc, #52]	; (8011694 <RegionUS915InitDefaults+0x130>)
 8011660:	6818      	ldr	r0, [r3, #0]
 8011662:	f7ff fb8a 	bl	8010d7a <RegionCommonChanMaskCopy>
            break;
 8011666:	e010      	b.n	801168a <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8011668:	4a0a      	ldr	r2, [pc, #40]	; (8011694 <RegionUS915InitDefaults+0x130>)
 801166a:	6811      	ldr	r1, [r2, #0]
 801166c:	4a08      	ldr	r2, [pc, #32]	; (8011690 <RegionUS915InitDefaults+0x12c>)
 801166e:	6812      	ldr	r2, [r2, #0]
 8011670:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8011674:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8011678:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801167c:	4002      	ands	r2, r0
 801167e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8011682:	3301      	adds	r3, #1
 8011684:	b2db      	uxtb	r3, r3
 8011686:	2b05      	cmp	r3, #5
 8011688:	d9ee      	bls.n	8011668 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 801168a:	b006      	add	sp, #24
 801168c:	bd10      	pop	{r4, pc}
 801168e:	bf00      	nop
 8011690:	20001518 	.word	0x20001518
 8011694:	20001514 	.word	0x20001514
 8011698:	20001510 	.word	0x20001510
 801169c:	00030d40 	.word	0x00030d40
 80116a0:	35c80160 	.word	0x35c80160
 80116a4:	00186a00 	.word	0x00186a00
 80116a8:	35d2afc0 	.word	0x35d2afc0

080116ac <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80116ac:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 80116ae:	290a      	cmp	r1, #10
 80116b0:	d833      	bhi.n	801171a <RegionUS915Verify+0x6e>
 80116b2:	e8df f001 	tbb	[pc, r1]
 80116b6:	3206      	.short	0x3206
 80116b8:	0a323232 	.word	0x0a323232
 80116bc:	28321e14 	.word	0x28321e14
 80116c0:	28          	.byte	0x28
 80116c1:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80116c2:	6800      	ldr	r0, [r0, #0]
 80116c4:	f7ff fdf0 	bl	80112a8 <VerifyRfFreq>
 80116c8:	e028      	b.n	801171c <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80116ca:	2204      	movs	r2, #4
 80116cc:	2100      	movs	r1, #0
 80116ce:	f990 0000 	ldrsb.w	r0, [r0]
 80116d2:	f7ff fade 	bl	8010c92 <RegionCommonValueInRange>
 80116d6:	3800      	subs	r0, #0
 80116d8:	bf18      	it	ne
 80116da:	2001      	movne	r0, #1
 80116dc:	e01e      	b.n	801171c <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80116de:	2205      	movs	r2, #5
 80116e0:	2100      	movs	r1, #0
 80116e2:	f990 0000 	ldrsb.w	r0, [r0]
 80116e6:	f7ff fad4 	bl	8010c92 <RegionCommonValueInRange>
 80116ea:	3800      	subs	r0, #0
 80116ec:	bf18      	it	ne
 80116ee:	2001      	movne	r0, #1
 80116f0:	e014      	b.n	801171c <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80116f2:	220d      	movs	r2, #13
 80116f4:	2108      	movs	r1, #8
 80116f6:	f990 0000 	ldrsb.w	r0, [r0]
 80116fa:	f7ff faca 	bl	8010c92 <RegionCommonValueInRange>
 80116fe:	3800      	subs	r0, #0
 8011700:	bf18      	it	ne
 8011702:	2001      	movne	r0, #1
 8011704:	e00a      	b.n	801171c <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8011706:	220e      	movs	r2, #14
 8011708:	2100      	movs	r1, #0
 801170a:	f990 0000 	ldrsb.w	r0, [r0]
 801170e:	f7ff fac0 	bl	8010c92 <RegionCommonValueInRange>
 8011712:	3800      	subs	r0, #0
 8011714:	bf18      	it	ne
 8011716:	2001      	movne	r0, #1
 8011718:	e000      	b.n	801171c <RegionUS915Verify+0x70>
    switch( phyAttribute )
 801171a:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801171c:	bd08      	pop	{r3, pc}
	...

08011720 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8011720:	7a03      	ldrb	r3, [r0, #8]
 8011722:	2b10      	cmp	r3, #16
 8011724:	d134      	bne.n	8011790 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8011726:	6843      	ldr	r3, [r0, #4]
 8011728:	7bdb      	ldrb	r3, [r3, #15]
 801172a:	2b01      	cmp	r3, #1
 801172c:	d130      	bne.n	8011790 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801172e:	2200      	movs	r2, #0
 8011730:	4613      	mov	r3, r2
 8011732:	2a04      	cmp	r2, #4
 8011734:	d82b      	bhi.n	801178e <RegionUS915ApplyCFList+0x6e>
{
 8011736:	b530      	push	{r4, r5, lr}
 8011738:	e010      	b.n	801175c <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801173a:	4916      	ldr	r1, [pc, #88]	; (8011794 <RegionUS915ApplyCFList+0x74>)
 801173c:	680d      	ldr	r5, [r1, #0]
 801173e:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 8011742:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8011746:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 801174a:	4021      	ands	r1, r4
 801174c:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8011750:	3301      	adds	r3, #1
 8011752:	b2db      	uxtb	r3, r3
 8011754:	3202      	adds	r2, #2
 8011756:	b2d2      	uxtb	r2, r2
 8011758:	2b04      	cmp	r3, #4
 801175a:	d817      	bhi.n	801178c <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801175c:	6841      	ldr	r1, [r0, #4]
 801175e:	4c0e      	ldr	r4, [pc, #56]	; (8011798 <RegionUS915ApplyCFList+0x78>)
 8011760:	6824      	ldr	r4, [r4, #0]
 8011762:	469c      	mov	ip, r3
 8011764:	5c89      	ldrb	r1, [r1, r2]
 8011766:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 801176a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801176e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8011772:	4496      	add	lr, r2
 8011774:	f89e e001 	ldrb.w	lr, [lr, #1]
 8011778:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 801177c:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8011780:	2b04      	cmp	r3, #4
 8011782:	d1da      	bne.n	801173a <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8011784:	b2c9      	uxtb	r1, r1
 8011786:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 801178a:	e7d6      	b.n	801173a <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 801178c:	bd30      	pop	{r4, r5, pc}
 801178e:	4770      	bx	lr
 8011790:	4770      	bx	lr
 8011792:	bf00      	nop
 8011794:	20001514 	.word	0x20001514
 8011798:	20001518 	.word	0x20001518

0801179c <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801179c:	b570      	push	{r4, r5, r6, lr}
 801179e:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80117a0:	2204      	movs	r2, #4
 80117a2:	2100      	movs	r1, #0
 80117a4:	6800      	ldr	r0, [r0, #0]
 80117a6:	f7ff fad2 	bl	8010d4e <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80117aa:	2801      	cmp	r0, #1
 80117ac:	d031      	beq.n	8011812 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 80117ae:	792c      	ldrb	r4, [r5, #4]
 80117b0:	b11c      	cbz	r4, 80117ba <RegionUS915ChanMaskSet+0x1e>
 80117b2:	2c01      	cmp	r4, #1
 80117b4:	d023      	beq.n	80117fe <RegionUS915ChanMaskSet+0x62>
 80117b6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80117b8:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80117ba:	4e17      	ldr	r6, [pc, #92]	; (8011818 <RegionUS915ChanMaskSet+0x7c>)
 80117bc:	6830      	ldr	r0, [r6, #0]
 80117be:	2206      	movs	r2, #6
 80117c0:	6829      	ldr	r1, [r5, #0]
 80117c2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80117c6:	f7ff fad8 	bl	8010d7a <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80117ca:	6830      	ldr	r0, [r6, #0]
 80117cc:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 80117d0:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80117d4:	2300      	movs	r3, #0
 80117d6:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80117da:	e00c      	b.n	80117f6 <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80117dc:	4b0f      	ldr	r3, [pc, #60]	; (801181c <RegionUS915ChanMaskSet+0x80>)
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 80117e4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80117e8:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 80117ec:	400b      	ands	r3, r1
 80117ee:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80117f2:	3401      	adds	r4, #1
 80117f4:	b2e4      	uxtb	r4, r4
 80117f6:	2c05      	cmp	r4, #5
 80117f8:	d9f0      	bls.n	80117dc <RegionUS915ChanMaskSet+0x40>
    return true;
 80117fa:	2001      	movs	r0, #1
 80117fc:	e7dc      	b.n	80117b8 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80117fe:	4b06      	ldr	r3, [pc, #24]	; (8011818 <RegionUS915ChanMaskSet+0x7c>)
 8011800:	6818      	ldr	r0, [r3, #0]
 8011802:	2206      	movs	r2, #6
 8011804:	6829      	ldr	r1, [r5, #0]
 8011806:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 801180a:	f7ff fab6 	bl	8010d7a <RegionCommonChanMaskCopy>
    return true;
 801180e:	2001      	movs	r0, #1
            break;
 8011810:	e7d2      	b.n	80117b8 <RegionUS915ChanMaskSet+0x1c>
        return false;
 8011812:	2000      	movs	r0, #0
 8011814:	e7d0      	b.n	80117b8 <RegionUS915ChanMaskSet+0x1c>
 8011816:	bf00      	nop
 8011818:	20001518 	.word	0x20001518
 801181c:	20001514 	.word	0x20001514

08011820 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011822:	b083      	sub	sp, #12
 8011824:	460e      	mov	r6, r1
 8011826:	4617      	mov	r7, r2
 8011828:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801182a:	280d      	cmp	r0, #13
 801182c:	bfa8      	it	ge
 801182e:	200d      	movge	r0, #13
 8011830:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8011832:	4d0f      	ldr	r5, [pc, #60]	; (8011870 <RegionUS915ComputeRxWindowParameters+0x50>)
 8011834:	4629      	mov	r1, r5
 8011836:	f7ff fcf3 	bl	8011220 <RegionCommonGetBandwidth>
 801183a:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801183c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8011840:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8011844:	4a0b      	ldr	r2, [pc, #44]	; (8011874 <RegionUS915ComputeRxWindowParameters+0x54>)
 8011846:	5cd0      	ldrb	r0, [r2, r3]
 8011848:	f7ff fbbe 	bl	8010fc8 <RegionCommonComputeSymbolTimeLoRa>
 801184c:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801184e:	4b0a      	ldr	r3, [pc, #40]	; (8011878 <RegionUS915ComputeRxWindowParameters+0x58>)
 8011850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011852:	4798      	blx	r3
 8011854:	4603      	mov	r3, r0
 8011856:	f104 020c 	add.w	r2, r4, #12
 801185a:	9201      	str	r2, [sp, #4]
 801185c:	3408      	adds	r4, #8
 801185e:	9400      	str	r4, [sp, #0]
 8011860:	463a      	mov	r2, r7
 8011862:	4631      	mov	r1, r6
 8011864:	4628      	mov	r0, r5
 8011866:	f7ff fbb7 	bl	8010fd8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801186a:	b003      	add	sp, #12
 801186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801186e:	bf00      	nop
 8011870:	0801a8f8 	.word	0x0801a8f8
 8011874:	0801a94c 	.word	0x0801a94c
 8011878:	0801af08 	.word	0x0801af08

0801187c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801187c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011880:	b08b      	sub	sp, #44	; 0x2c
 8011882:	4604      	mov	r4, r0
 8011884:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8011886:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801188a:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801188c:	4b22      	ldr	r3, [pc, #136]	; (8011918 <RegionUS915RxConfig+0x9c>)
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	4798      	blx	r3
 8011892:	2800      	cmp	r0, #0
 8011894:	d13d      	bne.n	8011912 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8011896:	7ce3      	ldrb	r3, [r4, #19]
 8011898:	b933      	cbnz	r3, 80118a8 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801189a:	7823      	ldrb	r3, [r4, #0]
 801189c:	f003 0307 	and.w	r3, r3, #7
 80118a0:	4a1e      	ldr	r2, [pc, #120]	; (801191c <RegionUS915RxConfig+0xa0>)
 80118a2:	4f1f      	ldr	r7, [pc, #124]	; (8011920 <RegionUS915RxConfig+0xa4>)
 80118a4:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80118a8:	4b1e      	ldr	r3, [pc, #120]	; (8011924 <RegionUS915RxConfig+0xa8>)
 80118aa:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 80118ae:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8011918 <RegionUS915RxConfig+0x9c>
 80118b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118b6:	4638      	mov	r0, r7
 80118b8:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80118ba:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80118be:	7ca3      	ldrb	r3, [r4, #18]
 80118c0:	9309      	str	r3, [sp, #36]	; 0x24
 80118c2:	2001      	movs	r0, #1
 80118c4:	9008      	str	r0, [sp, #32]
 80118c6:	2200      	movs	r2, #0
 80118c8:	9207      	str	r2, [sp, #28]
 80118ca:	9206      	str	r2, [sp, #24]
 80118cc:	9205      	str	r2, [sp, #20]
 80118ce:	9204      	str	r2, [sp, #16]
 80118d0:	9203      	str	r2, [sp, #12]
 80118d2:	8923      	ldrh	r3, [r4, #8]
 80118d4:	9302      	str	r3, [sp, #8]
 80118d6:	2308      	movs	r3, #8
 80118d8:	9301      	str	r3, [sp, #4]
 80118da:	9200      	str	r2, [sp, #0]
 80118dc:	4603      	mov	r3, r0
 80118de:	464a      	mov	r2, r9
 80118e0:	78a1      	ldrb	r1, [r4, #2]
 80118e2:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 80118e4:	7c63      	ldrb	r3, [r4, #17]
 80118e6:	b18b      	cbz	r3, 801190c <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80118e8:	4b0f      	ldr	r3, [pc, #60]	; (8011928 <RegionUS915RxConfig+0xac>)
 80118ea:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80118ec:	4b0a      	ldr	r3, [pc, #40]	; (8011918 <RegionUS915RxConfig+0x9c>)
 80118ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118f0:	310d      	adds	r1, #13
 80118f2:	b2c9      	uxtb	r1, r1
 80118f4:	2001      	movs	r0, #1
 80118f6:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80118f8:	4632      	mov	r2, r6
 80118fa:	4639      	mov	r1, r7
 80118fc:	7ce0      	ldrb	r0, [r4, #19]
 80118fe:	f7ff fca1 	bl	8011244 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8011902:	702e      	strb	r6, [r5, #0]
    return true;
 8011904:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8011906:	b00b      	add	sp, #44	; 0x2c
 8011908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801190c:	4b07      	ldr	r3, [pc, #28]	; (801192c <RegionUS915RxConfig+0xb0>)
 801190e:	5d99      	ldrb	r1, [r3, r6]
 8011910:	e7ec      	b.n	80118ec <RegionUS915RxConfig+0x70>
        return false;
 8011912:	2000      	movs	r0, #0
 8011914:	e7f7      	b.n	8011906 <RegionUS915RxConfig+0x8a>
 8011916:	bf00      	nop
 8011918:	0801af08 	.word	0x0801af08
 801191c:	000927c0 	.word	0x000927c0
 8011920:	370870a0 	.word	0x370870a0
 8011924:	0801a94c 	.word	0x0801a94c
 8011928:	0801a95c 	.word	0x0801a95c
 801192c:	0801a96c 	.word	0x0801a96c

08011930 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011934:	b08d      	sub	sp, #52	; 0x34
 8011936:	4604      	mov	r4, r0
 8011938:	468b      	mov	fp, r1
 801193a:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801193c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8011940:	4b32      	ldr	r3, [pc, #200]	; (8011a0c <RegionUS915TxConfig+0xdc>)
 8011942:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8011946:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8011a10 <RegionUS915TxConfig+0xe0>
 801194a:	f8d9 3000 	ldr.w	r3, [r9]
 801194e:	7801      	ldrb	r1, [r0, #0]
 8011950:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011954:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8011958:	7a49      	ldrb	r1, [r1, #9]
 801195a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801195e:	482d      	ldr	r0, [pc, #180]	; (8011a14 <RegionUS915TxConfig+0xe4>)
 8011960:	6800      	ldr	r0, [r0, #0]
 8011962:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011966:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801196a:	f991 1002 	ldrsb.w	r1, [r1, #2]
 801196e:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8011972:	f7ff fce7 	bl	8011344 <LimitTxPower>
 8011976:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8011978:	4927      	ldr	r1, [pc, #156]	; (8011a18 <RegionUS915TxConfig+0xe8>)
 801197a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801197e:	f7ff fc4f 	bl	8011220 <RegionCommonGetBandwidth>
 8011982:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8011984:	2200      	movs	r2, #0
 8011986:	4925      	ldr	r1, [pc, #148]	; (8011a1c <RegionUS915TxConfig+0xec>)
 8011988:	4630      	mov	r0, r6
 801198a:	f7ff fb61 	bl	8011050 <RegionCommonComputeTxPower>
 801198e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8011990:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8011a20 <RegionUS915TxConfig+0xf0>
 8011994:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8011998:	f8d9 1000 	ldr.w	r1, [r9]
 801199c:	7823      	ldrb	r3, [r4, #0]
 801199e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80119a2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80119a6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80119a8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80119ac:	9308      	str	r3, [sp, #32]
 80119ae:	2200      	movs	r2, #0
 80119b0:	9207      	str	r2, [sp, #28]
 80119b2:	9206      	str	r2, [sp, #24]
 80119b4:	9205      	str	r2, [sp, #20]
 80119b6:	2501      	movs	r5, #1
 80119b8:	9504      	str	r5, [sp, #16]
 80119ba:	9203      	str	r2, [sp, #12]
 80119bc:	2308      	movs	r3, #8
 80119be:	9302      	str	r3, [sp, #8]
 80119c0:	9501      	str	r5, [sp, #4]
 80119c2:	f8cd a000 	str.w	sl, [sp]
 80119c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80119ca:	4628      	mov	r0, r5
 80119cc:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 80119d0:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80119d2:	f8d9 2000 	ldr.w	r2, [r9]
 80119d6:	7823      	ldrb	r3, [r4, #0]
 80119d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80119dc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80119e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80119e4:	f7ff fc50 	bl	8011288 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80119e8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80119ec:	7b21      	ldrb	r1, [r4, #12]
 80119ee:	4628      	mov	r0, r5
 80119f0:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80119f2:	89a1      	ldrh	r1, [r4, #12]
 80119f4:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80119f8:	f7ff fc86 	bl	8011308 <GetTimeOnAir>
 80119fc:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 80119fe:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8011a02:	4628      	mov	r0, r5
 8011a04:	b00d      	add	sp, #52	; 0x34
 8011a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a0a:	bf00      	nop
 8011a0c:	0801a94c 	.word	0x0801a94c
 8011a10:	20001518 	.word	0x20001518
 8011a14:	20001510 	.word	0x20001510
 8011a18:	0801a8f8 	.word	0x0801a8f8
 8011a1c:	41f00000 	.word	0x41f00000
 8011a20:	0801af08 	.word	0x0801af08

08011a24 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a28:	b091      	sub	sp, #68	; 0x44
 8011a2a:	4605      	mov	r5, r0
 8011a2c:	4688      	mov	r8, r1
 8011a2e:	4617      	mov	r7, r2
 8011a30:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8011a32:	2400      	movs	r4, #0
 8011a34:	940e      	str	r4, [sp, #56]	; 0x38
 8011a36:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8011a3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8011a3c:	940c      	str	r4, [sp, #48]	; 0x30
 8011a3e:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8011a40:	4b9c      	ldr	r3, [pc, #624]	; (8011cb4 <RegionUS915LinkAdrReq+0x290>)
 8011a42:	6819      	ldr	r1, [r3, #0]
 8011a44:	2206      	movs	r2, #6
 8011a46:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8011a4a:	a80b      	add	r0, sp, #44	; 0x2c
 8011a4c:	f7ff f995 	bl	8010d7a <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011a50:	e00d      	b.n	8011a6e <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8011a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a56:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8011a5a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8011a5e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 8011a62:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011a66:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8011a6a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011a6e:	7a2b      	ldrb	r3, [r5, #8]
 8011a70:	42a3      	cmp	r3, r4
 8011a72:	f240 808b 	bls.w	8011b8c <RegionUS915LinkAdrReq+0x168>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8011a76:	6868      	ldr	r0, [r5, #4]
 8011a78:	a90e      	add	r1, sp, #56	; 0x38
 8011a7a:	4420      	add	r0, r4
 8011a7c:	f7ff fa2e 	bl	8010edc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8011a80:	4603      	mov	r3, r0
 8011a82:	2800      	cmp	r0, #0
 8011a84:	f000 8082 	beq.w	8011b8c <RegionUS915LinkAdrReq+0x168>
        bytesProcessed += nextIndex;
 8011a88:	4423      	add	r3, r4
 8011a8a:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 8011a8c:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 8011a90:	f1bc 0f06 	cmp.w	ip, #6
 8011a94:	d0dd      	beq.n	8011a52 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8011a96:	f1bc 0f07 	cmp.w	ip, #7
 8011a9a:	d00a      	beq.n	8011ab2 <RegionUS915LinkAdrReq+0x8e>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8011a9c:	f1bc 0f05 	cmp.w	ip, #5
 8011aa0:	d071      	beq.n	8011b86 <RegionUS915LinkAdrReq+0x162>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8011aa2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011aa6:	aa10      	add	r2, sp, #64	; 0x40
 8011aa8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8011aac:	f82c 3c14 	strh.w	r3, [ip, #-20]
 8011ab0:	e7dd      	b.n	8011a6e <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8011ab8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8011abc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 8011ac0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011ac4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8011ac8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011acc:	e7cf      	b.n	8011a6e <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8011ace:	aa10      	add	r2, sp, #64	; 0x40
 8011ad0:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011ad4:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011ad8:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8011adc:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011ae0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011ae4:	ea4c 0202 	orr.w	r2, ip, r2
 8011ae8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                        cntChannelMask++;
 8011aec:	3101      	adds	r1, #1
 8011aee:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 8011af0:	3301      	adds	r3, #1
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	2b07      	cmp	r3, #7
 8011af6:	d8ba      	bhi.n	8011a6e <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8011af8:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8011afc:	f04f 0c01 	mov.w	ip, #1
 8011b00:	fa0c fc03 	lsl.w	ip, ip, r3
 8011b04:	ea12 0f0c 	tst.w	r2, ip
 8011b08:	d012      	beq.n	8011b30 <RegionUS915LinkAdrReq+0x10c>
                    if( ( i % 2 ) == 0 )
 8011b0a:	f013 0f01 	tst.w	r3, #1
 8011b0e:	d1de      	bne.n	8011ace <RegionUS915LinkAdrReq+0xaa>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8011b10:	aa10      	add	r2, sp, #64	; 0x40
 8011b12:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011b16:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011b1a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8011b1e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011b22:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011b26:	ea4c 0202 	orr.w	r2, ip, r2
 8011b2a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011b2e:	e7df      	b.n	8011af0 <RegionUS915LinkAdrReq+0xcc>
                    if( ( i % 2 ) == 0 )
 8011b30:	f013 0f01 	tst.w	r3, #1
 8011b34:	d113      	bne.n	8011b5e <RegionUS915LinkAdrReq+0x13a>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8011b36:	aa10      	add	r2, sp, #64	; 0x40
 8011b38:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011b3c:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011b40:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8011b44:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8011b48:	ea6f 0c0c 	mvn.w	ip, ip
 8011b4c:	fa0f fc8c 	sxth.w	ip, ip
 8011b50:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011b54:	ea0c 0c02 	and.w	ip, ip, r2
 8011b58:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
 8011b5c:	e7c8      	b.n	8011af0 <RegionUS915LinkAdrReq+0xcc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8011b5e:	aa10      	add	r2, sp, #64	; 0x40
 8011b60:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8011b64:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8011b68:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8011b6c:	ea6f 0c0c 	mvn.w	ip, ip
 8011b70:	fa0f fc8c 	sxth.w	ip, ip
 8011b74:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011b78:	ea0c 0c02 	and.w	ip, ip, r2
 8011b7c:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                        cntChannelMask++;
 8011b80:	3101      	adds	r1, #1
 8011b82:	b2c9      	uxtb	r1, r1
 8011b84:	e7b4      	b.n	8011af0 <RegionUS915LinkAdrReq+0xcc>
            for( uint8_t i = 0; i <= 7; i++ )
 8011b86:	2300      	movs	r3, #0
            uint8_t cntChannelMask = 0;
 8011b88:	4619      	mov	r1, r3
 8011b8a:	e7b3      	b.n	8011af4 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011b8c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011b90:	2b03      	cmp	r3, #3
 8011b92:	dd58      	ble.n	8011c46 <RegionUS915LinkAdrReq+0x222>
 8011b94:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011b98:	2302      	movs	r3, #2
 8011b9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8011b9e:	7a6b      	ldrb	r3, [r5, #9]
 8011ba0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8011ba4:	a809      	add	r0, sp, #36	; 0x24
 8011ba6:	f7ff fbe9 	bl	801137c <RegionUS915GetPhyParam>
 8011baa:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8011bac:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8011bb0:	7aab      	ldrb	r3, [r5, #10]
 8011bb2:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8011bb6:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011bba:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011bbe:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011bc2:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8011bc6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8011bca:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8011bce:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8011bd2:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8011bd6:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8011bda:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011bde:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8011be2:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8011be6:	2348      	movs	r3, #72	; 0x48
 8011be8:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8011bec:	ab0b      	add	r3, sp, #44	; 0x2c
 8011bee:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011bf0:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8011bf4:	2304      	movs	r3, #4
 8011bf6:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8011bfa:	4b2e      	ldr	r3, [pc, #184]	; (8011cb4 <RegionUS915LinkAdrReq+0x290>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8011c00:	230e      	movs	r3, #14
 8011c02:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8011c06:	2300      	movs	r3, #0
 8011c08:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011c0c:	682b      	ldr	r3, [r5, #0]
 8011c0e:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011c10:	ab0e      	add	r3, sp, #56	; 0x38
 8011c12:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8011c16:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 8011c1a:	4668      	mov	r0, sp
 8011c1c:	f7ff f97c 	bl	8010f18 <RegionCommonLinkAdrReqVerifyParams>
 8011c20:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011c22:	2807      	cmp	r0, #7
 8011c24:	d01c      	beq.n	8011c60 <RegionUS915LinkAdrReq+0x23c>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011c26:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011c2a:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 8011c2e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011c32:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8011c34:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8011c38:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 8011c3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011c3c:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 8011c3e:	4628      	mov	r0, r5
 8011c40:	b011      	add	sp, #68	; 0x44
 8011c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011c46:	2204      	movs	r2, #4
 8011c48:	2100      	movs	r1, #0
 8011c4a:	a80b      	add	r0, sp, #44	; 0x2c
 8011c4c:	f7ff f87f 	bl	8010d4e <RegionCommonCountChannels>
 8011c50:	2801      	cmp	r0, #1
 8011c52:	d902      	bls.n	8011c5a <RegionUS915LinkAdrReq+0x236>
 8011c54:	f04f 0907 	mov.w	r9, #7
 8011c58:	e79e      	b.n	8011b98 <RegionUS915LinkAdrReq+0x174>
        status &= 0xFE; // Channel mask KO
 8011c5a:	f04f 0906 	mov.w	r9, #6
 8011c5e:	e79b      	b.n	8011b98 <RegionUS915LinkAdrReq+0x174>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8011c60:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8011cb4 <RegionUS915LinkAdrReq+0x290>
 8011c64:	f8d9 0000 	ldr.w	r0, [r9]
 8011c68:	2206      	movs	r2, #6
 8011c6a:	a90b      	add	r1, sp, #44	; 0x2c
 8011c6c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011c70:	f7ff f883 	bl	8010d7a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8011c74:	4b10      	ldr	r3, [pc, #64]	; (8011cb8 <RegionUS915LinkAdrReq+0x294>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f8d9 2000 	ldr.w	r2, [r9]
 8011c7c:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 8011c80:	8818      	ldrh	r0, [r3, #0]
 8011c82:	4001      	ands	r1, r0
 8011c84:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8011c86:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 8011c8a:	8858      	ldrh	r0, [r3, #2]
 8011c8c:	4001      	ands	r1, r0
 8011c8e:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8011c90:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8011c94:	8898      	ldrh	r0, [r3, #4]
 8011c96:	4001      	ands	r1, r0
 8011c98:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8011c9a:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 8011c9e:	88d8      	ldrh	r0, [r3, #6]
 8011ca0:	4001      	ands	r1, r0
 8011ca2:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011ca4:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 8011ca8:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8011caa:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8011cae:	815a      	strh	r2, [r3, #10]
 8011cb0:	e7b9      	b.n	8011c26 <RegionUS915LinkAdrReq+0x202>
 8011cb2:	bf00      	nop
 8011cb4:	20001518 	.word	0x20001518
 8011cb8:	20001514 	.word	0x20001514

08011cbc <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011cbc:	b538      	push	{r3, r4, r5, lr}
 8011cbe:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011cc0:	6840      	ldr	r0, [r0, #4]
 8011cc2:	f7ff faf1 	bl	80112a8 <VerifyRfFreq>
 8011cc6:	b310      	cbz	r0, 8011d0e <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8011cc8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8011cca:	220d      	movs	r2, #13
 8011ccc:	2108      	movs	r1, #8
 8011cce:	f994 0000 	ldrsb.w	r0, [r4]
 8011cd2:	f7fe ffde 	bl	8010c92 <RegionCommonValueInRange>
 8011cd6:	b908      	cbnz	r0, 8011cdc <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8011cd8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8011cdc:	2207      	movs	r2, #7
 8011cde:	2105      	movs	r1, #5
 8011ce0:	f994 0000 	ldrsb.w	r0, [r4]
 8011ce4:	f7fe ffd5 	bl	8010c92 <RegionCommonValueInRange>
 8011ce8:	2801      	cmp	r0, #1
 8011cea:	d003      	beq.n	8011cf4 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8011cec:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8011cf0:	2b0d      	cmp	r3, #13
 8011cf2:	dd01      	ble.n	8011cf8 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 8011cf4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8011cf8:	2203      	movs	r2, #3
 8011cfa:	2100      	movs	r1, #0
 8011cfc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011d00:	f7fe ffc7 	bl	8010c92 <RegionCommonValueInRange>
 8011d04:	b908      	cbnz	r0, 8011d0a <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011d06:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011d0e:	2506      	movs	r5, #6
 8011d10:	e7db      	b.n	8011cca <RegionUS915RxParamSetupReq+0xe>

08011d12 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d16:	4770      	bx	lr

08011d18 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8011d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d1c:	4770      	bx	lr

08011d1e <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d22:	4770      	bx	lr

08011d24 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8011d24:	b999      	cbnz	r1, 8011d4e <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8011d26:	4b0e      	ldr	r3, [pc, #56]	; (8011d60 <RegionUS915AlternateDr+0x3c>)
 8011d28:	681a      	ldr	r2, [r3, #0]
 8011d2a:	7b53      	ldrb	r3, [r2, #13]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8011d30:	4b0b      	ldr	r3, [pc, #44]	; (8011d60 <RegionUS915AlternateDr+0x3c>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	7b5a      	ldrb	r2, [r3, #13]
 8011d36:	4b0b      	ldr	r3, [pc, #44]	; (8011d64 <RegionUS915AlternateDr+0x40>)
 8011d38:	fba3 1302 	umull	r1, r3, r3, r2
 8011d3c:	085b      	lsrs	r3, r3, #1
 8011d3e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8011d42:	1ad2      	subs	r2, r2, r3
 8011d44:	f012 0fff 	tst.w	r2, #255	; 0xff
 8011d48:	d007      	beq.n	8011d5a <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 8011d4a:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 8011d4c:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 8011d4e:	4b04      	ldr	r3, [pc, #16]	; (8011d60 <RegionUS915AlternateDr+0x3c>)
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	7b53      	ldrb	r3, [r2, #13]
 8011d54:	3b01      	subs	r3, #1
 8011d56:	7353      	strb	r3, [r2, #13]
 8011d58:	e7ea      	b.n	8011d30 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 8011d5a:	2004      	movs	r0, #4
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop
 8011d60:	20001514 	.word	0x20001514
 8011d64:	38e38e39 	.word	0x38e38e39

08011d68 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6c:	b0a4      	sub	sp, #144	; 0x90
 8011d6e:	4604      	mov	r4, r0
 8011d70:	460e      	mov	r6, r1
 8011d72:	4690      	mov	r8, r2
 8011d74:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8011d76:	2500      	movs	r5, #0
 8011d78:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8011d7c:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8011d80:	9511      	str	r5, [sp, #68]	; 0x44
 8011d82:	2244      	movs	r2, #68	; 0x44
 8011d84:	4629      	mov	r1, r5
 8011d86:	a812      	add	r0, sp, #72	; 0x48
 8011d88:	f005 fac2 	bl	8017310 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8011d8c:	2204      	movs	r2, #4
 8011d8e:	4629      	mov	r1, r5
 8011d90:	4b49      	ldr	r3, [pc, #292]	; (8011eb8 <RegionUS915NextChannel+0x150>)
 8011d92:	6818      	ldr	r0, [r3, #0]
 8011d94:	f7fe ffdb 	bl	8010d4e <RegionCommonCountChannels>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d052      	beq.n	8011e42 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8011d9c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8011da0:	2b03      	cmp	r3, #3
 8011da2:	dd08      	ble.n	8011db6 <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8011da4:	4b44      	ldr	r3, [pc, #272]	; (8011eb8 <RegionUS915NextChannel+0x150>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	7a1a      	ldrb	r2, [r3, #8]
 8011daa:	b922      	cbnz	r2, 8011db6 <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011dac:	4a43      	ldr	r2, [pc, #268]	; (8011ebc <RegionUS915NextChannel+0x154>)
 8011dae:	6812      	ldr	r2, [r2, #0]
 8011db0:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8011db4:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8011db6:	7a63      	ldrb	r3, [r4, #9]
 8011db8:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8011dbc:	7a23      	ldrb	r3, [r4, #8]
 8011dbe:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8011dc2:	4b3d      	ldr	r3, [pc, #244]	; (8011eb8 <RegionUS915NextChannel+0x150>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8011dc8:	4b3c      	ldr	r3, [pc, #240]	; (8011ebc <RegionUS915NextChannel+0x154>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8011dce:	4b3c      	ldr	r3, [pc, #240]	; (8011ec0 <RegionUS915NextChannel+0x158>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8011dd4:	2348      	movs	r3, #72	; 0x48
 8011dd6:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8011dde:	6823      	ldr	r3, [r4, #0]
 8011de0:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011de2:	6863      	ldr	r3, [r4, #4]
 8011de4:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8011de6:	7aa3      	ldrb	r3, [r4, #10]
 8011de8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8011dec:	2301      	movs	r3, #1
 8011dee:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011df2:	ab03      	add	r3, sp, #12
 8011df4:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011df6:	ab0c      	add	r3, sp, #48	; 0x30
 8011df8:	f104 020c 	add.w	r2, r4, #12
 8011dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e00:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011e04:	7d23      	ldrb	r3, [r4, #20]
 8011e06:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8011e0a:	8ae1      	ldrh	r1, [r4, #22]
 8011e0c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011e10:	f7ff fa7a 	bl	8011308 <GetTimeOnAir>
 8011e14:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8011e16:	f8cd 8004 	str.w	r8, [sp, #4]
 8011e1a:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 8011e24:	aa11      	add	r2, sp, #68	; 0x44
 8011e26:	4639      	mov	r1, r7
 8011e28:	a809      	add	r0, sp, #36	; 0x24
 8011e2a:	f7ff f98c 	bl	8011146 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8011e2e:	4605      	mov	r5, r0
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d13c      	bne.n	8011eae <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 8011e34:	7a63      	ldrb	r3, [r4, #9]
 8011e36:	b98b      	cbnz	r3, 8011e5c <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8011e38:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8011e3c:	b1db      	cbz	r3, 8011e76 <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8011e3e:	4603      	mov	r3, r0
 8011e40:	e026      	b.n	8011e90 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8011e42:	4d1d      	ldr	r5, [pc, #116]	; (8011eb8 <RegionUS915NextChannel+0x150>)
 8011e44:	4b1d      	ldr	r3, [pc, #116]	; (8011ebc <RegionUS915NextChannel+0x154>)
 8011e46:	6819      	ldr	r1, [r3, #0]
 8011e48:	2204      	movs	r2, #4
 8011e4a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8011e4e:	6828      	ldr	r0, [r5, #0]
 8011e50:	f7fe ff93 	bl	8010d7a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8011e54:	682b      	ldr	r3, [r5, #0]
 8011e56:	2200      	movs	r2, #0
 8011e58:	731a      	strb	r2, [r3, #12]
 8011e5a:	e79f      	b.n	8011d9c <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011e5c:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 8011e60:	3901      	subs	r1, #1
 8011e62:	f000 ff5f 	bl	8012d24 <randr>
 8011e66:	f100 0390 	add.w	r3, r0, #144	; 0x90
 8011e6a:	eb0d 0003 	add.w	r0, sp, r3
 8011e6e:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8011e72:	7033      	strb	r3, [r6, #0]
 8011e74:	e015      	b.n	8011ea2 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8011e76:	4b10      	ldr	r3, [pc, #64]	; (8011eb8 <RegionUS915NextChannel+0x150>)
 8011e78:	6818      	ldr	r0, [r3, #0]
 8011e7a:	4632      	mov	r2, r6
 8011e7c:	f100 010c 	add.w	r1, r0, #12
 8011e80:	f7fe fdea 	bl	8010a58 <RegionBaseUSComputeNext125kHzJoinChannel>
 8011e84:	2803      	cmp	r0, #3
 8011e86:	d10c      	bne.n	8011ea2 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e88:	4605      	mov	r5, r0
 8011e8a:	e010      	b.n	8011eae <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8011e90:	4a09      	ldr	r2, [pc, #36]	; (8011eb8 <RegionUS915NextChannel+0x150>)
 8011e92:	6812      	ldr	r2, [r2, #0]
 8011e94:	7a10      	ldrb	r0, [r2, #8]
 8011e96:	4118      	asrs	r0, r3
 8011e98:	f010 0f01 	tst.w	r0, #1
 8011e9c:	d0f6      	beq.n	8011e8c <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 8011e9e:	3340      	adds	r3, #64	; 0x40
 8011ea0:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8011ea2:	2248      	movs	r2, #72	; 0x48
 8011ea4:	7831      	ldrb	r1, [r6, #0]
 8011ea6:	4b04      	ldr	r3, [pc, #16]	; (8011eb8 <RegionUS915NextChannel+0x150>)
 8011ea8:	6818      	ldr	r0, [r3, #0]
 8011eaa:	f7fe ff34 	bl	8010d16 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8011eae:	4628      	mov	r0, r5
 8011eb0:	b024      	add	sp, #144	; 0x90
 8011eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20001514 	.word	0x20001514
 8011ebc:	20001518 	.word	0x20001518
 8011ec0:	20001510 	.word	0x20001510

08011ec4 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8011ec4:	4b04      	ldr	r3, [pc, #16]	; (8011ed8 <RegionUS915ApplyDrOffset+0x14>)
 8011ec6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8011eca:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	db01      	blt.n	8011ed4 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 8011ed0:	b2c0      	uxtb	r0, r0
 8011ed2:	4770      	bx	lr
        datarate = DR_0;
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	e7fb      	b.n	8011ed0 <RegionUS915ApplyDrOffset+0xc>
 8011ed8:	0801a938 	.word	0x0801a938

08011edc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8011edc:	b510      	push	{r4, lr}
 8011ede:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8011ee0:	2210      	movs	r2, #16
 8011ee2:	2100      	movs	r1, #0
 8011ee4:	30f1      	adds	r0, #241	; 0xf1
 8011ee6:	f000 ff42 	bl	8012d6e <memset1>
    ctx->M_n = 0;
 8011eea:	2100      	movs	r1, #0
 8011eec:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8011ef0:	22f0      	movs	r2, #240	; 0xf0
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	f000 ff3b 	bl	8012d6e <memset1>
}
 8011ef8:	bd10      	pop	{r4, pc}

08011efa <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8011efa:	b508      	push	{r3, lr}
 8011efc:	4602      	mov	r2, r0
 8011efe:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8011f00:	2110      	movs	r1, #16
 8011f02:	f000 fb3b 	bl	801257c <lorawan_aes_set_key>
}
 8011f06:	bd08      	pop	{r3, pc}

08011f08 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8011f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f0c:	b084      	sub	sp, #16
 8011f0e:	4604      	mov	r4, r0
 8011f10:	460d      	mov	r5, r1
 8011f12:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8011f14:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d054      	beq.n	8011fc6 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8011f1c:	f1c3 0810 	rsb	r8, r3, #16
 8011f20:	4647      	mov	r7, r8
 8011f22:	4590      	cmp	r8, r2
 8011f24:	bf28      	it	cs
 8011f26:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8011f28:	f200 1001 	addw	r0, r0, #257	; 0x101
 8011f2c:	b2ba      	uxth	r2, r7
 8011f2e:	4418      	add	r0, r3
 8011f30:	f000 ff05 	bl	8012d3e <memcpy1>
        ctx->M_n += mlen;
 8011f34:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8011f38:	443b      	add	r3, r7
 8011f3a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8011f3e:	2b0f      	cmp	r3, #15
 8011f40:	d94d      	bls.n	8011fde <AES_CMAC_Update+0xd6>
 8011f42:	45b0      	cmp	r8, r6
 8011f44:	d24b      	bcs.n	8011fde <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 8011f46:	2300      	movs	r3, #0
 8011f48:	e008      	b.n	8011f5c <AES_CMAC_Update+0x54>
 8011f4a:	18e2      	adds	r2, r4, r3
 8011f4c:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8011f50:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8011f54:	4041      	eors	r1, r0
 8011f56:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	2b0f      	cmp	r3, #15
 8011f5e:	ddf4      	ble.n	8011f4a <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8011f60:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 8011f64:	2210      	movs	r2, #16
 8011f66:	4641      	mov	r1, r8
 8011f68:	4668      	mov	r0, sp
 8011f6a:	f000 fee8 	bl	8012d3e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8011f6e:	4622      	mov	r2, r4
 8011f70:	4669      	mov	r1, sp
 8011f72:	4668      	mov	r0, sp
 8011f74:	f000 fb86 	bl	8012684 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8011f78:	2210      	movs	r2, #16
 8011f7a:	4669      	mov	r1, sp
 8011f7c:	4640      	mov	r0, r8
 8011f7e:	f000 fede 	bl	8012d3e <memcpy1>

        data += mlen;
 8011f82:	443d      	add	r5, r7
        len -= mlen;
 8011f84:	1bf6      	subs	r6, r6, r7
 8011f86:	e01e      	b.n	8011fc6 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8011f88:	eb04 0e03 	add.w	lr, r4, r3
 8011f8c:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 8011f90:	5cea      	ldrb	r2, [r5, r3]
 8011f92:	ea8c 0c02 	eor.w	ip, ip, r2
 8011f96:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	2b0f      	cmp	r3, #15
 8011f9e:	ddf3      	ble.n	8011f88 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8011fa0:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8011fa4:	2210      	movs	r2, #16
 8011fa6:	4639      	mov	r1, r7
 8011fa8:	4668      	mov	r0, sp
 8011faa:	f000 fec8 	bl	8012d3e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8011fae:	4622      	mov	r2, r4
 8011fb0:	4669      	mov	r1, sp
 8011fb2:	4668      	mov	r0, sp
 8011fb4:	f000 fb66 	bl	8012684 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8011fb8:	2210      	movs	r2, #16
 8011fba:	4669      	mov	r1, sp
 8011fbc:	4638      	mov	r0, r7
 8011fbe:	f000 febe 	bl	8012d3e <memcpy1>

        data += 16;
 8011fc2:	3510      	adds	r5, #16
        len -= 16;
 8011fc4:	3e10      	subs	r6, #16
    while( len > 16 )
 8011fc6:	2e10      	cmp	r6, #16
 8011fc8:	d901      	bls.n	8011fce <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 8011fca:	2300      	movs	r3, #0
 8011fcc:	e7e6      	b.n	8011f9c <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8011fce:	b2b2      	uxth	r2, r6
 8011fd0:	4629      	mov	r1, r5
 8011fd2:	f204 1001 	addw	r0, r4, #257	; 0x101
 8011fd6:	f000 feb2 	bl	8012d3e <memcpy1>
    ctx->M_n = len;
 8011fda:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 8011fde:	b004      	add	sp, #16
 8011fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011fe4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8011fe4:	b530      	push	{r4, r5, lr}
 8011fe6:	b089      	sub	sp, #36	; 0x24
 8011fe8:	4605      	mov	r5, r0
 8011fea:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8011fec:	2210      	movs	r2, #16
 8011fee:	2100      	movs	r1, #0
 8011ff0:	eb0d 0002 	add.w	r0, sp, r2
 8011ff4:	f000 febb 	bl	8012d6e <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	a904      	add	r1, sp, #16
 8011ffc:	4608      	mov	r0, r1
 8011ffe:	f000 fb41 	bl	8012684 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8012002:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8012006:	2b00      	cmp	r3, #0
 8012008:	db01      	blt.n	801200e <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 801200a:	2300      	movs	r3, #0
 801200c:	e030      	b.n	8012070 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 801200e:	2300      	movs	r3, #0
 8012010:	2b0e      	cmp	r3, #14
 8012012:	dc11      	bgt.n	8012038 <AES_CMAC_Final+0x54>
 8012014:	f103 0220 	add.w	r2, r3, #32
 8012018:	eb0d 0102 	add.w	r1, sp, r2
 801201c:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8012020:	3301      	adds	r3, #1
 8012022:	f103 0220 	add.w	r2, r3, #32
 8012026:	446a      	add	r2, sp
 8012028:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801202c:	09d2      	lsrs	r2, r2, #7
 801202e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8012032:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012036:	e7eb      	b.n	8012010 <AES_CMAC_Final+0x2c>
 8012038:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801203c:	005b      	lsls	r3, r3, #1
 801203e:	b2db      	uxtb	r3, r3
 8012040:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 8012044:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8012048:	f88d 301f 	strb.w	r3, [sp, #31]
 801204c:	e017      	b.n	801207e <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 801204e:	f103 0220 	add.w	r2, r3, #32
 8012052:	eb0d 0102 	add.w	r1, sp, r2
 8012056:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801205a:	3301      	adds	r3, #1
 801205c:	f103 0220 	add.w	r2, r3, #32
 8012060:	446a      	add	r2, sp
 8012062:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012066:	09d2      	lsrs	r2, r2, #7
 8012068:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 801206c:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012070:	2b0e      	cmp	r3, #14
 8012072:	ddec      	ble.n	801204e <AES_CMAC_Final+0x6a>
 8012074:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012078:	005b      	lsls	r3, r3, #1
 801207a:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 801207e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8012082:	2810      	cmp	r0, #16
 8012084:	d014      	beq.n	80120b0 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8012086:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801208a:	2b00      	cmp	r3, #0
 801208c:	db30      	blt.n	80120f0 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 801208e:	2300      	movs	r3, #0
 8012090:	e041      	b.n	8012116 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8012092:	18e1      	adds	r1, r4, r3
 8012094:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8012098:	f103 0020 	add.w	r0, r3, #32
 801209c:	4468      	add	r0, sp
 801209e:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80120a2:	4042      	eors	r2, r0
 80120a4:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80120a8:	3301      	adds	r3, #1
 80120aa:	2b0f      	cmp	r3, #15
 80120ac:	ddf1      	ble.n	8012092 <AES_CMAC_Final+0xae>
 80120ae:	e059      	b.n	8012164 <AES_CMAC_Final+0x180>
 80120b0:	2300      	movs	r3, #0
 80120b2:	e7fa      	b.n	80120aa <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 80120b4:	f103 0220 	add.w	r2, r3, #32
 80120b8:	eb0d 0102 	add.w	r1, sp, r2
 80120bc:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80120c0:	3301      	adds	r3, #1
 80120c2:	f103 0220 	add.w	r2, r3, #32
 80120c6:	446a      	add	r2, sp
 80120c8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80120cc:	09d2      	lsrs	r2, r2, #7
 80120ce:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80120d2:	f801 2c10 	strb.w	r2, [r1, #-16]
 80120d6:	2b0e      	cmp	r3, #14
 80120d8:	ddec      	ble.n	80120b4 <AES_CMAC_Final+0xd0>
 80120da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80120de:	005b      	lsls	r3, r3, #1
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 80120e6:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80120ea:	f88d 301f 	strb.w	r3, [sp, #31]
 80120ee:	e019      	b.n	8012124 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 80120f0:	2300      	movs	r3, #0
 80120f2:	e7f0      	b.n	80120d6 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 80120f4:	f103 0220 	add.w	r2, r3, #32
 80120f8:	eb0d 0102 	add.w	r1, sp, r2
 80120fc:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8012100:	3301      	adds	r3, #1
 8012102:	f103 0220 	add.w	r2, r3, #32
 8012106:	446a      	add	r2, sp
 8012108:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801210c:	09d2      	lsrs	r2, r2, #7
 801210e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8012112:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012116:	2b0e      	cmp	r3, #14
 8012118:	ddec      	ble.n	80120f4 <AES_CMAC_Final+0x110>
 801211a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801211e:	005b      	lsls	r3, r3, #1
 8012120:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8012124:	4420      	add	r0, r4
 8012126:	2380      	movs	r3, #128	; 0x80
 8012128:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 801212c:	e003      	b.n	8012136 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 801212e:	4423      	add	r3, r4
 8012130:	2200      	movs	r2, #0
 8012132:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8012136:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 801213a:	3301      	adds	r3, #1
 801213c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8012140:	2b0f      	cmp	r3, #15
 8012142:	d9f4      	bls.n	801212e <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8012144:	2300      	movs	r3, #0
 8012146:	e00b      	b.n	8012160 <AES_CMAC_Final+0x17c>
 8012148:	18e1      	adds	r1, r4, r3
 801214a:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801214e:	f103 0020 	add.w	r0, r3, #32
 8012152:	4468      	add	r0, sp
 8012154:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8012158:	4042      	eors	r2, r0
 801215a:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801215e:	3301      	adds	r3, #1
 8012160:	2b0f      	cmp	r3, #15
 8012162:	ddf1      	ble.n	8012148 <AES_CMAC_Final+0x164>
 8012164:	2300      	movs	r3, #0
 8012166:	e009      	b.n	801217c <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8012168:	18e2      	adds	r2, r4, r3
 801216a:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 801216e:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8012172:	ea8c 0c01 	eor.w	ip, ip, r1
 8012176:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 801217a:	3301      	adds	r3, #1
 801217c:	2b0f      	cmp	r3, #15
 801217e:	ddf3      	ble.n	8012168 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8012180:	2210      	movs	r2, #16
 8012182:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8012186:	4668      	mov	r0, sp
 8012188:	f000 fdd9 	bl	8012d3e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 801218c:	4622      	mov	r2, r4
 801218e:	4629      	mov	r1, r5
 8012190:	4668      	mov	r0, sp
 8012192:	f000 fa77 	bl	8012684 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8012196:	2210      	movs	r2, #16
 8012198:	2100      	movs	r1, #0
 801219a:	eb0d 0002 	add.w	r0, sp, r2
 801219e:	f000 fde6 	bl	8012d6e <memset1>
}
 80121a2:	b009      	add	sp, #36	; 0x24
 80121a4:	bd30      	pop	{r4, r5, pc}

080121a6 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80121a6:	780b      	ldrb	r3, [r1, #0]
 80121a8:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80121aa:	784b      	ldrb	r3, [r1, #1]
 80121ac:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80121ae:	788b      	ldrb	r3, [r1, #2]
 80121b0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80121b2:	78cb      	ldrb	r3, [r1, #3]
 80121b4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80121b6:	790b      	ldrb	r3, [r1, #4]
 80121b8:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80121ba:	794b      	ldrb	r3, [r1, #5]
 80121bc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80121be:	798b      	ldrb	r3, [r1, #6]
 80121c0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80121c2:	79cb      	ldrb	r3, [r1, #7]
 80121c4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80121c6:	7a0b      	ldrb	r3, [r1, #8]
 80121c8:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80121ca:	7a4b      	ldrb	r3, [r1, #9]
 80121cc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80121ce:	7a8b      	ldrb	r3, [r1, #10]
 80121d0:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80121d2:	7acb      	ldrb	r3, [r1, #11]
 80121d4:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80121d6:	7b0b      	ldrb	r3, [r1, #12]
 80121d8:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80121da:	7b4b      	ldrb	r3, [r1, #13]
 80121dc:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80121de:	7b8b      	ldrb	r3, [r1, #14]
 80121e0:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80121e2:	7bcb      	ldrb	r3, [r1, #15]
 80121e4:	73c3      	strb	r3, [r0, #15]
#endif
}
 80121e6:	4770      	bx	lr

080121e8 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 80121e8:	e004      	b.n	80121f4 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80121ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121ee:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 80121f2:	461a      	mov	r2, r3
 80121f4:	1e53      	subs	r3, r2, #1
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	2a00      	cmp	r2, #0
 80121fa:	d1f6      	bne.n	80121ea <copy_block_nn+0x2>
}
 80121fc:	4770      	bx	lr

080121fe <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80121fe:	780b      	ldrb	r3, [r1, #0]
 8012200:	7802      	ldrb	r2, [r0, #0]
 8012202:	4053      	eors	r3, r2
 8012204:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8012206:	784b      	ldrb	r3, [r1, #1]
 8012208:	7842      	ldrb	r2, [r0, #1]
 801220a:	4053      	eors	r3, r2
 801220c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 801220e:	788b      	ldrb	r3, [r1, #2]
 8012210:	7882      	ldrb	r2, [r0, #2]
 8012212:	4053      	eors	r3, r2
 8012214:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8012216:	78cb      	ldrb	r3, [r1, #3]
 8012218:	78c2      	ldrb	r2, [r0, #3]
 801221a:	4053      	eors	r3, r2
 801221c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 801221e:	790b      	ldrb	r3, [r1, #4]
 8012220:	7902      	ldrb	r2, [r0, #4]
 8012222:	4053      	eors	r3, r2
 8012224:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8012226:	794b      	ldrb	r3, [r1, #5]
 8012228:	7942      	ldrb	r2, [r0, #5]
 801222a:	4053      	eors	r3, r2
 801222c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 801222e:	798b      	ldrb	r3, [r1, #6]
 8012230:	7982      	ldrb	r2, [r0, #6]
 8012232:	4053      	eors	r3, r2
 8012234:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8012236:	79cb      	ldrb	r3, [r1, #7]
 8012238:	79c2      	ldrb	r2, [r0, #7]
 801223a:	4053      	eors	r3, r2
 801223c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 801223e:	7a0b      	ldrb	r3, [r1, #8]
 8012240:	7a02      	ldrb	r2, [r0, #8]
 8012242:	4053      	eors	r3, r2
 8012244:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8012246:	7a4b      	ldrb	r3, [r1, #9]
 8012248:	7a42      	ldrb	r2, [r0, #9]
 801224a:	4053      	eors	r3, r2
 801224c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 801224e:	7a8b      	ldrb	r3, [r1, #10]
 8012250:	7a82      	ldrb	r2, [r0, #10]
 8012252:	4053      	eors	r3, r2
 8012254:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8012256:	7acb      	ldrb	r3, [r1, #11]
 8012258:	7ac2      	ldrb	r2, [r0, #11]
 801225a:	4053      	eors	r3, r2
 801225c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 801225e:	7b0b      	ldrb	r3, [r1, #12]
 8012260:	7b02      	ldrb	r2, [r0, #12]
 8012262:	4053      	eors	r3, r2
 8012264:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8012266:	7b4b      	ldrb	r3, [r1, #13]
 8012268:	7b42      	ldrb	r2, [r0, #13]
 801226a:	4053      	eors	r3, r2
 801226c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 801226e:	7b8b      	ldrb	r3, [r1, #14]
 8012270:	7b82      	ldrb	r2, [r0, #14]
 8012272:	4053      	eors	r3, r2
 8012274:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8012276:	7bcb      	ldrb	r3, [r1, #15]
 8012278:	7bc2      	ldrb	r2, [r0, #15]
 801227a:	4053      	eors	r3, r2
 801227c:	73c3      	strb	r3, [r0, #15]
#endif
}
 801227e:	4770      	bx	lr

08012280 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8012280:	780b      	ldrb	r3, [r1, #0]
 8012282:	f892 c000 	ldrb.w	ip, [r2]
 8012286:	ea83 030c 	eor.w	r3, r3, ip
 801228a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 801228c:	784b      	ldrb	r3, [r1, #1]
 801228e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8012292:	ea83 030c 	eor.w	r3, r3, ip
 8012296:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8012298:	788b      	ldrb	r3, [r1, #2]
 801229a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801229e:	ea83 030c 	eor.w	r3, r3, ip
 80122a2:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80122a4:	78cb      	ldrb	r3, [r1, #3]
 80122a6:	f892 c003 	ldrb.w	ip, [r2, #3]
 80122aa:	ea83 030c 	eor.w	r3, r3, ip
 80122ae:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80122b0:	790b      	ldrb	r3, [r1, #4]
 80122b2:	f892 c004 	ldrb.w	ip, [r2, #4]
 80122b6:	ea83 030c 	eor.w	r3, r3, ip
 80122ba:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80122bc:	794b      	ldrb	r3, [r1, #5]
 80122be:	f892 c005 	ldrb.w	ip, [r2, #5]
 80122c2:	ea83 030c 	eor.w	r3, r3, ip
 80122c6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80122c8:	798b      	ldrb	r3, [r1, #6]
 80122ca:	f892 c006 	ldrb.w	ip, [r2, #6]
 80122ce:	ea83 030c 	eor.w	r3, r3, ip
 80122d2:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80122d4:	79cb      	ldrb	r3, [r1, #7]
 80122d6:	f892 c007 	ldrb.w	ip, [r2, #7]
 80122da:	ea83 030c 	eor.w	r3, r3, ip
 80122de:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80122e0:	7a0b      	ldrb	r3, [r1, #8]
 80122e2:	f892 c008 	ldrb.w	ip, [r2, #8]
 80122e6:	ea83 030c 	eor.w	r3, r3, ip
 80122ea:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80122ec:	7a4b      	ldrb	r3, [r1, #9]
 80122ee:	f892 c009 	ldrb.w	ip, [r2, #9]
 80122f2:	ea83 030c 	eor.w	r3, r3, ip
 80122f6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80122f8:	7a8b      	ldrb	r3, [r1, #10]
 80122fa:	f892 c00a 	ldrb.w	ip, [r2, #10]
 80122fe:	ea83 030c 	eor.w	r3, r3, ip
 8012302:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8012304:	7acb      	ldrb	r3, [r1, #11]
 8012306:	f892 c00b 	ldrb.w	ip, [r2, #11]
 801230a:	ea83 030c 	eor.w	r3, r3, ip
 801230e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8012310:	7b0b      	ldrb	r3, [r1, #12]
 8012312:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8012316:	ea83 030c 	eor.w	r3, r3, ip
 801231a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 801231c:	7b4b      	ldrb	r3, [r1, #13]
 801231e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8012322:	ea83 030c 	eor.w	r3, r3, ip
 8012326:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8012328:	7b8b      	ldrb	r3, [r1, #14]
 801232a:	f892 c00e 	ldrb.w	ip, [r2, #14]
 801232e:	ea83 030c 	eor.w	r3, r3, ip
 8012332:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8012334:	7bcb      	ldrb	r3, [r1, #15]
 8012336:	7bd2      	ldrb	r2, [r2, #15]
 8012338:	4053      	eors	r3, r2
 801233a:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 801233c:	4770      	bx	lr

0801233e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 801233e:	b508      	push	{r3, lr}
    xor_block(d, k);
 8012340:	f7ff ff5d 	bl	80121fe <xor_block>
}
 8012344:	bd08      	pop	{r3, pc}
	...

08012348 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8012348:	7802      	ldrb	r2, [r0, #0]
 801234a:	4b18      	ldr	r3, [pc, #96]	; (80123ac <shift_sub_rows+0x64>)
 801234c:	5c9a      	ldrb	r2, [r3, r2]
 801234e:	7002      	strb	r2, [r0, #0]
 8012350:	7902      	ldrb	r2, [r0, #4]
 8012352:	5c9a      	ldrb	r2, [r3, r2]
 8012354:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8012356:	7a02      	ldrb	r2, [r0, #8]
 8012358:	5c9a      	ldrb	r2, [r3, r2]
 801235a:	7202      	strb	r2, [r0, #8]
 801235c:	7b02      	ldrb	r2, [r0, #12]
 801235e:	5c9a      	ldrb	r2, [r3, r2]
 8012360:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8012362:	7842      	ldrb	r2, [r0, #1]
 8012364:	7941      	ldrb	r1, [r0, #5]
 8012366:	5c59      	ldrb	r1, [r3, r1]
 8012368:	7041      	strb	r1, [r0, #1]
 801236a:	7a41      	ldrb	r1, [r0, #9]
 801236c:	5c59      	ldrb	r1, [r3, r1]
 801236e:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8012370:	7b41      	ldrb	r1, [r0, #13]
 8012372:	5c59      	ldrb	r1, [r3, r1]
 8012374:	7241      	strb	r1, [r0, #9]
 8012376:	5c9a      	ldrb	r2, [r3, r2]
 8012378:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801237a:	7882      	ldrb	r2, [r0, #2]
 801237c:	7a81      	ldrb	r1, [r0, #10]
 801237e:	5c59      	ldrb	r1, [r3, r1]
 8012380:	7081      	strb	r1, [r0, #2]
 8012382:	5c9a      	ldrb	r2, [r3, r2]
 8012384:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8012386:	7982      	ldrb	r2, [r0, #6]
 8012388:	7b81      	ldrb	r1, [r0, #14]
 801238a:	5c59      	ldrb	r1, [r3, r1]
 801238c:	7181      	strb	r1, [r0, #6]
 801238e:	5c9a      	ldrb	r2, [r3, r2]
 8012390:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8012392:	7bc2      	ldrb	r2, [r0, #15]
 8012394:	7ac1      	ldrb	r1, [r0, #11]
 8012396:	5c59      	ldrb	r1, [r3, r1]
 8012398:	73c1      	strb	r1, [r0, #15]
 801239a:	79c1      	ldrb	r1, [r0, #7]
 801239c:	5c59      	ldrb	r1, [r3, r1]
 801239e:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80123a0:	78c1      	ldrb	r1, [r0, #3]
 80123a2:	5c59      	ldrb	r1, [r3, r1]
 80123a4:	71c1      	strb	r1, [r0, #7]
 80123a6:	5c9b      	ldrb	r3, [r3, r2]
 80123a8:	70c3      	strb	r3, [r0, #3]
}
 80123aa:	4770      	bx	lr
 80123ac:	0801ab7c 	.word	0x0801ab7c

080123b0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 80123b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123b4:	b084      	sub	sp, #16
 80123b6:	4604      	mov	r4, r0
    block_copy(st, dt);
 80123b8:	4601      	mov	r1, r0
 80123ba:	4668      	mov	r0, sp
 80123bc:	f7ff fef3 	bl	80121a6 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80123c0:	f89d c000 	ldrb.w	ip, [sp]
 80123c4:	4b6a      	ldr	r3, [pc, #424]	; (8012570 <mix_sub_columns+0x1c0>)
 80123c6:	f813 000c 	ldrb.w	r0, [r3, ip]
 80123ca:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80123ce:	4a69      	ldr	r2, [pc, #420]	; (8012574 <mix_sub_columns+0x1c4>)
 80123d0:	f812 9008 	ldrb.w	r9, [r2, r8]
 80123d4:	f89d e00a 	ldrb.w	lr, [sp, #10]
 80123d8:	4967      	ldr	r1, [pc, #412]	; (8012578 <mix_sub_columns+0x1c8>)
 80123da:	f811 500e 	ldrb.w	r5, [r1, lr]
 80123de:	f89d 700f 	ldrb.w	r7, [sp, #15]
 80123e2:	5dce      	ldrb	r6, [r1, r7]
 80123e4:	ea80 0009 	eor.w	r0, r0, r9
 80123e8:	4068      	eors	r0, r5
 80123ea:	4070      	eors	r0, r6
 80123ec:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80123ee:	f811 000c 	ldrb.w	r0, [r1, ip]
 80123f2:	f813 a008 	ldrb.w	sl, [r3, r8]
 80123f6:	f812 900e 	ldrb.w	r9, [r2, lr]
 80123fa:	ea80 0a0a 	eor.w	sl, r0, sl
 80123fe:	ea89 090a 	eor.w	r9, r9, sl
 8012402:	ea86 0609 	eor.w	r6, r6, r9
 8012406:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8012408:	f811 8008 	ldrb.w	r8, [r1, r8]
 801240c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8012410:	5dd6      	ldrb	r6, [r2, r7]
 8012412:	ea80 0008 	eor.w	r0, r0, r8
 8012416:	ea8e 0000 	eor.w	r0, lr, r0
 801241a:	4070      	eors	r0, r6
 801241c:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 801241e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8012422:	5dd8      	ldrb	r0, [r3, r7]
 8012424:	ea86 0608 	eor.w	r6, r6, r8
 8012428:	4075      	eors	r5, r6
 801242a:	4068      	eors	r0, r5
 801242c:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801242e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8012432:	f813 000c 	ldrb.w	r0, [r3, ip]
 8012436:	f89d 8009 	ldrb.w	r8, [sp, #9]
 801243a:	f812 9008 	ldrb.w	r9, [r2, r8]
 801243e:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8012442:	f811 500e 	ldrb.w	r5, [r1, lr]
 8012446:	f89d 7003 	ldrb.w	r7, [sp, #3]
 801244a:	5dce      	ldrb	r6, [r1, r7]
 801244c:	ea80 0009 	eor.w	r0, r0, r9
 8012450:	4068      	eors	r0, r5
 8012452:	4070      	eors	r0, r6
 8012454:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8012456:	f811 000c 	ldrb.w	r0, [r1, ip]
 801245a:	f813 a008 	ldrb.w	sl, [r3, r8]
 801245e:	f812 900e 	ldrb.w	r9, [r2, lr]
 8012462:	ea80 0a0a 	eor.w	sl, r0, sl
 8012466:	ea89 090a 	eor.w	r9, r9, sl
 801246a:	ea86 0609 	eor.w	r6, r6, r9
 801246e:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8012470:	f811 8008 	ldrb.w	r8, [r1, r8]
 8012474:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8012478:	5dd6      	ldrb	r6, [r2, r7]
 801247a:	ea80 0008 	eor.w	r0, r0, r8
 801247e:	ea8e 0000 	eor.w	r0, lr, r0
 8012482:	4070      	eors	r0, r6
 8012484:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8012486:	f812 600c 	ldrb.w	r6, [r2, ip]
 801248a:	5dd8      	ldrb	r0, [r3, r7]
 801248c:	ea86 0608 	eor.w	r6, r6, r8
 8012490:	4075      	eors	r5, r6
 8012492:	4068      	eors	r0, r5
 8012494:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8012496:	f89d c008 	ldrb.w	ip, [sp, #8]
 801249a:	f813 000c 	ldrb.w	r0, [r3, ip]
 801249e:	f89d 800d 	ldrb.w	r8, [sp, #13]
 80124a2:	f812 9008 	ldrb.w	r9, [r2, r8]
 80124a6:	f89d e002 	ldrb.w	lr, [sp, #2]
 80124aa:	f811 500e 	ldrb.w	r5, [r1, lr]
 80124ae:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80124b2:	5dce      	ldrb	r6, [r1, r7]
 80124b4:	ea80 0009 	eor.w	r0, r0, r9
 80124b8:	4068      	eors	r0, r5
 80124ba:	4070      	eors	r0, r6
 80124bc:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80124be:	f811 000c 	ldrb.w	r0, [r1, ip]
 80124c2:	f813 a008 	ldrb.w	sl, [r3, r8]
 80124c6:	f812 900e 	ldrb.w	r9, [r2, lr]
 80124ca:	ea80 0a0a 	eor.w	sl, r0, sl
 80124ce:	ea89 090a 	eor.w	r9, r9, sl
 80124d2:	ea86 0609 	eor.w	r6, r6, r9
 80124d6:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80124d8:	f811 8008 	ldrb.w	r8, [r1, r8]
 80124dc:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80124e0:	5dd6      	ldrb	r6, [r2, r7]
 80124e2:	ea80 0008 	eor.w	r0, r0, r8
 80124e6:	ea8e 0000 	eor.w	r0, lr, r0
 80124ea:	4070      	eors	r0, r6
 80124ec:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80124ee:	f812 600c 	ldrb.w	r6, [r2, ip]
 80124f2:	5dd8      	ldrb	r0, [r3, r7]
 80124f4:	ea86 0608 	eor.w	r6, r6, r8
 80124f8:	4075      	eors	r5, r6
 80124fa:	4068      	eors	r0, r5
 80124fc:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80124fe:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8012502:	5d98      	ldrb	r0, [r3, r6]
 8012504:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8012508:	f812 9008 	ldrb.w	r9, [r2, r8]
 801250c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8012510:	f811 c007 	ldrb.w	ip, [r1, r7]
 8012514:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8012518:	f811 e005 	ldrb.w	lr, [r1, r5]
 801251c:	ea80 0009 	eor.w	r0, r0, r9
 8012520:	ea8c 0000 	eor.w	r0, ip, r0
 8012524:	ea8e 0000 	eor.w	r0, lr, r0
 8012528:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 801252a:	5d88      	ldrb	r0, [r1, r6]
 801252c:	f813 a008 	ldrb.w	sl, [r3, r8]
 8012530:	f812 9007 	ldrb.w	r9, [r2, r7]
 8012534:	ea80 0a0a 	eor.w	sl, r0, sl
 8012538:	ea89 090a 	eor.w	r9, r9, sl
 801253c:	ea8e 0e09 	eor.w	lr, lr, r9
 8012540:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8012544:	f811 1008 	ldrb.w	r1, [r1, r8]
 8012548:	f813 e007 	ldrb.w	lr, [r3, r7]
 801254c:	5d57      	ldrb	r7, [r2, r5]
 801254e:	4048      	eors	r0, r1
 8012550:	ea8e 0000 	eor.w	r0, lr, r0
 8012554:	4078      	eors	r0, r7
 8012556:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8012558:	5d92      	ldrb	r2, [r2, r6]
 801255a:	5d5b      	ldrb	r3, [r3, r5]
 801255c:	4051      	eors	r1, r2
 801255e:	ea8c 0c01 	eor.w	ip, ip, r1
 8012562:	ea83 030c 	eor.w	r3, r3, ip
 8012566:	73e3      	strb	r3, [r4, #15]
  }
 8012568:	b004      	add	sp, #16
 801256a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801256e:	bf00      	nop
 8012570:	0801a97c 	.word	0x0801a97c
 8012574:	0801aa7c 	.word	0x0801aa7c
 8012578:	0801ab7c 	.word	0x0801ab7c

0801257c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 801257c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012580:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8012582:	f1a1 0310 	sub.w	r3, r1, #16
 8012586:	b2db      	uxtb	r3, r3
 8012588:	2b10      	cmp	r3, #16
 801258a:	d806      	bhi.n	801259a <lorawan_aes_set_key+0x1e>
 801258c:	460d      	mov	r5, r1
 801258e:	4a3b      	ldr	r2, [pc, #236]	; (801267c <lorawan_aes_set_key+0x100>)
 8012590:	fa22 f303 	lsr.w	r3, r2, r3
 8012594:	f013 0f01 	tst.w	r3, #1
 8012598:	d105      	bne.n	80125a6 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 801259a:	2300      	movs	r3, #0
 801259c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 80125a0:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 80125a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 80125a6:	460a      	mov	r2, r1
 80125a8:	4601      	mov	r1, r0
 80125aa:	4620      	mov	r0, r4
 80125ac:	f7ff fe1c 	bl	80121e8 <copy_block_nn>
    hi = (keylen + 28) << 2;
 80125b0:	f105 031c 	add.w	r3, r5, #28
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	009b      	lsls	r3, r3, #2
 80125b8:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 80125bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80125c0:	3b01      	subs	r3, #1
 80125c2:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80125c6:	462b      	mov	r3, r5
 80125c8:	f04f 0c01 	mov.w	ip, #1
 80125cc:	e023      	b.n	8012616 <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 80125ce:	2d18      	cmp	r5, #24
 80125d0:	d901      	bls.n	80125d6 <lorawan_aes_set_key+0x5a>
 80125d2:	2a10      	cmp	r2, #16
 80125d4:	d048      	beq.n	8012668 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 80125d6:	1b5a      	subs	r2, r3, r5
 80125d8:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80125da:	f814 9002 	ldrb.w	r9, [r4, r2]
 80125de:	ea89 0808 	eor.w	r8, r9, r8
 80125e2:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80125e6:	f102 0801 	add.w	r8, r2, #1
 80125ea:	f814 8008 	ldrb.w	r8, [r4, r8]
 80125ee:	f100 0901 	add.w	r9, r0, #1
 80125f2:	ea88 0707 	eor.w	r7, r8, r7
 80125f6:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80125fa:	1c97      	adds	r7, r2, #2
 80125fc:	5de7      	ldrb	r7, [r4, r7]
 80125fe:	f100 0802 	add.w	r8, r0, #2
 8012602:	407e      	eors	r6, r7
 8012604:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8012608:	3203      	adds	r2, #3
 801260a:	5ca6      	ldrb	r6, [r4, r2]
 801260c:	1cc2      	adds	r2, r0, #3
 801260e:	4071      	eors	r1, r6
 8012610:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8012612:	3304      	adds	r3, #4
 8012614:	b2db      	uxtb	r3, r3
 8012616:	4573      	cmp	r3, lr
 8012618:	d22d      	bcs.n	8012676 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 801261a:	4618      	mov	r0, r3
 801261c:	1f1a      	subs	r2, r3, #4
 801261e:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8012622:	1eda      	subs	r2, r3, #3
 8012624:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8012626:	1e9a      	subs	r2, r3, #2
 8012628:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 801262a:	1e5a      	subs	r2, r3, #1
 801262c:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 801262e:	fbb3 f2f5 	udiv	r2, r3, r5
 8012632:	fb05 3212 	mls	r2, r5, r2, r3
 8012636:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801263a:	d1c8      	bne.n	80125ce <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 801263c:	4a10      	ldr	r2, [pc, #64]	; (8012680 <lorawan_aes_set_key+0x104>)
 801263e:	f812 9007 	ldrb.w	r9, [r2, r7]
 8012642:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8012646:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8012648:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 801264a:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 801264e:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8012652:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012656:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801265a:	b2d2      	uxtb	r2, r2
 801265c:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 8012660:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 8012664:	46c8      	mov	r8, r9
 8012666:	e7b6      	b.n	80125d6 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 8012668:	4a05      	ldr	r2, [pc, #20]	; (8012680 <lorawan_aes_set_key+0x104>)
 801266a:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 801266e:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8012670:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8012672:	5c51      	ldrb	r1, [r2, r1]
 8012674:	e7af      	b.n	80125d6 <lorawan_aes_set_key+0x5a>
    return 0;
 8012676:	2000      	movs	r0, #0
 8012678:	e793      	b.n	80125a2 <lorawan_aes_set_key+0x26>
 801267a:	bf00      	nop
 801267c:	00010101 	.word	0x00010101
 8012680:	0801ab7c 	.word	0x0801ab7c

08012684 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8012684:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8012688:	b31b      	cbz	r3, 80126d2 <lorawan_aes_encrypt+0x4e>
{
 801268a:	b570      	push	{r4, r5, r6, lr}
 801268c:	b084      	sub	sp, #16
 801268e:	460e      	mov	r6, r1
 8012690:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8012692:	4601      	mov	r1, r0
 8012694:	4668      	mov	r0, sp
 8012696:	f7ff fdf3 	bl	8012280 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 801269a:	2401      	movs	r4, #1
 801269c:	e009      	b.n	80126b2 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 801269e:	4668      	mov	r0, sp
 80126a0:	f7ff fe86 	bl	80123b0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80126a4:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 80126a8:	4668      	mov	r0, sp
 80126aa:	f7ff fe48 	bl	801233e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80126ae:	3401      	adds	r4, #1
 80126b0:	b2e4      	uxtb	r4, r4
 80126b2:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 80126b6:	42a3      	cmp	r3, r4
 80126b8:	d8f1      	bhi.n	801269e <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80126ba:	4668      	mov	r0, sp
 80126bc:	f7ff fe44 	bl	8012348 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80126c0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80126c4:	4669      	mov	r1, sp
 80126c6:	4630      	mov	r0, r6
 80126c8:	f7ff fdda 	bl	8012280 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80126cc:	2000      	movs	r0, #0
}
 80126ce:	b004      	add	sp, #16
 80126d0:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 80126d2:	20ff      	movs	r0, #255	; 0xff
}
 80126d4:	4770      	bx	lr
	...

080126d8 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80126d8:	2300      	movs	r3, #0
 80126da:	2b0a      	cmp	r3, #10
 80126dc:	d817      	bhi.n	801270e <GetKeyByID+0x36>
{
 80126de:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80126e0:	4a0c      	ldr	r2, [pc, #48]	; (8012714 <GetKeyByID+0x3c>)
 80126e2:	6814      	ldr	r4, [r2, #0]
 80126e4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80126e8:	4422      	add	r2, r4
 80126ea:	7e12      	ldrb	r2, [r2, #24]
 80126ec:	4282      	cmp	r2, r0
 80126ee:	d006      	beq.n	80126fe <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80126f0:	3301      	adds	r3, #1
 80126f2:	b2db      	uxtb	r3, r3
 80126f4:	2b0a      	cmp	r3, #10
 80126f6:	d9f3      	bls.n	80126e0 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80126f8:	2003      	movs	r0, #3
}
 80126fa:	bc10      	pop	{r4}
 80126fc:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 80126fe:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8012702:	f10c 0c18 	add.w	ip, ip, #24
 8012706:	4464      	add	r4, ip
 8012708:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 801270a:	2000      	movs	r0, #0
 801270c:	e7f5      	b.n	80126fa <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801270e:	2003      	movs	r0, #3
}
 8012710:	4770      	bx	lr
 8012712:	bf00      	nop
 8012714:	2000151c 	.word	0x2000151c

08012718 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8012718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801271c:	b0cc      	sub	sp, #304	; 0x130
 801271e:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8012720:	b3a9      	cbz	r1, 801278e <ComputeCmac+0x76>
 8012722:	4607      	mov	r7, r0
 8012724:	4616      	mov	r6, r2
 8012726:	461c      	mov	r4, r3
 8012728:	4688      	mov	r8, r1
 801272a:	b395      	cbz	r5, 8012792 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 801272c:	a802      	add	r0, sp, #8
 801272e:	f7ff fbd5 	bl	8011edc <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8012732:	a901      	add	r1, sp, #4
 8012734:	4620      	mov	r0, r4
 8012736:	f7ff ffcf 	bl	80126d8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 801273a:	4604      	mov	r4, r0
 801273c:	b118      	cbz	r0, 8012746 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 801273e:	4620      	mov	r0, r4
 8012740:	b04c      	add	sp, #304	; 0x130
 8012742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8012746:	9901      	ldr	r1, [sp, #4]
 8012748:	3101      	adds	r1, #1
 801274a:	a802      	add	r0, sp, #8
 801274c:	f7ff fbd5 	bl	8011efa <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8012750:	b127      	cbz	r7, 801275c <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8012752:	2210      	movs	r2, #16
 8012754:	4639      	mov	r1, r7
 8012756:	a802      	add	r0, sp, #8
 8012758:	f7ff fbd6 	bl	8011f08 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 801275c:	4632      	mov	r2, r6
 801275e:	4641      	mov	r1, r8
 8012760:	a802      	add	r0, sp, #8
 8012762:	f7ff fbd1 	bl	8011f08 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8012766:	a902      	add	r1, sp, #8
 8012768:	a848      	add	r0, sp, #288	; 0x120
 801276a:	f7ff fc3b 	bl	8011fe4 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 801276e:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8012772:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8012776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801277a:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 801277e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012782:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8012786:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801278a:	602b      	str	r3, [r5, #0]
 801278c:	e7d7      	b.n	801273e <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 801278e:	2402      	movs	r4, #2
 8012790:	e7d5      	b.n	801273e <ComputeCmac+0x26>
 8012792:	2402      	movs	r4, #2
 8012794:	e7d3      	b.n	801273e <ComputeCmac+0x26>
	...

08012798 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8012798:	b140      	cbz	r0, 80127ac <SecureElementInit+0x14>
{
 801279a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 801279c:	4a04      	ldr	r2, [pc, #16]	; (80127b0 <SecureElementInit+0x18>)
 801279e:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 80127a0:	22d8      	movs	r2, #216	; 0xd8
 80127a2:	4904      	ldr	r1, [pc, #16]	; (80127b4 <SecureElementInit+0x1c>)
 80127a4:	f000 facb 	bl	8012d3e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 80127a8:	2000      	movs	r0, #0
}
 80127aa:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80127ac:	2002      	movs	r0, #2
}
 80127ae:	4770      	bx	lr
 80127b0:	2000151c 	.word	0x2000151c
 80127b4:	0803e500 	.word	0x0803e500

080127b8 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80127b8:	2300      	movs	r3, #0
 80127ba:	2b0a      	cmp	r3, #10
 80127bc:	d817      	bhi.n	80127ee <SecureElementGetKeyByID+0x36>
{
 80127be:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80127c0:	4a0c      	ldr	r2, [pc, #48]	; (80127f4 <SecureElementGetKeyByID+0x3c>)
 80127c2:	6814      	ldr	r4, [r2, #0]
 80127c4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80127c8:	4422      	add	r2, r4
 80127ca:	7e12      	ldrb	r2, [r2, #24]
 80127cc:	4282      	cmp	r2, r0
 80127ce:	d006      	beq.n	80127de <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80127d0:	3301      	adds	r3, #1
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	2b0a      	cmp	r3, #10
 80127d6:	d9f3      	bls.n	80127c0 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80127d8:	2003      	movs	r0, #3
}
 80127da:	bc10      	pop	{r4}
 80127dc:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 80127de:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80127e2:	f10c 0c18 	add.w	ip, ip, #24
 80127e6:	4464      	add	r4, ip
 80127e8:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80127ea:	2000      	movs	r0, #0
 80127ec:	e7f5      	b.n	80127da <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80127ee:	2003      	movs	r0, #3
}
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	2000151c 	.word	0x2000151c

080127f8 <PrintKey>:
{
 80127f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127fc:	b099      	sub	sp, #100	; 0x64
 80127fe:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8012800:	a917      	add	r1, sp, #92	; 0x5c
 8012802:	f7ff ffd9 	bl	80127b8 <SecureElementGetKeyByID>
 8012806:	4603      	mov	r3, r0
 8012808:	2800      	cmp	r0, #0
 801280a:	d042      	beq.n	8012892 <PrintKey+0x9a>
}
 801280c:	b019      	add	sp, #100	; 0x64
 801280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 8012812:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8012816:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 801281a:	689b      	ldr	r3, [r3, #8]
 801281c:	9313      	str	r3, [sp, #76]	; 0x4c
 801281e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012820:	785a      	ldrb	r2, [r3, #1]
 8012822:	9214      	str	r2, [sp, #80]	; 0x50
 8012824:	7899      	ldrb	r1, [r3, #2]
 8012826:	9115      	str	r1, [sp, #84]	; 0x54
 8012828:	78da      	ldrb	r2, [r3, #3]
 801282a:	7919      	ldrb	r1, [r3, #4]
 801282c:	7958      	ldrb	r0, [r3, #5]
 801282e:	799c      	ldrb	r4, [r3, #6]
 8012830:	79dd      	ldrb	r5, [r3, #7]
 8012832:	7a1e      	ldrb	r6, [r3, #8]
 8012834:	7a5f      	ldrb	r7, [r3, #9]
 8012836:	f893 c00a 	ldrb.w	ip, [r3, #10]
 801283a:	f893 e00b 	ldrb.w	lr, [r3, #11]
 801283e:	f893 800c 	ldrb.w	r8, [r3, #12]
 8012842:	f893 900d 	ldrb.w	r9, [r3, #13]
 8012846:	f893 a00e 	ldrb.w	sl, [r3, #14]
 801284a:	f893 b00f 	ldrb.w	fp, [r3, #15]
 801284e:	7c1b      	ldrb	r3, [r3, #16]
 8012850:	9310      	str	r3, [sp, #64]	; 0x40
 8012852:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8012856:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801285a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801285e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8012862:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8012866:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 801286a:	9709      	str	r7, [sp, #36]	; 0x24
 801286c:	9608      	str	r6, [sp, #32]
 801286e:	9507      	str	r5, [sp, #28]
 8012870:	9406      	str	r4, [sp, #24]
 8012872:	9005      	str	r0, [sp, #20]
 8012874:	9104      	str	r1, [sp, #16]
 8012876:	9203      	str	r2, [sp, #12]
 8012878:	9915      	ldr	r1, [sp, #84]	; 0x54
 801287a:	9102      	str	r1, [sp, #8]
 801287c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801287e:	9201      	str	r2, [sp, #4]
 8012880:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	4b09      	ldr	r3, [pc, #36]	; (80128ac <PrintKey+0xb4>)
 8012886:	2200      	movs	r2, #0
 8012888:	4611      	mov	r1, r2
 801288a:	2002      	movs	r0, #2
 801288c:	f002 f934 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8012890:	e7bc      	b.n	801280c <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012892:	2b0a      	cmp	r3, #10
 8012894:	d8ba      	bhi.n	801280c <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 8012896:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801289a:	4905      	ldr	r1, [pc, #20]	; (80128b0 <PrintKey+0xb8>)
 801289c:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 80128a0:	42a2      	cmp	r2, r4
 80128a2:	d0b6      	beq.n	8012812 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80128a4:	3301      	adds	r3, #1
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	e7f3      	b.n	8012892 <PrintKey+0x9a>
 80128aa:	bf00      	nop
 80128ac:	0801ac7c 	.word	0x0801ac7c
 80128b0:	0801ae14 	.word	0x0801ae14

080128b4 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 80128b4:	2b0b      	cmp	r3, #11
 80128b6:	d80a      	bhi.n	80128ce <SecureElementComputeAesCmac+0x1a>
{
 80128b8:	b500      	push	{lr}
 80128ba:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80128bc:	f8dd c010 	ldr.w	ip, [sp, #16]
 80128c0:	f8cd c000 	str.w	ip, [sp]
 80128c4:	f7ff ff28 	bl	8012718 <ComputeCmac>
}
 80128c8:	b003      	add	sp, #12
 80128ca:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80128ce:	2003      	movs	r0, #3
}
 80128d0:	4770      	bx	lr

080128d2 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 80128d2:	b190      	cbz	r0, 80128fa <SecureElementVerifyAesCmac+0x28>
{
 80128d4:	b510      	push	{r4, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	468c      	mov	ip, r1
 80128da:	4614      	mov	r4, r2
 80128dc:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 80128de:	2000      	movs	r0, #0
 80128e0:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80128e2:	aa03      	add	r2, sp, #12
 80128e4:	9200      	str	r2, [sp, #0]
 80128e6:	4662      	mov	r2, ip
 80128e8:	f7ff ff16 	bl	8012718 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80128ec:	b918      	cbnz	r0, 80128f6 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 80128ee:	9b03      	ldr	r3, [sp, #12]
 80128f0:	42a3      	cmp	r3, r4
 80128f2:	d000      	beq.n	80128f6 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80128f4:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 80128f6:	b004      	add	sp, #16
 80128f8:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80128fa:	2002      	movs	r0, #2
}
 80128fc:	4770      	bx	lr

080128fe <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 80128fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012902:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8012904:	b348      	cbz	r0, 801295a <SecureElementAesEncrypt+0x5c>
 8012906:	460d      	mov	r5, r1
 8012908:	4614      	mov	r4, r2
 801290a:	461e      	mov	r6, r3
 801290c:	4607      	mov	r7, r0
 801290e:	b33b      	cbz	r3, 8012960 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8012910:	f011 0f0f 	tst.w	r1, #15
 8012914:	d127      	bne.n	8012966 <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8012916:	22f0      	movs	r2, #240	; 0xf0
 8012918:	2100      	movs	r1, #0
 801291a:	a801      	add	r0, sp, #4
 801291c:	f000 fa27 	bl	8012d6e <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8012920:	4669      	mov	r1, sp
 8012922:	4620      	mov	r0, r4
 8012924:	f7ff fed8 	bl	80126d8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012928:	4680      	mov	r8, r0
 801292a:	b118      	cbz	r0, 8012934 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 801292c:	4640      	mov	r0, r8
 801292e:	b03e      	add	sp, #248	; 0xf8
 8012930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8012934:	aa01      	add	r2, sp, #4
 8012936:	2110      	movs	r1, #16
 8012938:	9800      	ldr	r0, [sp, #0]
 801293a:	3001      	adds	r0, #1
 801293c:	f7ff fe1e 	bl	801257c <lorawan_aes_set_key>
        uint8_t block = 0;
 8012940:	4644      	mov	r4, r8
        while( size != 0 )
 8012942:	e007      	b.n	8012954 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8012944:	aa01      	add	r2, sp, #4
 8012946:	1931      	adds	r1, r6, r4
 8012948:	1938      	adds	r0, r7, r4
 801294a:	f7ff fe9b 	bl	8012684 <lorawan_aes_encrypt>
            block = block + 16;
 801294e:	3410      	adds	r4, #16
 8012950:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 8012952:	3d10      	subs	r5, #16
        while( size != 0 )
 8012954:	2d00      	cmp	r5, #0
 8012956:	d1f5      	bne.n	8012944 <SecureElementAesEncrypt+0x46>
 8012958:	e7e8      	b.n	801292c <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 801295a:	f04f 0802 	mov.w	r8, #2
 801295e:	e7e5      	b.n	801292c <SecureElementAesEncrypt+0x2e>
 8012960:	f04f 0802 	mov.w	r8, #2
 8012964:	e7e2      	b.n	801292c <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8012966:	f04f 0805 	mov.w	r8, #5
 801296a:	e7df      	b.n	801292c <SecureElementAesEncrypt+0x2e>

0801296c <SecureElementSetKey>:
{
 801296c:	b530      	push	{r4, r5, lr}
 801296e:	b085      	sub	sp, #20
    if( key == NULL )
 8012970:	2900      	cmp	r1, #0
 8012972:	d038      	beq.n	80129e6 <SecureElementSetKey+0x7a>
 8012974:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012976:	2300      	movs	r3, #0
 8012978:	2b0a      	cmp	r3, #10
 801297a:	d830      	bhi.n	80129de <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 801297c:	4a1b      	ldr	r2, [pc, #108]	; (80129ec <SecureElementSetKey+0x80>)
 801297e:	6811      	ldr	r1, [r2, #0]
 8012980:	461c      	mov	r4, r3
 8012982:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012986:	440a      	add	r2, r1
 8012988:	7e12      	ldrb	r2, [r2, #24]
 801298a:	4282      	cmp	r2, r0
 801298c:	d002      	beq.n	8012994 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801298e:	3301      	adds	r3, #1
 8012990:	b2db      	uxtb	r3, r3
 8012992:	e7f1      	b.n	8012978 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 8012994:	280d      	cmp	r0, #13
 8012996:	d00a      	beq.n	80129ae <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8012998:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 801299c:	3418      	adds	r4, #24
 801299e:	1908      	adds	r0, r1, r4
 80129a0:	2210      	movs	r2, #16
 80129a2:	4661      	mov	r1, ip
 80129a4:	3001      	adds	r0, #1
 80129a6:	f000 f9ca 	bl	8012d3e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80129aa:	2500      	movs	r5, #0
 80129ac:	e018      	b.n	80129e0 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 80129ae:	2300      	movs	r3, #0
 80129b0:	9300      	str	r3, [sp, #0]
 80129b2:	9301      	str	r3, [sp, #4]
 80129b4:	9302      	str	r3, [sp, #8]
 80129b6:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 80129b8:	466b      	mov	r3, sp
 80129ba:	220c      	movs	r2, #12
 80129bc:	2110      	movs	r1, #16
 80129be:	4660      	mov	r0, ip
 80129c0:	f7ff ff9d 	bl	80128fe <SecureElementAesEncrypt>
 80129c4:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80129c6:	4b09      	ldr	r3, [pc, #36]	; (80129ec <SecureElementSetKey+0x80>)
 80129c8:	6818      	ldr	r0, [r3, #0]
 80129ca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80129ce:	3418      	adds	r4, #24
 80129d0:	4420      	add	r0, r4
 80129d2:	2210      	movs	r2, #16
 80129d4:	4669      	mov	r1, sp
 80129d6:	3001      	adds	r0, #1
 80129d8:	f000 f9b1 	bl	8012d3e <memcpy1>
                return retval;
 80129dc:	e000      	b.n	80129e0 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80129de:	2503      	movs	r5, #3
}
 80129e0:	4628      	mov	r0, r5
 80129e2:	b005      	add	sp, #20
 80129e4:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80129e6:	2502      	movs	r5, #2
 80129e8:	e7fa      	b.n	80129e0 <SecureElementSetKey+0x74>
 80129ea:	bf00      	nop
 80129ec:	2000151c 	.word	0x2000151c

080129f0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 80129f0:	b1d0      	cbz	r0, 8012a28 <SecureElementDeriveAndStoreKey+0x38>
{
 80129f2:	b510      	push	{r4, lr}
 80129f4:	b084      	sub	sp, #16
 80129f6:	4614      	mov	r4, r2
 80129f8:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 80129fa:	2a0c      	cmp	r2, #12
 80129fc:	d101      	bne.n	8012a02 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 80129fe:	290b      	cmp	r1, #11
 8012a00:	d114      	bne.n	8012a2c <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8012a02:	2300      	movs	r3, #0
 8012a04:	9300      	str	r3, [sp, #0]
 8012a06:	9301      	str	r3, [sp, #4]
 8012a08:	9302      	str	r3, [sp, #8]
 8012a0a:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8012a0c:	466b      	mov	r3, sp
 8012a0e:	460a      	mov	r2, r1
 8012a10:	2110      	movs	r1, #16
 8012a12:	4660      	mov	r0, ip
 8012a14:	f7ff ff73 	bl	80128fe <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012a18:	b108      	cbz	r0, 8012a1e <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8012a1a:	b004      	add	sp, #16
 8012a1c:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8012a1e:	4669      	mov	r1, sp
 8012a20:	4620      	mov	r0, r4
 8012a22:	f7ff ffa3 	bl	801296c <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012a26:	e7f8      	b.n	8012a1a <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8012a28:	2002      	movs	r0, #2
}
 8012a2a:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012a2c:	2003      	movs	r0, #3
 8012a2e:	e7f4      	b.n	8012a1a <SecureElementDeriveAndStoreKey+0x2a>

08012a30 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8012a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a32:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8012a36:	9c07      	ldr	r4, [sp, #28]
 8012a38:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8012a3a:	b35b      	cbz	r3, 8012a94 <SecureElementProcessJoinAccept+0x64>
 8012a3c:	461f      	mov	r7, r3
 8012a3e:	b35c      	cbz	r4, 8012a98 <SecureElementProcessJoinAccept+0x68>
 8012a40:	b366      	cbz	r6, 8012a9c <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8012a42:	2d21      	cmp	r5, #33	; 0x21
 8012a44:	d82c      	bhi.n	8012aa0 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8012a46:	462a      	mov	r2, r5
 8012a48:	4619      	mov	r1, r3
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	f000 f977 	bl	8012d3e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8012a50:	1c63      	adds	r3, r4, #1
 8012a52:	2201      	movs	r2, #1
 8012a54:	1e69      	subs	r1, r5, #1
 8012a56:	18b8      	adds	r0, r7, r2
 8012a58:	f7ff ff51 	bl	80128fe <SecureElementAesEncrypt>
 8012a5c:	bb10      	cbnz	r0, 8012aa4 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8012a5e:	7ae3      	ldrb	r3, [r4, #11]
 8012a60:	09db      	lsrs	r3, r3, #7
 8012a62:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8012a64:	1961      	adds	r1, r4, r5
 8012a66:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8012a6a:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8012a6e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8012a72:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8012a76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8012a7a:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8012a7e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8012a82:	b98b      	cbnz	r3, 8012aa8 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8012a84:	2301      	movs	r3, #1
 8012a86:	1f29      	subs	r1, r5, #4
 8012a88:	4620      	mov	r0, r4
 8012a8a:	f7ff ff22 	bl	80128d2 <SecureElementVerifyAesCmac>
 8012a8e:	b140      	cbz	r0, 8012aa2 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8012a90:	2001      	movs	r0, #1
 8012a92:	e006      	b.n	8012aa2 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8012a94:	2002      	movs	r0, #2
 8012a96:	e004      	b.n	8012aa2 <SecureElementProcessJoinAccept+0x72>
 8012a98:	2002      	movs	r0, #2
 8012a9a:	e002      	b.n	8012aa2 <SecureElementProcessJoinAccept+0x72>
 8012a9c:	2002      	movs	r0, #2
 8012a9e:	e000      	b.n	8012aa2 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8012aa0:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8012aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8012aa4:	2007      	movs	r0, #7
 8012aa6:	e7fc      	b.n	8012aa2 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8012aa8:	2004      	movs	r0, #4
 8012aaa:	e7fa      	b.n	8012aa2 <SecureElementProcessJoinAccept+0x72>

08012aac <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8012aac:	b140      	cbz	r0, 8012ac0 <SecureElementSetDevEui+0x14>
{
 8012aae:	b508      	push	{r3, lr}
 8012ab0:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8012ab2:	2208      	movs	r2, #8
 8012ab4:	4b03      	ldr	r3, [pc, #12]	; (8012ac4 <SecureElementSetDevEui+0x18>)
 8012ab6:	6818      	ldr	r0, [r3, #0]
 8012ab8:	f000 f941 	bl	8012d3e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012abc:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012abe:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012ac0:	2002      	movs	r0, #2
}
 8012ac2:	4770      	bx	lr
 8012ac4:	2000151c 	.word	0x2000151c

08012ac8 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8012ac8:	b138      	cbz	r0, 8012ada <SecureElementGetDevEui+0x12>
{
 8012aca:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8012acc:	2208      	movs	r2, #8
 8012ace:	4904      	ldr	r1, [pc, #16]	; (8012ae0 <SecureElementGetDevEui+0x18>)
 8012ad0:	6809      	ldr	r1, [r1, #0]
 8012ad2:	f000 f934 	bl	8012d3e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012ad6:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012ad8:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012ada:	2002      	movs	r0, #2
}
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop
 8012ae0:	2000151c 	.word	0x2000151c

08012ae4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8012ae4:	b148      	cbz	r0, 8012afa <SecureElementSetJoinEui+0x16>
{
 8012ae6:	b508      	push	{r3, lr}
 8012ae8:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8012aea:	4b05      	ldr	r3, [pc, #20]	; (8012b00 <SecureElementSetJoinEui+0x1c>)
 8012aec:	6818      	ldr	r0, [r3, #0]
 8012aee:	2208      	movs	r2, #8
 8012af0:	4410      	add	r0, r2
 8012af2:	f000 f924 	bl	8012d3e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012af6:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012af8:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012afa:	2002      	movs	r0, #2
}
 8012afc:	4770      	bx	lr
 8012afe:	bf00      	nop
 8012b00:	2000151c 	.word	0x2000151c

08012b04 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8012b04:	b140      	cbz	r0, 8012b18 <SecureElementGetJoinEui+0x14>
{
 8012b06:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8012b08:	4a04      	ldr	r2, [pc, #16]	; (8012b1c <SecureElementGetJoinEui+0x18>)
 8012b0a:	6811      	ldr	r1, [r2, #0]
 8012b0c:	2208      	movs	r2, #8
 8012b0e:	4411      	add	r1, r2
 8012b10:	f000 f915 	bl	8012d3e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012b14:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012b16:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012b18:	2002      	movs	r0, #2
}
 8012b1a:	4770      	bx	lr
 8012b1c:	2000151c 	.word	0x2000151c

08012b20 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8012b20:	2802      	cmp	r0, #2
 8012b22:	d004      	beq.n	8012b2e <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8012b24:	4b04      	ldr	r3, [pc, #16]	; (8012b38 <SecureElementSetDevAddr+0x18>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8012b2a:	2000      	movs	r0, #0
 8012b2c:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8012b2e:	4b02      	ldr	r3, [pc, #8]	; (8012b38 <SecureElementSetDevAddr+0x18>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	6119      	str	r1, [r3, #16]
 8012b34:	e7f9      	b.n	8012b2a <SecureElementSetDevAddr+0xa>
 8012b36:	bf00      	nop
 8012b38:	2000151c 	.word	0x2000151c

08012b3c <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 8012b3c:	b169      	cbz	r1, 8012b5a <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8012b3e:	2802      	cmp	r0, #2
 8012b40:	d005      	beq.n	8012b4e <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8012b42:	4a07      	ldr	r2, [pc, #28]	; (8012b60 <SecureElementGetDevAddr+0x24>)
 8012b44:	6812      	ldr	r2, [r2, #0]
 8012b46:	6952      	ldr	r2, [r2, #20]
 8012b48:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8012b4a:	2000      	movs	r0, #0
 8012b4c:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8012b4e:	4a04      	ldr	r2, [pc, #16]	; (8012b60 <SecureElementGetDevAddr+0x24>)
 8012b50:	6812      	ldr	r2, [r2, #0]
 8012b52:	6912      	ldr	r2, [r2, #16]
 8012b54:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 8012b56:	2000      	movs	r0, #0
 8012b58:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8012b5a:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8012b5c:	4770      	bx	lr
 8012b5e:	bf00      	nop
 8012b60:	2000151c 	.word	0x2000151c

08012b64 <SecureElementInitMcuID>:
{
 8012b64:	b530      	push	{r4, r5, lr}
 8012b66:	b085      	sub	sp, #20
 8012b68:	4605      	mov	r5, r0
 8012b6a:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 8012b70:	a802      	add	r0, sp, #8
 8012b72:	f7ff ffa9 	bl	8012ac8 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8012b76:	a901      	add	r1, sp, #4
 8012b78:	2001      	movs	r0, #1
 8012b7a:	f7ff ffdf 	bl	8012b3c <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 8012b7e:	b195      	cbz	r5, 8012ba6 <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8012b80:	2300      	movs	r3, #0
 8012b82:	2b07      	cmp	r3, #7
 8012b84:	d808      	bhi.n	8012b98 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 8012b86:	f103 0210 	add.w	r2, r3, #16
 8012b8a:	446a      	add	r2, sp
 8012b8c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8012b90:	b9aa      	cbnz	r2, 8012bbe <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8012b92:	3301      	adds	r3, #1
 8012b94:	b2db      	uxtb	r3, r3
 8012b96:	e7f4      	b.n	8012b82 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 8012b98:	2300      	movs	r3, #0
        if( id_init == false )
 8012b9a:	b923      	cbnz	r3, 8012ba6 <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8012b9c:	a802      	add	r0, sp, #8
 8012b9e:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 8012ba0:	a802      	add	r0, sp, #8
 8012ba2:	f7ff ff83 	bl	8012aac <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8012ba6:	b13c      	cbz	r4, 8012bb8 <SecureElementInitMcuID+0x54>
 8012ba8:	9b01      	ldr	r3, [sp, #4]
 8012baa:	b92b      	cbnz	r3, 8012bb8 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8012bac:	a801      	add	r0, sp, #4
 8012bae:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8012bb0:	9901      	ldr	r1, [sp, #4]
 8012bb2:	2001      	movs	r0, #1
 8012bb4:	f7ff ffb4 	bl	8012b20 <SecureElementSetDevAddr>
}
 8012bb8:	2000      	movs	r0, #0
 8012bba:	b005      	add	sp, #20
 8012bbc:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	e7eb      	b.n	8012b9a <SecureElementInitMcuID+0x36>
	...

08012bc4 <PrintIds>:
{
 8012bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bc6:	b08f      	sub	sp, #60	; 0x3c
 8012bc8:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8012bca:	2400      	movs	r4, #0
 8012bcc:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 8012bce:	a80a      	add	r0, sp, #40	; 0x28
 8012bd0:	f7ff ff7a 	bl	8012ac8 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8012bd4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012bd8:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8012bdc:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 8012be0:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8012be4:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8012be8:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 8012bec:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 8012bf0:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 8012bf4:	f8cd e01c 	str.w	lr, [sp, #28]
 8012bf8:	f8cd c018 	str.w	ip, [sp, #24]
 8012bfc:	9705      	str	r7, [sp, #20]
 8012bfe:	9604      	str	r6, [sp, #16]
 8012c00:	9003      	str	r0, [sp, #12]
 8012c02:	9102      	str	r1, [sp, #8]
 8012c04:	9201      	str	r2, [sp, #4]
 8012c06:	9300      	str	r3, [sp, #0]
 8012c08:	4b20      	ldr	r3, [pc, #128]	; (8012c8c <PrintIds+0xc8>)
 8012c0a:	4622      	mov	r2, r4
 8012c0c:	4621      	mov	r1, r4
 8012c0e:	2002      	movs	r0, #2
 8012c10:	f001 ff72 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 8012c14:	a80c      	add	r0, sp, #48	; 0x30
 8012c16:	f7ff ff75 	bl	8012b04 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8012c1a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8012c1e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8012c22:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8012c26:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8012c2a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8012c2e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 8012c32:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 8012c36:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 8012c3a:	f8cd e01c 	str.w	lr, [sp, #28]
 8012c3e:	f8cd c018 	str.w	ip, [sp, #24]
 8012c42:	9705      	str	r7, [sp, #20]
 8012c44:	9604      	str	r6, [sp, #16]
 8012c46:	9003      	str	r0, [sp, #12]
 8012c48:	9102      	str	r1, [sp, #8]
 8012c4a:	9201      	str	r2, [sp, #4]
 8012c4c:	9300      	str	r3, [sp, #0]
 8012c4e:	4b10      	ldr	r3, [pc, #64]	; (8012c90 <PrintIds+0xcc>)
 8012c50:	4622      	mov	r2, r4
 8012c52:	4621      	mov	r1, r4
 8012c54:	2002      	movs	r0, #2
 8012c56:	f001 ff4f 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 8012c5a:	a909      	add	r1, sp, #36	; 0x24
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	f7ff ff6d 	bl	8012b3c <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8012c62:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8012c66:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8012c6a:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8012c6e:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8012c72:	9003      	str	r0, [sp, #12]
 8012c74:	9102      	str	r1, [sp, #8]
 8012c76:	9201      	str	r2, [sp, #4]
 8012c78:	9300      	str	r3, [sp, #0]
 8012c7a:	4b06      	ldr	r3, [pc, #24]	; (8012c94 <PrintIds+0xd0>)
 8012c7c:	4622      	mov	r2, r4
 8012c7e:	4621      	mov	r1, r4
 8012c80:	2002      	movs	r0, #2
 8012c82:	f001 ff39 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 8012c86:	b00f      	add	sp, #60	; 0x3c
 8012c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	0801acd8 	.word	0x0801acd8
 8012c90:	0801ad18 	.word	0x0801ad18
 8012c94:	0801ad58 	.word	0x0801ad58

08012c98 <SecureElementPrintKeys>:
{
 8012c98:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8012c9a:	2000      	movs	r0, #0
 8012c9c:	f7ff fdac 	bl	80127f8 <PrintKey>
    PrintKey( NWK_KEY );
 8012ca0:	2001      	movs	r0, #1
 8012ca2:	f7ff fda9 	bl	80127f8 <PrintKey>
    PrintKey( APP_S_KEY );
 8012ca6:	2009      	movs	r0, #9
 8012ca8:	f7ff fda6 	bl	80127f8 <PrintKey>
    PrintKey( NWK_S_KEY );
 8012cac:	2008      	movs	r0, #8
 8012cae:	f7ff fda3 	bl	80127f8 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 8012cb2:	2000      	movs	r0, #0
 8012cb4:	f7ff ff86 	bl	8012bc4 <PrintIds>
}
 8012cb8:	2000      	movs	r0, #0
 8012cba:	bd08      	pop	{r3, pc}

08012cbc <SecureElementPrintSessionKeys>:
{
 8012cbc:	b510      	push	{r4, lr}
 8012cbe:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8012cc0:	200b      	movs	r0, #11
 8012cc2:	f7ff fd99 	bl	80127f8 <PrintKey>
    PrintKey( MC_KE_KEY );
 8012cc6:	200c      	movs	r0, #12
 8012cc8:	f7ff fd96 	bl	80127f8 <PrintKey>
    PrintKey( APP_S_KEY );
 8012ccc:	2009      	movs	r0, #9
 8012cce:	f7ff fd93 	bl	80127f8 <PrintKey>
    PrintKey( NWK_S_KEY );
 8012cd2:	2008      	movs	r0, #8
 8012cd4:	f7ff fd90 	bl	80127f8 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8012cd8:	200a      	movs	r0, #10
 8012cda:	f7ff fd8d 	bl	80127f8 <PrintKey>
    PrintIds( mode );
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f7ff ff70 	bl	8012bc4 <PrintIds>
}
 8012ce4:	2000      	movs	r0, #0
 8012ce6:	bd10      	pop	{r4, pc}

08012ce8 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8012ce8:	4b09      	ldr	r3, [pc, #36]	; (8012d10 <rand1+0x28>)
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	4909      	ldr	r1, [pc, #36]	; (8012d14 <rand1+0x2c>)
 8012cee:	f243 0039 	movw	r0, #12345	; 0x3039
 8012cf2:	fb01 0002 	mla	r0, r1, r2, r0
 8012cf6:	6018      	str	r0, [r3, #0]
 8012cf8:	2303      	movs	r3, #3
 8012cfa:	fba3 2300 	umull	r2, r3, r3, r0
 8012cfe:	1ac2      	subs	r2, r0, r3
 8012d00:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012d04:	0f9b      	lsrs	r3, r3, #30
 8012d06:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8012d0a:	1ac0      	subs	r0, r0, r3
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop
 8012d10:	2000020c 	.word	0x2000020c
 8012d14:	41c64e6d 	.word	0x41c64e6d

08012d18 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8012d18:	4b01      	ldr	r3, [pc, #4]	; (8012d20 <srand1+0x8>)
 8012d1a:	6018      	str	r0, [r3, #0]
}
 8012d1c:	4770      	bx	lr
 8012d1e:	bf00      	nop
 8012d20:	2000020c 	.word	0x2000020c

08012d24 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8012d24:	b538      	push	{r3, r4, r5, lr}
 8012d26:	4605      	mov	r5, r0
 8012d28:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8012d2a:	f7ff ffdd 	bl	8012ce8 <rand1>
 8012d2e:	1b61      	subs	r1, r4, r5
 8012d30:	3101      	adds	r1, #1
 8012d32:	fb90 f3f1 	sdiv	r3, r0, r1
 8012d36:	fb01 0013 	mls	r0, r1, r3, r0
}
 8012d3a:	4428      	add	r0, r5
 8012d3c:	bd38      	pop	{r3, r4, r5, pc}

08012d3e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8012d3e:	e004      	b.n	8012d4a <memcpy1+0xc>
    {
        *dst++ = *src++;
 8012d40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d44:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8012d48:	461a      	mov	r2, r3
 8012d4a:	1e53      	subs	r3, r2, #1
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	2a00      	cmp	r2, #0
 8012d50:	d1f6      	bne.n	8012d40 <memcpy1+0x2>
    }
}
 8012d52:	4770      	bx	lr

08012d54 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8012d54:	1e53      	subs	r3, r2, #1
 8012d56:	4418      	add	r0, r3
    while( size-- )
 8012d58:	e004      	b.n	8012d64 <memcpyr+0x10>
    {
        *dst-- = *src++;
 8012d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d5e:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8012d62:	461a      	mov	r2, r3
 8012d64:	1e53      	subs	r3, r2, #1
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	2a00      	cmp	r2, #0
 8012d6a:	d1f6      	bne.n	8012d5a <memcpyr+0x6>
    }
}
 8012d6c:	4770      	bx	lr

08012d6e <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8012d6e:	e002      	b.n	8012d76 <memset1+0x8>
    {
        *dst++ = value;
 8012d70:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8012d74:	461a      	mov	r2, r3
 8012d76:	1e53      	subs	r3, r2, #1
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	2a00      	cmp	r2, #0
 8012d7c:	d1f8      	bne.n	8012d70 <memset1+0x2>
    }
}
 8012d7e:	4770      	bx	lr

08012d80 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8012d80:	b1f0      	cbz	r0, 8012dc0 <Crc32+0x40>
{
 8012d82:	b510      	push	{r4, lr}
 8012d84:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8012d86:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8012d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d8e:	e00e      	b.n	8012dae <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8012d90:	f340 0c00 	sbfx	ip, r0, #0, #1
 8012d94:	4a0b      	ldr	r2, [pc, #44]	; (8012dc4 <Crc32+0x44>)
 8012d96:	ea0c 0202 	and.w	r2, ip, r2
 8012d9a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8012d9e:	3301      	adds	r3, #1
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	2b07      	cmp	r3, #7
 8012da4:	d9f4      	bls.n	8012d90 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8012da6:	f10e 0e01 	add.w	lr, lr, #1
 8012daa:	fa1f fe8e 	uxth.w	lr, lr
 8012dae:	458e      	cmp	lr, r1
 8012db0:	d204      	bcs.n	8012dbc <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8012db2:	f814 300e 	ldrb.w	r3, [r4, lr]
 8012db6:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8012db8:	2300      	movs	r3, #0
 8012dba:	e7f2      	b.n	8012da2 <Crc32+0x22>
        }
    }

    return ~crc;
 8012dbc:	43c0      	mvns	r0, r0
}
 8012dbe:	bd10      	pop	{r4, pc}
        return 0;
 8012dc0:	2000      	movs	r0, #0
}
 8012dc2:	4770      	bx	lr
 8012dc4:	edb88320 	.word	0xedb88320

08012dc8 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8012dc8:	2001      	movs	r0, #1
 8012dca:	4770      	bx	lr

08012dcc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8012dcc:	280a      	cmp	r0, #10
 8012dce:	d807      	bhi.n	8012de0 <RadioGetLoRaBandwidthInHz+0x14>
 8012dd0:	e8df f000 	tbb	[pc, r0]
 8012dd4:	17110b20 	.word	0x17110b20
 8012dd8:	061e1c1a 	.word	0x061e1c1a
 8012ddc:	0e08      	.short	0x0e08
 8012dde:	14          	.byte	0x14
 8012ddf:	00          	.byte	0x00
 8012de0:	2000      	movs	r0, #0
 8012de2:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8012de4:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8012de8:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8012dea:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8012dee:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8012df0:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8012df4:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8012df6:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8012dfa:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8012dfc:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8012e00:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8012e02:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8012e06:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8012e08:	4804      	ldr	r0, [pc, #16]	; (8012e1c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8012e0a:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8012e0c:	4804      	ldr	r0, [pc, #16]	; (8012e20 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8012e0e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8012e10:	4804      	ldr	r0, [pc, #16]	; (8012e24 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8012e12:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8012e14:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8012e18:	4770      	bx	lr
 8012e1a:	bf00      	nop
 8012e1c:	0001e848 	.word	0x0001e848
 8012e20:	0003d090 	.word	0x0003d090
 8012e24:	0007a120 	.word	0x0007a120

08012e28 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8012e28:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8012e2c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012e2e:	b953      	cbnz	r3, 8012e46 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8012e30:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8012e32:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012e34:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8012e36:	b141      	cbz	r1, 8012e4a <RadioGetGfskTimeOnAirNumerator+0x22>
 8012e38:	2302      	movs	r3, #2
 8012e3a:	f89d 0000 	ldrb.w	r0, [sp]
 8012e3e:	4418      	add	r0, r3
}
 8012e40:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8012e44:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012e46:	2300      	movs	r3, #0
 8012e48:	e7f3      	b.n	8012e32 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e7f5      	b.n	8012e3a <RadioGetGfskTimeOnAirNumerator+0x12>

08012e4e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8012e4e:	b570      	push	{r4, r5, r6, lr}
 8012e50:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8012e54:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8012e58:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8012e5a:	f1a1 0c05 	sub.w	ip, r1, #5
 8012e5e:	f1bc 0f01 	cmp.w	ip, #1
 8012e62:	d931      	bls.n	8012ec8 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8012e64:	b918      	cbnz	r0, 8012e6e <RadioGetLoRaTimeOnAirNumerator+0x20>
 8012e66:	f1a1 060b 	sub.w	r6, r1, #11
 8012e6a:	2e01      	cmp	r6, #1
 8012e6c:	d934      	bls.n	8012ed8 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8012e6e:	2801      	cmp	r0, #1
 8012e70:	d02e      	beq.n	8012ed0 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8012e72:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012e74:	f89d c014 	ldrb.w	ip, [sp, #20]
 8012e78:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8012e7c:	b385      	cbz	r5, 8012ee0 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8012e7e:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012e80:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8012e82:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8012e84:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8012e88:	b364      	cbz	r4, 8012ee4 <RadioGetLoRaTimeOnAirNumerator+0x96>
 8012e8a:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8012e8e:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8012e90:	2906      	cmp	r1, #6
 8012e92:	d904      	bls.n	8012e9e <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8012e94:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8012e98:	b10e      	cbz	r6, 8012e9e <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8012e9a:	1e88      	subs	r0, r1, #2
 8012e9c:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8012e9e:	f1bc 0f00 	cmp.w	ip, #0
 8012ea2:	db22      	blt.n	8012eea <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8012ea4:	4484      	add	ip, r0
 8012ea6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8012eaa:	fb9c fcf0 	sdiv	ip, ip, r0
 8012eae:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8012eb2:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8012eb6:	2906      	cmp	r1, #6
 8012eb8:	d801      	bhi.n	8012ebe <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8012eba:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8012ebe:	0080      	lsls	r0, r0, #2
 8012ec0:	3001      	adds	r0, #1
 8012ec2:	3902      	subs	r1, #2
}
 8012ec4:	4088      	lsls	r0, r1
 8012ec6:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8012ec8:	2b0b      	cmp	r3, #11
 8012eca:	d8cb      	bhi.n	8012e64 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8012ecc:	230c      	movs	r3, #12
 8012ece:	e7c9      	b.n	8012e64 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012ed0:	290c      	cmp	r1, #12
 8012ed2:	d003      	beq.n	8012edc <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8012ed4:	2600      	movs	r6, #0
 8012ed6:	e7cd      	b.n	8012e74 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8012ed8:	2601      	movs	r6, #1
 8012eda:	e7cb      	b.n	8012e74 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8012edc:	2601      	movs	r6, #1
 8012ede:	e7c9      	b.n	8012e74 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8012ee0:	2000      	movs	r0, #0
 8012ee2:	e7cd      	b.n	8012e80 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8012ee4:	f04f 0e14 	mov.w	lr, #20
 8012ee8:	e7d1      	b.n	8012e8e <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8012eea:	f04f 0c00 	mov.w	ip, #0
 8012eee:	e7d9      	b.n	8012ea4 <RadioGetLoRaTimeOnAirNumerator+0x56>

08012ef0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8012ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ef2:	b085      	sub	sp, #20
 8012ef4:	460e      	mov	r6, r1
 8012ef6:	4615      	mov	r5, r2
 8012ef8:	4619      	mov	r1, r3
 8012efa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012efe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012f02:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8012f06:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8012f0a:	b148      	cbz	r0, 8012f20 <RadioTimeOnAir+0x30>
 8012f0c:	2801      	cmp	r0, #1
 8012f0e:	d012      	beq.n	8012f36 <RadioTimeOnAir+0x46>
 8012f10:	2501      	movs	r5, #1
 8012f12:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8012f14:	442c      	add	r4, r5
 8012f16:	1e60      	subs	r0, r4, #1
}
 8012f18:	fbb0 f0f5 	udiv	r0, r0, r5
 8012f1c:	b005      	add	sp, #20
 8012f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8012f20:	f8cd c004 	str.w	ip, [sp, #4]
 8012f24:	9700      	str	r7, [sp, #0]
 8012f26:	4628      	mov	r0, r5
 8012f28:	f7ff ff7e 	bl	8012e28 <RadioGetGfskTimeOnAirNumerator>
 8012f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012f30:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8012f34:	e7ee      	b.n	8012f14 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8012f36:	f8cd c008 	str.w	ip, [sp, #8]
 8012f3a:	9701      	str	r7, [sp, #4]
 8012f3c:	9300      	str	r3, [sp, #0]
 8012f3e:	4613      	mov	r3, r2
 8012f40:	460a      	mov	r2, r1
 8012f42:	4629      	mov	r1, r5
 8012f44:	4630      	mov	r0, r6
 8012f46:	f7ff ff82 	bl	8012e4e <RadioGetLoRaTimeOnAirNumerator>
 8012f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012f4e:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8012f52:	4b03      	ldr	r3, [pc, #12]	; (8012f60 <RadioTimeOnAir+0x70>)
 8012f54:	5d98      	ldrb	r0, [r3, r6]
 8012f56:	f7ff ff39 	bl	8012dcc <RadioGetLoRaBandwidthInHz>
 8012f5a:	4605      	mov	r5, r0
        break;
 8012f5c:	e7da      	b.n	8012f14 <RadioTimeOnAir+0x24>
 8012f5e:	bf00      	nop
 8012f60:	0801af04 	.word	0x0801af04

08012f64 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8012f64:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8012f66:	4b05      	ldr	r3, [pc, #20]	; (8012f7c <RadioOnTxTimeoutProcess+0x18>)
 8012f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012f6c:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8012f6e:	4b04      	ldr	r3, [pc, #16]	; (8012f80 <RadioOnTxTimeoutProcess+0x1c>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	b113      	cbz	r3, 8012f7a <RadioOnTxTimeoutProcess+0x16>
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	b103      	cbz	r3, 8012f7a <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8012f78:	4798      	blx	r3
    }
}
 8012f7a:	bd08      	pop	{r3, pc}
 8012f7c:	48000400 	.word	0x48000400
 8012f80:	20001620 	.word	0x20001620

08012f84 <RadioOnTxTimeoutIrq>:
{
 8012f84:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8012f86:	f7ff ffed 	bl	8012f64 <RadioOnTxTimeoutProcess>
}
 8012f8a:	bd08      	pop	{r3, pc}

08012f8c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8012f8c:	b508      	push	{r3, lr}
 8012f8e:	4b05      	ldr	r3, [pc, #20]	; (8012fa4 <RadioOnRxTimeoutProcess+0x18>)
 8012f90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012f94:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8012f96:	4b04      	ldr	r3, [pc, #16]	; (8012fa8 <RadioOnRxTimeoutProcess+0x1c>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	b113      	cbz	r3, 8012fa2 <RadioOnRxTimeoutProcess+0x16>
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	b103      	cbz	r3, 8012fa2 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8012fa0:	4798      	blx	r3
    }
}
 8012fa2:	bd08      	pop	{r3, pc}
 8012fa4:	48000400 	.word	0x48000400
 8012fa8:	20001620 	.word	0x20001620

08012fac <RadioOnRxTimeoutIrq>:
{
 8012fac:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8012fae:	f7ff ffed 	bl	8012f8c <RadioOnRxTimeoutProcess>
}
 8012fb2:	bd08      	pop	{r3, pc}

08012fb4 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8012fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fb8:	4770      	bx	lr

08012fba <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8012fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fbe:	4770      	bx	lr

08012fc0 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8012fc0:	2001      	movs	r0, #1
 8012fc2:	4770      	bx	lr

08012fc4 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8012fc4:	2001      	movs	r0, #1
 8012fc6:	4770      	bx	lr

08012fc8 <RadioWrite>:
{
 8012fc8:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8012fca:	f000 fe37 	bl	8013c3c <SUBGRF_WriteRegister>
}
 8012fce:	bd08      	pop	{r3, pc}

08012fd0 <RadioTxCw>:
{
 8012fd0:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8012fd2:	f001 fbcf 	bl	8014774 <SUBGRF_SetRfTxPower>
 8012fd6:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8012fd8:	210e      	movs	r1, #14
 8012fda:	f640 101f 	movw	r0, #2335	; 0x91f
 8012fde:	f000 fe2d 	bl	8013c3c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8012fe2:	2101      	movs	r1, #1
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f001 fbb1 	bl	801474c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8012fea:	f000 fff7 	bl	8013fdc <SUBGRF_SetTxContinuousWave>
}
 8012fee:	bd10      	pop	{r4, pc}

08012ff0 <RadioTxPrbs>:
{
 8012ff0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8012ff2:	2101      	movs	r1, #1
 8012ff4:	4b07      	ldr	r3, [pc, #28]	; (8013014 <RadioTxPrbs+0x24>)
 8012ff6:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8012ffa:	f001 fba7 	bl	801474c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8012ffe:	212d      	movs	r1, #45	; 0x2d
 8013000:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013004:	f7ff ffe0 	bl	8012fc8 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8013008:	f000 ffef 	bl	8013fea <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801300c:	4802      	ldr	r0, [pc, #8]	; (8013018 <RadioTxPrbs+0x28>)
 801300e:	f000 ff25 	bl	8013e5c <SUBGRF_SetTx>
}
 8013012:	bd08      	pop	{r3, pc}
 8013014:	2000163c 	.word	0x2000163c
 8013018:	000fffff 	.word	0x000fffff

0801301c <RadioSetRxDutyCycle>:
{
 801301c:	b570      	push	{r4, r5, r6, lr}
 801301e:	4604      	mov	r4, r0
 8013020:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8013022:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8013026:	4e09      	ldr	r6, [pc, #36]	; (801304c <RadioSetRxDutyCycle+0x30>)
 8013028:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801302a:	2300      	movs	r3, #0
 801302c:	461a      	mov	r2, r3
 801302e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013032:	4608      	mov	r0, r1
 8013034:	f001 f8a5 	bl	8014182 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8013038:	2100      	movs	r1, #0
 801303a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801303e:	f001 fb85 	bl	801474c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8013042:	4629      	mov	r1, r5
 8013044:	4620      	mov	r0, r4
 8013046:	f000 ff99 	bl	8013f7c <SUBGRF_SetRxDutyCycle>
}
 801304a:	bd70      	pop	{r4, r5, r6, pc}
 801304c:	2000163c 	.word	0x2000163c

08013050 <RadioRxBoosted>:
{
 8013050:	b538      	push	{r3, r4, r5, lr}
 8013052:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8013054:	f001 fc69 	bl	801492a <RFW_Is_Init>
 8013058:	2801      	cmp	r0, #1
 801305a:	d019      	beq.n	8013090 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801305c:	2300      	movs	r3, #0
 801305e:	461a      	mov	r2, r3
 8013060:	f240 2162 	movw	r1, #610	; 0x262
 8013064:	4608      	mov	r0, r1
 8013066:	f001 f88c 	bl	8014182 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801306a:	b9a4      	cbnz	r4, 8013096 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801306c:	4c11      	ldr	r4, [pc, #68]	; (80130b4 <RadioRxBoosted+0x64>)
 801306e:	2100      	movs	r1, #0
 8013070:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8013072:	4b11      	ldr	r3, [pc, #68]	; (80130b8 <RadioRxBoosted+0x68>)
 8013074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013078:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801307a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801307e:	f001 fb65 	bl	801474c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8013082:	7863      	ldrb	r3, [r4, #1]
 8013084:	b183      	cbz	r3, 80130a8 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8013086:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801308a:	f000 ff59 	bl	8013f40 <SUBGRF_SetRxBoosted>
}
 801308e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8013090:	f001 fc53 	bl	801493a <RFW_ReceiveInit>
 8013094:	e7e9      	b.n	801306a <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8013096:	4d09      	ldr	r5, [pc, #36]	; (80130bc <RadioRxBoosted+0x6c>)
 8013098:	4621      	mov	r1, r4
 801309a:	4628      	mov	r0, r5
 801309c:	f002 f914 	bl	80152c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80130a0:	4628      	mov	r0, r5
 80130a2:	f002 f8cb 	bl	801523c <UTIL_TIMER_Start>
 80130a6:	e7e1      	b.n	801306c <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80130a8:	4b02      	ldr	r3, [pc, #8]	; (80130b4 <RadioRxBoosted+0x64>)
 80130aa:	6898      	ldr	r0, [r3, #8]
 80130ac:	0180      	lsls	r0, r0, #6
 80130ae:	f000 ff47 	bl	8013f40 <SUBGRF_SetRxBoosted>
}
 80130b2:	e7ec      	b.n	801308e <RadioRxBoosted+0x3e>
 80130b4:	2000163c 	.word	0x2000163c
 80130b8:	48000400 	.word	0x48000400
 80130bc:	20001624 	.word	0x20001624

080130c0 <RadioStandby>:
{
 80130c0:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80130c2:	2000      	movs	r0, #0
 80130c4:	f000 feb0 	bl	8013e28 <SUBGRF_SetStandby>
}
 80130c8:	bd08      	pop	{r3, pc}

080130ca <RadioRead>:
{
 80130ca:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 80130cc:	f000 fdc6 	bl	8013c5c <SUBGRF_ReadRegister>
}
 80130d0:	bd08      	pop	{r3, pc}

080130d2 <RadioGetStatus>:
{
 80130d2:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80130d4:	f000 fda6 	bl	8013c24 <SUBGRF_GetOperatingMode>
 80130d8:	2805      	cmp	r0, #5
 80130da:	d007      	beq.n	80130ec <RadioGetStatus+0x1a>
 80130dc:	2807      	cmp	r0, #7
 80130de:	d007      	beq.n	80130f0 <RadioGetStatus+0x1e>
 80130e0:	2804      	cmp	r0, #4
 80130e2:	d001      	beq.n	80130e8 <RadioGetStatus+0x16>
            return RF_IDLE;
 80130e4:	2000      	movs	r0, #0
}
 80130e6:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80130e8:	2002      	movs	r0, #2
 80130ea:	e7fc      	b.n	80130e6 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80130ec:	2001      	movs	r0, #1
 80130ee:	e7fa      	b.n	80130e6 <RadioGetStatus+0x14>
            return RF_CAD;
 80130f0:	2003      	movs	r0, #3
 80130f2:	e7f8      	b.n	80130e6 <RadioGetStatus+0x14>

080130f4 <RadioIrqProcess>:
{
 80130f4:	b530      	push	{r4, r5, lr}
 80130f6:	b083      	sub	sp, #12
    uint8_t size = 0;
 80130f8:	2300      	movs	r3, #0
 80130fa:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80130fe:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8013100:	4ba5      	ldr	r3, [pc, #660]	; (8013398 <RadioIrqProcess+0x2a4>)
 8013102:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8013106:	2b20      	cmp	r3, #32
 8013108:	d829      	bhi.n	801315e <RadioIrqProcess+0x6a>
 801310a:	b21a      	sxth	r2, r3
 801310c:	2a00      	cmp	r2, #0
 801310e:	f000 8140 	beq.w	8013392 <RadioIrqProcess+0x29e>
 8013112:	3b01      	subs	r3, #1
 8013114:	2b1f      	cmp	r3, #31
 8013116:	f200 813c 	bhi.w	8013392 <RadioIrqProcess+0x29e>
 801311a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801311e:	0063      	.short	0x0063
 8013120:	013a007f 	.word	0x013a007f
 8013124:	013a00f7 	.word	0x013a00f7
 8013128:	013a013a 	.word	0x013a013a
 801312c:	013a0127 	.word	0x013a0127
 8013130:	013a013a 	.word	0x013a013a
 8013134:	013a013a 	.word	0x013a013a
 8013138:	013a013a 	.word	0x013a013a
 801313c:	013a0134 	.word	0x013a0134
 8013140:	013a013a 	.word	0x013a013a
 8013144:	013a013a 	.word	0x013a013a
 8013148:	013a013a 	.word	0x013a013a
 801314c:	013a013a 	.word	0x013a013a
 8013150:	013a013a 	.word	0x013a013a
 8013154:	013a013a 	.word	0x013a013a
 8013158:	013a013a 	.word	0x013a013a
 801315c:	0155      	.short	0x0155
 801315e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013162:	f000 80b3 	beq.w	80132cc <RadioIrqProcess+0x1d8>
 8013166:	d928      	bls.n	80131ba <RadioIrqProcess+0xc6>
 8013168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801316c:	f040 8111 	bne.w	8013392 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8013170:	4b8a      	ldr	r3, [pc, #552]	; (801339c <RadioIrqProcess+0x2a8>)
 8013172:	2201      	movs	r2, #1
 8013174:	2100      	movs	r1, #0
 8013176:	2002      	movs	r0, #2
 8013178:	f001 fcbe 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801317c:	f000 fd52 	bl	8013c24 <SUBGRF_GetOperatingMode>
 8013180:	2804      	cmp	r0, #4
 8013182:	f000 80b0 	beq.w	80132e6 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8013186:	f000 fd4d 	bl	8013c24 <SUBGRF_GetOperatingMode>
 801318a:	2805      	cmp	r0, #5
 801318c:	f040 8101 	bne.w	8013392 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8013190:	4b83      	ldr	r3, [pc, #524]	; (80133a0 <RadioIrqProcess+0x2ac>)
 8013192:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013196:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8013198:	4882      	ldr	r0, [pc, #520]	; (80133a4 <RadioIrqProcess+0x2b0>)
 801319a:	f001 fff5 	bl	8015188 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801319e:	2000      	movs	r0, #0
 80131a0:	f000 fe42 	bl	8013e28 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80131a4:	4b80      	ldr	r3, [pc, #512]	; (80133a8 <RadioIrqProcess+0x2b4>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	f000 80f2 	beq.w	8013392 <RadioIrqProcess+0x29e>
 80131ae:	68db      	ldr	r3, [r3, #12]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	f000 80ee 	beq.w	8013392 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 80131b6:	4798      	blx	r3
 80131b8:	e0eb      	b.n	8013392 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 80131ba:	2b40      	cmp	r3, #64	; 0x40
 80131bc:	f000 811d 	beq.w	80133fa <RadioIrqProcess+0x306>
 80131c0:	2b80      	cmp	r3, #128	; 0x80
 80131c2:	f040 80e6 	bne.w	8013392 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80131c6:	2000      	movs	r0, #0
 80131c8:	f000 fe2e 	bl	8013e28 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80131cc:	4b76      	ldr	r3, [pc, #472]	; (80133a8 <RadioIrqProcess+0x2b4>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	f000 80de 	beq.w	8013392 <RadioIrqProcess+0x29e>
 80131d6:	699b      	ldr	r3, [r3, #24]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	f000 80da 	beq.w	8013392 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 80131de:	2000      	movs	r0, #0
 80131e0:	4798      	blx	r3
 80131e2:	e0d6      	b.n	8013392 <RadioIrqProcess+0x29e>
 80131e4:	4b6e      	ldr	r3, [pc, #440]	; (80133a0 <RadioIrqProcess+0x2ac>)
 80131e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80131ea:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80131ec:	486f      	ldr	r0, [pc, #444]	; (80133ac <RadioIrqProcess+0x2b8>)
 80131ee:	f001 ffcb 	bl	8015188 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80131f2:	2000      	movs	r0, #0
 80131f4:	f000 fe18 	bl	8013e28 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80131f8:	f001 fb99 	bl	801492e <RFW_Is_LongPacketModeEnabled>
 80131fc:	2801      	cmp	r0, #1
 80131fe:	d00a      	beq.n	8013216 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8013200:	4b69      	ldr	r3, [pc, #420]	; (80133a8 <RadioIrqProcess+0x2b4>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	f000 80c4 	beq.w	8013392 <RadioIrqProcess+0x29e>
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	f000 80c0 	beq.w	8013392 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8013212:	4798      	blx	r3
 8013214:	e0bd      	b.n	8013392 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8013216:	f001 fb93 	bl	8014940 <RFW_DeInit_TxLongPacket>
 801321a:	e7f1      	b.n	8013200 <RadioIrqProcess+0x10c>
 801321c:	4b60      	ldr	r3, [pc, #384]	; (80133a0 <RadioIrqProcess+0x2ac>)
 801321e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013222:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8013224:	485f      	ldr	r0, [pc, #380]	; (80133a4 <RadioIrqProcess+0x2b0>)
 8013226:	f001 ffaf 	bl	8015188 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801322a:	4b5b      	ldr	r3, [pc, #364]	; (8013398 <RadioIrqProcess+0x2a4>)
 801322c:	785b      	ldrb	r3, [r3, #1]
 801322e:	b303      	cbz	r3, 8013272 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8013230:	22ff      	movs	r2, #255	; 0xff
 8013232:	f10d 0107 	add.w	r1, sp, #7
 8013236:	485e      	ldr	r0, [pc, #376]	; (80133b0 <RadioIrqProcess+0x2bc>)
 8013238:	f001 fa32 	bl	80146a0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801323c:	485d      	ldr	r0, [pc, #372]	; (80133b4 <RadioIrqProcess+0x2c0>)
 801323e:	f001 fa49 	bl	80146d4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8013242:	4b59      	ldr	r3, [pc, #356]	; (80133a8 <RadioIrqProcess+0x2b4>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	f000 80a3 	beq.w	8013392 <RadioIrqProcess+0x29e>
 801324c:	689c      	ldr	r4, [r3, #8]
 801324e:	2c00      	cmp	r4, #0
 8013250:	f000 809f 	beq.w	8013392 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8013254:	4b50      	ldr	r3, [pc, #320]	; (8013398 <RadioIrqProcess+0x2a4>)
 8013256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801325a:	2b01      	cmp	r3, #1
 801325c:	d11d      	bne.n	801329a <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801325e:	4a4e      	ldr	r2, [pc, #312]	; (8013398 <RadioIrqProcess+0x2a4>)
 8013260:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8013264:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8013268:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801326c:	4850      	ldr	r0, [pc, #320]	; (80133b0 <RadioIrqProcess+0x2bc>)
 801326e:	47a0      	blx	r4
                break;
 8013270:	e08f      	b.n	8013392 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8013272:	2000      	movs	r0, #0
 8013274:	f000 fdd8 	bl	8013e28 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8013278:	2100      	movs	r1, #0
 801327a:	f640 1002 	movw	r0, #2306	; 0x902
 801327e:	f000 fcdd 	bl	8013c3c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8013282:	f640 1044 	movw	r0, #2372	; 0x944
 8013286:	f000 fce9 	bl	8013c5c <SUBGRF_ReadRegister>
 801328a:	f040 0102 	orr.w	r1, r0, #2
 801328e:	b2c9      	uxtb	r1, r1
 8013290:	f640 1044 	movw	r0, #2372	; 0x944
 8013294:	f000 fcd2 	bl	8013c3c <SUBGRF_WriteRegister>
 8013298:	e7ca      	b.n	8013230 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801329a:	4c3f      	ldr	r4, [pc, #252]	; (8013398 <RadioIrqProcess+0x2a4>)
 801329c:	4669      	mov	r1, sp
 801329e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80132a0:	f001 faf8 	bl	8014894 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80132a4:	4b40      	ldr	r3, [pc, #256]	; (80133a8 <RadioIrqProcess+0x2b4>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	689d      	ldr	r5, [r3, #8]
 80132aa:	9b00      	ldr	r3, [sp, #0]
 80132ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80132b0:	4a41      	ldr	r2, [pc, #260]	; (80133b8 <RadioIrqProcess+0x2c4>)
 80132b2:	fb82 1203 	smull	r1, r2, r2, r3
 80132b6:	17db      	asrs	r3, r3, #31
 80132b8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80132bc:	b25b      	sxtb	r3, r3
 80132be:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 80132c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80132c6:	483a      	ldr	r0, [pc, #232]	; (80133b0 <RadioIrqProcess+0x2bc>)
 80132c8:	47a8      	blx	r5
                break;
 80132ca:	e062      	b.n	8013392 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80132cc:	2000      	movs	r0, #0
 80132ce:	f000 fdab 	bl	8013e28 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80132d2:	4b35      	ldr	r3, [pc, #212]	; (80133a8 <RadioIrqProcess+0x2b4>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d05b      	beq.n	8013392 <RadioIrqProcess+0x29e>
 80132da:	699b      	ldr	r3, [r3, #24]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d058      	beq.n	8013392 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 80132e0:	2001      	movs	r0, #1
 80132e2:	4798      	blx	r3
 80132e4:	e055      	b.n	8013392 <RadioIrqProcess+0x29e>
 80132e6:	4b2e      	ldr	r3, [pc, #184]	; (80133a0 <RadioIrqProcess+0x2ac>)
 80132e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80132ec:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80132ee:	482f      	ldr	r0, [pc, #188]	; (80133ac <RadioIrqProcess+0x2b8>)
 80132f0:	f001 ff4a 	bl	8015188 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80132f4:	2000      	movs	r0, #0
 80132f6:	f000 fd97 	bl	8013e28 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80132fa:	4b2b      	ldr	r3, [pc, #172]	; (80133a8 <RadioIrqProcess+0x2b4>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d047      	beq.n	8013392 <RadioIrqProcess+0x29e>
 8013302:	685b      	ldr	r3, [r3, #4]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d044      	beq.n	8013392 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8013308:	4798      	blx	r3
 801330a:	e042      	b.n	8013392 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801330c:	4b2b      	ldr	r3, [pc, #172]	; (80133bc <RadioIrqProcess+0x2c8>)
 801330e:	2201      	movs	r2, #1
 8013310:	2100      	movs	r1, #0
 8013312:	2002      	movs	r0, #2
 8013314:	f001 fbf0 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8013318:	4b1f      	ldr	r3, [pc, #124]	; (8013398 <RadioIrqProcess+0x2a4>)
 801331a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801331c:	b3c9      	cbz	r1, 8013392 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801331e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8013322:	f640 1003 	movw	r0, #2307	; 0x903
 8013326:	f7ff fe4f 	bl	8012fc8 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801332a:	4c1b      	ldr	r4, [pc, #108]	; (8013398 <RadioIrqProcess+0x2a4>)
 801332c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8013330:	f640 1004 	movw	r0, #2308	; 0x904
 8013334:	f7ff fe48 	bl	8012fc8 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8013338:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 801333c:	f640 1005 	movw	r0, #2309	; 0x905
 8013340:	f7ff fe42 	bl	8012fc8 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8013344:	f640 1002 	movw	r0, #2306	; 0x902
 8013348:	f7ff febf 	bl	80130ca <RadioRead>
 801334c:	f040 0101 	orr.w	r1, r0, #1
 8013350:	b2c9      	uxtb	r1, r1
 8013352:	f640 1002 	movw	r0, #2306	; 0x902
 8013356:	f7ff fe37 	bl	8012fc8 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801335a:	2200      	movs	r2, #0
 801335c:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801335e:	4613      	mov	r3, r2
 8013360:	f240 2162 	movw	r1, #610	; 0x262
 8013364:	4608      	mov	r0, r1
 8013366:	f000 ff0c 	bl	8014182 <SUBGRF_SetDioIrqParams>
 801336a:	e012      	b.n	8013392 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801336c:	4b14      	ldr	r3, [pc, #80]	; (80133c0 <RadioIrqProcess+0x2cc>)
 801336e:	2201      	movs	r2, #1
 8013370:	2100      	movs	r1, #0
 8013372:	2002      	movs	r0, #2
 8013374:	f001 fbc0 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8013378:	f001 fad7 	bl	801492a <RFW_Is_Init>
 801337c:	2801      	cmp	r0, #1
 801337e:	d108      	bne.n	8013392 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8013380:	f001 fadf 	bl	8014942 <RFW_ReceivePayload>
 8013384:	e005      	b.n	8013392 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8013386:	4b0f      	ldr	r3, [pc, #60]	; (80133c4 <RadioIrqProcess+0x2d0>)
 8013388:	2201      	movs	r2, #1
 801338a:	2100      	movs	r1, #0
 801338c:	2002      	movs	r0, #2
 801338e:	f001 fbb3 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
}
 8013392:	b003      	add	sp, #12
 8013394:	bd30      	pop	{r4, r5, pc}
 8013396:	bf00      	nop
 8013398:	2000163c 	.word	0x2000163c
 801339c:	0801ae98 	.word	0x0801ae98
 80133a0:	48000400 	.word	0x48000400
 80133a4:	20001624 	.word	0x20001624
 80133a8:	20001620 	.word	0x20001620
 80133ac:	20001698 	.word	0x20001698
 80133b0:	20001520 	.word	0x20001520
 80133b4:	20001660 	.word	0x20001660
 80133b8:	10624dd3 	.word	0x10624dd3
 80133bc:	0801aeac 	.word	0x0801aeac
 80133c0:	0801aeb8 	.word	0x0801aeb8
 80133c4:	0801aec4 	.word	0x0801aec4
        TimerStop( &RxTimeoutTimer );
 80133c8:	4817      	ldr	r0, [pc, #92]	; (8013428 <RadioIrqProcess+0x334>)
 80133ca:	f001 fedd 	bl	8015188 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80133ce:	4b17      	ldr	r3, [pc, #92]	; (801342c <RadioIrqProcess+0x338>)
 80133d0:	785b      	ldrb	r3, [r3, #1]
 80133d2:	b173      	cbz	r3, 80133f2 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80133d4:	4b16      	ldr	r3, [pc, #88]	; (8013430 <RadioIrqProcess+0x33c>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d0da      	beq.n	8013392 <RadioIrqProcess+0x29e>
 80133dc:	68db      	ldr	r3, [r3, #12]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d0d7      	beq.n	8013392 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 80133e2:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80133e4:	4b13      	ldr	r3, [pc, #76]	; (8013434 <RadioIrqProcess+0x340>)
 80133e6:	2201      	movs	r2, #1
 80133e8:	2100      	movs	r1, #0
 80133ea:	2002      	movs	r0, #2
 80133ec:	f001 fb84 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
 80133f0:	e7cf      	b.n	8013392 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80133f2:	2000      	movs	r0, #0
 80133f4:	f000 fd18 	bl	8013e28 <SUBGRF_SetStandby>
 80133f8:	e7ec      	b.n	80133d4 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80133fa:	4b0f      	ldr	r3, [pc, #60]	; (8013438 <RadioIrqProcess+0x344>)
 80133fc:	2201      	movs	r2, #1
 80133fe:	2100      	movs	r1, #0
 8013400:	2002      	movs	r0, #2
 8013402:	f001 fb79 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8013406:	4b09      	ldr	r3, [pc, #36]	; (801342c <RadioIrqProcess+0x338>)
 8013408:	785b      	ldrb	r3, [r3, #1]
 801340a:	b143      	cbz	r3, 801341e <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801340c:	4b08      	ldr	r3, [pc, #32]	; (8013430 <RadioIrqProcess+0x33c>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d0be      	beq.n	8013392 <RadioIrqProcess+0x29e>
 8013414:	691b      	ldr	r3, [r3, #16]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d0bb      	beq.n	8013392 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 801341a:	4798      	blx	r3
}
 801341c:	e7b9      	b.n	8013392 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801341e:	2000      	movs	r0, #0
 8013420:	f000 fd02 	bl	8013e28 <SUBGRF_SetStandby>
 8013424:	e7f2      	b.n	801340c <RadioIrqProcess+0x318>
 8013426:	bf00      	nop
 8013428:	20001624 	.word	0x20001624
 801342c:	2000163c 	.word	0x2000163c
 8013430:	20001620 	.word	0x20001620
 8013434:	0801aed0 	.word	0x0801aed0
 8013438:	0801aedc 	.word	0x0801aedc

0801343c <RadioOnDioIrq>:
{
 801343c:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 801343e:	4b03      	ldr	r3, [pc, #12]	; (801344c <RadioOnDioIrq+0x10>)
 8013440:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8013444:	f7ff fe56 	bl	80130f4 <RadioIrqProcess>
}
 8013448:	bd08      	pop	{r3, pc}
 801344a:	bf00      	nop
 801344c:	2000163c 	.word	0x2000163c

08013450 <RadioGetWakeupTime>:
{
 8013450:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8013452:	f001 f9a6 	bl	80147a2 <SUBGRF_GetRadioWakeUpTime>
}
 8013456:	3003      	adds	r0, #3
 8013458:	bd08      	pop	{r3, pc}
	...

0801345c <RadioSetMaxPayloadLength>:
{
 801345c:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 801345e:	2801      	cmp	r0, #1
 8013460:	d004      	beq.n	801346c <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8013462:	4b0a      	ldr	r3, [pc, #40]	; (801348c <RadioSetMaxPayloadLength+0x30>)
 8013464:	7d5b      	ldrb	r3, [r3, #21]
 8013466:	2b01      	cmp	r3, #1
 8013468:	d008      	beq.n	801347c <RadioSetMaxPayloadLength+0x20>
}
 801346a:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801346c:	4b08      	ldr	r3, [pc, #32]	; (8013490 <RadioSetMaxPayloadLength+0x34>)
 801346e:	7019      	strb	r1, [r3, #0]
 8013470:	4806      	ldr	r0, [pc, #24]	; (801348c <RadioSetMaxPayloadLength+0x30>)
 8013472:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013474:	300e      	adds	r0, #14
 8013476:	f001 f853 	bl	8014520 <SUBGRF_SetPacketParams>
 801347a:	e7f6      	b.n	801346a <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801347c:	4b04      	ldr	r3, [pc, #16]	; (8013490 <RadioSetMaxPayloadLength+0x34>)
 801347e:	7019      	strb	r1, [r3, #0]
 8013480:	4802      	ldr	r0, [pc, #8]	; (801348c <RadioSetMaxPayloadLength+0x30>)
 8013482:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013484:	300e      	adds	r0, #14
 8013486:	f001 f84b 	bl	8014520 <SUBGRF_SetPacketParams>
}
 801348a:	e7ee      	b.n	801346a <RadioSetMaxPayloadLength+0xe>
 801348c:	2000163c 	.word	0x2000163c
 8013490:	20000210 	.word	0x20000210

08013494 <RadioReadRegisters>:
{
 8013494:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8013496:	f000 fc5f 	bl	8013d58 <SUBGRF_ReadRegisters>
}
 801349a:	bd08      	pop	{r3, pc}

0801349c <RadioWriteRegisters>:
{
 801349c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 801349e:	f000 fc19 	bl	8013cd4 <SUBGRF_WriteRegisters>
}
 80134a2:	bd08      	pop	{r3, pc}

080134a4 <RadioRssi>:
{
 80134a4:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80134a6:	f001 f8cb 	bl	8014640 <SUBGRF_GetRssiInst>
}
 80134aa:	b200      	sxth	r0, r0
 80134ac:	bd08      	pop	{r3, pc}
	...

080134b0 <RadioSetTxContinuousWave>:
{
 80134b0:	b538      	push	{r3, r4, r5, lr}
 80134b2:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80134b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80134b8:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 80134bc:	f000 fed4 	bl	8014268 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80134c0:	4628      	mov	r0, r5
 80134c2:	f001 f957 	bl	8014774 <SUBGRF_SetRfTxPower>
 80134c6:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80134c8:	210e      	movs	r1, #14
 80134ca:	f640 101f 	movw	r0, #2335	; 0x91f
 80134ce:	f000 fbb5 	bl	8013c3c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80134d2:	2101      	movs	r1, #1
 80134d4:	4628      	mov	r0, r5
 80134d6:	f001 f939 	bl	801474c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80134da:	f000 fd7f 	bl	8013fdc <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80134de:	4d04      	ldr	r5, [pc, #16]	; (80134f0 <RadioSetTxContinuousWave+0x40>)
 80134e0:	4621      	mov	r1, r4
 80134e2:	4628      	mov	r0, r5
 80134e4:	f001 fef0 	bl	80152c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80134e8:	4628      	mov	r0, r5
 80134ea:	f001 fea7 	bl	801523c <UTIL_TIMER_Start>
}
 80134ee:	bd38      	pop	{r3, r4, r5, pc}
 80134f0:	20001698 	.word	0x20001698

080134f4 <RadioSetChannel>:
{
 80134f4:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 80134f6:	f000 feb7 	bl	8014268 <SUBGRF_SetRfFrequency>
}
 80134fa:	bd08      	pop	{r3, pc}

080134fc <RadioStartCad>:
{
 80134fc:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80134fe:	2100      	movs	r1, #0
 8013500:	4b07      	ldr	r3, [pc, #28]	; (8013520 <RadioStartCad+0x24>)
 8013502:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8013506:	f001 f921 	bl	801474c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801350a:	2300      	movs	r3, #0
 801350c:	461a      	mov	r2, r3
 801350e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8013512:	4608      	mov	r0, r1
 8013514:	f000 fe35 	bl	8014182 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8013518:	f000 fd54 	bl	8013fc4 <SUBGRF_SetCad>
}
 801351c:	bd08      	pop	{r3, pc}
 801351e:	bf00      	nop
 8013520:	2000163c 	.word	0x2000163c

08013524 <RadioRx>:
{
 8013524:	b538      	push	{r3, r4, r5, lr}
 8013526:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8013528:	f001 f9ff 	bl	801492a <RFW_Is_Init>
 801352c:	2801      	cmp	r0, #1
 801352e:	d019      	beq.n	8013564 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013530:	2300      	movs	r3, #0
 8013532:	461a      	mov	r2, r3
 8013534:	f240 2162 	movw	r1, #610	; 0x262
 8013538:	4608      	mov	r0, r1
 801353a:	f000 fe22 	bl	8014182 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801353e:	b9a4      	cbnz	r4, 801356a <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013540:	4c11      	ldr	r4, [pc, #68]	; (8013588 <RadioRx+0x64>)
 8013542:	2100      	movs	r1, #0
 8013544:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8013546:	4b11      	ldr	r3, [pc, #68]	; (801358c <RadioRx+0x68>)
 8013548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801354c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801354e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8013552:	f001 f8fb 	bl	801474c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8013556:	7863      	ldrb	r3, [r4, #1]
 8013558:	b183      	cbz	r3, 801357c <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801355a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801355e:	f000 fc9f 	bl	8013ea0 <SUBGRF_SetRx>
}
 8013562:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8013564:	f001 f9e9 	bl	801493a <RFW_ReceiveInit>
 8013568:	e7e9      	b.n	801353e <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801356a:	4d09      	ldr	r5, [pc, #36]	; (8013590 <RadioRx+0x6c>)
 801356c:	4621      	mov	r1, r4
 801356e:	4628      	mov	r0, r5
 8013570:	f001 feaa 	bl	80152c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8013574:	4628      	mov	r0, r5
 8013576:	f001 fe61 	bl	801523c <UTIL_TIMER_Start>
 801357a:	e7e1      	b.n	8013540 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801357c:	4b02      	ldr	r3, [pc, #8]	; (8013588 <RadioRx+0x64>)
 801357e:	6898      	ldr	r0, [r3, #8]
 8013580:	0180      	lsls	r0, r0, #6
 8013582:	f000 fc8d 	bl	8013ea0 <SUBGRF_SetRx>
}
 8013586:	e7ec      	b.n	8013562 <RadioRx+0x3e>
 8013588:	2000163c 	.word	0x2000163c
 801358c:	48000400 	.word	0x48000400
 8013590:	20001624 	.word	0x20001624

08013594 <RadioSleep>:
{
 8013594:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8013596:	f04f 0004 	mov.w	r0, #4
 801359a:	f000 fc25 	bl	8013de8 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 801359e:	2002      	movs	r0, #2
 80135a0:	f7ef f814 	bl	80025cc <HAL_Delay>
}
 80135a4:	bd08      	pop	{r3, pc}
	...

080135a8 <RadioSend>:
{
 80135a8:	b570      	push	{r4, r5, r6, lr}
 80135aa:	b082      	sub	sp, #8
 80135ac:	4605      	mov	r5, r0
 80135ae:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80135b0:	2300      	movs	r3, #0
 80135b2:	461a      	mov	r2, r3
 80135b4:	f240 2101 	movw	r1, #513	; 0x201
 80135b8:	4608      	mov	r0, r1
 80135ba:	f000 fde2 	bl	8014182 <SUBGRF_SetDioIrqParams>
 80135be:	4b3f      	ldr	r3, [pc, #252]	; (80136bc <RadioSend+0x114>)
 80135c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80135c4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80135c6:	4e3e      	ldr	r6, [pc, #248]	; (80136c0 <RadioSend+0x118>)
 80135c8:	2101      	movs	r1, #1
 80135ca:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80135ce:	f001 f8bd 	bl	801474c <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80135d2:	7833      	ldrb	r3, [r6, #0]
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	d103      	bne.n	80135e0 <RadioSend+0x38>
 80135d8:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 80135dc:	2b06      	cmp	r3, #6
 80135de:	d012      	beq.n	8013606 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80135e0:	f640 0089 	movw	r0, #2185	; 0x889
 80135e4:	f000 fb3a 	bl	8013c5c <SUBGRF_ReadRegister>
 80135e8:	f040 0104 	orr.w	r1, r0, #4
 80135ec:	b2c9      	uxtb	r1, r1
 80135ee:	f640 0089 	movw	r0, #2185	; 0x889
 80135f2:	f000 fb23 	bl	8013c3c <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 80135f6:	4b32      	ldr	r3, [pc, #200]	; (80136c0 <RadioSend+0x118>)
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	2b03      	cmp	r3, #3
 80135fc:	d818      	bhi.n	8013630 <RadioSend+0x88>
 80135fe:	e8df f003 	tbb	[pc, r3]
 8013602:	0d23      	.short	0x0d23
 8013604:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8013606:	f640 0089 	movw	r0, #2185	; 0x889
 801360a:	f000 fb27 	bl	8013c5c <SUBGRF_ReadRegister>
 801360e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8013612:	f640 0089 	movw	r0, #2185	; 0x889
 8013616:	f000 fb11 	bl	8013c3c <SUBGRF_WriteRegister>
 801361a:	e7ec      	b.n	80135f6 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801361c:	4828      	ldr	r0, [pc, #160]	; (80136c0 <RadioSend+0x118>)
 801361e:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013620:	300e      	adds	r0, #14
 8013622:	f000 ff7d 	bl	8014520 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8013626:	2200      	movs	r2, #0
 8013628:	4621      	mov	r1, r4
 801362a:	4628      	mov	r0, r5
 801362c:	f000 fc30 	bl	8013e90 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8013630:	4c24      	ldr	r4, [pc, #144]	; (80136c4 <RadioSend+0x11c>)
 8013632:	4b23      	ldr	r3, [pc, #140]	; (80136c0 <RadioSend+0x118>)
 8013634:	6859      	ldr	r1, [r3, #4]
 8013636:	4620      	mov	r0, r4
 8013638:	f001 fe46 	bl	80152c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801363c:	4620      	mov	r0, r4
 801363e:	f001 fdfd 	bl	801523c <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8013642:	2000      	movs	r0, #0
}
 8013644:	b002      	add	sp, #8
 8013646:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8013648:	f001 f96f 	bl	801492a <RFW_Is_Init>
 801364c:	2801      	cmp	r0, #1
 801364e:	d00a      	beq.n	8013666 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8013650:	481b      	ldr	r0, [pc, #108]	; (80136c0 <RadioSend+0x118>)
 8013652:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013654:	300e      	adds	r0, #14
 8013656:	f000 ff63 	bl	8014520 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801365a:	2200      	movs	r2, #0
 801365c:	4621      	mov	r1, r4
 801365e:	4628      	mov	r0, r5
 8013660:	f000 fc16 	bl	8013e90 <SUBGRF_SendPayload>
 8013664:	e7e4      	b.n	8013630 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8013666:	f10d 0207 	add.w	r2, sp, #7
 801366a:	4621      	mov	r1, r4
 801366c:	4628      	mov	r0, r5
 801366e:	f001 f961 	bl	8014934 <RFW_TransmitInit>
 8013672:	b968      	cbnz	r0, 8013690 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8013674:	4812      	ldr	r0, [pc, #72]	; (80136c0 <RadioSend+0x118>)
 8013676:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801367a:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801367c:	300e      	adds	r0, #14
 801367e:	f000 ff4f 	bl	8014520 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8013682:	2200      	movs	r2, #0
 8013684:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013688:	4628      	mov	r0, r5
 801368a:	f000 fc01 	bl	8013e90 <SUBGRF_SendPayload>
 801368e:	e7cf      	b.n	8013630 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8013690:	4b0d      	ldr	r3, [pc, #52]	; (80136c8 <RadioSend+0x120>)
 8013692:	2201      	movs	r2, #1
 8013694:	2100      	movs	r1, #0
 8013696:	2002      	movs	r0, #2
 8013698:	f001 fa2e 	bl	8014af8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801369c:	2003      	movs	r0, #3
 801369e:	e7d1      	b.n	8013644 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80136a0:	4807      	ldr	r0, [pc, #28]	; (80136c0 <RadioSend+0x118>)
 80136a2:	2302      	movs	r3, #2
 80136a4:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80136a6:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80136a8:	300e      	adds	r0, #14
 80136aa:	f000 ff39 	bl	8014520 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80136ae:	2200      	movs	r2, #0
 80136b0:	4621      	mov	r1, r4
 80136b2:	4628      	mov	r0, r5
 80136b4:	f000 fbec 	bl	8013e90 <SUBGRF_SendPayload>
            break;
 80136b8:	e7ba      	b.n	8013630 <RadioSend+0x88>
 80136ba:	bf00      	nop
 80136bc:	48000400 	.word	0x48000400
 80136c0:	2000163c 	.word	0x2000163c
 80136c4:	20001698 	.word	0x20001698
 80136c8:	0801aeec 	.word	0x0801aeec

080136cc <RadioRandom>:
{
 80136cc:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80136ce:	2300      	movs	r3, #0
 80136d0:	461a      	mov	r2, r3
 80136d2:	4619      	mov	r1, r3
 80136d4:	4618      	mov	r0, r3
 80136d6:	f000 fd54 	bl	8014182 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 80136da:	f000 fbfb 	bl	8013ed4 <SUBGRF_GetRandom>
}
 80136de:	bd08      	pop	{r3, pc}

080136e0 <RadioSetModem>:
{
 80136e0:	b510      	push	{r4, lr}
 80136e2:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 80136e4:	4b14      	ldr	r3, [pc, #80]	; (8013738 <RadioSetModem+0x58>)
 80136e6:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 80136e8:	f001 f92c 	bl	8014944 <RFW_SetRadioModem>
    switch( modem )
 80136ec:	2c01      	cmp	r4, #1
 80136ee:	d010      	beq.n	8013712 <RadioSetModem+0x32>
 80136f0:	2c03      	cmp	r4, #3
 80136f2:	d01a      	beq.n	801372a <RadioSetModem+0x4a>
 80136f4:	b134      	cbz	r4, 8013704 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80136f6:	2003      	movs	r0, #3
 80136f8:	f000 fde2 	bl	80142c0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80136fc:	4b0e      	ldr	r3, [pc, #56]	; (8013738 <RadioSetModem+0x58>)
 80136fe:	2200      	movs	r2, #0
 8013700:	735a      	strb	r2, [r3, #13]
}
 8013702:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8013704:	2000      	movs	r0, #0
 8013706:	f000 fddb 	bl	80142c0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801370a:	4b0b      	ldr	r3, [pc, #44]	; (8013738 <RadioSetModem+0x58>)
 801370c:	2200      	movs	r2, #0
 801370e:	735a      	strb	r2, [r3, #13]
        break;
 8013710:	e7f7      	b.n	8013702 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8013712:	2001      	movs	r0, #1
 8013714:	f000 fdd4 	bl	80142c0 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8013718:	4b07      	ldr	r3, [pc, #28]	; (8013738 <RadioSetModem+0x58>)
 801371a:	7b5a      	ldrb	r2, [r3, #13]
 801371c:	7b18      	ldrb	r0, [r3, #12]
 801371e:	4282      	cmp	r2, r0
 8013720:	d0ef      	beq.n	8013702 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8013722:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8013724:	f000 f80a 	bl	801373c <RadioSetPublicNetwork>
 8013728:	e7eb      	b.n	8013702 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801372a:	2002      	movs	r0, #2
 801372c:	f000 fdc8 	bl	80142c0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8013730:	4b01      	ldr	r3, [pc, #4]	; (8013738 <RadioSetModem+0x58>)
 8013732:	2200      	movs	r2, #0
 8013734:	735a      	strb	r2, [r3, #13]
}
 8013736:	e7e4      	b.n	8013702 <RadioSetModem+0x22>
 8013738:	2000163c 	.word	0x2000163c

0801373c <RadioSetPublicNetwork>:
{
 801373c:	b510      	push	{r4, lr}
 801373e:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8013740:	4b0e      	ldr	r3, [pc, #56]	; (801377c <RadioSetPublicNetwork+0x40>)
 8013742:	7318      	strb	r0, [r3, #12]
 8013744:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8013746:	2001      	movs	r0, #1
 8013748:	f7ff ffca 	bl	80136e0 <RadioSetModem>
    if( enable == true )
 801374c:	b154      	cbz	r4, 8013764 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801374e:	2134      	movs	r1, #52	; 0x34
 8013750:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8013754:	f000 fa72 	bl	8013c3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8013758:	2144      	movs	r1, #68	; 0x44
 801375a:	f240 7041 	movw	r0, #1857	; 0x741
 801375e:	f000 fa6d 	bl	8013c3c <SUBGRF_WriteRegister>
}
 8013762:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8013764:	2114      	movs	r1, #20
 8013766:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801376a:	f000 fa67 	bl	8013c3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801376e:	2124      	movs	r1, #36	; 0x24
 8013770:	f240 7041 	movw	r0, #1857	; 0x741
 8013774:	f000 fa62 	bl	8013c3c <SUBGRF_WriteRegister>
}
 8013778:	e7f3      	b.n	8013762 <RadioSetPublicNetwork+0x26>
 801377a:	bf00      	nop
 801377c:	2000163c 	.word	0x2000163c

08013780 <RadioSetTxConfig>:
{
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	b083      	sub	sp, #12
 8013786:	4604      	mov	r4, r0
 8013788:	460e      	mov	r6, r1
 801378a:	4617      	mov	r7, r2
 801378c:	461d      	mov	r5, r3
 801378e:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8013792:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8013796:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 801379a:	f001 f8c5 	bl	8014928 <RFW_DeInit>
    switch( modem )
 801379e:	b1ac      	cbz	r4, 80137cc <RadioSetTxConfig+0x4c>
 80137a0:	2c01      	cmp	r4, #1
 80137a2:	d05a      	beq.n	801385a <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80137a4:	4630      	mov	r0, r6
 80137a6:	f000 ffe5 	bl	8014774 <SUBGRF_SetRfTxPower>
 80137aa:	4c55      	ldr	r4, [pc, #340]	; (8013900 <RadioSetTxConfig+0x180>)
 80137ac:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80137b0:	210e      	movs	r1, #14
 80137b2:	f640 101f 	movw	r0, #2335	; 0x91f
 80137b6:	f000 fa41 	bl	8013c3c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80137ba:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80137be:	f001 f8b8 	bl	8014932 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80137c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80137c4:	6063      	str	r3, [r4, #4]
}
 80137c6:	b003      	add	sp, #12
 80137c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80137cc:	4c4c      	ldr	r4, [pc, #304]	; (8013900 <RadioSetTxConfig+0x180>)
 80137ce:	f04f 0b00 	mov.w	fp, #0
 80137d2:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80137d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137d8:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80137da:	230b      	movs	r3, #11
 80137dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80137e0:	4628      	mov	r0, r5
 80137e2:	f001 f83f 	bl	8014864 <SUBGRF_GetFskBandwidthRegValue>
 80137e6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80137ea:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80137ec:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80137f0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80137f4:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80137f8:	2304      	movs	r3, #4
 80137fa:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80137fc:	2318      	movs	r3, #24
 80137fe:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8013800:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8013804:	f089 0901 	eor.w	r9, r9, #1
 8013808:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 801380c:	f1ba 0f00 	cmp.w	sl, #0
 8013810:	d01f      	beq.n	8013852 <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8013812:	22f2      	movs	r2, #242	; 0xf2
 8013814:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8013816:	4c3a      	ldr	r4, [pc, #232]	; (8013900 <RadioSetTxConfig+0x180>)
 8013818:	2301      	movs	r3, #1
 801381a:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 801381c:	f7ff fc50 	bl	80130c0 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8013820:	2000      	movs	r0, #0
 8013822:	f7ff ff5d 	bl	80136e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013826:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801382a:	f000 fdf1 	bl	8014410 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801382e:	f104 000e 	add.w	r0, r4, #14
 8013832:	f000 fe75 	bl	8014520 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8013836:	4a33      	ldr	r2, [pc, #204]	; (8013904 <RadioSetTxConfig+0x184>)
 8013838:	466b      	mov	r3, sp
 801383a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801383e:	e883 0003 	stmia.w	r3, {r0, r1}
 8013842:	4618      	mov	r0, r3
 8013844:	f000 fa56 	bl	8013cf4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8013848:	f240 10ff 	movw	r0, #511	; 0x1ff
 801384c:	f000 fa29 	bl	8013ca2 <SUBGRF_SetWhiteningSeed>
            break;
 8013850:	e7a8      	b.n	80137a4 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8013852:	4b2b      	ldr	r3, [pc, #172]	; (8013900 <RadioSetTxConfig+0x180>)
 8013854:	2201      	movs	r2, #1
 8013856:	75da      	strb	r2, [r3, #23]
 8013858:	e7dd      	b.n	8013816 <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801385a:	4a29      	ldr	r2, [pc, #164]	; (8013900 <RadioSetTxConfig+0x180>)
 801385c:	2301      	movs	r3, #1
 801385e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8013862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013864:	b2db      	uxtb	r3, r3
 8013866:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801386a:	4927      	ldr	r1, [pc, #156]	; (8013908 <RadioSetTxConfig+0x188>)
 801386c:	5d49      	ldrb	r1, [r1, r5]
 801386e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8013872:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8013876:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801387a:	b91d      	cbnz	r5, 8013884 <RadioSetTxConfig+0x104>
 801387c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801387e:	3a0b      	subs	r2, #11
 8013880:	2a01      	cmp	r2, #1
 8013882:	d92c      	bls.n	80138de <RadioSetTxConfig+0x15e>
 8013884:	2d01      	cmp	r5, #1
 8013886:	d027      	beq.n	80138d8 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8013888:	4a1d      	ldr	r2, [pc, #116]	; (8013900 <RadioSetTxConfig+0x180>)
 801388a:	2100      	movs	r1, #0
 801388c:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8013890:	4a1b      	ldr	r2, [pc, #108]	; (8013900 <RadioSetTxConfig+0x180>)
 8013892:	2101      	movs	r1, #1
 8013894:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8013896:	3b05      	subs	r3, #5
 8013898:	b2db      	uxtb	r3, r3
 801389a:	428b      	cmp	r3, r1
 801389c:	d924      	bls.n	80138e8 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801389e:	4b18      	ldr	r3, [pc, #96]	; (8013900 <RadioSetTxConfig+0x180>)
 80138a0:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80138a4:	4c16      	ldr	r4, [pc, #88]	; (8013900 <RadioSetTxConfig+0x180>)
 80138a6:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80138aa:	4b18      	ldr	r3, [pc, #96]	; (801390c <RadioSetTxConfig+0x18c>)
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80138b0:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80138b4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80138b8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80138bc:	f7ff fc00 	bl	80130c0 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80138c0:	2001      	movs	r0, #1
 80138c2:	f7ff ff0d 	bl	80136e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80138c6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80138ca:	f000 fda1 	bl	8014410 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80138ce:	f104 000e 	add.w	r0, r4, #14
 80138d2:	f000 fe25 	bl	8014520 <SUBGRF_SetPacketParams>
            break;
 80138d6:	e765      	b.n	80137a4 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80138d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138da:	2a0c      	cmp	r2, #12
 80138dc:	d1d4      	bne.n	8013888 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80138de:	4a08      	ldr	r2, [pc, #32]	; (8013900 <RadioSetTxConfig+0x180>)
 80138e0:	2101      	movs	r1, #1
 80138e2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80138e6:	e7d3      	b.n	8013890 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 80138e8:	f1b8 0f0b 	cmp.w	r8, #11
 80138ec:	d803      	bhi.n	80138f6 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80138ee:	4613      	mov	r3, r2
 80138f0:	220c      	movs	r2, #12
 80138f2:	839a      	strh	r2, [r3, #28]
 80138f4:	e7d6      	b.n	80138a4 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80138f6:	4b02      	ldr	r3, [pc, #8]	; (8013900 <RadioSetTxConfig+0x180>)
 80138f8:	f8a3 801c 	strh.w	r8, [r3, #28]
 80138fc:	e7d2      	b.n	80138a4 <RadioSetTxConfig+0x124>
 80138fe:	bf00      	nop
 8013900:	2000163c 	.word	0x2000163c
 8013904:	08019fc4 	.word	0x08019fc4
 8013908:	0801af04 	.word	0x0801af04
 801390c:	20000210 	.word	0x20000210

08013910 <RadioSetRxConfig>:
{
 8013910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013914:	b085      	sub	sp, #20
 8013916:	4604      	mov	r4, r0
 8013918:	460d      	mov	r5, r1
 801391a:	4616      	mov	r6, r2
 801391c:	9301      	str	r3, [sp, #4]
 801391e:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8013922:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8013926:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801392a:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 801392e:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8013932:	4b73      	ldr	r3, [pc, #460]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013934:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8013938:	f000 fff6 	bl	8014928 <RFW_DeInit>
    if( rxContinuous == true )
 801393c:	f1b8 0f00 	cmp.w	r8, #0
 8013940:	d001      	beq.n	8013946 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8013942:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8013946:	b14f      	cbz	r7, 801395c <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8013948:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801394c:	4b6d      	ldr	r3, [pc, #436]	; (8013b04 <RadioSetRxConfig+0x1f4>)
 801394e:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8013950:	b144      	cbz	r4, 8013964 <RadioSetRxConfig+0x54>
 8013952:	2c01      	cmp	r4, #1
 8013954:	d057      	beq.n	8013a06 <RadioSetRxConfig+0xf6>
}
 8013956:	b005      	add	sp, #20
 8013958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 801395c:	4b69      	ldr	r3, [pc, #420]	; (8013b04 <RadioSetRxConfig+0x1f4>)
 801395e:	22ff      	movs	r2, #255	; 0xff
 8013960:	701a      	strb	r2, [r3, #0]
 8013962:	e7f5      	b.n	8013950 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8013964:	2000      	movs	r0, #0
 8013966:	f000 fb47 	bl	8013ff8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801396a:	4c65      	ldr	r4, [pc, #404]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 801396c:	f04f 0800 	mov.w	r8, #0
 8013970:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8013974:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8013976:	230b      	movs	r3, #11
 8013978:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801397c:	4628      	mov	r0, r5
 801397e:	f000 ff71 	bl	8014864 <SUBGRF_GetFskBandwidthRegValue>
 8013982:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8013986:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801398a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801398e:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8013992:	2304      	movs	r3, #4
 8013994:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8013996:	2318      	movs	r3, #24
 8013998:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801399a:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801399e:	f087 0701 	eor.w	r7, r7, #1
 80139a2:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80139a4:	4b57      	ldr	r3, [pc, #348]	; (8013b04 <RadioSetRxConfig+0x1f4>)
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80139aa:	f1bb 0f00 	cmp.w	fp, #0
 80139ae:	d026      	beq.n	80139fe <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80139b0:	22f2      	movs	r2, #242	; 0xf2
 80139b2:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80139b4:	4c52      	ldr	r4, [pc, #328]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 80139b6:	2301      	movs	r3, #1
 80139b8:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80139ba:	f7ff fb81 	bl	80130c0 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80139be:	2000      	movs	r0, #0
 80139c0:	f7ff fe8e 	bl	80136e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80139c4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80139c8:	f000 fd22 	bl	8014410 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80139cc:	f104 000e 	add.w	r0, r4, #14
 80139d0:	f000 fda6 	bl	8014520 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80139d4:	4a4c      	ldr	r2, [pc, #304]	; (8013b08 <RadioSetRxConfig+0x1f8>)
 80139d6:	ab02      	add	r3, sp, #8
 80139d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80139e0:	4618      	mov	r0, r3
 80139e2:	f000 f987 	bl	8013cf4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80139e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80139ea:	f000 f95a 	bl	8013ca2 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80139ee:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80139f2:	fb03 f30a 	mul.w	r3, r3, sl
 80139f6:	fbb3 f3f6 	udiv	r3, r3, r6
 80139fa:	60a3      	str	r3, [r4, #8]
            break;
 80139fc:	e7ab      	b.n	8013956 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80139fe:	4b40      	ldr	r3, [pc, #256]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013a00:	2201      	movs	r2, #1
 8013a02:	75da      	strb	r2, [r3, #23]
 8013a04:	e7d6      	b.n	80139b4 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8013a06:	2000      	movs	r0, #0
 8013a08:	f000 faf6 	bl	8013ff8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8013a0c:	4a3c      	ldr	r2, [pc, #240]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013a0e:	2301      	movs	r3, #1
 8013a10:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8013a14:	b2f3      	uxtb	r3, r6
 8013a16:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8013a1a:	493c      	ldr	r1, [pc, #240]	; (8013b0c <RadioSetRxConfig+0x1fc>)
 8013a1c:	5d49      	ldrb	r1, [r1, r5]
 8013a1e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8013a22:	9901      	ldr	r1, [sp, #4]
 8013a24:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013a28:	b91d      	cbnz	r5, 8013a32 <RadioSetRxConfig+0x122>
 8013a2a:	f1a6 020b 	sub.w	r2, r6, #11
 8013a2e:	2a01      	cmp	r2, #1
 8013a30:	d94b      	bls.n	8013aca <RadioSetRxConfig+0x1ba>
 8013a32:	2d01      	cmp	r5, #1
 8013a34:	d047      	beq.n	8013ac6 <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8013a36:	4a32      	ldr	r2, [pc, #200]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013a38:	2100      	movs	r1, #0
 8013a3a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8013a3e:	4a30      	ldr	r2, [pc, #192]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013a40:	2101      	movs	r1, #1
 8013a42:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8013a44:	3b05      	subs	r3, #5
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	428b      	cmp	r3, r1
 8013a4a:	d943      	bls.n	8013ad4 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013a4c:	4b2c      	ldr	r3, [pc, #176]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013a4e:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8013a52:	4c2b      	ldr	r4, [pc, #172]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013a54:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8013a56:	4b2b      	ldr	r3, [pc, #172]	; (8013b04 <RadioSetRxConfig+0x1f4>)
 8013a58:	781b      	ldrb	r3, [r3, #0]
 8013a5a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8013a5c:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8013a60:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013a64:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8013a68:	f7ff fb2a 	bl	80130c0 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8013a6c:	2001      	movs	r0, #1
 8013a6e:	f7ff fe37 	bl	80136e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013a72:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013a76:	f000 fccb 	bl	8014410 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013a7a:	f104 000e 	add.w	r0, r4, #14
 8013a7e:	f000 fd4f 	bl	8014520 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8013a82:	fa5f f08a 	uxtb.w	r0, sl
 8013a86:	f000 fac4 	bl	8014012 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8013a8a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8013a8e:	f000 f8e5 	bl	8013c5c <SUBGRF_ReadRegister>
 8013a92:	f000 0101 	and.w	r1, r0, #1
 8013a96:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8013a9a:	f000 f8cf 	bl	8013c3c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8013a9e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8013aa2:	2b01      	cmp	r3, #1
 8013aa4:	d021      	beq.n	8013aea <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8013aa6:	f240 7036 	movw	r0, #1846	; 0x736
 8013aaa:	f000 f8d7 	bl	8013c5c <SUBGRF_ReadRegister>
 8013aae:	f040 0104 	orr.w	r1, r0, #4
 8013ab2:	b2c9      	uxtb	r1, r1
 8013ab4:	f240 7036 	movw	r0, #1846	; 0x736
 8013ab8:	f000 f8c0 	bl	8013c3c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8013abc:	4b10      	ldr	r3, [pc, #64]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ac2:	609a      	str	r2, [r3, #8]
}
 8013ac4:	e747      	b.n	8013956 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013ac6:	2e0c      	cmp	r6, #12
 8013ac8:	d1b5      	bne.n	8013a36 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8013aca:	4a0d      	ldr	r2, [pc, #52]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013acc:	2101      	movs	r1, #1
 8013ace:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8013ad2:	e7b4      	b.n	8013a3e <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8013ad4:	f1b9 0f0b 	cmp.w	r9, #11
 8013ad8:	d803      	bhi.n	8013ae2 <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8013ada:	4613      	mov	r3, r2
 8013adc:	220c      	movs	r2, #12
 8013ade:	839a      	strh	r2, [r3, #28]
 8013ae0:	e7b7      	b.n	8013a52 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013ae2:	4b07      	ldr	r3, [pc, #28]	; (8013b00 <RadioSetRxConfig+0x1f0>)
 8013ae4:	f8a3 901c 	strh.w	r9, [r3, #28]
 8013ae8:	e7b3      	b.n	8013a52 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8013aea:	f240 7036 	movw	r0, #1846	; 0x736
 8013aee:	f000 f8b5 	bl	8013c5c <SUBGRF_ReadRegister>
 8013af2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8013af6:	f240 7036 	movw	r0, #1846	; 0x736
 8013afa:	f000 f89f 	bl	8013c3c <SUBGRF_WriteRegister>
 8013afe:	e7dd      	b.n	8013abc <RadioSetRxConfig+0x1ac>
 8013b00:	2000163c 	.word	0x2000163c
 8013b04:	20000210 	.word	0x20000210
 8013b08:	08019fc4 	.word	0x08019fc4
 8013b0c:	0801af04 	.word	0x0801af04

08013b10 <RadioIsChannelFree>:
{
 8013b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b12:	b08b      	sub	sp, #44	; 0x2c
 8013b14:	4604      	mov	r4, r0
 8013b16:	460f      	mov	r7, r1
 8013b18:	4616      	mov	r6, r2
 8013b1a:	461d      	mov	r5, r3
    RadioStandby( );
 8013b1c:	f7ff fad0 	bl	80130c0 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8013b20:	2000      	movs	r0, #0
 8013b22:	f7ff fddd 	bl	80136e0 <RadioSetModem>
    RadioSetChannel( freq );
 8013b26:	4620      	mov	r0, r4
 8013b28:	f7ff fce4 	bl	80134f4 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b30:	2400      	movs	r4, #0
 8013b32:	9408      	str	r4, [sp, #32]
 8013b34:	9407      	str	r4, [sp, #28]
 8013b36:	9406      	str	r4, [sp, #24]
 8013b38:	9405      	str	r4, [sp, #20]
 8013b3a:	9404      	str	r4, [sp, #16]
 8013b3c:	9403      	str	r4, [sp, #12]
 8013b3e:	9402      	str	r4, [sp, #8]
 8013b40:	2303      	movs	r3, #3
 8013b42:	9301      	str	r3, [sp, #4]
 8013b44:	9700      	str	r7, [sp, #0]
 8013b46:	4623      	mov	r3, r4
 8013b48:	f44f 7216 	mov.w	r2, #600	; 0x258
 8013b4c:	4639      	mov	r1, r7
 8013b4e:	4620      	mov	r0, r4
 8013b50:	f7ff fede 	bl	8013910 <RadioSetRxConfig>
    RadioRx( 0 );
 8013b54:	4620      	mov	r0, r4
 8013b56:	f7ff fce5 	bl	8013524 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8013b5a:	f7ff fc79 	bl	8013450 <RadioGetWakeupTime>
 8013b5e:	f7ee fd35 	bl	80025cc <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8013b62:	f001 fad1 	bl	8015108 <UTIL_TIMER_GetCurrentTime>
 8013b66:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8013b68:	4620      	mov	r0, r4
 8013b6a:	f001 fad7 	bl	801511c <UTIL_TIMER_GetElapsedTime>
 8013b6e:	42a8      	cmp	r0, r5
 8013b70:	d206      	bcs.n	8013b80 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8013b72:	2000      	movs	r0, #0
 8013b74:	f7ff fc96 	bl	80134a4 <RadioRssi>
        if( rssi > rssiThresh )
 8013b78:	42b0      	cmp	r0, r6
 8013b7a:	ddf5      	ble.n	8013b68 <RadioIsChannelFree+0x58>
            status = false;
 8013b7c:	2400      	movs	r4, #0
 8013b7e:	e000      	b.n	8013b82 <RadioIsChannelFree+0x72>
    bool status = true;
 8013b80:	2401      	movs	r4, #1
    RadioStandby( );
 8013b82:	f7ff fa9d 	bl	80130c0 <RadioStandby>
}
 8013b86:	4620      	mov	r0, r4
 8013b88:	b00b      	add	sp, #44	; 0x2c
 8013b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013b8c <RadioInit>:
{
 8013b8c:	b570      	push	{r4, r5, r6, lr}
 8013b8e:	b082      	sub	sp, #8
    RadioEvents = events;
 8013b90:	4b1d      	ldr	r3, [pc, #116]	; (8013c08 <RadioInit+0x7c>)
 8013b92:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8013b94:	4d1d      	ldr	r5, [pc, #116]	; (8013c0c <RadioInit+0x80>)
 8013b96:	2400      	movs	r4, #0
 8013b98:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8013b9a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8013b9c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013b9e:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8013ba0:	481b      	ldr	r0, [pc, #108]	; (8013c10 <RadioInit+0x84>)
 8013ba2:	f000 fb27 	bl	80141f4 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8013ba6:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8013ba8:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8013baa:	f000 fa53 	bl	8014054 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8013bae:	4621      	mov	r1, r4
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	f000 fd27 	bl	8014604 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8013bb6:	2204      	movs	r2, #4
 8013bb8:	4621      	mov	r1, r4
 8013bba:	2001      	movs	r0, #1
 8013bbc:	f000 fb9a 	bl	80142f4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013bc0:	4623      	mov	r3, r4
 8013bc2:	4622      	mov	r2, r4
 8013bc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013bc8:	4608      	mov	r0, r1
 8013bca:	f000 fada 	bl	8014182 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8013bce:	f7ff fce1 	bl	8013594 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8013bd2:	4e10      	ldr	r6, [pc, #64]	; (8013c14 <RadioInit+0x88>)
 8013bd4:	9400      	str	r4, [sp, #0]
 8013bd6:	4b10      	ldr	r3, [pc, #64]	; (8013c18 <RadioInit+0x8c>)
 8013bd8:	4622      	mov	r2, r4
 8013bda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013bde:	4630      	mov	r0, r6
 8013be0:	f001 fa74 	bl	80150cc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8013be4:	4d0d      	ldr	r5, [pc, #52]	; (8013c1c <RadioInit+0x90>)
 8013be6:	9400      	str	r4, [sp, #0]
 8013be8:	4b0d      	ldr	r3, [pc, #52]	; (8013c20 <RadioInit+0x94>)
 8013bea:	4622      	mov	r2, r4
 8013bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013bf0:	4628      	mov	r0, r5
 8013bf2:	f001 fa6b 	bl	80150cc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8013bf6:	4630      	mov	r0, r6
 8013bf8:	f001 fac6 	bl	8015188 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8013bfc:	4628      	mov	r0, r5
 8013bfe:	f001 fac3 	bl	8015188 <UTIL_TIMER_Stop>
}
 8013c02:	b002      	add	sp, #8
 8013c04:	bd70      	pop	{r4, r5, r6, pc}
 8013c06:	bf00      	nop
 8013c08:	20001620 	.word	0x20001620
 8013c0c:	2000163c 	.word	0x2000163c
 8013c10:	0801343d 	.word	0x0801343d
 8013c14:	20001698 	.word	0x20001698
 8013c18:	08012f85 	.word	0x08012f85
 8013c1c:	20001624 	.word	0x20001624
 8013c20:	08012fad 	.word	0x08012fad

08013c24 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8013c24:	4b01      	ldr	r3, [pc, #4]	; (8013c2c <SUBGRF_GetOperatingMode+0x8>)
 8013c26:	7818      	ldrb	r0, [r3, #0]
 8013c28:	4770      	bx	lr
 8013c2a:	bf00      	nop
 8013c2c:	200016b6 	.word	0x200016b6

08013c30 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8013c30:	4b01      	ldr	r3, [pc, #4]	; (8013c38 <SUBGRF_GetPacketType+0x8>)
 8013c32:	7818      	ldrb	r0, [r3, #0]
 8013c34:	4770      	bx	lr
 8013c36:	bf00      	nop
 8013c38:	200016b7 	.word	0x200016b7

08013c3c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8013c3c:	b500      	push	{lr}
 8013c3e:	b083      	sub	sp, #12
 8013c40:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8013c44:	2301      	movs	r3, #1
 8013c46:	f10d 0207 	add.w	r2, sp, #7
 8013c4a:	4601      	mov	r1, r0
 8013c4c:	4802      	ldr	r0, [pc, #8]	; (8013c58 <SUBGRF_WriteRegister+0x1c>)
 8013c4e:	f7f3 fef5 	bl	8007a3c <HAL_SUBGHZ_WriteRegisters>
}
 8013c52:	b003      	add	sp, #12
 8013c54:	f85d fb04 	ldr.w	pc, [sp], #4
 8013c58:	200005ec 	.word	0x200005ec

08013c5c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8013c5c:	b500      	push	{lr}
 8013c5e:	b083      	sub	sp, #12
 8013c60:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8013c62:	2301      	movs	r3, #1
 8013c64:	f10d 0207 	add.w	r2, sp, #7
 8013c68:	4803      	ldr	r0, [pc, #12]	; (8013c78 <SUBGRF_ReadRegister+0x1c>)
 8013c6a:	f7f3 ff37 	bl	8007adc <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 8013c6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013c72:	b003      	add	sp, #12
 8013c74:	f85d fb04 	ldr.w	pc, [sp], #4
 8013c78:	200005ec 	.word	0x200005ec

08013c7c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8013c7c:	b510      	push	{r4, lr}
 8013c7e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8013c80:	f7f0 f899 	bl	8003db6 <RBI_IsDCDC>
 8013c84:	2801      	cmp	r0, #1
 8013c86:	d000      	beq.n	8013c8a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8013c88:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8013c8a:	f640 1023 	movw	r0, #2339	; 0x923
 8013c8e:	f7ff ffe5 	bl	8013c5c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8013c92:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8013c96:	4321      	orrs	r1, r4
 8013c98:	f640 1023 	movw	r0, #2339	; 0x923
 8013c9c:	f7ff ffce 	bl	8013c3c <SUBGRF_WriteRegister>
}
 8013ca0:	e7f2      	b.n	8013c88 <Radio_SMPS_Set+0xc>

08013ca2 <SUBGRF_SetWhiteningSeed>:
{
 8013ca2:	b510      	push	{r4, lr}
 8013ca4:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8013ca6:	f7ff ffc3 	bl	8013c30 <SUBGRF_GetPacketType>
 8013caa:	b100      	cbz	r0, 8013cae <SUBGRF_SetWhiteningSeed+0xc>
}
 8013cac:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8013cae:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013cb2:	f7ff ffd3 	bl	8013c5c <SUBGRF_ReadRegister>
 8013cb6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8013cba:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8013cbe:	4301      	orrs	r1, r0
 8013cc0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013cc4:	f7ff ffba 	bl	8013c3c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8013cc8:	b2e1      	uxtb	r1, r4
 8013cca:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8013cce:	f7ff ffb5 	bl	8013c3c <SUBGRF_WriteRegister>
}
 8013cd2:	e7eb      	b.n	8013cac <SUBGRF_SetWhiteningSeed+0xa>

08013cd4 <SUBGRF_WriteRegisters>:
{
 8013cd4:	b510      	push	{r4, lr}
 8013cd6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cd8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013cdc:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8013cde:	460a      	mov	r2, r1
 8013ce0:	4601      	mov	r1, r0
 8013ce2:	4803      	ldr	r0, [pc, #12]	; (8013cf0 <SUBGRF_WriteRegisters+0x1c>)
 8013ce4:	f7f3 feaa 	bl	8007a3c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ce8:	f384 8810 	msr	PRIMASK, r4
}
 8013cec:	bd10      	pop	{r4, pc}
 8013cee:	bf00      	nop
 8013cf0:	200005ec 	.word	0x200005ec

08013cf4 <SUBGRF_SetSyncWord>:
{
 8013cf4:	b508      	push	{r3, lr}
 8013cf6:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8013cf8:	2208      	movs	r2, #8
 8013cfa:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8013cfe:	f7ff ffe9 	bl	8013cd4 <SUBGRF_WriteRegisters>
}
 8013d02:	2000      	movs	r0, #0
 8013d04:	bd08      	pop	{r3, pc}

08013d06 <SUBGRF_SetCrcSeed>:
{
 8013d06:	b500      	push	{lr}
 8013d08:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8013d0a:	0a03      	lsrs	r3, r0, #8
 8013d0c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8013d10:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8013d14:	f7ff ff8c 	bl	8013c30 <SUBGRF_GetPacketType>
 8013d18:	b110      	cbz	r0, 8013d20 <SUBGRF_SetCrcSeed+0x1a>
}
 8013d1a:	b003      	add	sp, #12
 8013d1c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8013d20:	2202      	movs	r2, #2
 8013d22:	a901      	add	r1, sp, #4
 8013d24:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8013d28:	f7ff ffd4 	bl	8013cd4 <SUBGRF_WriteRegisters>
}
 8013d2c:	e7f5      	b.n	8013d1a <SUBGRF_SetCrcSeed+0x14>

08013d2e <SUBGRF_SetCrcPolynomial>:
{
 8013d2e:	b500      	push	{lr}
 8013d30:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8013d32:	0a03      	lsrs	r3, r0, #8
 8013d34:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8013d38:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8013d3c:	f7ff ff78 	bl	8013c30 <SUBGRF_GetPacketType>
 8013d40:	b110      	cbz	r0, 8013d48 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8013d42:	b003      	add	sp, #12
 8013d44:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8013d48:	2202      	movs	r2, #2
 8013d4a:	a901      	add	r1, sp, #4
 8013d4c:	f240 60be 	movw	r0, #1726	; 0x6be
 8013d50:	f7ff ffc0 	bl	8013cd4 <SUBGRF_WriteRegisters>
}
 8013d54:	e7f5      	b.n	8013d42 <SUBGRF_SetCrcPolynomial+0x14>
	...

08013d58 <SUBGRF_ReadRegisters>:
{
 8013d58:	b510      	push	{r4, lr}
 8013d5a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d5c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013d60:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8013d62:	460a      	mov	r2, r1
 8013d64:	4601      	mov	r1, r0
 8013d66:	4803      	ldr	r0, [pc, #12]	; (8013d74 <SUBGRF_ReadRegisters+0x1c>)
 8013d68:	f7f3 feb8 	bl	8007adc <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d6c:	f384 8810 	msr	PRIMASK, r4
}
 8013d70:	bd10      	pop	{r4, pc}
 8013d72:	bf00      	nop
 8013d74:	200005ec 	.word	0x200005ec

08013d78 <SUBGRF_WriteBuffer>:
{
 8013d78:	b510      	push	{r4, lr}
 8013d7a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d7c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013d80:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8013d82:	460a      	mov	r2, r1
 8013d84:	4601      	mov	r1, r0
 8013d86:	4803      	ldr	r0, [pc, #12]	; (8013d94 <SUBGRF_WriteBuffer+0x1c>)
 8013d88:	f7f4 f806 	bl	8007d98 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d8c:	f384 8810 	msr	PRIMASK, r4
}
 8013d90:	bd10      	pop	{r4, pc}
 8013d92:	bf00      	nop
 8013d94:	200005ec 	.word	0x200005ec

08013d98 <SUBGRF_SetPayload>:
{
 8013d98:	b508      	push	{r3, lr}
 8013d9a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8013d9c:	4601      	mov	r1, r0
 8013d9e:	2000      	movs	r0, #0
 8013da0:	f7ff ffea 	bl	8013d78 <SUBGRF_WriteBuffer>
}
 8013da4:	bd08      	pop	{r3, pc}
	...

08013da8 <SUBGRF_ReadBuffer>:
{
 8013da8:	b510      	push	{r4, lr}
 8013daa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013dac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013db0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8013db2:	460a      	mov	r2, r1
 8013db4:	4601      	mov	r1, r0
 8013db6:	4803      	ldr	r0, [pc, #12]	; (8013dc4 <SUBGRF_ReadBuffer+0x1c>)
 8013db8:	f7f4 f838 	bl	8007e2c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dbc:	f384 8810 	msr	PRIMASK, r4
}
 8013dc0:	bd10      	pop	{r4, pc}
 8013dc2:	bf00      	nop
 8013dc4:	200005ec 	.word	0x200005ec

08013dc8 <SUBGRF_WriteCommand>:
{
 8013dc8:	b510      	push	{r4, lr}
 8013dca:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013dcc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013dd0:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8013dd2:	460a      	mov	r2, r1
 8013dd4:	4601      	mov	r1, r0
 8013dd6:	4803      	ldr	r0, [pc, #12]	; (8013de4 <SUBGRF_WriteCommand+0x1c>)
 8013dd8:	f7f3 fed4 	bl	8007b84 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ddc:	f384 8810 	msr	PRIMASK, r4
}
 8013de0:	bd10      	pop	{r4, pc}
 8013de2:	bf00      	nop
 8013de4:	200005ec 	.word	0x200005ec

08013de8 <SUBGRF_SetSleep>:
{
 8013de8:	b510      	push	{r4, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8013dee:	2000      	movs	r0, #0
 8013df0:	f7ef ffd5 	bl	8003d9e <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8013df4:	2002      	movs	r0, #2
 8013df6:	f7ff ff41 	bl	8013c7c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013dfa:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8013dfe:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013e02:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8013e04:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8013e08:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013e0a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8013e0e:	2201      	movs	r2, #1
 8013e10:	f10d 0107 	add.w	r1, sp, #7
 8013e14:	2084      	movs	r0, #132	; 0x84
 8013e16:	f7ff ffd7 	bl	8013dc8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8013e1a:	4b02      	ldr	r3, [pc, #8]	; (8013e24 <SUBGRF_SetSleep+0x3c>)
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	701a      	strb	r2, [r3, #0]
}
 8013e20:	b002      	add	sp, #8
 8013e22:	bd10      	pop	{r4, pc}
 8013e24:	200016b6 	.word	0x200016b6

08013e28 <SUBGRF_SetStandby>:
{
 8013e28:	b500      	push	{lr}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8013e30:	2201      	movs	r2, #1
 8013e32:	f10d 0107 	add.w	r1, sp, #7
 8013e36:	2080      	movs	r0, #128	; 0x80
 8013e38:	f7ff ffc6 	bl	8013dc8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8013e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e40:	b92b      	cbnz	r3, 8013e4e <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8013e42:	4b05      	ldr	r3, [pc, #20]	; (8013e58 <SUBGRF_SetStandby+0x30>)
 8013e44:	2201      	movs	r2, #1
 8013e46:	701a      	strb	r2, [r3, #0]
}
 8013e48:	b003      	add	sp, #12
 8013e4a:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8013e4e:	4b02      	ldr	r3, [pc, #8]	; (8013e58 <SUBGRF_SetStandby+0x30>)
 8013e50:	2202      	movs	r2, #2
 8013e52:	701a      	strb	r2, [r3, #0]
}
 8013e54:	e7f8      	b.n	8013e48 <SUBGRF_SetStandby+0x20>
 8013e56:	bf00      	nop
 8013e58:	200016b6 	.word	0x200016b6

08013e5c <SUBGRF_SetTx>:
{
 8013e5c:	b500      	push	{lr}
 8013e5e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8013e60:	4b0a      	ldr	r3, [pc, #40]	; (8013e8c <SUBGRF_SetTx+0x30>)
 8013e62:	2204      	movs	r2, #4
 8013e64:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013e66:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013e6a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8013e6e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013e72:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8013e76:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8013e7a:	2203      	movs	r2, #3
 8013e7c:	a901      	add	r1, sp, #4
 8013e7e:	2083      	movs	r0, #131	; 0x83
 8013e80:	f7ff ffa2 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 8013e84:	b003      	add	sp, #12
 8013e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e8a:	bf00      	nop
 8013e8c:	200016b6 	.word	0x200016b6

08013e90 <SUBGRF_SendPayload>:
{
 8013e90:	b510      	push	{r4, lr}
 8013e92:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8013e94:	f7ff ff80 	bl	8013d98 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8013e98:	4620      	mov	r0, r4
 8013e9a:	f7ff ffdf 	bl	8013e5c <SUBGRF_SetTx>
}
 8013e9e:	bd10      	pop	{r4, pc}

08013ea0 <SUBGRF_SetRx>:
{
 8013ea0:	b500      	push	{lr}
 8013ea2:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8013ea4:	4b0a      	ldr	r3, [pc, #40]	; (8013ed0 <SUBGRF_SetRx+0x30>)
 8013ea6:	2205      	movs	r2, #5
 8013ea8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013eaa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013eae:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8013eb2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013eb6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8013eba:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8013ebe:	2203      	movs	r2, #3
 8013ec0:	a901      	add	r1, sp, #4
 8013ec2:	2082      	movs	r0, #130	; 0x82
 8013ec4:	f7ff ff80 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 8013ec8:	b003      	add	sp, #12
 8013eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ece:	bf00      	nop
 8013ed0:	200016b6 	.word	0x200016b6

08013ed4 <SUBGRF_GetRandom>:
{
 8013ed4:	b570      	push	{r4, r5, r6, lr}
 8013ed6:	b082      	sub	sp, #8
    uint32_t number = 0;
 8013ed8:	2600      	movs	r6, #0
 8013eda:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8013edc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013ee0:	f7ff febc 	bl	8013c5c <SUBGRF_ReadRegister>
 8013ee4:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8013ee6:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8013eea:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013eee:	f7ff fea5 	bl	8013c3c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8013ef2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013ef6:	f7ff feb1 	bl	8013c5c <SUBGRF_ReadRegister>
 8013efa:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8013efc:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8013f00:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013f04:	f7ff fe9a 	bl	8013c3c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8013f08:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013f0c:	f7ff ffc8 	bl	8013ea0 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8013f10:	2204      	movs	r2, #4
 8013f12:	eb0d 0102 	add.w	r1, sp, r2
 8013f16:	f640 0019 	movw	r0, #2073	; 0x819
 8013f1a:	f7ff ff1d 	bl	8013d58 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8013f1e:	4630      	mov	r0, r6
 8013f20:	f7ff ff82 	bl	8013e28 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8013f24:	4629      	mov	r1, r5
 8013f26:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013f2a:	f7ff fe87 	bl	8013c3c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8013f2e:	4621      	mov	r1, r4
 8013f30:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013f34:	f7ff fe82 	bl	8013c3c <SUBGRF_WriteRegister>
}
 8013f38:	9801      	ldr	r0, [sp, #4]
 8013f3a:	b002      	add	sp, #8
 8013f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f40 <SUBGRF_SetRxBoosted>:
{
 8013f40:	b510      	push	{r4, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8013f46:	4b0c      	ldr	r3, [pc, #48]	; (8013f78 <SUBGRF_SetRxBoosted+0x38>)
 8013f48:	2205      	movs	r2, #5
 8013f4a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8013f4c:	2197      	movs	r1, #151	; 0x97
 8013f4e:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8013f52:	f7ff fe73 	bl	8013c3c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013f56:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8013f5a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8013f5e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8013f62:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8013f66:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8013f6a:	2203      	movs	r2, #3
 8013f6c:	a901      	add	r1, sp, #4
 8013f6e:	2082      	movs	r0, #130	; 0x82
 8013f70:	f7ff ff2a 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 8013f74:	b002      	add	sp, #8
 8013f76:	bd10      	pop	{r4, pc}
 8013f78:	200016b6 	.word	0x200016b6

08013f7c <SUBGRF_SetRxDutyCycle>:
{
 8013f7c:	b500      	push	{lr}
 8013f7e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8013f80:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013f84:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8013f88:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013f8c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8013f90:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8013f94:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8013f98:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8013f9c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8013fa0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8013fa4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8013fa8:	2206      	movs	r2, #6
 8013faa:	4669      	mov	r1, sp
 8013fac:	2094      	movs	r0, #148	; 0x94
 8013fae:	f7ff ff0b 	bl	8013dc8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8013fb2:	4b03      	ldr	r3, [pc, #12]	; (8013fc0 <SUBGRF_SetRxDutyCycle+0x44>)
 8013fb4:	2206      	movs	r2, #6
 8013fb6:	701a      	strb	r2, [r3, #0]
}
 8013fb8:	b003      	add	sp, #12
 8013fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fbe:	bf00      	nop
 8013fc0:	200016b6 	.word	0x200016b6

08013fc4 <SUBGRF_SetCad>:
{
 8013fc4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	4611      	mov	r1, r2
 8013fca:	20c5      	movs	r0, #197	; 0xc5
 8013fcc:	f7ff fefc 	bl	8013dc8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8013fd0:	4b01      	ldr	r3, [pc, #4]	; (8013fd8 <SUBGRF_SetCad+0x14>)
 8013fd2:	2207      	movs	r2, #7
 8013fd4:	701a      	strb	r2, [r3, #0]
}
 8013fd6:	bd08      	pop	{r3, pc}
 8013fd8:	200016b6 	.word	0x200016b6

08013fdc <SUBGRF_SetTxContinuousWave>:
{
 8013fdc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8013fde:	2200      	movs	r2, #0
 8013fe0:	4611      	mov	r1, r2
 8013fe2:	20d1      	movs	r0, #209	; 0xd1
 8013fe4:	f7ff fef0 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 8013fe8:	bd08      	pop	{r3, pc}

08013fea <SUBGRF_SetTxInfinitePreamble>:
{
 8013fea:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8013fec:	2200      	movs	r2, #0
 8013fee:	4611      	mov	r1, r2
 8013ff0:	20d2      	movs	r0, #210	; 0xd2
 8013ff2:	f7ff fee9 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 8013ff6:	bd08      	pop	{r3, pc}

08013ff8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8013ff8:	b500      	push	{lr}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8014000:	2201      	movs	r2, #1
 8014002:	f10d 0107 	add.w	r1, sp, #7
 8014006:	209f      	movs	r0, #159	; 0x9f
 8014008:	f7ff fede 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 801400c:	b003      	add	sp, #12
 801400e:	f85d fb04 	ldr.w	pc, [sp], #4

08014012 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8014012:	b500      	push	{lr}
 8014014:	b083      	sub	sp, #12
 8014016:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801401a:	2201      	movs	r2, #1
 801401c:	f10d 0107 	add.w	r1, sp, #7
 8014020:	20a0      	movs	r0, #160	; 0xa0
 8014022:	f7ff fed1 	bl	8013dc8 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8014026:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801402a:	2b3f      	cmp	r3, #63	; 0x3f
 801402c:	d90f      	bls.n	801404e <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 801402e:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8014030:	2200      	movs	r2, #0
        while( mant > 31 )
 8014032:	e002      	b.n	801403a <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8014034:	089b      	lsrs	r3, r3, #2
            exp++;
 8014036:	3201      	adds	r2, #1
 8014038:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 801403a:	2b1f      	cmp	r3, #31
 801403c:	d8fa      	bhi.n	8014034 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 801403e:	00d9      	lsls	r1, r3, #3
 8014040:	b2c9      	uxtb	r1, r1
 8014042:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8014044:	b2c9      	uxtb	r1, r1
 8014046:	f240 7006 	movw	r0, #1798	; 0x706
 801404a:	f7ff fdf7 	bl	8013c3c <SUBGRF_WriteRegister>
}
 801404e:	b003      	add	sp, #12
 8014050:	f85d fb04 	ldr.w	pc, [sp], #4

08014054 <SUBGRF_SetRegulatorMode>:
{
 8014054:	b500      	push	{lr}
 8014056:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8014058:	f7ef fead 	bl	8003db6 <RBI_IsDCDC>
 801405c:	2801      	cmp	r0, #1
 801405e:	d00b      	beq.n	8014078 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8014060:	2300      	movs	r3, #0
 8014062:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8014066:	2201      	movs	r2, #1
 8014068:	f10d 0107 	add.w	r1, sp, #7
 801406c:	2096      	movs	r0, #150	; 0x96
 801406e:	f7ff feab 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 8014072:	b003      	add	sp, #12
 8014074:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8014078:	2301      	movs	r3, #1
 801407a:	f88d 3007 	strb.w	r3, [sp, #7]
 801407e:	e7f2      	b.n	8014066 <SUBGRF_SetRegulatorMode+0x12>

08014080 <SUBGRF_Calibrate>:
{
 8014080:	b500      	push	{lr}
 8014082:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8014084:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8014088:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801408c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801408e:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8014092:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8014094:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8014098:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801409a:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801409e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80140a0:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80140a4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80140a6:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80140aa:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80140ac:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80140b0:	2201      	movs	r2, #1
 80140b2:	f10d 0107 	add.w	r1, sp, #7
 80140b6:	2089      	movs	r0, #137	; 0x89
 80140b8:	f7ff fe86 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 80140bc:	b003      	add	sp, #12
 80140be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080140c4 <SUBGRF_CalibrateImage>:
{
 80140c4:	b500      	push	{lr}
 80140c6:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80140c8:	4b1f      	ldr	r3, [pc, #124]	; (8014148 <SUBGRF_CalibrateImage+0x84>)
 80140ca:	4298      	cmp	r0, r3
 80140cc:	d90d      	bls.n	80140ea <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80140ce:	23e1      	movs	r3, #225	; 0xe1
 80140d0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80140d4:	23e9      	movs	r3, #233	; 0xe9
 80140d6:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80140da:	2202      	movs	r2, #2
 80140dc:	a901      	add	r1, sp, #4
 80140de:	2098      	movs	r0, #152	; 0x98
 80140e0:	f7ff fe72 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 80140e4:	b003      	add	sp, #12
 80140e6:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80140ea:	4b18      	ldr	r3, [pc, #96]	; (801414c <SUBGRF_CalibrateImage+0x88>)
 80140ec:	4298      	cmp	r0, r3
 80140ee:	d906      	bls.n	80140fe <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80140f0:	23d7      	movs	r3, #215	; 0xd7
 80140f2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80140f6:	23db      	movs	r3, #219	; 0xdb
 80140f8:	f88d 3005 	strb.w	r3, [sp, #5]
 80140fc:	e7ed      	b.n	80140da <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80140fe:	4b14      	ldr	r3, [pc, #80]	; (8014150 <SUBGRF_CalibrateImage+0x8c>)
 8014100:	4298      	cmp	r0, r3
 8014102:	d906      	bls.n	8014112 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8014104:	23c1      	movs	r3, #193	; 0xc1
 8014106:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 801410a:	23c5      	movs	r3, #197	; 0xc5
 801410c:	f88d 3005 	strb.w	r3, [sp, #5]
 8014110:	e7e3      	b.n	80140da <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8014112:	4b10      	ldr	r3, [pc, #64]	; (8014154 <SUBGRF_CalibrateImage+0x90>)
 8014114:	4298      	cmp	r0, r3
 8014116:	d906      	bls.n	8014126 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8014118:	2375      	movs	r3, #117	; 0x75
 801411a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 801411e:	2381      	movs	r3, #129	; 0x81
 8014120:	f88d 3005 	strb.w	r3, [sp, #5]
 8014124:	e7d9      	b.n	80140da <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8014126:	4b0c      	ldr	r3, [pc, #48]	; (8014158 <SUBGRF_CalibrateImage+0x94>)
 8014128:	4298      	cmp	r0, r3
 801412a:	d906      	bls.n	801413a <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 801412c:	236b      	movs	r3, #107	; 0x6b
 801412e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8014132:	236f      	movs	r3, #111	; 0x6f
 8014134:	f88d 3005 	strb.w	r3, [sp, #5]
 8014138:	e7cf      	b.n	80140da <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 801413a:	2329      	movs	r3, #41	; 0x29
 801413c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8014140:	232b      	movs	r3, #43	; 0x2b
 8014142:	f88d 3005 	strb.w	r3, [sp, #5]
 8014146:	e7c8      	b.n	80140da <SUBGRF_CalibrateImage+0x16>
 8014148:	35a4e900 	.word	0x35a4e900
 801414c:	32a9f880 	.word	0x32a9f880
 8014150:	2de54480 	.word	0x2de54480
 8014154:	1b6b0b00 	.word	0x1b6b0b00
 8014158:	1954fc40 	.word	0x1954fc40

0801415c <SUBGRF_SetPaConfig>:
{
 801415c:	b500      	push	{lr}
 801415e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8014160:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8014164:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8014168:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 801416c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8014170:	2204      	movs	r2, #4
 8014172:	eb0d 0102 	add.w	r1, sp, r2
 8014176:	2095      	movs	r0, #149	; 0x95
 8014178:	f7ff fe26 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 801417c:	b003      	add	sp, #12
 801417e:	f85d fb04 	ldr.w	pc, [sp], #4

08014182 <SUBGRF_SetDioIrqParams>:
{
 8014182:	b500      	push	{lr}
 8014184:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8014186:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801418a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801418e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8014192:	0a08      	lsrs	r0, r1, #8
 8014194:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8014198:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801419c:	0a11      	lsrs	r1, r2, #8
 801419e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80141a2:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80141a6:	0a1a      	lsrs	r2, r3, #8
 80141a8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80141ac:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80141b0:	2208      	movs	r2, #8
 80141b2:	4669      	mov	r1, sp
 80141b4:	4610      	mov	r0, r2
 80141b6:	f7ff fe07 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 80141ba:	b003      	add	sp, #12
 80141bc:	f85d fb04 	ldr.w	pc, [sp], #4

080141c0 <SUBGRF_SetTcxoMode>:
{
 80141c0:	b500      	push	{lr}
 80141c2:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 80141c4:	f000 0007 	and.w	r0, r0, #7
 80141c8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80141cc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80141d0:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80141d4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80141d8:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80141dc:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80141e0:	2204      	movs	r2, #4
 80141e2:	eb0d 0102 	add.w	r1, sp, r2
 80141e6:	2097      	movs	r0, #151	; 0x97
 80141e8:	f7ff fdee 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 80141ec:	b003      	add	sp, #12
 80141ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080141f4 <SUBGRF_Init>:
{
 80141f4:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80141f6:	b108      	cbz	r0, 80141fc <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80141f8:	4a18      	ldr	r2, [pc, #96]	; (801425c <SUBGRF_Init+0x68>)
 80141fa:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80141fc:	f7ee f8da 	bl	80023b4 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8014200:	2002      	movs	r0, #2
 8014202:	f7ff fd3b 	bl	8013c7c <Radio_SMPS_Set>
    ImageCalibrated = false;
 8014206:	2000      	movs	r0, #0
 8014208:	4b15      	ldr	r3, [pc, #84]	; (8014260 <SUBGRF_Init+0x6c>)
 801420a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 801420c:	f7ff fe0c 	bl	8013e28 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8014210:	f7ef fdcd 	bl	8003dae <RBI_IsTCXO>
 8014214:	2801      	cmp	r0, #1
 8014216:	d014      	beq.n	8014242 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8014218:	2120      	movs	r1, #32
 801421a:	f640 1011 	movw	r0, #2321	; 0x911
 801421e:	f7ff fd0d 	bl	8013c3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8014222:	2120      	movs	r1, #32
 8014224:	f640 1012 	movw	r0, #2322	; 0x912
 8014228:	f7ff fd08 	bl	8013c3c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801422c:	210e      	movs	r1, #14
 801422e:	f640 101f 	movw	r0, #2335	; 0x91f
 8014232:	f7ff fd03 	bl	8013c3c <SUBGRF_WriteRegister>
    RBI_Init();
 8014236:	f7ef fdae 	bl	8003d96 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 801423a:	4b0a      	ldr	r3, [pc, #40]	; (8014264 <SUBGRF_Init+0x70>)
 801423c:	2201      	movs	r2, #1
 801423e:	701a      	strb	r2, [r3, #0]
}
 8014240:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8014242:	2140      	movs	r1, #64	; 0x40
 8014244:	f7ff ffbc 	bl	80141c0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8014248:	2100      	movs	r1, #0
 801424a:	f640 1011 	movw	r0, #2321	; 0x911
 801424e:	f7ff fcf5 	bl	8013c3c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8014252:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8014256:	f7ff ff13 	bl	8014080 <SUBGRF_Calibrate>
 801425a:	e7e7      	b.n	801422c <SUBGRF_Init+0x38>
 801425c:	200016b8 	.word	0x200016b8
 8014260:	200016b4 	.word	0x200016b4
 8014264:	200016b6 	.word	0x200016b6

08014268 <SUBGRF_SetRfFrequency>:
{
 8014268:	b510      	push	{r4, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 801426e:	4b12      	ldr	r3, [pc, #72]	; (80142b8 <SUBGRF_SetRfFrequency+0x50>)
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	b1d3      	cbz	r3, 80142aa <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8014274:	4a11      	ldr	r2, [pc, #68]	; (80142bc <SUBGRF_SetRfFrequency+0x54>)
 8014276:	2300      	movs	r3, #0
 8014278:	0660      	lsls	r0, r4, #25
 801427a:	09e1      	lsrs	r1, r4, #7
 801427c:	f7ec ff60 	bl	8001140 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8014280:	0e03      	lsrs	r3, r0, #24
 8014282:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8014286:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801428a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801428e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014292:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8014296:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801429a:	2204      	movs	r2, #4
 801429c:	eb0d 0102 	add.w	r1, sp, r2
 80142a0:	2086      	movs	r0, #134	; 0x86
 80142a2:	f7ff fd91 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 80142a6:	b002      	add	sp, #8
 80142a8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80142aa:	f7ff ff0b 	bl	80140c4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80142ae:	4b02      	ldr	r3, [pc, #8]	; (80142b8 <SUBGRF_SetRfFrequency+0x50>)
 80142b0:	2201      	movs	r2, #1
 80142b2:	701a      	strb	r2, [r3, #0]
 80142b4:	e7de      	b.n	8014274 <SUBGRF_SetRfFrequency+0xc>
 80142b6:	bf00      	nop
 80142b8:	200016b4 	.word	0x200016b4
 80142bc:	01e84800 	.word	0x01e84800

080142c0 <SUBGRF_SetPacketType>:
{
 80142c0:	b500      	push	{lr}
 80142c2:	b083      	sub	sp, #12
 80142c4:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 80142c8:	b2c3      	uxtb	r3, r0
 80142ca:	4a09      	ldr	r2, [pc, #36]	; (80142f0 <SUBGRF_SetPacketType+0x30>)
 80142cc:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 80142ce:	b143      	cbz	r3, 80142e2 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80142d0:	2201      	movs	r2, #1
 80142d2:	f10d 0107 	add.w	r1, sp, #7
 80142d6:	208a      	movs	r0, #138	; 0x8a
 80142d8:	f7ff fd76 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 80142dc:	b003      	add	sp, #12
 80142de:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80142e2:	2100      	movs	r1, #0
 80142e4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80142e8:	f7ff fca8 	bl	8013c3c <SUBGRF_WriteRegister>
 80142ec:	e7f0      	b.n	80142d0 <SUBGRF_SetPacketType+0x10>
 80142ee:	bf00      	nop
 80142f0:	200016b7 	.word	0x200016b7

080142f4 <SUBGRF_SetTxParams>:
{
 80142f4:	b570      	push	{r4, r5, r6, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	460c      	mov	r4, r1
 80142fa:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80142fc:	2801      	cmp	r0, #1
 80142fe:	d035      	beq.n	801436c <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8014300:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8014304:	f7ff fcaa 	bl	8013c5c <SUBGRF_ReadRegister>
 8014308:	f040 011e 	orr.w	r1, r0, #30
 801430c:	b2c9      	uxtb	r1, r1
 801430e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8014312:	f7ff fc93 	bl	8013c3c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8014316:	2001      	movs	r0, #1
 8014318:	f7ef fd51 	bl	8003dbe <RBI_GetRFOMaxPowerConfig>
 801431c:	4605      	mov	r5, r0
        if (power > max_power)
 801431e:	4284      	cmp	r4, r0
 8014320:	dd00      	ble.n	8014324 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8014322:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8014324:	2d14      	cmp	r5, #20
 8014326:	d054      	beq.n	80143d2 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8014328:	2d11      	cmp	r5, #17
 801432a:	d05c      	beq.n	80143e6 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 801432c:	2d0e      	cmp	r5, #14
 801432e:	d064      	beq.n	80143fa <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8014330:	2301      	movs	r3, #1
 8014332:	2200      	movs	r2, #0
 8014334:	2107      	movs	r1, #7
 8014336:	2004      	movs	r0, #4
 8014338:	f7ff ff10 	bl	801415c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801433c:	1b64      	subs	r4, r4, r5
 801433e:	3416      	adds	r4, #22
 8014340:	b265      	sxtb	r5, r4
        if (power < -9)
 8014342:	f115 0f09 	cmn.w	r5, #9
 8014346:	da01      	bge.n	801434c <SUBGRF_SetTxParams+0x58>
            power = -9;
 8014348:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801434c:	2138      	movs	r1, #56	; 0x38
 801434e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014352:	f7ff fc73 	bl	8013c3c <SUBGRF_WriteRegister>
    buf[0] = power;
 8014356:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 801435a:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801435e:	2202      	movs	r2, #2
 8014360:	a901      	add	r1, sp, #4
 8014362:	208e      	movs	r0, #142	; 0x8e
 8014364:	f7ff fd30 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 8014368:	b002      	add	sp, #8
 801436a:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801436c:	2000      	movs	r0, #0
 801436e:	f7ef fd26 	bl	8003dbe <RBI_GetRFOMaxPowerConfig>
 8014372:	4605      	mov	r5, r0
        if (power >  max_power)
 8014374:	4284      	cmp	r4, r0
 8014376:	dd00      	ble.n	801437a <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8014378:	b244      	sxtb	r4, r0
        if (max_power == 14)
 801437a:	2d0e      	cmp	r5, #14
 801437c:	d015      	beq.n	80143aa <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 801437e:	2d0a      	cmp	r5, #10
 8014380:	d01d      	beq.n	80143be <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8014382:	2301      	movs	r3, #1
 8014384:	461a      	mov	r2, r3
 8014386:	2100      	movs	r1, #0
 8014388:	2007      	movs	r0, #7
 801438a:	f7ff fee7 	bl	801415c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801438e:	1b65      	subs	r5, r4, r5
 8014390:	350e      	adds	r5, #14
 8014392:	b26d      	sxtb	r5, r5
        if (power < -17)
 8014394:	f115 0f11 	cmn.w	r5, #17
 8014398:	da01      	bge.n	801439e <SUBGRF_SetTxParams+0xaa>
            power = -17;
 801439a:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801439e:	2118      	movs	r1, #24
 80143a0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80143a4:	f7ff fc4a 	bl	8013c3c <SUBGRF_WriteRegister>
 80143a8:	e7d5      	b.n	8014356 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80143aa:	2301      	movs	r3, #1
 80143ac:	461a      	mov	r2, r3
 80143ae:	2100      	movs	r1, #0
 80143b0:	2004      	movs	r0, #4
 80143b2:	f7ff fed3 	bl	801415c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80143b6:	1b65      	subs	r5, r4, r5
 80143b8:	350e      	adds	r5, #14
 80143ba:	b26d      	sxtb	r5, r5
 80143bc:	e7ea      	b.n	8014394 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80143be:	2301      	movs	r3, #1
 80143c0:	461a      	mov	r2, r3
 80143c2:	2100      	movs	r1, #0
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7ff fec9 	bl	801415c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80143ca:	1b65      	subs	r5, r4, r5
 80143cc:	350d      	adds	r5, #13
 80143ce:	b26d      	sxtb	r5, r5
 80143d0:	e7e0      	b.n	8014394 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80143d2:	2301      	movs	r3, #1
 80143d4:	2200      	movs	r2, #0
 80143d6:	2105      	movs	r1, #5
 80143d8:	2003      	movs	r0, #3
 80143da:	f7ff febf 	bl	801415c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80143de:	1b65      	subs	r5, r4, r5
 80143e0:	3516      	adds	r5, #22
 80143e2:	b26d      	sxtb	r5, r5
 80143e4:	e7ad      	b.n	8014342 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80143e6:	2301      	movs	r3, #1
 80143e8:	2200      	movs	r2, #0
 80143ea:	2103      	movs	r1, #3
 80143ec:	2002      	movs	r0, #2
 80143ee:	f7ff feb5 	bl	801415c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80143f2:	1b65      	subs	r5, r4, r5
 80143f4:	3516      	adds	r5, #22
 80143f6:	b26d      	sxtb	r5, r5
 80143f8:	e7a3      	b.n	8014342 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80143fa:	2301      	movs	r3, #1
 80143fc:	2200      	movs	r2, #0
 80143fe:	2102      	movs	r1, #2
 8014400:	4608      	mov	r0, r1
 8014402:	f7ff feab 	bl	801415c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8014406:	1b65      	subs	r5, r4, r5
 8014408:	350e      	adds	r5, #14
 801440a:	b26d      	sxtb	r5, r5
 801440c:	e799      	b.n	8014342 <SUBGRF_SetTxParams+0x4e>
	...

08014410 <SUBGRF_SetModulationParams>:
{
 8014410:	b510      	push	{r4, lr}
 8014412:	b082      	sub	sp, #8
 8014414:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8014416:	4b3e      	ldr	r3, [pc, #248]	; (8014510 <SUBGRF_SetModulationParams+0x100>)
 8014418:	e893 0003 	ldmia.w	r3, {r0, r1}
 801441c:	ab02      	add	r3, sp, #8
 801441e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8014422:	7820      	ldrb	r0, [r4, #0]
 8014424:	4b3b      	ldr	r3, [pc, #236]	; (8014514 <SUBGRF_SetModulationParams+0x104>)
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	4298      	cmp	r0, r3
 801442a:	d106      	bne.n	801443a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 801442c:	7823      	ldrb	r3, [r4, #0]
 801442e:	2b03      	cmp	r3, #3
 8014430:	d82c      	bhi.n	801448c <SUBGRF_SetModulationParams+0x7c>
 8014432:	e8df f003 	tbb	[pc, r3]
 8014436:	4205      	.short	0x4205
 8014438:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801443a:	f7ff ff41 	bl	80142c0 <SUBGRF_SetPacketType>
 801443e:	e7f5      	b.n	801442c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8014440:	6862      	ldr	r2, [r4, #4]
 8014442:	4b35      	ldr	r3, [pc, #212]	; (8014518 <SUBGRF_SetModulationParams+0x108>)
 8014444:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8014448:	0c1a      	lsrs	r2, r3, #16
 801444a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801444e:	0a1a      	lsrs	r2, r3, #8
 8014450:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8014454:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8014458:	7b23      	ldrb	r3, [r4, #12]
 801445a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801445e:	7b63      	ldrb	r3, [r4, #13]
 8014460:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8014464:	68a1      	ldr	r1, [r4, #8]
 8014466:	4a2d      	ldr	r2, [pc, #180]	; (801451c <SUBGRF_SetModulationParams+0x10c>)
 8014468:	2300      	movs	r3, #0
 801446a:	0648      	lsls	r0, r1, #25
 801446c:	09c9      	lsrs	r1, r1, #7
 801446e:	f7ec fe67 	bl	8001140 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8014472:	0c03      	lsrs	r3, r0, #16
 8014474:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8014478:	0a03      	lsrs	r3, r0, #8
 801447a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 801447e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8014482:	2208      	movs	r2, #8
 8014484:	4669      	mov	r1, sp
 8014486:	208b      	movs	r0, #139	; 0x8b
 8014488:	f7ff fc9e 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 801448c:	b002      	add	sp, #8
 801448e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8014490:	6922      	ldr	r2, [r4, #16]
 8014492:	4b21      	ldr	r3, [pc, #132]	; (8014518 <SUBGRF_SetModulationParams+0x108>)
 8014494:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8014498:	0c1a      	lsrs	r2, r3, #16
 801449a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801449e:	0a1a      	lsrs	r2, r3, #8
 80144a0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80144a4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80144a8:	7d23      	ldrb	r3, [r4, #20]
 80144aa:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80144ae:	2204      	movs	r2, #4
 80144b0:	4669      	mov	r1, sp
 80144b2:	208b      	movs	r0, #139	; 0x8b
 80144b4:	f7ff fc88 	bl	8013dc8 <SUBGRF_WriteCommand>
        break;
 80144b8:	e7e8      	b.n	801448c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80144ba:	7e23      	ldrb	r3, [r4, #24]
 80144bc:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80144c0:	7e63      	ldrb	r3, [r4, #25]
 80144c2:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80144c6:	7ea3      	ldrb	r3, [r4, #26]
 80144c8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80144cc:	7ee3      	ldrb	r3, [r4, #27]
 80144ce:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80144d2:	2204      	movs	r2, #4
 80144d4:	4669      	mov	r1, sp
 80144d6:	208b      	movs	r0, #139	; 0x8b
 80144d8:	f7ff fc76 	bl	8013dc8 <SUBGRF_WriteCommand>
        break;
 80144dc:	e7d6      	b.n	801448c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80144de:	6862      	ldr	r2, [r4, #4]
 80144e0:	4b0d      	ldr	r3, [pc, #52]	; (8014518 <SUBGRF_SetModulationParams+0x108>)
 80144e2:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80144e6:	0c1a      	lsrs	r2, r3, #16
 80144e8:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80144ec:	0a1a      	lsrs	r2, r3, #8
 80144ee:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80144f2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80144f6:	7b23      	ldrb	r3, [r4, #12]
 80144f8:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80144fc:	7b63      	ldrb	r3, [r4, #13]
 80144fe:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8014502:	2205      	movs	r2, #5
 8014504:	4669      	mov	r1, sp
 8014506:	208b      	movs	r0, #139	; 0x8b
 8014508:	f7ff fc5e 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 801450c:	e7be      	b.n	801448c <SUBGRF_SetModulationParams+0x7c>
 801450e:	bf00      	nop
 8014510:	08019fcc 	.word	0x08019fcc
 8014514:	200016b7 	.word	0x200016b7
 8014518:	3d090000 	.word	0x3d090000
 801451c:	01e84800 	.word	0x01e84800

08014520 <SUBGRF_SetPacketParams>:
{
 8014520:	b510      	push	{r4, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8014526:	ab01      	add	r3, sp, #4
 8014528:	4a33      	ldr	r2, [pc, #204]	; (80145f8 <SUBGRF_SetPacketParams+0xd8>)
 801452a:	ca07      	ldmia	r2, {r0, r1, r2}
 801452c:	c303      	stmia	r3!, {r0, r1}
 801452e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8014530:	7820      	ldrb	r0, [r4, #0]
 8014532:	4b32      	ldr	r3, [pc, #200]	; (80145fc <SUBGRF_SetPacketParams+0xdc>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	4298      	cmp	r0, r3
 8014538:	d106      	bne.n	8014548 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 801453a:	7823      	ldrb	r3, [r4, #0]
 801453c:	2b03      	cmp	r3, #3
 801453e:	d82a      	bhi.n	8014596 <SUBGRF_SetPacketParams+0x76>
 8014540:	e8df f003 	tbb	[pc, r3]
 8014544:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8014548:	f7ff feba 	bl	80142c0 <SUBGRF_SetPacketType>
 801454c:	e7f5      	b.n	801453a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801454e:	7a63      	ldrb	r3, [r4, #9]
 8014550:	2bf1      	cmp	r3, #241	; 0xf1
 8014552:	d022      	beq.n	801459a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8014554:	2bf2      	cmp	r3, #242	; 0xf2
 8014556:	d02a      	beq.n	80145ae <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8014558:	8862      	ldrh	r2, [r4, #2]
 801455a:	0a11      	lsrs	r1, r2, #8
 801455c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8014560:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8014564:	7922      	ldrb	r2, [r4, #4]
 8014566:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801456a:	7962      	ldrb	r2, [r4, #5]
 801456c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8014570:	79a2      	ldrb	r2, [r4, #6]
 8014572:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8014576:	79e2      	ldrb	r2, [r4, #7]
 8014578:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801457c:	7a22      	ldrb	r2, [r4, #8]
 801457e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8014582:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8014586:	7aa3      	ldrb	r3, [r4, #10]
 8014588:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 801458c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801458e:	a901      	add	r1, sp, #4
 8014590:	208c      	movs	r0, #140	; 0x8c
 8014592:	f7ff fc19 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 8014596:	b004      	add	sp, #16
 8014598:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801459a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801459e:	f7ff fbb2 	bl	8013d06 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80145a2:	f248 0005 	movw	r0, #32773	; 0x8005
 80145a6:	f7ff fbc2 	bl	8013d2e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80145aa:	2302      	movs	r3, #2
 80145ac:	e7d4      	b.n	8014558 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80145ae:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80145b2:	f7ff fba8 	bl	8013d06 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80145b6:	f241 0021 	movw	r0, #4129	; 0x1021
 80145ba:	f7ff fbb8 	bl	8013d2e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80145be:	2306      	movs	r3, #6
 80145c0:	e7ca      	b.n	8014558 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80145c2:	7b23      	ldrb	r3, [r4, #12]
 80145c4:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80145c8:	2201      	movs	r2, #1
        break;
 80145ca:	e7e0      	b.n	801458e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80145cc:	89e3      	ldrh	r3, [r4, #14]
 80145ce:	0a1a      	lsrs	r2, r3, #8
 80145d0:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80145d4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80145d8:	7c23      	ldrb	r3, [r4, #16]
 80145da:	4a09      	ldr	r2, [pc, #36]	; (8014600 <SUBGRF_SetPacketParams+0xe0>)
 80145dc:	7013      	strb	r3, [r2, #0]
 80145de:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80145e2:	7c63      	ldrb	r3, [r4, #17]
 80145e4:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80145e8:	7ca3      	ldrb	r3, [r4, #18]
 80145ea:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80145ee:	7ce3      	ldrb	r3, [r4, #19]
 80145f0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80145f4:	2206      	movs	r2, #6
        break;
 80145f6:	e7ca      	b.n	801458e <SUBGRF_SetPacketParams+0x6e>
 80145f8:	08019fd4 	.word	0x08019fd4
 80145fc:	200016b7 	.word	0x200016b7
 8014600:	200016b5 	.word	0x200016b5

08014604 <SUBGRF_SetBufferBaseAddress>:
{
 8014604:	b500      	push	{lr}
 8014606:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8014608:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 801460c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8014610:	2202      	movs	r2, #2
 8014612:	a901      	add	r1, sp, #4
 8014614:	208f      	movs	r0, #143	; 0x8f
 8014616:	f7ff fbd7 	bl	8013dc8 <SUBGRF_WriteCommand>
}
 801461a:	b003      	add	sp, #12
 801461c:	f85d fb04 	ldr.w	pc, [sp], #4

08014620 <SUBGRF_ReadCommand>:
{
 8014620:	b510      	push	{r4, lr}
 8014622:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014624:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014628:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801462a:	460a      	mov	r2, r1
 801462c:	4601      	mov	r1, r0
 801462e:	4803      	ldr	r0, [pc, #12]	; (801463c <SUBGRF_ReadCommand+0x1c>)
 8014630:	f7f3 fafe 	bl	8007c30 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014634:	f384 8810 	msr	PRIMASK, r4
}
 8014638:	bd10      	pop	{r4, pc}
 801463a:	bf00      	nop
 801463c:	200005ec 	.word	0x200005ec

08014640 <SUBGRF_GetRssiInst>:
{
 8014640:	b500      	push	{lr}
 8014642:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8014644:	2201      	movs	r2, #1
 8014646:	a901      	add	r1, sp, #4
 8014648:	2015      	movs	r0, #21
 801464a:	f7ff ffe9 	bl	8014620 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801464e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8014652:	4240      	negs	r0, r0
}
 8014654:	1040      	asrs	r0, r0, #1
 8014656:	b003      	add	sp, #12
 8014658:	f85d fb04 	ldr.w	pc, [sp], #4

0801465c <SUBGRF_GetRxBufferStatus>:
{
 801465c:	b530      	push	{r4, r5, lr}
 801465e:	b083      	sub	sp, #12
 8014660:	4605      	mov	r5, r0
 8014662:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8014664:	2202      	movs	r2, #2
 8014666:	a901      	add	r1, sp, #4
 8014668:	2013      	movs	r0, #19
 801466a:	f7ff ffd9 	bl	8014620 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801466e:	f7ff fadf 	bl	8013c30 <SUBGRF_GetPacketType>
 8014672:	2801      	cmp	r0, #1
 8014674:	d007      	beq.n	8014686 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8014676:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801467a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 801467c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014680:	7023      	strb	r3, [r4, #0]
}
 8014682:	b003      	add	sp, #12
 8014684:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8014686:	4b05      	ldr	r3, [pc, #20]	; (801469c <SUBGRF_GetRxBufferStatus+0x40>)
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	b2db      	uxtb	r3, r3
 801468c:	2b01      	cmp	r3, #1
 801468e:	d1f2      	bne.n	8014676 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8014690:	f240 7002 	movw	r0, #1794	; 0x702
 8014694:	f7ff fae2 	bl	8013c5c <SUBGRF_ReadRegister>
 8014698:	7028      	strb	r0, [r5, #0]
 801469a:	e7ef      	b.n	801467c <SUBGRF_GetRxBufferStatus+0x20>
 801469c:	200016b5 	.word	0x200016b5

080146a0 <SUBGRF_GetPayload>:
{
 80146a0:	b570      	push	{r4, r5, r6, lr}
 80146a2:	b082      	sub	sp, #8
 80146a4:	4606      	mov	r6, r0
 80146a6:	460c      	mov	r4, r1
 80146a8:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80146aa:	2300      	movs	r3, #0
 80146ac:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80146b0:	f10d 0107 	add.w	r1, sp, #7
 80146b4:	4620      	mov	r0, r4
 80146b6:	f7ff ffd1 	bl	801465c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80146ba:	7822      	ldrb	r2, [r4, #0]
 80146bc:	42aa      	cmp	r2, r5
 80146be:	d902      	bls.n	80146c6 <SUBGRF_GetPayload+0x26>
        return 1;
 80146c0:	2001      	movs	r0, #1
}
 80146c2:	b002      	add	sp, #8
 80146c4:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80146c6:	4631      	mov	r1, r6
 80146c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80146cc:	f7ff fb6c 	bl	8013da8 <SUBGRF_ReadBuffer>
    return 0;
 80146d0:	2000      	movs	r0, #0
 80146d2:	e7f6      	b.n	80146c2 <SUBGRF_GetPayload+0x22>

080146d4 <SUBGRF_GetPacketStatus>:
{
 80146d4:	b510      	push	{r4, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80146da:	2203      	movs	r2, #3
 80146dc:	a901      	add	r1, sp, #4
 80146de:	2014      	movs	r0, #20
 80146e0:	f7ff ff9e 	bl	8014620 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 80146e4:	f7ff faa4 	bl	8013c30 <SUBGRF_GetPacketType>
 80146e8:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 80146ea:	b148      	cbz	r0, 8014700 <SUBGRF_GetPacketStatus+0x2c>
 80146ec:	2801      	cmp	r0, #1
 80146ee:	d018      	beq.n	8014722 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80146f0:	2214      	movs	r2, #20
 80146f2:	2100      	movs	r1, #0
 80146f4:	4620      	mov	r0, r4
 80146f6:	f000 fafc 	bl	8014cf2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80146fa:	230f      	movs	r3, #15
 80146fc:	7023      	strb	r3, [r4, #0]
}
 80146fe:	e00e      	b.n	801471e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8014700:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014704:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8014706:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801470a:	425b      	negs	r3, r3
 801470c:	105b      	asrs	r3, r3, #1
 801470e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8014710:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014714:	425b      	negs	r3, r3
 8014716:	105b      	asrs	r3, r3, #1
 8014718:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801471a:	2300      	movs	r3, #0
 801471c:	60a3      	str	r3, [r4, #8]
}
 801471e:	b002      	add	sp, #8
 8014720:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8014722:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014726:	425b      	negs	r3, r3
 8014728:	105b      	asrs	r3, r3, #1
 801472a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801472c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8014730:	3302      	adds	r3, #2
 8014732:	109b      	asrs	r3, r3, #2
 8014734:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8014736:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801473a:	425b      	negs	r3, r3
 801473c:	105b      	asrs	r3, r3, #1
 801473e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8014740:	4b01      	ldr	r3, [pc, #4]	; (8014748 <SUBGRF_GetPacketStatus+0x74>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	6123      	str	r3, [r4, #16]
            break;
 8014746:	e7ea      	b.n	801471e <SUBGRF_GetPacketStatus+0x4a>
 8014748:	200016b0 	.word	0x200016b0

0801474c <SUBGRF_SetSwitch>:
{
 801474c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 801474e:	2901      	cmp	r1, #1
 8014750:	d003      	beq.n	801475a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8014752:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8014754:	f7ef fb23 	bl	8003d9e <RBI_ConfigRFSwitch>
}
 8014758:	bd10      	pop	{r4, pc}
 801475a:	4604      	mov	r4, r0
 801475c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 801475e:	2c01      	cmp	r4, #1
 8014760:	d003      	beq.n	801476a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8014762:	2c02      	cmp	r4, #2
 8014764:	d1f6      	bne.n	8014754 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8014766:	2003      	movs	r0, #3
 8014768:	e7f4      	b.n	8014754 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801476a:	2004      	movs	r0, #4
 801476c:	f7ff fa86 	bl	8013c7c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8014770:	2002      	movs	r0, #2
 8014772:	e7f6      	b.n	8014762 <SUBGRF_SetSwitch+0x16>

08014774 <SUBGRF_SetRfTxPower>:
{
 8014774:	b538      	push	{r3, r4, r5, lr}
 8014776:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8014778:	f7ef fb15 	bl	8003da6 <RBI_GetTxConfig>
    switch (TxConfig)
 801477c:	b148      	cbz	r0, 8014792 <SUBGRF_SetRfTxPower+0x1e>
 801477e:	2802      	cmp	r0, #2
 8014780:	d10d      	bne.n	801479e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8014782:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8014784:	2202      	movs	r2, #2
 8014786:	4621      	mov	r1, r4
 8014788:	4628      	mov	r0, r5
 801478a:	f7ff fdb3 	bl	80142f4 <SUBGRF_SetTxParams>
}
 801478e:	4628      	mov	r0, r5
 8014790:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8014792:	2c0f      	cmp	r4, #15
 8014794:	dc01      	bgt.n	801479a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8014796:	2501      	movs	r5, #1
 8014798:	e7f4      	b.n	8014784 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 801479a:	2502      	movs	r5, #2
 801479c:	e7f2      	b.n	8014784 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801479e:	2501      	movs	r5, #1
 80147a0:	e7f0      	b.n	8014784 <SUBGRF_SetRfTxPower+0x10>

080147a2 <SUBGRF_GetRadioWakeUpTime>:
}
 80147a2:	2001      	movs	r0, #1
 80147a4:	4770      	bx	lr
	...

080147a8 <HAL_SUBGHZ_TxCpltCallback>:
{
 80147a8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80147aa:	4b02      	ldr	r3, [pc, #8]	; (80147b4 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	2001      	movs	r0, #1
 80147b0:	4798      	blx	r3
}
 80147b2:	bd08      	pop	{r3, pc}
 80147b4:	200016b8 	.word	0x200016b8

080147b8 <HAL_SUBGHZ_RxCpltCallback>:
{
 80147b8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80147ba:	4b02      	ldr	r3, [pc, #8]	; (80147c4 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	2002      	movs	r0, #2
 80147c0:	4798      	blx	r3
}
 80147c2:	bd08      	pop	{r3, pc}
 80147c4:	200016b8 	.word	0x200016b8

080147c8 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80147c8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80147ca:	4b02      	ldr	r3, [pc, #8]	; (80147d4 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	2040      	movs	r0, #64	; 0x40
 80147d0:	4798      	blx	r3
}
 80147d2:	bd08      	pop	{r3, pc}
 80147d4:	200016b8 	.word	0x200016b8

080147d8 <HAL_SUBGHZ_CADStatusCallback>:
{
 80147d8:	b508      	push	{r3, lr}
    switch (cadstatus)
 80147da:	b111      	cbz	r1, 80147e2 <HAL_SUBGHZ_CADStatusCallback+0xa>
 80147dc:	2901      	cmp	r1, #1
 80147de:	d005      	beq.n	80147ec <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 80147e0:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80147e2:	4b05      	ldr	r3, [pc, #20]	; (80147f8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2080      	movs	r0, #128	; 0x80
 80147e8:	4798      	blx	r3
            break;
 80147ea:	e7f9      	b.n	80147e0 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80147ec:	4b02      	ldr	r3, [pc, #8]	; (80147f8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80147f4:	4798      	blx	r3
}
 80147f6:	e7f3      	b.n	80147e0 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80147f8:	200016b8 	.word	0x200016b8

080147fc <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80147fc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80147fe:	4b03      	ldr	r3, [pc, #12]	; (801480c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014806:	4798      	blx	r3
}
 8014808:	bd08      	pop	{r3, pc}
 801480a:	bf00      	nop
 801480c:	200016b8 	.word	0x200016b8

08014810 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8014810:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8014812:	4b02      	ldr	r3, [pc, #8]	; (801481c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2020      	movs	r0, #32
 8014818:	4798      	blx	r3
}
 801481a:	bd08      	pop	{r3, pc}
 801481c:	200016b8 	.word	0x200016b8

08014820 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8014820:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8014822:	4b02      	ldr	r3, [pc, #8]	; (801482c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	2004      	movs	r0, #4
 8014828:	4798      	blx	r3
}
 801482a:	bd08      	pop	{r3, pc}
 801482c:	200016b8 	.word	0x200016b8

08014830 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8014830:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8014832:	4b02      	ldr	r3, [pc, #8]	; (801483c <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	2008      	movs	r0, #8
 8014838:	4798      	blx	r3
}
 801483a:	bd08      	pop	{r3, pc}
 801483c:	200016b8 	.word	0x200016b8

08014840 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8014840:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8014842:	4b02      	ldr	r3, [pc, #8]	; (801484c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	2010      	movs	r0, #16
 8014848:	4798      	blx	r3
}
 801484a:	bd08      	pop	{r3, pc}
 801484c:	200016b8 	.word	0x200016b8

08014850 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8014850:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8014852:	4b03      	ldr	r3, [pc, #12]	; (8014860 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801485a:	4798      	blx	r3
}
 801485c:	bd08      	pop	{r3, pc}
 801485e:	bf00      	nop
 8014860:	200016b8 	.word	0x200016b8

08014864 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8014864:	4601      	mov	r1, r0
 8014866:	b188      	cbz	r0, 801488c <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8014868:	2300      	movs	r3, #0
 801486a:	2b15      	cmp	r3, #21
 801486c:	d80d      	bhi.n	801488a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801486e:	4618      	mov	r0, r3
 8014870:	4a07      	ldr	r2, [pc, #28]	; (8014890 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8014872:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014876:	428a      	cmp	r2, r1
 8014878:	d802      	bhi.n	8014880 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801487a:	3301      	adds	r3, #1
 801487c:	b2db      	uxtb	r3, r3
 801487e:	e7f4      	b.n	801486a <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8014880:	4b03      	ldr	r3, [pc, #12]	; (8014890 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8014882:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8014886:	7918      	ldrb	r0, [r3, #4]
 8014888:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 801488a:	e7fe      	b.n	801488a <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 801488c:	201f      	movs	r0, #31
}
 801488e:	4770      	bx	lr
 8014890:	0801af94 	.word	0x0801af94

08014894 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8014894:	b570      	push	{r4, r5, r6, lr}
 8014896:	b082      	sub	sp, #8
 8014898:	4605      	mov	r5, r0
 801489a:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 801489c:	4b1d      	ldr	r3, [pc, #116]	; (8014914 <SUBGRF_GetCFO+0x80>)
 801489e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80148a0:	f640 0007 	movw	r0, #2055	; 0x807
 80148a4:	f7ff f9da 	bl	8013c5c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80148a8:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80148ac:	3308      	adds	r3, #8
 80148ae:	446b      	add	r3, sp
 80148b0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80148b4:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80148b8:	3301      	adds	r3, #1
 80148ba:	fa02 f303 	lsl.w	r3, r2, r3
 80148be:	4a16      	ldr	r2, [pc, #88]	; (8014918 <SUBGRF_GetCFO+0x84>)
 80148c0:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 80148c4:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80148c8:	2807      	cmp	r0, #7
 80148ca:	d921      	bls.n	8014910 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80148cc:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80148ce:	fb03 f000 	mul.w	r0, r3, r0
 80148d2:	2803      	cmp	r0, #3
 80148d4:	d800      	bhi.n	80148d8 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80148d6:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80148d8:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80148dc:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80148e0:	f7ff f9bc 	bl	8013c5c <SUBGRF_ReadRegister>
 80148e4:	0206      	lsls	r6, r0, #8
 80148e6:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80148ea:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80148ee:	f7ff f9b5 	bl	8013c5c <SUBGRF_ReadRegister>
 80148f2:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80148f4:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80148f8:	d003      	beq.n	8014902 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80148fa:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80148fe:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8014902:	096b      	lsrs	r3, r5, #5
 8014904:	fb03 f000 	mul.w	r0, r3, r0
 8014908:	11c0      	asrs	r0, r0, #7
 801490a:	6020      	str	r0, [r4, #0]
}
 801490c:	b002      	add	sp, #8
 801490e:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8014910:	2302      	movs	r3, #2
 8014912:	e7dc      	b.n	80148ce <SUBGRF_GetCFO+0x3a>
 8014914:	0c0a0804 	.word	0x0c0a0804
 8014918:	01e84800 	.word	0x01e84800

0801491c <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 801491c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014920:	4770      	bx	lr

08014922 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8014922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014926:	4770      	bx	lr

08014928 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8014928:	4770      	bx	lr

0801492a <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 801492a:	2000      	movs	r0, #0
 801492c:	4770      	bx	lr

0801492e <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 801492e:	2000      	movs	r0, #0
 8014930:	4770      	bx	lr

08014932 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8014932:	4770      	bx	lr

08014934 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8014934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014938:	4770      	bx	lr

0801493a <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 801493a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801493e:	4770      	bx	lr

08014940 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8014940:	4770      	bx	lr

08014942 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8014942:	4770      	bx	lr

08014944 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8014944:	4770      	bx	lr
	...

08014948 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8014948:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801494a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801494e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8014950:	4b1e      	ldr	r3, [pc, #120]	; (80149cc <TRACE_AllocateBufer+0x84>)
 8014952:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8014956:	8a1a      	ldrh	r2, [r3, #16]
 8014958:	4596      	cmp	lr, r2
 801495a:	d011      	beq.n	8014980 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801495c:	4596      	cmp	lr, r2
 801495e:	d921      	bls.n	80149a4 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8014960:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8014964:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8014966:	4283      	cmp	r3, r0
 8014968:	d81f      	bhi.n	80149aa <TRACE_AllocateBufer+0x62>
 801496a:	4282      	cmp	r2, r0
 801496c:	d91d      	bls.n	80149aa <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801496e:	4b17      	ldr	r3, [pc, #92]	; (80149cc <TRACE_AllocateBufer+0x84>)
 8014970:	2401      	movs	r4, #1
 8014972:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8014974:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8014978:	2400      	movs	r4, #0
 801497a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801497c:	4613      	mov	r3, r2
 801497e:	e014      	b.n	80149aa <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8014980:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8014984:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8014986:	4298      	cmp	r0, r3
 8014988:	d30f      	bcc.n	80149aa <TRACE_AllocateBufer+0x62>
 801498a:	4282      	cmp	r2, r0
 801498c:	d90d      	bls.n	80149aa <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801498e:	4b0f      	ldr	r3, [pc, #60]	; (80149cc <TRACE_AllocateBufer+0x84>)
 8014990:	2401      	movs	r4, #1
 8014992:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8014994:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8014998:	f04f 0e00 	mov.w	lr, #0
 801499c:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80149a0:	4613      	mov	r3, r2
 80149a2:	e002      	b.n	80149aa <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80149a4:	eba2 020e 	sub.w	r2, r2, lr
 80149a8:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80149aa:	4283      	cmp	r3, r0
 80149ac:	d90a      	bls.n	80149c4 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80149ae:	4a07      	ldr	r2, [pc, #28]	; (80149cc <TRACE_AllocateBufer+0x84>)
 80149b0:	8a53      	ldrh	r3, [r2, #18]
 80149b2:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80149b4:	4403      	add	r3, r0
 80149b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80149ba:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80149bc:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149be:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80149c2:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 80149c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149c8:	e7f9      	b.n	80149be <TRACE_AllocateBufer+0x76>
 80149ca:	bf00      	nop
 80149cc:	20001abc 	.word	0x20001abc

080149d0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80149d4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80149d6:	4a03      	ldr	r2, [pc, #12]	; (80149e4 <TRACE_Lock+0x14>)
 80149d8:	8ad3      	ldrh	r3, [r2, #22]
 80149da:	3301      	adds	r3, #1
 80149dc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149de:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80149e2:	4770      	bx	lr
 80149e4:	20001abc 	.word	0x20001abc

080149e8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80149ec:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80149ee:	4a03      	ldr	r2, [pc, #12]	; (80149fc <TRACE_UnLock+0x14>)
 80149f0:	8ad3      	ldrh	r3, [r2, #22]
 80149f2:	3b01      	subs	r3, #1
 80149f4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149f6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80149fa:	4770      	bx	lr
 80149fc:	20001abc 	.word	0x20001abc

08014a00 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8014a00:	4b02      	ldr	r3, [pc, #8]	; (8014a0c <TRACE_IsLocked+0xc>)
 8014a02:	8ad8      	ldrh	r0, [r3, #22]
}
 8014a04:	3800      	subs	r0, #0
 8014a06:	bf18      	it	ne
 8014a08:	2001      	movne	r0, #1
 8014a0a:	4770      	bx	lr
 8014a0c:	20001abc 	.word	0x20001abc

08014a10 <UTIL_ADV_TRACE_Init>:
{
 8014a10:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8014a12:	2218      	movs	r2, #24
 8014a14:	2100      	movs	r1, #0
 8014a16:	4807      	ldr	r0, [pc, #28]	; (8014a34 <UTIL_ADV_TRACE_Init+0x24>)
 8014a18:	f000 f96b 	bl	8014cf2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8014a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014a20:	2100      	movs	r1, #0
 8014a22:	4805      	ldr	r0, [pc, #20]	; (8014a38 <UTIL_ADV_TRACE_Init+0x28>)
 8014a24:	f000 f965 	bl	8014cf2 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8014a28:	4b04      	ldr	r3, [pc, #16]	; (8014a3c <UTIL_ADV_TRACE_Init+0x2c>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	4804      	ldr	r0, [pc, #16]	; (8014a40 <UTIL_ADV_TRACE_Init+0x30>)
 8014a2e:	4798      	blx	r3
}
 8014a30:	bd08      	pop	{r3, pc}
 8014a32:	bf00      	nop
 8014a34:	20001abc 	.word	0x20001abc
 8014a38:	200016bc 	.word	0x200016bc
 8014a3c:	0801a0b8 	.word	0x0801a0b8
 8014a40:	08014bc1 	.word	0x08014bc1

08014a44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8014a44:	4b01      	ldr	r3, [pc, #4]	; (8014a4c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8014a46:	6058      	str	r0, [r3, #4]
}
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop
 8014a4c:	20001abc 	.word	0x20001abc

08014a50 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8014a50:	4b01      	ldr	r3, [pc, #4]	; (8014a58 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8014a52:	7218      	strb	r0, [r3, #8]
}
 8014a54:	4770      	bx	lr
 8014a56:	bf00      	nop
 8014a58:	20001abc 	.word	0x20001abc

08014a5c <TRACE_Send>:
{
 8014a5c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8014a62:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8014a64:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8014a66:	f7ff ffcb 	bl	8014a00 <TRACE_IsLocked>
 8014a6a:	b118      	cbz	r0, 8014a74 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a6c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014a70:	2000      	movs	r0, #0
}
 8014a72:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8014a74:	f7ff ffac 	bl	80149d0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8014a78:	4b1c      	ldr	r3, [pc, #112]	; (8014aec <TRACE_Send+0x90>)
 8014a7a:	8a1a      	ldrh	r2, [r3, #16]
 8014a7c:	8a5b      	ldrh	r3, [r3, #18]
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	d02e      	beq.n	8014ae0 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8014a82:	491a      	ldr	r1, [pc, #104]	; (8014aec <TRACE_Send+0x90>)
 8014a84:	7889      	ldrb	r1, [r1, #2]
 8014a86:	2901      	cmp	r1, #1
 8014a88:	d017      	beq.n	8014aba <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8014a8a:	4a18      	ldr	r2, [pc, #96]	; (8014aec <TRACE_Send+0x90>)
 8014a8c:	7892      	ldrb	r2, [r2, #2]
 8014a8e:	b932      	cbnz	r2, 8014a9e <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014a90:	4a16      	ldr	r2, [pc, #88]	; (8014aec <TRACE_Send+0x90>)
 8014a92:	8a12      	ldrh	r2, [r2, #16]
 8014a94:	4293      	cmp	r3, r2
 8014a96:	d91e      	bls.n	8014ad6 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8014a98:	1a9b      	subs	r3, r3, r2
 8014a9a:	4a14      	ldr	r2, [pc, #80]	; (8014aec <TRACE_Send+0x90>)
 8014a9c:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8014a9e:	4e13      	ldr	r6, [pc, #76]	; (8014aec <TRACE_Send+0x90>)
 8014aa0:	8a33      	ldrh	r3, [r6, #16]
 8014aa2:	4d13      	ldr	r5, [pc, #76]	; (8014af0 <TRACE_Send+0x94>)
 8014aa4:	441d      	add	r5, r3
 8014aa6:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8014aaa:	f7ed fd75 	bl	8002598 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8014aae:	4b11      	ldr	r3, [pc, #68]	; (8014af4 <TRACE_Send+0x98>)
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	8ab1      	ldrh	r1, [r6, #20]
 8014ab4:	4628      	mov	r0, r5
 8014ab6:	4798      	blx	r3
 8014ab8:	e7db      	b.n	8014a72 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8014aba:	480c      	ldr	r0, [pc, #48]	; (8014aec <TRACE_Send+0x90>)
 8014abc:	8801      	ldrh	r1, [r0, #0]
 8014abe:	1a8a      	subs	r2, r1, r2
 8014ac0:	b292      	uxth	r2, r2
 8014ac2:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8014ac4:	2102      	movs	r1, #2
 8014ac6:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014ac8:	2100      	movs	r1, #0
 8014aca:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8014acc:	2a00      	cmp	r2, #0
 8014ace:	d1dc      	bne.n	8014a8a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014ad0:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014ad2:	8201      	strh	r1, [r0, #16]
 8014ad4:	e7d9      	b.n	8014a8a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014ad6:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8014ada:	4b04      	ldr	r3, [pc, #16]	; (8014aec <TRACE_Send+0x90>)
 8014adc:	829a      	strh	r2, [r3, #20]
 8014ade:	e7de      	b.n	8014a9e <TRACE_Send+0x42>
      TRACE_UnLock();
 8014ae0:	f7ff ff82 	bl	80149e8 <TRACE_UnLock>
 8014ae4:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014ae8:	2000      	movs	r0, #0
}
 8014aea:	e7c2      	b.n	8014a72 <TRACE_Send+0x16>
 8014aec:	20001abc 	.word	0x20001abc
 8014af0:	200016bc 	.word	0x200016bc
 8014af4:	0801a0b8 	.word	0x0801a0b8

08014af8 <UTIL_ADV_TRACE_COND_FSend>:
{
 8014af8:	b408      	push	{r3}
 8014afa:	b530      	push	{r4, r5, lr}
 8014afc:	b086      	sub	sp, #24
 8014afe:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8014b00:	2300      	movs	r3, #0
 8014b02:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8014b06:	4b2b      	ldr	r3, [pc, #172]	; (8014bb4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014b08:	7a1b      	ldrb	r3, [r3, #8]
 8014b0a:	4283      	cmp	r3, r0
 8014b0c:	d34c      	bcc.n	8014ba8 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8014b0e:	4b29      	ldr	r3, [pc, #164]	; (8014bb4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014b10:	68db      	ldr	r3, [r3, #12]
 8014b12:	4399      	bics	r1, r3
 8014b14:	d14b      	bne.n	8014bae <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8014b16:	4b27      	ldr	r3, [pc, #156]	; (8014bb4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014b18:	685b      	ldr	r3, [r3, #4]
 8014b1a:	b123      	cbz	r3, 8014b26 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8014b1c:	b11a      	cbz	r2, 8014b26 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8014b1e:	f10d 0102 	add.w	r1, sp, #2
 8014b22:	a801      	add	r0, sp, #4
 8014b24:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8014b26:	ab0a      	add	r3, sp, #40	; 0x28
 8014b28:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8014b2a:	4622      	mov	r2, r4
 8014b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014b30:	4821      	ldr	r0, [pc, #132]	; (8014bb8 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8014b32:	f000 fcc7 	bl	80154c4 <tiny_vsnprintf_like>
 8014b36:	b285      	uxth	r5, r0
  TRACE_Lock();
 8014b38:	f7ff ff4a 	bl	80149d0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8014b3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014b40:	18e8      	adds	r0, r5, r3
 8014b42:	4669      	mov	r1, sp
 8014b44:	b280      	uxth	r0, r0
 8014b46:	f7ff feff 	bl	8014948 <TRACE_AllocateBufer>
 8014b4a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014b4e:	d026      	beq.n	8014b9e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8014b50:	2300      	movs	r3, #0
 8014b52:	e00d      	b.n	8014b70 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8014b54:	f8bd 2000 	ldrh.w	r2, [sp]
 8014b58:	f103 0118 	add.w	r1, r3, #24
 8014b5c:	4469      	add	r1, sp
 8014b5e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8014b62:	4916      	ldr	r1, [pc, #88]	; (8014bbc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8014b64:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8014b66:	3201      	adds	r2, #1
 8014b68:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8014b6c:	3301      	adds	r3, #1
 8014b6e:	b29b      	uxth	r3, r3
 8014b70:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d8ed      	bhi.n	8014b54 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8014b78:	f8bd 0000 	ldrh.w	r0, [sp]
 8014b7c:	9b05      	ldr	r3, [sp, #20]
 8014b7e:	4622      	mov	r2, r4
 8014b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014b84:	4c0d      	ldr	r4, [pc, #52]	; (8014bbc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8014b86:	4420      	add	r0, r4
 8014b88:	f000 fc9c 	bl	80154c4 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8014b8c:	f7ff ff2c 	bl	80149e8 <TRACE_UnLock>
    return TRACE_Send();
 8014b90:	f7ff ff64 	bl	8014a5c <TRACE_Send>
}
 8014b94:	b006      	add	sp, #24
 8014b96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b9a:	b001      	add	sp, #4
 8014b9c:	4770      	bx	lr
  TRACE_UnLock();
 8014b9e:	f7ff ff23 	bl	80149e8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8014ba2:	f06f 0002 	mvn.w	r0, #2
 8014ba6:	e7f5      	b.n	8014b94 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8014ba8:	f06f 0004 	mvn.w	r0, #4
 8014bac:	e7f2      	b.n	8014b94 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8014bae:	f06f 0005 	mvn.w	r0, #5
 8014bb2:	e7ef      	b.n	8014b94 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8014bb4:	20001abc 	.word	0x20001abc
 8014bb8:	20001ad4 	.word	0x20001ad4
 8014bbc:	200016bc 	.word	0x200016bc

08014bc0 <TRACE_TxCpltCallback>:
{
 8014bc0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8014bc6:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8014bc8:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8014bca:	4b26      	ldr	r3, [pc, #152]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014bcc:	789b      	ldrb	r3, [r3, #2]
 8014bce:	2b02      	cmp	r3, #2
 8014bd0:	d016      	beq.n	8014c00 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8014bd2:	4a24      	ldr	r2, [pc, #144]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014bd4:	8a13      	ldrh	r3, [r2, #16]
 8014bd6:	8a90      	ldrh	r0, [r2, #20]
 8014bd8:	4403      	add	r3, r0
 8014bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014bde:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8014be0:	4b20      	ldr	r3, [pc, #128]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014be2:	8a1a      	ldrh	r2, [r3, #16]
 8014be4:	8a5b      	ldrh	r3, [r3, #18]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d003      	beq.n	8014bf2 <TRACE_TxCpltCallback+0x32>
 8014bea:	481e      	ldr	r0, [pc, #120]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014bec:	8ac0      	ldrh	r0, [r0, #22]
 8014bee:	2801      	cmp	r0, #1
 8014bf0:	d00b      	beq.n	8014c0a <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bf2:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8014bf6:	f7ed fcd5 	bl	80025a4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8014bfa:	f7ff fef5 	bl	80149e8 <TRACE_UnLock>
}
 8014bfe:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014c00:	4b18      	ldr	r3, [pc, #96]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014c02:	2200      	movs	r2, #0
 8014c04:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014c06:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8014c08:	e7ea      	b.n	8014be0 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8014c0a:	4816      	ldr	r0, [pc, #88]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014c0c:	7880      	ldrb	r0, [r0, #2]
 8014c0e:	2801      	cmp	r0, #1
 8014c10:	d014      	beq.n	8014c3c <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8014c12:	4a14      	ldr	r2, [pc, #80]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014c14:	7892      	ldrb	r2, [r2, #2]
 8014c16:	b932      	cbnz	r2, 8014c26 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014c18:	4a12      	ldr	r2, [pc, #72]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014c1a:	8a12      	ldrh	r2, [r2, #16]
 8014c1c:	4293      	cmp	r3, r2
 8014c1e:	d91b      	bls.n	8014c58 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8014c20:	1a9b      	subs	r3, r3, r2
 8014c22:	4a10      	ldr	r2, [pc, #64]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014c24:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8014c26:	4b0f      	ldr	r3, [pc, #60]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014c28:	8a1a      	ldrh	r2, [r3, #16]
 8014c2a:	480f      	ldr	r0, [pc, #60]	; (8014c68 <TRACE_TxCpltCallback+0xa8>)
 8014c2c:	4410      	add	r0, r2
 8014c2e:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8014c32:	4a0e      	ldr	r2, [pc, #56]	; (8014c6c <TRACE_TxCpltCallback+0xac>)
 8014c34:	68d2      	ldr	r2, [r2, #12]
 8014c36:	8a99      	ldrh	r1, [r3, #20]
 8014c38:	4790      	blx	r2
 8014c3a:	e7e0      	b.n	8014bfe <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8014c3c:	4c09      	ldr	r4, [pc, #36]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014c3e:	8820      	ldrh	r0, [r4, #0]
 8014c40:	1a82      	subs	r2, r0, r2
 8014c42:	b292      	uxth	r2, r2
 8014c44:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8014c46:	2002      	movs	r0, #2
 8014c48:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014c4a:	2000      	movs	r0, #0
 8014c4c:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8014c4e:	2a00      	cmp	r2, #0
 8014c50:	d1df      	bne.n	8014c12 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014c52:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014c54:	8220      	strh	r0, [r4, #16]
 8014c56:	e7dc      	b.n	8014c12 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014c58:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8014c5c:	4b01      	ldr	r3, [pc, #4]	; (8014c64 <TRACE_TxCpltCallback+0xa4>)
 8014c5e:	829a      	strh	r2, [r3, #20]
 8014c60:	e7e1      	b.n	8014c26 <TRACE_TxCpltCallback+0x66>
 8014c62:	bf00      	nop
 8014c64:	20001abc 	.word	0x20001abc
 8014c68:	200016bc 	.word	0x200016bc
 8014c6c:	0801a0b8 	.word	0x0801a0b8

08014c70 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8014c70:	2300      	movs	r3, #0
 8014c72:	4a02      	ldr	r2, [pc, #8]	; (8014c7c <UTIL_LPM_Init+0xc>)
 8014c74:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8014c76:	4a02      	ldr	r2, [pc, #8]	; (8014c80 <UTIL_LPM_Init+0x10>)
 8014c78:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8014c7a:	4770      	bx	lr
 8014c7c:	20001cd8 	.word	0x20001cd8
 8014c80:	20001cd4 	.word	0x20001cd4

08014c84 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c84:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014c88:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8014c8a:	b141      	cbz	r1, 8014c9e <UTIL_LPM_SetStopMode+0x1a>
 8014c8c:	2901      	cmp	r1, #1
 8014c8e:	d103      	bne.n	8014c98 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8014c90:	4906      	ldr	r1, [pc, #24]	; (8014cac <UTIL_LPM_SetStopMode+0x28>)
 8014c92:	680a      	ldr	r2, [r1, #0]
 8014c94:	4302      	orrs	r2, r0
 8014c96:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c98:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014c9c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8014c9e:	4903      	ldr	r1, [pc, #12]	; (8014cac <UTIL_LPM_SetStopMode+0x28>)
 8014ca0:	680a      	ldr	r2, [r1, #0]
 8014ca2:	ea22 0200 	bic.w	r2, r2, r0
 8014ca6:	600a      	str	r2, [r1, #0]
      break;
 8014ca8:	e7f6      	b.n	8014c98 <UTIL_LPM_SetStopMode+0x14>
 8014caa:	bf00      	nop
 8014cac:	20001cd8 	.word	0x20001cd8

08014cb0 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cb0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014cb4:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8014cb6:	b141      	cbz	r1, 8014cca <UTIL_LPM_SetOffMode+0x1a>
 8014cb8:	2901      	cmp	r1, #1
 8014cba:	d103      	bne.n	8014cc4 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8014cbc:	4906      	ldr	r1, [pc, #24]	; (8014cd8 <UTIL_LPM_SetOffMode+0x28>)
 8014cbe:	680a      	ldr	r2, [r1, #0]
 8014cc0:	4302      	orrs	r2, r0
 8014cc2:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cc4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014cc8:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8014cca:	4903      	ldr	r1, [pc, #12]	; (8014cd8 <UTIL_LPM_SetOffMode+0x28>)
 8014ccc:	680a      	ldr	r2, [r1, #0]
 8014cce:	ea22 0200 	bic.w	r2, r2, r0
 8014cd2:	600a      	str	r2, [r1, #0]
      break;
 8014cd4:	e7f6      	b.n	8014cc4 <UTIL_LPM_SetOffMode+0x14>
 8014cd6:	bf00      	nop
 8014cd8:	20001cd4 	.word	0x20001cd4

08014cdc <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8014cdc:	e004      	b.n	8014ce8 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8014cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ce2:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	1e53      	subs	r3, r2, #1
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	2a00      	cmp	r2, #0
 8014cee:	d1f6      	bne.n	8014cde <UTIL_MEM_cpy_8+0x2>
    }
}
 8014cf0:	4770      	bx	lr

08014cf2 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8014cf2:	e002      	b.n	8014cfa <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8014cf4:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8014cf8:	461a      	mov	r2, r3
 8014cfa:	1e53      	subs	r3, r2, #1
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	2a00      	cmp	r2, #0
 8014d00:	d1f8      	bne.n	8014cf4 <UTIL_MEM_set_8+0x2>
  }
}
 8014d02:	4770      	bx	lr

08014d04 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d04:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014d08:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8014d0a:	4a06      	ldr	r2, [pc, #24]	; (8014d24 <UTIL_SEQ_SetTask+0x20>)
 8014d0c:	6813      	ldr	r3, [r2, #0]
 8014d0e:	4303      	orrs	r3, r0
 8014d10:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8014d12:	4a05      	ldr	r2, [pc, #20]	; (8014d28 <UTIL_SEQ_SetTask+0x24>)
 8014d14:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8014d18:	4303      	orrs	r3, r0
 8014d1a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d1e:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8014d22:	4770      	bx	lr
 8014d24:	20001d00 	.word	0x20001d00
 8014d28:	20001cf8 	.word	0x20001cf8

08014d2c <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d2c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014d30:	b672      	cpsid	i

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask &= (~TaskId_bm);
 8014d32:	4a04      	ldr	r2, [pc, #16]	; (8014d44 <UTIL_SEQ_PauseTask+0x18>)
 8014d34:	6813      	ldr	r3, [r2, #0]
 8014d36:	ea23 0000 	bic.w	r0, r3, r0
 8014d3a:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d3c:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop
 8014d44:	20000218 	.word	0x20000218

08014d48 <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d48:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014d4c:	b672      	cpsid	i

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask |= TaskId_bm;
 8014d4e:	4a03      	ldr	r2, [pc, #12]	; (8014d5c <UTIL_SEQ_ResumeTask+0x14>)
 8014d50:	6813      	ldr	r3, [r2, #0]
 8014d52:	4318      	orrs	r0, r3
 8014d54:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d56:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8014d5a:	4770      	bx	lr
 8014d5c:	20000218 	.word	0x20000218

08014d60 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8014d60:	4770      	bx	lr

08014d62 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8014d62:	4770      	bx	lr

08014d64 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8014d64:	0c03      	lsrs	r3, r0, #16
 8014d66:	041b      	lsls	r3, r3, #16
 8014d68:	b9b3      	cbnz	r3, 8014d98 <SEQ_BitPosition+0x34>
 8014d6a:	0400      	lsls	r0, r0, #16
 8014d6c:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8014d6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014d72:	d102      	bne.n	8014d7a <SEQ_BitPosition+0x16>
 8014d74:	3308      	adds	r3, #8
 8014d76:	b2db      	uxtb	r3, r3
 8014d78:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8014d7a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014d7e:	d102      	bne.n	8014d86 <SEQ_BitPosition+0x22>
 8014d80:	3304      	adds	r3, #4
 8014d82:	b2db      	uxtb	r3, r3
 8014d84:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8014d86:	0f00      	lsrs	r0, r0, #28
 8014d88:	4a04      	ldr	r2, [pc, #16]	; (8014d9c <SEQ_BitPosition+0x38>)
 8014d8a:	5c10      	ldrb	r0, [r2, r0]
 8014d8c:	4418      	add	r0, r3
 8014d8e:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8014d90:	f1c0 001f 	rsb	r0, r0, #31
}
 8014d94:	b2c0      	uxtb	r0, r0
 8014d96:	4770      	bx	lr
uint8_t n = 0U;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	e7e8      	b.n	8014d6e <SEQ_BitPosition+0xa>
 8014d9c:	0801b044 	.word	0x0801b044

08014da0 <UTIL_SEQ_Run>:
{
 8014da0:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8014da2:	4b42      	ldr	r3, [pc, #264]	; (8014eac <UTIL_SEQ_Run+0x10c>)
 8014da4:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8014da6:	4020      	ands	r0, r4
 8014da8:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8014daa:	4b41      	ldr	r3, [pc, #260]	; (8014eb0 <UTIL_SEQ_Run+0x110>)
 8014dac:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8014dae:	4b41      	ldr	r3, [pc, #260]	; (8014eb4 <UTIL_SEQ_Run+0x114>)
 8014db0:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8014db2:	4941      	ldr	r1, [pc, #260]	; (8014eb8 <UTIL_SEQ_Run+0x118>)
 8014db4:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 8014db6:	4941      	ldr	r1, [pc, #260]	; (8014ebc <UTIL_SEQ_Run+0x11c>)
 8014db8:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8014dba:	e02f      	b.n	8014e1c <UTIL_SEQ_Run+0x7c>
      counter++;
 8014dbc:	3301      	adds	r3, #1
 8014dbe:	e034      	b.n	8014e2a <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8014dc0:	4d3f      	ldr	r5, [pc, #252]	; (8014ec0 <UTIL_SEQ_Run+0x120>)
 8014dc2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8014dc6:	6868      	ldr	r0, [r5, #4]
 8014dc8:	4010      	ands	r0, r2
 8014dca:	f7ff ffcb 	bl	8014d64 <SEQ_BitPosition>
 8014dce:	4e3d      	ldr	r6, [pc, #244]	; (8014ec4 <UTIL_SEQ_Run+0x124>)
 8014dd0:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8014dd2:	686a      	ldr	r2, [r5, #4]
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	fa03 f000 	lsl.w	r0, r3, r0
 8014dda:	ea22 0200 	bic.w	r2, r2, r0
 8014dde:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014de0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014de4:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8014de6:	6832      	ldr	r2, [r6, #0]
 8014de8:	fa03 f202 	lsl.w	r2, r3, r2
 8014dec:	43d6      	mvns	r6, r2
 8014dee:	4d30      	ldr	r5, [pc, #192]	; (8014eb0 <UTIL_SEQ_Run+0x110>)
 8014df0:	6828      	ldr	r0, [r5, #0]
 8014df2:	ea20 0202 	bic.w	r2, r0, r2
 8014df6:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d12d      	bne.n	8014e58 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014dfc:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8014e00:	4b30      	ldr	r3, [pc, #192]	; (8014ec4 <UTIL_SEQ_Run+0x124>)
 8014e02:	681a      	ldr	r2, [r3, #0]
 8014e04:	4b30      	ldr	r3, [pc, #192]	; (8014ec8 <UTIL_SEQ_Run+0x128>)
 8014e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e0a:	4798      	blx	r3
    local_taskset = TaskSet;
 8014e0c:	4b28      	ldr	r3, [pc, #160]	; (8014eb0 <UTIL_SEQ_Run+0x110>)
 8014e0e:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 8014e10:	4b28      	ldr	r3, [pc, #160]	; (8014eb4 <UTIL_SEQ_Run+0x114>)
 8014e12:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8014e14:	4928      	ldr	r1, [pc, #160]	; (8014eb8 <UTIL_SEQ_Run+0x118>)
 8014e16:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 8014e18:	4928      	ldr	r1, [pc, #160]	; (8014ebc <UTIL_SEQ_Run+0x11c>)
 8014e1a:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8014e1c:	4002      	ands	r2, r0
 8014e1e:	4d23      	ldr	r5, [pc, #140]	; (8014eac <UTIL_SEQ_Run+0x10c>)
 8014e20:	682d      	ldr	r5, [r5, #0]
 8014e22:	422a      	tst	r2, r5
 8014e24:	d020      	beq.n	8014e68 <UTIL_SEQ_Run+0xc8>
 8014e26:	400b      	ands	r3, r1
 8014e28:	d11e      	bne.n	8014e68 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8014e2a:	4a25      	ldr	r2, [pc, #148]	; (8014ec0 <UTIL_SEQ_Run+0x120>)
 8014e2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014e30:	4002      	ands	r2, r0
 8014e32:	422a      	tst	r2, r5
 8014e34:	d0c2      	beq.n	8014dbc <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8014e36:	4922      	ldr	r1, [pc, #136]	; (8014ec0 <UTIL_SEQ_Run+0x120>)
 8014e38:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8014e3c:	4002      	ands	r2, r0
 8014e3e:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8014e40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e44:	6849      	ldr	r1, [r1, #4]
 8014e46:	4211      	tst	r1, r2
 8014e48:	d1ba      	bne.n	8014dc0 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8014e4a:	491d      	ldr	r1, [pc, #116]	; (8014ec0 <UTIL_SEQ_Run+0x120>)
 8014e4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e54:	6048      	str	r0, [r1, #4]
 8014e56:	e7b3      	b.n	8014dc0 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8014e58:	3b01      	subs	r3, #1
 8014e5a:	4819      	ldr	r0, [pc, #100]	; (8014ec0 <UTIL_SEQ_Run+0x120>)
 8014e5c:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8014e60:	4032      	ands	r2, r6
 8014e62:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8014e66:	e7c7      	b.n	8014df8 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8014e68:	4b16      	ldr	r3, [pc, #88]	; (8014ec4 <UTIL_SEQ_Run+0x124>)
 8014e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e6e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8014e70:	f7ff ff76 	bl	8014d60 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e74:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014e78:	b672      	cpsid	i
  local_taskset = TaskSet;
 8014e7a:	4b0d      	ldr	r3, [pc, #52]	; (8014eb0 <UTIL_SEQ_Run+0x110>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8014e7e:	4a0d      	ldr	r2, [pc, #52]	; (8014eb4 <UTIL_SEQ_Run+0x114>)
 8014e80:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8014e82:	4a0d      	ldr	r2, [pc, #52]	; (8014eb8 <UTIL_SEQ_Run+0x118>)
 8014e84:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8014e86:	4013      	ands	r3, r2
 8014e88:	4a08      	ldr	r2, [pc, #32]	; (8014eac <UTIL_SEQ_Run+0x10c>)
 8014e8a:	6812      	ldr	r2, [r2, #0]
 8014e8c:	4213      	tst	r3, r2
 8014e8e:	d103      	bne.n	8014e98 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8014e90:	4b0a      	ldr	r3, [pc, #40]	; (8014ebc <UTIL_SEQ_Run+0x11c>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	420b      	tst	r3, r1
 8014e96:	d006      	beq.n	8014ea6 <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e98:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8014e9c:	f7ff ff61 	bl	8014d62 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8014ea0:	4b02      	ldr	r3, [pc, #8]	; (8014eac <UTIL_SEQ_Run+0x10c>)
 8014ea2:	601c      	str	r4, [r3, #0]
}
 8014ea4:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 8014ea6:	f7ed fafd 	bl	80024a4 <UTIL_SEQ_Idle>
 8014eaa:	e7f5      	b.n	8014e98 <UTIL_SEQ_Run+0xf8>
 8014eac:	20000214 	.word	0x20000214
 8014eb0:	20001d00 	.word	0x20001d00
 8014eb4:	20001ce0 	.word	0x20001ce0
 8014eb8:	20000218 	.word	0x20000218
 8014ebc:	20001ce4 	.word	0x20001ce4
 8014ec0:	20001cf8 	.word	0x20001cf8
 8014ec4:	20001cdc 	.word	0x20001cdc
 8014ec8:	20001ce8 	.word	0x20001ce8

08014ecc <UTIL_SEQ_RegTask>:
{
 8014ecc:	b538      	push	{r3, r4, r5, lr}
 8014ece:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ed0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014ed4:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8014ed6:	f7ff ff45 	bl	8014d64 <SEQ_BitPosition>
 8014eda:	4b03      	ldr	r3, [pc, #12]	; (8014ee8 <UTIL_SEQ_RegTask+0x1c>)
 8014edc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ee0:	f385 8810 	msr	PRIMASK, r5
}
 8014ee4:	bd38      	pop	{r3, r4, r5, pc}
 8014ee6:	bf00      	nop
 8014ee8:	20001ce8 	.word	0x20001ce8

08014eec <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8014eec:	b082      	sub	sp, #8
 8014eee:	b082      	sub	sp, #8
 8014ef0:	f10d 0c08 	add.w	ip, sp, #8
 8014ef4:	e90c 0006 	stmdb	ip, {r1, r2}
 8014ef8:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8014efa:	2200      	movs	r2, #0
 8014efc:	6002      	str	r2, [r0, #0]
 8014efe:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8014f00:	440b      	add	r3, r1
 8014f02:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014f04:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014f08:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014f0c:	440a      	add	r2, r1
 8014f0e:	b291      	uxth	r1, r2
 8014f10:	b212      	sxth	r2, r2
 8014f12:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8014f14:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8014f18:	db04      	blt.n	8014f24 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8014f1e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8014f22:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8014f24:	b002      	add	sp, #8
 8014f26:	b002      	add	sp, #8
 8014f28:	4770      	bx	lr

08014f2a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8014f2a:	b082      	sub	sp, #8
 8014f2c:	b082      	sub	sp, #8
 8014f2e:	f10d 0c08 	add.w	ip, sp, #8
 8014f32:	e90c 0006 	stmdb	ip, {r1, r2}
 8014f36:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8014f38:	2200      	movs	r2, #0
 8014f3a:	6002      	str	r2, [r0, #0]
 8014f3c:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8014f3e:	1acb      	subs	r3, r1, r3
 8014f40:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8014f42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014f46:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014f4a:	1a52      	subs	r2, r2, r1
 8014f4c:	b291      	uxth	r1, r2
 8014f4e:	b212      	sxth	r2, r2
 8014f50:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8014f52:	2a00      	cmp	r2, #0
 8014f54:	db02      	blt.n	8014f5c <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8014f56:	b002      	add	sp, #8
 8014f58:	b002      	add	sp, #8
 8014f5a:	4770      	bx	lr
    c.Seconds--;
 8014f5c:	3b01      	subs	r3, #1
 8014f5e:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8014f60:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8014f64:	8081      	strh	r1, [r0, #4]
  return c;
 8014f66:	e7f6      	b.n	8014f56 <SysTimeSub+0x2c>

08014f68 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8014f68:	b530      	push	{r4, r5, lr}
 8014f6a:	b089      	sub	sp, #36	; 0x24
 8014f6c:	ac02      	add	r4, sp, #8
 8014f6e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014f72:	2300      	movs	r3, #0
 8014f74:	9304      	str	r3, [sp, #16]
 8014f76:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014f7a:	4d0b      	ldr	r5, [pc, #44]	; (8014fa8 <SysTimeSet+0x40>)
 8014f7c:	692b      	ldr	r3, [r5, #16]
 8014f7e:	a805      	add	r0, sp, #20
 8014f80:	4798      	blx	r3
 8014f82:	4603      	mov	r3, r0
 8014f84:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8014f86:	9a05      	ldr	r2, [sp, #20]
 8014f88:	9200      	str	r2, [sp, #0]
 8014f8a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014f8e:	a806      	add	r0, sp, #24
 8014f90:	f7ff ffcb 	bl	8014f2a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8014f94:	682b      	ldr	r3, [r5, #0]
 8014f96:	9806      	ldr	r0, [sp, #24]
 8014f98:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8014f9a:	68ab      	ldr	r3, [r5, #8]
 8014f9c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8014fa0:	4798      	blx	r3
}
 8014fa2:	b009      	add	sp, #36	; 0x24
 8014fa4:	bd30      	pop	{r4, r5, pc}
 8014fa6:	bf00      	nop
 8014fa8:	0801a078 	.word	0x0801a078

08014fac <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8014fac:	b530      	push	{r4, r5, lr}
 8014fae:	b087      	sub	sp, #28
 8014fb0:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	9304      	str	r3, [sp, #16]
 8014fb6:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8014fba:	6003      	str	r3, [r0, #0]
 8014fbc:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014fbe:	4d0b      	ldr	r5, [pc, #44]	; (8014fec <SysTimeGet+0x40>)
 8014fc0:	692b      	ldr	r3, [r5, #16]
 8014fc2:	a805      	add	r0, sp, #20
 8014fc4:	4798      	blx	r3
 8014fc6:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8014fc8:	68eb      	ldr	r3, [r5, #12]
 8014fca:	4798      	blx	r3
 8014fcc:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8014fd0:	686b      	ldr	r3, [r5, #4]
 8014fd2:	4798      	blx	r3
 8014fd4:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8014fd6:	9b05      	ldr	r3, [sp, #20]
 8014fd8:	9300      	str	r3, [sp, #0]
 8014fda:	9b04      	ldr	r3, [sp, #16]
 8014fdc:	aa02      	add	r2, sp, #8
 8014fde:	ca06      	ldmia	r2, {r1, r2}
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f7ff ff83 	bl	8014eec <SysTimeAdd>

  return sysTime;
}
 8014fe6:	4620      	mov	r0, r4
 8014fe8:	b007      	add	sp, #28
 8014fea:	bd30      	pop	{r4, r5, pc}
 8014fec:	0801a078 	.word	0x0801a078

08014ff0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8014ff0:	b530      	push	{r4, r5, lr}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	9300      	str	r3, [sp, #0]
 8014ffa:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014ffe:	4b06      	ldr	r3, [pc, #24]	; (8015018 <SysTimeGetMcuTime+0x28>)
 8015000:	691b      	ldr	r3, [r3, #16]
 8015002:	466d      	mov	r5, sp
 8015004:	a801      	add	r0, sp, #4
 8015006:	4798      	blx	r3
 8015008:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801500a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801500e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8015012:	4620      	mov	r0, r4
 8015014:	b003      	add	sp, #12
 8015016:	bd30      	pop	{r4, r5, pc}
 8015018:	0801a078 	.word	0x0801a078

0801501c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801501c:	b530      	push	{r4, r5, lr}
 801501e:	b089      	sub	sp, #36	; 0x24
 8015020:	ac02      	add	r4, sp, #8
 8015022:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8015026:	4d0c      	ldr	r5, [pc, #48]	; (8015058 <SysTimeToMs+0x3c>)
 8015028:	68eb      	ldr	r3, [r5, #12]
 801502a:	4798      	blx	r3
 801502c:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8015030:	686b      	ldr	r3, [r5, #4]
 8015032:	4798      	blx	r3
 8015034:	4603      	mov	r3, r0
 8015036:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8015038:	9a07      	ldr	r2, [sp, #28]
 801503a:	9200      	str	r2, [sp, #0]
 801503c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015040:	a804      	add	r0, sp, #16
 8015042:	f7ff ff72 	bl	8014f2a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8015046:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 801504a:	9a04      	ldr	r2, [sp, #16]
 801504c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015050:	fb00 3002 	mla	r0, r0, r2, r3
 8015054:	b009      	add	sp, #36	; 0x24
 8015056:	bd30      	pop	{r4, r5, pc}
 8015058:	0801a078 	.word	0x0801a078

0801505c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801505c:	b530      	push	{r4, r5, lr}
 801505e:	b087      	sub	sp, #28
 8015060:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8015062:	4b12      	ldr	r3, [pc, #72]	; (80150ac <SysTimeFromMs+0x50>)
 8015064:	fba3 2301 	umull	r2, r3, r3, r1
 8015068:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801506a:	9304      	str	r3, [sp, #16]
 801506c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8015070:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015074:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8015078:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 801507c:	2300      	movs	r3, #0
 801507e:	9302      	str	r3, [sp, #8]
 8015080:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8015082:	4d0b      	ldr	r5, [pc, #44]	; (80150b0 <SysTimeFromMs+0x54>)
 8015084:	68eb      	ldr	r3, [r5, #12]
 8015086:	4798      	blx	r3
 8015088:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801508c:	686b      	ldr	r3, [r5, #4]
 801508e:	4798      	blx	r3
 8015090:	4603      	mov	r3, r0
 8015092:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8015094:	9a03      	ldr	r2, [sp, #12]
 8015096:	9200      	str	r2, [sp, #0]
 8015098:	aa06      	add	r2, sp, #24
 801509a:	e912 0006 	ldmdb	r2, {r1, r2}
 801509e:	4620      	mov	r0, r4
 80150a0:	f7ff ff24 	bl	8014eec <SysTimeAdd>
}
 80150a4:	4620      	mov	r0, r4
 80150a6:	b007      	add	sp, #28
 80150a8:	bd30      	pop	{r4, r5, pc}
 80150aa:	bf00      	nop
 80150ac:	10624dd3 	.word	0x10624dd3
 80150b0:	0801a078 	.word	0x0801a078

080150b4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80150b4:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80150b6:	4b03      	ldr	r3, [pc, #12]	; (80150c4 <UTIL_TIMER_Init+0x10>)
 80150b8:	2200      	movs	r2, #0
 80150ba:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80150bc:	4b02      	ldr	r3, [pc, #8]	; (80150c8 <UTIL_TIMER_Init+0x14>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	4798      	blx	r3
}
 80150c2:	bd08      	pop	{r3, pc}
 80150c4:	20001d04 	.word	0x20001d04
 80150c8:	0801a08c 	.word	0x0801a08c

080150cc <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80150cc:	b1a8      	cbz	r0, 80150fa <UTIL_TIMER_Create+0x2e>
{
 80150ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150d0:	4617      	mov	r7, r2
 80150d2:	461e      	mov	r6, r3
 80150d4:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80150d6:	b193      	cbz	r3, 80150fe <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80150d8:	2500      	movs	r5, #0
 80150da:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80150dc:	4b09      	ldr	r3, [pc, #36]	; (8015104 <UTIL_TIMER_Create+0x38>)
 80150de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150e0:	4608      	mov	r0, r1
 80150e2:	4798      	blx	r3
 80150e4:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80150e6:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80150e8:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80150ea:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80150ec:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80150ee:	9b06      	ldr	r3, [sp, #24]
 80150f0:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80150f2:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80150f4:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80150f6:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80150f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80150fa:	2001      	movs	r0, #1
}
 80150fc:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80150fe:	2001      	movs	r0, #1
 8015100:	e7fa      	b.n	80150f8 <UTIL_TIMER_Create+0x2c>
 8015102:	bf00      	nop
 8015104:	0801a08c 	.word	0x0801a08c

08015108 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8015108:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801510a:	4c03      	ldr	r4, [pc, #12]	; (8015118 <UTIL_TIMER_GetCurrentTime+0x10>)
 801510c:	69e3      	ldr	r3, [r4, #28]
 801510e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8015110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015112:	4798      	blx	r3
}
 8015114:	bd10      	pop	{r4, pc}
 8015116:	bf00      	nop
 8015118:	0801a08c 	.word	0x0801a08c

0801511c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801511c:	b570      	push	{r4, r5, r6, lr}
 801511e:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8015120:	4d05      	ldr	r5, [pc, #20]	; (8015138 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8015122:	69eb      	ldr	r3, [r5, #28]
 8015124:	4798      	blx	r3
 8015126:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8015128:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801512a:	4630      	mov	r0, r6
 801512c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801512e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015130:	1a20      	subs	r0, r4, r0
 8015132:	4798      	blx	r3
}
 8015134:	bd70      	pop	{r4, r5, r6, pc}
 8015136:	bf00      	nop
 8015138:	0801a08c 	.word	0x0801a08c

0801513c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801513c:	4b05      	ldr	r3, [pc, #20]	; (8015154 <TimerExists+0x18>)
 801513e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8015140:	e000      	b.n	8015144 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8015142:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8015144:	b11b      	cbz	r3, 801514e <TimerExists+0x12>
    if( cur == TimerObject )
 8015146:	4283      	cmp	r3, r0
 8015148:	d1fb      	bne.n	8015142 <TimerExists+0x6>
      return true;
 801514a:	2001      	movs	r0, #1
  }
  return false;
}
 801514c:	4770      	bx	lr
  return false;
 801514e:	2000      	movs	r0, #0
 8015150:	4770      	bx	lr
 8015152:	bf00      	nop
 8015154:	20001d04 	.word	0x20001d04

08015158 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8015158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801515a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801515c:	4e09      	ldr	r6, [pc, #36]	; (8015184 <TimerSetTimeout+0x2c>)
 801515e:	6a33      	ldr	r3, [r6, #32]
 8015160:	4798      	blx	r3
 8015162:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8015164:	2301      	movs	r3, #1
 8015166:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8015168:	6827      	ldr	r7, [r4, #0]
 801516a:	69b6      	ldr	r6, [r6, #24]
 801516c:	47b0      	blx	r6
 801516e:	4428      	add	r0, r5
 8015170:	4287      	cmp	r7, r0
 8015172:	d202      	bcs.n	801517a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8015174:	47b0      	blx	r6
 8015176:	4428      	add	r0, r5
 8015178:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801517a:	4b02      	ldr	r3, [pc, #8]	; (8015184 <TimerSetTimeout+0x2c>)
 801517c:	689b      	ldr	r3, [r3, #8]
 801517e:	6820      	ldr	r0, [r4, #0]
 8015180:	4798      	blx	r3
}
 8015182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015184:	0801a08c 	.word	0x0801a08c

08015188 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8015188:	b368      	cbz	r0, 80151e6 <UTIL_TIMER_Stop+0x5e>
{
 801518a:	b510      	push	{r4, lr}
 801518c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801518e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015192:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8015194:	4b15      	ldr	r3, [pc, #84]	; (80151ec <UTIL_TIMER_Stop+0x64>)
 8015196:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8015198:	2301      	movs	r3, #1
 801519a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 801519c:	b1e1      	cbz	r1, 80151d8 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801519e:	2300      	movs	r3, #0
 80151a0:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80151a2:	4288      	cmp	r0, r1
 80151a4:	d006      	beq.n	80151b4 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80151a6:	460b      	mov	r3, r1
        while( cur != NULL )
 80151a8:	b1b3      	cbz	r3, 80151d8 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d011      	beq.n	80151d2 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80151ae:	4619      	mov	r1, r3
            cur = cur->Next;
 80151b0:	695b      	ldr	r3, [r3, #20]
 80151b2:	e7f9      	b.n	80151a8 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80151b4:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80151b6:	6948      	ldr	r0, [r1, #20]
 80151b8:	b120      	cbz	r0, 80151c4 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80151ba:	4b0c      	ldr	r3, [pc, #48]	; (80151ec <UTIL_TIMER_Stop+0x64>)
 80151bc:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80151be:	f7ff ffcb 	bl	8015158 <TimerSetTimeout>
 80151c2:	e009      	b.n	80151d8 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80151c4:	4b0a      	ldr	r3, [pc, #40]	; (80151f0 <UTIL_TIMER_Stop+0x68>)
 80151c6:	68db      	ldr	r3, [r3, #12]
 80151c8:	4798      	blx	r3
            TimerListHead = NULL;
 80151ca:	4b08      	ldr	r3, [pc, #32]	; (80151ec <UTIL_TIMER_Stop+0x64>)
 80151cc:	2200      	movs	r2, #0
 80151ce:	601a      	str	r2, [r3, #0]
 80151d0:	e002      	b.n	80151d8 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80151d2:	695b      	ldr	r3, [r3, #20]
 80151d4:	b123      	cbz	r3, 80151e0 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80151d6:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80151d8:	f384 8810 	msr	PRIMASK, r4
}
 80151dc:	2000      	movs	r0, #0
}
 80151de:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80151e0:	2300      	movs	r3, #0
 80151e2:	614b      	str	r3, [r1, #20]
 80151e4:	e7f8      	b.n	80151d8 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80151e6:	2001      	movs	r0, #1
}
 80151e8:	4770      	bx	lr
 80151ea:	bf00      	nop
 80151ec:	20001d04 	.word	0x20001d04
 80151f0:	0801a08c 	.word	0x0801a08c

080151f4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80151f4:	4b09      	ldr	r3, [pc, #36]	; (801521c <TimerInsertTimer+0x28>)
 80151f6:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80151f8:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80151fa:	e001      	b.n	8015200 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 80151fc:	461a      	mov	r2, r3
        next = next->Next;
 80151fe:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8015200:	6951      	ldr	r1, [r2, #20]
 8015202:	b139      	cbz	r1, 8015214 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8015204:	6819      	ldr	r1, [r3, #0]
 8015206:	f8d0 c000 	ldr.w	ip, [r0]
 801520a:	458c      	cmp	ip, r1
 801520c:	d8f6      	bhi.n	80151fc <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801520e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8015210:	6143      	str	r3, [r0, #20]
        return;
 8015212:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8015214:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8015216:	2300      	movs	r3, #0
 8015218:	6143      	str	r3, [r0, #20]
}
 801521a:	4770      	bx	lr
 801521c:	20001d04 	.word	0x20001d04

08015220 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8015220:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8015222:	4b05      	ldr	r3, [pc, #20]	; (8015238 <TimerInsertNewHeadTimer+0x18>)
 8015224:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8015226:	b10b      	cbz	r3, 801522c <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8015228:	2200      	movs	r2, #0
 801522a:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801522c:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801522e:	4b02      	ldr	r3, [pc, #8]	; (8015238 <TimerInsertNewHeadTimer+0x18>)
 8015230:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8015232:	f7ff ff91 	bl	8015158 <TimerSetTimeout>
}
 8015236:	bd08      	pop	{r3, pc}
 8015238:	20001d04 	.word	0x20001d04

0801523c <UTIL_TIMER_Start>:
{
 801523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801523e:	2800      	cmp	r0, #0
 8015240:	d036      	beq.n	80152b0 <UTIL_TIMER_Start+0x74>
 8015242:	4604      	mov	r4, r0
 8015244:	f7ff ff7a 	bl	801513c <TimerExists>
 8015248:	2800      	cmp	r0, #0
 801524a:	d134      	bne.n	80152b6 <UTIL_TIMER_Start+0x7a>
 801524c:	7a65      	ldrb	r5, [r4, #9]
 801524e:	2d00      	cmp	r5, #0
 8015250:	d133      	bne.n	80152ba <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015252:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015256:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8015258:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801525a:	4b19      	ldr	r3, [pc, #100]	; (80152c0 <UTIL_TIMER_Start+0x84>)
 801525c:	6a1b      	ldr	r3, [r3, #32]
 801525e:	4798      	blx	r3
    if( ticks < minValue )
 8015260:	4287      	cmp	r7, r0
 8015262:	d300      	bcc.n	8015266 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8015264:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8015266:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8015268:	2300      	movs	r3, #0
 801526a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 801526c:	2201      	movs	r2, #1
 801526e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8015270:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8015272:	4b14      	ldr	r3, [pc, #80]	; (80152c4 <UTIL_TIMER_Start+0x88>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	b183      	cbz	r3, 801529a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8015278:	4b11      	ldr	r3, [pc, #68]	; (80152c0 <UTIL_TIMER_Start+0x84>)
 801527a:	699b      	ldr	r3, [r3, #24]
 801527c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801527e:	6823      	ldr	r3, [r4, #0]
 8015280:	4418      	add	r0, r3
 8015282:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8015284:	4b0f      	ldr	r3, [pc, #60]	; (80152c4 <UTIL_TIMER_Start+0x88>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	4298      	cmp	r0, r3
 801528c:	d20c      	bcs.n	80152a8 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801528e:	4620      	mov	r0, r4
 8015290:	f7ff ffc6 	bl	8015220 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015294:	f386 8810 	msr	PRIMASK, r6
}
 8015298:	e00b      	b.n	80152b2 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 801529a:	4b09      	ldr	r3, [pc, #36]	; (80152c0 <UTIL_TIMER_Start+0x84>)
 801529c:	691b      	ldr	r3, [r3, #16]
 801529e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80152a0:	4620      	mov	r0, r4
 80152a2:	f7ff ffbd 	bl	8015220 <TimerInsertNewHeadTimer>
 80152a6:	e7f5      	b.n	8015294 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80152a8:	4620      	mov	r0, r4
 80152aa:	f7ff ffa3 	bl	80151f4 <TimerInsertTimer>
 80152ae:	e7f1      	b.n	8015294 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80152b0:	2501      	movs	r5, #1
}
 80152b2:	4628      	mov	r0, r5
 80152b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80152b6:	2501      	movs	r5, #1
 80152b8:	e7fb      	b.n	80152b2 <UTIL_TIMER_Start+0x76>
 80152ba:	2501      	movs	r5, #1
 80152bc:	e7f9      	b.n	80152b2 <UTIL_TIMER_Start+0x76>
 80152be:	bf00      	nop
 80152c0:	0801a08c 	.word	0x0801a08c
 80152c4:	20001d04 	.word	0x20001d04

080152c8 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80152c8:	b198      	cbz	r0, 80152f2 <UTIL_TIMER_SetPeriod+0x2a>
{
 80152ca:	b510      	push	{r4, lr}
 80152cc:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80152ce:	4b0a      	ldr	r3, [pc, #40]	; (80152f8 <UTIL_TIMER_SetPeriod+0x30>)
 80152d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152d2:	4608      	mov	r0, r1
 80152d4:	4798      	blx	r3
 80152d6:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80152d8:	4620      	mov	r0, r4
 80152da:	f7ff ff2f 	bl	801513c <TimerExists>
 80152de:	b908      	cbnz	r0, 80152e4 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80152e0:	2000      	movs	r0, #0
}
 80152e2:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80152e4:	4620      	mov	r0, r4
 80152e6:	f7ff ff4f 	bl	8015188 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80152ea:	4620      	mov	r0, r4
 80152ec:	f7ff ffa6 	bl	801523c <UTIL_TIMER_Start>
 80152f0:	e7f7      	b.n	80152e2 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80152f2:	2001      	movs	r0, #1
}
 80152f4:	4770      	bx	lr
 80152f6:	bf00      	nop
 80152f8:	0801a08c 	.word	0x0801a08c

080152fc <UTIL_TIMER_IRQ_Handler>:
{
 80152fc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152fe:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015302:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8015304:	4c1e      	ldr	r4, [pc, #120]	; (8015380 <UTIL_TIMER_IRQ_Handler+0x84>)
 8015306:	6963      	ldr	r3, [r4, #20]
 8015308:	4798      	blx	r3
 801530a:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801530c:	6923      	ldr	r3, [r4, #16]
 801530e:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8015310:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8015312:	4b1c      	ldr	r3, [pc, #112]	; (8015384 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	b923      	cbnz	r3, 8015322 <UTIL_TIMER_IRQ_Handler+0x26>
 8015318:	e018      	b.n	801534c <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801531a:	2200      	movs	r2, #0
 801531c:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801531e:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8015320:	b1a3      	cbz	r3, 801534c <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8015322:	681a      	ldr	r2, [r3, #0]
 8015324:	42a2      	cmp	r2, r4
 8015326:	d9f8      	bls.n	801531a <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8015328:	1a31      	subs	r1, r6, r0
 801532a:	440a      	add	r2, r1
 801532c:	601a      	str	r2, [r3, #0]
 801532e:	e7f6      	b.n	801531e <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8015330:	4b14      	ldr	r3, [pc, #80]	; (8015384 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015332:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8015334:	6962      	ldr	r2, [r4, #20]
 8015336:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8015338:	2300      	movs	r3, #0
 801533a:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 801533c:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801533e:	68e3      	ldr	r3, [r4, #12]
 8015340:	6920      	ldr	r0, [r4, #16]
 8015342:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8015344:	8963      	ldrh	r3, [r4, #10]
 8015346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801534a:	d012      	beq.n	8015372 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801534c:	4b0d      	ldr	r3, [pc, #52]	; (8015384 <UTIL_TIMER_IRQ_Handler+0x88>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	b13b      	cbz	r3, 8015362 <UTIL_TIMER_IRQ_Handler+0x66>
 8015352:	681c      	ldr	r4, [r3, #0]
 8015354:	2c00      	cmp	r4, #0
 8015356:	d0eb      	beq.n	8015330 <UTIL_TIMER_IRQ_Handler+0x34>
 8015358:	4b09      	ldr	r3, [pc, #36]	; (8015380 <UTIL_TIMER_IRQ_Handler+0x84>)
 801535a:	699b      	ldr	r3, [r3, #24]
 801535c:	4798      	blx	r3
 801535e:	4284      	cmp	r4, r0
 8015360:	d3e6      	bcc.n	8015330 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8015362:	4b08      	ldr	r3, [pc, #32]	; (8015384 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015364:	6818      	ldr	r0, [r3, #0]
 8015366:	b108      	cbz	r0, 801536c <UTIL_TIMER_IRQ_Handler+0x70>
 8015368:	7a03      	ldrb	r3, [r0, #8]
 801536a:	b133      	cbz	r3, 801537a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801536c:	f385 8810 	msr	PRIMASK, r5
}
 8015370:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8015372:	4620      	mov	r0, r4
 8015374:	f7ff ff62 	bl	801523c <UTIL_TIMER_Start>
 8015378:	e7e8      	b.n	801534c <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 801537a:	f7ff feed 	bl	8015158 <TimerSetTimeout>
 801537e:	e7f5      	b.n	801536c <UTIL_TIMER_IRQ_Handler+0x70>
 8015380:	0801a08c 	.word	0x0801a08c
 8015384:	20001d04 	.word	0x20001d04

08015388 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8015388:	4601      	mov	r1, r0
  int i = 0;
 801538a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801538c:	e008      	b.n	80153a0 <ee_skip_atoi+0x18>
 801538e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015392:	1c53      	adds	r3, r2, #1
 8015394:	600b      	str	r3, [r1, #0]
 8015396:	7813      	ldrb	r3, [r2, #0]
 8015398:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801539c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80153a0:	680a      	ldr	r2, [r1, #0]
 80153a2:	7813      	ldrb	r3, [r2, #0]
 80153a4:	3b30      	subs	r3, #48	; 0x30
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	2b09      	cmp	r3, #9
 80153aa:	d9f0      	bls.n	801538e <ee_skip_atoi+0x6>
  return i;
}
 80153ac:	4770      	bx	lr
	...

080153b0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80153b0:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80153b4:	b093      	sub	sp, #76	; 0x4c
 80153b6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80153b8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80153ba:	f016 0f40 	tst.w	r6, #64	; 0x40
 80153be:	d110      	bne.n	80153e2 <ee_number+0x32>
  char *dig = lower_digits;
 80153c0:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80154bc <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80153c4:	1e9f      	subs	r7, r3, #2
 80153c6:	2f22      	cmp	r7, #34	; 0x22
 80153c8:	d875      	bhi.n	80154b6 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80153ca:	f016 0401 	ands.w	r4, r6, #1
 80153ce:	d00b      	beq.n	80153e8 <ee_number+0x38>
 80153d0:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80153d4:	f016 0f02 	tst.w	r6, #2
 80153d8:	d00f      	beq.n	80153fa <ee_number+0x4a>
  {
    if (num < 0)
 80153da:	2a00      	cmp	r2, #0
 80153dc:	db07      	blt.n	80153ee <ee_number+0x3e>
  sign = 0;
 80153de:	2700      	movs	r7, #0
 80153e0:	e00c      	b.n	80153fc <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80153e2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80154c0 <ee_number+0x110>
 80153e6:	e7ed      	b.n	80153c4 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80153e8:	f04f 0e20 	mov.w	lr, #32
 80153ec:	e7f2      	b.n	80153d4 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80153ee:	4252      	negs	r2, r2
      size--;
 80153f0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80153f2:	3e01      	subs	r6, #1
 80153f4:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 80153f6:	272d      	movs	r7, #45	; 0x2d
 80153f8:	e000      	b.n	80153fc <ee_number+0x4c>
  sign = 0;
 80153fa:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 80153fc:	bb5a      	cbnz	r2, 8015456 <ee_number+0xa6>
    tmp[i++] = '0';
 80153fe:	2330      	movs	r3, #48	; 0x30
 8015400:	f88d 3004 	strb.w	r3, [sp, #4]
 8015404:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8015408:	45ac      	cmp	ip, r5
 801540a:	dd00      	ble.n	801540e <ee_number+0x5e>
 801540c:	4665      	mov	r5, ip
  size -= precision;
 801540e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015410:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8015412:	b31c      	cbz	r4, 801545c <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8015414:	b11f      	cbz	r7, 801541e <ee_number+0x6e>
 8015416:	f800 7b01 	strb.w	r7, [r0], #1
 801541a:	3901      	subs	r1, #1
 801541c:	d007      	beq.n	801542e <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801541e:	2b00      	cmp	r3, #0
 8015420:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015424:	dd24      	ble.n	8015470 <ee_number+0xc0>
 8015426:	f800 eb01 	strb.w	lr, [r0], #1
 801542a:	3901      	subs	r1, #1
 801542c:	d1f7      	bne.n	801541e <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801542e:	b013      	add	sp, #76	; 0x4c
 8015430:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8015434:	fbb2 f6f3 	udiv	r6, r2, r3
 8015438:	fb03 2216 	mls	r2, r3, r6, r2
 801543c:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8015440:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8015444:	446a      	add	r2, sp
 8015446:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 801544a:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801544c:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8015450:	2a00      	cmp	r2, #0
 8015452:	d1ef      	bne.n	8015434 <ee_number+0x84>
 8015454:	e7d8      	b.n	8015408 <ee_number+0x58>
  i = 0;
 8015456:	f04f 0c00 	mov.w	ip, #0
 801545a:	e7f9      	b.n	8015450 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801545c:	2b00      	cmp	r3, #0
 801545e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015462:	ddd7      	ble.n	8015414 <ee_number+0x64>
 8015464:	2220      	movs	r2, #32
 8015466:	f800 2b01 	strb.w	r2, [r0], #1
 801546a:	3901      	subs	r1, #1
 801546c:	d1f6      	bne.n	801545c <ee_number+0xac>
 801546e:	e7de      	b.n	801542e <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8015470:	4565      	cmp	r5, ip
 8015472:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8015476:	dd05      	ble.n	8015484 <ee_number+0xd4>
 8015478:	2230      	movs	r2, #48	; 0x30
 801547a:	f800 2b01 	strb.w	r2, [r0], #1
 801547e:	3901      	subs	r1, #1
 8015480:	d1f6      	bne.n	8015470 <ee_number+0xc0>
 8015482:	e7d4      	b.n	801542e <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8015484:	4662      	mov	r2, ip
 8015486:	2a00      	cmp	r2, #0
 8015488:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801548c:	dd09      	ble.n	80154a2 <ee_number+0xf2>
 801548e:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8015492:	446a      	add	r2, sp
 8015494:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8015498:	f800 2b01 	strb.w	r2, [r0], #1
 801549c:	3901      	subs	r1, #1
 801549e:	d1f1      	bne.n	8015484 <ee_number+0xd4>
 80154a0:	e7c5      	b.n	801542e <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80154a8:	ddc1      	ble.n	801542e <ee_number+0x7e>
 80154aa:	2220      	movs	r2, #32
 80154ac:	f800 2b01 	strb.w	r2, [r0], #1
 80154b0:	3901      	subs	r1, #1
 80154b2:	d1f6      	bne.n	80154a2 <ee_number+0xf2>
 80154b4:	e7bb      	b.n	801542e <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80154b6:	2000      	movs	r0, #0
 80154b8:	e7b9      	b.n	801542e <ee_number+0x7e>
 80154ba:	bf00      	nop
 80154bc:	0801b054 	.word	0x0801b054
 80154c0:	0801b07c 	.word	0x0801b07c

080154c4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80154c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154c8:	b087      	sub	sp, #28
 80154ca:	9205      	str	r2, [sp, #20]
 80154cc:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80154ce:	1e0f      	subs	r7, r1, #0
 80154d0:	f340 80b8 	ble.w	8015644 <tiny_vsnprintf_like+0x180>
 80154d4:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80154d6:	4604      	mov	r4, r0
 80154d8:	e004      	b.n	80154e4 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80154da:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80154de:	9b05      	ldr	r3, [sp, #20]
 80154e0:	3301      	adds	r3, #1
 80154e2:	9305      	str	r3, [sp, #20]
 80154e4:	9905      	ldr	r1, [sp, #20]
 80154e6:	780a      	ldrb	r2, [r1, #0]
 80154e8:	b922      	cbnz	r2, 80154f4 <tiny_vsnprintf_like+0x30>
 80154ea:	1ba3      	subs	r3, r4, r6
 80154ec:	1e78      	subs	r0, r7, #1
 80154ee:	4283      	cmp	r3, r0
 80154f0:	f2c0 80a2 	blt.w	8015638 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80154f4:	1ba3      	subs	r3, r4, r6
 80154f6:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 80154fa:	4543      	cmp	r3, r8
 80154fc:	f280 809c 	bge.w	8015638 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8015500:	2a25      	cmp	r2, #37	; 0x25
 8015502:	d1ea      	bne.n	80154da <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8015504:	1c4b      	adds	r3, r1, #1
 8015506:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8015508:	784b      	ldrb	r3, [r1, #1]
 801550a:	2b30      	cmp	r3, #48	; 0x30
 801550c:	d020      	beq.n	8015550 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 801550e:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8015512:	3b30      	subs	r3, #48	; 0x30
 8015514:	b2db      	uxtb	r3, r3
 8015516:	2b09      	cmp	r3, #9
 8015518:	d91d      	bls.n	8015556 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 801551a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif

    // Default base
    base = 10;

    switch (*fmt)
 801551e:	9b05      	ldr	r3, [sp, #20]
 8015520:	781a      	ldrb	r2, [r3, #0]
 8015522:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8015526:	2b20      	cmp	r3, #32
 8015528:	d867      	bhi.n	80155fa <tiny_vsnprintf_like+0x136>
 801552a:	e8df f003 	tbb	[pc, r3]
 801552e:	664a      	.short	0x664a
 8015530:	66666666 	.word	0x66666666
 8015534:	66666666 	.word	0x66666666
 8015538:	66621e66 	.word	0x66621e66
 801553c:	62666666 	.word	0x62666666
 8015540:	66666666 	.word	0x66666666
 8015544:	66666666 	.word	0x66666666
 8015548:	19662866 	.word	0x19662866
 801554c:	6666      	.short	0x6666
 801554e:	7c          	.byte	0x7c
 801554f:	00          	.byte	0x00
      flags |= ZEROPAD;
 8015550:	f04f 0901 	mov.w	r9, #1
 8015554:	e7dd      	b.n	8015512 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8015556:	a805      	add	r0, sp, #20
 8015558:	f7ff ff16 	bl	8015388 <ee_skip_atoi>
 801555c:	4605      	mov	r5, r0
 801555e:	e7de      	b.n	801551e <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8015560:	230a      	movs	r3, #10
 8015562:	e031      	b.n	80155c8 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8015564:	2320      	movs	r3, #32
 8015566:	f804 3b01 	strb.w	r3, [r4], #1
 801556a:	3d01      	subs	r5, #1
 801556c:	2d00      	cmp	r5, #0
 801556e:	dcf9      	bgt.n	8015564 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8015570:	9b04      	ldr	r3, [sp, #16]
 8015572:	1d1a      	adds	r2, r3, #4
 8015574:	9204      	str	r2, [sp, #16]
 8015576:	781b      	ldrb	r3, [r3, #0]
 8015578:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801557c:	e7af      	b.n	80154de <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801557e:	9b04      	ldr	r3, [sp, #16]
 8015580:	1d1a      	adds	r2, r3, #4
 8015582:	9204      	str	r2, [sp, #16]
 8015584:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8015588:	f1b8 0f00 	cmp.w	r8, #0
 801558c:	d003      	beq.n	8015596 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801558e:	4640      	mov	r0, r8
 8015590:	f7ea fe46 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8015594:	e006      	b.n	80155a4 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8015596:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8015648 <tiny_vsnprintf_like+0x184>
 801559a:	e7f8      	b.n	801558e <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 801559c:	2220      	movs	r2, #32
 801559e:	f804 2b01 	strb.w	r2, [r4], #1
 80155a2:	461d      	mov	r5, r3
 80155a4:	1e6b      	subs	r3, r5, #1
 80155a6:	4285      	cmp	r5, r0
 80155a8:	dcf8      	bgt.n	801559c <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80155aa:	2200      	movs	r2, #0
 80155ac:	e006      	b.n	80155bc <tiny_vsnprintf_like+0xf8>
 80155ae:	4643      	mov	r3, r8
 80155b0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80155b4:	f804 1b01 	strb.w	r1, [r4], #1
 80155b8:	3201      	adds	r2, #1
 80155ba:	4698      	mov	r8, r3
 80155bc:	4282      	cmp	r2, r0
 80155be:	dbf6      	blt.n	80155ae <tiny_vsnprintf_like+0xea>
 80155c0:	e78d      	b.n	80154de <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80155c2:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80155c6:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80155c8:	f019 0f02 	tst.w	r9, #2
 80155cc:	d02f      	beq.n	801562e <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80155ce:	9a04      	ldr	r2, [sp, #16]
 80155d0:	1d11      	adds	r1, r2, #4
 80155d2:	9104      	str	r1, [sp, #16]
 80155d4:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80155d6:	1ba1      	subs	r1, r4, r6
 80155d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80155dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155e0:	9001      	str	r0, [sp, #4]
 80155e2:	9500      	str	r5, [sp, #0]
 80155e4:	eba8 0101 	sub.w	r1, r8, r1
 80155e8:	4620      	mov	r0, r4
 80155ea:	f7ff fee1 	bl	80153b0 <ee_number>
 80155ee:	4604      	mov	r4, r0
 80155f0:	e775      	b.n	80154de <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80155f2:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80155f6:	230a      	movs	r3, #10
 80155f8:	e7e6      	b.n	80155c8 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80155fa:	2a25      	cmp	r2, #37	; 0x25
 80155fc:	d002      	beq.n	8015604 <tiny_vsnprintf_like+0x140>
 80155fe:	2325      	movs	r3, #37	; 0x25
 8015600:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8015604:	1ba3      	subs	r3, r4, r6
 8015606:	4598      	cmp	r8, r3
 8015608:	dd0f      	ble.n	801562a <tiny_vsnprintf_like+0x166>
        if (*fmt)
 801560a:	9b05      	ldr	r3, [sp, #20]
 801560c:	781a      	ldrb	r2, [r3, #0]
 801560e:	b13a      	cbz	r2, 8015620 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8015610:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8015614:	1ba3      	subs	r3, r4, r6
 8015616:	4598      	cmp	r8, r3
 8015618:	f73f af61 	bgt.w	80154de <tiny_vsnprintf_like+0x1a>
    base = 10;
 801561c:	230a      	movs	r3, #10
 801561e:	e7d3      	b.n	80155c8 <tiny_vsnprintf_like+0x104>
          --fmt;
 8015620:	3b01      	subs	r3, #1
 8015622:	9305      	str	r3, [sp, #20]
 8015624:	e7f6      	b.n	8015614 <tiny_vsnprintf_like+0x150>
        base = 16;
 8015626:	2310      	movs	r3, #16
 8015628:	e7ce      	b.n	80155c8 <tiny_vsnprintf_like+0x104>
    base = 10;
 801562a:	230a      	movs	r3, #10
 801562c:	e7cc      	b.n	80155c8 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 801562e:	9a04      	ldr	r2, [sp, #16]
 8015630:	1d11      	adds	r1, r2, #4
 8015632:	9104      	str	r1, [sp, #16]
 8015634:	6812      	ldr	r2, [r2, #0]
 8015636:	e7ce      	b.n	80155d6 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8015638:	2300      	movs	r3, #0
 801563a:	7023      	strb	r3, [r4, #0]
  return str - buf;
 801563c:	1ba0      	subs	r0, r4, r6
}
 801563e:	b007      	add	sp, #28
 8015640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8015644:	2000      	movs	r0, #0
 8015646:	e7fa      	b.n	801563e <tiny_vsnprintf_like+0x17a>
 8015648:	0801b0a4 	.word	0x0801b0a4

0801564c <__cvt>:
 801564c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015650:	b088      	sub	sp, #32
 8015652:	2b00      	cmp	r3, #0
 8015654:	461f      	mov	r7, r3
 8015656:	4614      	mov	r4, r2
 8015658:	bfb8      	it	lt
 801565a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801565e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015660:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015662:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8015666:	bfb6      	itet	lt
 8015668:	461f      	movlt	r7, r3
 801566a:	2300      	movge	r3, #0
 801566c:	232d      	movlt	r3, #45	; 0x2d
 801566e:	7013      	strb	r3, [r2, #0]
 8015670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015672:	f023 0820 	bic.w	r8, r3, #32
 8015676:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801567a:	d005      	beq.n	8015688 <__cvt+0x3c>
 801567c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015680:	d100      	bne.n	8015684 <__cvt+0x38>
 8015682:	3501      	adds	r5, #1
 8015684:	2302      	movs	r3, #2
 8015686:	e000      	b.n	801568a <__cvt+0x3e>
 8015688:	2303      	movs	r3, #3
 801568a:	aa07      	add	r2, sp, #28
 801568c:	9204      	str	r2, [sp, #16]
 801568e:	aa06      	add	r2, sp, #24
 8015690:	e9cd a202 	strd	sl, r2, [sp, #8]
 8015694:	e9cd 3500 	strd	r3, r5, [sp]
 8015698:	4622      	mov	r2, r4
 801569a:	463b      	mov	r3, r7
 801569c:	f001 ff30 	bl	8017500 <_dtoa_r>
 80156a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80156a4:	4606      	mov	r6, r0
 80156a6:	d102      	bne.n	80156ae <__cvt+0x62>
 80156a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156aa:	07db      	lsls	r3, r3, #31
 80156ac:	d522      	bpl.n	80156f4 <__cvt+0xa8>
 80156ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80156b2:	eb06 0905 	add.w	r9, r6, r5
 80156b6:	d110      	bne.n	80156da <__cvt+0x8e>
 80156b8:	7833      	ldrb	r3, [r6, #0]
 80156ba:	2b30      	cmp	r3, #48	; 0x30
 80156bc:	d10a      	bne.n	80156d4 <__cvt+0x88>
 80156be:	2200      	movs	r2, #0
 80156c0:	2300      	movs	r3, #0
 80156c2:	4620      	mov	r0, r4
 80156c4:	4639      	mov	r1, r7
 80156c6:	f7eb f9d7 	bl	8000a78 <__aeabi_dcmpeq>
 80156ca:	b918      	cbnz	r0, 80156d4 <__cvt+0x88>
 80156cc:	f1c5 0501 	rsb	r5, r5, #1
 80156d0:	f8ca 5000 	str.w	r5, [sl]
 80156d4:	f8da 3000 	ldr.w	r3, [sl]
 80156d8:	4499      	add	r9, r3
 80156da:	2200      	movs	r2, #0
 80156dc:	2300      	movs	r3, #0
 80156de:	4620      	mov	r0, r4
 80156e0:	4639      	mov	r1, r7
 80156e2:	f7eb f9c9 	bl	8000a78 <__aeabi_dcmpeq>
 80156e6:	b108      	cbz	r0, 80156ec <__cvt+0xa0>
 80156e8:	f8cd 901c 	str.w	r9, [sp, #28]
 80156ec:	2230      	movs	r2, #48	; 0x30
 80156ee:	9b07      	ldr	r3, [sp, #28]
 80156f0:	454b      	cmp	r3, r9
 80156f2:	d307      	bcc.n	8015704 <__cvt+0xb8>
 80156f4:	9b07      	ldr	r3, [sp, #28]
 80156f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80156f8:	1b9b      	subs	r3, r3, r6
 80156fa:	4630      	mov	r0, r6
 80156fc:	6013      	str	r3, [r2, #0]
 80156fe:	b008      	add	sp, #32
 8015700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015704:	1c59      	adds	r1, r3, #1
 8015706:	9107      	str	r1, [sp, #28]
 8015708:	701a      	strb	r2, [r3, #0]
 801570a:	e7f0      	b.n	80156ee <__cvt+0xa2>

0801570c <__exponent>:
 801570c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801570e:	4603      	mov	r3, r0
 8015710:	2900      	cmp	r1, #0
 8015712:	bfb8      	it	lt
 8015714:	4249      	neglt	r1, r1
 8015716:	f803 2b02 	strb.w	r2, [r3], #2
 801571a:	bfb4      	ite	lt
 801571c:	222d      	movlt	r2, #45	; 0x2d
 801571e:	222b      	movge	r2, #43	; 0x2b
 8015720:	2909      	cmp	r1, #9
 8015722:	7042      	strb	r2, [r0, #1]
 8015724:	dd2a      	ble.n	801577c <__exponent+0x70>
 8015726:	f10d 0207 	add.w	r2, sp, #7
 801572a:	4617      	mov	r7, r2
 801572c:	260a      	movs	r6, #10
 801572e:	4694      	mov	ip, r2
 8015730:	fb91 f5f6 	sdiv	r5, r1, r6
 8015734:	fb06 1415 	mls	r4, r6, r5, r1
 8015738:	3430      	adds	r4, #48	; 0x30
 801573a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801573e:	460c      	mov	r4, r1
 8015740:	2c63      	cmp	r4, #99	; 0x63
 8015742:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8015746:	4629      	mov	r1, r5
 8015748:	dcf1      	bgt.n	801572e <__exponent+0x22>
 801574a:	3130      	adds	r1, #48	; 0x30
 801574c:	f1ac 0402 	sub.w	r4, ip, #2
 8015750:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015754:	1c41      	adds	r1, r0, #1
 8015756:	4622      	mov	r2, r4
 8015758:	42ba      	cmp	r2, r7
 801575a:	d30a      	bcc.n	8015772 <__exponent+0x66>
 801575c:	f10d 0209 	add.w	r2, sp, #9
 8015760:	eba2 020c 	sub.w	r2, r2, ip
 8015764:	42bc      	cmp	r4, r7
 8015766:	bf88      	it	hi
 8015768:	2200      	movhi	r2, #0
 801576a:	4413      	add	r3, r2
 801576c:	1a18      	subs	r0, r3, r0
 801576e:	b003      	add	sp, #12
 8015770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015772:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015776:	f801 5f01 	strb.w	r5, [r1, #1]!
 801577a:	e7ed      	b.n	8015758 <__exponent+0x4c>
 801577c:	2330      	movs	r3, #48	; 0x30
 801577e:	3130      	adds	r1, #48	; 0x30
 8015780:	7083      	strb	r3, [r0, #2]
 8015782:	70c1      	strb	r1, [r0, #3]
 8015784:	1d03      	adds	r3, r0, #4
 8015786:	e7f1      	b.n	801576c <__exponent+0x60>

08015788 <_printf_float>:
 8015788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801578c:	b091      	sub	sp, #68	; 0x44
 801578e:	460c      	mov	r4, r1
 8015790:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8015794:	4616      	mov	r6, r2
 8015796:	461f      	mov	r7, r3
 8015798:	4605      	mov	r5, r0
 801579a:	f001 fdc1 	bl	8017320 <_localeconv_r>
 801579e:	6803      	ldr	r3, [r0, #0]
 80157a0:	9309      	str	r3, [sp, #36]	; 0x24
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7ea fd3c 	bl	8000220 <strlen>
 80157a8:	2300      	movs	r3, #0
 80157aa:	930e      	str	r3, [sp, #56]	; 0x38
 80157ac:	f8d8 3000 	ldr.w	r3, [r8]
 80157b0:	900a      	str	r0, [sp, #40]	; 0x28
 80157b2:	3307      	adds	r3, #7
 80157b4:	f023 0307 	bic.w	r3, r3, #7
 80157b8:	f103 0208 	add.w	r2, r3, #8
 80157bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80157c0:	f8d4 b000 	ldr.w	fp, [r4]
 80157c4:	f8c8 2000 	str.w	r2, [r8]
 80157c8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80157cc:	4652      	mov	r2, sl
 80157ce:	4643      	mov	r3, r8
 80157d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80157d4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80157d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80157da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157dc:	4b9c      	ldr	r3, [pc, #624]	; (8015a50 <_printf_float+0x2c8>)
 80157de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80157e2:	4650      	mov	r0, sl
 80157e4:	f7eb f97a 	bl	8000adc <__aeabi_dcmpun>
 80157e8:	bb70      	cbnz	r0, 8015848 <_printf_float+0xc0>
 80157ea:	4b99      	ldr	r3, [pc, #612]	; (8015a50 <_printf_float+0x2c8>)
 80157ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80157f2:	4650      	mov	r0, sl
 80157f4:	f7eb f954 	bl	8000aa0 <__aeabi_dcmple>
 80157f8:	bb30      	cbnz	r0, 8015848 <_printf_float+0xc0>
 80157fa:	2200      	movs	r2, #0
 80157fc:	2300      	movs	r3, #0
 80157fe:	4650      	mov	r0, sl
 8015800:	4641      	mov	r1, r8
 8015802:	f7eb f943 	bl	8000a8c <__aeabi_dcmplt>
 8015806:	b110      	cbz	r0, 801580e <_printf_float+0x86>
 8015808:	232d      	movs	r3, #45	; 0x2d
 801580a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801580e:	4a91      	ldr	r2, [pc, #580]	; (8015a54 <_printf_float+0x2cc>)
 8015810:	4b91      	ldr	r3, [pc, #580]	; (8015a58 <_printf_float+0x2d0>)
 8015812:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8015816:	bf94      	ite	ls
 8015818:	4690      	movls	r8, r2
 801581a:	4698      	movhi	r8, r3
 801581c:	2303      	movs	r3, #3
 801581e:	6123      	str	r3, [r4, #16]
 8015820:	f02b 0304 	bic.w	r3, fp, #4
 8015824:	6023      	str	r3, [r4, #0]
 8015826:	f04f 0a00 	mov.w	sl, #0
 801582a:	9700      	str	r7, [sp, #0]
 801582c:	4633      	mov	r3, r6
 801582e:	aa0f      	add	r2, sp, #60	; 0x3c
 8015830:	4621      	mov	r1, r4
 8015832:	4628      	mov	r0, r5
 8015834:	f000 f9d4 	bl	8015be0 <_printf_common>
 8015838:	3001      	adds	r0, #1
 801583a:	f040 808f 	bne.w	801595c <_printf_float+0x1d4>
 801583e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015842:	b011      	add	sp, #68	; 0x44
 8015844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015848:	4652      	mov	r2, sl
 801584a:	4643      	mov	r3, r8
 801584c:	4650      	mov	r0, sl
 801584e:	4641      	mov	r1, r8
 8015850:	f7eb f944 	bl	8000adc <__aeabi_dcmpun>
 8015854:	b140      	cbz	r0, 8015868 <_printf_float+0xe0>
 8015856:	f1b8 0f00 	cmp.w	r8, #0
 801585a:	bfbc      	itt	lt
 801585c:	232d      	movlt	r3, #45	; 0x2d
 801585e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015862:	4a7e      	ldr	r2, [pc, #504]	; (8015a5c <_printf_float+0x2d4>)
 8015864:	4b7e      	ldr	r3, [pc, #504]	; (8015a60 <_printf_float+0x2d8>)
 8015866:	e7d4      	b.n	8015812 <_printf_float+0x8a>
 8015868:	6863      	ldr	r3, [r4, #4]
 801586a:	1c5a      	adds	r2, r3, #1
 801586c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8015870:	d142      	bne.n	80158f8 <_printf_float+0x170>
 8015872:	2306      	movs	r3, #6
 8015874:	6063      	str	r3, [r4, #4]
 8015876:	2200      	movs	r2, #0
 8015878:	9206      	str	r2, [sp, #24]
 801587a:	aa0e      	add	r2, sp, #56	; 0x38
 801587c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8015880:	aa0d      	add	r2, sp, #52	; 0x34
 8015882:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8015886:	9203      	str	r2, [sp, #12]
 8015888:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801588c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015890:	6023      	str	r3, [r4, #0]
 8015892:	6863      	ldr	r3, [r4, #4]
 8015894:	9300      	str	r3, [sp, #0]
 8015896:	4652      	mov	r2, sl
 8015898:	4643      	mov	r3, r8
 801589a:	4628      	mov	r0, r5
 801589c:	910b      	str	r1, [sp, #44]	; 0x2c
 801589e:	f7ff fed5 	bl	801564c <__cvt>
 80158a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158a4:	2947      	cmp	r1, #71	; 0x47
 80158a6:	4680      	mov	r8, r0
 80158a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80158aa:	d108      	bne.n	80158be <_printf_float+0x136>
 80158ac:	1cc8      	adds	r0, r1, #3
 80158ae:	db02      	blt.n	80158b6 <_printf_float+0x12e>
 80158b0:	6863      	ldr	r3, [r4, #4]
 80158b2:	4299      	cmp	r1, r3
 80158b4:	dd40      	ble.n	8015938 <_printf_float+0x1b0>
 80158b6:	f1a9 0902 	sub.w	r9, r9, #2
 80158ba:	fa5f f989 	uxtb.w	r9, r9
 80158be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80158c2:	d81f      	bhi.n	8015904 <_printf_float+0x17c>
 80158c4:	3901      	subs	r1, #1
 80158c6:	464a      	mov	r2, r9
 80158c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80158cc:	910d      	str	r1, [sp, #52]	; 0x34
 80158ce:	f7ff ff1d 	bl	801570c <__exponent>
 80158d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158d4:	1813      	adds	r3, r2, r0
 80158d6:	2a01      	cmp	r2, #1
 80158d8:	4682      	mov	sl, r0
 80158da:	6123      	str	r3, [r4, #16]
 80158dc:	dc02      	bgt.n	80158e4 <_printf_float+0x15c>
 80158de:	6822      	ldr	r2, [r4, #0]
 80158e0:	07d2      	lsls	r2, r2, #31
 80158e2:	d501      	bpl.n	80158e8 <_printf_float+0x160>
 80158e4:	3301      	adds	r3, #1
 80158e6:	6123      	str	r3, [r4, #16]
 80158e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d09c      	beq.n	801582a <_printf_float+0xa2>
 80158f0:	232d      	movs	r3, #45	; 0x2d
 80158f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158f6:	e798      	b.n	801582a <_printf_float+0xa2>
 80158f8:	2947      	cmp	r1, #71	; 0x47
 80158fa:	d1bc      	bne.n	8015876 <_printf_float+0xee>
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d1ba      	bne.n	8015876 <_printf_float+0xee>
 8015900:	2301      	movs	r3, #1
 8015902:	e7b7      	b.n	8015874 <_printf_float+0xec>
 8015904:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8015908:	d118      	bne.n	801593c <_printf_float+0x1b4>
 801590a:	2900      	cmp	r1, #0
 801590c:	6863      	ldr	r3, [r4, #4]
 801590e:	dd0b      	ble.n	8015928 <_printf_float+0x1a0>
 8015910:	6121      	str	r1, [r4, #16]
 8015912:	b913      	cbnz	r3, 801591a <_printf_float+0x192>
 8015914:	6822      	ldr	r2, [r4, #0]
 8015916:	07d0      	lsls	r0, r2, #31
 8015918:	d502      	bpl.n	8015920 <_printf_float+0x198>
 801591a:	3301      	adds	r3, #1
 801591c:	440b      	add	r3, r1
 801591e:	6123      	str	r3, [r4, #16]
 8015920:	65a1      	str	r1, [r4, #88]	; 0x58
 8015922:	f04f 0a00 	mov.w	sl, #0
 8015926:	e7df      	b.n	80158e8 <_printf_float+0x160>
 8015928:	b913      	cbnz	r3, 8015930 <_printf_float+0x1a8>
 801592a:	6822      	ldr	r2, [r4, #0]
 801592c:	07d2      	lsls	r2, r2, #31
 801592e:	d501      	bpl.n	8015934 <_printf_float+0x1ac>
 8015930:	3302      	adds	r3, #2
 8015932:	e7f4      	b.n	801591e <_printf_float+0x196>
 8015934:	2301      	movs	r3, #1
 8015936:	e7f2      	b.n	801591e <_printf_float+0x196>
 8015938:	f04f 0967 	mov.w	r9, #103	; 0x67
 801593c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801593e:	4299      	cmp	r1, r3
 8015940:	db05      	blt.n	801594e <_printf_float+0x1c6>
 8015942:	6823      	ldr	r3, [r4, #0]
 8015944:	6121      	str	r1, [r4, #16]
 8015946:	07d8      	lsls	r0, r3, #31
 8015948:	d5ea      	bpl.n	8015920 <_printf_float+0x198>
 801594a:	1c4b      	adds	r3, r1, #1
 801594c:	e7e7      	b.n	801591e <_printf_float+0x196>
 801594e:	2900      	cmp	r1, #0
 8015950:	bfd4      	ite	le
 8015952:	f1c1 0202 	rsble	r2, r1, #2
 8015956:	2201      	movgt	r2, #1
 8015958:	4413      	add	r3, r2
 801595a:	e7e0      	b.n	801591e <_printf_float+0x196>
 801595c:	6823      	ldr	r3, [r4, #0]
 801595e:	055a      	lsls	r2, r3, #21
 8015960:	d407      	bmi.n	8015972 <_printf_float+0x1ea>
 8015962:	6923      	ldr	r3, [r4, #16]
 8015964:	4642      	mov	r2, r8
 8015966:	4631      	mov	r1, r6
 8015968:	4628      	mov	r0, r5
 801596a:	47b8      	blx	r7
 801596c:	3001      	adds	r0, #1
 801596e:	d12b      	bne.n	80159c8 <_printf_float+0x240>
 8015970:	e765      	b.n	801583e <_printf_float+0xb6>
 8015972:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8015976:	f240 80dc 	bls.w	8015b32 <_printf_float+0x3aa>
 801597a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801597e:	2200      	movs	r2, #0
 8015980:	2300      	movs	r3, #0
 8015982:	f7eb f879 	bl	8000a78 <__aeabi_dcmpeq>
 8015986:	2800      	cmp	r0, #0
 8015988:	d033      	beq.n	80159f2 <_printf_float+0x26a>
 801598a:	4a36      	ldr	r2, [pc, #216]	; (8015a64 <_printf_float+0x2dc>)
 801598c:	2301      	movs	r3, #1
 801598e:	4631      	mov	r1, r6
 8015990:	4628      	mov	r0, r5
 8015992:	47b8      	blx	r7
 8015994:	3001      	adds	r0, #1
 8015996:	f43f af52 	beq.w	801583e <_printf_float+0xb6>
 801599a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801599e:	429a      	cmp	r2, r3
 80159a0:	db02      	blt.n	80159a8 <_printf_float+0x220>
 80159a2:	6823      	ldr	r3, [r4, #0]
 80159a4:	07d8      	lsls	r0, r3, #31
 80159a6:	d50f      	bpl.n	80159c8 <_printf_float+0x240>
 80159a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159ac:	4631      	mov	r1, r6
 80159ae:	4628      	mov	r0, r5
 80159b0:	47b8      	blx	r7
 80159b2:	3001      	adds	r0, #1
 80159b4:	f43f af43 	beq.w	801583e <_printf_float+0xb6>
 80159b8:	f04f 0800 	mov.w	r8, #0
 80159bc:	f104 091a 	add.w	r9, r4, #26
 80159c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159c2:	3b01      	subs	r3, #1
 80159c4:	4543      	cmp	r3, r8
 80159c6:	dc09      	bgt.n	80159dc <_printf_float+0x254>
 80159c8:	6823      	ldr	r3, [r4, #0]
 80159ca:	079b      	lsls	r3, r3, #30
 80159cc:	f100 8103 	bmi.w	8015bd6 <_printf_float+0x44e>
 80159d0:	68e0      	ldr	r0, [r4, #12]
 80159d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159d4:	4298      	cmp	r0, r3
 80159d6:	bfb8      	it	lt
 80159d8:	4618      	movlt	r0, r3
 80159da:	e732      	b.n	8015842 <_printf_float+0xba>
 80159dc:	2301      	movs	r3, #1
 80159de:	464a      	mov	r2, r9
 80159e0:	4631      	mov	r1, r6
 80159e2:	4628      	mov	r0, r5
 80159e4:	47b8      	blx	r7
 80159e6:	3001      	adds	r0, #1
 80159e8:	f43f af29 	beq.w	801583e <_printf_float+0xb6>
 80159ec:	f108 0801 	add.w	r8, r8, #1
 80159f0:	e7e6      	b.n	80159c0 <_printf_float+0x238>
 80159f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	dc37      	bgt.n	8015a68 <_printf_float+0x2e0>
 80159f8:	4a1a      	ldr	r2, [pc, #104]	; (8015a64 <_printf_float+0x2dc>)
 80159fa:	2301      	movs	r3, #1
 80159fc:	4631      	mov	r1, r6
 80159fe:	4628      	mov	r0, r5
 8015a00:	47b8      	blx	r7
 8015a02:	3001      	adds	r0, #1
 8015a04:	f43f af1b 	beq.w	801583e <_printf_float+0xb6>
 8015a08:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8015a0c:	4313      	orrs	r3, r2
 8015a0e:	d102      	bne.n	8015a16 <_printf_float+0x28e>
 8015a10:	6823      	ldr	r3, [r4, #0]
 8015a12:	07d9      	lsls	r1, r3, #31
 8015a14:	d5d8      	bpl.n	80159c8 <_printf_float+0x240>
 8015a16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a1a:	4631      	mov	r1, r6
 8015a1c:	4628      	mov	r0, r5
 8015a1e:	47b8      	blx	r7
 8015a20:	3001      	adds	r0, #1
 8015a22:	f43f af0c 	beq.w	801583e <_printf_float+0xb6>
 8015a26:	f04f 0900 	mov.w	r9, #0
 8015a2a:	f104 0a1a 	add.w	sl, r4, #26
 8015a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a30:	425b      	negs	r3, r3
 8015a32:	454b      	cmp	r3, r9
 8015a34:	dc01      	bgt.n	8015a3a <_printf_float+0x2b2>
 8015a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a38:	e794      	b.n	8015964 <_printf_float+0x1dc>
 8015a3a:	2301      	movs	r3, #1
 8015a3c:	4652      	mov	r2, sl
 8015a3e:	4631      	mov	r1, r6
 8015a40:	4628      	mov	r0, r5
 8015a42:	47b8      	blx	r7
 8015a44:	3001      	adds	r0, #1
 8015a46:	f43f aefa 	beq.w	801583e <_printf_float+0xb6>
 8015a4a:	f109 0901 	add.w	r9, r9, #1
 8015a4e:	e7ee      	b.n	8015a2e <_printf_float+0x2a6>
 8015a50:	7fefffff 	.word	0x7fefffff
 8015a54:	0801b0ab 	.word	0x0801b0ab
 8015a58:	0801b0af 	.word	0x0801b0af
 8015a5c:	0801b0b3 	.word	0x0801b0b3
 8015a60:	0801b0b7 	.word	0x0801b0b7
 8015a64:	0801b0bb 	.word	0x0801b0bb
 8015a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	bfa8      	it	ge
 8015a70:	461a      	movge	r2, r3
 8015a72:	2a00      	cmp	r2, #0
 8015a74:	4691      	mov	r9, r2
 8015a76:	dc37      	bgt.n	8015ae8 <_printf_float+0x360>
 8015a78:	f04f 0b00 	mov.w	fp, #0
 8015a7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a80:	f104 021a 	add.w	r2, r4, #26
 8015a84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015a88:	ebaa 0309 	sub.w	r3, sl, r9
 8015a8c:	455b      	cmp	r3, fp
 8015a8e:	dc33      	bgt.n	8015af8 <_printf_float+0x370>
 8015a90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8015a94:	429a      	cmp	r2, r3
 8015a96:	db3b      	blt.n	8015b10 <_printf_float+0x388>
 8015a98:	6823      	ldr	r3, [r4, #0]
 8015a9a:	07da      	lsls	r2, r3, #31
 8015a9c:	d438      	bmi.n	8015b10 <_printf_float+0x388>
 8015a9e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8015aa2:	eba2 0903 	sub.w	r9, r2, r3
 8015aa6:	eba2 020a 	sub.w	r2, r2, sl
 8015aaa:	4591      	cmp	r9, r2
 8015aac:	bfa8      	it	ge
 8015aae:	4691      	movge	r9, r2
 8015ab0:	f1b9 0f00 	cmp.w	r9, #0
 8015ab4:	dc34      	bgt.n	8015b20 <_printf_float+0x398>
 8015ab6:	f04f 0800 	mov.w	r8, #0
 8015aba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015abe:	f104 0a1a 	add.w	sl, r4, #26
 8015ac2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8015ac6:	1a9b      	subs	r3, r3, r2
 8015ac8:	eba3 0309 	sub.w	r3, r3, r9
 8015acc:	4543      	cmp	r3, r8
 8015ace:	f77f af7b 	ble.w	80159c8 <_printf_float+0x240>
 8015ad2:	2301      	movs	r3, #1
 8015ad4:	4652      	mov	r2, sl
 8015ad6:	4631      	mov	r1, r6
 8015ad8:	4628      	mov	r0, r5
 8015ada:	47b8      	blx	r7
 8015adc:	3001      	adds	r0, #1
 8015ade:	f43f aeae 	beq.w	801583e <_printf_float+0xb6>
 8015ae2:	f108 0801 	add.w	r8, r8, #1
 8015ae6:	e7ec      	b.n	8015ac2 <_printf_float+0x33a>
 8015ae8:	4613      	mov	r3, r2
 8015aea:	4631      	mov	r1, r6
 8015aec:	4642      	mov	r2, r8
 8015aee:	4628      	mov	r0, r5
 8015af0:	47b8      	blx	r7
 8015af2:	3001      	adds	r0, #1
 8015af4:	d1c0      	bne.n	8015a78 <_printf_float+0x2f0>
 8015af6:	e6a2      	b.n	801583e <_printf_float+0xb6>
 8015af8:	2301      	movs	r3, #1
 8015afa:	4631      	mov	r1, r6
 8015afc:	4628      	mov	r0, r5
 8015afe:	920b      	str	r2, [sp, #44]	; 0x2c
 8015b00:	47b8      	blx	r7
 8015b02:	3001      	adds	r0, #1
 8015b04:	f43f ae9b 	beq.w	801583e <_printf_float+0xb6>
 8015b08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015b0a:	f10b 0b01 	add.w	fp, fp, #1
 8015b0e:	e7b9      	b.n	8015a84 <_printf_float+0x2fc>
 8015b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b14:	4631      	mov	r1, r6
 8015b16:	4628      	mov	r0, r5
 8015b18:	47b8      	blx	r7
 8015b1a:	3001      	adds	r0, #1
 8015b1c:	d1bf      	bne.n	8015a9e <_printf_float+0x316>
 8015b1e:	e68e      	b.n	801583e <_printf_float+0xb6>
 8015b20:	464b      	mov	r3, r9
 8015b22:	eb08 020a 	add.w	r2, r8, sl
 8015b26:	4631      	mov	r1, r6
 8015b28:	4628      	mov	r0, r5
 8015b2a:	47b8      	blx	r7
 8015b2c:	3001      	adds	r0, #1
 8015b2e:	d1c2      	bne.n	8015ab6 <_printf_float+0x32e>
 8015b30:	e685      	b.n	801583e <_printf_float+0xb6>
 8015b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b34:	2a01      	cmp	r2, #1
 8015b36:	dc01      	bgt.n	8015b3c <_printf_float+0x3b4>
 8015b38:	07db      	lsls	r3, r3, #31
 8015b3a:	d539      	bpl.n	8015bb0 <_printf_float+0x428>
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	4642      	mov	r2, r8
 8015b40:	4631      	mov	r1, r6
 8015b42:	4628      	mov	r0, r5
 8015b44:	47b8      	blx	r7
 8015b46:	3001      	adds	r0, #1
 8015b48:	f43f ae79 	beq.w	801583e <_printf_float+0xb6>
 8015b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b50:	4631      	mov	r1, r6
 8015b52:	4628      	mov	r0, r5
 8015b54:	47b8      	blx	r7
 8015b56:	3001      	adds	r0, #1
 8015b58:	f43f ae71 	beq.w	801583e <_printf_float+0xb6>
 8015b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b60:	2200      	movs	r2, #0
 8015b62:	2300      	movs	r3, #0
 8015b64:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8015b68:	f7ea ff86 	bl	8000a78 <__aeabi_dcmpeq>
 8015b6c:	b9d8      	cbnz	r0, 8015ba6 <_printf_float+0x41e>
 8015b6e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8015b72:	f108 0201 	add.w	r2, r8, #1
 8015b76:	4631      	mov	r1, r6
 8015b78:	4628      	mov	r0, r5
 8015b7a:	47b8      	blx	r7
 8015b7c:	3001      	adds	r0, #1
 8015b7e:	d10e      	bne.n	8015b9e <_printf_float+0x416>
 8015b80:	e65d      	b.n	801583e <_printf_float+0xb6>
 8015b82:	2301      	movs	r3, #1
 8015b84:	464a      	mov	r2, r9
 8015b86:	4631      	mov	r1, r6
 8015b88:	4628      	mov	r0, r5
 8015b8a:	47b8      	blx	r7
 8015b8c:	3001      	adds	r0, #1
 8015b8e:	f43f ae56 	beq.w	801583e <_printf_float+0xb6>
 8015b92:	f108 0801 	add.w	r8, r8, #1
 8015b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b98:	3b01      	subs	r3, #1
 8015b9a:	4543      	cmp	r3, r8
 8015b9c:	dcf1      	bgt.n	8015b82 <_printf_float+0x3fa>
 8015b9e:	4653      	mov	r3, sl
 8015ba0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015ba4:	e6df      	b.n	8015966 <_printf_float+0x1de>
 8015ba6:	f04f 0800 	mov.w	r8, #0
 8015baa:	f104 091a 	add.w	r9, r4, #26
 8015bae:	e7f2      	b.n	8015b96 <_printf_float+0x40e>
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	4642      	mov	r2, r8
 8015bb4:	e7df      	b.n	8015b76 <_printf_float+0x3ee>
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	464a      	mov	r2, r9
 8015bba:	4631      	mov	r1, r6
 8015bbc:	4628      	mov	r0, r5
 8015bbe:	47b8      	blx	r7
 8015bc0:	3001      	adds	r0, #1
 8015bc2:	f43f ae3c 	beq.w	801583e <_printf_float+0xb6>
 8015bc6:	f108 0801 	add.w	r8, r8, #1
 8015bca:	68e3      	ldr	r3, [r4, #12]
 8015bcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015bce:	1a5b      	subs	r3, r3, r1
 8015bd0:	4543      	cmp	r3, r8
 8015bd2:	dcf0      	bgt.n	8015bb6 <_printf_float+0x42e>
 8015bd4:	e6fc      	b.n	80159d0 <_printf_float+0x248>
 8015bd6:	f04f 0800 	mov.w	r8, #0
 8015bda:	f104 0919 	add.w	r9, r4, #25
 8015bde:	e7f4      	b.n	8015bca <_printf_float+0x442>

08015be0 <_printf_common>:
 8015be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015be4:	4616      	mov	r6, r2
 8015be6:	4699      	mov	r9, r3
 8015be8:	688a      	ldr	r2, [r1, #8]
 8015bea:	690b      	ldr	r3, [r1, #16]
 8015bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015bf0:	4293      	cmp	r3, r2
 8015bf2:	bfb8      	it	lt
 8015bf4:	4613      	movlt	r3, r2
 8015bf6:	6033      	str	r3, [r6, #0]
 8015bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015bfc:	4607      	mov	r7, r0
 8015bfe:	460c      	mov	r4, r1
 8015c00:	b10a      	cbz	r2, 8015c06 <_printf_common+0x26>
 8015c02:	3301      	adds	r3, #1
 8015c04:	6033      	str	r3, [r6, #0]
 8015c06:	6823      	ldr	r3, [r4, #0]
 8015c08:	0699      	lsls	r1, r3, #26
 8015c0a:	bf42      	ittt	mi
 8015c0c:	6833      	ldrmi	r3, [r6, #0]
 8015c0e:	3302      	addmi	r3, #2
 8015c10:	6033      	strmi	r3, [r6, #0]
 8015c12:	6825      	ldr	r5, [r4, #0]
 8015c14:	f015 0506 	ands.w	r5, r5, #6
 8015c18:	d106      	bne.n	8015c28 <_printf_common+0x48>
 8015c1a:	f104 0a19 	add.w	sl, r4, #25
 8015c1e:	68e3      	ldr	r3, [r4, #12]
 8015c20:	6832      	ldr	r2, [r6, #0]
 8015c22:	1a9b      	subs	r3, r3, r2
 8015c24:	42ab      	cmp	r3, r5
 8015c26:	dc26      	bgt.n	8015c76 <_printf_common+0x96>
 8015c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015c2c:	1e13      	subs	r3, r2, #0
 8015c2e:	6822      	ldr	r2, [r4, #0]
 8015c30:	bf18      	it	ne
 8015c32:	2301      	movne	r3, #1
 8015c34:	0692      	lsls	r2, r2, #26
 8015c36:	d42b      	bmi.n	8015c90 <_printf_common+0xb0>
 8015c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c3c:	4649      	mov	r1, r9
 8015c3e:	4638      	mov	r0, r7
 8015c40:	47c0      	blx	r8
 8015c42:	3001      	adds	r0, #1
 8015c44:	d01e      	beq.n	8015c84 <_printf_common+0xa4>
 8015c46:	6823      	ldr	r3, [r4, #0]
 8015c48:	6922      	ldr	r2, [r4, #16]
 8015c4a:	f003 0306 	and.w	r3, r3, #6
 8015c4e:	2b04      	cmp	r3, #4
 8015c50:	bf02      	ittt	eq
 8015c52:	68e5      	ldreq	r5, [r4, #12]
 8015c54:	6833      	ldreq	r3, [r6, #0]
 8015c56:	1aed      	subeq	r5, r5, r3
 8015c58:	68a3      	ldr	r3, [r4, #8]
 8015c5a:	bf0c      	ite	eq
 8015c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015c60:	2500      	movne	r5, #0
 8015c62:	4293      	cmp	r3, r2
 8015c64:	bfc4      	itt	gt
 8015c66:	1a9b      	subgt	r3, r3, r2
 8015c68:	18ed      	addgt	r5, r5, r3
 8015c6a:	2600      	movs	r6, #0
 8015c6c:	341a      	adds	r4, #26
 8015c6e:	42b5      	cmp	r5, r6
 8015c70:	d11a      	bne.n	8015ca8 <_printf_common+0xc8>
 8015c72:	2000      	movs	r0, #0
 8015c74:	e008      	b.n	8015c88 <_printf_common+0xa8>
 8015c76:	2301      	movs	r3, #1
 8015c78:	4652      	mov	r2, sl
 8015c7a:	4649      	mov	r1, r9
 8015c7c:	4638      	mov	r0, r7
 8015c7e:	47c0      	blx	r8
 8015c80:	3001      	adds	r0, #1
 8015c82:	d103      	bne.n	8015c8c <_printf_common+0xac>
 8015c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c8c:	3501      	adds	r5, #1
 8015c8e:	e7c6      	b.n	8015c1e <_printf_common+0x3e>
 8015c90:	18e1      	adds	r1, r4, r3
 8015c92:	1c5a      	adds	r2, r3, #1
 8015c94:	2030      	movs	r0, #48	; 0x30
 8015c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015c9a:	4422      	add	r2, r4
 8015c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ca4:	3302      	adds	r3, #2
 8015ca6:	e7c7      	b.n	8015c38 <_printf_common+0x58>
 8015ca8:	2301      	movs	r3, #1
 8015caa:	4622      	mov	r2, r4
 8015cac:	4649      	mov	r1, r9
 8015cae:	4638      	mov	r0, r7
 8015cb0:	47c0      	blx	r8
 8015cb2:	3001      	adds	r0, #1
 8015cb4:	d0e6      	beq.n	8015c84 <_printf_common+0xa4>
 8015cb6:	3601      	adds	r6, #1
 8015cb8:	e7d9      	b.n	8015c6e <_printf_common+0x8e>
	...

08015cbc <_printf_i>:
 8015cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015cc0:	7e0f      	ldrb	r7, [r1, #24]
 8015cc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015cc4:	2f78      	cmp	r7, #120	; 0x78
 8015cc6:	4691      	mov	r9, r2
 8015cc8:	4680      	mov	r8, r0
 8015cca:	460c      	mov	r4, r1
 8015ccc:	469a      	mov	sl, r3
 8015cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015cd2:	d807      	bhi.n	8015ce4 <_printf_i+0x28>
 8015cd4:	2f62      	cmp	r7, #98	; 0x62
 8015cd6:	d80a      	bhi.n	8015cee <_printf_i+0x32>
 8015cd8:	2f00      	cmp	r7, #0
 8015cda:	f000 80d4 	beq.w	8015e86 <_printf_i+0x1ca>
 8015cde:	2f58      	cmp	r7, #88	; 0x58
 8015ce0:	f000 80c0 	beq.w	8015e64 <_printf_i+0x1a8>
 8015ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015cec:	e03a      	b.n	8015d64 <_printf_i+0xa8>
 8015cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015cf2:	2b15      	cmp	r3, #21
 8015cf4:	d8f6      	bhi.n	8015ce4 <_printf_i+0x28>
 8015cf6:	a101      	add	r1, pc, #4	; (adr r1, 8015cfc <_printf_i+0x40>)
 8015cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015cfc:	08015d55 	.word	0x08015d55
 8015d00:	08015d69 	.word	0x08015d69
 8015d04:	08015ce5 	.word	0x08015ce5
 8015d08:	08015ce5 	.word	0x08015ce5
 8015d0c:	08015ce5 	.word	0x08015ce5
 8015d10:	08015ce5 	.word	0x08015ce5
 8015d14:	08015d69 	.word	0x08015d69
 8015d18:	08015ce5 	.word	0x08015ce5
 8015d1c:	08015ce5 	.word	0x08015ce5
 8015d20:	08015ce5 	.word	0x08015ce5
 8015d24:	08015ce5 	.word	0x08015ce5
 8015d28:	08015e6d 	.word	0x08015e6d
 8015d2c:	08015d95 	.word	0x08015d95
 8015d30:	08015e27 	.word	0x08015e27
 8015d34:	08015ce5 	.word	0x08015ce5
 8015d38:	08015ce5 	.word	0x08015ce5
 8015d3c:	08015e8f 	.word	0x08015e8f
 8015d40:	08015ce5 	.word	0x08015ce5
 8015d44:	08015d95 	.word	0x08015d95
 8015d48:	08015ce5 	.word	0x08015ce5
 8015d4c:	08015ce5 	.word	0x08015ce5
 8015d50:	08015e2f 	.word	0x08015e2f
 8015d54:	682b      	ldr	r3, [r5, #0]
 8015d56:	1d1a      	adds	r2, r3, #4
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	602a      	str	r2, [r5, #0]
 8015d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015d64:	2301      	movs	r3, #1
 8015d66:	e09f      	b.n	8015ea8 <_printf_i+0x1ec>
 8015d68:	6820      	ldr	r0, [r4, #0]
 8015d6a:	682b      	ldr	r3, [r5, #0]
 8015d6c:	0607      	lsls	r7, r0, #24
 8015d6e:	f103 0104 	add.w	r1, r3, #4
 8015d72:	6029      	str	r1, [r5, #0]
 8015d74:	d501      	bpl.n	8015d7a <_printf_i+0xbe>
 8015d76:	681e      	ldr	r6, [r3, #0]
 8015d78:	e003      	b.n	8015d82 <_printf_i+0xc6>
 8015d7a:	0646      	lsls	r6, r0, #25
 8015d7c:	d5fb      	bpl.n	8015d76 <_printf_i+0xba>
 8015d7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015d82:	2e00      	cmp	r6, #0
 8015d84:	da03      	bge.n	8015d8e <_printf_i+0xd2>
 8015d86:	232d      	movs	r3, #45	; 0x2d
 8015d88:	4276      	negs	r6, r6
 8015d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d8e:	485a      	ldr	r0, [pc, #360]	; (8015ef8 <_printf_i+0x23c>)
 8015d90:	230a      	movs	r3, #10
 8015d92:	e012      	b.n	8015dba <_printf_i+0xfe>
 8015d94:	682b      	ldr	r3, [r5, #0]
 8015d96:	6820      	ldr	r0, [r4, #0]
 8015d98:	1d19      	adds	r1, r3, #4
 8015d9a:	6029      	str	r1, [r5, #0]
 8015d9c:	0605      	lsls	r5, r0, #24
 8015d9e:	d501      	bpl.n	8015da4 <_printf_i+0xe8>
 8015da0:	681e      	ldr	r6, [r3, #0]
 8015da2:	e002      	b.n	8015daa <_printf_i+0xee>
 8015da4:	0641      	lsls	r1, r0, #25
 8015da6:	d5fb      	bpl.n	8015da0 <_printf_i+0xe4>
 8015da8:	881e      	ldrh	r6, [r3, #0]
 8015daa:	4853      	ldr	r0, [pc, #332]	; (8015ef8 <_printf_i+0x23c>)
 8015dac:	2f6f      	cmp	r7, #111	; 0x6f
 8015dae:	bf0c      	ite	eq
 8015db0:	2308      	moveq	r3, #8
 8015db2:	230a      	movne	r3, #10
 8015db4:	2100      	movs	r1, #0
 8015db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015dba:	6865      	ldr	r5, [r4, #4]
 8015dbc:	60a5      	str	r5, [r4, #8]
 8015dbe:	2d00      	cmp	r5, #0
 8015dc0:	bfa2      	ittt	ge
 8015dc2:	6821      	ldrge	r1, [r4, #0]
 8015dc4:	f021 0104 	bicge.w	r1, r1, #4
 8015dc8:	6021      	strge	r1, [r4, #0]
 8015dca:	b90e      	cbnz	r6, 8015dd0 <_printf_i+0x114>
 8015dcc:	2d00      	cmp	r5, #0
 8015dce:	d04b      	beq.n	8015e68 <_printf_i+0x1ac>
 8015dd0:	4615      	mov	r5, r2
 8015dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8015dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8015dda:	5dc7      	ldrb	r7, [r0, r7]
 8015ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015de0:	4637      	mov	r7, r6
 8015de2:	42bb      	cmp	r3, r7
 8015de4:	460e      	mov	r6, r1
 8015de6:	d9f4      	bls.n	8015dd2 <_printf_i+0x116>
 8015de8:	2b08      	cmp	r3, #8
 8015dea:	d10b      	bne.n	8015e04 <_printf_i+0x148>
 8015dec:	6823      	ldr	r3, [r4, #0]
 8015dee:	07de      	lsls	r6, r3, #31
 8015df0:	d508      	bpl.n	8015e04 <_printf_i+0x148>
 8015df2:	6923      	ldr	r3, [r4, #16]
 8015df4:	6861      	ldr	r1, [r4, #4]
 8015df6:	4299      	cmp	r1, r3
 8015df8:	bfde      	ittt	le
 8015dfa:	2330      	movle	r3, #48	; 0x30
 8015dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015e00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015e04:	1b52      	subs	r2, r2, r5
 8015e06:	6122      	str	r2, [r4, #16]
 8015e08:	f8cd a000 	str.w	sl, [sp]
 8015e0c:	464b      	mov	r3, r9
 8015e0e:	aa03      	add	r2, sp, #12
 8015e10:	4621      	mov	r1, r4
 8015e12:	4640      	mov	r0, r8
 8015e14:	f7ff fee4 	bl	8015be0 <_printf_common>
 8015e18:	3001      	adds	r0, #1
 8015e1a:	d14a      	bne.n	8015eb2 <_printf_i+0x1f6>
 8015e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e20:	b004      	add	sp, #16
 8015e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e26:	6823      	ldr	r3, [r4, #0]
 8015e28:	f043 0320 	orr.w	r3, r3, #32
 8015e2c:	6023      	str	r3, [r4, #0]
 8015e2e:	4833      	ldr	r0, [pc, #204]	; (8015efc <_printf_i+0x240>)
 8015e30:	2778      	movs	r7, #120	; 0x78
 8015e32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015e36:	6823      	ldr	r3, [r4, #0]
 8015e38:	6829      	ldr	r1, [r5, #0]
 8015e3a:	061f      	lsls	r7, r3, #24
 8015e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015e40:	d402      	bmi.n	8015e48 <_printf_i+0x18c>
 8015e42:	065f      	lsls	r7, r3, #25
 8015e44:	bf48      	it	mi
 8015e46:	b2b6      	uxthmi	r6, r6
 8015e48:	07df      	lsls	r7, r3, #31
 8015e4a:	bf48      	it	mi
 8015e4c:	f043 0320 	orrmi.w	r3, r3, #32
 8015e50:	6029      	str	r1, [r5, #0]
 8015e52:	bf48      	it	mi
 8015e54:	6023      	strmi	r3, [r4, #0]
 8015e56:	b91e      	cbnz	r6, 8015e60 <_printf_i+0x1a4>
 8015e58:	6823      	ldr	r3, [r4, #0]
 8015e5a:	f023 0320 	bic.w	r3, r3, #32
 8015e5e:	6023      	str	r3, [r4, #0]
 8015e60:	2310      	movs	r3, #16
 8015e62:	e7a7      	b.n	8015db4 <_printf_i+0xf8>
 8015e64:	4824      	ldr	r0, [pc, #144]	; (8015ef8 <_printf_i+0x23c>)
 8015e66:	e7e4      	b.n	8015e32 <_printf_i+0x176>
 8015e68:	4615      	mov	r5, r2
 8015e6a:	e7bd      	b.n	8015de8 <_printf_i+0x12c>
 8015e6c:	682b      	ldr	r3, [r5, #0]
 8015e6e:	6826      	ldr	r6, [r4, #0]
 8015e70:	6961      	ldr	r1, [r4, #20]
 8015e72:	1d18      	adds	r0, r3, #4
 8015e74:	6028      	str	r0, [r5, #0]
 8015e76:	0635      	lsls	r5, r6, #24
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	d501      	bpl.n	8015e80 <_printf_i+0x1c4>
 8015e7c:	6019      	str	r1, [r3, #0]
 8015e7e:	e002      	b.n	8015e86 <_printf_i+0x1ca>
 8015e80:	0670      	lsls	r0, r6, #25
 8015e82:	d5fb      	bpl.n	8015e7c <_printf_i+0x1c0>
 8015e84:	8019      	strh	r1, [r3, #0]
 8015e86:	2300      	movs	r3, #0
 8015e88:	6123      	str	r3, [r4, #16]
 8015e8a:	4615      	mov	r5, r2
 8015e8c:	e7bc      	b.n	8015e08 <_printf_i+0x14c>
 8015e8e:	682b      	ldr	r3, [r5, #0]
 8015e90:	1d1a      	adds	r2, r3, #4
 8015e92:	602a      	str	r2, [r5, #0]
 8015e94:	681d      	ldr	r5, [r3, #0]
 8015e96:	6862      	ldr	r2, [r4, #4]
 8015e98:	2100      	movs	r1, #0
 8015e9a:	4628      	mov	r0, r5
 8015e9c:	f7ea f970 	bl	8000180 <memchr>
 8015ea0:	b108      	cbz	r0, 8015ea6 <_printf_i+0x1ea>
 8015ea2:	1b40      	subs	r0, r0, r5
 8015ea4:	6060      	str	r0, [r4, #4]
 8015ea6:	6863      	ldr	r3, [r4, #4]
 8015ea8:	6123      	str	r3, [r4, #16]
 8015eaa:	2300      	movs	r3, #0
 8015eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015eb0:	e7aa      	b.n	8015e08 <_printf_i+0x14c>
 8015eb2:	6923      	ldr	r3, [r4, #16]
 8015eb4:	462a      	mov	r2, r5
 8015eb6:	4649      	mov	r1, r9
 8015eb8:	4640      	mov	r0, r8
 8015eba:	47d0      	blx	sl
 8015ebc:	3001      	adds	r0, #1
 8015ebe:	d0ad      	beq.n	8015e1c <_printf_i+0x160>
 8015ec0:	6823      	ldr	r3, [r4, #0]
 8015ec2:	079b      	lsls	r3, r3, #30
 8015ec4:	d413      	bmi.n	8015eee <_printf_i+0x232>
 8015ec6:	68e0      	ldr	r0, [r4, #12]
 8015ec8:	9b03      	ldr	r3, [sp, #12]
 8015eca:	4298      	cmp	r0, r3
 8015ecc:	bfb8      	it	lt
 8015ece:	4618      	movlt	r0, r3
 8015ed0:	e7a6      	b.n	8015e20 <_printf_i+0x164>
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	4632      	mov	r2, r6
 8015ed6:	4649      	mov	r1, r9
 8015ed8:	4640      	mov	r0, r8
 8015eda:	47d0      	blx	sl
 8015edc:	3001      	adds	r0, #1
 8015ede:	d09d      	beq.n	8015e1c <_printf_i+0x160>
 8015ee0:	3501      	adds	r5, #1
 8015ee2:	68e3      	ldr	r3, [r4, #12]
 8015ee4:	9903      	ldr	r1, [sp, #12]
 8015ee6:	1a5b      	subs	r3, r3, r1
 8015ee8:	42ab      	cmp	r3, r5
 8015eea:	dcf2      	bgt.n	8015ed2 <_printf_i+0x216>
 8015eec:	e7eb      	b.n	8015ec6 <_printf_i+0x20a>
 8015eee:	2500      	movs	r5, #0
 8015ef0:	f104 0619 	add.w	r6, r4, #25
 8015ef4:	e7f5      	b.n	8015ee2 <_printf_i+0x226>
 8015ef6:	bf00      	nop
 8015ef8:	0801b0bd 	.word	0x0801b0bd
 8015efc:	0801b0ce 	.word	0x0801b0ce

08015f00 <_scanf_float>:
 8015f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f04:	b087      	sub	sp, #28
 8015f06:	4617      	mov	r7, r2
 8015f08:	9303      	str	r3, [sp, #12]
 8015f0a:	688b      	ldr	r3, [r1, #8]
 8015f0c:	1e5a      	subs	r2, r3, #1
 8015f0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015f12:	bf83      	ittte	hi
 8015f14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015f18:	195b      	addhi	r3, r3, r5
 8015f1a:	9302      	strhi	r3, [sp, #8]
 8015f1c:	2300      	movls	r3, #0
 8015f1e:	bf86      	itte	hi
 8015f20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015f24:	608b      	strhi	r3, [r1, #8]
 8015f26:	9302      	strls	r3, [sp, #8]
 8015f28:	680b      	ldr	r3, [r1, #0]
 8015f2a:	468b      	mov	fp, r1
 8015f2c:	2500      	movs	r5, #0
 8015f2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015f32:	f84b 3b1c 	str.w	r3, [fp], #28
 8015f36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015f3a:	4680      	mov	r8, r0
 8015f3c:	460c      	mov	r4, r1
 8015f3e:	465e      	mov	r6, fp
 8015f40:	46aa      	mov	sl, r5
 8015f42:	46a9      	mov	r9, r5
 8015f44:	9501      	str	r5, [sp, #4]
 8015f46:	68a2      	ldr	r2, [r4, #8]
 8015f48:	b152      	cbz	r2, 8015f60 <_scanf_float+0x60>
 8015f4a:	683b      	ldr	r3, [r7, #0]
 8015f4c:	781b      	ldrb	r3, [r3, #0]
 8015f4e:	2b4e      	cmp	r3, #78	; 0x4e
 8015f50:	d864      	bhi.n	801601c <_scanf_float+0x11c>
 8015f52:	2b40      	cmp	r3, #64	; 0x40
 8015f54:	d83c      	bhi.n	8015fd0 <_scanf_float+0xd0>
 8015f56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015f5a:	b2c8      	uxtb	r0, r1
 8015f5c:	280e      	cmp	r0, #14
 8015f5e:	d93a      	bls.n	8015fd6 <_scanf_float+0xd6>
 8015f60:	f1b9 0f00 	cmp.w	r9, #0
 8015f64:	d003      	beq.n	8015f6e <_scanf_float+0x6e>
 8015f66:	6823      	ldr	r3, [r4, #0]
 8015f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f6c:	6023      	str	r3, [r4, #0]
 8015f6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015f72:	f1ba 0f01 	cmp.w	sl, #1
 8015f76:	f200 8113 	bhi.w	80161a0 <_scanf_float+0x2a0>
 8015f7a:	455e      	cmp	r6, fp
 8015f7c:	f200 8105 	bhi.w	801618a <_scanf_float+0x28a>
 8015f80:	2501      	movs	r5, #1
 8015f82:	4628      	mov	r0, r5
 8015f84:	b007      	add	sp, #28
 8015f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015f8e:	2a0d      	cmp	r2, #13
 8015f90:	d8e6      	bhi.n	8015f60 <_scanf_float+0x60>
 8015f92:	a101      	add	r1, pc, #4	; (adr r1, 8015f98 <_scanf_float+0x98>)
 8015f94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015f98:	080160d7 	.word	0x080160d7
 8015f9c:	08015f61 	.word	0x08015f61
 8015fa0:	08015f61 	.word	0x08015f61
 8015fa4:	08015f61 	.word	0x08015f61
 8015fa8:	08016137 	.word	0x08016137
 8015fac:	0801610f 	.word	0x0801610f
 8015fb0:	08015f61 	.word	0x08015f61
 8015fb4:	08015f61 	.word	0x08015f61
 8015fb8:	080160e5 	.word	0x080160e5
 8015fbc:	08015f61 	.word	0x08015f61
 8015fc0:	08015f61 	.word	0x08015f61
 8015fc4:	08015f61 	.word	0x08015f61
 8015fc8:	08015f61 	.word	0x08015f61
 8015fcc:	0801609d 	.word	0x0801609d
 8015fd0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015fd4:	e7db      	b.n	8015f8e <_scanf_float+0x8e>
 8015fd6:	290e      	cmp	r1, #14
 8015fd8:	d8c2      	bhi.n	8015f60 <_scanf_float+0x60>
 8015fda:	a001      	add	r0, pc, #4	; (adr r0, 8015fe0 <_scanf_float+0xe0>)
 8015fdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015fe0:	0801608f 	.word	0x0801608f
 8015fe4:	08015f61 	.word	0x08015f61
 8015fe8:	0801608f 	.word	0x0801608f
 8015fec:	08016123 	.word	0x08016123
 8015ff0:	08015f61 	.word	0x08015f61
 8015ff4:	0801603d 	.word	0x0801603d
 8015ff8:	08016079 	.word	0x08016079
 8015ffc:	08016079 	.word	0x08016079
 8016000:	08016079 	.word	0x08016079
 8016004:	08016079 	.word	0x08016079
 8016008:	08016079 	.word	0x08016079
 801600c:	08016079 	.word	0x08016079
 8016010:	08016079 	.word	0x08016079
 8016014:	08016079 	.word	0x08016079
 8016018:	08016079 	.word	0x08016079
 801601c:	2b6e      	cmp	r3, #110	; 0x6e
 801601e:	d809      	bhi.n	8016034 <_scanf_float+0x134>
 8016020:	2b60      	cmp	r3, #96	; 0x60
 8016022:	d8b2      	bhi.n	8015f8a <_scanf_float+0x8a>
 8016024:	2b54      	cmp	r3, #84	; 0x54
 8016026:	d077      	beq.n	8016118 <_scanf_float+0x218>
 8016028:	2b59      	cmp	r3, #89	; 0x59
 801602a:	d199      	bne.n	8015f60 <_scanf_float+0x60>
 801602c:	2d07      	cmp	r5, #7
 801602e:	d197      	bne.n	8015f60 <_scanf_float+0x60>
 8016030:	2508      	movs	r5, #8
 8016032:	e029      	b.n	8016088 <_scanf_float+0x188>
 8016034:	2b74      	cmp	r3, #116	; 0x74
 8016036:	d06f      	beq.n	8016118 <_scanf_float+0x218>
 8016038:	2b79      	cmp	r3, #121	; 0x79
 801603a:	e7f6      	b.n	801602a <_scanf_float+0x12a>
 801603c:	6821      	ldr	r1, [r4, #0]
 801603e:	05c8      	lsls	r0, r1, #23
 8016040:	d51a      	bpl.n	8016078 <_scanf_float+0x178>
 8016042:	9b02      	ldr	r3, [sp, #8]
 8016044:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016048:	6021      	str	r1, [r4, #0]
 801604a:	f109 0901 	add.w	r9, r9, #1
 801604e:	b11b      	cbz	r3, 8016058 <_scanf_float+0x158>
 8016050:	3b01      	subs	r3, #1
 8016052:	3201      	adds	r2, #1
 8016054:	9302      	str	r3, [sp, #8]
 8016056:	60a2      	str	r2, [r4, #8]
 8016058:	68a3      	ldr	r3, [r4, #8]
 801605a:	3b01      	subs	r3, #1
 801605c:	60a3      	str	r3, [r4, #8]
 801605e:	6923      	ldr	r3, [r4, #16]
 8016060:	3301      	adds	r3, #1
 8016062:	6123      	str	r3, [r4, #16]
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	3b01      	subs	r3, #1
 8016068:	2b00      	cmp	r3, #0
 801606a:	607b      	str	r3, [r7, #4]
 801606c:	f340 8084 	ble.w	8016178 <_scanf_float+0x278>
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	3301      	adds	r3, #1
 8016074:	603b      	str	r3, [r7, #0]
 8016076:	e766      	b.n	8015f46 <_scanf_float+0x46>
 8016078:	eb1a 0f05 	cmn.w	sl, r5
 801607c:	f47f af70 	bne.w	8015f60 <_scanf_float+0x60>
 8016080:	6822      	ldr	r2, [r4, #0]
 8016082:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016086:	6022      	str	r2, [r4, #0]
 8016088:	f806 3b01 	strb.w	r3, [r6], #1
 801608c:	e7e4      	b.n	8016058 <_scanf_float+0x158>
 801608e:	6822      	ldr	r2, [r4, #0]
 8016090:	0610      	lsls	r0, r2, #24
 8016092:	f57f af65 	bpl.w	8015f60 <_scanf_float+0x60>
 8016096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801609a:	e7f4      	b.n	8016086 <_scanf_float+0x186>
 801609c:	f1ba 0f00 	cmp.w	sl, #0
 80160a0:	d10e      	bne.n	80160c0 <_scanf_float+0x1c0>
 80160a2:	f1b9 0f00 	cmp.w	r9, #0
 80160a6:	d10e      	bne.n	80160c6 <_scanf_float+0x1c6>
 80160a8:	6822      	ldr	r2, [r4, #0]
 80160aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80160ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80160b2:	d108      	bne.n	80160c6 <_scanf_float+0x1c6>
 80160b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80160b8:	6022      	str	r2, [r4, #0]
 80160ba:	f04f 0a01 	mov.w	sl, #1
 80160be:	e7e3      	b.n	8016088 <_scanf_float+0x188>
 80160c0:	f1ba 0f02 	cmp.w	sl, #2
 80160c4:	d055      	beq.n	8016172 <_scanf_float+0x272>
 80160c6:	2d01      	cmp	r5, #1
 80160c8:	d002      	beq.n	80160d0 <_scanf_float+0x1d0>
 80160ca:	2d04      	cmp	r5, #4
 80160cc:	f47f af48 	bne.w	8015f60 <_scanf_float+0x60>
 80160d0:	3501      	adds	r5, #1
 80160d2:	b2ed      	uxtb	r5, r5
 80160d4:	e7d8      	b.n	8016088 <_scanf_float+0x188>
 80160d6:	f1ba 0f01 	cmp.w	sl, #1
 80160da:	f47f af41 	bne.w	8015f60 <_scanf_float+0x60>
 80160de:	f04f 0a02 	mov.w	sl, #2
 80160e2:	e7d1      	b.n	8016088 <_scanf_float+0x188>
 80160e4:	b97d      	cbnz	r5, 8016106 <_scanf_float+0x206>
 80160e6:	f1b9 0f00 	cmp.w	r9, #0
 80160ea:	f47f af3c 	bne.w	8015f66 <_scanf_float+0x66>
 80160ee:	6822      	ldr	r2, [r4, #0]
 80160f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80160f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80160f8:	f47f af39 	bne.w	8015f6e <_scanf_float+0x6e>
 80160fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016100:	6022      	str	r2, [r4, #0]
 8016102:	2501      	movs	r5, #1
 8016104:	e7c0      	b.n	8016088 <_scanf_float+0x188>
 8016106:	2d03      	cmp	r5, #3
 8016108:	d0e2      	beq.n	80160d0 <_scanf_float+0x1d0>
 801610a:	2d05      	cmp	r5, #5
 801610c:	e7de      	b.n	80160cc <_scanf_float+0x1cc>
 801610e:	2d02      	cmp	r5, #2
 8016110:	f47f af26 	bne.w	8015f60 <_scanf_float+0x60>
 8016114:	2503      	movs	r5, #3
 8016116:	e7b7      	b.n	8016088 <_scanf_float+0x188>
 8016118:	2d06      	cmp	r5, #6
 801611a:	f47f af21 	bne.w	8015f60 <_scanf_float+0x60>
 801611e:	2507      	movs	r5, #7
 8016120:	e7b2      	b.n	8016088 <_scanf_float+0x188>
 8016122:	6822      	ldr	r2, [r4, #0]
 8016124:	0591      	lsls	r1, r2, #22
 8016126:	f57f af1b 	bpl.w	8015f60 <_scanf_float+0x60>
 801612a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801612e:	6022      	str	r2, [r4, #0]
 8016130:	f8cd 9004 	str.w	r9, [sp, #4]
 8016134:	e7a8      	b.n	8016088 <_scanf_float+0x188>
 8016136:	6822      	ldr	r2, [r4, #0]
 8016138:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801613c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016140:	d006      	beq.n	8016150 <_scanf_float+0x250>
 8016142:	0550      	lsls	r0, r2, #21
 8016144:	f57f af0c 	bpl.w	8015f60 <_scanf_float+0x60>
 8016148:	f1b9 0f00 	cmp.w	r9, #0
 801614c:	f43f af0f 	beq.w	8015f6e <_scanf_float+0x6e>
 8016150:	0591      	lsls	r1, r2, #22
 8016152:	bf58      	it	pl
 8016154:	9901      	ldrpl	r1, [sp, #4]
 8016156:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801615a:	bf58      	it	pl
 801615c:	eba9 0101 	subpl.w	r1, r9, r1
 8016160:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016164:	bf58      	it	pl
 8016166:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801616a:	6022      	str	r2, [r4, #0]
 801616c:	f04f 0900 	mov.w	r9, #0
 8016170:	e78a      	b.n	8016088 <_scanf_float+0x188>
 8016172:	f04f 0a03 	mov.w	sl, #3
 8016176:	e787      	b.n	8016088 <_scanf_float+0x188>
 8016178:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801617c:	4639      	mov	r1, r7
 801617e:	4640      	mov	r0, r8
 8016180:	4798      	blx	r3
 8016182:	2800      	cmp	r0, #0
 8016184:	f43f aedf 	beq.w	8015f46 <_scanf_float+0x46>
 8016188:	e6ea      	b.n	8015f60 <_scanf_float+0x60>
 801618a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801618e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016192:	463a      	mov	r2, r7
 8016194:	4640      	mov	r0, r8
 8016196:	4798      	blx	r3
 8016198:	6923      	ldr	r3, [r4, #16]
 801619a:	3b01      	subs	r3, #1
 801619c:	6123      	str	r3, [r4, #16]
 801619e:	e6ec      	b.n	8015f7a <_scanf_float+0x7a>
 80161a0:	1e6b      	subs	r3, r5, #1
 80161a2:	2b06      	cmp	r3, #6
 80161a4:	d825      	bhi.n	80161f2 <_scanf_float+0x2f2>
 80161a6:	2d02      	cmp	r5, #2
 80161a8:	d836      	bhi.n	8016218 <_scanf_float+0x318>
 80161aa:	455e      	cmp	r6, fp
 80161ac:	f67f aee8 	bls.w	8015f80 <_scanf_float+0x80>
 80161b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80161b8:	463a      	mov	r2, r7
 80161ba:	4640      	mov	r0, r8
 80161bc:	4798      	blx	r3
 80161be:	6923      	ldr	r3, [r4, #16]
 80161c0:	3b01      	subs	r3, #1
 80161c2:	6123      	str	r3, [r4, #16]
 80161c4:	e7f1      	b.n	80161aa <_scanf_float+0x2aa>
 80161c6:	9802      	ldr	r0, [sp, #8]
 80161c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80161d0:	9002      	str	r0, [sp, #8]
 80161d2:	463a      	mov	r2, r7
 80161d4:	4640      	mov	r0, r8
 80161d6:	4798      	blx	r3
 80161d8:	6923      	ldr	r3, [r4, #16]
 80161da:	3b01      	subs	r3, #1
 80161dc:	6123      	str	r3, [r4, #16]
 80161de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80161e2:	fa5f fa8a 	uxtb.w	sl, sl
 80161e6:	f1ba 0f02 	cmp.w	sl, #2
 80161ea:	d1ec      	bne.n	80161c6 <_scanf_float+0x2c6>
 80161ec:	3d03      	subs	r5, #3
 80161ee:	b2ed      	uxtb	r5, r5
 80161f0:	1b76      	subs	r6, r6, r5
 80161f2:	6823      	ldr	r3, [r4, #0]
 80161f4:	05da      	lsls	r2, r3, #23
 80161f6:	d52f      	bpl.n	8016258 <_scanf_float+0x358>
 80161f8:	055b      	lsls	r3, r3, #21
 80161fa:	d510      	bpl.n	801621e <_scanf_float+0x31e>
 80161fc:	455e      	cmp	r6, fp
 80161fe:	f67f aebf 	bls.w	8015f80 <_scanf_float+0x80>
 8016202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801620a:	463a      	mov	r2, r7
 801620c:	4640      	mov	r0, r8
 801620e:	4798      	blx	r3
 8016210:	6923      	ldr	r3, [r4, #16]
 8016212:	3b01      	subs	r3, #1
 8016214:	6123      	str	r3, [r4, #16]
 8016216:	e7f1      	b.n	80161fc <_scanf_float+0x2fc>
 8016218:	46aa      	mov	sl, r5
 801621a:	9602      	str	r6, [sp, #8]
 801621c:	e7df      	b.n	80161de <_scanf_float+0x2de>
 801621e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016222:	6923      	ldr	r3, [r4, #16]
 8016224:	2965      	cmp	r1, #101	; 0x65
 8016226:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801622a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801622e:	6123      	str	r3, [r4, #16]
 8016230:	d00c      	beq.n	801624c <_scanf_float+0x34c>
 8016232:	2945      	cmp	r1, #69	; 0x45
 8016234:	d00a      	beq.n	801624c <_scanf_float+0x34c>
 8016236:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801623a:	463a      	mov	r2, r7
 801623c:	4640      	mov	r0, r8
 801623e:	4798      	blx	r3
 8016240:	6923      	ldr	r3, [r4, #16]
 8016242:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016246:	3b01      	subs	r3, #1
 8016248:	1eb5      	subs	r5, r6, #2
 801624a:	6123      	str	r3, [r4, #16]
 801624c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016250:	463a      	mov	r2, r7
 8016252:	4640      	mov	r0, r8
 8016254:	4798      	blx	r3
 8016256:	462e      	mov	r6, r5
 8016258:	6825      	ldr	r5, [r4, #0]
 801625a:	f015 0510 	ands.w	r5, r5, #16
 801625e:	d155      	bne.n	801630c <_scanf_float+0x40c>
 8016260:	7035      	strb	r5, [r6, #0]
 8016262:	6823      	ldr	r3, [r4, #0]
 8016264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801626c:	d11d      	bne.n	80162aa <_scanf_float+0x3aa>
 801626e:	9b01      	ldr	r3, [sp, #4]
 8016270:	454b      	cmp	r3, r9
 8016272:	eba3 0209 	sub.w	r2, r3, r9
 8016276:	d125      	bne.n	80162c4 <_scanf_float+0x3c4>
 8016278:	2200      	movs	r2, #0
 801627a:	4659      	mov	r1, fp
 801627c:	4640      	mov	r0, r8
 801627e:	f000 ff23 	bl	80170c8 <_strtod_r>
 8016282:	9b03      	ldr	r3, [sp, #12]
 8016284:	f8d4 c000 	ldr.w	ip, [r4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	f01c 0f02 	tst.w	ip, #2
 801628e:	4606      	mov	r6, r0
 8016290:	460f      	mov	r7, r1
 8016292:	f103 0204 	add.w	r2, r3, #4
 8016296:	d020      	beq.n	80162da <_scanf_float+0x3da>
 8016298:	9903      	ldr	r1, [sp, #12]
 801629a:	600a      	str	r2, [r1, #0]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	e9c3 6700 	strd	r6, r7, [r3]
 80162a2:	68e3      	ldr	r3, [r4, #12]
 80162a4:	3301      	adds	r3, #1
 80162a6:	60e3      	str	r3, [r4, #12]
 80162a8:	e66b      	b.n	8015f82 <_scanf_float+0x82>
 80162aa:	9b04      	ldr	r3, [sp, #16]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d0e3      	beq.n	8016278 <_scanf_float+0x378>
 80162b0:	9905      	ldr	r1, [sp, #20]
 80162b2:	230a      	movs	r3, #10
 80162b4:	462a      	mov	r2, r5
 80162b6:	3101      	adds	r1, #1
 80162b8:	4640      	mov	r0, r8
 80162ba:	f000 ff89 	bl	80171d0 <_strtol_r>
 80162be:	9b04      	ldr	r3, [sp, #16]
 80162c0:	9e05      	ldr	r6, [sp, #20]
 80162c2:	1ac2      	subs	r2, r0, r3
 80162c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80162c8:	429e      	cmp	r6, r3
 80162ca:	bf28      	it	cs
 80162cc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80162d0:	490f      	ldr	r1, [pc, #60]	; (8016310 <_scanf_float+0x410>)
 80162d2:	4630      	mov	r0, r6
 80162d4:	f000 f820 	bl	8016318 <siprintf>
 80162d8:	e7ce      	b.n	8016278 <_scanf_float+0x378>
 80162da:	f01c 0f04 	tst.w	ip, #4
 80162de:	d1db      	bne.n	8016298 <_scanf_float+0x398>
 80162e0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80162e4:	f8cc 2000 	str.w	r2, [ip]
 80162e8:	f8d3 8000 	ldr.w	r8, [r3]
 80162ec:	4602      	mov	r2, r0
 80162ee:	460b      	mov	r3, r1
 80162f0:	f7ea fbf4 	bl	8000adc <__aeabi_dcmpun>
 80162f4:	b128      	cbz	r0, 8016302 <_scanf_float+0x402>
 80162f6:	4807      	ldr	r0, [pc, #28]	; (8016314 <_scanf_float+0x414>)
 80162f8:	f001 f858 	bl	80173ac <nanf>
 80162fc:	f8c8 0000 	str.w	r0, [r8]
 8016300:	e7cf      	b.n	80162a2 <_scanf_float+0x3a2>
 8016302:	4630      	mov	r0, r6
 8016304:	4639      	mov	r1, r7
 8016306:	f7ea fc47 	bl	8000b98 <__aeabi_d2f>
 801630a:	e7f7      	b.n	80162fc <_scanf_float+0x3fc>
 801630c:	2500      	movs	r5, #0
 801630e:	e638      	b.n	8015f82 <_scanf_float+0x82>
 8016310:	0801b0df 	.word	0x0801b0df
 8016314:	0801b27c 	.word	0x0801b27c

08016318 <siprintf>:
 8016318:	b40e      	push	{r1, r2, r3}
 801631a:	b500      	push	{lr}
 801631c:	b09c      	sub	sp, #112	; 0x70
 801631e:	ab1d      	add	r3, sp, #116	; 0x74
 8016320:	9002      	str	r0, [sp, #8]
 8016322:	9006      	str	r0, [sp, #24]
 8016324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016328:	4809      	ldr	r0, [pc, #36]	; (8016350 <siprintf+0x38>)
 801632a:	9107      	str	r1, [sp, #28]
 801632c:	9104      	str	r1, [sp, #16]
 801632e:	4909      	ldr	r1, [pc, #36]	; (8016354 <siprintf+0x3c>)
 8016330:	f853 2b04 	ldr.w	r2, [r3], #4
 8016334:	9105      	str	r1, [sp, #20]
 8016336:	6800      	ldr	r0, [r0, #0]
 8016338:	9301      	str	r3, [sp, #4]
 801633a:	a902      	add	r1, sp, #8
 801633c:	f002 fa74 	bl	8018828 <_svfiprintf_r>
 8016340:	9b02      	ldr	r3, [sp, #8]
 8016342:	2200      	movs	r2, #0
 8016344:	701a      	strb	r2, [r3, #0]
 8016346:	b01c      	add	sp, #112	; 0x70
 8016348:	f85d eb04 	ldr.w	lr, [sp], #4
 801634c:	b003      	add	sp, #12
 801634e:	4770      	bx	lr
 8016350:	200003e0 	.word	0x200003e0
 8016354:	ffff0208 	.word	0xffff0208

08016358 <std>:
 8016358:	2300      	movs	r3, #0
 801635a:	b510      	push	{r4, lr}
 801635c:	4604      	mov	r4, r0
 801635e:	e9c0 3300 	strd	r3, r3, [r0]
 8016362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016366:	6083      	str	r3, [r0, #8]
 8016368:	8181      	strh	r1, [r0, #12]
 801636a:	6643      	str	r3, [r0, #100]	; 0x64
 801636c:	81c2      	strh	r2, [r0, #14]
 801636e:	6183      	str	r3, [r0, #24]
 8016370:	4619      	mov	r1, r3
 8016372:	2208      	movs	r2, #8
 8016374:	305c      	adds	r0, #92	; 0x5c
 8016376:	f000 ffcb 	bl	8017310 <memset>
 801637a:	4b0d      	ldr	r3, [pc, #52]	; (80163b0 <std+0x58>)
 801637c:	6263      	str	r3, [r4, #36]	; 0x24
 801637e:	4b0d      	ldr	r3, [pc, #52]	; (80163b4 <std+0x5c>)
 8016380:	62a3      	str	r3, [r4, #40]	; 0x28
 8016382:	4b0d      	ldr	r3, [pc, #52]	; (80163b8 <std+0x60>)
 8016384:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016386:	4b0d      	ldr	r3, [pc, #52]	; (80163bc <std+0x64>)
 8016388:	6323      	str	r3, [r4, #48]	; 0x30
 801638a:	4b0d      	ldr	r3, [pc, #52]	; (80163c0 <std+0x68>)
 801638c:	6224      	str	r4, [r4, #32]
 801638e:	429c      	cmp	r4, r3
 8016390:	d006      	beq.n	80163a0 <std+0x48>
 8016392:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016396:	4294      	cmp	r4, r2
 8016398:	d002      	beq.n	80163a0 <std+0x48>
 801639a:	33d0      	adds	r3, #208	; 0xd0
 801639c:	429c      	cmp	r4, r3
 801639e:	d105      	bne.n	80163ac <std+0x54>
 80163a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80163a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163a8:	f000 bfe8 	b.w	801737c <__retarget_lock_init_recursive>
 80163ac:	bd10      	pop	{r4, pc}
 80163ae:	bf00      	nop
 80163b0:	080198bd 	.word	0x080198bd
 80163b4:	080198df 	.word	0x080198df
 80163b8:	08019917 	.word	0x08019917
 80163bc:	0801993b 	.word	0x0801993b
 80163c0:	20001d08 	.word	0x20001d08

080163c4 <stdio_exit_handler>:
 80163c4:	4a02      	ldr	r2, [pc, #8]	; (80163d0 <stdio_exit_handler+0xc>)
 80163c6:	4903      	ldr	r1, [pc, #12]	; (80163d4 <stdio_exit_handler+0x10>)
 80163c8:	4803      	ldr	r0, [pc, #12]	; (80163d8 <stdio_exit_handler+0x14>)
 80163ca:	f000 bf03 	b.w	80171d4 <_fwalk_sglue>
 80163ce:	bf00      	nop
 80163d0:	2000021c 	.word	0x2000021c
 80163d4:	08018f21 	.word	0x08018f21
 80163d8:	20000394 	.word	0x20000394

080163dc <cleanup_stdio>:
 80163dc:	6841      	ldr	r1, [r0, #4]
 80163de:	4b0c      	ldr	r3, [pc, #48]	; (8016410 <cleanup_stdio+0x34>)
 80163e0:	4299      	cmp	r1, r3
 80163e2:	b510      	push	{r4, lr}
 80163e4:	4604      	mov	r4, r0
 80163e6:	d001      	beq.n	80163ec <cleanup_stdio+0x10>
 80163e8:	f002 fd9a 	bl	8018f20 <_fflush_r>
 80163ec:	68a1      	ldr	r1, [r4, #8]
 80163ee:	4b09      	ldr	r3, [pc, #36]	; (8016414 <cleanup_stdio+0x38>)
 80163f0:	4299      	cmp	r1, r3
 80163f2:	d002      	beq.n	80163fa <cleanup_stdio+0x1e>
 80163f4:	4620      	mov	r0, r4
 80163f6:	f002 fd93 	bl	8018f20 <_fflush_r>
 80163fa:	68e1      	ldr	r1, [r4, #12]
 80163fc:	4b06      	ldr	r3, [pc, #24]	; (8016418 <cleanup_stdio+0x3c>)
 80163fe:	4299      	cmp	r1, r3
 8016400:	d004      	beq.n	801640c <cleanup_stdio+0x30>
 8016402:	4620      	mov	r0, r4
 8016404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016408:	f002 bd8a 	b.w	8018f20 <_fflush_r>
 801640c:	bd10      	pop	{r4, pc}
 801640e:	bf00      	nop
 8016410:	20001d08 	.word	0x20001d08
 8016414:	20001d70 	.word	0x20001d70
 8016418:	20001dd8 	.word	0x20001dd8

0801641c <global_stdio_init.part.0>:
 801641c:	b510      	push	{r4, lr}
 801641e:	4b0b      	ldr	r3, [pc, #44]	; (801644c <global_stdio_init.part.0+0x30>)
 8016420:	4c0b      	ldr	r4, [pc, #44]	; (8016450 <global_stdio_init.part.0+0x34>)
 8016422:	4a0c      	ldr	r2, [pc, #48]	; (8016454 <global_stdio_init.part.0+0x38>)
 8016424:	601a      	str	r2, [r3, #0]
 8016426:	4620      	mov	r0, r4
 8016428:	2200      	movs	r2, #0
 801642a:	2104      	movs	r1, #4
 801642c:	f7ff ff94 	bl	8016358 <std>
 8016430:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016434:	2201      	movs	r2, #1
 8016436:	2109      	movs	r1, #9
 8016438:	f7ff ff8e 	bl	8016358 <std>
 801643c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016440:	2202      	movs	r2, #2
 8016442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016446:	2112      	movs	r1, #18
 8016448:	f7ff bf86 	b.w	8016358 <std>
 801644c:	20001e40 	.word	0x20001e40
 8016450:	20001d08 	.word	0x20001d08
 8016454:	080163c5 	.word	0x080163c5

08016458 <__sfp_lock_acquire>:
 8016458:	4801      	ldr	r0, [pc, #4]	; (8016460 <__sfp_lock_acquire+0x8>)
 801645a:	f000 bf90 	b.w	801737e <__retarget_lock_acquire_recursive>
 801645e:	bf00      	nop
 8016460:	20001e45 	.word	0x20001e45

08016464 <__sfp_lock_release>:
 8016464:	4801      	ldr	r0, [pc, #4]	; (801646c <__sfp_lock_release+0x8>)
 8016466:	f000 bf8b 	b.w	8017380 <__retarget_lock_release_recursive>
 801646a:	bf00      	nop
 801646c:	20001e45 	.word	0x20001e45

08016470 <__sinit>:
 8016470:	b510      	push	{r4, lr}
 8016472:	4604      	mov	r4, r0
 8016474:	f7ff fff0 	bl	8016458 <__sfp_lock_acquire>
 8016478:	6a23      	ldr	r3, [r4, #32]
 801647a:	b11b      	cbz	r3, 8016484 <__sinit+0x14>
 801647c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016480:	f7ff bff0 	b.w	8016464 <__sfp_lock_release>
 8016484:	4b04      	ldr	r3, [pc, #16]	; (8016498 <__sinit+0x28>)
 8016486:	6223      	str	r3, [r4, #32]
 8016488:	4b04      	ldr	r3, [pc, #16]	; (801649c <__sinit+0x2c>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d1f5      	bne.n	801647c <__sinit+0xc>
 8016490:	f7ff ffc4 	bl	801641c <global_stdio_init.part.0>
 8016494:	e7f2      	b.n	801647c <__sinit+0xc>
 8016496:	bf00      	nop
 8016498:	080163dd 	.word	0x080163dd
 801649c:	20001e40 	.word	0x20001e40

080164a0 <sulp>:
 80164a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164a4:	460f      	mov	r7, r1
 80164a6:	4690      	mov	r8, r2
 80164a8:	f003 f8d8 	bl	801965c <__ulp>
 80164ac:	4604      	mov	r4, r0
 80164ae:	460d      	mov	r5, r1
 80164b0:	f1b8 0f00 	cmp.w	r8, #0
 80164b4:	d011      	beq.n	80164da <sulp+0x3a>
 80164b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80164ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80164be:	2b00      	cmp	r3, #0
 80164c0:	dd0b      	ble.n	80164da <sulp+0x3a>
 80164c2:	051b      	lsls	r3, r3, #20
 80164c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80164c8:	2400      	movs	r4, #0
 80164ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80164ce:	4622      	mov	r2, r4
 80164d0:	462b      	mov	r3, r5
 80164d2:	f7ea f869 	bl	80005a8 <__aeabi_dmul>
 80164d6:	4604      	mov	r4, r0
 80164d8:	460d      	mov	r5, r1
 80164da:	4620      	mov	r0, r4
 80164dc:	4629      	mov	r1, r5
 80164de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164e2:	0000      	movs	r0, r0
 80164e4:	0000      	movs	r0, r0
	...

080164e8 <_strtod_l>:
 80164e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ec:	b09f      	sub	sp, #124	; 0x7c
 80164ee:	4604      	mov	r4, r0
 80164f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80164f2:	2200      	movs	r2, #0
 80164f4:	921a      	str	r2, [sp, #104]	; 0x68
 80164f6:	460d      	mov	r5, r1
 80164f8:	f04f 0800 	mov.w	r8, #0
 80164fc:	f04f 0900 	mov.w	r9, #0
 8016500:	460a      	mov	r2, r1
 8016502:	9219      	str	r2, [sp, #100]	; 0x64
 8016504:	7811      	ldrb	r1, [r2, #0]
 8016506:	292b      	cmp	r1, #43	; 0x2b
 8016508:	d04a      	beq.n	80165a0 <_strtod_l+0xb8>
 801650a:	d838      	bhi.n	801657e <_strtod_l+0x96>
 801650c:	290d      	cmp	r1, #13
 801650e:	d832      	bhi.n	8016576 <_strtod_l+0x8e>
 8016510:	2908      	cmp	r1, #8
 8016512:	d832      	bhi.n	801657a <_strtod_l+0x92>
 8016514:	2900      	cmp	r1, #0
 8016516:	d03b      	beq.n	8016590 <_strtod_l+0xa8>
 8016518:	2200      	movs	r2, #0
 801651a:	920e      	str	r2, [sp, #56]	; 0x38
 801651c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801651e:	7832      	ldrb	r2, [r6, #0]
 8016520:	2a30      	cmp	r2, #48	; 0x30
 8016522:	f040 80b2 	bne.w	801668a <_strtod_l+0x1a2>
 8016526:	7872      	ldrb	r2, [r6, #1]
 8016528:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801652c:	2a58      	cmp	r2, #88	; 0x58
 801652e:	d16e      	bne.n	801660e <_strtod_l+0x126>
 8016530:	9302      	str	r3, [sp, #8]
 8016532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016534:	9301      	str	r3, [sp, #4]
 8016536:	ab1a      	add	r3, sp, #104	; 0x68
 8016538:	9300      	str	r3, [sp, #0]
 801653a:	4a8d      	ldr	r2, [pc, #564]	; (8016770 <_strtod_l+0x288>)
 801653c:	ab1b      	add	r3, sp, #108	; 0x6c
 801653e:	a919      	add	r1, sp, #100	; 0x64
 8016540:	4620      	mov	r0, r4
 8016542:	f001 fe25 	bl	8018190 <__gethex>
 8016546:	f010 070f 	ands.w	r7, r0, #15
 801654a:	4605      	mov	r5, r0
 801654c:	d005      	beq.n	801655a <_strtod_l+0x72>
 801654e:	2f06      	cmp	r7, #6
 8016550:	d128      	bne.n	80165a4 <_strtod_l+0xbc>
 8016552:	3601      	adds	r6, #1
 8016554:	2300      	movs	r3, #0
 8016556:	9619      	str	r6, [sp, #100]	; 0x64
 8016558:	930e      	str	r3, [sp, #56]	; 0x38
 801655a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801655c:	2b00      	cmp	r3, #0
 801655e:	f040 859c 	bne.w	801709a <_strtod_l+0xbb2>
 8016562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016564:	b1cb      	cbz	r3, 801659a <_strtod_l+0xb2>
 8016566:	4642      	mov	r2, r8
 8016568:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801656c:	4610      	mov	r0, r2
 801656e:	4619      	mov	r1, r3
 8016570:	b01f      	add	sp, #124	; 0x7c
 8016572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016576:	2920      	cmp	r1, #32
 8016578:	d1ce      	bne.n	8016518 <_strtod_l+0x30>
 801657a:	3201      	adds	r2, #1
 801657c:	e7c1      	b.n	8016502 <_strtod_l+0x1a>
 801657e:	292d      	cmp	r1, #45	; 0x2d
 8016580:	d1ca      	bne.n	8016518 <_strtod_l+0x30>
 8016582:	2101      	movs	r1, #1
 8016584:	910e      	str	r1, [sp, #56]	; 0x38
 8016586:	1c51      	adds	r1, r2, #1
 8016588:	9119      	str	r1, [sp, #100]	; 0x64
 801658a:	7852      	ldrb	r2, [r2, #1]
 801658c:	2a00      	cmp	r2, #0
 801658e:	d1c5      	bne.n	801651c <_strtod_l+0x34>
 8016590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016592:	9519      	str	r5, [sp, #100]	; 0x64
 8016594:	2b00      	cmp	r3, #0
 8016596:	f040 857e 	bne.w	8017096 <_strtod_l+0xbae>
 801659a:	4642      	mov	r2, r8
 801659c:	464b      	mov	r3, r9
 801659e:	e7e5      	b.n	801656c <_strtod_l+0x84>
 80165a0:	2100      	movs	r1, #0
 80165a2:	e7ef      	b.n	8016584 <_strtod_l+0x9c>
 80165a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80165a6:	b13a      	cbz	r2, 80165b8 <_strtod_l+0xd0>
 80165a8:	2135      	movs	r1, #53	; 0x35
 80165aa:	a81c      	add	r0, sp, #112	; 0x70
 80165ac:	f003 f942 	bl	8019834 <__copybits>
 80165b0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80165b2:	4620      	mov	r0, r4
 80165b4:	f002 fd28 	bl	8019008 <_Bfree>
 80165b8:	3f01      	subs	r7, #1
 80165ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80165bc:	2f04      	cmp	r7, #4
 80165be:	d806      	bhi.n	80165ce <_strtod_l+0xe6>
 80165c0:	e8df f007 	tbb	[pc, r7]
 80165c4:	201d0314 	.word	0x201d0314
 80165c8:	14          	.byte	0x14
 80165c9:	00          	.byte	0x00
 80165ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80165ce:	05e9      	lsls	r1, r5, #23
 80165d0:	bf48      	it	mi
 80165d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80165d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80165da:	0d1b      	lsrs	r3, r3, #20
 80165dc:	051b      	lsls	r3, r3, #20
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d1bb      	bne.n	801655a <_strtod_l+0x72>
 80165e2:	f000 fea1 	bl	8017328 <__errno>
 80165e6:	2322      	movs	r3, #34	; 0x22
 80165e8:	6003      	str	r3, [r0, #0]
 80165ea:	e7b6      	b.n	801655a <_strtod_l+0x72>
 80165ec:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80165f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80165f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80165f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80165fc:	e7e7      	b.n	80165ce <_strtod_l+0xe6>
 80165fe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8016774 <_strtod_l+0x28c>
 8016602:	e7e4      	b.n	80165ce <_strtod_l+0xe6>
 8016604:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016608:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801660c:	e7df      	b.n	80165ce <_strtod_l+0xe6>
 801660e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016610:	1c5a      	adds	r2, r3, #1
 8016612:	9219      	str	r2, [sp, #100]	; 0x64
 8016614:	785b      	ldrb	r3, [r3, #1]
 8016616:	2b30      	cmp	r3, #48	; 0x30
 8016618:	d0f9      	beq.n	801660e <_strtod_l+0x126>
 801661a:	2b00      	cmp	r3, #0
 801661c:	d09d      	beq.n	801655a <_strtod_l+0x72>
 801661e:	2301      	movs	r3, #1
 8016620:	f04f 0a00 	mov.w	sl, #0
 8016624:	9305      	str	r3, [sp, #20]
 8016626:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016628:	930b      	str	r3, [sp, #44]	; 0x2c
 801662a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 801662e:	46d3      	mov	fp, sl
 8016630:	220a      	movs	r2, #10
 8016632:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016634:	7806      	ldrb	r6, [r0, #0]
 8016636:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801663a:	b2d9      	uxtb	r1, r3
 801663c:	2909      	cmp	r1, #9
 801663e:	d926      	bls.n	801668e <_strtod_l+0x1a6>
 8016640:	494d      	ldr	r1, [pc, #308]	; (8016778 <_strtod_l+0x290>)
 8016642:	2201      	movs	r2, #1
 8016644:	f000 fe52 	bl	80172ec <strncmp>
 8016648:	2800      	cmp	r0, #0
 801664a:	d030      	beq.n	80166ae <_strtod_l+0x1c6>
 801664c:	2000      	movs	r0, #0
 801664e:	4632      	mov	r2, r6
 8016650:	9008      	str	r0, [sp, #32]
 8016652:	465e      	mov	r6, fp
 8016654:	4603      	mov	r3, r0
 8016656:	2a65      	cmp	r2, #101	; 0x65
 8016658:	d001      	beq.n	801665e <_strtod_l+0x176>
 801665a:	2a45      	cmp	r2, #69	; 0x45
 801665c:	d113      	bne.n	8016686 <_strtod_l+0x19e>
 801665e:	b91e      	cbnz	r6, 8016668 <_strtod_l+0x180>
 8016660:	9a05      	ldr	r2, [sp, #20]
 8016662:	4302      	orrs	r2, r0
 8016664:	d094      	beq.n	8016590 <_strtod_l+0xa8>
 8016666:	2600      	movs	r6, #0
 8016668:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801666a:	1c6a      	adds	r2, r5, #1
 801666c:	9219      	str	r2, [sp, #100]	; 0x64
 801666e:	786a      	ldrb	r2, [r5, #1]
 8016670:	2a2b      	cmp	r2, #43	; 0x2b
 8016672:	d074      	beq.n	801675e <_strtod_l+0x276>
 8016674:	2a2d      	cmp	r2, #45	; 0x2d
 8016676:	d078      	beq.n	801676a <_strtod_l+0x282>
 8016678:	f04f 0c00 	mov.w	ip, #0
 801667c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016680:	2909      	cmp	r1, #9
 8016682:	d97f      	bls.n	8016784 <_strtod_l+0x29c>
 8016684:	9519      	str	r5, [sp, #100]	; 0x64
 8016686:	2700      	movs	r7, #0
 8016688:	e09e      	b.n	80167c8 <_strtod_l+0x2e0>
 801668a:	2300      	movs	r3, #0
 801668c:	e7c8      	b.n	8016620 <_strtod_l+0x138>
 801668e:	f1bb 0f08 	cmp.w	fp, #8
 8016692:	bfd8      	it	le
 8016694:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8016696:	f100 0001 	add.w	r0, r0, #1
 801669a:	bfda      	itte	le
 801669c:	fb02 3301 	mlale	r3, r2, r1, r3
 80166a0:	930a      	strle	r3, [sp, #40]	; 0x28
 80166a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80166a6:	f10b 0b01 	add.w	fp, fp, #1
 80166aa:	9019      	str	r0, [sp, #100]	; 0x64
 80166ac:	e7c1      	b.n	8016632 <_strtod_l+0x14a>
 80166ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80166b0:	1c5a      	adds	r2, r3, #1
 80166b2:	9219      	str	r2, [sp, #100]	; 0x64
 80166b4:	785a      	ldrb	r2, [r3, #1]
 80166b6:	f1bb 0f00 	cmp.w	fp, #0
 80166ba:	d037      	beq.n	801672c <_strtod_l+0x244>
 80166bc:	9008      	str	r0, [sp, #32]
 80166be:	465e      	mov	r6, fp
 80166c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80166c4:	2b09      	cmp	r3, #9
 80166c6:	d912      	bls.n	80166ee <_strtod_l+0x206>
 80166c8:	2301      	movs	r3, #1
 80166ca:	e7c4      	b.n	8016656 <_strtod_l+0x16e>
 80166cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80166ce:	1c5a      	adds	r2, r3, #1
 80166d0:	9219      	str	r2, [sp, #100]	; 0x64
 80166d2:	785a      	ldrb	r2, [r3, #1]
 80166d4:	3001      	adds	r0, #1
 80166d6:	2a30      	cmp	r2, #48	; 0x30
 80166d8:	d0f8      	beq.n	80166cc <_strtod_l+0x1e4>
 80166da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80166de:	2b08      	cmp	r3, #8
 80166e0:	f200 84e0 	bhi.w	80170a4 <_strtod_l+0xbbc>
 80166e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80166e6:	9008      	str	r0, [sp, #32]
 80166e8:	2000      	movs	r0, #0
 80166ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80166ec:	4606      	mov	r6, r0
 80166ee:	3a30      	subs	r2, #48	; 0x30
 80166f0:	f100 0301 	add.w	r3, r0, #1
 80166f4:	d014      	beq.n	8016720 <_strtod_l+0x238>
 80166f6:	9908      	ldr	r1, [sp, #32]
 80166f8:	4419      	add	r1, r3
 80166fa:	9108      	str	r1, [sp, #32]
 80166fc:	4633      	mov	r3, r6
 80166fe:	eb00 0c06 	add.w	ip, r0, r6
 8016702:	210a      	movs	r1, #10
 8016704:	4563      	cmp	r3, ip
 8016706:	d113      	bne.n	8016730 <_strtod_l+0x248>
 8016708:	1833      	adds	r3, r6, r0
 801670a:	2b08      	cmp	r3, #8
 801670c:	f106 0601 	add.w	r6, r6, #1
 8016710:	4406      	add	r6, r0
 8016712:	dc1a      	bgt.n	801674a <_strtod_l+0x262>
 8016714:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016716:	230a      	movs	r3, #10
 8016718:	fb03 2301 	mla	r3, r3, r1, r2
 801671c:	930a      	str	r3, [sp, #40]	; 0x28
 801671e:	2300      	movs	r3, #0
 8016720:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016722:	1c51      	adds	r1, r2, #1
 8016724:	9119      	str	r1, [sp, #100]	; 0x64
 8016726:	7852      	ldrb	r2, [r2, #1]
 8016728:	4618      	mov	r0, r3
 801672a:	e7c9      	b.n	80166c0 <_strtod_l+0x1d8>
 801672c:	4658      	mov	r0, fp
 801672e:	e7d2      	b.n	80166d6 <_strtod_l+0x1ee>
 8016730:	2b08      	cmp	r3, #8
 8016732:	f103 0301 	add.w	r3, r3, #1
 8016736:	dc03      	bgt.n	8016740 <_strtod_l+0x258>
 8016738:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801673a:	434f      	muls	r7, r1
 801673c:	970a      	str	r7, [sp, #40]	; 0x28
 801673e:	e7e1      	b.n	8016704 <_strtod_l+0x21c>
 8016740:	2b10      	cmp	r3, #16
 8016742:	bfd8      	it	le
 8016744:	fb01 fa0a 	mulle.w	sl, r1, sl
 8016748:	e7dc      	b.n	8016704 <_strtod_l+0x21c>
 801674a:	2e10      	cmp	r6, #16
 801674c:	bfdc      	itt	le
 801674e:	230a      	movle	r3, #10
 8016750:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8016754:	e7e3      	b.n	801671e <_strtod_l+0x236>
 8016756:	2300      	movs	r3, #0
 8016758:	9308      	str	r3, [sp, #32]
 801675a:	2301      	movs	r3, #1
 801675c:	e780      	b.n	8016660 <_strtod_l+0x178>
 801675e:	f04f 0c00 	mov.w	ip, #0
 8016762:	1caa      	adds	r2, r5, #2
 8016764:	9219      	str	r2, [sp, #100]	; 0x64
 8016766:	78aa      	ldrb	r2, [r5, #2]
 8016768:	e788      	b.n	801667c <_strtod_l+0x194>
 801676a:	f04f 0c01 	mov.w	ip, #1
 801676e:	e7f8      	b.n	8016762 <_strtod_l+0x27a>
 8016770:	0801b0e8 	.word	0x0801b0e8
 8016774:	7ff00000 	.word	0x7ff00000
 8016778:	0801b0e4 	.word	0x0801b0e4
 801677c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801677e:	1c51      	adds	r1, r2, #1
 8016780:	9119      	str	r1, [sp, #100]	; 0x64
 8016782:	7852      	ldrb	r2, [r2, #1]
 8016784:	2a30      	cmp	r2, #48	; 0x30
 8016786:	d0f9      	beq.n	801677c <_strtod_l+0x294>
 8016788:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801678c:	2908      	cmp	r1, #8
 801678e:	f63f af7a 	bhi.w	8016686 <_strtod_l+0x19e>
 8016792:	3a30      	subs	r2, #48	; 0x30
 8016794:	9209      	str	r2, [sp, #36]	; 0x24
 8016796:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016798:	920c      	str	r2, [sp, #48]	; 0x30
 801679a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801679c:	1c57      	adds	r7, r2, #1
 801679e:	9719      	str	r7, [sp, #100]	; 0x64
 80167a0:	7852      	ldrb	r2, [r2, #1]
 80167a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80167a6:	f1be 0f09 	cmp.w	lr, #9
 80167aa:	d938      	bls.n	801681e <_strtod_l+0x336>
 80167ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80167ae:	1a7f      	subs	r7, r7, r1
 80167b0:	2f08      	cmp	r7, #8
 80167b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80167b6:	dc03      	bgt.n	80167c0 <_strtod_l+0x2d8>
 80167b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80167ba:	428f      	cmp	r7, r1
 80167bc:	bfa8      	it	ge
 80167be:	460f      	movge	r7, r1
 80167c0:	f1bc 0f00 	cmp.w	ip, #0
 80167c4:	d000      	beq.n	80167c8 <_strtod_l+0x2e0>
 80167c6:	427f      	negs	r7, r7
 80167c8:	2e00      	cmp	r6, #0
 80167ca:	d14f      	bne.n	801686c <_strtod_l+0x384>
 80167cc:	9905      	ldr	r1, [sp, #20]
 80167ce:	4301      	orrs	r1, r0
 80167d0:	f47f aec3 	bne.w	801655a <_strtod_l+0x72>
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	f47f aedb 	bne.w	8016590 <_strtod_l+0xa8>
 80167da:	2a69      	cmp	r2, #105	; 0x69
 80167dc:	d029      	beq.n	8016832 <_strtod_l+0x34a>
 80167de:	dc26      	bgt.n	801682e <_strtod_l+0x346>
 80167e0:	2a49      	cmp	r2, #73	; 0x49
 80167e2:	d026      	beq.n	8016832 <_strtod_l+0x34a>
 80167e4:	2a4e      	cmp	r2, #78	; 0x4e
 80167e6:	f47f aed3 	bne.w	8016590 <_strtod_l+0xa8>
 80167ea:	499a      	ldr	r1, [pc, #616]	; (8016a54 <_strtod_l+0x56c>)
 80167ec:	a819      	add	r0, sp, #100	; 0x64
 80167ee:	f001 ff11 	bl	8018614 <__match>
 80167f2:	2800      	cmp	r0, #0
 80167f4:	f43f aecc 	beq.w	8016590 <_strtod_l+0xa8>
 80167f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	2b28      	cmp	r3, #40	; 0x28
 80167fe:	d12f      	bne.n	8016860 <_strtod_l+0x378>
 8016800:	4995      	ldr	r1, [pc, #596]	; (8016a58 <_strtod_l+0x570>)
 8016802:	aa1c      	add	r2, sp, #112	; 0x70
 8016804:	a819      	add	r0, sp, #100	; 0x64
 8016806:	f001 ff19 	bl	801863c <__hexnan>
 801680a:	2805      	cmp	r0, #5
 801680c:	d128      	bne.n	8016860 <_strtod_l+0x378>
 801680e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016810:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8016814:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016818:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801681c:	e69d      	b.n	801655a <_strtod_l+0x72>
 801681e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016820:	210a      	movs	r1, #10
 8016822:	fb01 2107 	mla	r1, r1, r7, r2
 8016826:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801682a:	9209      	str	r2, [sp, #36]	; 0x24
 801682c:	e7b5      	b.n	801679a <_strtod_l+0x2b2>
 801682e:	2a6e      	cmp	r2, #110	; 0x6e
 8016830:	e7d9      	b.n	80167e6 <_strtod_l+0x2fe>
 8016832:	498a      	ldr	r1, [pc, #552]	; (8016a5c <_strtod_l+0x574>)
 8016834:	a819      	add	r0, sp, #100	; 0x64
 8016836:	f001 feed 	bl	8018614 <__match>
 801683a:	2800      	cmp	r0, #0
 801683c:	f43f aea8 	beq.w	8016590 <_strtod_l+0xa8>
 8016840:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016842:	4987      	ldr	r1, [pc, #540]	; (8016a60 <_strtod_l+0x578>)
 8016844:	3b01      	subs	r3, #1
 8016846:	a819      	add	r0, sp, #100	; 0x64
 8016848:	9319      	str	r3, [sp, #100]	; 0x64
 801684a:	f001 fee3 	bl	8018614 <__match>
 801684e:	b910      	cbnz	r0, 8016856 <_strtod_l+0x36e>
 8016850:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016852:	3301      	adds	r3, #1
 8016854:	9319      	str	r3, [sp, #100]	; 0x64
 8016856:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8016a64 <_strtod_l+0x57c>
 801685a:	f04f 0800 	mov.w	r8, #0
 801685e:	e67c      	b.n	801655a <_strtod_l+0x72>
 8016860:	4881      	ldr	r0, [pc, #516]	; (8016a68 <_strtod_l+0x580>)
 8016862:	f000 fd9d 	bl	80173a0 <nan>
 8016866:	4680      	mov	r8, r0
 8016868:	4689      	mov	r9, r1
 801686a:	e676      	b.n	801655a <_strtod_l+0x72>
 801686c:	9b08      	ldr	r3, [sp, #32]
 801686e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016870:	1afb      	subs	r3, r7, r3
 8016872:	f1bb 0f00 	cmp.w	fp, #0
 8016876:	bf08      	it	eq
 8016878:	46b3      	moveq	fp, r6
 801687a:	2e10      	cmp	r6, #16
 801687c:	9309      	str	r3, [sp, #36]	; 0x24
 801687e:	4635      	mov	r5, r6
 8016880:	bfa8      	it	ge
 8016882:	2510      	movge	r5, #16
 8016884:	f7e9 fe16 	bl	80004b4 <__aeabi_ui2d>
 8016888:	2e09      	cmp	r6, #9
 801688a:	4680      	mov	r8, r0
 801688c:	4689      	mov	r9, r1
 801688e:	dd13      	ble.n	80168b8 <_strtod_l+0x3d0>
 8016890:	4b76      	ldr	r3, [pc, #472]	; (8016a6c <_strtod_l+0x584>)
 8016892:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016896:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801689a:	f7e9 fe85 	bl	80005a8 <__aeabi_dmul>
 801689e:	4680      	mov	r8, r0
 80168a0:	4650      	mov	r0, sl
 80168a2:	4689      	mov	r9, r1
 80168a4:	f7e9 fe06 	bl	80004b4 <__aeabi_ui2d>
 80168a8:	4602      	mov	r2, r0
 80168aa:	460b      	mov	r3, r1
 80168ac:	4640      	mov	r0, r8
 80168ae:	4649      	mov	r1, r9
 80168b0:	f7e9 fcc4 	bl	800023c <__adddf3>
 80168b4:	4680      	mov	r8, r0
 80168b6:	4689      	mov	r9, r1
 80168b8:	2e0f      	cmp	r6, #15
 80168ba:	dc36      	bgt.n	801692a <_strtod_l+0x442>
 80168bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168be:	2b00      	cmp	r3, #0
 80168c0:	f43f ae4b 	beq.w	801655a <_strtod_l+0x72>
 80168c4:	dd22      	ble.n	801690c <_strtod_l+0x424>
 80168c6:	2b16      	cmp	r3, #22
 80168c8:	dc09      	bgt.n	80168de <_strtod_l+0x3f6>
 80168ca:	4968      	ldr	r1, [pc, #416]	; (8016a6c <_strtod_l+0x584>)
 80168cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80168d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168d4:	4642      	mov	r2, r8
 80168d6:	464b      	mov	r3, r9
 80168d8:	f7e9 fe66 	bl	80005a8 <__aeabi_dmul>
 80168dc:	e7c3      	b.n	8016866 <_strtod_l+0x37e>
 80168de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80168e0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80168e4:	4293      	cmp	r3, r2
 80168e6:	db20      	blt.n	801692a <_strtod_l+0x442>
 80168e8:	4c60      	ldr	r4, [pc, #384]	; (8016a6c <_strtod_l+0x584>)
 80168ea:	f1c6 060f 	rsb	r6, r6, #15
 80168ee:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80168f2:	4642      	mov	r2, r8
 80168f4:	464b      	mov	r3, r9
 80168f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168fa:	f7e9 fe55 	bl	80005a8 <__aeabi_dmul>
 80168fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016900:	1b9e      	subs	r6, r3, r6
 8016902:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8016906:	e9d4 2300 	ldrd	r2, r3, [r4]
 801690a:	e7e5      	b.n	80168d8 <_strtod_l+0x3f0>
 801690c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801690e:	3316      	adds	r3, #22
 8016910:	db0b      	blt.n	801692a <_strtod_l+0x442>
 8016912:	9b08      	ldr	r3, [sp, #32]
 8016914:	1bdf      	subs	r7, r3, r7
 8016916:	4b55      	ldr	r3, [pc, #340]	; (8016a6c <_strtod_l+0x584>)
 8016918:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801691c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016920:	4640      	mov	r0, r8
 8016922:	4649      	mov	r1, r9
 8016924:	f7e9 ff6a 	bl	80007fc <__aeabi_ddiv>
 8016928:	e79d      	b.n	8016866 <_strtod_l+0x37e>
 801692a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801692c:	1b75      	subs	r5, r6, r5
 801692e:	441d      	add	r5, r3
 8016930:	2d00      	cmp	r5, #0
 8016932:	dd70      	ble.n	8016a16 <_strtod_l+0x52e>
 8016934:	f015 030f 	ands.w	r3, r5, #15
 8016938:	d00a      	beq.n	8016950 <_strtod_l+0x468>
 801693a:	494c      	ldr	r1, [pc, #304]	; (8016a6c <_strtod_l+0x584>)
 801693c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016940:	4642      	mov	r2, r8
 8016942:	464b      	mov	r3, r9
 8016944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016948:	f7e9 fe2e 	bl	80005a8 <__aeabi_dmul>
 801694c:	4680      	mov	r8, r0
 801694e:	4689      	mov	r9, r1
 8016950:	f035 050f 	bics.w	r5, r5, #15
 8016954:	d04d      	beq.n	80169f2 <_strtod_l+0x50a>
 8016956:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801695a:	dd22      	ble.n	80169a2 <_strtod_l+0x4ba>
 801695c:	2600      	movs	r6, #0
 801695e:	46b3      	mov	fp, r6
 8016960:	960b      	str	r6, [sp, #44]	; 0x2c
 8016962:	9608      	str	r6, [sp, #32]
 8016964:	2322      	movs	r3, #34	; 0x22
 8016966:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8016a64 <_strtod_l+0x57c>
 801696a:	6023      	str	r3, [r4, #0]
 801696c:	f04f 0800 	mov.w	r8, #0
 8016970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016972:	2b00      	cmp	r3, #0
 8016974:	f43f adf1 	beq.w	801655a <_strtod_l+0x72>
 8016978:	991a      	ldr	r1, [sp, #104]	; 0x68
 801697a:	4620      	mov	r0, r4
 801697c:	f002 fb44 	bl	8019008 <_Bfree>
 8016980:	9908      	ldr	r1, [sp, #32]
 8016982:	4620      	mov	r0, r4
 8016984:	f002 fb40 	bl	8019008 <_Bfree>
 8016988:	4659      	mov	r1, fp
 801698a:	4620      	mov	r0, r4
 801698c:	f002 fb3c 	bl	8019008 <_Bfree>
 8016990:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016992:	4620      	mov	r0, r4
 8016994:	f002 fb38 	bl	8019008 <_Bfree>
 8016998:	4631      	mov	r1, r6
 801699a:	4620      	mov	r0, r4
 801699c:	f002 fb34 	bl	8019008 <_Bfree>
 80169a0:	e5db      	b.n	801655a <_strtod_l+0x72>
 80169a2:	4b33      	ldr	r3, [pc, #204]	; (8016a70 <_strtod_l+0x588>)
 80169a4:	9305      	str	r3, [sp, #20]
 80169a6:	2300      	movs	r3, #0
 80169a8:	112d      	asrs	r5, r5, #4
 80169aa:	4640      	mov	r0, r8
 80169ac:	4649      	mov	r1, r9
 80169ae:	469a      	mov	sl, r3
 80169b0:	2d01      	cmp	r5, #1
 80169b2:	dc21      	bgt.n	80169f8 <_strtod_l+0x510>
 80169b4:	b10b      	cbz	r3, 80169ba <_strtod_l+0x4d2>
 80169b6:	4680      	mov	r8, r0
 80169b8:	4689      	mov	r9, r1
 80169ba:	492d      	ldr	r1, [pc, #180]	; (8016a70 <_strtod_l+0x588>)
 80169bc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80169c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80169c4:	4642      	mov	r2, r8
 80169c6:	464b      	mov	r3, r9
 80169c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169cc:	f7e9 fdec 	bl	80005a8 <__aeabi_dmul>
 80169d0:	4b24      	ldr	r3, [pc, #144]	; (8016a64 <_strtod_l+0x57c>)
 80169d2:	460a      	mov	r2, r1
 80169d4:	400b      	ands	r3, r1
 80169d6:	4927      	ldr	r1, [pc, #156]	; (8016a74 <_strtod_l+0x58c>)
 80169d8:	428b      	cmp	r3, r1
 80169da:	4680      	mov	r8, r0
 80169dc:	d8be      	bhi.n	801695c <_strtod_l+0x474>
 80169de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80169e2:	428b      	cmp	r3, r1
 80169e4:	bf86      	itte	hi
 80169e6:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8016a78 <_strtod_l+0x590>
 80169ea:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80169ee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80169f2:	2300      	movs	r3, #0
 80169f4:	9305      	str	r3, [sp, #20]
 80169f6:	e07b      	b.n	8016af0 <_strtod_l+0x608>
 80169f8:	07ea      	lsls	r2, r5, #31
 80169fa:	d505      	bpl.n	8016a08 <_strtod_l+0x520>
 80169fc:	9b05      	ldr	r3, [sp, #20]
 80169fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a02:	f7e9 fdd1 	bl	80005a8 <__aeabi_dmul>
 8016a06:	2301      	movs	r3, #1
 8016a08:	9a05      	ldr	r2, [sp, #20]
 8016a0a:	3208      	adds	r2, #8
 8016a0c:	f10a 0a01 	add.w	sl, sl, #1
 8016a10:	106d      	asrs	r5, r5, #1
 8016a12:	9205      	str	r2, [sp, #20]
 8016a14:	e7cc      	b.n	80169b0 <_strtod_l+0x4c8>
 8016a16:	d0ec      	beq.n	80169f2 <_strtod_l+0x50a>
 8016a18:	426d      	negs	r5, r5
 8016a1a:	f015 020f 	ands.w	r2, r5, #15
 8016a1e:	d00a      	beq.n	8016a36 <_strtod_l+0x54e>
 8016a20:	4b12      	ldr	r3, [pc, #72]	; (8016a6c <_strtod_l+0x584>)
 8016a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016a26:	4640      	mov	r0, r8
 8016a28:	4649      	mov	r1, r9
 8016a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2e:	f7e9 fee5 	bl	80007fc <__aeabi_ddiv>
 8016a32:	4680      	mov	r8, r0
 8016a34:	4689      	mov	r9, r1
 8016a36:	112d      	asrs	r5, r5, #4
 8016a38:	d0db      	beq.n	80169f2 <_strtod_l+0x50a>
 8016a3a:	2d1f      	cmp	r5, #31
 8016a3c:	dd1e      	ble.n	8016a7c <_strtod_l+0x594>
 8016a3e:	2600      	movs	r6, #0
 8016a40:	46b3      	mov	fp, r6
 8016a42:	960b      	str	r6, [sp, #44]	; 0x2c
 8016a44:	9608      	str	r6, [sp, #32]
 8016a46:	2322      	movs	r3, #34	; 0x22
 8016a48:	f04f 0800 	mov.w	r8, #0
 8016a4c:	f04f 0900 	mov.w	r9, #0
 8016a50:	6023      	str	r3, [r4, #0]
 8016a52:	e78d      	b.n	8016970 <_strtod_l+0x488>
 8016a54:	0801b0b8 	.word	0x0801b0b8
 8016a58:	0801b0fc 	.word	0x0801b0fc
 8016a5c:	0801b0b0 	.word	0x0801b0b0
 8016a60:	0801b280 	.word	0x0801b280
 8016a64:	7ff00000 	.word	0x7ff00000
 8016a68:	0801b27c 	.word	0x0801b27c
 8016a6c:	0801b400 	.word	0x0801b400
 8016a70:	0801b3d8 	.word	0x0801b3d8
 8016a74:	7ca00000 	.word	0x7ca00000
 8016a78:	7fefffff 	.word	0x7fefffff
 8016a7c:	f015 0310 	ands.w	r3, r5, #16
 8016a80:	bf18      	it	ne
 8016a82:	236a      	movne	r3, #106	; 0x6a
 8016a84:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8016d54 <_strtod_l+0x86c>
 8016a88:	9305      	str	r3, [sp, #20]
 8016a8a:	4640      	mov	r0, r8
 8016a8c:	4649      	mov	r1, r9
 8016a8e:	2300      	movs	r3, #0
 8016a90:	07ea      	lsls	r2, r5, #31
 8016a92:	d504      	bpl.n	8016a9e <_strtod_l+0x5b6>
 8016a94:	e9da 2300 	ldrd	r2, r3, [sl]
 8016a98:	f7e9 fd86 	bl	80005a8 <__aeabi_dmul>
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	106d      	asrs	r5, r5, #1
 8016aa0:	f10a 0a08 	add.w	sl, sl, #8
 8016aa4:	d1f4      	bne.n	8016a90 <_strtod_l+0x5a8>
 8016aa6:	b10b      	cbz	r3, 8016aac <_strtod_l+0x5c4>
 8016aa8:	4680      	mov	r8, r0
 8016aaa:	4689      	mov	r9, r1
 8016aac:	9b05      	ldr	r3, [sp, #20]
 8016aae:	b1bb      	cbz	r3, 8016ae0 <_strtod_l+0x5f8>
 8016ab0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016ab4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	4649      	mov	r1, r9
 8016abc:	dd10      	ble.n	8016ae0 <_strtod_l+0x5f8>
 8016abe:	2b1f      	cmp	r3, #31
 8016ac0:	f340 8125 	ble.w	8016d0e <_strtod_l+0x826>
 8016ac4:	2b34      	cmp	r3, #52	; 0x34
 8016ac6:	bfde      	ittt	le
 8016ac8:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8016acc:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016ad0:	4093      	lslle	r3, r2
 8016ad2:	f04f 0800 	mov.w	r8, #0
 8016ad6:	bfcc      	ite	gt
 8016ad8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016adc:	ea03 0901 	andle.w	r9, r3, r1
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	4640      	mov	r0, r8
 8016ae6:	4649      	mov	r1, r9
 8016ae8:	f7e9 ffc6 	bl	8000a78 <__aeabi_dcmpeq>
 8016aec:	2800      	cmp	r0, #0
 8016aee:	d1a6      	bne.n	8016a3e <_strtod_l+0x556>
 8016af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016af2:	9300      	str	r3, [sp, #0]
 8016af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016af6:	4633      	mov	r3, r6
 8016af8:	465a      	mov	r2, fp
 8016afa:	4620      	mov	r0, r4
 8016afc:	f002 faec 	bl	80190d8 <__s2b>
 8016b00:	900b      	str	r0, [sp, #44]	; 0x2c
 8016b02:	2800      	cmp	r0, #0
 8016b04:	f43f af2a 	beq.w	801695c <_strtod_l+0x474>
 8016b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b0a:	9b08      	ldr	r3, [sp, #32]
 8016b0c:	2a00      	cmp	r2, #0
 8016b0e:	eba3 0307 	sub.w	r3, r3, r7
 8016b12:	bfa8      	it	ge
 8016b14:	2300      	movge	r3, #0
 8016b16:	9312      	str	r3, [sp, #72]	; 0x48
 8016b18:	2600      	movs	r6, #0
 8016b1a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016b1e:	9316      	str	r3, [sp, #88]	; 0x58
 8016b20:	46b3      	mov	fp, r6
 8016b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b24:	4620      	mov	r0, r4
 8016b26:	6859      	ldr	r1, [r3, #4]
 8016b28:	f002 fa2e 	bl	8018f88 <_Balloc>
 8016b2c:	9008      	str	r0, [sp, #32]
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	f43f af18 	beq.w	8016964 <_strtod_l+0x47c>
 8016b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b36:	691a      	ldr	r2, [r3, #16]
 8016b38:	3202      	adds	r2, #2
 8016b3a:	f103 010c 	add.w	r1, r3, #12
 8016b3e:	0092      	lsls	r2, r2, #2
 8016b40:	300c      	adds	r0, #12
 8016b42:	f000 fc1e 	bl	8017382 <memcpy>
 8016b46:	ab1c      	add	r3, sp, #112	; 0x70
 8016b48:	9301      	str	r3, [sp, #4]
 8016b4a:	ab1b      	add	r3, sp, #108	; 0x6c
 8016b4c:	9300      	str	r3, [sp, #0]
 8016b4e:	4642      	mov	r2, r8
 8016b50:	464b      	mov	r3, r9
 8016b52:	4620      	mov	r0, r4
 8016b54:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8016b58:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8016b5c:	f002 fde6 	bl	801972c <__d2b>
 8016b60:	901a      	str	r0, [sp, #104]	; 0x68
 8016b62:	2800      	cmp	r0, #0
 8016b64:	f43f aefe 	beq.w	8016964 <_strtod_l+0x47c>
 8016b68:	2101      	movs	r1, #1
 8016b6a:	4620      	mov	r0, r4
 8016b6c:	f002 fb4c 	bl	8019208 <__i2b>
 8016b70:	4683      	mov	fp, r0
 8016b72:	2800      	cmp	r0, #0
 8016b74:	f43f aef6 	beq.w	8016964 <_strtod_l+0x47c>
 8016b78:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8016b7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016b7c:	2f00      	cmp	r7, #0
 8016b7e:	bfab      	itete	ge
 8016b80:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8016b82:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016b84:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016b86:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8016b8a:	bfac      	ite	ge
 8016b8c:	eb07 0a03 	addge.w	sl, r7, r3
 8016b90:	1bdd      	sublt	r5, r3, r7
 8016b92:	9b05      	ldr	r3, [sp, #20]
 8016b94:	1aff      	subs	r7, r7, r3
 8016b96:	4417      	add	r7, r2
 8016b98:	4b6f      	ldr	r3, [pc, #444]	; (8016d58 <_strtod_l+0x870>)
 8016b9a:	3f01      	subs	r7, #1
 8016b9c:	429f      	cmp	r7, r3
 8016b9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016ba2:	f280 80c7 	bge.w	8016d34 <_strtod_l+0x84c>
 8016ba6:	1bdb      	subs	r3, r3, r7
 8016ba8:	2b1f      	cmp	r3, #31
 8016baa:	eba2 0203 	sub.w	r2, r2, r3
 8016bae:	f04f 0101 	mov.w	r1, #1
 8016bb2:	f300 80b3 	bgt.w	8016d1c <_strtod_l+0x834>
 8016bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8016bba:	9313      	str	r3, [sp, #76]	; 0x4c
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	9310      	str	r3, [sp, #64]	; 0x40
 8016bc0:	eb0a 0702 	add.w	r7, sl, r2
 8016bc4:	9b05      	ldr	r3, [sp, #20]
 8016bc6:	45ba      	cmp	sl, r7
 8016bc8:	4415      	add	r5, r2
 8016bca:	441d      	add	r5, r3
 8016bcc:	4653      	mov	r3, sl
 8016bce:	bfa8      	it	ge
 8016bd0:	463b      	movge	r3, r7
 8016bd2:	42ab      	cmp	r3, r5
 8016bd4:	bfa8      	it	ge
 8016bd6:	462b      	movge	r3, r5
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	bfc2      	ittt	gt
 8016bdc:	1aff      	subgt	r7, r7, r3
 8016bde:	1aed      	subgt	r5, r5, r3
 8016be0:	ebaa 0a03 	subgt.w	sl, sl, r3
 8016be4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	dd17      	ble.n	8016c1a <_strtod_l+0x732>
 8016bea:	4659      	mov	r1, fp
 8016bec:	461a      	mov	r2, r3
 8016bee:	4620      	mov	r0, r4
 8016bf0:	f002 fbca 	bl	8019388 <__pow5mult>
 8016bf4:	4683      	mov	fp, r0
 8016bf6:	2800      	cmp	r0, #0
 8016bf8:	f43f aeb4 	beq.w	8016964 <_strtod_l+0x47c>
 8016bfc:	4601      	mov	r1, r0
 8016bfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016c00:	4620      	mov	r0, r4
 8016c02:	f002 fb17 	bl	8019234 <__multiply>
 8016c06:	900a      	str	r0, [sp, #40]	; 0x28
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	f43f aeab 	beq.w	8016964 <_strtod_l+0x47c>
 8016c0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016c10:	4620      	mov	r0, r4
 8016c12:	f002 f9f9 	bl	8019008 <_Bfree>
 8016c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c18:	931a      	str	r3, [sp, #104]	; 0x68
 8016c1a:	2f00      	cmp	r7, #0
 8016c1c:	f300 808f 	bgt.w	8016d3e <_strtod_l+0x856>
 8016c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	dd08      	ble.n	8016c38 <_strtod_l+0x750>
 8016c26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016c28:	9908      	ldr	r1, [sp, #32]
 8016c2a:	4620      	mov	r0, r4
 8016c2c:	f002 fbac 	bl	8019388 <__pow5mult>
 8016c30:	9008      	str	r0, [sp, #32]
 8016c32:	2800      	cmp	r0, #0
 8016c34:	f43f ae96 	beq.w	8016964 <_strtod_l+0x47c>
 8016c38:	2d00      	cmp	r5, #0
 8016c3a:	dd08      	ble.n	8016c4e <_strtod_l+0x766>
 8016c3c:	9908      	ldr	r1, [sp, #32]
 8016c3e:	462a      	mov	r2, r5
 8016c40:	4620      	mov	r0, r4
 8016c42:	f002 fbfb 	bl	801943c <__lshift>
 8016c46:	9008      	str	r0, [sp, #32]
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	f43f ae8b 	beq.w	8016964 <_strtod_l+0x47c>
 8016c4e:	f1ba 0f00 	cmp.w	sl, #0
 8016c52:	dd08      	ble.n	8016c66 <_strtod_l+0x77e>
 8016c54:	4659      	mov	r1, fp
 8016c56:	4652      	mov	r2, sl
 8016c58:	4620      	mov	r0, r4
 8016c5a:	f002 fbef 	bl	801943c <__lshift>
 8016c5e:	4683      	mov	fp, r0
 8016c60:	2800      	cmp	r0, #0
 8016c62:	f43f ae7f 	beq.w	8016964 <_strtod_l+0x47c>
 8016c66:	9a08      	ldr	r2, [sp, #32]
 8016c68:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016c6a:	4620      	mov	r0, r4
 8016c6c:	f002 fc6e 	bl	801954c <__mdiff>
 8016c70:	4606      	mov	r6, r0
 8016c72:	2800      	cmp	r0, #0
 8016c74:	f43f ae76 	beq.w	8016964 <_strtod_l+0x47c>
 8016c78:	2500      	movs	r5, #0
 8016c7a:	68c3      	ldr	r3, [r0, #12]
 8016c7c:	60c5      	str	r5, [r0, #12]
 8016c7e:	4659      	mov	r1, fp
 8016c80:	930a      	str	r3, [sp, #40]	; 0x28
 8016c82:	f002 fc47 	bl	8019514 <__mcmp>
 8016c86:	42a8      	cmp	r0, r5
 8016c88:	da6c      	bge.n	8016d64 <_strtod_l+0x87c>
 8016c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c8c:	ea53 0308 	orrs.w	r3, r3, r8
 8016c90:	f040 8090 	bne.w	8016db4 <_strtod_l+0x8cc>
 8016c94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	f040 808b 	bne.w	8016db4 <_strtod_l+0x8cc>
 8016c9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016ca2:	0d1b      	lsrs	r3, r3, #20
 8016ca4:	051b      	lsls	r3, r3, #20
 8016ca6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016caa:	f240 8083 	bls.w	8016db4 <_strtod_l+0x8cc>
 8016cae:	6973      	ldr	r3, [r6, #20]
 8016cb0:	b913      	cbnz	r3, 8016cb8 <_strtod_l+0x7d0>
 8016cb2:	6933      	ldr	r3, [r6, #16]
 8016cb4:	2b01      	cmp	r3, #1
 8016cb6:	dd7d      	ble.n	8016db4 <_strtod_l+0x8cc>
 8016cb8:	4631      	mov	r1, r6
 8016cba:	2201      	movs	r2, #1
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	f002 fbbd 	bl	801943c <__lshift>
 8016cc2:	4659      	mov	r1, fp
 8016cc4:	4606      	mov	r6, r0
 8016cc6:	f002 fc25 	bl	8019514 <__mcmp>
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	dd72      	ble.n	8016db4 <_strtod_l+0x8cc>
 8016cce:	9905      	ldr	r1, [sp, #20]
 8016cd0:	4a22      	ldr	r2, [pc, #136]	; (8016d5c <_strtod_l+0x874>)
 8016cd2:	464b      	mov	r3, r9
 8016cd4:	2900      	cmp	r1, #0
 8016cd6:	f000 808e 	beq.w	8016df6 <_strtod_l+0x90e>
 8016cda:	ea02 0109 	and.w	r1, r2, r9
 8016cde:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016ce2:	f300 8088 	bgt.w	8016df6 <_strtod_l+0x90e>
 8016ce6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016cea:	f77f aeac 	ble.w	8016a46 <_strtod_l+0x55e>
 8016cee:	4b1c      	ldr	r3, [pc, #112]	; (8016d60 <_strtod_l+0x878>)
 8016cf0:	4640      	mov	r0, r8
 8016cf2:	4649      	mov	r1, r9
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	f7e9 fc57 	bl	80005a8 <__aeabi_dmul>
 8016cfa:	4b18      	ldr	r3, [pc, #96]	; (8016d5c <_strtod_l+0x874>)
 8016cfc:	400b      	ands	r3, r1
 8016cfe:	4680      	mov	r8, r0
 8016d00:	4689      	mov	r9, r1
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	f47f ae38 	bne.w	8016978 <_strtod_l+0x490>
 8016d08:	2322      	movs	r3, #34	; 0x22
 8016d0a:	6023      	str	r3, [r4, #0]
 8016d0c:	e634      	b.n	8016978 <_strtod_l+0x490>
 8016d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d12:	fa02 f303 	lsl.w	r3, r2, r3
 8016d16:	ea03 0808 	and.w	r8, r3, r8
 8016d1a:	e6e1      	b.n	8016ae0 <_strtod_l+0x5f8>
 8016d1c:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8016d20:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8016d24:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8016d28:	37e2      	adds	r7, #226	; 0xe2
 8016d2a:	fa01 f307 	lsl.w	r3, r1, r7
 8016d2e:	9310      	str	r3, [sp, #64]	; 0x40
 8016d30:	9113      	str	r1, [sp, #76]	; 0x4c
 8016d32:	e745      	b.n	8016bc0 <_strtod_l+0x6d8>
 8016d34:	2300      	movs	r3, #0
 8016d36:	9310      	str	r3, [sp, #64]	; 0x40
 8016d38:	2301      	movs	r3, #1
 8016d3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8016d3c:	e740      	b.n	8016bc0 <_strtod_l+0x6d8>
 8016d3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016d40:	463a      	mov	r2, r7
 8016d42:	4620      	mov	r0, r4
 8016d44:	f002 fb7a 	bl	801943c <__lshift>
 8016d48:	901a      	str	r0, [sp, #104]	; 0x68
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	f47f af68 	bne.w	8016c20 <_strtod_l+0x738>
 8016d50:	e608      	b.n	8016964 <_strtod_l+0x47c>
 8016d52:	bf00      	nop
 8016d54:	0801b110 	.word	0x0801b110
 8016d58:	fffffc02 	.word	0xfffffc02
 8016d5c:	7ff00000 	.word	0x7ff00000
 8016d60:	39500000 	.word	0x39500000
 8016d64:	46ca      	mov	sl, r9
 8016d66:	d165      	bne.n	8016e34 <_strtod_l+0x94c>
 8016d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016d6e:	b352      	cbz	r2, 8016dc6 <_strtod_l+0x8de>
 8016d70:	4a9d      	ldr	r2, [pc, #628]	; (8016fe8 <_strtod_l+0xb00>)
 8016d72:	4293      	cmp	r3, r2
 8016d74:	d12a      	bne.n	8016dcc <_strtod_l+0x8e4>
 8016d76:	9b05      	ldr	r3, [sp, #20]
 8016d78:	4641      	mov	r1, r8
 8016d7a:	b1fb      	cbz	r3, 8016dbc <_strtod_l+0x8d4>
 8016d7c:	4b9b      	ldr	r3, [pc, #620]	; (8016fec <_strtod_l+0xb04>)
 8016d7e:	ea09 0303 	and.w	r3, r9, r3
 8016d82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d8a:	d81a      	bhi.n	8016dc2 <_strtod_l+0x8da>
 8016d8c:	0d1b      	lsrs	r3, r3, #20
 8016d8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d92:	fa02 f303 	lsl.w	r3, r2, r3
 8016d96:	4299      	cmp	r1, r3
 8016d98:	d118      	bne.n	8016dcc <_strtod_l+0x8e4>
 8016d9a:	4b95      	ldr	r3, [pc, #596]	; (8016ff0 <_strtod_l+0xb08>)
 8016d9c:	459a      	cmp	sl, r3
 8016d9e:	d102      	bne.n	8016da6 <_strtod_l+0x8be>
 8016da0:	3101      	adds	r1, #1
 8016da2:	f43f addf 	beq.w	8016964 <_strtod_l+0x47c>
 8016da6:	4b91      	ldr	r3, [pc, #580]	; (8016fec <_strtod_l+0xb04>)
 8016da8:	ea0a 0303 	and.w	r3, sl, r3
 8016dac:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016db0:	f04f 0800 	mov.w	r8, #0
 8016db4:	9b05      	ldr	r3, [sp, #20]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d199      	bne.n	8016cee <_strtod_l+0x806>
 8016dba:	e5dd      	b.n	8016978 <_strtod_l+0x490>
 8016dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016dc0:	e7e9      	b.n	8016d96 <_strtod_l+0x8ae>
 8016dc2:	4613      	mov	r3, r2
 8016dc4:	e7e7      	b.n	8016d96 <_strtod_l+0x8ae>
 8016dc6:	ea53 0308 	orrs.w	r3, r3, r8
 8016dca:	d080      	beq.n	8016cce <_strtod_l+0x7e6>
 8016dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016dce:	b1e3      	cbz	r3, 8016e0a <_strtod_l+0x922>
 8016dd0:	ea13 0f0a 	tst.w	r3, sl
 8016dd4:	d0ee      	beq.n	8016db4 <_strtod_l+0x8cc>
 8016dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dd8:	9a05      	ldr	r2, [sp, #20]
 8016dda:	4640      	mov	r0, r8
 8016ddc:	4649      	mov	r1, r9
 8016dde:	b1c3      	cbz	r3, 8016e12 <_strtod_l+0x92a>
 8016de0:	f7ff fb5e 	bl	80164a0 <sulp>
 8016de4:	4602      	mov	r2, r0
 8016de6:	460b      	mov	r3, r1
 8016de8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016dea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016dec:	f7e9 fa26 	bl	800023c <__adddf3>
 8016df0:	4680      	mov	r8, r0
 8016df2:	4689      	mov	r9, r1
 8016df4:	e7de      	b.n	8016db4 <_strtod_l+0x8cc>
 8016df6:	4013      	ands	r3, r2
 8016df8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016dfc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016e00:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016e04:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016e08:	e7d4      	b.n	8016db4 <_strtod_l+0x8cc>
 8016e0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016e0c:	ea13 0f08 	tst.w	r3, r8
 8016e10:	e7e0      	b.n	8016dd4 <_strtod_l+0x8ec>
 8016e12:	f7ff fb45 	bl	80164a0 <sulp>
 8016e16:	4602      	mov	r2, r0
 8016e18:	460b      	mov	r3, r1
 8016e1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016e1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016e1e:	f7e9 fa0b 	bl	8000238 <__aeabi_dsub>
 8016e22:	2200      	movs	r2, #0
 8016e24:	2300      	movs	r3, #0
 8016e26:	4680      	mov	r8, r0
 8016e28:	4689      	mov	r9, r1
 8016e2a:	f7e9 fe25 	bl	8000a78 <__aeabi_dcmpeq>
 8016e2e:	2800      	cmp	r0, #0
 8016e30:	d0c0      	beq.n	8016db4 <_strtod_l+0x8cc>
 8016e32:	e608      	b.n	8016a46 <_strtod_l+0x55e>
 8016e34:	4659      	mov	r1, fp
 8016e36:	4630      	mov	r0, r6
 8016e38:	f002 fcce 	bl	80197d8 <__ratio>
 8016e3c:	4602      	mov	r2, r0
 8016e3e:	460b      	mov	r3, r1
 8016e40:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016e44:	2200      	movs	r2, #0
 8016e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016e4a:	f7e9 fe29 	bl	8000aa0 <__aeabi_dcmple>
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d06f      	beq.n	8016f32 <_strtod_l+0xa4a>
 8016e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d17c      	bne.n	8016f52 <_strtod_l+0xa6a>
 8016e58:	f1b8 0f00 	cmp.w	r8, #0
 8016e5c:	d159      	bne.n	8016f12 <_strtod_l+0xa2a>
 8016e5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d17b      	bne.n	8016f5e <_strtod_l+0xa76>
 8016e66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016e6a:	4b62      	ldr	r3, [pc, #392]	; (8016ff4 <_strtod_l+0xb0c>)
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	f7e9 fe0d 	bl	8000a8c <__aeabi_dcmplt>
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d15a      	bne.n	8016f2c <_strtod_l+0xa44>
 8016e76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016e7a:	4b5f      	ldr	r3, [pc, #380]	; (8016ff8 <_strtod_l+0xb10>)
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	f7e9 fb93 	bl	80005a8 <__aeabi_dmul>
 8016e82:	4605      	mov	r5, r0
 8016e84:	460f      	mov	r7, r1
 8016e86:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016e8a:	9506      	str	r5, [sp, #24]
 8016e8c:	9307      	str	r3, [sp, #28]
 8016e8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e92:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016e96:	4b55      	ldr	r3, [pc, #340]	; (8016fec <_strtod_l+0xb04>)
 8016e98:	4a54      	ldr	r2, [pc, #336]	; (8016fec <_strtod_l+0xb04>)
 8016e9a:	ea0a 0303 	and.w	r3, sl, r3
 8016e9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ea0:	4b56      	ldr	r3, [pc, #344]	; (8016ffc <_strtod_l+0xb14>)
 8016ea2:	ea0a 0202 	and.w	r2, sl, r2
 8016ea6:	429a      	cmp	r2, r3
 8016ea8:	f040 80ae 	bne.w	8017008 <_strtod_l+0xb20>
 8016eac:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016eb0:	4640      	mov	r0, r8
 8016eb2:	4649      	mov	r1, r9
 8016eb4:	f002 fbd2 	bl	801965c <__ulp>
 8016eb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016ebc:	f7e9 fb74 	bl	80005a8 <__aeabi_dmul>
 8016ec0:	4642      	mov	r2, r8
 8016ec2:	464b      	mov	r3, r9
 8016ec4:	f7e9 f9ba 	bl	800023c <__adddf3>
 8016ec8:	f8df a120 	ldr.w	sl, [pc, #288]	; 8016fec <_strtod_l+0xb04>
 8016ecc:	4a4c      	ldr	r2, [pc, #304]	; (8017000 <_strtod_l+0xb18>)
 8016ece:	ea01 0a0a 	and.w	sl, r1, sl
 8016ed2:	4592      	cmp	sl, r2
 8016ed4:	4680      	mov	r8, r0
 8016ed6:	d948      	bls.n	8016f6a <_strtod_l+0xa82>
 8016ed8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016eda:	4b45      	ldr	r3, [pc, #276]	; (8016ff0 <_strtod_l+0xb08>)
 8016edc:	429a      	cmp	r2, r3
 8016ede:	d103      	bne.n	8016ee8 <_strtod_l+0xa00>
 8016ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ee2:	3301      	adds	r3, #1
 8016ee4:	f43f ad3e 	beq.w	8016964 <_strtod_l+0x47c>
 8016ee8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8016ff0 <_strtod_l+0xb08>
 8016eec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016ef0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	f002 f888 	bl	8019008 <_Bfree>
 8016ef8:	9908      	ldr	r1, [sp, #32]
 8016efa:	4620      	mov	r0, r4
 8016efc:	f002 f884 	bl	8019008 <_Bfree>
 8016f00:	4659      	mov	r1, fp
 8016f02:	4620      	mov	r0, r4
 8016f04:	f002 f880 	bl	8019008 <_Bfree>
 8016f08:	4631      	mov	r1, r6
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	f002 f87c 	bl	8019008 <_Bfree>
 8016f10:	e607      	b.n	8016b22 <_strtod_l+0x63a>
 8016f12:	f1b8 0f01 	cmp.w	r8, #1
 8016f16:	d103      	bne.n	8016f20 <_strtod_l+0xa38>
 8016f18:	f1b9 0f00 	cmp.w	r9, #0
 8016f1c:	f43f ad93 	beq.w	8016a46 <_strtod_l+0x55e>
 8016f20:	4b38      	ldr	r3, [pc, #224]	; (8017004 <_strtod_l+0xb1c>)
 8016f22:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016f24:	2200      	movs	r2, #0
 8016f26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016f2a:	e016      	b.n	8016f5a <_strtod_l+0xa72>
 8016f2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016f2e:	4f32      	ldr	r7, [pc, #200]	; (8016ff8 <_strtod_l+0xb10>)
 8016f30:	e7a9      	b.n	8016e86 <_strtod_l+0x99e>
 8016f32:	4b31      	ldr	r3, [pc, #196]	; (8016ff8 <_strtod_l+0xb10>)
 8016f34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016f38:	2200      	movs	r2, #0
 8016f3a:	f7e9 fb35 	bl	80005a8 <__aeabi_dmul>
 8016f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f40:	4605      	mov	r5, r0
 8016f42:	460f      	mov	r7, r1
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d09e      	beq.n	8016e86 <_strtod_l+0x99e>
 8016f48:	4602      	mov	r2, r0
 8016f4a:	460b      	mov	r3, r1
 8016f4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016f50:	e79d      	b.n	8016e8e <_strtod_l+0x9a6>
 8016f52:	4b28      	ldr	r3, [pc, #160]	; (8016ff4 <_strtod_l+0xb0c>)
 8016f54:	2200      	movs	r2, #0
 8016f56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016f5a:	4f26      	ldr	r7, [pc, #152]	; (8016ff4 <_strtod_l+0xb0c>)
 8016f5c:	e797      	b.n	8016e8e <_strtod_l+0x9a6>
 8016f5e:	4b29      	ldr	r3, [pc, #164]	; (8017004 <_strtod_l+0xb1c>)
 8016f60:	2200      	movs	r2, #0
 8016f62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016f66:	4645      	mov	r5, r8
 8016f68:	e7f7      	b.n	8016f5a <_strtod_l+0xa72>
 8016f6a:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8016f6e:	9b05      	ldr	r3, [sp, #20]
 8016f70:	46ca      	mov	sl, r9
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d1bc      	bne.n	8016ef0 <_strtod_l+0xa08>
 8016f76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016f7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016f7c:	0d1b      	lsrs	r3, r3, #20
 8016f7e:	051b      	lsls	r3, r3, #20
 8016f80:	429a      	cmp	r2, r3
 8016f82:	d1b5      	bne.n	8016ef0 <_strtod_l+0xa08>
 8016f84:	4628      	mov	r0, r5
 8016f86:	4639      	mov	r1, r7
 8016f88:	f7ea f8f2 	bl	8001170 <__aeabi_d2lz>
 8016f8c:	f7e9 fade 	bl	800054c <__aeabi_l2d>
 8016f90:	4602      	mov	r2, r0
 8016f92:	460b      	mov	r3, r1
 8016f94:	4628      	mov	r0, r5
 8016f96:	4639      	mov	r1, r7
 8016f98:	f7e9 f94e 	bl	8000238 <__aeabi_dsub>
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	4602      	mov	r2, r0
 8016fa0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016fa4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8016fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016faa:	ea4a 0a08 	orr.w	sl, sl, r8
 8016fae:	ea5a 0a03 	orrs.w	sl, sl, r3
 8016fb2:	d06a      	beq.n	801708a <_strtod_l+0xba2>
 8016fb4:	a308      	add	r3, pc, #32	; (adr r3, 8016fd8 <_strtod_l+0xaf0>)
 8016fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fba:	f7e9 fd67 	bl	8000a8c <__aeabi_dcmplt>
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	f47f acda 	bne.w	8016978 <_strtod_l+0x490>
 8016fc4:	a306      	add	r3, pc, #24	; (adr r3, 8016fe0 <_strtod_l+0xaf8>)
 8016fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016fce:	f7e9 fd7b 	bl	8000ac8 <__aeabi_dcmpgt>
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	d08c      	beq.n	8016ef0 <_strtod_l+0xa08>
 8016fd6:	e4cf      	b.n	8016978 <_strtod_l+0x490>
 8016fd8:	94a03595 	.word	0x94a03595
 8016fdc:	3fdfffff 	.word	0x3fdfffff
 8016fe0:	35afe535 	.word	0x35afe535
 8016fe4:	3fe00000 	.word	0x3fe00000
 8016fe8:	000fffff 	.word	0x000fffff
 8016fec:	7ff00000 	.word	0x7ff00000
 8016ff0:	7fefffff 	.word	0x7fefffff
 8016ff4:	3ff00000 	.word	0x3ff00000
 8016ff8:	3fe00000 	.word	0x3fe00000
 8016ffc:	7fe00000 	.word	0x7fe00000
 8017000:	7c9fffff 	.word	0x7c9fffff
 8017004:	bff00000 	.word	0xbff00000
 8017008:	9b05      	ldr	r3, [sp, #20]
 801700a:	b333      	cbz	r3, 801705a <_strtod_l+0xb72>
 801700c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801700e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017012:	d822      	bhi.n	801705a <_strtod_l+0xb72>
 8017014:	a328      	add	r3, pc, #160	; (adr r3, 80170b8 <_strtod_l+0xbd0>)
 8017016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701a:	4628      	mov	r0, r5
 801701c:	4639      	mov	r1, r7
 801701e:	f7e9 fd3f 	bl	8000aa0 <__aeabi_dcmple>
 8017022:	b1a0      	cbz	r0, 801704e <_strtod_l+0xb66>
 8017024:	4639      	mov	r1, r7
 8017026:	4628      	mov	r0, r5
 8017028:	f7e9 fd96 	bl	8000b58 <__aeabi_d2uiz>
 801702c:	2801      	cmp	r0, #1
 801702e:	bf38      	it	cc
 8017030:	2001      	movcc	r0, #1
 8017032:	f7e9 fa3f 	bl	80004b4 <__aeabi_ui2d>
 8017036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017038:	4605      	mov	r5, r0
 801703a:	460f      	mov	r7, r1
 801703c:	bb03      	cbnz	r3, 8017080 <_strtod_l+0xb98>
 801703e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017042:	9014      	str	r0, [sp, #80]	; 0x50
 8017044:	9315      	str	r3, [sp, #84]	; 0x54
 8017046:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801704a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801704e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017052:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017056:	1a9b      	subs	r3, r3, r2
 8017058:	9311      	str	r3, [sp, #68]	; 0x44
 801705a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801705c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801705e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8017062:	f002 fafb 	bl	801965c <__ulp>
 8017066:	4602      	mov	r2, r0
 8017068:	460b      	mov	r3, r1
 801706a:	4640      	mov	r0, r8
 801706c:	4649      	mov	r1, r9
 801706e:	f7e9 fa9b 	bl	80005a8 <__aeabi_dmul>
 8017072:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017076:	f7e9 f8e1 	bl	800023c <__adddf3>
 801707a:	4680      	mov	r8, r0
 801707c:	4689      	mov	r9, r1
 801707e:	e776      	b.n	8016f6e <_strtod_l+0xa86>
 8017080:	4602      	mov	r2, r0
 8017082:	460b      	mov	r3, r1
 8017084:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017088:	e7dd      	b.n	8017046 <_strtod_l+0xb5e>
 801708a:	a30d      	add	r3, pc, #52	; (adr r3, 80170c0 <_strtod_l+0xbd8>)
 801708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017090:	f7e9 fcfc 	bl	8000a8c <__aeabi_dcmplt>
 8017094:	e79d      	b.n	8016fd2 <_strtod_l+0xaea>
 8017096:	2300      	movs	r3, #0
 8017098:	930e      	str	r3, [sp, #56]	; 0x38
 801709a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801709c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801709e:	6013      	str	r3, [r2, #0]
 80170a0:	f7ff ba5f 	b.w	8016562 <_strtod_l+0x7a>
 80170a4:	2a65      	cmp	r2, #101	; 0x65
 80170a6:	f43f ab56 	beq.w	8016756 <_strtod_l+0x26e>
 80170aa:	2a45      	cmp	r2, #69	; 0x45
 80170ac:	f43f ab53 	beq.w	8016756 <_strtod_l+0x26e>
 80170b0:	2301      	movs	r3, #1
 80170b2:	f7ff bb8b 	b.w	80167cc <_strtod_l+0x2e4>
 80170b6:	bf00      	nop
 80170b8:	ffc00000 	.word	0xffc00000
 80170bc:	41dfffff 	.word	0x41dfffff
 80170c0:	94a03595 	.word	0x94a03595
 80170c4:	3fcfffff 	.word	0x3fcfffff

080170c8 <_strtod_r>:
 80170c8:	4b01      	ldr	r3, [pc, #4]	; (80170d0 <_strtod_r+0x8>)
 80170ca:	f7ff ba0d 	b.w	80164e8 <_strtod_l>
 80170ce:	bf00      	nop
 80170d0:	20000228 	.word	0x20000228

080170d4 <_strtol_l.constprop.0>:
 80170d4:	2b01      	cmp	r3, #1
 80170d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170da:	4686      	mov	lr, r0
 80170dc:	4690      	mov	r8, r2
 80170de:	d001      	beq.n	80170e4 <_strtol_l.constprop.0+0x10>
 80170e0:	2b24      	cmp	r3, #36	; 0x24
 80170e2:	d906      	bls.n	80170f2 <_strtol_l.constprop.0+0x1e>
 80170e4:	f000 f920 	bl	8017328 <__errno>
 80170e8:	2316      	movs	r3, #22
 80170ea:	6003      	str	r3, [r0, #0]
 80170ec:	2000      	movs	r0, #0
 80170ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170f2:	4836      	ldr	r0, [pc, #216]	; (80171cc <_strtol_l.constprop.0+0xf8>)
 80170f4:	460d      	mov	r5, r1
 80170f6:	462a      	mov	r2, r5
 80170f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80170fc:	5d06      	ldrb	r6, [r0, r4]
 80170fe:	f016 0608 	ands.w	r6, r6, #8
 8017102:	d1f8      	bne.n	80170f6 <_strtol_l.constprop.0+0x22>
 8017104:	2c2d      	cmp	r4, #45	; 0x2d
 8017106:	d12e      	bne.n	8017166 <_strtol_l.constprop.0+0x92>
 8017108:	782c      	ldrb	r4, [r5, #0]
 801710a:	2601      	movs	r6, #1
 801710c:	1c95      	adds	r5, r2, #2
 801710e:	2b00      	cmp	r3, #0
 8017110:	d057      	beq.n	80171c2 <_strtol_l.constprop.0+0xee>
 8017112:	2b10      	cmp	r3, #16
 8017114:	d109      	bne.n	801712a <_strtol_l.constprop.0+0x56>
 8017116:	2c30      	cmp	r4, #48	; 0x30
 8017118:	d107      	bne.n	801712a <_strtol_l.constprop.0+0x56>
 801711a:	782a      	ldrb	r2, [r5, #0]
 801711c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8017120:	2a58      	cmp	r2, #88	; 0x58
 8017122:	d149      	bne.n	80171b8 <_strtol_l.constprop.0+0xe4>
 8017124:	786c      	ldrb	r4, [r5, #1]
 8017126:	2310      	movs	r3, #16
 8017128:	3502      	adds	r5, #2
 801712a:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 801712e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8017132:	2200      	movs	r2, #0
 8017134:	fbbc f9f3 	udiv	r9, ip, r3
 8017138:	4610      	mov	r0, r2
 801713a:	fb03 ca19 	mls	sl, r3, r9, ip
 801713e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017142:	2f09      	cmp	r7, #9
 8017144:	d814      	bhi.n	8017170 <_strtol_l.constprop.0+0x9c>
 8017146:	463c      	mov	r4, r7
 8017148:	42a3      	cmp	r3, r4
 801714a:	dd20      	ble.n	801718e <_strtol_l.constprop.0+0xba>
 801714c:	1c57      	adds	r7, r2, #1
 801714e:	d007      	beq.n	8017160 <_strtol_l.constprop.0+0x8c>
 8017150:	4581      	cmp	r9, r0
 8017152:	d319      	bcc.n	8017188 <_strtol_l.constprop.0+0xb4>
 8017154:	d101      	bne.n	801715a <_strtol_l.constprop.0+0x86>
 8017156:	45a2      	cmp	sl, r4
 8017158:	db16      	blt.n	8017188 <_strtol_l.constprop.0+0xb4>
 801715a:	fb00 4003 	mla	r0, r0, r3, r4
 801715e:	2201      	movs	r2, #1
 8017160:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017164:	e7eb      	b.n	801713e <_strtol_l.constprop.0+0x6a>
 8017166:	2c2b      	cmp	r4, #43	; 0x2b
 8017168:	bf04      	itt	eq
 801716a:	782c      	ldrbeq	r4, [r5, #0]
 801716c:	1c95      	addeq	r5, r2, #2
 801716e:	e7ce      	b.n	801710e <_strtol_l.constprop.0+0x3a>
 8017170:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017174:	2f19      	cmp	r7, #25
 8017176:	d801      	bhi.n	801717c <_strtol_l.constprop.0+0xa8>
 8017178:	3c37      	subs	r4, #55	; 0x37
 801717a:	e7e5      	b.n	8017148 <_strtol_l.constprop.0+0x74>
 801717c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017180:	2f19      	cmp	r7, #25
 8017182:	d804      	bhi.n	801718e <_strtol_l.constprop.0+0xba>
 8017184:	3c57      	subs	r4, #87	; 0x57
 8017186:	e7df      	b.n	8017148 <_strtol_l.constprop.0+0x74>
 8017188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801718c:	e7e8      	b.n	8017160 <_strtol_l.constprop.0+0x8c>
 801718e:	1c53      	adds	r3, r2, #1
 8017190:	d108      	bne.n	80171a4 <_strtol_l.constprop.0+0xd0>
 8017192:	2322      	movs	r3, #34	; 0x22
 8017194:	f8ce 3000 	str.w	r3, [lr]
 8017198:	4660      	mov	r0, ip
 801719a:	f1b8 0f00 	cmp.w	r8, #0
 801719e:	d0a6      	beq.n	80170ee <_strtol_l.constprop.0+0x1a>
 80171a0:	1e69      	subs	r1, r5, #1
 80171a2:	e006      	b.n	80171b2 <_strtol_l.constprop.0+0xde>
 80171a4:	b106      	cbz	r6, 80171a8 <_strtol_l.constprop.0+0xd4>
 80171a6:	4240      	negs	r0, r0
 80171a8:	f1b8 0f00 	cmp.w	r8, #0
 80171ac:	d09f      	beq.n	80170ee <_strtol_l.constprop.0+0x1a>
 80171ae:	2a00      	cmp	r2, #0
 80171b0:	d1f6      	bne.n	80171a0 <_strtol_l.constprop.0+0xcc>
 80171b2:	f8c8 1000 	str.w	r1, [r8]
 80171b6:	e79a      	b.n	80170ee <_strtol_l.constprop.0+0x1a>
 80171b8:	2430      	movs	r4, #48	; 0x30
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d1b5      	bne.n	801712a <_strtol_l.constprop.0+0x56>
 80171be:	2308      	movs	r3, #8
 80171c0:	e7b3      	b.n	801712a <_strtol_l.constprop.0+0x56>
 80171c2:	2c30      	cmp	r4, #48	; 0x30
 80171c4:	d0a9      	beq.n	801711a <_strtol_l.constprop.0+0x46>
 80171c6:	230a      	movs	r3, #10
 80171c8:	e7af      	b.n	801712a <_strtol_l.constprop.0+0x56>
 80171ca:	bf00      	nop
 80171cc:	0801b141 	.word	0x0801b141

080171d0 <_strtol_r>:
 80171d0:	f7ff bf80 	b.w	80170d4 <_strtol_l.constprop.0>

080171d4 <_fwalk_sglue>:
 80171d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171d8:	4607      	mov	r7, r0
 80171da:	4688      	mov	r8, r1
 80171dc:	4614      	mov	r4, r2
 80171de:	2600      	movs	r6, #0
 80171e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80171e4:	f1b9 0901 	subs.w	r9, r9, #1
 80171e8:	d505      	bpl.n	80171f6 <_fwalk_sglue+0x22>
 80171ea:	6824      	ldr	r4, [r4, #0]
 80171ec:	2c00      	cmp	r4, #0
 80171ee:	d1f7      	bne.n	80171e0 <_fwalk_sglue+0xc>
 80171f0:	4630      	mov	r0, r6
 80171f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171f6:	89ab      	ldrh	r3, [r5, #12]
 80171f8:	2b01      	cmp	r3, #1
 80171fa:	d907      	bls.n	801720c <_fwalk_sglue+0x38>
 80171fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017200:	3301      	adds	r3, #1
 8017202:	d003      	beq.n	801720c <_fwalk_sglue+0x38>
 8017204:	4629      	mov	r1, r5
 8017206:	4638      	mov	r0, r7
 8017208:	47c0      	blx	r8
 801720a:	4306      	orrs	r6, r0
 801720c:	3568      	adds	r5, #104	; 0x68
 801720e:	e7e9      	b.n	80171e4 <_fwalk_sglue+0x10>

08017210 <iprintf>:
 8017210:	b40f      	push	{r0, r1, r2, r3}
 8017212:	b507      	push	{r0, r1, r2, lr}
 8017214:	4906      	ldr	r1, [pc, #24]	; (8017230 <iprintf+0x20>)
 8017216:	ab04      	add	r3, sp, #16
 8017218:	6808      	ldr	r0, [r1, #0]
 801721a:	f853 2b04 	ldr.w	r2, [r3], #4
 801721e:	6881      	ldr	r1, [r0, #8]
 8017220:	9301      	str	r3, [sp, #4]
 8017222:	f001 fc27 	bl	8018a74 <_vfiprintf_r>
 8017226:	b003      	add	sp, #12
 8017228:	f85d eb04 	ldr.w	lr, [sp], #4
 801722c:	b004      	add	sp, #16
 801722e:	4770      	bx	lr
 8017230:	200003e0 	.word	0x200003e0

08017234 <_puts_r>:
 8017234:	6a03      	ldr	r3, [r0, #32]
 8017236:	b570      	push	{r4, r5, r6, lr}
 8017238:	6884      	ldr	r4, [r0, #8]
 801723a:	4605      	mov	r5, r0
 801723c:	460e      	mov	r6, r1
 801723e:	b90b      	cbnz	r3, 8017244 <_puts_r+0x10>
 8017240:	f7ff f916 	bl	8016470 <__sinit>
 8017244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017246:	07db      	lsls	r3, r3, #31
 8017248:	d405      	bmi.n	8017256 <_puts_r+0x22>
 801724a:	89a3      	ldrh	r3, [r4, #12]
 801724c:	0598      	lsls	r0, r3, #22
 801724e:	d402      	bmi.n	8017256 <_puts_r+0x22>
 8017250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017252:	f000 f894 	bl	801737e <__retarget_lock_acquire_recursive>
 8017256:	89a3      	ldrh	r3, [r4, #12]
 8017258:	0719      	lsls	r1, r3, #28
 801725a:	d513      	bpl.n	8017284 <_puts_r+0x50>
 801725c:	6923      	ldr	r3, [r4, #16]
 801725e:	b18b      	cbz	r3, 8017284 <_puts_r+0x50>
 8017260:	3e01      	subs	r6, #1
 8017262:	68a3      	ldr	r3, [r4, #8]
 8017264:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017268:	3b01      	subs	r3, #1
 801726a:	60a3      	str	r3, [r4, #8]
 801726c:	b9e9      	cbnz	r1, 80172aa <_puts_r+0x76>
 801726e:	2b00      	cmp	r3, #0
 8017270:	da2e      	bge.n	80172d0 <_puts_r+0x9c>
 8017272:	4622      	mov	r2, r4
 8017274:	210a      	movs	r1, #10
 8017276:	4628      	mov	r0, r5
 8017278:	f002 fba5 	bl	80199c6 <__swbuf_r>
 801727c:	3001      	adds	r0, #1
 801727e:	d007      	beq.n	8017290 <_puts_r+0x5c>
 8017280:	250a      	movs	r5, #10
 8017282:	e007      	b.n	8017294 <_puts_r+0x60>
 8017284:	4621      	mov	r1, r4
 8017286:	4628      	mov	r0, r5
 8017288:	f002 fbda 	bl	8019a40 <__swsetup_r>
 801728c:	2800      	cmp	r0, #0
 801728e:	d0e7      	beq.n	8017260 <_puts_r+0x2c>
 8017290:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017296:	07da      	lsls	r2, r3, #31
 8017298:	d405      	bmi.n	80172a6 <_puts_r+0x72>
 801729a:	89a3      	ldrh	r3, [r4, #12]
 801729c:	059b      	lsls	r3, r3, #22
 801729e:	d402      	bmi.n	80172a6 <_puts_r+0x72>
 80172a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172a2:	f000 f86d 	bl	8017380 <__retarget_lock_release_recursive>
 80172a6:	4628      	mov	r0, r5
 80172a8:	bd70      	pop	{r4, r5, r6, pc}
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	da04      	bge.n	80172b8 <_puts_r+0x84>
 80172ae:	69a2      	ldr	r2, [r4, #24]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	dc06      	bgt.n	80172c2 <_puts_r+0x8e>
 80172b4:	290a      	cmp	r1, #10
 80172b6:	d004      	beq.n	80172c2 <_puts_r+0x8e>
 80172b8:	6823      	ldr	r3, [r4, #0]
 80172ba:	1c5a      	adds	r2, r3, #1
 80172bc:	6022      	str	r2, [r4, #0]
 80172be:	7019      	strb	r1, [r3, #0]
 80172c0:	e7cf      	b.n	8017262 <_puts_r+0x2e>
 80172c2:	4622      	mov	r2, r4
 80172c4:	4628      	mov	r0, r5
 80172c6:	f002 fb7e 	bl	80199c6 <__swbuf_r>
 80172ca:	3001      	adds	r0, #1
 80172cc:	d1c9      	bne.n	8017262 <_puts_r+0x2e>
 80172ce:	e7df      	b.n	8017290 <_puts_r+0x5c>
 80172d0:	6823      	ldr	r3, [r4, #0]
 80172d2:	250a      	movs	r5, #10
 80172d4:	1c5a      	adds	r2, r3, #1
 80172d6:	6022      	str	r2, [r4, #0]
 80172d8:	701d      	strb	r5, [r3, #0]
 80172da:	e7db      	b.n	8017294 <_puts_r+0x60>

080172dc <puts>:
 80172dc:	4b02      	ldr	r3, [pc, #8]	; (80172e8 <puts+0xc>)
 80172de:	4601      	mov	r1, r0
 80172e0:	6818      	ldr	r0, [r3, #0]
 80172e2:	f7ff bfa7 	b.w	8017234 <_puts_r>
 80172e6:	bf00      	nop
 80172e8:	200003e0 	.word	0x200003e0

080172ec <strncmp>:
 80172ec:	b510      	push	{r4, lr}
 80172ee:	b16a      	cbz	r2, 801730c <strncmp+0x20>
 80172f0:	3901      	subs	r1, #1
 80172f2:	1884      	adds	r4, r0, r2
 80172f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d103      	bne.n	8017308 <strncmp+0x1c>
 8017300:	42a0      	cmp	r0, r4
 8017302:	d001      	beq.n	8017308 <strncmp+0x1c>
 8017304:	2a00      	cmp	r2, #0
 8017306:	d1f5      	bne.n	80172f4 <strncmp+0x8>
 8017308:	1ad0      	subs	r0, r2, r3
 801730a:	bd10      	pop	{r4, pc}
 801730c:	4610      	mov	r0, r2
 801730e:	e7fc      	b.n	801730a <strncmp+0x1e>

08017310 <memset>:
 8017310:	4402      	add	r2, r0
 8017312:	4603      	mov	r3, r0
 8017314:	4293      	cmp	r3, r2
 8017316:	d100      	bne.n	801731a <memset+0xa>
 8017318:	4770      	bx	lr
 801731a:	f803 1b01 	strb.w	r1, [r3], #1
 801731e:	e7f9      	b.n	8017314 <memset+0x4>

08017320 <_localeconv_r>:
 8017320:	4800      	ldr	r0, [pc, #0]	; (8017324 <_localeconv_r+0x4>)
 8017322:	4770      	bx	lr
 8017324:	20000318 	.word	0x20000318

08017328 <__errno>:
 8017328:	4b01      	ldr	r3, [pc, #4]	; (8017330 <__errno+0x8>)
 801732a:	6818      	ldr	r0, [r3, #0]
 801732c:	4770      	bx	lr
 801732e:	bf00      	nop
 8017330:	200003e0 	.word	0x200003e0

08017334 <__libc_init_array>:
 8017334:	b570      	push	{r4, r5, r6, lr}
 8017336:	4d0d      	ldr	r5, [pc, #52]	; (801736c <__libc_init_array+0x38>)
 8017338:	4c0d      	ldr	r4, [pc, #52]	; (8017370 <__libc_init_array+0x3c>)
 801733a:	1b64      	subs	r4, r4, r5
 801733c:	10a4      	asrs	r4, r4, #2
 801733e:	2600      	movs	r6, #0
 8017340:	42a6      	cmp	r6, r4
 8017342:	d109      	bne.n	8017358 <__libc_init_array+0x24>
 8017344:	4d0b      	ldr	r5, [pc, #44]	; (8017374 <__libc_init_array+0x40>)
 8017346:	4c0c      	ldr	r4, [pc, #48]	; (8017378 <__libc_init_array+0x44>)
 8017348:	f002 fe06 	bl	8019f58 <_init>
 801734c:	1b64      	subs	r4, r4, r5
 801734e:	10a4      	asrs	r4, r4, #2
 8017350:	2600      	movs	r6, #0
 8017352:	42a6      	cmp	r6, r4
 8017354:	d105      	bne.n	8017362 <__libc_init_array+0x2e>
 8017356:	bd70      	pop	{r4, r5, r6, pc}
 8017358:	f855 3b04 	ldr.w	r3, [r5], #4
 801735c:	4798      	blx	r3
 801735e:	3601      	adds	r6, #1
 8017360:	e7ee      	b.n	8017340 <__libc_init_array+0xc>
 8017362:	f855 3b04 	ldr.w	r3, [r5], #4
 8017366:	4798      	blx	r3
 8017368:	3601      	adds	r6, #1
 801736a:	e7f2      	b.n	8017352 <__libc_init_array+0x1e>
 801736c:	0801b4e0 	.word	0x0801b4e0
 8017370:	0801b4e0 	.word	0x0801b4e0
 8017374:	0801b4e0 	.word	0x0801b4e0
 8017378:	0801b4e4 	.word	0x0801b4e4

0801737c <__retarget_lock_init_recursive>:
 801737c:	4770      	bx	lr

0801737e <__retarget_lock_acquire_recursive>:
 801737e:	4770      	bx	lr

08017380 <__retarget_lock_release_recursive>:
 8017380:	4770      	bx	lr

08017382 <memcpy>:
 8017382:	440a      	add	r2, r1
 8017384:	4291      	cmp	r1, r2
 8017386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801738a:	d100      	bne.n	801738e <memcpy+0xc>
 801738c:	4770      	bx	lr
 801738e:	b510      	push	{r4, lr}
 8017390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017398:	4291      	cmp	r1, r2
 801739a:	d1f9      	bne.n	8017390 <memcpy+0xe>
 801739c:	bd10      	pop	{r4, pc}
	...

080173a0 <nan>:
 80173a0:	4901      	ldr	r1, [pc, #4]	; (80173a8 <nan+0x8>)
 80173a2:	2000      	movs	r0, #0
 80173a4:	4770      	bx	lr
 80173a6:	bf00      	nop
 80173a8:	7ff80000 	.word	0x7ff80000

080173ac <nanf>:
 80173ac:	4800      	ldr	r0, [pc, #0]	; (80173b0 <nanf+0x4>)
 80173ae:	4770      	bx	lr
 80173b0:	7fc00000 	.word	0x7fc00000

080173b4 <__assert_func>:
 80173b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80173b6:	4614      	mov	r4, r2
 80173b8:	461a      	mov	r2, r3
 80173ba:	4b09      	ldr	r3, [pc, #36]	; (80173e0 <__assert_func+0x2c>)
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	4605      	mov	r5, r0
 80173c0:	68d8      	ldr	r0, [r3, #12]
 80173c2:	b14c      	cbz	r4, 80173d8 <__assert_func+0x24>
 80173c4:	4b07      	ldr	r3, [pc, #28]	; (80173e4 <__assert_func+0x30>)
 80173c6:	9100      	str	r1, [sp, #0]
 80173c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80173cc:	4906      	ldr	r1, [pc, #24]	; (80173e8 <__assert_func+0x34>)
 80173ce:	462b      	mov	r3, r5
 80173d0:	f002 fab8 	bl	8019944 <fiprintf>
 80173d4:	f002 fc8e 	bl	8019cf4 <abort>
 80173d8:	4b04      	ldr	r3, [pc, #16]	; (80173ec <__assert_func+0x38>)
 80173da:	461c      	mov	r4, r3
 80173dc:	e7f3      	b.n	80173c6 <__assert_func+0x12>
 80173de:	bf00      	nop
 80173e0:	200003e0 	.word	0x200003e0
 80173e4:	0801b241 	.word	0x0801b241
 80173e8:	0801b24e 	.word	0x0801b24e
 80173ec:	0801b27c 	.word	0x0801b27c

080173f0 <quorem>:
 80173f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f4:	6903      	ldr	r3, [r0, #16]
 80173f6:	690c      	ldr	r4, [r1, #16]
 80173f8:	42a3      	cmp	r3, r4
 80173fa:	4607      	mov	r7, r0
 80173fc:	db7b      	blt.n	80174f6 <quorem+0x106>
 80173fe:	3c01      	subs	r4, #1
 8017400:	f101 0814 	add.w	r8, r1, #20
 8017404:	f100 0514 	add.w	r5, r0, #20
 8017408:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801740c:	9301      	str	r3, [sp, #4]
 801740e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017412:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017416:	3301      	adds	r3, #1
 8017418:	429a      	cmp	r2, r3
 801741a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801741e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017422:	fbb2 f6f3 	udiv	r6, r2, r3
 8017426:	d32e      	bcc.n	8017486 <quorem+0x96>
 8017428:	f04f 0e00 	mov.w	lr, #0
 801742c:	4640      	mov	r0, r8
 801742e:	46ac      	mov	ip, r5
 8017430:	46f2      	mov	sl, lr
 8017432:	f850 2b04 	ldr.w	r2, [r0], #4
 8017436:	b293      	uxth	r3, r2
 8017438:	fb06 e303 	mla	r3, r6, r3, lr
 801743c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017440:	0c1a      	lsrs	r2, r3, #16
 8017442:	b29b      	uxth	r3, r3
 8017444:	fb06 220e 	mla	r2, r6, lr, r2
 8017448:	ebaa 0303 	sub.w	r3, sl, r3
 801744c:	f8dc a000 	ldr.w	sl, [ip]
 8017450:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017454:	b292      	uxth	r2, r2
 8017456:	fa13 f38a 	uxtah	r3, r3, sl
 801745a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801745e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017462:	b29b      	uxth	r3, r3
 8017464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017468:	4581      	cmp	r9, r0
 801746a:	f84c 3b04 	str.w	r3, [ip], #4
 801746e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017472:	d2de      	bcs.n	8017432 <quorem+0x42>
 8017474:	f855 300b 	ldr.w	r3, [r5, fp]
 8017478:	b92b      	cbnz	r3, 8017486 <quorem+0x96>
 801747a:	9b01      	ldr	r3, [sp, #4]
 801747c:	3b04      	subs	r3, #4
 801747e:	429d      	cmp	r5, r3
 8017480:	461a      	mov	r2, r3
 8017482:	d32c      	bcc.n	80174de <quorem+0xee>
 8017484:	613c      	str	r4, [r7, #16]
 8017486:	4638      	mov	r0, r7
 8017488:	f002 f844 	bl	8019514 <__mcmp>
 801748c:	2800      	cmp	r0, #0
 801748e:	db22      	blt.n	80174d6 <quorem+0xe6>
 8017490:	3601      	adds	r6, #1
 8017492:	4629      	mov	r1, r5
 8017494:	2000      	movs	r0, #0
 8017496:	f858 2b04 	ldr.w	r2, [r8], #4
 801749a:	f8d1 c000 	ldr.w	ip, [r1]
 801749e:	b293      	uxth	r3, r2
 80174a0:	1ac3      	subs	r3, r0, r3
 80174a2:	0c12      	lsrs	r2, r2, #16
 80174a4:	fa13 f38c 	uxtah	r3, r3, ip
 80174a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80174ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174b6:	45c1      	cmp	r9, r8
 80174b8:	f841 3b04 	str.w	r3, [r1], #4
 80174bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80174c0:	d2e9      	bcs.n	8017496 <quorem+0xa6>
 80174c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80174c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80174ca:	b922      	cbnz	r2, 80174d6 <quorem+0xe6>
 80174cc:	3b04      	subs	r3, #4
 80174ce:	429d      	cmp	r5, r3
 80174d0:	461a      	mov	r2, r3
 80174d2:	d30a      	bcc.n	80174ea <quorem+0xfa>
 80174d4:	613c      	str	r4, [r7, #16]
 80174d6:	4630      	mov	r0, r6
 80174d8:	b003      	add	sp, #12
 80174da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174de:	6812      	ldr	r2, [r2, #0]
 80174e0:	3b04      	subs	r3, #4
 80174e2:	2a00      	cmp	r2, #0
 80174e4:	d1ce      	bne.n	8017484 <quorem+0x94>
 80174e6:	3c01      	subs	r4, #1
 80174e8:	e7c9      	b.n	801747e <quorem+0x8e>
 80174ea:	6812      	ldr	r2, [r2, #0]
 80174ec:	3b04      	subs	r3, #4
 80174ee:	2a00      	cmp	r2, #0
 80174f0:	d1f0      	bne.n	80174d4 <quorem+0xe4>
 80174f2:	3c01      	subs	r4, #1
 80174f4:	e7eb      	b.n	80174ce <quorem+0xde>
 80174f6:	2000      	movs	r0, #0
 80174f8:	e7ee      	b.n	80174d8 <quorem+0xe8>
 80174fa:	0000      	movs	r0, r0
 80174fc:	0000      	movs	r0, r0
	...

08017500 <_dtoa_r>:
 8017500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017504:	69c4      	ldr	r4, [r0, #28]
 8017506:	b099      	sub	sp, #100	; 0x64
 8017508:	4616      	mov	r6, r2
 801750a:	461f      	mov	r7, r3
 801750c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017510:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8017514:	4605      	mov	r5, r0
 8017516:	b974      	cbnz	r4, 8017536 <_dtoa_r+0x36>
 8017518:	2010      	movs	r0, #16
 801751a:	f001 fbc5 	bl	8018ca8 <malloc>
 801751e:	4602      	mov	r2, r0
 8017520:	61e8      	str	r0, [r5, #28]
 8017522:	b920      	cbnz	r0, 801752e <_dtoa_r+0x2e>
 8017524:	4baa      	ldr	r3, [pc, #680]	; (80177d0 <_dtoa_r+0x2d0>)
 8017526:	21ef      	movs	r1, #239	; 0xef
 8017528:	48aa      	ldr	r0, [pc, #680]	; (80177d4 <_dtoa_r+0x2d4>)
 801752a:	f7ff ff43 	bl	80173b4 <__assert_func>
 801752e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017532:	6004      	str	r4, [r0, #0]
 8017534:	60c4      	str	r4, [r0, #12]
 8017536:	69eb      	ldr	r3, [r5, #28]
 8017538:	6819      	ldr	r1, [r3, #0]
 801753a:	b151      	cbz	r1, 8017552 <_dtoa_r+0x52>
 801753c:	685a      	ldr	r2, [r3, #4]
 801753e:	604a      	str	r2, [r1, #4]
 8017540:	2301      	movs	r3, #1
 8017542:	4093      	lsls	r3, r2
 8017544:	608b      	str	r3, [r1, #8]
 8017546:	4628      	mov	r0, r5
 8017548:	f001 fd5e 	bl	8019008 <_Bfree>
 801754c:	69eb      	ldr	r3, [r5, #28]
 801754e:	2200      	movs	r2, #0
 8017550:	601a      	str	r2, [r3, #0]
 8017552:	1e3b      	subs	r3, r7, #0
 8017554:	bfb9      	ittee	lt
 8017556:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801755a:	9305      	strlt	r3, [sp, #20]
 801755c:	2300      	movge	r3, #0
 801755e:	f8c8 3000 	strge.w	r3, [r8]
 8017562:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8017566:	4b9c      	ldr	r3, [pc, #624]	; (80177d8 <_dtoa_r+0x2d8>)
 8017568:	bfbc      	itt	lt
 801756a:	2201      	movlt	r2, #1
 801756c:	f8c8 2000 	strlt.w	r2, [r8]
 8017570:	ea33 0309 	bics.w	r3, r3, r9
 8017574:	d119      	bne.n	80175aa <_dtoa_r+0xaa>
 8017576:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017578:	f242 730f 	movw	r3, #9999	; 0x270f
 801757c:	6013      	str	r3, [r2, #0]
 801757e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017582:	4333      	orrs	r3, r6
 8017584:	f000 8587 	beq.w	8018096 <_dtoa_r+0xb96>
 8017588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801758a:	b953      	cbnz	r3, 80175a2 <_dtoa_r+0xa2>
 801758c:	4b93      	ldr	r3, [pc, #588]	; (80177dc <_dtoa_r+0x2dc>)
 801758e:	e023      	b.n	80175d8 <_dtoa_r+0xd8>
 8017590:	4b93      	ldr	r3, [pc, #588]	; (80177e0 <_dtoa_r+0x2e0>)
 8017592:	9303      	str	r3, [sp, #12]
 8017594:	3308      	adds	r3, #8
 8017596:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017598:	6013      	str	r3, [r2, #0]
 801759a:	9803      	ldr	r0, [sp, #12]
 801759c:	b019      	add	sp, #100	; 0x64
 801759e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a2:	4b8e      	ldr	r3, [pc, #568]	; (80177dc <_dtoa_r+0x2dc>)
 80175a4:	9303      	str	r3, [sp, #12]
 80175a6:	3303      	adds	r3, #3
 80175a8:	e7f5      	b.n	8017596 <_dtoa_r+0x96>
 80175aa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80175ae:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80175b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80175b6:	2200      	movs	r2, #0
 80175b8:	2300      	movs	r3, #0
 80175ba:	f7e9 fa5d 	bl	8000a78 <__aeabi_dcmpeq>
 80175be:	4680      	mov	r8, r0
 80175c0:	b160      	cbz	r0, 80175dc <_dtoa_r+0xdc>
 80175c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80175c4:	2301      	movs	r3, #1
 80175c6:	6013      	str	r3, [r2, #0]
 80175c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	f000 8560 	beq.w	8018090 <_dtoa_r+0xb90>
 80175d0:	4b84      	ldr	r3, [pc, #528]	; (80177e4 <_dtoa_r+0x2e4>)
 80175d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80175d4:	6013      	str	r3, [r2, #0]
 80175d6:	3b01      	subs	r3, #1
 80175d8:	9303      	str	r3, [sp, #12]
 80175da:	e7de      	b.n	801759a <_dtoa_r+0x9a>
 80175dc:	ab16      	add	r3, sp, #88	; 0x58
 80175de:	9301      	str	r3, [sp, #4]
 80175e0:	ab17      	add	r3, sp, #92	; 0x5c
 80175e2:	9300      	str	r3, [sp, #0]
 80175e4:	4628      	mov	r0, r5
 80175e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80175ea:	f002 f89f 	bl	801972c <__d2b>
 80175ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80175f2:	4682      	mov	sl, r0
 80175f4:	2c00      	cmp	r4, #0
 80175f6:	d07d      	beq.n	80176f4 <_dtoa_r+0x1f4>
 80175f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175fa:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80175fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017606:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801760a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801760e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8017612:	4619      	mov	r1, r3
 8017614:	2200      	movs	r2, #0
 8017616:	4b74      	ldr	r3, [pc, #464]	; (80177e8 <_dtoa_r+0x2e8>)
 8017618:	f7e8 fe0e 	bl	8000238 <__aeabi_dsub>
 801761c:	a366      	add	r3, pc, #408	; (adr r3, 80177b8 <_dtoa_r+0x2b8>)
 801761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017622:	f7e8 ffc1 	bl	80005a8 <__aeabi_dmul>
 8017626:	a366      	add	r3, pc, #408	; (adr r3, 80177c0 <_dtoa_r+0x2c0>)
 8017628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762c:	f7e8 fe06 	bl	800023c <__adddf3>
 8017630:	4606      	mov	r6, r0
 8017632:	4620      	mov	r0, r4
 8017634:	460f      	mov	r7, r1
 8017636:	f7e8 ff4d 	bl	80004d4 <__aeabi_i2d>
 801763a:	a363      	add	r3, pc, #396	; (adr r3, 80177c8 <_dtoa_r+0x2c8>)
 801763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017640:	f7e8 ffb2 	bl	80005a8 <__aeabi_dmul>
 8017644:	4602      	mov	r2, r0
 8017646:	460b      	mov	r3, r1
 8017648:	4630      	mov	r0, r6
 801764a:	4639      	mov	r1, r7
 801764c:	f7e8 fdf6 	bl	800023c <__adddf3>
 8017650:	4606      	mov	r6, r0
 8017652:	460f      	mov	r7, r1
 8017654:	f7e9 fa58 	bl	8000b08 <__aeabi_d2iz>
 8017658:	2200      	movs	r2, #0
 801765a:	4683      	mov	fp, r0
 801765c:	2300      	movs	r3, #0
 801765e:	4630      	mov	r0, r6
 8017660:	4639      	mov	r1, r7
 8017662:	f7e9 fa13 	bl	8000a8c <__aeabi_dcmplt>
 8017666:	b148      	cbz	r0, 801767c <_dtoa_r+0x17c>
 8017668:	4658      	mov	r0, fp
 801766a:	f7e8 ff33 	bl	80004d4 <__aeabi_i2d>
 801766e:	4632      	mov	r2, r6
 8017670:	463b      	mov	r3, r7
 8017672:	f7e9 fa01 	bl	8000a78 <__aeabi_dcmpeq>
 8017676:	b908      	cbnz	r0, 801767c <_dtoa_r+0x17c>
 8017678:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801767c:	f1bb 0f16 	cmp.w	fp, #22
 8017680:	d856      	bhi.n	8017730 <_dtoa_r+0x230>
 8017682:	4b5a      	ldr	r3, [pc, #360]	; (80177ec <_dtoa_r+0x2ec>)
 8017684:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801768c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017690:	f7e9 f9fc 	bl	8000a8c <__aeabi_dcmplt>
 8017694:	2800      	cmp	r0, #0
 8017696:	d04d      	beq.n	8017734 <_dtoa_r+0x234>
 8017698:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801769c:	2300      	movs	r3, #0
 801769e:	930f      	str	r3, [sp, #60]	; 0x3c
 80176a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80176a2:	1b1b      	subs	r3, r3, r4
 80176a4:	1e5a      	subs	r2, r3, #1
 80176a6:	bf44      	itt	mi
 80176a8:	f1c3 0901 	rsbmi	r9, r3, #1
 80176ac:	2300      	movmi	r3, #0
 80176ae:	9209      	str	r2, [sp, #36]	; 0x24
 80176b0:	bf54      	ite	pl
 80176b2:	f04f 0900 	movpl.w	r9, #0
 80176b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80176b8:	f1bb 0f00 	cmp.w	fp, #0
 80176bc:	db3c      	blt.n	8017738 <_dtoa_r+0x238>
 80176be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176c0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80176c4:	445b      	add	r3, fp
 80176c6:	9309      	str	r3, [sp, #36]	; 0x24
 80176c8:	2300      	movs	r3, #0
 80176ca:	930a      	str	r3, [sp, #40]	; 0x28
 80176cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80176ce:	2b09      	cmp	r3, #9
 80176d0:	d866      	bhi.n	80177a0 <_dtoa_r+0x2a0>
 80176d2:	2b05      	cmp	r3, #5
 80176d4:	bfc4      	itt	gt
 80176d6:	3b04      	subgt	r3, #4
 80176d8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80176da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80176dc:	f1a3 0302 	sub.w	r3, r3, #2
 80176e0:	bfcc      	ite	gt
 80176e2:	2400      	movgt	r4, #0
 80176e4:	2401      	movle	r4, #1
 80176e6:	2b03      	cmp	r3, #3
 80176e8:	f200 8084 	bhi.w	80177f4 <_dtoa_r+0x2f4>
 80176ec:	e8df f003 	tbb	[pc, r3]
 80176f0:	5637392c 	.word	0x5637392c
 80176f4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80176f8:	441c      	add	r4, r3
 80176fa:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80176fe:	2b20      	cmp	r3, #32
 8017700:	bfc1      	itttt	gt
 8017702:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017706:	fa09 f903 	lslgt.w	r9, r9, r3
 801770a:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 801770e:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017712:	bfd6      	itet	le
 8017714:	f1c3 0320 	rsble	r3, r3, #32
 8017718:	ea49 0003 	orrgt.w	r0, r9, r3
 801771c:	fa06 f003 	lslle.w	r0, r6, r3
 8017720:	f7e8 fec8 	bl	80004b4 <__aeabi_ui2d>
 8017724:	2201      	movs	r2, #1
 8017726:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801772a:	3c01      	subs	r4, #1
 801772c:	9213      	str	r2, [sp, #76]	; 0x4c
 801772e:	e770      	b.n	8017612 <_dtoa_r+0x112>
 8017730:	2301      	movs	r3, #1
 8017732:	e7b4      	b.n	801769e <_dtoa_r+0x19e>
 8017734:	900f      	str	r0, [sp, #60]	; 0x3c
 8017736:	e7b3      	b.n	80176a0 <_dtoa_r+0x1a0>
 8017738:	f1cb 0300 	rsb	r3, fp, #0
 801773c:	930a      	str	r3, [sp, #40]	; 0x28
 801773e:	2300      	movs	r3, #0
 8017740:	eba9 090b 	sub.w	r9, r9, fp
 8017744:	930e      	str	r3, [sp, #56]	; 0x38
 8017746:	e7c1      	b.n	80176cc <_dtoa_r+0x1cc>
 8017748:	2300      	movs	r3, #0
 801774a:	930b      	str	r3, [sp, #44]	; 0x2c
 801774c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801774e:	2b00      	cmp	r3, #0
 8017750:	dc53      	bgt.n	80177fa <_dtoa_r+0x2fa>
 8017752:	2301      	movs	r3, #1
 8017754:	9306      	str	r3, [sp, #24]
 8017756:	9308      	str	r3, [sp, #32]
 8017758:	461a      	mov	r2, r3
 801775a:	9223      	str	r2, [sp, #140]	; 0x8c
 801775c:	e00b      	b.n	8017776 <_dtoa_r+0x276>
 801775e:	2301      	movs	r3, #1
 8017760:	e7f3      	b.n	801774a <_dtoa_r+0x24a>
 8017762:	2300      	movs	r3, #0
 8017764:	930b      	str	r3, [sp, #44]	; 0x2c
 8017766:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017768:	445b      	add	r3, fp
 801776a:	9306      	str	r3, [sp, #24]
 801776c:	3301      	adds	r3, #1
 801776e:	2b01      	cmp	r3, #1
 8017770:	9308      	str	r3, [sp, #32]
 8017772:	bfb8      	it	lt
 8017774:	2301      	movlt	r3, #1
 8017776:	69e8      	ldr	r0, [r5, #28]
 8017778:	2100      	movs	r1, #0
 801777a:	2204      	movs	r2, #4
 801777c:	f102 0614 	add.w	r6, r2, #20
 8017780:	429e      	cmp	r6, r3
 8017782:	d93e      	bls.n	8017802 <_dtoa_r+0x302>
 8017784:	6041      	str	r1, [r0, #4]
 8017786:	4628      	mov	r0, r5
 8017788:	f001 fbfe 	bl	8018f88 <_Balloc>
 801778c:	9003      	str	r0, [sp, #12]
 801778e:	2800      	cmp	r0, #0
 8017790:	d13a      	bne.n	8017808 <_dtoa_r+0x308>
 8017792:	4b17      	ldr	r3, [pc, #92]	; (80177f0 <_dtoa_r+0x2f0>)
 8017794:	4602      	mov	r2, r0
 8017796:	f240 11af 	movw	r1, #431	; 0x1af
 801779a:	e6c5      	b.n	8017528 <_dtoa_r+0x28>
 801779c:	2301      	movs	r3, #1
 801779e:	e7e1      	b.n	8017764 <_dtoa_r+0x264>
 80177a0:	2401      	movs	r4, #1
 80177a2:	2300      	movs	r3, #0
 80177a4:	9322      	str	r3, [sp, #136]	; 0x88
 80177a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80177a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80177ac:	9306      	str	r3, [sp, #24]
 80177ae:	9308      	str	r3, [sp, #32]
 80177b0:	2200      	movs	r2, #0
 80177b2:	2312      	movs	r3, #18
 80177b4:	e7d1      	b.n	801775a <_dtoa_r+0x25a>
 80177b6:	bf00      	nop
 80177b8:	636f4361 	.word	0x636f4361
 80177bc:	3fd287a7 	.word	0x3fd287a7
 80177c0:	8b60c8b3 	.word	0x8b60c8b3
 80177c4:	3fc68a28 	.word	0x3fc68a28
 80177c8:	509f79fb 	.word	0x509f79fb
 80177cc:	3fd34413 	.word	0x3fd34413
 80177d0:	0801b28a 	.word	0x0801b28a
 80177d4:	0801b2a1 	.word	0x0801b2a1
 80177d8:	7ff00000 	.word	0x7ff00000
 80177dc:	0801b286 	.word	0x0801b286
 80177e0:	0801b27d 	.word	0x0801b27d
 80177e4:	0801b0bc 	.word	0x0801b0bc
 80177e8:	3ff80000 	.word	0x3ff80000
 80177ec:	0801b400 	.word	0x0801b400
 80177f0:	0801b2f9 	.word	0x0801b2f9
 80177f4:	2301      	movs	r3, #1
 80177f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80177f8:	e7d6      	b.n	80177a8 <_dtoa_r+0x2a8>
 80177fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80177fc:	9306      	str	r3, [sp, #24]
 80177fe:	9308      	str	r3, [sp, #32]
 8017800:	e7b9      	b.n	8017776 <_dtoa_r+0x276>
 8017802:	3101      	adds	r1, #1
 8017804:	0052      	lsls	r2, r2, #1
 8017806:	e7b9      	b.n	801777c <_dtoa_r+0x27c>
 8017808:	69eb      	ldr	r3, [r5, #28]
 801780a:	9a03      	ldr	r2, [sp, #12]
 801780c:	601a      	str	r2, [r3, #0]
 801780e:	9b08      	ldr	r3, [sp, #32]
 8017810:	2b0e      	cmp	r3, #14
 8017812:	f200 80a8 	bhi.w	8017966 <_dtoa_r+0x466>
 8017816:	2c00      	cmp	r4, #0
 8017818:	f000 80a5 	beq.w	8017966 <_dtoa_r+0x466>
 801781c:	f1bb 0f00 	cmp.w	fp, #0
 8017820:	dd34      	ble.n	801788c <_dtoa_r+0x38c>
 8017822:	4b9a      	ldr	r3, [pc, #616]	; (8017a8c <_dtoa_r+0x58c>)
 8017824:	f00b 020f 	and.w	r2, fp, #15
 8017828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801782c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017830:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017834:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8017838:	ea4f 142b 	mov.w	r4, fp, asr #4
 801783c:	d016      	beq.n	801786c <_dtoa_r+0x36c>
 801783e:	4b94      	ldr	r3, [pc, #592]	; (8017a90 <_dtoa_r+0x590>)
 8017840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017848:	f7e8 ffd8 	bl	80007fc <__aeabi_ddiv>
 801784c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017850:	f004 040f 	and.w	r4, r4, #15
 8017854:	2703      	movs	r7, #3
 8017856:	4e8e      	ldr	r6, [pc, #568]	; (8017a90 <_dtoa_r+0x590>)
 8017858:	b954      	cbnz	r4, 8017870 <_dtoa_r+0x370>
 801785a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801785e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017862:	f7e8 ffcb 	bl	80007fc <__aeabi_ddiv>
 8017866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801786a:	e029      	b.n	80178c0 <_dtoa_r+0x3c0>
 801786c:	2702      	movs	r7, #2
 801786e:	e7f2      	b.n	8017856 <_dtoa_r+0x356>
 8017870:	07e1      	lsls	r1, r4, #31
 8017872:	d508      	bpl.n	8017886 <_dtoa_r+0x386>
 8017874:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017878:	e9d6 2300 	ldrd	r2, r3, [r6]
 801787c:	f7e8 fe94 	bl	80005a8 <__aeabi_dmul>
 8017880:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017884:	3701      	adds	r7, #1
 8017886:	1064      	asrs	r4, r4, #1
 8017888:	3608      	adds	r6, #8
 801788a:	e7e5      	b.n	8017858 <_dtoa_r+0x358>
 801788c:	f000 80a5 	beq.w	80179da <_dtoa_r+0x4da>
 8017890:	f1cb 0400 	rsb	r4, fp, #0
 8017894:	4b7d      	ldr	r3, [pc, #500]	; (8017a8c <_dtoa_r+0x58c>)
 8017896:	4e7e      	ldr	r6, [pc, #504]	; (8017a90 <_dtoa_r+0x590>)
 8017898:	f004 020f 	and.w	r2, r4, #15
 801789c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80178a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80178a8:	f7e8 fe7e 	bl	80005a8 <__aeabi_dmul>
 80178ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80178b0:	1124      	asrs	r4, r4, #4
 80178b2:	2300      	movs	r3, #0
 80178b4:	2702      	movs	r7, #2
 80178b6:	2c00      	cmp	r4, #0
 80178b8:	f040 8084 	bne.w	80179c4 <_dtoa_r+0x4c4>
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d1d2      	bne.n	8017866 <_dtoa_r+0x366>
 80178c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80178c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80178c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	f000 8087 	beq.w	80179de <_dtoa_r+0x4de>
 80178d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80178d4:	4b6f      	ldr	r3, [pc, #444]	; (8017a94 <_dtoa_r+0x594>)
 80178d6:	2200      	movs	r2, #0
 80178d8:	f7e9 f8d8 	bl	8000a8c <__aeabi_dcmplt>
 80178dc:	2800      	cmp	r0, #0
 80178de:	d07e      	beq.n	80179de <_dtoa_r+0x4de>
 80178e0:	9b08      	ldr	r3, [sp, #32]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d07b      	beq.n	80179de <_dtoa_r+0x4de>
 80178e6:	9b06      	ldr	r3, [sp, #24]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	dd38      	ble.n	801795e <_dtoa_r+0x45e>
 80178ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80178f0:	4b69      	ldr	r3, [pc, #420]	; (8017a98 <_dtoa_r+0x598>)
 80178f2:	2200      	movs	r2, #0
 80178f4:	f7e8 fe58 	bl	80005a8 <__aeabi_dmul>
 80178f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80178fc:	9c06      	ldr	r4, [sp, #24]
 80178fe:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 8017902:	3701      	adds	r7, #1
 8017904:	4638      	mov	r0, r7
 8017906:	f7e8 fde5 	bl	80004d4 <__aeabi_i2d>
 801790a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801790e:	f7e8 fe4b 	bl	80005a8 <__aeabi_dmul>
 8017912:	4b62      	ldr	r3, [pc, #392]	; (8017a9c <_dtoa_r+0x59c>)
 8017914:	2200      	movs	r2, #0
 8017916:	f7e8 fc91 	bl	800023c <__adddf3>
 801791a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801791e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017922:	9611      	str	r6, [sp, #68]	; 0x44
 8017924:	2c00      	cmp	r4, #0
 8017926:	d15d      	bne.n	80179e4 <_dtoa_r+0x4e4>
 8017928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801792c:	4b5c      	ldr	r3, [pc, #368]	; (8017aa0 <_dtoa_r+0x5a0>)
 801792e:	2200      	movs	r2, #0
 8017930:	f7e8 fc82 	bl	8000238 <__aeabi_dsub>
 8017934:	4602      	mov	r2, r0
 8017936:	460b      	mov	r3, r1
 8017938:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801793c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801793e:	4633      	mov	r3, r6
 8017940:	f7e9 f8c2 	bl	8000ac8 <__aeabi_dcmpgt>
 8017944:	2800      	cmp	r0, #0
 8017946:	f040 8295 	bne.w	8017e74 <_dtoa_r+0x974>
 801794a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801794e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017950:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017954:	f7e9 f89a 	bl	8000a8c <__aeabi_dcmplt>
 8017958:	2800      	cmp	r0, #0
 801795a:	f040 8289 	bne.w	8017e70 <_dtoa_r+0x970>
 801795e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8017962:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8017966:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017968:	2b00      	cmp	r3, #0
 801796a:	f2c0 8151 	blt.w	8017c10 <_dtoa_r+0x710>
 801796e:	f1bb 0f0e 	cmp.w	fp, #14
 8017972:	f300 814d 	bgt.w	8017c10 <_dtoa_r+0x710>
 8017976:	4b45      	ldr	r3, [pc, #276]	; (8017a8c <_dtoa_r+0x58c>)
 8017978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801797c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017980:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8017984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017986:	2b00      	cmp	r3, #0
 8017988:	f280 80da 	bge.w	8017b40 <_dtoa_r+0x640>
 801798c:	9b08      	ldr	r3, [sp, #32]
 801798e:	2b00      	cmp	r3, #0
 8017990:	f300 80d6 	bgt.w	8017b40 <_dtoa_r+0x640>
 8017994:	f040 826b 	bne.w	8017e6e <_dtoa_r+0x96e>
 8017998:	4b41      	ldr	r3, [pc, #260]	; (8017aa0 <_dtoa_r+0x5a0>)
 801799a:	2200      	movs	r2, #0
 801799c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80179a0:	f7e8 fe02 	bl	80005a8 <__aeabi_dmul>
 80179a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80179a8:	f7e9 f884 	bl	8000ab4 <__aeabi_dcmpge>
 80179ac:	9c08      	ldr	r4, [sp, #32]
 80179ae:	4626      	mov	r6, r4
 80179b0:	2800      	cmp	r0, #0
 80179b2:	f040 8241 	bne.w	8017e38 <_dtoa_r+0x938>
 80179b6:	9f03      	ldr	r7, [sp, #12]
 80179b8:	2331      	movs	r3, #49	; 0x31
 80179ba:	f807 3b01 	strb.w	r3, [r7], #1
 80179be:	f10b 0b01 	add.w	fp, fp, #1
 80179c2:	e23d      	b.n	8017e40 <_dtoa_r+0x940>
 80179c4:	07e2      	lsls	r2, r4, #31
 80179c6:	d505      	bpl.n	80179d4 <_dtoa_r+0x4d4>
 80179c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80179cc:	f7e8 fdec 	bl	80005a8 <__aeabi_dmul>
 80179d0:	3701      	adds	r7, #1
 80179d2:	2301      	movs	r3, #1
 80179d4:	1064      	asrs	r4, r4, #1
 80179d6:	3608      	adds	r6, #8
 80179d8:	e76d      	b.n	80178b6 <_dtoa_r+0x3b6>
 80179da:	2702      	movs	r7, #2
 80179dc:	e770      	b.n	80178c0 <_dtoa_r+0x3c0>
 80179de:	9c08      	ldr	r4, [sp, #32]
 80179e0:	46d8      	mov	r8, fp
 80179e2:	e78f      	b.n	8017904 <_dtoa_r+0x404>
 80179e4:	9903      	ldr	r1, [sp, #12]
 80179e6:	4b29      	ldr	r3, [pc, #164]	; (8017a8c <_dtoa_r+0x58c>)
 80179e8:	4421      	add	r1, r4
 80179ea:	9112      	str	r1, [sp, #72]	; 0x48
 80179ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80179ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80179f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80179f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80179fa:	2900      	cmp	r1, #0
 80179fc:	d054      	beq.n	8017aa8 <_dtoa_r+0x5a8>
 80179fe:	4929      	ldr	r1, [pc, #164]	; (8017aa4 <_dtoa_r+0x5a4>)
 8017a00:	2000      	movs	r0, #0
 8017a02:	f7e8 fefb 	bl	80007fc <__aeabi_ddiv>
 8017a06:	463b      	mov	r3, r7
 8017a08:	4632      	mov	r2, r6
 8017a0a:	f7e8 fc15 	bl	8000238 <__aeabi_dsub>
 8017a0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017a12:	9f03      	ldr	r7, [sp, #12]
 8017a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017a18:	f7e9 f876 	bl	8000b08 <__aeabi_d2iz>
 8017a1c:	4604      	mov	r4, r0
 8017a1e:	f7e8 fd59 	bl	80004d4 <__aeabi_i2d>
 8017a22:	4602      	mov	r2, r0
 8017a24:	460b      	mov	r3, r1
 8017a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017a2a:	f7e8 fc05 	bl	8000238 <__aeabi_dsub>
 8017a2e:	3430      	adds	r4, #48	; 0x30
 8017a30:	4602      	mov	r2, r0
 8017a32:	460b      	mov	r3, r1
 8017a34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017a38:	f807 4b01 	strb.w	r4, [r7], #1
 8017a3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017a40:	f7e9 f824 	bl	8000a8c <__aeabi_dcmplt>
 8017a44:	2800      	cmp	r0, #0
 8017a46:	d173      	bne.n	8017b30 <_dtoa_r+0x630>
 8017a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017a4c:	4911      	ldr	r1, [pc, #68]	; (8017a94 <_dtoa_r+0x594>)
 8017a4e:	2000      	movs	r0, #0
 8017a50:	f7e8 fbf2 	bl	8000238 <__aeabi_dsub>
 8017a54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017a58:	f7e9 f818 	bl	8000a8c <__aeabi_dcmplt>
 8017a5c:	2800      	cmp	r0, #0
 8017a5e:	f040 80b6 	bne.w	8017bce <_dtoa_r+0x6ce>
 8017a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017a64:	429f      	cmp	r7, r3
 8017a66:	f43f af7a 	beq.w	801795e <_dtoa_r+0x45e>
 8017a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017a6e:	4b0a      	ldr	r3, [pc, #40]	; (8017a98 <_dtoa_r+0x598>)
 8017a70:	2200      	movs	r2, #0
 8017a72:	f7e8 fd99 	bl	80005a8 <__aeabi_dmul>
 8017a76:	4b08      	ldr	r3, [pc, #32]	; (8017a98 <_dtoa_r+0x598>)
 8017a78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017a82:	f7e8 fd91 	bl	80005a8 <__aeabi_dmul>
 8017a86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017a8a:	e7c3      	b.n	8017a14 <_dtoa_r+0x514>
 8017a8c:	0801b400 	.word	0x0801b400
 8017a90:	0801b3d8 	.word	0x0801b3d8
 8017a94:	3ff00000 	.word	0x3ff00000
 8017a98:	40240000 	.word	0x40240000
 8017a9c:	401c0000 	.word	0x401c0000
 8017aa0:	40140000 	.word	0x40140000
 8017aa4:	3fe00000 	.word	0x3fe00000
 8017aa8:	4630      	mov	r0, r6
 8017aaa:	4639      	mov	r1, r7
 8017aac:	f7e8 fd7c 	bl	80005a8 <__aeabi_dmul>
 8017ab0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017ab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ab6:	9c03      	ldr	r4, [sp, #12]
 8017ab8:	9314      	str	r3, [sp, #80]	; 0x50
 8017aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017abe:	f7e9 f823 	bl	8000b08 <__aeabi_d2iz>
 8017ac2:	9015      	str	r0, [sp, #84]	; 0x54
 8017ac4:	f7e8 fd06 	bl	80004d4 <__aeabi_i2d>
 8017ac8:	4602      	mov	r2, r0
 8017aca:	460b      	mov	r3, r1
 8017acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017ad0:	f7e8 fbb2 	bl	8000238 <__aeabi_dsub>
 8017ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017ad6:	3330      	adds	r3, #48	; 0x30
 8017ad8:	f804 3b01 	strb.w	r3, [r4], #1
 8017adc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ade:	429c      	cmp	r4, r3
 8017ae0:	4606      	mov	r6, r0
 8017ae2:	460f      	mov	r7, r1
 8017ae4:	f04f 0200 	mov.w	r2, #0
 8017ae8:	d124      	bne.n	8017b34 <_dtoa_r+0x634>
 8017aea:	4bb0      	ldr	r3, [pc, #704]	; (8017dac <_dtoa_r+0x8ac>)
 8017aec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017af0:	f7e8 fba4 	bl	800023c <__adddf3>
 8017af4:	4602      	mov	r2, r0
 8017af6:	460b      	mov	r3, r1
 8017af8:	4630      	mov	r0, r6
 8017afa:	4639      	mov	r1, r7
 8017afc:	f7e8 ffe4 	bl	8000ac8 <__aeabi_dcmpgt>
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d163      	bne.n	8017bcc <_dtoa_r+0x6cc>
 8017b04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017b08:	49a8      	ldr	r1, [pc, #672]	; (8017dac <_dtoa_r+0x8ac>)
 8017b0a:	2000      	movs	r0, #0
 8017b0c:	f7e8 fb94 	bl	8000238 <__aeabi_dsub>
 8017b10:	4602      	mov	r2, r0
 8017b12:	460b      	mov	r3, r1
 8017b14:	4630      	mov	r0, r6
 8017b16:	4639      	mov	r1, r7
 8017b18:	f7e8 ffb8 	bl	8000a8c <__aeabi_dcmplt>
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	f43f af1e 	beq.w	801795e <_dtoa_r+0x45e>
 8017b22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8017b24:	1e7b      	subs	r3, r7, #1
 8017b26:	9314      	str	r3, [sp, #80]	; 0x50
 8017b28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8017b2c:	2b30      	cmp	r3, #48	; 0x30
 8017b2e:	d0f8      	beq.n	8017b22 <_dtoa_r+0x622>
 8017b30:	46c3      	mov	fp, r8
 8017b32:	e03b      	b.n	8017bac <_dtoa_r+0x6ac>
 8017b34:	4b9e      	ldr	r3, [pc, #632]	; (8017db0 <_dtoa_r+0x8b0>)
 8017b36:	f7e8 fd37 	bl	80005a8 <__aeabi_dmul>
 8017b3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017b3e:	e7bc      	b.n	8017aba <_dtoa_r+0x5ba>
 8017b40:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8017b44:	9f03      	ldr	r7, [sp, #12]
 8017b46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017b4a:	4640      	mov	r0, r8
 8017b4c:	4649      	mov	r1, r9
 8017b4e:	f7e8 fe55 	bl	80007fc <__aeabi_ddiv>
 8017b52:	f7e8 ffd9 	bl	8000b08 <__aeabi_d2iz>
 8017b56:	4604      	mov	r4, r0
 8017b58:	f7e8 fcbc 	bl	80004d4 <__aeabi_i2d>
 8017b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017b60:	f7e8 fd22 	bl	80005a8 <__aeabi_dmul>
 8017b64:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8017b68:	4602      	mov	r2, r0
 8017b6a:	460b      	mov	r3, r1
 8017b6c:	4640      	mov	r0, r8
 8017b6e:	4649      	mov	r1, r9
 8017b70:	f7e8 fb62 	bl	8000238 <__aeabi_dsub>
 8017b74:	f807 6b01 	strb.w	r6, [r7], #1
 8017b78:	9e03      	ldr	r6, [sp, #12]
 8017b7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8017b7e:	1bbe      	subs	r6, r7, r6
 8017b80:	45b4      	cmp	ip, r6
 8017b82:	4602      	mov	r2, r0
 8017b84:	460b      	mov	r3, r1
 8017b86:	d136      	bne.n	8017bf6 <_dtoa_r+0x6f6>
 8017b88:	f7e8 fb58 	bl	800023c <__adddf3>
 8017b8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017b90:	4680      	mov	r8, r0
 8017b92:	4689      	mov	r9, r1
 8017b94:	f7e8 ff98 	bl	8000ac8 <__aeabi_dcmpgt>
 8017b98:	bb58      	cbnz	r0, 8017bf2 <_dtoa_r+0x6f2>
 8017b9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017b9e:	4640      	mov	r0, r8
 8017ba0:	4649      	mov	r1, r9
 8017ba2:	f7e8 ff69 	bl	8000a78 <__aeabi_dcmpeq>
 8017ba6:	b108      	cbz	r0, 8017bac <_dtoa_r+0x6ac>
 8017ba8:	07e3      	lsls	r3, r4, #31
 8017baa:	d422      	bmi.n	8017bf2 <_dtoa_r+0x6f2>
 8017bac:	4651      	mov	r1, sl
 8017bae:	4628      	mov	r0, r5
 8017bb0:	f001 fa2a 	bl	8019008 <_Bfree>
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017bb8:	703b      	strb	r3, [r7, #0]
 8017bba:	f10b 0301 	add.w	r3, fp, #1
 8017bbe:	6013      	str	r3, [r2, #0]
 8017bc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	f43f ace9 	beq.w	801759a <_dtoa_r+0x9a>
 8017bc8:	601f      	str	r7, [r3, #0]
 8017bca:	e4e6      	b.n	801759a <_dtoa_r+0x9a>
 8017bcc:	4627      	mov	r7, r4
 8017bce:	463b      	mov	r3, r7
 8017bd0:	461f      	mov	r7, r3
 8017bd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017bd6:	2a39      	cmp	r2, #57	; 0x39
 8017bd8:	d107      	bne.n	8017bea <_dtoa_r+0x6ea>
 8017bda:	9a03      	ldr	r2, [sp, #12]
 8017bdc:	429a      	cmp	r2, r3
 8017bde:	d1f7      	bne.n	8017bd0 <_dtoa_r+0x6d0>
 8017be0:	9903      	ldr	r1, [sp, #12]
 8017be2:	2230      	movs	r2, #48	; 0x30
 8017be4:	f108 0801 	add.w	r8, r8, #1
 8017be8:	700a      	strb	r2, [r1, #0]
 8017bea:	781a      	ldrb	r2, [r3, #0]
 8017bec:	3201      	adds	r2, #1
 8017bee:	701a      	strb	r2, [r3, #0]
 8017bf0:	e79e      	b.n	8017b30 <_dtoa_r+0x630>
 8017bf2:	46d8      	mov	r8, fp
 8017bf4:	e7eb      	b.n	8017bce <_dtoa_r+0x6ce>
 8017bf6:	4b6e      	ldr	r3, [pc, #440]	; (8017db0 <_dtoa_r+0x8b0>)
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	f7e8 fcd5 	bl	80005a8 <__aeabi_dmul>
 8017bfe:	2200      	movs	r2, #0
 8017c00:	2300      	movs	r3, #0
 8017c02:	4680      	mov	r8, r0
 8017c04:	4689      	mov	r9, r1
 8017c06:	f7e8 ff37 	bl	8000a78 <__aeabi_dcmpeq>
 8017c0a:	2800      	cmp	r0, #0
 8017c0c:	d09b      	beq.n	8017b46 <_dtoa_r+0x646>
 8017c0e:	e7cd      	b.n	8017bac <_dtoa_r+0x6ac>
 8017c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017c12:	2a00      	cmp	r2, #0
 8017c14:	f000 80c4 	beq.w	8017da0 <_dtoa_r+0x8a0>
 8017c18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017c1a:	2a01      	cmp	r2, #1
 8017c1c:	f300 80a8 	bgt.w	8017d70 <_dtoa_r+0x870>
 8017c20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c22:	2a00      	cmp	r2, #0
 8017c24:	f000 80a0 	beq.w	8017d68 <_dtoa_r+0x868>
 8017c28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017c2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017c2e:	464f      	mov	r7, r9
 8017c30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c32:	2101      	movs	r1, #1
 8017c34:	441a      	add	r2, r3
 8017c36:	4628      	mov	r0, r5
 8017c38:	4499      	add	r9, r3
 8017c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8017c3c:	f001 fae4 	bl	8019208 <__i2b>
 8017c40:	4606      	mov	r6, r0
 8017c42:	b15f      	cbz	r7, 8017c5c <_dtoa_r+0x75c>
 8017c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	dd08      	ble.n	8017c5c <_dtoa_r+0x75c>
 8017c4a:	42bb      	cmp	r3, r7
 8017c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c4e:	bfa8      	it	ge
 8017c50:	463b      	movge	r3, r7
 8017c52:	eba9 0903 	sub.w	r9, r9, r3
 8017c56:	1aff      	subs	r7, r7, r3
 8017c58:	1ad3      	subs	r3, r2, r3
 8017c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8017c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c5e:	b1f3      	cbz	r3, 8017c9e <_dtoa_r+0x79e>
 8017c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	f000 80a0 	beq.w	8017da8 <_dtoa_r+0x8a8>
 8017c68:	2c00      	cmp	r4, #0
 8017c6a:	dd10      	ble.n	8017c8e <_dtoa_r+0x78e>
 8017c6c:	4631      	mov	r1, r6
 8017c6e:	4622      	mov	r2, r4
 8017c70:	4628      	mov	r0, r5
 8017c72:	f001 fb89 	bl	8019388 <__pow5mult>
 8017c76:	4652      	mov	r2, sl
 8017c78:	4601      	mov	r1, r0
 8017c7a:	4606      	mov	r6, r0
 8017c7c:	4628      	mov	r0, r5
 8017c7e:	f001 fad9 	bl	8019234 <__multiply>
 8017c82:	4651      	mov	r1, sl
 8017c84:	4680      	mov	r8, r0
 8017c86:	4628      	mov	r0, r5
 8017c88:	f001 f9be 	bl	8019008 <_Bfree>
 8017c8c:	46c2      	mov	sl, r8
 8017c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c90:	1b1a      	subs	r2, r3, r4
 8017c92:	d004      	beq.n	8017c9e <_dtoa_r+0x79e>
 8017c94:	4651      	mov	r1, sl
 8017c96:	4628      	mov	r0, r5
 8017c98:	f001 fb76 	bl	8019388 <__pow5mult>
 8017c9c:	4682      	mov	sl, r0
 8017c9e:	2101      	movs	r1, #1
 8017ca0:	4628      	mov	r0, r5
 8017ca2:	f001 fab1 	bl	8019208 <__i2b>
 8017ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	4604      	mov	r4, r0
 8017cac:	f340 8082 	ble.w	8017db4 <_dtoa_r+0x8b4>
 8017cb0:	461a      	mov	r2, r3
 8017cb2:	4601      	mov	r1, r0
 8017cb4:	4628      	mov	r0, r5
 8017cb6:	f001 fb67 	bl	8019388 <__pow5mult>
 8017cba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017cbc:	2b01      	cmp	r3, #1
 8017cbe:	4604      	mov	r4, r0
 8017cc0:	dd7b      	ble.n	8017dba <_dtoa_r+0x8ba>
 8017cc2:	f04f 0800 	mov.w	r8, #0
 8017cc6:	6923      	ldr	r3, [r4, #16]
 8017cc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017ccc:	6918      	ldr	r0, [r3, #16]
 8017cce:	f001 fa4d 	bl	801916c <__hi0bits>
 8017cd2:	f1c0 0020 	rsb	r0, r0, #32
 8017cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cd8:	4418      	add	r0, r3
 8017cda:	f010 001f 	ands.w	r0, r0, #31
 8017cde:	f000 8092 	beq.w	8017e06 <_dtoa_r+0x906>
 8017ce2:	f1c0 0320 	rsb	r3, r0, #32
 8017ce6:	2b04      	cmp	r3, #4
 8017ce8:	f340 8085 	ble.w	8017df6 <_dtoa_r+0x8f6>
 8017cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cee:	f1c0 001c 	rsb	r0, r0, #28
 8017cf2:	4403      	add	r3, r0
 8017cf4:	4481      	add	r9, r0
 8017cf6:	4407      	add	r7, r0
 8017cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8017cfa:	f1b9 0f00 	cmp.w	r9, #0
 8017cfe:	dd05      	ble.n	8017d0c <_dtoa_r+0x80c>
 8017d00:	4651      	mov	r1, sl
 8017d02:	464a      	mov	r2, r9
 8017d04:	4628      	mov	r0, r5
 8017d06:	f001 fb99 	bl	801943c <__lshift>
 8017d0a:	4682      	mov	sl, r0
 8017d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	dd05      	ble.n	8017d1e <_dtoa_r+0x81e>
 8017d12:	4621      	mov	r1, r4
 8017d14:	461a      	mov	r2, r3
 8017d16:	4628      	mov	r0, r5
 8017d18:	f001 fb90 	bl	801943c <__lshift>
 8017d1c:	4604      	mov	r4, r0
 8017d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d072      	beq.n	8017e0a <_dtoa_r+0x90a>
 8017d24:	4621      	mov	r1, r4
 8017d26:	4650      	mov	r0, sl
 8017d28:	f001 fbf4 	bl	8019514 <__mcmp>
 8017d2c:	2800      	cmp	r0, #0
 8017d2e:	da6c      	bge.n	8017e0a <_dtoa_r+0x90a>
 8017d30:	2300      	movs	r3, #0
 8017d32:	4651      	mov	r1, sl
 8017d34:	220a      	movs	r2, #10
 8017d36:	4628      	mov	r0, r5
 8017d38:	f001 f988 	bl	801904c <__multadd>
 8017d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d3e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017d42:	4682      	mov	sl, r0
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	f000 81ad 	beq.w	80180a4 <_dtoa_r+0xba4>
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	4631      	mov	r1, r6
 8017d4e:	220a      	movs	r2, #10
 8017d50:	4628      	mov	r0, r5
 8017d52:	f001 f97b 	bl	801904c <__multadd>
 8017d56:	9b06      	ldr	r3, [sp, #24]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	4606      	mov	r6, r0
 8017d5c:	f300 8093 	bgt.w	8017e86 <_dtoa_r+0x986>
 8017d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017d62:	2b02      	cmp	r3, #2
 8017d64:	dc59      	bgt.n	8017e1a <_dtoa_r+0x91a>
 8017d66:	e08e      	b.n	8017e86 <_dtoa_r+0x986>
 8017d68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017d6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017d6e:	e75d      	b.n	8017c2c <_dtoa_r+0x72c>
 8017d70:	9b08      	ldr	r3, [sp, #32]
 8017d72:	1e5c      	subs	r4, r3, #1
 8017d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d76:	42a3      	cmp	r3, r4
 8017d78:	bfbf      	itttt	lt
 8017d7a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8017d7c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8017d7e:	940a      	strlt	r4, [sp, #40]	; 0x28
 8017d80:	1ae3      	sublt	r3, r4, r3
 8017d82:	bfb4      	ite	lt
 8017d84:	18d2      	addlt	r2, r2, r3
 8017d86:	1b1c      	subge	r4, r3, r4
 8017d88:	9b08      	ldr	r3, [sp, #32]
 8017d8a:	bfbc      	itt	lt
 8017d8c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8017d8e:	2400      	movlt	r4, #0
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	bfb5      	itete	lt
 8017d94:	eba9 0703 	sublt.w	r7, r9, r3
 8017d98:	9b08      	ldrge	r3, [sp, #32]
 8017d9a:	2300      	movlt	r3, #0
 8017d9c:	464f      	movge	r7, r9
 8017d9e:	e747      	b.n	8017c30 <_dtoa_r+0x730>
 8017da0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017da2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8017da4:	464f      	mov	r7, r9
 8017da6:	e74c      	b.n	8017c42 <_dtoa_r+0x742>
 8017da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017daa:	e773      	b.n	8017c94 <_dtoa_r+0x794>
 8017dac:	3fe00000 	.word	0x3fe00000
 8017db0:	40240000 	.word	0x40240000
 8017db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017db6:	2b01      	cmp	r3, #1
 8017db8:	dc18      	bgt.n	8017dec <_dtoa_r+0x8ec>
 8017dba:	9b04      	ldr	r3, [sp, #16]
 8017dbc:	b9b3      	cbnz	r3, 8017dec <_dtoa_r+0x8ec>
 8017dbe:	9b05      	ldr	r3, [sp, #20]
 8017dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017dc4:	b993      	cbnz	r3, 8017dec <_dtoa_r+0x8ec>
 8017dc6:	9b05      	ldr	r3, [sp, #20]
 8017dc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017dcc:	0d1b      	lsrs	r3, r3, #20
 8017dce:	051b      	lsls	r3, r3, #20
 8017dd0:	b17b      	cbz	r3, 8017df2 <_dtoa_r+0x8f2>
 8017dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dd4:	3301      	adds	r3, #1
 8017dd6:	f109 0901 	add.w	r9, r9, #1
 8017dda:	9309      	str	r3, [sp, #36]	; 0x24
 8017ddc:	f04f 0801 	mov.w	r8, #1
 8017de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	f47f af6f 	bne.w	8017cc6 <_dtoa_r+0x7c6>
 8017de8:	2001      	movs	r0, #1
 8017dea:	e774      	b.n	8017cd6 <_dtoa_r+0x7d6>
 8017dec:	f04f 0800 	mov.w	r8, #0
 8017df0:	e7f6      	b.n	8017de0 <_dtoa_r+0x8e0>
 8017df2:	4698      	mov	r8, r3
 8017df4:	e7f4      	b.n	8017de0 <_dtoa_r+0x8e0>
 8017df6:	d080      	beq.n	8017cfa <_dtoa_r+0x7fa>
 8017df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017dfa:	331c      	adds	r3, #28
 8017dfc:	441a      	add	r2, r3
 8017dfe:	4499      	add	r9, r3
 8017e00:	441f      	add	r7, r3
 8017e02:	9209      	str	r2, [sp, #36]	; 0x24
 8017e04:	e779      	b.n	8017cfa <_dtoa_r+0x7fa>
 8017e06:	4603      	mov	r3, r0
 8017e08:	e7f6      	b.n	8017df8 <_dtoa_r+0x8f8>
 8017e0a:	9b08      	ldr	r3, [sp, #32]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	dc34      	bgt.n	8017e7a <_dtoa_r+0x97a>
 8017e10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017e12:	2b02      	cmp	r3, #2
 8017e14:	dd31      	ble.n	8017e7a <_dtoa_r+0x97a>
 8017e16:	9b08      	ldr	r3, [sp, #32]
 8017e18:	9306      	str	r3, [sp, #24]
 8017e1a:	9b06      	ldr	r3, [sp, #24]
 8017e1c:	b963      	cbnz	r3, 8017e38 <_dtoa_r+0x938>
 8017e1e:	4621      	mov	r1, r4
 8017e20:	2205      	movs	r2, #5
 8017e22:	4628      	mov	r0, r5
 8017e24:	f001 f912 	bl	801904c <__multadd>
 8017e28:	4601      	mov	r1, r0
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	4650      	mov	r0, sl
 8017e2e:	f001 fb71 	bl	8019514 <__mcmp>
 8017e32:	2800      	cmp	r0, #0
 8017e34:	f73f adbf 	bgt.w	80179b6 <_dtoa_r+0x4b6>
 8017e38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017e3a:	9f03      	ldr	r7, [sp, #12]
 8017e3c:	ea6f 0b03 	mvn.w	fp, r3
 8017e40:	f04f 0800 	mov.w	r8, #0
 8017e44:	4621      	mov	r1, r4
 8017e46:	4628      	mov	r0, r5
 8017e48:	f001 f8de 	bl	8019008 <_Bfree>
 8017e4c:	2e00      	cmp	r6, #0
 8017e4e:	f43f aead 	beq.w	8017bac <_dtoa_r+0x6ac>
 8017e52:	f1b8 0f00 	cmp.w	r8, #0
 8017e56:	d005      	beq.n	8017e64 <_dtoa_r+0x964>
 8017e58:	45b0      	cmp	r8, r6
 8017e5a:	d003      	beq.n	8017e64 <_dtoa_r+0x964>
 8017e5c:	4641      	mov	r1, r8
 8017e5e:	4628      	mov	r0, r5
 8017e60:	f001 f8d2 	bl	8019008 <_Bfree>
 8017e64:	4631      	mov	r1, r6
 8017e66:	4628      	mov	r0, r5
 8017e68:	f001 f8ce 	bl	8019008 <_Bfree>
 8017e6c:	e69e      	b.n	8017bac <_dtoa_r+0x6ac>
 8017e6e:	2400      	movs	r4, #0
 8017e70:	4626      	mov	r6, r4
 8017e72:	e7e1      	b.n	8017e38 <_dtoa_r+0x938>
 8017e74:	46c3      	mov	fp, r8
 8017e76:	4626      	mov	r6, r4
 8017e78:	e59d      	b.n	80179b6 <_dtoa_r+0x4b6>
 8017e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	f000 80c8 	beq.w	8018012 <_dtoa_r+0xb12>
 8017e82:	9b08      	ldr	r3, [sp, #32]
 8017e84:	9306      	str	r3, [sp, #24]
 8017e86:	2f00      	cmp	r7, #0
 8017e88:	dd05      	ble.n	8017e96 <_dtoa_r+0x996>
 8017e8a:	4631      	mov	r1, r6
 8017e8c:	463a      	mov	r2, r7
 8017e8e:	4628      	mov	r0, r5
 8017e90:	f001 fad4 	bl	801943c <__lshift>
 8017e94:	4606      	mov	r6, r0
 8017e96:	f1b8 0f00 	cmp.w	r8, #0
 8017e9a:	d05b      	beq.n	8017f54 <_dtoa_r+0xa54>
 8017e9c:	6871      	ldr	r1, [r6, #4]
 8017e9e:	4628      	mov	r0, r5
 8017ea0:	f001 f872 	bl	8018f88 <_Balloc>
 8017ea4:	4607      	mov	r7, r0
 8017ea6:	b928      	cbnz	r0, 8017eb4 <_dtoa_r+0x9b4>
 8017ea8:	4b82      	ldr	r3, [pc, #520]	; (80180b4 <_dtoa_r+0xbb4>)
 8017eaa:	4602      	mov	r2, r0
 8017eac:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017eb0:	f7ff bb3a 	b.w	8017528 <_dtoa_r+0x28>
 8017eb4:	6932      	ldr	r2, [r6, #16]
 8017eb6:	3202      	adds	r2, #2
 8017eb8:	0092      	lsls	r2, r2, #2
 8017eba:	f106 010c 	add.w	r1, r6, #12
 8017ebe:	300c      	adds	r0, #12
 8017ec0:	f7ff fa5f 	bl	8017382 <memcpy>
 8017ec4:	2201      	movs	r2, #1
 8017ec6:	4639      	mov	r1, r7
 8017ec8:	4628      	mov	r0, r5
 8017eca:	f001 fab7 	bl	801943c <__lshift>
 8017ece:	9b03      	ldr	r3, [sp, #12]
 8017ed0:	9a03      	ldr	r2, [sp, #12]
 8017ed2:	3301      	adds	r3, #1
 8017ed4:	9308      	str	r3, [sp, #32]
 8017ed6:	9b06      	ldr	r3, [sp, #24]
 8017ed8:	4413      	add	r3, r2
 8017eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8017edc:	9b04      	ldr	r3, [sp, #16]
 8017ede:	f003 0301 	and.w	r3, r3, #1
 8017ee2:	46b0      	mov	r8, r6
 8017ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8017ee6:	4606      	mov	r6, r0
 8017ee8:	9b08      	ldr	r3, [sp, #32]
 8017eea:	4621      	mov	r1, r4
 8017eec:	3b01      	subs	r3, #1
 8017eee:	4650      	mov	r0, sl
 8017ef0:	9304      	str	r3, [sp, #16]
 8017ef2:	f7ff fa7d 	bl	80173f0 <quorem>
 8017ef6:	4641      	mov	r1, r8
 8017ef8:	9006      	str	r0, [sp, #24]
 8017efa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017efe:	4650      	mov	r0, sl
 8017f00:	f001 fb08 	bl	8019514 <__mcmp>
 8017f04:	4632      	mov	r2, r6
 8017f06:	9009      	str	r0, [sp, #36]	; 0x24
 8017f08:	4621      	mov	r1, r4
 8017f0a:	4628      	mov	r0, r5
 8017f0c:	f001 fb1e 	bl	801954c <__mdiff>
 8017f10:	68c2      	ldr	r2, [r0, #12]
 8017f12:	4607      	mov	r7, r0
 8017f14:	bb02      	cbnz	r2, 8017f58 <_dtoa_r+0xa58>
 8017f16:	4601      	mov	r1, r0
 8017f18:	4650      	mov	r0, sl
 8017f1a:	f001 fafb 	bl	8019514 <__mcmp>
 8017f1e:	4602      	mov	r2, r0
 8017f20:	4639      	mov	r1, r7
 8017f22:	4628      	mov	r0, r5
 8017f24:	920c      	str	r2, [sp, #48]	; 0x30
 8017f26:	f001 f86f 	bl	8019008 <_Bfree>
 8017f2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017f2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f2e:	9f08      	ldr	r7, [sp, #32]
 8017f30:	ea43 0102 	orr.w	r1, r3, r2
 8017f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f36:	4319      	orrs	r1, r3
 8017f38:	d110      	bne.n	8017f5c <_dtoa_r+0xa5c>
 8017f3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017f3e:	d029      	beq.n	8017f94 <_dtoa_r+0xa94>
 8017f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	dd02      	ble.n	8017f4c <_dtoa_r+0xa4c>
 8017f46:	9b06      	ldr	r3, [sp, #24]
 8017f48:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017f4c:	9b04      	ldr	r3, [sp, #16]
 8017f4e:	f883 9000 	strb.w	r9, [r3]
 8017f52:	e777      	b.n	8017e44 <_dtoa_r+0x944>
 8017f54:	4630      	mov	r0, r6
 8017f56:	e7ba      	b.n	8017ece <_dtoa_r+0x9ce>
 8017f58:	2201      	movs	r2, #1
 8017f5a:	e7e1      	b.n	8017f20 <_dtoa_r+0xa20>
 8017f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	db04      	blt.n	8017f6c <_dtoa_r+0xa6c>
 8017f62:	9922      	ldr	r1, [sp, #136]	; 0x88
 8017f64:	430b      	orrs	r3, r1
 8017f66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017f68:	430b      	orrs	r3, r1
 8017f6a:	d120      	bne.n	8017fae <_dtoa_r+0xaae>
 8017f6c:	2a00      	cmp	r2, #0
 8017f6e:	dded      	ble.n	8017f4c <_dtoa_r+0xa4c>
 8017f70:	4651      	mov	r1, sl
 8017f72:	2201      	movs	r2, #1
 8017f74:	4628      	mov	r0, r5
 8017f76:	f001 fa61 	bl	801943c <__lshift>
 8017f7a:	4621      	mov	r1, r4
 8017f7c:	4682      	mov	sl, r0
 8017f7e:	f001 fac9 	bl	8019514 <__mcmp>
 8017f82:	2800      	cmp	r0, #0
 8017f84:	dc03      	bgt.n	8017f8e <_dtoa_r+0xa8e>
 8017f86:	d1e1      	bne.n	8017f4c <_dtoa_r+0xa4c>
 8017f88:	f019 0f01 	tst.w	r9, #1
 8017f8c:	d0de      	beq.n	8017f4c <_dtoa_r+0xa4c>
 8017f8e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017f92:	d1d8      	bne.n	8017f46 <_dtoa_r+0xa46>
 8017f94:	9a04      	ldr	r2, [sp, #16]
 8017f96:	2339      	movs	r3, #57	; 0x39
 8017f98:	7013      	strb	r3, [r2, #0]
 8017f9a:	463b      	mov	r3, r7
 8017f9c:	461f      	mov	r7, r3
 8017f9e:	3b01      	subs	r3, #1
 8017fa0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8017fa4:	2a39      	cmp	r2, #57	; 0x39
 8017fa6:	d06c      	beq.n	8018082 <_dtoa_r+0xb82>
 8017fa8:	3201      	adds	r2, #1
 8017faa:	701a      	strb	r2, [r3, #0]
 8017fac:	e74a      	b.n	8017e44 <_dtoa_r+0x944>
 8017fae:	2a00      	cmp	r2, #0
 8017fb0:	dd07      	ble.n	8017fc2 <_dtoa_r+0xac2>
 8017fb2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017fb6:	d0ed      	beq.n	8017f94 <_dtoa_r+0xa94>
 8017fb8:	9a04      	ldr	r2, [sp, #16]
 8017fba:	f109 0301 	add.w	r3, r9, #1
 8017fbe:	7013      	strb	r3, [r2, #0]
 8017fc0:	e740      	b.n	8017e44 <_dtoa_r+0x944>
 8017fc2:	9b08      	ldr	r3, [sp, #32]
 8017fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017fc6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017fca:	4293      	cmp	r3, r2
 8017fcc:	d043      	beq.n	8018056 <_dtoa_r+0xb56>
 8017fce:	4651      	mov	r1, sl
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	220a      	movs	r2, #10
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	f001 f839 	bl	801904c <__multadd>
 8017fda:	45b0      	cmp	r8, r6
 8017fdc:	4682      	mov	sl, r0
 8017fde:	f04f 0300 	mov.w	r3, #0
 8017fe2:	f04f 020a 	mov.w	r2, #10
 8017fe6:	4641      	mov	r1, r8
 8017fe8:	4628      	mov	r0, r5
 8017fea:	d107      	bne.n	8017ffc <_dtoa_r+0xafc>
 8017fec:	f001 f82e 	bl	801904c <__multadd>
 8017ff0:	4680      	mov	r8, r0
 8017ff2:	4606      	mov	r6, r0
 8017ff4:	9b08      	ldr	r3, [sp, #32]
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	9308      	str	r3, [sp, #32]
 8017ffa:	e775      	b.n	8017ee8 <_dtoa_r+0x9e8>
 8017ffc:	f001 f826 	bl	801904c <__multadd>
 8018000:	4631      	mov	r1, r6
 8018002:	4680      	mov	r8, r0
 8018004:	2300      	movs	r3, #0
 8018006:	220a      	movs	r2, #10
 8018008:	4628      	mov	r0, r5
 801800a:	f001 f81f 	bl	801904c <__multadd>
 801800e:	4606      	mov	r6, r0
 8018010:	e7f0      	b.n	8017ff4 <_dtoa_r+0xaf4>
 8018012:	9b08      	ldr	r3, [sp, #32]
 8018014:	9306      	str	r3, [sp, #24]
 8018016:	9f03      	ldr	r7, [sp, #12]
 8018018:	4621      	mov	r1, r4
 801801a:	4650      	mov	r0, sl
 801801c:	f7ff f9e8 	bl	80173f0 <quorem>
 8018020:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018024:	9b03      	ldr	r3, [sp, #12]
 8018026:	f807 9b01 	strb.w	r9, [r7], #1
 801802a:	1afa      	subs	r2, r7, r3
 801802c:	9b06      	ldr	r3, [sp, #24]
 801802e:	4293      	cmp	r3, r2
 8018030:	dd07      	ble.n	8018042 <_dtoa_r+0xb42>
 8018032:	4651      	mov	r1, sl
 8018034:	2300      	movs	r3, #0
 8018036:	220a      	movs	r2, #10
 8018038:	4628      	mov	r0, r5
 801803a:	f001 f807 	bl	801904c <__multadd>
 801803e:	4682      	mov	sl, r0
 8018040:	e7ea      	b.n	8018018 <_dtoa_r+0xb18>
 8018042:	9b06      	ldr	r3, [sp, #24]
 8018044:	2b00      	cmp	r3, #0
 8018046:	bfc8      	it	gt
 8018048:	461f      	movgt	r7, r3
 801804a:	9b03      	ldr	r3, [sp, #12]
 801804c:	bfd8      	it	le
 801804e:	2701      	movle	r7, #1
 8018050:	441f      	add	r7, r3
 8018052:	f04f 0800 	mov.w	r8, #0
 8018056:	4651      	mov	r1, sl
 8018058:	2201      	movs	r2, #1
 801805a:	4628      	mov	r0, r5
 801805c:	f001 f9ee 	bl	801943c <__lshift>
 8018060:	4621      	mov	r1, r4
 8018062:	4682      	mov	sl, r0
 8018064:	f001 fa56 	bl	8019514 <__mcmp>
 8018068:	2800      	cmp	r0, #0
 801806a:	dc96      	bgt.n	8017f9a <_dtoa_r+0xa9a>
 801806c:	d102      	bne.n	8018074 <_dtoa_r+0xb74>
 801806e:	f019 0f01 	tst.w	r9, #1
 8018072:	d192      	bne.n	8017f9a <_dtoa_r+0xa9a>
 8018074:	463b      	mov	r3, r7
 8018076:	461f      	mov	r7, r3
 8018078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801807c:	2a30      	cmp	r2, #48	; 0x30
 801807e:	d0fa      	beq.n	8018076 <_dtoa_r+0xb76>
 8018080:	e6e0      	b.n	8017e44 <_dtoa_r+0x944>
 8018082:	9a03      	ldr	r2, [sp, #12]
 8018084:	429a      	cmp	r2, r3
 8018086:	d189      	bne.n	8017f9c <_dtoa_r+0xa9c>
 8018088:	f10b 0b01 	add.w	fp, fp, #1
 801808c:	2331      	movs	r3, #49	; 0x31
 801808e:	e796      	b.n	8017fbe <_dtoa_r+0xabe>
 8018090:	4b09      	ldr	r3, [pc, #36]	; (80180b8 <_dtoa_r+0xbb8>)
 8018092:	f7ff baa1 	b.w	80175d8 <_dtoa_r+0xd8>
 8018096:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018098:	2b00      	cmp	r3, #0
 801809a:	f47f aa79 	bne.w	8017590 <_dtoa_r+0x90>
 801809e:	4b07      	ldr	r3, [pc, #28]	; (80180bc <_dtoa_r+0xbbc>)
 80180a0:	f7ff ba9a 	b.w	80175d8 <_dtoa_r+0xd8>
 80180a4:	9b06      	ldr	r3, [sp, #24]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	dcb5      	bgt.n	8018016 <_dtoa_r+0xb16>
 80180aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80180ac:	2b02      	cmp	r3, #2
 80180ae:	f73f aeb4 	bgt.w	8017e1a <_dtoa_r+0x91a>
 80180b2:	e7b0      	b.n	8018016 <_dtoa_r+0xb16>
 80180b4:	0801b2f9 	.word	0x0801b2f9
 80180b8:	0801b0bb 	.word	0x0801b0bb
 80180bc:	0801b27d 	.word	0x0801b27d

080180c0 <rshift>:
 80180c0:	6903      	ldr	r3, [r0, #16]
 80180c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80180c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80180ce:	f100 0414 	add.w	r4, r0, #20
 80180d2:	dd45      	ble.n	8018160 <rshift+0xa0>
 80180d4:	f011 011f 	ands.w	r1, r1, #31
 80180d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80180dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80180e0:	d10c      	bne.n	80180fc <rshift+0x3c>
 80180e2:	f100 0710 	add.w	r7, r0, #16
 80180e6:	4629      	mov	r1, r5
 80180e8:	42b1      	cmp	r1, r6
 80180ea:	d334      	bcc.n	8018156 <rshift+0x96>
 80180ec:	1a9b      	subs	r3, r3, r2
 80180ee:	009b      	lsls	r3, r3, #2
 80180f0:	1eea      	subs	r2, r5, #3
 80180f2:	4296      	cmp	r6, r2
 80180f4:	bf38      	it	cc
 80180f6:	2300      	movcc	r3, #0
 80180f8:	4423      	add	r3, r4
 80180fa:	e015      	b.n	8018128 <rshift+0x68>
 80180fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018100:	f1c1 0820 	rsb	r8, r1, #32
 8018104:	40cf      	lsrs	r7, r1
 8018106:	f105 0e04 	add.w	lr, r5, #4
 801810a:	46a1      	mov	r9, r4
 801810c:	4576      	cmp	r6, lr
 801810e:	46f4      	mov	ip, lr
 8018110:	d815      	bhi.n	801813e <rshift+0x7e>
 8018112:	1a9a      	subs	r2, r3, r2
 8018114:	0092      	lsls	r2, r2, #2
 8018116:	3a04      	subs	r2, #4
 8018118:	3501      	adds	r5, #1
 801811a:	42ae      	cmp	r6, r5
 801811c:	bf38      	it	cc
 801811e:	2200      	movcc	r2, #0
 8018120:	18a3      	adds	r3, r4, r2
 8018122:	50a7      	str	r7, [r4, r2]
 8018124:	b107      	cbz	r7, 8018128 <rshift+0x68>
 8018126:	3304      	adds	r3, #4
 8018128:	1b1a      	subs	r2, r3, r4
 801812a:	42a3      	cmp	r3, r4
 801812c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018130:	bf08      	it	eq
 8018132:	2300      	moveq	r3, #0
 8018134:	6102      	str	r2, [r0, #16]
 8018136:	bf08      	it	eq
 8018138:	6143      	streq	r3, [r0, #20]
 801813a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801813e:	f8dc c000 	ldr.w	ip, [ip]
 8018142:	fa0c fc08 	lsl.w	ip, ip, r8
 8018146:	ea4c 0707 	orr.w	r7, ip, r7
 801814a:	f849 7b04 	str.w	r7, [r9], #4
 801814e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018152:	40cf      	lsrs	r7, r1
 8018154:	e7da      	b.n	801810c <rshift+0x4c>
 8018156:	f851 cb04 	ldr.w	ip, [r1], #4
 801815a:	f847 cf04 	str.w	ip, [r7, #4]!
 801815e:	e7c3      	b.n	80180e8 <rshift+0x28>
 8018160:	4623      	mov	r3, r4
 8018162:	e7e1      	b.n	8018128 <rshift+0x68>

08018164 <__hexdig_fun>:
 8018164:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018168:	2b09      	cmp	r3, #9
 801816a:	d802      	bhi.n	8018172 <__hexdig_fun+0xe>
 801816c:	3820      	subs	r0, #32
 801816e:	b2c0      	uxtb	r0, r0
 8018170:	4770      	bx	lr
 8018172:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018176:	2b05      	cmp	r3, #5
 8018178:	d801      	bhi.n	801817e <__hexdig_fun+0x1a>
 801817a:	3847      	subs	r0, #71	; 0x47
 801817c:	e7f7      	b.n	801816e <__hexdig_fun+0xa>
 801817e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018182:	2b05      	cmp	r3, #5
 8018184:	d801      	bhi.n	801818a <__hexdig_fun+0x26>
 8018186:	3827      	subs	r0, #39	; 0x27
 8018188:	e7f1      	b.n	801816e <__hexdig_fun+0xa>
 801818a:	2000      	movs	r0, #0
 801818c:	4770      	bx	lr
	...

08018190 <__gethex>:
 8018190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018194:	4617      	mov	r7, r2
 8018196:	680a      	ldr	r2, [r1, #0]
 8018198:	b085      	sub	sp, #20
 801819a:	f102 0b02 	add.w	fp, r2, #2
 801819e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80181a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80181a6:	4681      	mov	r9, r0
 80181a8:	468a      	mov	sl, r1
 80181aa:	9302      	str	r3, [sp, #8]
 80181ac:	32fe      	adds	r2, #254	; 0xfe
 80181ae:	eb02 030b 	add.w	r3, r2, fp
 80181b2:	46d8      	mov	r8, fp
 80181b4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80181b8:	9301      	str	r3, [sp, #4]
 80181ba:	2830      	cmp	r0, #48	; 0x30
 80181bc:	d0f7      	beq.n	80181ae <__gethex+0x1e>
 80181be:	f7ff ffd1 	bl	8018164 <__hexdig_fun>
 80181c2:	4604      	mov	r4, r0
 80181c4:	2800      	cmp	r0, #0
 80181c6:	d138      	bne.n	801823a <__gethex+0xaa>
 80181c8:	49a8      	ldr	r1, [pc, #672]	; (801846c <__gethex+0x2dc>)
 80181ca:	2201      	movs	r2, #1
 80181cc:	4640      	mov	r0, r8
 80181ce:	f7ff f88d 	bl	80172ec <strncmp>
 80181d2:	4606      	mov	r6, r0
 80181d4:	2800      	cmp	r0, #0
 80181d6:	d169      	bne.n	80182ac <__gethex+0x11c>
 80181d8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80181dc:	465d      	mov	r5, fp
 80181de:	f7ff ffc1 	bl	8018164 <__hexdig_fun>
 80181e2:	2800      	cmp	r0, #0
 80181e4:	d064      	beq.n	80182b0 <__gethex+0x120>
 80181e6:	465a      	mov	r2, fp
 80181e8:	7810      	ldrb	r0, [r2, #0]
 80181ea:	2830      	cmp	r0, #48	; 0x30
 80181ec:	4690      	mov	r8, r2
 80181ee:	f102 0201 	add.w	r2, r2, #1
 80181f2:	d0f9      	beq.n	80181e8 <__gethex+0x58>
 80181f4:	f7ff ffb6 	bl	8018164 <__hexdig_fun>
 80181f8:	2301      	movs	r3, #1
 80181fa:	fab0 f480 	clz	r4, r0
 80181fe:	0964      	lsrs	r4, r4, #5
 8018200:	465e      	mov	r6, fp
 8018202:	9301      	str	r3, [sp, #4]
 8018204:	4642      	mov	r2, r8
 8018206:	4615      	mov	r5, r2
 8018208:	3201      	adds	r2, #1
 801820a:	7828      	ldrb	r0, [r5, #0]
 801820c:	f7ff ffaa 	bl	8018164 <__hexdig_fun>
 8018210:	2800      	cmp	r0, #0
 8018212:	d1f8      	bne.n	8018206 <__gethex+0x76>
 8018214:	4995      	ldr	r1, [pc, #596]	; (801846c <__gethex+0x2dc>)
 8018216:	2201      	movs	r2, #1
 8018218:	4628      	mov	r0, r5
 801821a:	f7ff f867 	bl	80172ec <strncmp>
 801821e:	b978      	cbnz	r0, 8018240 <__gethex+0xb0>
 8018220:	b946      	cbnz	r6, 8018234 <__gethex+0xa4>
 8018222:	1c6e      	adds	r6, r5, #1
 8018224:	4632      	mov	r2, r6
 8018226:	4615      	mov	r5, r2
 8018228:	3201      	adds	r2, #1
 801822a:	7828      	ldrb	r0, [r5, #0]
 801822c:	f7ff ff9a 	bl	8018164 <__hexdig_fun>
 8018230:	2800      	cmp	r0, #0
 8018232:	d1f8      	bne.n	8018226 <__gethex+0x96>
 8018234:	1b73      	subs	r3, r6, r5
 8018236:	009e      	lsls	r6, r3, #2
 8018238:	e004      	b.n	8018244 <__gethex+0xb4>
 801823a:	2400      	movs	r4, #0
 801823c:	4626      	mov	r6, r4
 801823e:	e7e1      	b.n	8018204 <__gethex+0x74>
 8018240:	2e00      	cmp	r6, #0
 8018242:	d1f7      	bne.n	8018234 <__gethex+0xa4>
 8018244:	782b      	ldrb	r3, [r5, #0]
 8018246:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801824a:	2b50      	cmp	r3, #80	; 0x50
 801824c:	d13d      	bne.n	80182ca <__gethex+0x13a>
 801824e:	786b      	ldrb	r3, [r5, #1]
 8018250:	2b2b      	cmp	r3, #43	; 0x2b
 8018252:	d02f      	beq.n	80182b4 <__gethex+0x124>
 8018254:	2b2d      	cmp	r3, #45	; 0x2d
 8018256:	d031      	beq.n	80182bc <__gethex+0x12c>
 8018258:	1c69      	adds	r1, r5, #1
 801825a:	f04f 0b00 	mov.w	fp, #0
 801825e:	7808      	ldrb	r0, [r1, #0]
 8018260:	f7ff ff80 	bl	8018164 <__hexdig_fun>
 8018264:	1e42      	subs	r2, r0, #1
 8018266:	b2d2      	uxtb	r2, r2
 8018268:	2a18      	cmp	r2, #24
 801826a:	d82e      	bhi.n	80182ca <__gethex+0x13a>
 801826c:	f1a0 0210 	sub.w	r2, r0, #16
 8018270:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018274:	f7ff ff76 	bl	8018164 <__hexdig_fun>
 8018278:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801827c:	fa5f fc8c 	uxtb.w	ip, ip
 8018280:	f1bc 0f18 	cmp.w	ip, #24
 8018284:	d91d      	bls.n	80182c2 <__gethex+0x132>
 8018286:	f1bb 0f00 	cmp.w	fp, #0
 801828a:	d000      	beq.n	801828e <__gethex+0xfe>
 801828c:	4252      	negs	r2, r2
 801828e:	4416      	add	r6, r2
 8018290:	f8ca 1000 	str.w	r1, [sl]
 8018294:	b1dc      	cbz	r4, 80182ce <__gethex+0x13e>
 8018296:	9b01      	ldr	r3, [sp, #4]
 8018298:	2b00      	cmp	r3, #0
 801829a:	bf14      	ite	ne
 801829c:	f04f 0800 	movne.w	r8, #0
 80182a0:	f04f 0806 	moveq.w	r8, #6
 80182a4:	4640      	mov	r0, r8
 80182a6:	b005      	add	sp, #20
 80182a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182ac:	4645      	mov	r5, r8
 80182ae:	4626      	mov	r6, r4
 80182b0:	2401      	movs	r4, #1
 80182b2:	e7c7      	b.n	8018244 <__gethex+0xb4>
 80182b4:	f04f 0b00 	mov.w	fp, #0
 80182b8:	1ca9      	adds	r1, r5, #2
 80182ba:	e7d0      	b.n	801825e <__gethex+0xce>
 80182bc:	f04f 0b01 	mov.w	fp, #1
 80182c0:	e7fa      	b.n	80182b8 <__gethex+0x128>
 80182c2:	230a      	movs	r3, #10
 80182c4:	fb03 0002 	mla	r0, r3, r2, r0
 80182c8:	e7d0      	b.n	801826c <__gethex+0xdc>
 80182ca:	4629      	mov	r1, r5
 80182cc:	e7e0      	b.n	8018290 <__gethex+0x100>
 80182ce:	eba5 0308 	sub.w	r3, r5, r8
 80182d2:	3b01      	subs	r3, #1
 80182d4:	4621      	mov	r1, r4
 80182d6:	2b07      	cmp	r3, #7
 80182d8:	dc0a      	bgt.n	80182f0 <__gethex+0x160>
 80182da:	4648      	mov	r0, r9
 80182dc:	f000 fe54 	bl	8018f88 <_Balloc>
 80182e0:	4604      	mov	r4, r0
 80182e2:	b940      	cbnz	r0, 80182f6 <__gethex+0x166>
 80182e4:	4b62      	ldr	r3, [pc, #392]	; (8018470 <__gethex+0x2e0>)
 80182e6:	4602      	mov	r2, r0
 80182e8:	21e4      	movs	r1, #228	; 0xe4
 80182ea:	4862      	ldr	r0, [pc, #392]	; (8018474 <__gethex+0x2e4>)
 80182ec:	f7ff f862 	bl	80173b4 <__assert_func>
 80182f0:	3101      	adds	r1, #1
 80182f2:	105b      	asrs	r3, r3, #1
 80182f4:	e7ef      	b.n	80182d6 <__gethex+0x146>
 80182f6:	f100 0a14 	add.w	sl, r0, #20
 80182fa:	2300      	movs	r3, #0
 80182fc:	f8cd a004 	str.w	sl, [sp, #4]
 8018300:	469b      	mov	fp, r3
 8018302:	45a8      	cmp	r8, r5
 8018304:	d344      	bcc.n	8018390 <__gethex+0x200>
 8018306:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801830a:	f848 bb04 	str.w	fp, [r8], #4
 801830e:	eba8 080a 	sub.w	r8, r8, sl
 8018312:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8018316:	6122      	str	r2, [r4, #16]
 8018318:	4658      	mov	r0, fp
 801831a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 801831e:	f000 ff25 	bl	801916c <__hi0bits>
 8018322:	683d      	ldr	r5, [r7, #0]
 8018324:	eba8 0800 	sub.w	r8, r8, r0
 8018328:	45a8      	cmp	r8, r5
 801832a:	dd59      	ble.n	80183e0 <__gethex+0x250>
 801832c:	eba8 0805 	sub.w	r8, r8, r5
 8018330:	4641      	mov	r1, r8
 8018332:	4620      	mov	r0, r4
 8018334:	f001 faa1 	bl	801987a <__any_on>
 8018338:	4683      	mov	fp, r0
 801833a:	b1b8      	cbz	r0, 801836c <__gethex+0x1dc>
 801833c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8018340:	1159      	asrs	r1, r3, #5
 8018342:	f003 021f 	and.w	r2, r3, #31
 8018346:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801834a:	f04f 0b01 	mov.w	fp, #1
 801834e:	fa0b f202 	lsl.w	r2, fp, r2
 8018352:	420a      	tst	r2, r1
 8018354:	d00a      	beq.n	801836c <__gethex+0x1dc>
 8018356:	455b      	cmp	r3, fp
 8018358:	dd06      	ble.n	8018368 <__gethex+0x1d8>
 801835a:	f1a8 0102 	sub.w	r1, r8, #2
 801835e:	4620      	mov	r0, r4
 8018360:	f001 fa8b 	bl	801987a <__any_on>
 8018364:	2800      	cmp	r0, #0
 8018366:	d138      	bne.n	80183da <__gethex+0x24a>
 8018368:	f04f 0b02 	mov.w	fp, #2
 801836c:	4641      	mov	r1, r8
 801836e:	4620      	mov	r0, r4
 8018370:	f7ff fea6 	bl	80180c0 <rshift>
 8018374:	4446      	add	r6, r8
 8018376:	68bb      	ldr	r3, [r7, #8]
 8018378:	42b3      	cmp	r3, r6
 801837a:	da41      	bge.n	8018400 <__gethex+0x270>
 801837c:	4621      	mov	r1, r4
 801837e:	4648      	mov	r0, r9
 8018380:	f000 fe42 	bl	8019008 <_Bfree>
 8018384:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018386:	2300      	movs	r3, #0
 8018388:	6013      	str	r3, [r2, #0]
 801838a:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801838e:	e789      	b.n	80182a4 <__gethex+0x114>
 8018390:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018394:	2a2e      	cmp	r2, #46	; 0x2e
 8018396:	d014      	beq.n	80183c2 <__gethex+0x232>
 8018398:	2b20      	cmp	r3, #32
 801839a:	d106      	bne.n	80183aa <__gethex+0x21a>
 801839c:	9b01      	ldr	r3, [sp, #4]
 801839e:	f843 bb04 	str.w	fp, [r3], #4
 80183a2:	f04f 0b00 	mov.w	fp, #0
 80183a6:	9301      	str	r3, [sp, #4]
 80183a8:	465b      	mov	r3, fp
 80183aa:	7828      	ldrb	r0, [r5, #0]
 80183ac:	9303      	str	r3, [sp, #12]
 80183ae:	f7ff fed9 	bl	8018164 <__hexdig_fun>
 80183b2:	9b03      	ldr	r3, [sp, #12]
 80183b4:	f000 000f 	and.w	r0, r0, #15
 80183b8:	4098      	lsls	r0, r3
 80183ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80183be:	3304      	adds	r3, #4
 80183c0:	e79f      	b.n	8018302 <__gethex+0x172>
 80183c2:	45a8      	cmp	r8, r5
 80183c4:	d8e8      	bhi.n	8018398 <__gethex+0x208>
 80183c6:	4929      	ldr	r1, [pc, #164]	; (801846c <__gethex+0x2dc>)
 80183c8:	9303      	str	r3, [sp, #12]
 80183ca:	2201      	movs	r2, #1
 80183cc:	4628      	mov	r0, r5
 80183ce:	f7fe ff8d 	bl	80172ec <strncmp>
 80183d2:	9b03      	ldr	r3, [sp, #12]
 80183d4:	2800      	cmp	r0, #0
 80183d6:	d1df      	bne.n	8018398 <__gethex+0x208>
 80183d8:	e793      	b.n	8018302 <__gethex+0x172>
 80183da:	f04f 0b03 	mov.w	fp, #3
 80183de:	e7c5      	b.n	801836c <__gethex+0x1dc>
 80183e0:	da0b      	bge.n	80183fa <__gethex+0x26a>
 80183e2:	eba5 0808 	sub.w	r8, r5, r8
 80183e6:	4621      	mov	r1, r4
 80183e8:	4642      	mov	r2, r8
 80183ea:	4648      	mov	r0, r9
 80183ec:	f001 f826 	bl	801943c <__lshift>
 80183f0:	eba6 0608 	sub.w	r6, r6, r8
 80183f4:	4604      	mov	r4, r0
 80183f6:	f100 0a14 	add.w	sl, r0, #20
 80183fa:	f04f 0b00 	mov.w	fp, #0
 80183fe:	e7ba      	b.n	8018376 <__gethex+0x1e6>
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	42b3      	cmp	r3, r6
 8018404:	dd74      	ble.n	80184f0 <__gethex+0x360>
 8018406:	1b9e      	subs	r6, r3, r6
 8018408:	42b5      	cmp	r5, r6
 801840a:	dc35      	bgt.n	8018478 <__gethex+0x2e8>
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	2b02      	cmp	r3, #2
 8018410:	d023      	beq.n	801845a <__gethex+0x2ca>
 8018412:	2b03      	cmp	r3, #3
 8018414:	d025      	beq.n	8018462 <__gethex+0x2d2>
 8018416:	2b01      	cmp	r3, #1
 8018418:	d115      	bne.n	8018446 <__gethex+0x2b6>
 801841a:	42b5      	cmp	r5, r6
 801841c:	d113      	bne.n	8018446 <__gethex+0x2b6>
 801841e:	2d01      	cmp	r5, #1
 8018420:	d10b      	bne.n	801843a <__gethex+0x2aa>
 8018422:	9a02      	ldr	r2, [sp, #8]
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	6013      	str	r3, [r2, #0]
 8018428:	2301      	movs	r3, #1
 801842a:	6123      	str	r3, [r4, #16]
 801842c:	f8ca 3000 	str.w	r3, [sl]
 8018430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018432:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018436:	601c      	str	r4, [r3, #0]
 8018438:	e734      	b.n	80182a4 <__gethex+0x114>
 801843a:	1e69      	subs	r1, r5, #1
 801843c:	4620      	mov	r0, r4
 801843e:	f001 fa1c 	bl	801987a <__any_on>
 8018442:	2800      	cmp	r0, #0
 8018444:	d1ed      	bne.n	8018422 <__gethex+0x292>
 8018446:	4621      	mov	r1, r4
 8018448:	4648      	mov	r0, r9
 801844a:	f000 fddd 	bl	8019008 <_Bfree>
 801844e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018450:	2300      	movs	r3, #0
 8018452:	6013      	str	r3, [r2, #0]
 8018454:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018458:	e724      	b.n	80182a4 <__gethex+0x114>
 801845a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801845c:	2b00      	cmp	r3, #0
 801845e:	d1f2      	bne.n	8018446 <__gethex+0x2b6>
 8018460:	e7df      	b.n	8018422 <__gethex+0x292>
 8018462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018464:	2b00      	cmp	r3, #0
 8018466:	d1dc      	bne.n	8018422 <__gethex+0x292>
 8018468:	e7ed      	b.n	8018446 <__gethex+0x2b6>
 801846a:	bf00      	nop
 801846c:	0801b0e4 	.word	0x0801b0e4
 8018470:	0801b2f9 	.word	0x0801b2f9
 8018474:	0801b30a 	.word	0x0801b30a
 8018478:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801847c:	f1bb 0f00 	cmp.w	fp, #0
 8018480:	d133      	bne.n	80184ea <__gethex+0x35a>
 8018482:	f1b8 0f00 	cmp.w	r8, #0
 8018486:	d004      	beq.n	8018492 <__gethex+0x302>
 8018488:	4641      	mov	r1, r8
 801848a:	4620      	mov	r0, r4
 801848c:	f001 f9f5 	bl	801987a <__any_on>
 8018490:	4683      	mov	fp, r0
 8018492:	ea4f 1268 	mov.w	r2, r8, asr #5
 8018496:	2301      	movs	r3, #1
 8018498:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801849c:	f008 081f 	and.w	r8, r8, #31
 80184a0:	fa03 f308 	lsl.w	r3, r3, r8
 80184a4:	4213      	tst	r3, r2
 80184a6:	4631      	mov	r1, r6
 80184a8:	4620      	mov	r0, r4
 80184aa:	bf18      	it	ne
 80184ac:	f04b 0b02 	orrne.w	fp, fp, #2
 80184b0:	1bad      	subs	r5, r5, r6
 80184b2:	f7ff fe05 	bl	80180c0 <rshift>
 80184b6:	687e      	ldr	r6, [r7, #4]
 80184b8:	f04f 0802 	mov.w	r8, #2
 80184bc:	f1bb 0f00 	cmp.w	fp, #0
 80184c0:	d04a      	beq.n	8018558 <__gethex+0x3c8>
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	2b02      	cmp	r3, #2
 80184c6:	d016      	beq.n	80184f6 <__gethex+0x366>
 80184c8:	2b03      	cmp	r3, #3
 80184ca:	d018      	beq.n	80184fe <__gethex+0x36e>
 80184cc:	2b01      	cmp	r3, #1
 80184ce:	d109      	bne.n	80184e4 <__gethex+0x354>
 80184d0:	f01b 0f02 	tst.w	fp, #2
 80184d4:	d006      	beq.n	80184e4 <__gethex+0x354>
 80184d6:	f8da 3000 	ldr.w	r3, [sl]
 80184da:	ea4b 0b03 	orr.w	fp, fp, r3
 80184de:	f01b 0f01 	tst.w	fp, #1
 80184e2:	d10f      	bne.n	8018504 <__gethex+0x374>
 80184e4:	f048 0810 	orr.w	r8, r8, #16
 80184e8:	e036      	b.n	8018558 <__gethex+0x3c8>
 80184ea:	f04f 0b01 	mov.w	fp, #1
 80184ee:	e7d0      	b.n	8018492 <__gethex+0x302>
 80184f0:	f04f 0801 	mov.w	r8, #1
 80184f4:	e7e2      	b.n	80184bc <__gethex+0x32c>
 80184f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80184f8:	f1c3 0301 	rsb	r3, r3, #1
 80184fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80184fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018500:	2b00      	cmp	r3, #0
 8018502:	d0ef      	beq.n	80184e4 <__gethex+0x354>
 8018504:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018508:	f104 0214 	add.w	r2, r4, #20
 801850c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018510:	9301      	str	r3, [sp, #4]
 8018512:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8018516:	2300      	movs	r3, #0
 8018518:	4694      	mov	ip, r2
 801851a:	f852 1b04 	ldr.w	r1, [r2], #4
 801851e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8018522:	d01e      	beq.n	8018562 <__gethex+0x3d2>
 8018524:	3101      	adds	r1, #1
 8018526:	f8cc 1000 	str.w	r1, [ip]
 801852a:	f1b8 0f02 	cmp.w	r8, #2
 801852e:	f104 0214 	add.w	r2, r4, #20
 8018532:	d13d      	bne.n	80185b0 <__gethex+0x420>
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	3b01      	subs	r3, #1
 8018538:	42ab      	cmp	r3, r5
 801853a:	d10b      	bne.n	8018554 <__gethex+0x3c4>
 801853c:	1169      	asrs	r1, r5, #5
 801853e:	2301      	movs	r3, #1
 8018540:	f005 051f 	and.w	r5, r5, #31
 8018544:	fa03 f505 	lsl.w	r5, r3, r5
 8018548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801854c:	421d      	tst	r5, r3
 801854e:	bf18      	it	ne
 8018550:	f04f 0801 	movne.w	r8, #1
 8018554:	f048 0820 	orr.w	r8, r8, #32
 8018558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801855a:	601c      	str	r4, [r3, #0]
 801855c:	9b02      	ldr	r3, [sp, #8]
 801855e:	601e      	str	r6, [r3, #0]
 8018560:	e6a0      	b.n	80182a4 <__gethex+0x114>
 8018562:	4290      	cmp	r0, r2
 8018564:	f842 3c04 	str.w	r3, [r2, #-4]
 8018568:	d8d6      	bhi.n	8018518 <__gethex+0x388>
 801856a:	68a2      	ldr	r2, [r4, #8]
 801856c:	4593      	cmp	fp, r2
 801856e:	db17      	blt.n	80185a0 <__gethex+0x410>
 8018570:	6861      	ldr	r1, [r4, #4]
 8018572:	4648      	mov	r0, r9
 8018574:	3101      	adds	r1, #1
 8018576:	f000 fd07 	bl	8018f88 <_Balloc>
 801857a:	4682      	mov	sl, r0
 801857c:	b918      	cbnz	r0, 8018586 <__gethex+0x3f6>
 801857e:	4b1b      	ldr	r3, [pc, #108]	; (80185ec <__gethex+0x45c>)
 8018580:	4602      	mov	r2, r0
 8018582:	2184      	movs	r1, #132	; 0x84
 8018584:	e6b1      	b.n	80182ea <__gethex+0x15a>
 8018586:	6922      	ldr	r2, [r4, #16]
 8018588:	3202      	adds	r2, #2
 801858a:	f104 010c 	add.w	r1, r4, #12
 801858e:	0092      	lsls	r2, r2, #2
 8018590:	300c      	adds	r0, #12
 8018592:	f7fe fef6 	bl	8017382 <memcpy>
 8018596:	4621      	mov	r1, r4
 8018598:	4648      	mov	r0, r9
 801859a:	f000 fd35 	bl	8019008 <_Bfree>
 801859e:	4654      	mov	r4, sl
 80185a0:	6922      	ldr	r2, [r4, #16]
 80185a2:	1c51      	adds	r1, r2, #1
 80185a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80185a8:	6121      	str	r1, [r4, #16]
 80185aa:	2101      	movs	r1, #1
 80185ac:	6151      	str	r1, [r2, #20]
 80185ae:	e7bc      	b.n	801852a <__gethex+0x39a>
 80185b0:	6921      	ldr	r1, [r4, #16]
 80185b2:	4559      	cmp	r1, fp
 80185b4:	dd0b      	ble.n	80185ce <__gethex+0x43e>
 80185b6:	2101      	movs	r1, #1
 80185b8:	4620      	mov	r0, r4
 80185ba:	f7ff fd81 	bl	80180c0 <rshift>
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	3601      	adds	r6, #1
 80185c2:	42b3      	cmp	r3, r6
 80185c4:	f6ff aeda 	blt.w	801837c <__gethex+0x1ec>
 80185c8:	f04f 0801 	mov.w	r8, #1
 80185cc:	e7c2      	b.n	8018554 <__gethex+0x3c4>
 80185ce:	f015 051f 	ands.w	r5, r5, #31
 80185d2:	d0f9      	beq.n	80185c8 <__gethex+0x438>
 80185d4:	9b01      	ldr	r3, [sp, #4]
 80185d6:	441a      	add	r2, r3
 80185d8:	f1c5 0520 	rsb	r5, r5, #32
 80185dc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80185e0:	f000 fdc4 	bl	801916c <__hi0bits>
 80185e4:	42a8      	cmp	r0, r5
 80185e6:	dbe6      	blt.n	80185b6 <__gethex+0x426>
 80185e8:	e7ee      	b.n	80185c8 <__gethex+0x438>
 80185ea:	bf00      	nop
 80185ec:	0801b2f9 	.word	0x0801b2f9

080185f0 <L_shift>:
 80185f0:	f1c2 0208 	rsb	r2, r2, #8
 80185f4:	0092      	lsls	r2, r2, #2
 80185f6:	b570      	push	{r4, r5, r6, lr}
 80185f8:	f1c2 0620 	rsb	r6, r2, #32
 80185fc:	6843      	ldr	r3, [r0, #4]
 80185fe:	6804      	ldr	r4, [r0, #0]
 8018600:	fa03 f506 	lsl.w	r5, r3, r6
 8018604:	432c      	orrs	r4, r5
 8018606:	40d3      	lsrs	r3, r2
 8018608:	6004      	str	r4, [r0, #0]
 801860a:	f840 3f04 	str.w	r3, [r0, #4]!
 801860e:	4288      	cmp	r0, r1
 8018610:	d3f4      	bcc.n	80185fc <L_shift+0xc>
 8018612:	bd70      	pop	{r4, r5, r6, pc}

08018614 <__match>:
 8018614:	b530      	push	{r4, r5, lr}
 8018616:	6803      	ldr	r3, [r0, #0]
 8018618:	3301      	adds	r3, #1
 801861a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801861e:	b914      	cbnz	r4, 8018626 <__match+0x12>
 8018620:	6003      	str	r3, [r0, #0]
 8018622:	2001      	movs	r0, #1
 8018624:	bd30      	pop	{r4, r5, pc}
 8018626:	f813 2b01 	ldrb.w	r2, [r3], #1
 801862a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801862e:	2d19      	cmp	r5, #25
 8018630:	bf98      	it	ls
 8018632:	3220      	addls	r2, #32
 8018634:	42a2      	cmp	r2, r4
 8018636:	d0f0      	beq.n	801861a <__match+0x6>
 8018638:	2000      	movs	r0, #0
 801863a:	e7f3      	b.n	8018624 <__match+0x10>

0801863c <__hexnan>:
 801863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018640:	680b      	ldr	r3, [r1, #0]
 8018642:	6801      	ldr	r1, [r0, #0]
 8018644:	115e      	asrs	r6, r3, #5
 8018646:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801864a:	f013 031f 	ands.w	r3, r3, #31
 801864e:	b087      	sub	sp, #28
 8018650:	bf18      	it	ne
 8018652:	3604      	addne	r6, #4
 8018654:	2500      	movs	r5, #0
 8018656:	1f37      	subs	r7, r6, #4
 8018658:	4682      	mov	sl, r0
 801865a:	4690      	mov	r8, r2
 801865c:	9301      	str	r3, [sp, #4]
 801865e:	f846 5c04 	str.w	r5, [r6, #-4]
 8018662:	46b9      	mov	r9, r7
 8018664:	463c      	mov	r4, r7
 8018666:	9502      	str	r5, [sp, #8]
 8018668:	46ab      	mov	fp, r5
 801866a:	784a      	ldrb	r2, [r1, #1]
 801866c:	1c4b      	adds	r3, r1, #1
 801866e:	9303      	str	r3, [sp, #12]
 8018670:	b342      	cbz	r2, 80186c4 <__hexnan+0x88>
 8018672:	4610      	mov	r0, r2
 8018674:	9105      	str	r1, [sp, #20]
 8018676:	9204      	str	r2, [sp, #16]
 8018678:	f7ff fd74 	bl	8018164 <__hexdig_fun>
 801867c:	2800      	cmp	r0, #0
 801867e:	d14f      	bne.n	8018720 <__hexnan+0xe4>
 8018680:	9a04      	ldr	r2, [sp, #16]
 8018682:	9905      	ldr	r1, [sp, #20]
 8018684:	2a20      	cmp	r2, #32
 8018686:	d818      	bhi.n	80186ba <__hexnan+0x7e>
 8018688:	9b02      	ldr	r3, [sp, #8]
 801868a:	459b      	cmp	fp, r3
 801868c:	dd13      	ble.n	80186b6 <__hexnan+0x7a>
 801868e:	454c      	cmp	r4, r9
 8018690:	d206      	bcs.n	80186a0 <__hexnan+0x64>
 8018692:	2d07      	cmp	r5, #7
 8018694:	dc04      	bgt.n	80186a0 <__hexnan+0x64>
 8018696:	462a      	mov	r2, r5
 8018698:	4649      	mov	r1, r9
 801869a:	4620      	mov	r0, r4
 801869c:	f7ff ffa8 	bl	80185f0 <L_shift>
 80186a0:	4544      	cmp	r4, r8
 80186a2:	d950      	bls.n	8018746 <__hexnan+0x10a>
 80186a4:	2300      	movs	r3, #0
 80186a6:	f1a4 0904 	sub.w	r9, r4, #4
 80186aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80186ae:	f8cd b008 	str.w	fp, [sp, #8]
 80186b2:	464c      	mov	r4, r9
 80186b4:	461d      	mov	r5, r3
 80186b6:	9903      	ldr	r1, [sp, #12]
 80186b8:	e7d7      	b.n	801866a <__hexnan+0x2e>
 80186ba:	2a29      	cmp	r2, #41	; 0x29
 80186bc:	d155      	bne.n	801876a <__hexnan+0x12e>
 80186be:	3102      	adds	r1, #2
 80186c0:	f8ca 1000 	str.w	r1, [sl]
 80186c4:	f1bb 0f00 	cmp.w	fp, #0
 80186c8:	d04f      	beq.n	801876a <__hexnan+0x12e>
 80186ca:	454c      	cmp	r4, r9
 80186cc:	d206      	bcs.n	80186dc <__hexnan+0xa0>
 80186ce:	2d07      	cmp	r5, #7
 80186d0:	dc04      	bgt.n	80186dc <__hexnan+0xa0>
 80186d2:	462a      	mov	r2, r5
 80186d4:	4649      	mov	r1, r9
 80186d6:	4620      	mov	r0, r4
 80186d8:	f7ff ff8a 	bl	80185f0 <L_shift>
 80186dc:	4544      	cmp	r4, r8
 80186de:	d934      	bls.n	801874a <__hexnan+0x10e>
 80186e0:	f1a8 0204 	sub.w	r2, r8, #4
 80186e4:	4623      	mov	r3, r4
 80186e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80186ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80186ee:	429f      	cmp	r7, r3
 80186f0:	d2f9      	bcs.n	80186e6 <__hexnan+0xaa>
 80186f2:	1b3b      	subs	r3, r7, r4
 80186f4:	f023 0303 	bic.w	r3, r3, #3
 80186f8:	3304      	adds	r3, #4
 80186fa:	3e03      	subs	r6, #3
 80186fc:	3401      	adds	r4, #1
 80186fe:	42a6      	cmp	r6, r4
 8018700:	bf38      	it	cc
 8018702:	2304      	movcc	r3, #4
 8018704:	4443      	add	r3, r8
 8018706:	2200      	movs	r2, #0
 8018708:	f843 2b04 	str.w	r2, [r3], #4
 801870c:	429f      	cmp	r7, r3
 801870e:	d2fb      	bcs.n	8018708 <__hexnan+0xcc>
 8018710:	683b      	ldr	r3, [r7, #0]
 8018712:	b91b      	cbnz	r3, 801871c <__hexnan+0xe0>
 8018714:	4547      	cmp	r7, r8
 8018716:	d126      	bne.n	8018766 <__hexnan+0x12a>
 8018718:	2301      	movs	r3, #1
 801871a:	603b      	str	r3, [r7, #0]
 801871c:	2005      	movs	r0, #5
 801871e:	e025      	b.n	801876c <__hexnan+0x130>
 8018720:	3501      	adds	r5, #1
 8018722:	2d08      	cmp	r5, #8
 8018724:	f10b 0b01 	add.w	fp, fp, #1
 8018728:	dd06      	ble.n	8018738 <__hexnan+0xfc>
 801872a:	4544      	cmp	r4, r8
 801872c:	d9c3      	bls.n	80186b6 <__hexnan+0x7a>
 801872e:	2300      	movs	r3, #0
 8018730:	f844 3c04 	str.w	r3, [r4, #-4]
 8018734:	2501      	movs	r5, #1
 8018736:	3c04      	subs	r4, #4
 8018738:	6822      	ldr	r2, [r4, #0]
 801873a:	f000 000f 	and.w	r0, r0, #15
 801873e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018742:	6020      	str	r0, [r4, #0]
 8018744:	e7b7      	b.n	80186b6 <__hexnan+0x7a>
 8018746:	2508      	movs	r5, #8
 8018748:	e7b5      	b.n	80186b6 <__hexnan+0x7a>
 801874a:	9b01      	ldr	r3, [sp, #4]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d0df      	beq.n	8018710 <__hexnan+0xd4>
 8018750:	f1c3 0320 	rsb	r3, r3, #32
 8018754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018758:	40da      	lsrs	r2, r3
 801875a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801875e:	4013      	ands	r3, r2
 8018760:	f846 3c04 	str.w	r3, [r6, #-4]
 8018764:	e7d4      	b.n	8018710 <__hexnan+0xd4>
 8018766:	3f04      	subs	r7, #4
 8018768:	e7d2      	b.n	8018710 <__hexnan+0xd4>
 801876a:	2004      	movs	r0, #4
 801876c:	b007      	add	sp, #28
 801876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018772 <__ssputs_r>:
 8018772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018776:	688e      	ldr	r6, [r1, #8]
 8018778:	461f      	mov	r7, r3
 801877a:	42be      	cmp	r6, r7
 801877c:	680b      	ldr	r3, [r1, #0]
 801877e:	4682      	mov	sl, r0
 8018780:	460c      	mov	r4, r1
 8018782:	4690      	mov	r8, r2
 8018784:	d82c      	bhi.n	80187e0 <__ssputs_r+0x6e>
 8018786:	898a      	ldrh	r2, [r1, #12]
 8018788:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801878c:	d026      	beq.n	80187dc <__ssputs_r+0x6a>
 801878e:	6965      	ldr	r5, [r4, #20]
 8018790:	6909      	ldr	r1, [r1, #16]
 8018792:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018796:	eba3 0901 	sub.w	r9, r3, r1
 801879a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801879e:	1c7b      	adds	r3, r7, #1
 80187a0:	444b      	add	r3, r9
 80187a2:	106d      	asrs	r5, r5, #1
 80187a4:	429d      	cmp	r5, r3
 80187a6:	bf38      	it	cc
 80187a8:	461d      	movcc	r5, r3
 80187aa:	0553      	lsls	r3, r2, #21
 80187ac:	d527      	bpl.n	80187fe <__ssputs_r+0x8c>
 80187ae:	4629      	mov	r1, r5
 80187b0:	f000 faa2 	bl	8018cf8 <_malloc_r>
 80187b4:	4606      	mov	r6, r0
 80187b6:	b360      	cbz	r0, 8018812 <__ssputs_r+0xa0>
 80187b8:	6921      	ldr	r1, [r4, #16]
 80187ba:	464a      	mov	r2, r9
 80187bc:	f7fe fde1 	bl	8017382 <memcpy>
 80187c0:	89a3      	ldrh	r3, [r4, #12]
 80187c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80187c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187ca:	81a3      	strh	r3, [r4, #12]
 80187cc:	6126      	str	r6, [r4, #16]
 80187ce:	6165      	str	r5, [r4, #20]
 80187d0:	444e      	add	r6, r9
 80187d2:	eba5 0509 	sub.w	r5, r5, r9
 80187d6:	6026      	str	r6, [r4, #0]
 80187d8:	60a5      	str	r5, [r4, #8]
 80187da:	463e      	mov	r6, r7
 80187dc:	42be      	cmp	r6, r7
 80187de:	d900      	bls.n	80187e2 <__ssputs_r+0x70>
 80187e0:	463e      	mov	r6, r7
 80187e2:	6820      	ldr	r0, [r4, #0]
 80187e4:	4632      	mov	r2, r6
 80187e6:	4641      	mov	r1, r8
 80187e8:	f001 f9f1 	bl	8019bce <memmove>
 80187ec:	68a3      	ldr	r3, [r4, #8]
 80187ee:	1b9b      	subs	r3, r3, r6
 80187f0:	60a3      	str	r3, [r4, #8]
 80187f2:	6823      	ldr	r3, [r4, #0]
 80187f4:	4433      	add	r3, r6
 80187f6:	6023      	str	r3, [r4, #0]
 80187f8:	2000      	movs	r0, #0
 80187fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187fe:	462a      	mov	r2, r5
 8018800:	f001 f8b2 	bl	8019968 <_realloc_r>
 8018804:	4606      	mov	r6, r0
 8018806:	2800      	cmp	r0, #0
 8018808:	d1e0      	bne.n	80187cc <__ssputs_r+0x5a>
 801880a:	6921      	ldr	r1, [r4, #16]
 801880c:	4650      	mov	r0, sl
 801880e:	f001 fa8d 	bl	8019d2c <_free_r>
 8018812:	230c      	movs	r3, #12
 8018814:	f8ca 3000 	str.w	r3, [sl]
 8018818:	89a3      	ldrh	r3, [r4, #12]
 801881a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801881e:	81a3      	strh	r3, [r4, #12]
 8018820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018824:	e7e9      	b.n	80187fa <__ssputs_r+0x88>
	...

08018828 <_svfiprintf_r>:
 8018828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801882c:	4698      	mov	r8, r3
 801882e:	898b      	ldrh	r3, [r1, #12]
 8018830:	061b      	lsls	r3, r3, #24
 8018832:	b09d      	sub	sp, #116	; 0x74
 8018834:	4607      	mov	r7, r0
 8018836:	460d      	mov	r5, r1
 8018838:	4614      	mov	r4, r2
 801883a:	d50e      	bpl.n	801885a <_svfiprintf_r+0x32>
 801883c:	690b      	ldr	r3, [r1, #16]
 801883e:	b963      	cbnz	r3, 801885a <_svfiprintf_r+0x32>
 8018840:	2140      	movs	r1, #64	; 0x40
 8018842:	f000 fa59 	bl	8018cf8 <_malloc_r>
 8018846:	6028      	str	r0, [r5, #0]
 8018848:	6128      	str	r0, [r5, #16]
 801884a:	b920      	cbnz	r0, 8018856 <_svfiprintf_r+0x2e>
 801884c:	230c      	movs	r3, #12
 801884e:	603b      	str	r3, [r7, #0]
 8018850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018854:	e0d0      	b.n	80189f8 <_svfiprintf_r+0x1d0>
 8018856:	2340      	movs	r3, #64	; 0x40
 8018858:	616b      	str	r3, [r5, #20]
 801885a:	2300      	movs	r3, #0
 801885c:	9309      	str	r3, [sp, #36]	; 0x24
 801885e:	2320      	movs	r3, #32
 8018860:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018864:	f8cd 800c 	str.w	r8, [sp, #12]
 8018868:	2330      	movs	r3, #48	; 0x30
 801886a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018a10 <_svfiprintf_r+0x1e8>
 801886e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018872:	f04f 0901 	mov.w	r9, #1
 8018876:	4623      	mov	r3, r4
 8018878:	469a      	mov	sl, r3
 801887a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801887e:	b10a      	cbz	r2, 8018884 <_svfiprintf_r+0x5c>
 8018880:	2a25      	cmp	r2, #37	; 0x25
 8018882:	d1f9      	bne.n	8018878 <_svfiprintf_r+0x50>
 8018884:	ebba 0b04 	subs.w	fp, sl, r4
 8018888:	d00b      	beq.n	80188a2 <_svfiprintf_r+0x7a>
 801888a:	465b      	mov	r3, fp
 801888c:	4622      	mov	r2, r4
 801888e:	4629      	mov	r1, r5
 8018890:	4638      	mov	r0, r7
 8018892:	f7ff ff6e 	bl	8018772 <__ssputs_r>
 8018896:	3001      	adds	r0, #1
 8018898:	f000 80a9 	beq.w	80189ee <_svfiprintf_r+0x1c6>
 801889c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801889e:	445a      	add	r2, fp
 80188a0:	9209      	str	r2, [sp, #36]	; 0x24
 80188a2:	f89a 3000 	ldrb.w	r3, [sl]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	f000 80a1 	beq.w	80189ee <_svfiprintf_r+0x1c6>
 80188ac:	2300      	movs	r3, #0
 80188ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80188b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188b6:	f10a 0a01 	add.w	sl, sl, #1
 80188ba:	9304      	str	r3, [sp, #16]
 80188bc:	9307      	str	r3, [sp, #28]
 80188be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80188c2:	931a      	str	r3, [sp, #104]	; 0x68
 80188c4:	4654      	mov	r4, sl
 80188c6:	2205      	movs	r2, #5
 80188c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188cc:	4850      	ldr	r0, [pc, #320]	; (8018a10 <_svfiprintf_r+0x1e8>)
 80188ce:	f7e7 fc57 	bl	8000180 <memchr>
 80188d2:	9a04      	ldr	r2, [sp, #16]
 80188d4:	b9d8      	cbnz	r0, 801890e <_svfiprintf_r+0xe6>
 80188d6:	06d0      	lsls	r0, r2, #27
 80188d8:	bf44      	itt	mi
 80188da:	2320      	movmi	r3, #32
 80188dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188e0:	0711      	lsls	r1, r2, #28
 80188e2:	bf44      	itt	mi
 80188e4:	232b      	movmi	r3, #43	; 0x2b
 80188e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188ea:	f89a 3000 	ldrb.w	r3, [sl]
 80188ee:	2b2a      	cmp	r3, #42	; 0x2a
 80188f0:	d015      	beq.n	801891e <_svfiprintf_r+0xf6>
 80188f2:	9a07      	ldr	r2, [sp, #28]
 80188f4:	4654      	mov	r4, sl
 80188f6:	2000      	movs	r0, #0
 80188f8:	f04f 0c0a 	mov.w	ip, #10
 80188fc:	4621      	mov	r1, r4
 80188fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018902:	3b30      	subs	r3, #48	; 0x30
 8018904:	2b09      	cmp	r3, #9
 8018906:	d94d      	bls.n	80189a4 <_svfiprintf_r+0x17c>
 8018908:	b1b0      	cbz	r0, 8018938 <_svfiprintf_r+0x110>
 801890a:	9207      	str	r2, [sp, #28]
 801890c:	e014      	b.n	8018938 <_svfiprintf_r+0x110>
 801890e:	eba0 0308 	sub.w	r3, r0, r8
 8018912:	fa09 f303 	lsl.w	r3, r9, r3
 8018916:	4313      	orrs	r3, r2
 8018918:	9304      	str	r3, [sp, #16]
 801891a:	46a2      	mov	sl, r4
 801891c:	e7d2      	b.n	80188c4 <_svfiprintf_r+0x9c>
 801891e:	9b03      	ldr	r3, [sp, #12]
 8018920:	1d19      	adds	r1, r3, #4
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	9103      	str	r1, [sp, #12]
 8018926:	2b00      	cmp	r3, #0
 8018928:	bfbb      	ittet	lt
 801892a:	425b      	neglt	r3, r3
 801892c:	f042 0202 	orrlt.w	r2, r2, #2
 8018930:	9307      	strge	r3, [sp, #28]
 8018932:	9307      	strlt	r3, [sp, #28]
 8018934:	bfb8      	it	lt
 8018936:	9204      	strlt	r2, [sp, #16]
 8018938:	7823      	ldrb	r3, [r4, #0]
 801893a:	2b2e      	cmp	r3, #46	; 0x2e
 801893c:	d10c      	bne.n	8018958 <_svfiprintf_r+0x130>
 801893e:	7863      	ldrb	r3, [r4, #1]
 8018940:	2b2a      	cmp	r3, #42	; 0x2a
 8018942:	d134      	bne.n	80189ae <_svfiprintf_r+0x186>
 8018944:	9b03      	ldr	r3, [sp, #12]
 8018946:	1d1a      	adds	r2, r3, #4
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	9203      	str	r2, [sp, #12]
 801894c:	2b00      	cmp	r3, #0
 801894e:	bfb8      	it	lt
 8018950:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018954:	3402      	adds	r4, #2
 8018956:	9305      	str	r3, [sp, #20]
 8018958:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8018a14 <_svfiprintf_r+0x1ec>
 801895c:	7821      	ldrb	r1, [r4, #0]
 801895e:	2203      	movs	r2, #3
 8018960:	4650      	mov	r0, sl
 8018962:	f7e7 fc0d 	bl	8000180 <memchr>
 8018966:	b138      	cbz	r0, 8018978 <_svfiprintf_r+0x150>
 8018968:	9b04      	ldr	r3, [sp, #16]
 801896a:	eba0 000a 	sub.w	r0, r0, sl
 801896e:	2240      	movs	r2, #64	; 0x40
 8018970:	4082      	lsls	r2, r0
 8018972:	4313      	orrs	r3, r2
 8018974:	3401      	adds	r4, #1
 8018976:	9304      	str	r3, [sp, #16]
 8018978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801897c:	4826      	ldr	r0, [pc, #152]	; (8018a18 <_svfiprintf_r+0x1f0>)
 801897e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018982:	2206      	movs	r2, #6
 8018984:	f7e7 fbfc 	bl	8000180 <memchr>
 8018988:	2800      	cmp	r0, #0
 801898a:	d038      	beq.n	80189fe <_svfiprintf_r+0x1d6>
 801898c:	4b23      	ldr	r3, [pc, #140]	; (8018a1c <_svfiprintf_r+0x1f4>)
 801898e:	bb1b      	cbnz	r3, 80189d8 <_svfiprintf_r+0x1b0>
 8018990:	9b03      	ldr	r3, [sp, #12]
 8018992:	3307      	adds	r3, #7
 8018994:	f023 0307 	bic.w	r3, r3, #7
 8018998:	3308      	adds	r3, #8
 801899a:	9303      	str	r3, [sp, #12]
 801899c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801899e:	4433      	add	r3, r6
 80189a0:	9309      	str	r3, [sp, #36]	; 0x24
 80189a2:	e768      	b.n	8018876 <_svfiprintf_r+0x4e>
 80189a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80189a8:	460c      	mov	r4, r1
 80189aa:	2001      	movs	r0, #1
 80189ac:	e7a6      	b.n	80188fc <_svfiprintf_r+0xd4>
 80189ae:	2300      	movs	r3, #0
 80189b0:	3401      	adds	r4, #1
 80189b2:	9305      	str	r3, [sp, #20]
 80189b4:	4619      	mov	r1, r3
 80189b6:	f04f 0c0a 	mov.w	ip, #10
 80189ba:	4620      	mov	r0, r4
 80189bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189c0:	3a30      	subs	r2, #48	; 0x30
 80189c2:	2a09      	cmp	r2, #9
 80189c4:	d903      	bls.n	80189ce <_svfiprintf_r+0x1a6>
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d0c6      	beq.n	8018958 <_svfiprintf_r+0x130>
 80189ca:	9105      	str	r1, [sp, #20]
 80189cc:	e7c4      	b.n	8018958 <_svfiprintf_r+0x130>
 80189ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80189d2:	4604      	mov	r4, r0
 80189d4:	2301      	movs	r3, #1
 80189d6:	e7f0      	b.n	80189ba <_svfiprintf_r+0x192>
 80189d8:	ab03      	add	r3, sp, #12
 80189da:	9300      	str	r3, [sp, #0]
 80189dc:	462a      	mov	r2, r5
 80189de:	4b10      	ldr	r3, [pc, #64]	; (8018a20 <_svfiprintf_r+0x1f8>)
 80189e0:	a904      	add	r1, sp, #16
 80189e2:	4638      	mov	r0, r7
 80189e4:	f7fc fed0 	bl	8015788 <_printf_float>
 80189e8:	1c42      	adds	r2, r0, #1
 80189ea:	4606      	mov	r6, r0
 80189ec:	d1d6      	bne.n	801899c <_svfiprintf_r+0x174>
 80189ee:	89ab      	ldrh	r3, [r5, #12]
 80189f0:	065b      	lsls	r3, r3, #25
 80189f2:	f53f af2d 	bmi.w	8018850 <_svfiprintf_r+0x28>
 80189f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189f8:	b01d      	add	sp, #116	; 0x74
 80189fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189fe:	ab03      	add	r3, sp, #12
 8018a00:	9300      	str	r3, [sp, #0]
 8018a02:	462a      	mov	r2, r5
 8018a04:	4b06      	ldr	r3, [pc, #24]	; (8018a20 <_svfiprintf_r+0x1f8>)
 8018a06:	a904      	add	r1, sp, #16
 8018a08:	4638      	mov	r0, r7
 8018a0a:	f7fd f957 	bl	8015cbc <_printf_i>
 8018a0e:	e7eb      	b.n	80189e8 <_svfiprintf_r+0x1c0>
 8018a10:	0801b36a 	.word	0x0801b36a
 8018a14:	0801b370 	.word	0x0801b370
 8018a18:	0801b374 	.word	0x0801b374
 8018a1c:	08015789 	.word	0x08015789
 8018a20:	08018773 	.word	0x08018773

08018a24 <__sfputc_r>:
 8018a24:	6893      	ldr	r3, [r2, #8]
 8018a26:	3b01      	subs	r3, #1
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	b410      	push	{r4}
 8018a2c:	6093      	str	r3, [r2, #8]
 8018a2e:	da07      	bge.n	8018a40 <__sfputc_r+0x1c>
 8018a30:	6994      	ldr	r4, [r2, #24]
 8018a32:	42a3      	cmp	r3, r4
 8018a34:	db01      	blt.n	8018a3a <__sfputc_r+0x16>
 8018a36:	290a      	cmp	r1, #10
 8018a38:	d102      	bne.n	8018a40 <__sfputc_r+0x1c>
 8018a3a:	bc10      	pop	{r4}
 8018a3c:	f000 bfc3 	b.w	80199c6 <__swbuf_r>
 8018a40:	6813      	ldr	r3, [r2, #0]
 8018a42:	1c58      	adds	r0, r3, #1
 8018a44:	6010      	str	r0, [r2, #0]
 8018a46:	7019      	strb	r1, [r3, #0]
 8018a48:	4608      	mov	r0, r1
 8018a4a:	bc10      	pop	{r4}
 8018a4c:	4770      	bx	lr

08018a4e <__sfputs_r>:
 8018a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a50:	4606      	mov	r6, r0
 8018a52:	460f      	mov	r7, r1
 8018a54:	4614      	mov	r4, r2
 8018a56:	18d5      	adds	r5, r2, r3
 8018a58:	42ac      	cmp	r4, r5
 8018a5a:	d101      	bne.n	8018a60 <__sfputs_r+0x12>
 8018a5c:	2000      	movs	r0, #0
 8018a5e:	e007      	b.n	8018a70 <__sfputs_r+0x22>
 8018a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a64:	463a      	mov	r2, r7
 8018a66:	4630      	mov	r0, r6
 8018a68:	f7ff ffdc 	bl	8018a24 <__sfputc_r>
 8018a6c:	1c43      	adds	r3, r0, #1
 8018a6e:	d1f3      	bne.n	8018a58 <__sfputs_r+0xa>
 8018a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018a74 <_vfiprintf_r>:
 8018a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a78:	460d      	mov	r5, r1
 8018a7a:	b09d      	sub	sp, #116	; 0x74
 8018a7c:	4614      	mov	r4, r2
 8018a7e:	4698      	mov	r8, r3
 8018a80:	4606      	mov	r6, r0
 8018a82:	b118      	cbz	r0, 8018a8c <_vfiprintf_r+0x18>
 8018a84:	6a03      	ldr	r3, [r0, #32]
 8018a86:	b90b      	cbnz	r3, 8018a8c <_vfiprintf_r+0x18>
 8018a88:	f7fd fcf2 	bl	8016470 <__sinit>
 8018a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a8e:	07d9      	lsls	r1, r3, #31
 8018a90:	d405      	bmi.n	8018a9e <_vfiprintf_r+0x2a>
 8018a92:	89ab      	ldrh	r3, [r5, #12]
 8018a94:	059a      	lsls	r2, r3, #22
 8018a96:	d402      	bmi.n	8018a9e <_vfiprintf_r+0x2a>
 8018a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018a9a:	f7fe fc70 	bl	801737e <__retarget_lock_acquire_recursive>
 8018a9e:	89ab      	ldrh	r3, [r5, #12]
 8018aa0:	071b      	lsls	r3, r3, #28
 8018aa2:	d501      	bpl.n	8018aa8 <_vfiprintf_r+0x34>
 8018aa4:	692b      	ldr	r3, [r5, #16]
 8018aa6:	b99b      	cbnz	r3, 8018ad0 <_vfiprintf_r+0x5c>
 8018aa8:	4629      	mov	r1, r5
 8018aaa:	4630      	mov	r0, r6
 8018aac:	f000 ffc8 	bl	8019a40 <__swsetup_r>
 8018ab0:	b170      	cbz	r0, 8018ad0 <_vfiprintf_r+0x5c>
 8018ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ab4:	07dc      	lsls	r4, r3, #31
 8018ab6:	d504      	bpl.n	8018ac2 <_vfiprintf_r+0x4e>
 8018ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018abc:	b01d      	add	sp, #116	; 0x74
 8018abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ac2:	89ab      	ldrh	r3, [r5, #12]
 8018ac4:	0598      	lsls	r0, r3, #22
 8018ac6:	d4f7      	bmi.n	8018ab8 <_vfiprintf_r+0x44>
 8018ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018aca:	f7fe fc59 	bl	8017380 <__retarget_lock_release_recursive>
 8018ace:	e7f3      	b.n	8018ab8 <_vfiprintf_r+0x44>
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ad4:	2320      	movs	r3, #32
 8018ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ade:	2330      	movs	r3, #48	; 0x30
 8018ae0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018c94 <_vfiprintf_r+0x220>
 8018ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ae8:	f04f 0901 	mov.w	r9, #1
 8018aec:	4623      	mov	r3, r4
 8018aee:	469a      	mov	sl, r3
 8018af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018af4:	b10a      	cbz	r2, 8018afa <_vfiprintf_r+0x86>
 8018af6:	2a25      	cmp	r2, #37	; 0x25
 8018af8:	d1f9      	bne.n	8018aee <_vfiprintf_r+0x7a>
 8018afa:	ebba 0b04 	subs.w	fp, sl, r4
 8018afe:	d00b      	beq.n	8018b18 <_vfiprintf_r+0xa4>
 8018b00:	465b      	mov	r3, fp
 8018b02:	4622      	mov	r2, r4
 8018b04:	4629      	mov	r1, r5
 8018b06:	4630      	mov	r0, r6
 8018b08:	f7ff ffa1 	bl	8018a4e <__sfputs_r>
 8018b0c:	3001      	adds	r0, #1
 8018b0e:	f000 80a9 	beq.w	8018c64 <_vfiprintf_r+0x1f0>
 8018b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b14:	445a      	add	r2, fp
 8018b16:	9209      	str	r2, [sp, #36]	; 0x24
 8018b18:	f89a 3000 	ldrb.w	r3, [sl]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	f000 80a1 	beq.w	8018c64 <_vfiprintf_r+0x1f0>
 8018b22:	2300      	movs	r3, #0
 8018b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b2c:	f10a 0a01 	add.w	sl, sl, #1
 8018b30:	9304      	str	r3, [sp, #16]
 8018b32:	9307      	str	r3, [sp, #28]
 8018b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b38:	931a      	str	r3, [sp, #104]	; 0x68
 8018b3a:	4654      	mov	r4, sl
 8018b3c:	2205      	movs	r2, #5
 8018b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b42:	4854      	ldr	r0, [pc, #336]	; (8018c94 <_vfiprintf_r+0x220>)
 8018b44:	f7e7 fb1c 	bl	8000180 <memchr>
 8018b48:	9a04      	ldr	r2, [sp, #16]
 8018b4a:	b9d8      	cbnz	r0, 8018b84 <_vfiprintf_r+0x110>
 8018b4c:	06d1      	lsls	r1, r2, #27
 8018b4e:	bf44      	itt	mi
 8018b50:	2320      	movmi	r3, #32
 8018b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b56:	0713      	lsls	r3, r2, #28
 8018b58:	bf44      	itt	mi
 8018b5a:	232b      	movmi	r3, #43	; 0x2b
 8018b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b60:	f89a 3000 	ldrb.w	r3, [sl]
 8018b64:	2b2a      	cmp	r3, #42	; 0x2a
 8018b66:	d015      	beq.n	8018b94 <_vfiprintf_r+0x120>
 8018b68:	9a07      	ldr	r2, [sp, #28]
 8018b6a:	4654      	mov	r4, sl
 8018b6c:	2000      	movs	r0, #0
 8018b6e:	f04f 0c0a 	mov.w	ip, #10
 8018b72:	4621      	mov	r1, r4
 8018b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b78:	3b30      	subs	r3, #48	; 0x30
 8018b7a:	2b09      	cmp	r3, #9
 8018b7c:	d94d      	bls.n	8018c1a <_vfiprintf_r+0x1a6>
 8018b7e:	b1b0      	cbz	r0, 8018bae <_vfiprintf_r+0x13a>
 8018b80:	9207      	str	r2, [sp, #28]
 8018b82:	e014      	b.n	8018bae <_vfiprintf_r+0x13a>
 8018b84:	eba0 0308 	sub.w	r3, r0, r8
 8018b88:	fa09 f303 	lsl.w	r3, r9, r3
 8018b8c:	4313      	orrs	r3, r2
 8018b8e:	9304      	str	r3, [sp, #16]
 8018b90:	46a2      	mov	sl, r4
 8018b92:	e7d2      	b.n	8018b3a <_vfiprintf_r+0xc6>
 8018b94:	9b03      	ldr	r3, [sp, #12]
 8018b96:	1d19      	adds	r1, r3, #4
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	9103      	str	r1, [sp, #12]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	bfbb      	ittet	lt
 8018ba0:	425b      	neglt	r3, r3
 8018ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8018ba6:	9307      	strge	r3, [sp, #28]
 8018ba8:	9307      	strlt	r3, [sp, #28]
 8018baa:	bfb8      	it	lt
 8018bac:	9204      	strlt	r2, [sp, #16]
 8018bae:	7823      	ldrb	r3, [r4, #0]
 8018bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8018bb2:	d10c      	bne.n	8018bce <_vfiprintf_r+0x15a>
 8018bb4:	7863      	ldrb	r3, [r4, #1]
 8018bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8018bb8:	d134      	bne.n	8018c24 <_vfiprintf_r+0x1b0>
 8018bba:	9b03      	ldr	r3, [sp, #12]
 8018bbc:	1d1a      	adds	r2, r3, #4
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	9203      	str	r2, [sp, #12]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	bfb8      	it	lt
 8018bc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018bca:	3402      	adds	r4, #2
 8018bcc:	9305      	str	r3, [sp, #20]
 8018bce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018c98 <_vfiprintf_r+0x224>
 8018bd2:	7821      	ldrb	r1, [r4, #0]
 8018bd4:	2203      	movs	r2, #3
 8018bd6:	4650      	mov	r0, sl
 8018bd8:	f7e7 fad2 	bl	8000180 <memchr>
 8018bdc:	b138      	cbz	r0, 8018bee <_vfiprintf_r+0x17a>
 8018bde:	9b04      	ldr	r3, [sp, #16]
 8018be0:	eba0 000a 	sub.w	r0, r0, sl
 8018be4:	2240      	movs	r2, #64	; 0x40
 8018be6:	4082      	lsls	r2, r0
 8018be8:	4313      	orrs	r3, r2
 8018bea:	3401      	adds	r4, #1
 8018bec:	9304      	str	r3, [sp, #16]
 8018bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bf2:	482a      	ldr	r0, [pc, #168]	; (8018c9c <_vfiprintf_r+0x228>)
 8018bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018bf8:	2206      	movs	r2, #6
 8018bfa:	f7e7 fac1 	bl	8000180 <memchr>
 8018bfe:	2800      	cmp	r0, #0
 8018c00:	d03f      	beq.n	8018c82 <_vfiprintf_r+0x20e>
 8018c02:	4b27      	ldr	r3, [pc, #156]	; (8018ca0 <_vfiprintf_r+0x22c>)
 8018c04:	bb1b      	cbnz	r3, 8018c4e <_vfiprintf_r+0x1da>
 8018c06:	9b03      	ldr	r3, [sp, #12]
 8018c08:	3307      	adds	r3, #7
 8018c0a:	f023 0307 	bic.w	r3, r3, #7
 8018c0e:	3308      	adds	r3, #8
 8018c10:	9303      	str	r3, [sp, #12]
 8018c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c14:	443b      	add	r3, r7
 8018c16:	9309      	str	r3, [sp, #36]	; 0x24
 8018c18:	e768      	b.n	8018aec <_vfiprintf_r+0x78>
 8018c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c1e:	460c      	mov	r4, r1
 8018c20:	2001      	movs	r0, #1
 8018c22:	e7a6      	b.n	8018b72 <_vfiprintf_r+0xfe>
 8018c24:	2300      	movs	r3, #0
 8018c26:	3401      	adds	r4, #1
 8018c28:	9305      	str	r3, [sp, #20]
 8018c2a:	4619      	mov	r1, r3
 8018c2c:	f04f 0c0a 	mov.w	ip, #10
 8018c30:	4620      	mov	r0, r4
 8018c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c36:	3a30      	subs	r2, #48	; 0x30
 8018c38:	2a09      	cmp	r2, #9
 8018c3a:	d903      	bls.n	8018c44 <_vfiprintf_r+0x1d0>
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d0c6      	beq.n	8018bce <_vfiprintf_r+0x15a>
 8018c40:	9105      	str	r1, [sp, #20]
 8018c42:	e7c4      	b.n	8018bce <_vfiprintf_r+0x15a>
 8018c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c48:	4604      	mov	r4, r0
 8018c4a:	2301      	movs	r3, #1
 8018c4c:	e7f0      	b.n	8018c30 <_vfiprintf_r+0x1bc>
 8018c4e:	ab03      	add	r3, sp, #12
 8018c50:	9300      	str	r3, [sp, #0]
 8018c52:	462a      	mov	r2, r5
 8018c54:	4b13      	ldr	r3, [pc, #76]	; (8018ca4 <_vfiprintf_r+0x230>)
 8018c56:	a904      	add	r1, sp, #16
 8018c58:	4630      	mov	r0, r6
 8018c5a:	f7fc fd95 	bl	8015788 <_printf_float>
 8018c5e:	4607      	mov	r7, r0
 8018c60:	1c78      	adds	r0, r7, #1
 8018c62:	d1d6      	bne.n	8018c12 <_vfiprintf_r+0x19e>
 8018c64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c66:	07d9      	lsls	r1, r3, #31
 8018c68:	d405      	bmi.n	8018c76 <_vfiprintf_r+0x202>
 8018c6a:	89ab      	ldrh	r3, [r5, #12]
 8018c6c:	059a      	lsls	r2, r3, #22
 8018c6e:	d402      	bmi.n	8018c76 <_vfiprintf_r+0x202>
 8018c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c72:	f7fe fb85 	bl	8017380 <__retarget_lock_release_recursive>
 8018c76:	89ab      	ldrh	r3, [r5, #12]
 8018c78:	065b      	lsls	r3, r3, #25
 8018c7a:	f53f af1d 	bmi.w	8018ab8 <_vfiprintf_r+0x44>
 8018c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c80:	e71c      	b.n	8018abc <_vfiprintf_r+0x48>
 8018c82:	ab03      	add	r3, sp, #12
 8018c84:	9300      	str	r3, [sp, #0]
 8018c86:	462a      	mov	r2, r5
 8018c88:	4b06      	ldr	r3, [pc, #24]	; (8018ca4 <_vfiprintf_r+0x230>)
 8018c8a:	a904      	add	r1, sp, #16
 8018c8c:	4630      	mov	r0, r6
 8018c8e:	f7fd f815 	bl	8015cbc <_printf_i>
 8018c92:	e7e4      	b.n	8018c5e <_vfiprintf_r+0x1ea>
 8018c94:	0801b36a 	.word	0x0801b36a
 8018c98:	0801b370 	.word	0x0801b370
 8018c9c:	0801b374 	.word	0x0801b374
 8018ca0:	08015789 	.word	0x08015789
 8018ca4:	08018a4f 	.word	0x08018a4f

08018ca8 <malloc>:
 8018ca8:	4b02      	ldr	r3, [pc, #8]	; (8018cb4 <malloc+0xc>)
 8018caa:	4601      	mov	r1, r0
 8018cac:	6818      	ldr	r0, [r3, #0]
 8018cae:	f000 b823 	b.w	8018cf8 <_malloc_r>
 8018cb2:	bf00      	nop
 8018cb4:	200003e0 	.word	0x200003e0

08018cb8 <sbrk_aligned>:
 8018cb8:	b570      	push	{r4, r5, r6, lr}
 8018cba:	4e0e      	ldr	r6, [pc, #56]	; (8018cf4 <sbrk_aligned+0x3c>)
 8018cbc:	460c      	mov	r4, r1
 8018cbe:	6831      	ldr	r1, [r6, #0]
 8018cc0:	4605      	mov	r5, r0
 8018cc2:	b911      	cbnz	r1, 8018cca <sbrk_aligned+0x12>
 8018cc4:	f000 fff4 	bl	8019cb0 <_sbrk_r>
 8018cc8:	6030      	str	r0, [r6, #0]
 8018cca:	4621      	mov	r1, r4
 8018ccc:	4628      	mov	r0, r5
 8018cce:	f000 ffef 	bl	8019cb0 <_sbrk_r>
 8018cd2:	1c43      	adds	r3, r0, #1
 8018cd4:	d00a      	beq.n	8018cec <sbrk_aligned+0x34>
 8018cd6:	1cc4      	adds	r4, r0, #3
 8018cd8:	f024 0403 	bic.w	r4, r4, #3
 8018cdc:	42a0      	cmp	r0, r4
 8018cde:	d007      	beq.n	8018cf0 <sbrk_aligned+0x38>
 8018ce0:	1a21      	subs	r1, r4, r0
 8018ce2:	4628      	mov	r0, r5
 8018ce4:	f000 ffe4 	bl	8019cb0 <_sbrk_r>
 8018ce8:	3001      	adds	r0, #1
 8018cea:	d101      	bne.n	8018cf0 <sbrk_aligned+0x38>
 8018cec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018cf0:	4620      	mov	r0, r4
 8018cf2:	bd70      	pop	{r4, r5, r6, pc}
 8018cf4:	20001e4c 	.word	0x20001e4c

08018cf8 <_malloc_r>:
 8018cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cfc:	1ccd      	adds	r5, r1, #3
 8018cfe:	f025 0503 	bic.w	r5, r5, #3
 8018d02:	3508      	adds	r5, #8
 8018d04:	2d0c      	cmp	r5, #12
 8018d06:	bf38      	it	cc
 8018d08:	250c      	movcc	r5, #12
 8018d0a:	2d00      	cmp	r5, #0
 8018d0c:	4607      	mov	r7, r0
 8018d0e:	db01      	blt.n	8018d14 <_malloc_r+0x1c>
 8018d10:	42a9      	cmp	r1, r5
 8018d12:	d905      	bls.n	8018d20 <_malloc_r+0x28>
 8018d14:	230c      	movs	r3, #12
 8018d16:	603b      	str	r3, [r7, #0]
 8018d18:	2600      	movs	r6, #0
 8018d1a:	4630      	mov	r0, r6
 8018d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018df4 <_malloc_r+0xfc>
 8018d24:	f000 f924 	bl	8018f70 <__malloc_lock>
 8018d28:	f8d8 3000 	ldr.w	r3, [r8]
 8018d2c:	461c      	mov	r4, r3
 8018d2e:	bb5c      	cbnz	r4, 8018d88 <_malloc_r+0x90>
 8018d30:	4629      	mov	r1, r5
 8018d32:	4638      	mov	r0, r7
 8018d34:	f7ff ffc0 	bl	8018cb8 <sbrk_aligned>
 8018d38:	1c43      	adds	r3, r0, #1
 8018d3a:	4604      	mov	r4, r0
 8018d3c:	d155      	bne.n	8018dea <_malloc_r+0xf2>
 8018d3e:	f8d8 4000 	ldr.w	r4, [r8]
 8018d42:	4626      	mov	r6, r4
 8018d44:	2e00      	cmp	r6, #0
 8018d46:	d145      	bne.n	8018dd4 <_malloc_r+0xdc>
 8018d48:	2c00      	cmp	r4, #0
 8018d4a:	d048      	beq.n	8018dde <_malloc_r+0xe6>
 8018d4c:	6823      	ldr	r3, [r4, #0]
 8018d4e:	4631      	mov	r1, r6
 8018d50:	4638      	mov	r0, r7
 8018d52:	eb04 0903 	add.w	r9, r4, r3
 8018d56:	f000 ffab 	bl	8019cb0 <_sbrk_r>
 8018d5a:	4581      	cmp	r9, r0
 8018d5c:	d13f      	bne.n	8018dde <_malloc_r+0xe6>
 8018d5e:	6821      	ldr	r1, [r4, #0]
 8018d60:	1a6d      	subs	r5, r5, r1
 8018d62:	4629      	mov	r1, r5
 8018d64:	4638      	mov	r0, r7
 8018d66:	f7ff ffa7 	bl	8018cb8 <sbrk_aligned>
 8018d6a:	3001      	adds	r0, #1
 8018d6c:	d037      	beq.n	8018dde <_malloc_r+0xe6>
 8018d6e:	6823      	ldr	r3, [r4, #0]
 8018d70:	442b      	add	r3, r5
 8018d72:	6023      	str	r3, [r4, #0]
 8018d74:	f8d8 3000 	ldr.w	r3, [r8]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d038      	beq.n	8018dee <_malloc_r+0xf6>
 8018d7c:	685a      	ldr	r2, [r3, #4]
 8018d7e:	42a2      	cmp	r2, r4
 8018d80:	d12b      	bne.n	8018dda <_malloc_r+0xe2>
 8018d82:	2200      	movs	r2, #0
 8018d84:	605a      	str	r2, [r3, #4]
 8018d86:	e00f      	b.n	8018da8 <_malloc_r+0xb0>
 8018d88:	6822      	ldr	r2, [r4, #0]
 8018d8a:	1b52      	subs	r2, r2, r5
 8018d8c:	d41f      	bmi.n	8018dce <_malloc_r+0xd6>
 8018d8e:	2a0b      	cmp	r2, #11
 8018d90:	d917      	bls.n	8018dc2 <_malloc_r+0xca>
 8018d92:	1961      	adds	r1, r4, r5
 8018d94:	42a3      	cmp	r3, r4
 8018d96:	6025      	str	r5, [r4, #0]
 8018d98:	bf18      	it	ne
 8018d9a:	6059      	strne	r1, [r3, #4]
 8018d9c:	6863      	ldr	r3, [r4, #4]
 8018d9e:	bf08      	it	eq
 8018da0:	f8c8 1000 	streq.w	r1, [r8]
 8018da4:	5162      	str	r2, [r4, r5]
 8018da6:	604b      	str	r3, [r1, #4]
 8018da8:	4638      	mov	r0, r7
 8018daa:	f104 060b 	add.w	r6, r4, #11
 8018dae:	f000 f8e5 	bl	8018f7c <__malloc_unlock>
 8018db2:	f026 0607 	bic.w	r6, r6, #7
 8018db6:	1d23      	adds	r3, r4, #4
 8018db8:	1af2      	subs	r2, r6, r3
 8018dba:	d0ae      	beq.n	8018d1a <_malloc_r+0x22>
 8018dbc:	1b9b      	subs	r3, r3, r6
 8018dbe:	50a3      	str	r3, [r4, r2]
 8018dc0:	e7ab      	b.n	8018d1a <_malloc_r+0x22>
 8018dc2:	42a3      	cmp	r3, r4
 8018dc4:	6862      	ldr	r2, [r4, #4]
 8018dc6:	d1dd      	bne.n	8018d84 <_malloc_r+0x8c>
 8018dc8:	f8c8 2000 	str.w	r2, [r8]
 8018dcc:	e7ec      	b.n	8018da8 <_malloc_r+0xb0>
 8018dce:	4623      	mov	r3, r4
 8018dd0:	6864      	ldr	r4, [r4, #4]
 8018dd2:	e7ac      	b.n	8018d2e <_malloc_r+0x36>
 8018dd4:	4634      	mov	r4, r6
 8018dd6:	6876      	ldr	r6, [r6, #4]
 8018dd8:	e7b4      	b.n	8018d44 <_malloc_r+0x4c>
 8018dda:	4613      	mov	r3, r2
 8018ddc:	e7cc      	b.n	8018d78 <_malloc_r+0x80>
 8018dde:	230c      	movs	r3, #12
 8018de0:	603b      	str	r3, [r7, #0]
 8018de2:	4638      	mov	r0, r7
 8018de4:	f000 f8ca 	bl	8018f7c <__malloc_unlock>
 8018de8:	e797      	b.n	8018d1a <_malloc_r+0x22>
 8018dea:	6025      	str	r5, [r4, #0]
 8018dec:	e7dc      	b.n	8018da8 <_malloc_r+0xb0>
 8018dee:	605b      	str	r3, [r3, #4]
 8018df0:	deff      	udf	#255	; 0xff
 8018df2:	bf00      	nop
 8018df4:	20001e48 	.word	0x20001e48

08018df8 <__ascii_mbtowc>:
 8018df8:	b082      	sub	sp, #8
 8018dfa:	b901      	cbnz	r1, 8018dfe <__ascii_mbtowc+0x6>
 8018dfc:	a901      	add	r1, sp, #4
 8018dfe:	b142      	cbz	r2, 8018e12 <__ascii_mbtowc+0x1a>
 8018e00:	b14b      	cbz	r3, 8018e16 <__ascii_mbtowc+0x1e>
 8018e02:	7813      	ldrb	r3, [r2, #0]
 8018e04:	600b      	str	r3, [r1, #0]
 8018e06:	7812      	ldrb	r2, [r2, #0]
 8018e08:	1e10      	subs	r0, r2, #0
 8018e0a:	bf18      	it	ne
 8018e0c:	2001      	movne	r0, #1
 8018e0e:	b002      	add	sp, #8
 8018e10:	4770      	bx	lr
 8018e12:	4610      	mov	r0, r2
 8018e14:	e7fb      	b.n	8018e0e <__ascii_mbtowc+0x16>
 8018e16:	f06f 0001 	mvn.w	r0, #1
 8018e1a:	e7f8      	b.n	8018e0e <__ascii_mbtowc+0x16>

08018e1c <__sflush_r>:
 8018e1c:	898a      	ldrh	r2, [r1, #12]
 8018e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e20:	4605      	mov	r5, r0
 8018e22:	0710      	lsls	r0, r2, #28
 8018e24:	460c      	mov	r4, r1
 8018e26:	d457      	bmi.n	8018ed8 <__sflush_r+0xbc>
 8018e28:	684b      	ldr	r3, [r1, #4]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	dc04      	bgt.n	8018e38 <__sflush_r+0x1c>
 8018e2e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	dc01      	bgt.n	8018e38 <__sflush_r+0x1c>
 8018e34:	2000      	movs	r0, #0
 8018e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018e3a:	2e00      	cmp	r6, #0
 8018e3c:	d0fa      	beq.n	8018e34 <__sflush_r+0x18>
 8018e3e:	2300      	movs	r3, #0
 8018e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018e44:	682f      	ldr	r7, [r5, #0]
 8018e46:	6a21      	ldr	r1, [r4, #32]
 8018e48:	602b      	str	r3, [r5, #0]
 8018e4a:	d032      	beq.n	8018eb2 <__sflush_r+0x96>
 8018e4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018e4e:	89a3      	ldrh	r3, [r4, #12]
 8018e50:	075a      	lsls	r2, r3, #29
 8018e52:	d505      	bpl.n	8018e60 <__sflush_r+0x44>
 8018e54:	6863      	ldr	r3, [r4, #4]
 8018e56:	1ac0      	subs	r0, r0, r3
 8018e58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018e5a:	b10b      	cbz	r3, 8018e60 <__sflush_r+0x44>
 8018e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018e5e:	1ac0      	subs	r0, r0, r3
 8018e60:	2300      	movs	r3, #0
 8018e62:	4602      	mov	r2, r0
 8018e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018e66:	6a21      	ldr	r1, [r4, #32]
 8018e68:	4628      	mov	r0, r5
 8018e6a:	47b0      	blx	r6
 8018e6c:	1c43      	adds	r3, r0, #1
 8018e6e:	89a3      	ldrh	r3, [r4, #12]
 8018e70:	d106      	bne.n	8018e80 <__sflush_r+0x64>
 8018e72:	6829      	ldr	r1, [r5, #0]
 8018e74:	291d      	cmp	r1, #29
 8018e76:	d82b      	bhi.n	8018ed0 <__sflush_r+0xb4>
 8018e78:	4a28      	ldr	r2, [pc, #160]	; (8018f1c <__sflush_r+0x100>)
 8018e7a:	410a      	asrs	r2, r1
 8018e7c:	07d6      	lsls	r6, r2, #31
 8018e7e:	d427      	bmi.n	8018ed0 <__sflush_r+0xb4>
 8018e80:	2200      	movs	r2, #0
 8018e82:	6062      	str	r2, [r4, #4]
 8018e84:	04d9      	lsls	r1, r3, #19
 8018e86:	6922      	ldr	r2, [r4, #16]
 8018e88:	6022      	str	r2, [r4, #0]
 8018e8a:	d504      	bpl.n	8018e96 <__sflush_r+0x7a>
 8018e8c:	1c42      	adds	r2, r0, #1
 8018e8e:	d101      	bne.n	8018e94 <__sflush_r+0x78>
 8018e90:	682b      	ldr	r3, [r5, #0]
 8018e92:	b903      	cbnz	r3, 8018e96 <__sflush_r+0x7a>
 8018e94:	6560      	str	r0, [r4, #84]	; 0x54
 8018e96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e98:	602f      	str	r7, [r5, #0]
 8018e9a:	2900      	cmp	r1, #0
 8018e9c:	d0ca      	beq.n	8018e34 <__sflush_r+0x18>
 8018e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ea2:	4299      	cmp	r1, r3
 8018ea4:	d002      	beq.n	8018eac <__sflush_r+0x90>
 8018ea6:	4628      	mov	r0, r5
 8018ea8:	f000 ff40 	bl	8019d2c <_free_r>
 8018eac:	2000      	movs	r0, #0
 8018eae:	6360      	str	r0, [r4, #52]	; 0x34
 8018eb0:	e7c1      	b.n	8018e36 <__sflush_r+0x1a>
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	4628      	mov	r0, r5
 8018eb6:	47b0      	blx	r6
 8018eb8:	1c41      	adds	r1, r0, #1
 8018eba:	d1c8      	bne.n	8018e4e <__sflush_r+0x32>
 8018ebc:	682b      	ldr	r3, [r5, #0]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d0c5      	beq.n	8018e4e <__sflush_r+0x32>
 8018ec2:	2b1d      	cmp	r3, #29
 8018ec4:	d001      	beq.n	8018eca <__sflush_r+0xae>
 8018ec6:	2b16      	cmp	r3, #22
 8018ec8:	d101      	bne.n	8018ece <__sflush_r+0xb2>
 8018eca:	602f      	str	r7, [r5, #0]
 8018ecc:	e7b2      	b.n	8018e34 <__sflush_r+0x18>
 8018ece:	89a3      	ldrh	r3, [r4, #12]
 8018ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ed4:	81a3      	strh	r3, [r4, #12]
 8018ed6:	e7ae      	b.n	8018e36 <__sflush_r+0x1a>
 8018ed8:	690f      	ldr	r7, [r1, #16]
 8018eda:	2f00      	cmp	r7, #0
 8018edc:	d0aa      	beq.n	8018e34 <__sflush_r+0x18>
 8018ede:	0793      	lsls	r3, r2, #30
 8018ee0:	680e      	ldr	r6, [r1, #0]
 8018ee2:	bf08      	it	eq
 8018ee4:	694b      	ldreq	r3, [r1, #20]
 8018ee6:	600f      	str	r7, [r1, #0]
 8018ee8:	bf18      	it	ne
 8018eea:	2300      	movne	r3, #0
 8018eec:	1bf6      	subs	r6, r6, r7
 8018eee:	608b      	str	r3, [r1, #8]
 8018ef0:	2e00      	cmp	r6, #0
 8018ef2:	dd9f      	ble.n	8018e34 <__sflush_r+0x18>
 8018ef4:	6a21      	ldr	r1, [r4, #32]
 8018ef6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8018efa:	4633      	mov	r3, r6
 8018efc:	463a      	mov	r2, r7
 8018efe:	4628      	mov	r0, r5
 8018f00:	47e0      	blx	ip
 8018f02:	2800      	cmp	r0, #0
 8018f04:	dc06      	bgt.n	8018f14 <__sflush_r+0xf8>
 8018f06:	89a3      	ldrh	r3, [r4, #12]
 8018f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f0c:	81a3      	strh	r3, [r4, #12]
 8018f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f12:	e790      	b.n	8018e36 <__sflush_r+0x1a>
 8018f14:	4407      	add	r7, r0
 8018f16:	1a36      	subs	r6, r6, r0
 8018f18:	e7ea      	b.n	8018ef0 <__sflush_r+0xd4>
 8018f1a:	bf00      	nop
 8018f1c:	dfbffffe 	.word	0xdfbffffe

08018f20 <_fflush_r>:
 8018f20:	b538      	push	{r3, r4, r5, lr}
 8018f22:	690b      	ldr	r3, [r1, #16]
 8018f24:	4605      	mov	r5, r0
 8018f26:	460c      	mov	r4, r1
 8018f28:	b913      	cbnz	r3, 8018f30 <_fflush_r+0x10>
 8018f2a:	2500      	movs	r5, #0
 8018f2c:	4628      	mov	r0, r5
 8018f2e:	bd38      	pop	{r3, r4, r5, pc}
 8018f30:	b118      	cbz	r0, 8018f3a <_fflush_r+0x1a>
 8018f32:	6a03      	ldr	r3, [r0, #32]
 8018f34:	b90b      	cbnz	r3, 8018f3a <_fflush_r+0x1a>
 8018f36:	f7fd fa9b 	bl	8016470 <__sinit>
 8018f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d0f3      	beq.n	8018f2a <_fflush_r+0xa>
 8018f42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018f44:	07d0      	lsls	r0, r2, #31
 8018f46:	d404      	bmi.n	8018f52 <_fflush_r+0x32>
 8018f48:	0599      	lsls	r1, r3, #22
 8018f4a:	d402      	bmi.n	8018f52 <_fflush_r+0x32>
 8018f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018f4e:	f7fe fa16 	bl	801737e <__retarget_lock_acquire_recursive>
 8018f52:	4628      	mov	r0, r5
 8018f54:	4621      	mov	r1, r4
 8018f56:	f7ff ff61 	bl	8018e1c <__sflush_r>
 8018f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018f5c:	07da      	lsls	r2, r3, #31
 8018f5e:	4605      	mov	r5, r0
 8018f60:	d4e4      	bmi.n	8018f2c <_fflush_r+0xc>
 8018f62:	89a3      	ldrh	r3, [r4, #12]
 8018f64:	059b      	lsls	r3, r3, #22
 8018f66:	d4e1      	bmi.n	8018f2c <_fflush_r+0xc>
 8018f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018f6a:	f7fe fa09 	bl	8017380 <__retarget_lock_release_recursive>
 8018f6e:	e7dd      	b.n	8018f2c <_fflush_r+0xc>

08018f70 <__malloc_lock>:
 8018f70:	4801      	ldr	r0, [pc, #4]	; (8018f78 <__malloc_lock+0x8>)
 8018f72:	f7fe ba04 	b.w	801737e <__retarget_lock_acquire_recursive>
 8018f76:	bf00      	nop
 8018f78:	20001e44 	.word	0x20001e44

08018f7c <__malloc_unlock>:
 8018f7c:	4801      	ldr	r0, [pc, #4]	; (8018f84 <__malloc_unlock+0x8>)
 8018f7e:	f7fe b9ff 	b.w	8017380 <__retarget_lock_release_recursive>
 8018f82:	bf00      	nop
 8018f84:	20001e44 	.word	0x20001e44

08018f88 <_Balloc>:
 8018f88:	b570      	push	{r4, r5, r6, lr}
 8018f8a:	69c6      	ldr	r6, [r0, #28]
 8018f8c:	4604      	mov	r4, r0
 8018f8e:	460d      	mov	r5, r1
 8018f90:	b976      	cbnz	r6, 8018fb0 <_Balloc+0x28>
 8018f92:	2010      	movs	r0, #16
 8018f94:	f7ff fe88 	bl	8018ca8 <malloc>
 8018f98:	4602      	mov	r2, r0
 8018f9a:	61e0      	str	r0, [r4, #28]
 8018f9c:	b920      	cbnz	r0, 8018fa8 <_Balloc+0x20>
 8018f9e:	4b18      	ldr	r3, [pc, #96]	; (8019000 <_Balloc+0x78>)
 8018fa0:	4818      	ldr	r0, [pc, #96]	; (8019004 <_Balloc+0x7c>)
 8018fa2:	216b      	movs	r1, #107	; 0x6b
 8018fa4:	f7fe fa06 	bl	80173b4 <__assert_func>
 8018fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018fac:	6006      	str	r6, [r0, #0]
 8018fae:	60c6      	str	r6, [r0, #12]
 8018fb0:	69e6      	ldr	r6, [r4, #28]
 8018fb2:	68f3      	ldr	r3, [r6, #12]
 8018fb4:	b183      	cbz	r3, 8018fd8 <_Balloc+0x50>
 8018fb6:	69e3      	ldr	r3, [r4, #28]
 8018fb8:	68db      	ldr	r3, [r3, #12]
 8018fba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018fbe:	b9b8      	cbnz	r0, 8018ff0 <_Balloc+0x68>
 8018fc0:	2101      	movs	r1, #1
 8018fc2:	fa01 f605 	lsl.w	r6, r1, r5
 8018fc6:	1d72      	adds	r2, r6, #5
 8018fc8:	0092      	lsls	r2, r2, #2
 8018fca:	4620      	mov	r0, r4
 8018fcc:	f000 fe99 	bl	8019d02 <_calloc_r>
 8018fd0:	b160      	cbz	r0, 8018fec <_Balloc+0x64>
 8018fd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018fd6:	e00e      	b.n	8018ff6 <_Balloc+0x6e>
 8018fd8:	2221      	movs	r2, #33	; 0x21
 8018fda:	2104      	movs	r1, #4
 8018fdc:	4620      	mov	r0, r4
 8018fde:	f000 fe90 	bl	8019d02 <_calloc_r>
 8018fe2:	69e3      	ldr	r3, [r4, #28]
 8018fe4:	60f0      	str	r0, [r6, #12]
 8018fe6:	68db      	ldr	r3, [r3, #12]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d1e4      	bne.n	8018fb6 <_Balloc+0x2e>
 8018fec:	2000      	movs	r0, #0
 8018fee:	bd70      	pop	{r4, r5, r6, pc}
 8018ff0:	6802      	ldr	r2, [r0, #0]
 8018ff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ffc:	e7f7      	b.n	8018fee <_Balloc+0x66>
 8018ffe:	bf00      	nop
 8019000:	0801b28a 	.word	0x0801b28a
 8019004:	0801b37b 	.word	0x0801b37b

08019008 <_Bfree>:
 8019008:	b570      	push	{r4, r5, r6, lr}
 801900a:	69c6      	ldr	r6, [r0, #28]
 801900c:	4605      	mov	r5, r0
 801900e:	460c      	mov	r4, r1
 8019010:	b976      	cbnz	r6, 8019030 <_Bfree+0x28>
 8019012:	2010      	movs	r0, #16
 8019014:	f7ff fe48 	bl	8018ca8 <malloc>
 8019018:	4602      	mov	r2, r0
 801901a:	61e8      	str	r0, [r5, #28]
 801901c:	b920      	cbnz	r0, 8019028 <_Bfree+0x20>
 801901e:	4b09      	ldr	r3, [pc, #36]	; (8019044 <_Bfree+0x3c>)
 8019020:	4809      	ldr	r0, [pc, #36]	; (8019048 <_Bfree+0x40>)
 8019022:	218f      	movs	r1, #143	; 0x8f
 8019024:	f7fe f9c6 	bl	80173b4 <__assert_func>
 8019028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801902c:	6006      	str	r6, [r0, #0]
 801902e:	60c6      	str	r6, [r0, #12]
 8019030:	b13c      	cbz	r4, 8019042 <_Bfree+0x3a>
 8019032:	69eb      	ldr	r3, [r5, #28]
 8019034:	6862      	ldr	r2, [r4, #4]
 8019036:	68db      	ldr	r3, [r3, #12]
 8019038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801903c:	6021      	str	r1, [r4, #0]
 801903e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019042:	bd70      	pop	{r4, r5, r6, pc}
 8019044:	0801b28a 	.word	0x0801b28a
 8019048:	0801b37b 	.word	0x0801b37b

0801904c <__multadd>:
 801904c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019050:	690d      	ldr	r5, [r1, #16]
 8019052:	4607      	mov	r7, r0
 8019054:	460c      	mov	r4, r1
 8019056:	461e      	mov	r6, r3
 8019058:	f101 0c14 	add.w	ip, r1, #20
 801905c:	2000      	movs	r0, #0
 801905e:	f8dc 3000 	ldr.w	r3, [ip]
 8019062:	b299      	uxth	r1, r3
 8019064:	fb02 6101 	mla	r1, r2, r1, r6
 8019068:	0c1e      	lsrs	r6, r3, #16
 801906a:	0c0b      	lsrs	r3, r1, #16
 801906c:	fb02 3306 	mla	r3, r2, r6, r3
 8019070:	b289      	uxth	r1, r1
 8019072:	3001      	adds	r0, #1
 8019074:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019078:	4285      	cmp	r5, r0
 801907a:	f84c 1b04 	str.w	r1, [ip], #4
 801907e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019082:	dcec      	bgt.n	801905e <__multadd+0x12>
 8019084:	b30e      	cbz	r6, 80190ca <__multadd+0x7e>
 8019086:	68a3      	ldr	r3, [r4, #8]
 8019088:	42ab      	cmp	r3, r5
 801908a:	dc19      	bgt.n	80190c0 <__multadd+0x74>
 801908c:	6861      	ldr	r1, [r4, #4]
 801908e:	4638      	mov	r0, r7
 8019090:	3101      	adds	r1, #1
 8019092:	f7ff ff79 	bl	8018f88 <_Balloc>
 8019096:	4680      	mov	r8, r0
 8019098:	b928      	cbnz	r0, 80190a6 <__multadd+0x5a>
 801909a:	4602      	mov	r2, r0
 801909c:	4b0c      	ldr	r3, [pc, #48]	; (80190d0 <__multadd+0x84>)
 801909e:	480d      	ldr	r0, [pc, #52]	; (80190d4 <__multadd+0x88>)
 80190a0:	21ba      	movs	r1, #186	; 0xba
 80190a2:	f7fe f987 	bl	80173b4 <__assert_func>
 80190a6:	6922      	ldr	r2, [r4, #16]
 80190a8:	3202      	adds	r2, #2
 80190aa:	f104 010c 	add.w	r1, r4, #12
 80190ae:	0092      	lsls	r2, r2, #2
 80190b0:	300c      	adds	r0, #12
 80190b2:	f7fe f966 	bl	8017382 <memcpy>
 80190b6:	4621      	mov	r1, r4
 80190b8:	4638      	mov	r0, r7
 80190ba:	f7ff ffa5 	bl	8019008 <_Bfree>
 80190be:	4644      	mov	r4, r8
 80190c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80190c4:	3501      	adds	r5, #1
 80190c6:	615e      	str	r6, [r3, #20]
 80190c8:	6125      	str	r5, [r4, #16]
 80190ca:	4620      	mov	r0, r4
 80190cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190d0:	0801b2f9 	.word	0x0801b2f9
 80190d4:	0801b37b 	.word	0x0801b37b

080190d8 <__s2b>:
 80190d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190dc:	460c      	mov	r4, r1
 80190de:	4615      	mov	r5, r2
 80190e0:	461f      	mov	r7, r3
 80190e2:	2209      	movs	r2, #9
 80190e4:	3308      	adds	r3, #8
 80190e6:	4606      	mov	r6, r0
 80190e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80190ec:	2100      	movs	r1, #0
 80190ee:	2201      	movs	r2, #1
 80190f0:	429a      	cmp	r2, r3
 80190f2:	db09      	blt.n	8019108 <__s2b+0x30>
 80190f4:	4630      	mov	r0, r6
 80190f6:	f7ff ff47 	bl	8018f88 <_Balloc>
 80190fa:	b940      	cbnz	r0, 801910e <__s2b+0x36>
 80190fc:	4602      	mov	r2, r0
 80190fe:	4b19      	ldr	r3, [pc, #100]	; (8019164 <__s2b+0x8c>)
 8019100:	4819      	ldr	r0, [pc, #100]	; (8019168 <__s2b+0x90>)
 8019102:	21d3      	movs	r1, #211	; 0xd3
 8019104:	f7fe f956 	bl	80173b4 <__assert_func>
 8019108:	0052      	lsls	r2, r2, #1
 801910a:	3101      	adds	r1, #1
 801910c:	e7f0      	b.n	80190f0 <__s2b+0x18>
 801910e:	9b08      	ldr	r3, [sp, #32]
 8019110:	6143      	str	r3, [r0, #20]
 8019112:	2d09      	cmp	r5, #9
 8019114:	f04f 0301 	mov.w	r3, #1
 8019118:	6103      	str	r3, [r0, #16]
 801911a:	dd16      	ble.n	801914a <__s2b+0x72>
 801911c:	f104 0909 	add.w	r9, r4, #9
 8019120:	46c8      	mov	r8, r9
 8019122:	442c      	add	r4, r5
 8019124:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019128:	4601      	mov	r1, r0
 801912a:	3b30      	subs	r3, #48	; 0x30
 801912c:	220a      	movs	r2, #10
 801912e:	4630      	mov	r0, r6
 8019130:	f7ff ff8c 	bl	801904c <__multadd>
 8019134:	45a0      	cmp	r8, r4
 8019136:	d1f5      	bne.n	8019124 <__s2b+0x4c>
 8019138:	f1a5 0408 	sub.w	r4, r5, #8
 801913c:	444c      	add	r4, r9
 801913e:	1b2d      	subs	r5, r5, r4
 8019140:	1963      	adds	r3, r4, r5
 8019142:	42bb      	cmp	r3, r7
 8019144:	db04      	blt.n	8019150 <__s2b+0x78>
 8019146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801914a:	340a      	adds	r4, #10
 801914c:	2509      	movs	r5, #9
 801914e:	e7f6      	b.n	801913e <__s2b+0x66>
 8019150:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019154:	4601      	mov	r1, r0
 8019156:	3b30      	subs	r3, #48	; 0x30
 8019158:	220a      	movs	r2, #10
 801915a:	4630      	mov	r0, r6
 801915c:	f7ff ff76 	bl	801904c <__multadd>
 8019160:	e7ee      	b.n	8019140 <__s2b+0x68>
 8019162:	bf00      	nop
 8019164:	0801b2f9 	.word	0x0801b2f9
 8019168:	0801b37b 	.word	0x0801b37b

0801916c <__hi0bits>:
 801916c:	0c02      	lsrs	r2, r0, #16
 801916e:	0412      	lsls	r2, r2, #16
 8019170:	4603      	mov	r3, r0
 8019172:	b9ca      	cbnz	r2, 80191a8 <__hi0bits+0x3c>
 8019174:	0403      	lsls	r3, r0, #16
 8019176:	2010      	movs	r0, #16
 8019178:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801917c:	bf04      	itt	eq
 801917e:	021b      	lsleq	r3, r3, #8
 8019180:	3008      	addeq	r0, #8
 8019182:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019186:	bf04      	itt	eq
 8019188:	011b      	lsleq	r3, r3, #4
 801918a:	3004      	addeq	r0, #4
 801918c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019190:	bf04      	itt	eq
 8019192:	009b      	lsleq	r3, r3, #2
 8019194:	3002      	addeq	r0, #2
 8019196:	2b00      	cmp	r3, #0
 8019198:	db05      	blt.n	80191a6 <__hi0bits+0x3a>
 801919a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801919e:	f100 0001 	add.w	r0, r0, #1
 80191a2:	bf08      	it	eq
 80191a4:	2020      	moveq	r0, #32
 80191a6:	4770      	bx	lr
 80191a8:	2000      	movs	r0, #0
 80191aa:	e7e5      	b.n	8019178 <__hi0bits+0xc>

080191ac <__lo0bits>:
 80191ac:	6803      	ldr	r3, [r0, #0]
 80191ae:	4602      	mov	r2, r0
 80191b0:	f013 0007 	ands.w	r0, r3, #7
 80191b4:	d00b      	beq.n	80191ce <__lo0bits+0x22>
 80191b6:	07d9      	lsls	r1, r3, #31
 80191b8:	d421      	bmi.n	80191fe <__lo0bits+0x52>
 80191ba:	0798      	lsls	r0, r3, #30
 80191bc:	bf49      	itett	mi
 80191be:	085b      	lsrmi	r3, r3, #1
 80191c0:	089b      	lsrpl	r3, r3, #2
 80191c2:	2001      	movmi	r0, #1
 80191c4:	6013      	strmi	r3, [r2, #0]
 80191c6:	bf5c      	itt	pl
 80191c8:	6013      	strpl	r3, [r2, #0]
 80191ca:	2002      	movpl	r0, #2
 80191cc:	4770      	bx	lr
 80191ce:	b299      	uxth	r1, r3
 80191d0:	b909      	cbnz	r1, 80191d6 <__lo0bits+0x2a>
 80191d2:	0c1b      	lsrs	r3, r3, #16
 80191d4:	2010      	movs	r0, #16
 80191d6:	b2d9      	uxtb	r1, r3
 80191d8:	b909      	cbnz	r1, 80191de <__lo0bits+0x32>
 80191da:	3008      	adds	r0, #8
 80191dc:	0a1b      	lsrs	r3, r3, #8
 80191de:	0719      	lsls	r1, r3, #28
 80191e0:	bf04      	itt	eq
 80191e2:	091b      	lsreq	r3, r3, #4
 80191e4:	3004      	addeq	r0, #4
 80191e6:	0799      	lsls	r1, r3, #30
 80191e8:	bf04      	itt	eq
 80191ea:	089b      	lsreq	r3, r3, #2
 80191ec:	3002      	addeq	r0, #2
 80191ee:	07d9      	lsls	r1, r3, #31
 80191f0:	d403      	bmi.n	80191fa <__lo0bits+0x4e>
 80191f2:	085b      	lsrs	r3, r3, #1
 80191f4:	f100 0001 	add.w	r0, r0, #1
 80191f8:	d003      	beq.n	8019202 <__lo0bits+0x56>
 80191fa:	6013      	str	r3, [r2, #0]
 80191fc:	4770      	bx	lr
 80191fe:	2000      	movs	r0, #0
 8019200:	4770      	bx	lr
 8019202:	2020      	movs	r0, #32
 8019204:	4770      	bx	lr
	...

08019208 <__i2b>:
 8019208:	b510      	push	{r4, lr}
 801920a:	460c      	mov	r4, r1
 801920c:	2101      	movs	r1, #1
 801920e:	f7ff febb 	bl	8018f88 <_Balloc>
 8019212:	4602      	mov	r2, r0
 8019214:	b928      	cbnz	r0, 8019222 <__i2b+0x1a>
 8019216:	4b05      	ldr	r3, [pc, #20]	; (801922c <__i2b+0x24>)
 8019218:	4805      	ldr	r0, [pc, #20]	; (8019230 <__i2b+0x28>)
 801921a:	f240 1145 	movw	r1, #325	; 0x145
 801921e:	f7fe f8c9 	bl	80173b4 <__assert_func>
 8019222:	2301      	movs	r3, #1
 8019224:	6144      	str	r4, [r0, #20]
 8019226:	6103      	str	r3, [r0, #16]
 8019228:	bd10      	pop	{r4, pc}
 801922a:	bf00      	nop
 801922c:	0801b2f9 	.word	0x0801b2f9
 8019230:	0801b37b 	.word	0x0801b37b

08019234 <__multiply>:
 8019234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019238:	4691      	mov	r9, r2
 801923a:	690a      	ldr	r2, [r1, #16]
 801923c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019240:	429a      	cmp	r2, r3
 8019242:	bfb8      	it	lt
 8019244:	460b      	movlt	r3, r1
 8019246:	460c      	mov	r4, r1
 8019248:	bfbc      	itt	lt
 801924a:	464c      	movlt	r4, r9
 801924c:	4699      	movlt	r9, r3
 801924e:	6927      	ldr	r7, [r4, #16]
 8019250:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019254:	68a3      	ldr	r3, [r4, #8]
 8019256:	6861      	ldr	r1, [r4, #4]
 8019258:	eb07 060a 	add.w	r6, r7, sl
 801925c:	42b3      	cmp	r3, r6
 801925e:	b085      	sub	sp, #20
 8019260:	bfb8      	it	lt
 8019262:	3101      	addlt	r1, #1
 8019264:	f7ff fe90 	bl	8018f88 <_Balloc>
 8019268:	b930      	cbnz	r0, 8019278 <__multiply+0x44>
 801926a:	4602      	mov	r2, r0
 801926c:	4b44      	ldr	r3, [pc, #272]	; (8019380 <__multiply+0x14c>)
 801926e:	4845      	ldr	r0, [pc, #276]	; (8019384 <__multiply+0x150>)
 8019270:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019274:	f7fe f89e 	bl	80173b4 <__assert_func>
 8019278:	f100 0514 	add.w	r5, r0, #20
 801927c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019280:	462b      	mov	r3, r5
 8019282:	2200      	movs	r2, #0
 8019284:	4543      	cmp	r3, r8
 8019286:	d321      	bcc.n	80192cc <__multiply+0x98>
 8019288:	f104 0314 	add.w	r3, r4, #20
 801928c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019290:	f109 0314 	add.w	r3, r9, #20
 8019294:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019298:	9202      	str	r2, [sp, #8]
 801929a:	1b3a      	subs	r2, r7, r4
 801929c:	3a15      	subs	r2, #21
 801929e:	f022 0203 	bic.w	r2, r2, #3
 80192a2:	3204      	adds	r2, #4
 80192a4:	f104 0115 	add.w	r1, r4, #21
 80192a8:	428f      	cmp	r7, r1
 80192aa:	bf38      	it	cc
 80192ac:	2204      	movcc	r2, #4
 80192ae:	9201      	str	r2, [sp, #4]
 80192b0:	9a02      	ldr	r2, [sp, #8]
 80192b2:	9303      	str	r3, [sp, #12]
 80192b4:	429a      	cmp	r2, r3
 80192b6:	d80c      	bhi.n	80192d2 <__multiply+0x9e>
 80192b8:	2e00      	cmp	r6, #0
 80192ba:	dd03      	ble.n	80192c4 <__multiply+0x90>
 80192bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d05a      	beq.n	801937a <__multiply+0x146>
 80192c4:	6106      	str	r6, [r0, #16]
 80192c6:	b005      	add	sp, #20
 80192c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192cc:	f843 2b04 	str.w	r2, [r3], #4
 80192d0:	e7d8      	b.n	8019284 <__multiply+0x50>
 80192d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80192d6:	f1ba 0f00 	cmp.w	sl, #0
 80192da:	d023      	beq.n	8019324 <__multiply+0xf0>
 80192dc:	f104 0e14 	add.w	lr, r4, #20
 80192e0:	46a9      	mov	r9, r5
 80192e2:	f04f 0c00 	mov.w	ip, #0
 80192e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80192ea:	f8d9 1000 	ldr.w	r1, [r9]
 80192ee:	fa1f fb82 	uxth.w	fp, r2
 80192f2:	b289      	uxth	r1, r1
 80192f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80192f8:	4461      	add	r1, ip
 80192fa:	f8d9 c000 	ldr.w	ip, [r9]
 80192fe:	0c12      	lsrs	r2, r2, #16
 8019300:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019304:	fb0a c202 	mla	r2, sl, r2, ip
 8019308:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801930c:	b289      	uxth	r1, r1
 801930e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019312:	4577      	cmp	r7, lr
 8019314:	f849 1b04 	str.w	r1, [r9], #4
 8019318:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801931c:	d8e3      	bhi.n	80192e6 <__multiply+0xb2>
 801931e:	9a01      	ldr	r2, [sp, #4]
 8019320:	f845 c002 	str.w	ip, [r5, r2]
 8019324:	9a03      	ldr	r2, [sp, #12]
 8019326:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801932a:	3304      	adds	r3, #4
 801932c:	f1b9 0f00 	cmp.w	r9, #0
 8019330:	d021      	beq.n	8019376 <__multiply+0x142>
 8019332:	6829      	ldr	r1, [r5, #0]
 8019334:	f104 0c14 	add.w	ip, r4, #20
 8019338:	46ae      	mov	lr, r5
 801933a:	f04f 0a00 	mov.w	sl, #0
 801933e:	f8bc b000 	ldrh.w	fp, [ip]
 8019342:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019346:	fb09 220b 	mla	r2, r9, fp, r2
 801934a:	4452      	add	r2, sl
 801934c:	b289      	uxth	r1, r1
 801934e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019352:	f84e 1b04 	str.w	r1, [lr], #4
 8019356:	f85c 1b04 	ldr.w	r1, [ip], #4
 801935a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801935e:	f8be 1000 	ldrh.w	r1, [lr]
 8019362:	fb09 110a 	mla	r1, r9, sl, r1
 8019366:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801936a:	4567      	cmp	r7, ip
 801936c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019370:	d8e5      	bhi.n	801933e <__multiply+0x10a>
 8019372:	9a01      	ldr	r2, [sp, #4]
 8019374:	50a9      	str	r1, [r5, r2]
 8019376:	3504      	adds	r5, #4
 8019378:	e79a      	b.n	80192b0 <__multiply+0x7c>
 801937a:	3e01      	subs	r6, #1
 801937c:	e79c      	b.n	80192b8 <__multiply+0x84>
 801937e:	bf00      	nop
 8019380:	0801b2f9 	.word	0x0801b2f9
 8019384:	0801b37b 	.word	0x0801b37b

08019388 <__pow5mult>:
 8019388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801938c:	4615      	mov	r5, r2
 801938e:	f012 0203 	ands.w	r2, r2, #3
 8019392:	4606      	mov	r6, r0
 8019394:	460f      	mov	r7, r1
 8019396:	d007      	beq.n	80193a8 <__pow5mult+0x20>
 8019398:	4c25      	ldr	r4, [pc, #148]	; (8019430 <__pow5mult+0xa8>)
 801939a:	3a01      	subs	r2, #1
 801939c:	2300      	movs	r3, #0
 801939e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80193a2:	f7ff fe53 	bl	801904c <__multadd>
 80193a6:	4607      	mov	r7, r0
 80193a8:	10ad      	asrs	r5, r5, #2
 80193aa:	d03d      	beq.n	8019428 <__pow5mult+0xa0>
 80193ac:	69f4      	ldr	r4, [r6, #28]
 80193ae:	b97c      	cbnz	r4, 80193d0 <__pow5mult+0x48>
 80193b0:	2010      	movs	r0, #16
 80193b2:	f7ff fc79 	bl	8018ca8 <malloc>
 80193b6:	4602      	mov	r2, r0
 80193b8:	61f0      	str	r0, [r6, #28]
 80193ba:	b928      	cbnz	r0, 80193c8 <__pow5mult+0x40>
 80193bc:	4b1d      	ldr	r3, [pc, #116]	; (8019434 <__pow5mult+0xac>)
 80193be:	481e      	ldr	r0, [pc, #120]	; (8019438 <__pow5mult+0xb0>)
 80193c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80193c4:	f7fd fff6 	bl	80173b4 <__assert_func>
 80193c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80193cc:	6004      	str	r4, [r0, #0]
 80193ce:	60c4      	str	r4, [r0, #12]
 80193d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80193d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80193d8:	b94c      	cbnz	r4, 80193ee <__pow5mult+0x66>
 80193da:	f240 2171 	movw	r1, #625	; 0x271
 80193de:	4630      	mov	r0, r6
 80193e0:	f7ff ff12 	bl	8019208 <__i2b>
 80193e4:	2300      	movs	r3, #0
 80193e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80193ea:	4604      	mov	r4, r0
 80193ec:	6003      	str	r3, [r0, #0]
 80193ee:	f04f 0900 	mov.w	r9, #0
 80193f2:	07eb      	lsls	r3, r5, #31
 80193f4:	d50a      	bpl.n	801940c <__pow5mult+0x84>
 80193f6:	4639      	mov	r1, r7
 80193f8:	4622      	mov	r2, r4
 80193fa:	4630      	mov	r0, r6
 80193fc:	f7ff ff1a 	bl	8019234 <__multiply>
 8019400:	4639      	mov	r1, r7
 8019402:	4680      	mov	r8, r0
 8019404:	4630      	mov	r0, r6
 8019406:	f7ff fdff 	bl	8019008 <_Bfree>
 801940a:	4647      	mov	r7, r8
 801940c:	106d      	asrs	r5, r5, #1
 801940e:	d00b      	beq.n	8019428 <__pow5mult+0xa0>
 8019410:	6820      	ldr	r0, [r4, #0]
 8019412:	b938      	cbnz	r0, 8019424 <__pow5mult+0x9c>
 8019414:	4622      	mov	r2, r4
 8019416:	4621      	mov	r1, r4
 8019418:	4630      	mov	r0, r6
 801941a:	f7ff ff0b 	bl	8019234 <__multiply>
 801941e:	6020      	str	r0, [r4, #0]
 8019420:	f8c0 9000 	str.w	r9, [r0]
 8019424:	4604      	mov	r4, r0
 8019426:	e7e4      	b.n	80193f2 <__pow5mult+0x6a>
 8019428:	4638      	mov	r0, r7
 801942a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801942e:	bf00      	nop
 8019430:	0801b4c8 	.word	0x0801b4c8
 8019434:	0801b28a 	.word	0x0801b28a
 8019438:	0801b37b 	.word	0x0801b37b

0801943c <__lshift>:
 801943c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019440:	460c      	mov	r4, r1
 8019442:	6849      	ldr	r1, [r1, #4]
 8019444:	6923      	ldr	r3, [r4, #16]
 8019446:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801944a:	68a3      	ldr	r3, [r4, #8]
 801944c:	4607      	mov	r7, r0
 801944e:	4691      	mov	r9, r2
 8019450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019454:	f108 0601 	add.w	r6, r8, #1
 8019458:	42b3      	cmp	r3, r6
 801945a:	db0b      	blt.n	8019474 <__lshift+0x38>
 801945c:	4638      	mov	r0, r7
 801945e:	f7ff fd93 	bl	8018f88 <_Balloc>
 8019462:	4605      	mov	r5, r0
 8019464:	b948      	cbnz	r0, 801947a <__lshift+0x3e>
 8019466:	4602      	mov	r2, r0
 8019468:	4b28      	ldr	r3, [pc, #160]	; (801950c <__lshift+0xd0>)
 801946a:	4829      	ldr	r0, [pc, #164]	; (8019510 <__lshift+0xd4>)
 801946c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019470:	f7fd ffa0 	bl	80173b4 <__assert_func>
 8019474:	3101      	adds	r1, #1
 8019476:	005b      	lsls	r3, r3, #1
 8019478:	e7ee      	b.n	8019458 <__lshift+0x1c>
 801947a:	2300      	movs	r3, #0
 801947c:	f100 0114 	add.w	r1, r0, #20
 8019480:	f100 0210 	add.w	r2, r0, #16
 8019484:	4618      	mov	r0, r3
 8019486:	4553      	cmp	r3, sl
 8019488:	db33      	blt.n	80194f2 <__lshift+0xb6>
 801948a:	6920      	ldr	r0, [r4, #16]
 801948c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019490:	f104 0314 	add.w	r3, r4, #20
 8019494:	f019 091f 	ands.w	r9, r9, #31
 8019498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801949c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80194a0:	d02b      	beq.n	80194fa <__lshift+0xbe>
 80194a2:	f1c9 0e20 	rsb	lr, r9, #32
 80194a6:	468a      	mov	sl, r1
 80194a8:	2200      	movs	r2, #0
 80194aa:	6818      	ldr	r0, [r3, #0]
 80194ac:	fa00 f009 	lsl.w	r0, r0, r9
 80194b0:	4310      	orrs	r0, r2
 80194b2:	f84a 0b04 	str.w	r0, [sl], #4
 80194b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80194ba:	459c      	cmp	ip, r3
 80194bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80194c0:	d8f3      	bhi.n	80194aa <__lshift+0x6e>
 80194c2:	ebac 0304 	sub.w	r3, ip, r4
 80194c6:	3b15      	subs	r3, #21
 80194c8:	f023 0303 	bic.w	r3, r3, #3
 80194cc:	3304      	adds	r3, #4
 80194ce:	f104 0015 	add.w	r0, r4, #21
 80194d2:	4584      	cmp	ip, r0
 80194d4:	bf38      	it	cc
 80194d6:	2304      	movcc	r3, #4
 80194d8:	50ca      	str	r2, [r1, r3]
 80194da:	b10a      	cbz	r2, 80194e0 <__lshift+0xa4>
 80194dc:	f108 0602 	add.w	r6, r8, #2
 80194e0:	3e01      	subs	r6, #1
 80194e2:	4638      	mov	r0, r7
 80194e4:	612e      	str	r6, [r5, #16]
 80194e6:	4621      	mov	r1, r4
 80194e8:	f7ff fd8e 	bl	8019008 <_Bfree>
 80194ec:	4628      	mov	r0, r5
 80194ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80194f6:	3301      	adds	r3, #1
 80194f8:	e7c5      	b.n	8019486 <__lshift+0x4a>
 80194fa:	3904      	subs	r1, #4
 80194fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8019500:	f841 2f04 	str.w	r2, [r1, #4]!
 8019504:	459c      	cmp	ip, r3
 8019506:	d8f9      	bhi.n	80194fc <__lshift+0xc0>
 8019508:	e7ea      	b.n	80194e0 <__lshift+0xa4>
 801950a:	bf00      	nop
 801950c:	0801b2f9 	.word	0x0801b2f9
 8019510:	0801b37b 	.word	0x0801b37b

08019514 <__mcmp>:
 8019514:	690a      	ldr	r2, [r1, #16]
 8019516:	4603      	mov	r3, r0
 8019518:	6900      	ldr	r0, [r0, #16]
 801951a:	1a80      	subs	r0, r0, r2
 801951c:	b530      	push	{r4, r5, lr}
 801951e:	d10d      	bne.n	801953c <__mcmp+0x28>
 8019520:	3314      	adds	r3, #20
 8019522:	3114      	adds	r1, #20
 8019524:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019528:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801952c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019530:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019534:	4295      	cmp	r5, r2
 8019536:	d002      	beq.n	801953e <__mcmp+0x2a>
 8019538:	d304      	bcc.n	8019544 <__mcmp+0x30>
 801953a:	2001      	movs	r0, #1
 801953c:	bd30      	pop	{r4, r5, pc}
 801953e:	42a3      	cmp	r3, r4
 8019540:	d3f4      	bcc.n	801952c <__mcmp+0x18>
 8019542:	e7fb      	b.n	801953c <__mcmp+0x28>
 8019544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019548:	e7f8      	b.n	801953c <__mcmp+0x28>
	...

0801954c <__mdiff>:
 801954c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019550:	460d      	mov	r5, r1
 8019552:	4607      	mov	r7, r0
 8019554:	4611      	mov	r1, r2
 8019556:	4628      	mov	r0, r5
 8019558:	4614      	mov	r4, r2
 801955a:	f7ff ffdb 	bl	8019514 <__mcmp>
 801955e:	1e06      	subs	r6, r0, #0
 8019560:	d111      	bne.n	8019586 <__mdiff+0x3a>
 8019562:	4631      	mov	r1, r6
 8019564:	4638      	mov	r0, r7
 8019566:	f7ff fd0f 	bl	8018f88 <_Balloc>
 801956a:	4602      	mov	r2, r0
 801956c:	b928      	cbnz	r0, 801957a <__mdiff+0x2e>
 801956e:	4b39      	ldr	r3, [pc, #228]	; (8019654 <__mdiff+0x108>)
 8019570:	f240 2137 	movw	r1, #567	; 0x237
 8019574:	4838      	ldr	r0, [pc, #224]	; (8019658 <__mdiff+0x10c>)
 8019576:	f7fd ff1d 	bl	80173b4 <__assert_func>
 801957a:	2301      	movs	r3, #1
 801957c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8019580:	4610      	mov	r0, r2
 8019582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019586:	bfa4      	itt	ge
 8019588:	4623      	movge	r3, r4
 801958a:	462c      	movge	r4, r5
 801958c:	4638      	mov	r0, r7
 801958e:	6861      	ldr	r1, [r4, #4]
 8019590:	bfa6      	itte	ge
 8019592:	461d      	movge	r5, r3
 8019594:	2600      	movge	r6, #0
 8019596:	2601      	movlt	r6, #1
 8019598:	f7ff fcf6 	bl	8018f88 <_Balloc>
 801959c:	4602      	mov	r2, r0
 801959e:	b918      	cbnz	r0, 80195a8 <__mdiff+0x5c>
 80195a0:	4b2c      	ldr	r3, [pc, #176]	; (8019654 <__mdiff+0x108>)
 80195a2:	f240 2145 	movw	r1, #581	; 0x245
 80195a6:	e7e5      	b.n	8019574 <__mdiff+0x28>
 80195a8:	6927      	ldr	r7, [r4, #16]
 80195aa:	60c6      	str	r6, [r0, #12]
 80195ac:	692e      	ldr	r6, [r5, #16]
 80195ae:	f104 0014 	add.w	r0, r4, #20
 80195b2:	f105 0914 	add.w	r9, r5, #20
 80195b6:	f102 0e14 	add.w	lr, r2, #20
 80195ba:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80195be:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80195c2:	3410      	adds	r4, #16
 80195c4:	46f2      	mov	sl, lr
 80195c6:	2100      	movs	r1, #0
 80195c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80195cc:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80195d0:	fa11 f88b 	uxtah	r8, r1, fp
 80195d4:	b299      	uxth	r1, r3
 80195d6:	0c1b      	lsrs	r3, r3, #16
 80195d8:	eba8 0801 	sub.w	r8, r8, r1
 80195dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80195e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80195e4:	fa1f f888 	uxth.w	r8, r8
 80195e8:	1419      	asrs	r1, r3, #16
 80195ea:	454e      	cmp	r6, r9
 80195ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80195f0:	f84a 3b04 	str.w	r3, [sl], #4
 80195f4:	d8e8      	bhi.n	80195c8 <__mdiff+0x7c>
 80195f6:	1b73      	subs	r3, r6, r5
 80195f8:	3b15      	subs	r3, #21
 80195fa:	f023 0303 	bic.w	r3, r3, #3
 80195fe:	3304      	adds	r3, #4
 8019600:	3515      	adds	r5, #21
 8019602:	42ae      	cmp	r6, r5
 8019604:	bf38      	it	cc
 8019606:	2304      	movcc	r3, #4
 8019608:	4418      	add	r0, r3
 801960a:	4473      	add	r3, lr
 801960c:	469e      	mov	lr, r3
 801960e:	4606      	mov	r6, r0
 8019610:	4566      	cmp	r6, ip
 8019612:	d30e      	bcc.n	8019632 <__mdiff+0xe6>
 8019614:	f10c 0103 	add.w	r1, ip, #3
 8019618:	1a09      	subs	r1, r1, r0
 801961a:	f021 0103 	bic.w	r1, r1, #3
 801961e:	3803      	subs	r0, #3
 8019620:	4584      	cmp	ip, r0
 8019622:	bf38      	it	cc
 8019624:	2100      	movcc	r1, #0
 8019626:	440b      	add	r3, r1
 8019628:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801962c:	b179      	cbz	r1, 801964e <__mdiff+0x102>
 801962e:	6117      	str	r7, [r2, #16]
 8019630:	e7a6      	b.n	8019580 <__mdiff+0x34>
 8019632:	f856 8b04 	ldr.w	r8, [r6], #4
 8019636:	fa11 f488 	uxtah	r4, r1, r8
 801963a:	1425      	asrs	r5, r4, #16
 801963c:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8019640:	b2a4      	uxth	r4, r4
 8019642:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8019646:	f84e 4b04 	str.w	r4, [lr], #4
 801964a:	1429      	asrs	r1, r5, #16
 801964c:	e7e0      	b.n	8019610 <__mdiff+0xc4>
 801964e:	3f01      	subs	r7, #1
 8019650:	e7ea      	b.n	8019628 <__mdiff+0xdc>
 8019652:	bf00      	nop
 8019654:	0801b2f9 	.word	0x0801b2f9
 8019658:	0801b37b 	.word	0x0801b37b

0801965c <__ulp>:
 801965c:	4b0e      	ldr	r3, [pc, #56]	; (8019698 <__ulp+0x3c>)
 801965e:	400b      	ands	r3, r1
 8019660:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019664:	2b00      	cmp	r3, #0
 8019666:	dc08      	bgt.n	801967a <__ulp+0x1e>
 8019668:	425b      	negs	r3, r3
 801966a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801966e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019672:	da04      	bge.n	801967e <__ulp+0x22>
 8019674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019678:	4113      	asrs	r3, r2
 801967a:	2200      	movs	r2, #0
 801967c:	e008      	b.n	8019690 <__ulp+0x34>
 801967e:	f1a2 0314 	sub.w	r3, r2, #20
 8019682:	2b1e      	cmp	r3, #30
 8019684:	bfda      	itte	le
 8019686:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801968a:	40da      	lsrle	r2, r3
 801968c:	2201      	movgt	r2, #1
 801968e:	2300      	movs	r3, #0
 8019690:	4619      	mov	r1, r3
 8019692:	4610      	mov	r0, r2
 8019694:	4770      	bx	lr
 8019696:	bf00      	nop
 8019698:	7ff00000 	.word	0x7ff00000

0801969c <__b2d>:
 801969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801969e:	6905      	ldr	r5, [r0, #16]
 80196a0:	f100 0714 	add.w	r7, r0, #20
 80196a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80196a8:	1f2e      	subs	r6, r5, #4
 80196aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80196ae:	4620      	mov	r0, r4
 80196b0:	f7ff fd5c 	bl	801916c <__hi0bits>
 80196b4:	f1c0 0220 	rsb	r2, r0, #32
 80196b8:	280a      	cmp	r0, #10
 80196ba:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8019728 <__b2d+0x8c>
 80196be:	600a      	str	r2, [r1, #0]
 80196c0:	4603      	mov	r3, r0
 80196c2:	dc12      	bgt.n	80196ea <__b2d+0x4e>
 80196c4:	f1c0 0e0b 	rsb	lr, r0, #11
 80196c8:	fa24 f20e 	lsr.w	r2, r4, lr
 80196cc:	42b7      	cmp	r7, r6
 80196ce:	ea42 010c 	orr.w	r1, r2, ip
 80196d2:	bf34      	ite	cc
 80196d4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80196d8:	2200      	movcs	r2, #0
 80196da:	3315      	adds	r3, #21
 80196dc:	fa04 f303 	lsl.w	r3, r4, r3
 80196e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80196e4:	431a      	orrs	r2, r3
 80196e6:	4610      	mov	r0, r2
 80196e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196ea:	42b7      	cmp	r7, r6
 80196ec:	bf3a      	itte	cc
 80196ee:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80196f2:	f1a5 0608 	subcc.w	r6, r5, #8
 80196f6:	2200      	movcs	r2, #0
 80196f8:	3b0b      	subs	r3, #11
 80196fa:	d012      	beq.n	8019722 <__b2d+0x86>
 80196fc:	f1c3 0520 	rsb	r5, r3, #32
 8019700:	fa22 f105 	lsr.w	r1, r2, r5
 8019704:	409c      	lsls	r4, r3
 8019706:	430c      	orrs	r4, r1
 8019708:	42be      	cmp	r6, r7
 801970a:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 801970e:	bf8c      	ite	hi
 8019710:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019714:	2400      	movls	r4, #0
 8019716:	409a      	lsls	r2, r3
 8019718:	40ec      	lsrs	r4, r5
 801971a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801971e:	4322      	orrs	r2, r4
 8019720:	e7e1      	b.n	80196e6 <__b2d+0x4a>
 8019722:	ea44 010c 	orr.w	r1, r4, ip
 8019726:	e7de      	b.n	80196e6 <__b2d+0x4a>
 8019728:	3ff00000 	.word	0x3ff00000

0801972c <__d2b>:
 801972c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801972e:	2101      	movs	r1, #1
 8019730:	9e08      	ldr	r6, [sp, #32]
 8019732:	4617      	mov	r7, r2
 8019734:	461c      	mov	r4, r3
 8019736:	f7ff fc27 	bl	8018f88 <_Balloc>
 801973a:	4605      	mov	r5, r0
 801973c:	b930      	cbnz	r0, 801974c <__d2b+0x20>
 801973e:	4602      	mov	r2, r0
 8019740:	4b23      	ldr	r3, [pc, #140]	; (80197d0 <__d2b+0xa4>)
 8019742:	4824      	ldr	r0, [pc, #144]	; (80197d4 <__d2b+0xa8>)
 8019744:	f240 310f 	movw	r1, #783	; 0x30f
 8019748:	f7fd fe34 	bl	80173b4 <__assert_func>
 801974c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8019750:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8019754:	bb24      	cbnz	r4, 80197a0 <__d2b+0x74>
 8019756:	2f00      	cmp	r7, #0
 8019758:	9301      	str	r3, [sp, #4]
 801975a:	d026      	beq.n	80197aa <__d2b+0x7e>
 801975c:	4668      	mov	r0, sp
 801975e:	9700      	str	r7, [sp, #0]
 8019760:	f7ff fd24 	bl	80191ac <__lo0bits>
 8019764:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019768:	b1e8      	cbz	r0, 80197a6 <__d2b+0x7a>
 801976a:	f1c0 0320 	rsb	r3, r0, #32
 801976e:	fa02 f303 	lsl.w	r3, r2, r3
 8019772:	430b      	orrs	r3, r1
 8019774:	40c2      	lsrs	r2, r0
 8019776:	616b      	str	r3, [r5, #20]
 8019778:	9201      	str	r2, [sp, #4]
 801977a:	9b01      	ldr	r3, [sp, #4]
 801977c:	61ab      	str	r3, [r5, #24]
 801977e:	2b00      	cmp	r3, #0
 8019780:	bf14      	ite	ne
 8019782:	2102      	movne	r1, #2
 8019784:	2101      	moveq	r1, #1
 8019786:	6129      	str	r1, [r5, #16]
 8019788:	b1bc      	cbz	r4, 80197ba <__d2b+0x8e>
 801978a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801978e:	4404      	add	r4, r0
 8019790:	6034      	str	r4, [r6, #0]
 8019792:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019798:	6018      	str	r0, [r3, #0]
 801979a:	4628      	mov	r0, r5
 801979c:	b003      	add	sp, #12
 801979e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80197a4:	e7d7      	b.n	8019756 <__d2b+0x2a>
 80197a6:	6169      	str	r1, [r5, #20]
 80197a8:	e7e7      	b.n	801977a <__d2b+0x4e>
 80197aa:	a801      	add	r0, sp, #4
 80197ac:	f7ff fcfe 	bl	80191ac <__lo0bits>
 80197b0:	9b01      	ldr	r3, [sp, #4]
 80197b2:	616b      	str	r3, [r5, #20]
 80197b4:	3020      	adds	r0, #32
 80197b6:	2101      	movs	r1, #1
 80197b8:	e7e5      	b.n	8019786 <__d2b+0x5a>
 80197ba:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80197be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80197c2:	6030      	str	r0, [r6, #0]
 80197c4:	6918      	ldr	r0, [r3, #16]
 80197c6:	f7ff fcd1 	bl	801916c <__hi0bits>
 80197ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80197ce:	e7e2      	b.n	8019796 <__d2b+0x6a>
 80197d0:	0801b2f9 	.word	0x0801b2f9
 80197d4:	0801b37b 	.word	0x0801b37b

080197d8 <__ratio>:
 80197d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197dc:	4688      	mov	r8, r1
 80197de:	4669      	mov	r1, sp
 80197e0:	4681      	mov	r9, r0
 80197e2:	f7ff ff5b 	bl	801969c <__b2d>
 80197e6:	460f      	mov	r7, r1
 80197e8:	4604      	mov	r4, r0
 80197ea:	460d      	mov	r5, r1
 80197ec:	4640      	mov	r0, r8
 80197ee:	a901      	add	r1, sp, #4
 80197f0:	f7ff ff54 	bl	801969c <__b2d>
 80197f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80197f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80197fc:	eba3 0c02 	sub.w	ip, r3, r2
 8019800:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019804:	1a9b      	subs	r3, r3, r2
 8019806:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801980a:	2b00      	cmp	r3, #0
 801980c:	bfd5      	itete	le
 801980e:	460a      	movle	r2, r1
 8019810:	462a      	movgt	r2, r5
 8019812:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019816:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801981a:	468b      	mov	fp, r1
 801981c:	bfd8      	it	le
 801981e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019822:	465b      	mov	r3, fp
 8019824:	4602      	mov	r2, r0
 8019826:	4639      	mov	r1, r7
 8019828:	4620      	mov	r0, r4
 801982a:	f7e6 ffe7 	bl	80007fc <__aeabi_ddiv>
 801982e:	b003      	add	sp, #12
 8019830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019834 <__copybits>:
 8019834:	3901      	subs	r1, #1
 8019836:	b570      	push	{r4, r5, r6, lr}
 8019838:	1149      	asrs	r1, r1, #5
 801983a:	6914      	ldr	r4, [r2, #16]
 801983c:	3101      	adds	r1, #1
 801983e:	f102 0314 	add.w	r3, r2, #20
 8019842:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019846:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801984a:	1f05      	subs	r5, r0, #4
 801984c:	42a3      	cmp	r3, r4
 801984e:	d30c      	bcc.n	801986a <__copybits+0x36>
 8019850:	1aa3      	subs	r3, r4, r2
 8019852:	3b11      	subs	r3, #17
 8019854:	f023 0303 	bic.w	r3, r3, #3
 8019858:	3211      	adds	r2, #17
 801985a:	42a2      	cmp	r2, r4
 801985c:	bf88      	it	hi
 801985e:	2300      	movhi	r3, #0
 8019860:	4418      	add	r0, r3
 8019862:	2300      	movs	r3, #0
 8019864:	4288      	cmp	r0, r1
 8019866:	d305      	bcc.n	8019874 <__copybits+0x40>
 8019868:	bd70      	pop	{r4, r5, r6, pc}
 801986a:	f853 6b04 	ldr.w	r6, [r3], #4
 801986e:	f845 6f04 	str.w	r6, [r5, #4]!
 8019872:	e7eb      	b.n	801984c <__copybits+0x18>
 8019874:	f840 3b04 	str.w	r3, [r0], #4
 8019878:	e7f4      	b.n	8019864 <__copybits+0x30>

0801987a <__any_on>:
 801987a:	f100 0214 	add.w	r2, r0, #20
 801987e:	6900      	ldr	r0, [r0, #16]
 8019880:	114b      	asrs	r3, r1, #5
 8019882:	4298      	cmp	r0, r3
 8019884:	b510      	push	{r4, lr}
 8019886:	db11      	blt.n	80198ac <__any_on+0x32>
 8019888:	dd0a      	ble.n	80198a0 <__any_on+0x26>
 801988a:	f011 011f 	ands.w	r1, r1, #31
 801988e:	d007      	beq.n	80198a0 <__any_on+0x26>
 8019890:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019894:	fa24 f001 	lsr.w	r0, r4, r1
 8019898:	fa00 f101 	lsl.w	r1, r0, r1
 801989c:	428c      	cmp	r4, r1
 801989e:	d10b      	bne.n	80198b8 <__any_on+0x3e>
 80198a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80198a4:	4293      	cmp	r3, r2
 80198a6:	d803      	bhi.n	80198b0 <__any_on+0x36>
 80198a8:	2000      	movs	r0, #0
 80198aa:	bd10      	pop	{r4, pc}
 80198ac:	4603      	mov	r3, r0
 80198ae:	e7f7      	b.n	80198a0 <__any_on+0x26>
 80198b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80198b4:	2900      	cmp	r1, #0
 80198b6:	d0f5      	beq.n	80198a4 <__any_on+0x2a>
 80198b8:	2001      	movs	r0, #1
 80198ba:	e7f6      	b.n	80198aa <__any_on+0x30>

080198bc <__sread>:
 80198bc:	b510      	push	{r4, lr}
 80198be:	460c      	mov	r4, r1
 80198c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198c4:	f000 f9e2 	bl	8019c8c <_read_r>
 80198c8:	2800      	cmp	r0, #0
 80198ca:	bfab      	itete	ge
 80198cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80198ce:	89a3      	ldrhlt	r3, [r4, #12]
 80198d0:	181b      	addge	r3, r3, r0
 80198d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80198d6:	bfac      	ite	ge
 80198d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80198da:	81a3      	strhlt	r3, [r4, #12]
 80198dc:	bd10      	pop	{r4, pc}

080198de <__swrite>:
 80198de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198e2:	461f      	mov	r7, r3
 80198e4:	898b      	ldrh	r3, [r1, #12]
 80198e6:	05db      	lsls	r3, r3, #23
 80198e8:	4605      	mov	r5, r0
 80198ea:	460c      	mov	r4, r1
 80198ec:	4616      	mov	r6, r2
 80198ee:	d505      	bpl.n	80198fc <__swrite+0x1e>
 80198f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198f4:	2302      	movs	r3, #2
 80198f6:	2200      	movs	r2, #0
 80198f8:	f000 f9b6 	bl	8019c68 <_lseek_r>
 80198fc:	89a3      	ldrh	r3, [r4, #12]
 80198fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019906:	81a3      	strh	r3, [r4, #12]
 8019908:	4632      	mov	r2, r6
 801990a:	463b      	mov	r3, r7
 801990c:	4628      	mov	r0, r5
 801990e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019912:	f000 b9dd 	b.w	8019cd0 <_write_r>

08019916 <__sseek>:
 8019916:	b510      	push	{r4, lr}
 8019918:	460c      	mov	r4, r1
 801991a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801991e:	f000 f9a3 	bl	8019c68 <_lseek_r>
 8019922:	1c43      	adds	r3, r0, #1
 8019924:	89a3      	ldrh	r3, [r4, #12]
 8019926:	bf15      	itete	ne
 8019928:	6560      	strne	r0, [r4, #84]	; 0x54
 801992a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801992e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019932:	81a3      	strheq	r3, [r4, #12]
 8019934:	bf18      	it	ne
 8019936:	81a3      	strhne	r3, [r4, #12]
 8019938:	bd10      	pop	{r4, pc}

0801993a <__sclose>:
 801993a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801993e:	f000 b961 	b.w	8019c04 <_close_r>
	...

08019944 <fiprintf>:
 8019944:	b40e      	push	{r1, r2, r3}
 8019946:	b503      	push	{r0, r1, lr}
 8019948:	4601      	mov	r1, r0
 801994a:	ab03      	add	r3, sp, #12
 801994c:	4805      	ldr	r0, [pc, #20]	; (8019964 <fiprintf+0x20>)
 801994e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019952:	6800      	ldr	r0, [r0, #0]
 8019954:	9301      	str	r3, [sp, #4]
 8019956:	f7ff f88d 	bl	8018a74 <_vfiprintf_r>
 801995a:	b002      	add	sp, #8
 801995c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019960:	b003      	add	sp, #12
 8019962:	4770      	bx	lr
 8019964:	200003e0 	.word	0x200003e0

08019968 <_realloc_r>:
 8019968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801996c:	4680      	mov	r8, r0
 801996e:	4614      	mov	r4, r2
 8019970:	460e      	mov	r6, r1
 8019972:	b921      	cbnz	r1, 801997e <_realloc_r+0x16>
 8019974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019978:	4611      	mov	r1, r2
 801997a:	f7ff b9bd 	b.w	8018cf8 <_malloc_r>
 801997e:	b92a      	cbnz	r2, 801998c <_realloc_r+0x24>
 8019980:	f000 f9d4 	bl	8019d2c <_free_r>
 8019984:	4625      	mov	r5, r4
 8019986:	4628      	mov	r0, r5
 8019988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801998c:	f000 fa18 	bl	8019dc0 <_malloc_usable_size_r>
 8019990:	4284      	cmp	r4, r0
 8019992:	4607      	mov	r7, r0
 8019994:	d802      	bhi.n	801999c <_realloc_r+0x34>
 8019996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801999a:	d812      	bhi.n	80199c2 <_realloc_r+0x5a>
 801999c:	4621      	mov	r1, r4
 801999e:	4640      	mov	r0, r8
 80199a0:	f7ff f9aa 	bl	8018cf8 <_malloc_r>
 80199a4:	4605      	mov	r5, r0
 80199a6:	2800      	cmp	r0, #0
 80199a8:	d0ed      	beq.n	8019986 <_realloc_r+0x1e>
 80199aa:	42bc      	cmp	r4, r7
 80199ac:	4622      	mov	r2, r4
 80199ae:	4631      	mov	r1, r6
 80199b0:	bf28      	it	cs
 80199b2:	463a      	movcs	r2, r7
 80199b4:	f7fd fce5 	bl	8017382 <memcpy>
 80199b8:	4631      	mov	r1, r6
 80199ba:	4640      	mov	r0, r8
 80199bc:	f000 f9b6 	bl	8019d2c <_free_r>
 80199c0:	e7e1      	b.n	8019986 <_realloc_r+0x1e>
 80199c2:	4635      	mov	r5, r6
 80199c4:	e7df      	b.n	8019986 <_realloc_r+0x1e>

080199c6 <__swbuf_r>:
 80199c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199c8:	460e      	mov	r6, r1
 80199ca:	4614      	mov	r4, r2
 80199cc:	4605      	mov	r5, r0
 80199ce:	b118      	cbz	r0, 80199d8 <__swbuf_r+0x12>
 80199d0:	6a03      	ldr	r3, [r0, #32]
 80199d2:	b90b      	cbnz	r3, 80199d8 <__swbuf_r+0x12>
 80199d4:	f7fc fd4c 	bl	8016470 <__sinit>
 80199d8:	69a3      	ldr	r3, [r4, #24]
 80199da:	60a3      	str	r3, [r4, #8]
 80199dc:	89a3      	ldrh	r3, [r4, #12]
 80199de:	071a      	lsls	r2, r3, #28
 80199e0:	d525      	bpl.n	8019a2e <__swbuf_r+0x68>
 80199e2:	6923      	ldr	r3, [r4, #16]
 80199e4:	b31b      	cbz	r3, 8019a2e <__swbuf_r+0x68>
 80199e6:	6823      	ldr	r3, [r4, #0]
 80199e8:	6922      	ldr	r2, [r4, #16]
 80199ea:	1a98      	subs	r0, r3, r2
 80199ec:	6963      	ldr	r3, [r4, #20]
 80199ee:	b2f6      	uxtb	r6, r6
 80199f0:	4283      	cmp	r3, r0
 80199f2:	4637      	mov	r7, r6
 80199f4:	dc04      	bgt.n	8019a00 <__swbuf_r+0x3a>
 80199f6:	4621      	mov	r1, r4
 80199f8:	4628      	mov	r0, r5
 80199fa:	f7ff fa91 	bl	8018f20 <_fflush_r>
 80199fe:	b9e0      	cbnz	r0, 8019a3a <__swbuf_r+0x74>
 8019a00:	68a3      	ldr	r3, [r4, #8]
 8019a02:	3b01      	subs	r3, #1
 8019a04:	60a3      	str	r3, [r4, #8]
 8019a06:	6823      	ldr	r3, [r4, #0]
 8019a08:	1c5a      	adds	r2, r3, #1
 8019a0a:	6022      	str	r2, [r4, #0]
 8019a0c:	701e      	strb	r6, [r3, #0]
 8019a0e:	6962      	ldr	r2, [r4, #20]
 8019a10:	1c43      	adds	r3, r0, #1
 8019a12:	429a      	cmp	r2, r3
 8019a14:	d004      	beq.n	8019a20 <__swbuf_r+0x5a>
 8019a16:	89a3      	ldrh	r3, [r4, #12]
 8019a18:	07db      	lsls	r3, r3, #31
 8019a1a:	d506      	bpl.n	8019a2a <__swbuf_r+0x64>
 8019a1c:	2e0a      	cmp	r6, #10
 8019a1e:	d104      	bne.n	8019a2a <__swbuf_r+0x64>
 8019a20:	4621      	mov	r1, r4
 8019a22:	4628      	mov	r0, r5
 8019a24:	f7ff fa7c 	bl	8018f20 <_fflush_r>
 8019a28:	b938      	cbnz	r0, 8019a3a <__swbuf_r+0x74>
 8019a2a:	4638      	mov	r0, r7
 8019a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a2e:	4621      	mov	r1, r4
 8019a30:	4628      	mov	r0, r5
 8019a32:	f000 f805 	bl	8019a40 <__swsetup_r>
 8019a36:	2800      	cmp	r0, #0
 8019a38:	d0d5      	beq.n	80199e6 <__swbuf_r+0x20>
 8019a3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019a3e:	e7f4      	b.n	8019a2a <__swbuf_r+0x64>

08019a40 <__swsetup_r>:
 8019a40:	b538      	push	{r3, r4, r5, lr}
 8019a42:	4b2a      	ldr	r3, [pc, #168]	; (8019aec <__swsetup_r+0xac>)
 8019a44:	4605      	mov	r5, r0
 8019a46:	6818      	ldr	r0, [r3, #0]
 8019a48:	460c      	mov	r4, r1
 8019a4a:	b118      	cbz	r0, 8019a54 <__swsetup_r+0x14>
 8019a4c:	6a03      	ldr	r3, [r0, #32]
 8019a4e:	b90b      	cbnz	r3, 8019a54 <__swsetup_r+0x14>
 8019a50:	f7fc fd0e 	bl	8016470 <__sinit>
 8019a54:	89a3      	ldrh	r3, [r4, #12]
 8019a56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a5a:	0718      	lsls	r0, r3, #28
 8019a5c:	d422      	bmi.n	8019aa4 <__swsetup_r+0x64>
 8019a5e:	06d9      	lsls	r1, r3, #27
 8019a60:	d407      	bmi.n	8019a72 <__swsetup_r+0x32>
 8019a62:	2309      	movs	r3, #9
 8019a64:	602b      	str	r3, [r5, #0]
 8019a66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019a6a:	81a3      	strh	r3, [r4, #12]
 8019a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a70:	e034      	b.n	8019adc <__swsetup_r+0x9c>
 8019a72:	0758      	lsls	r0, r3, #29
 8019a74:	d512      	bpl.n	8019a9c <__swsetup_r+0x5c>
 8019a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a78:	b141      	cbz	r1, 8019a8c <__swsetup_r+0x4c>
 8019a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a7e:	4299      	cmp	r1, r3
 8019a80:	d002      	beq.n	8019a88 <__swsetup_r+0x48>
 8019a82:	4628      	mov	r0, r5
 8019a84:	f000 f952 	bl	8019d2c <_free_r>
 8019a88:	2300      	movs	r3, #0
 8019a8a:	6363      	str	r3, [r4, #52]	; 0x34
 8019a8c:	89a3      	ldrh	r3, [r4, #12]
 8019a8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019a92:	81a3      	strh	r3, [r4, #12]
 8019a94:	2300      	movs	r3, #0
 8019a96:	6063      	str	r3, [r4, #4]
 8019a98:	6923      	ldr	r3, [r4, #16]
 8019a9a:	6023      	str	r3, [r4, #0]
 8019a9c:	89a3      	ldrh	r3, [r4, #12]
 8019a9e:	f043 0308 	orr.w	r3, r3, #8
 8019aa2:	81a3      	strh	r3, [r4, #12]
 8019aa4:	6923      	ldr	r3, [r4, #16]
 8019aa6:	b94b      	cbnz	r3, 8019abc <__swsetup_r+0x7c>
 8019aa8:	89a3      	ldrh	r3, [r4, #12]
 8019aaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ab2:	d003      	beq.n	8019abc <__swsetup_r+0x7c>
 8019ab4:	4621      	mov	r1, r4
 8019ab6:	4628      	mov	r0, r5
 8019ab8:	f000 f84d 	bl	8019b56 <__smakebuf_r>
 8019abc:	89a0      	ldrh	r0, [r4, #12]
 8019abe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ac2:	f010 0301 	ands.w	r3, r0, #1
 8019ac6:	d00a      	beq.n	8019ade <__swsetup_r+0x9e>
 8019ac8:	2300      	movs	r3, #0
 8019aca:	60a3      	str	r3, [r4, #8]
 8019acc:	6963      	ldr	r3, [r4, #20]
 8019ace:	425b      	negs	r3, r3
 8019ad0:	61a3      	str	r3, [r4, #24]
 8019ad2:	6923      	ldr	r3, [r4, #16]
 8019ad4:	b943      	cbnz	r3, 8019ae8 <__swsetup_r+0xa8>
 8019ad6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019ada:	d1c4      	bne.n	8019a66 <__swsetup_r+0x26>
 8019adc:	bd38      	pop	{r3, r4, r5, pc}
 8019ade:	0781      	lsls	r1, r0, #30
 8019ae0:	bf58      	it	pl
 8019ae2:	6963      	ldrpl	r3, [r4, #20]
 8019ae4:	60a3      	str	r3, [r4, #8]
 8019ae6:	e7f4      	b.n	8019ad2 <__swsetup_r+0x92>
 8019ae8:	2000      	movs	r0, #0
 8019aea:	e7f7      	b.n	8019adc <__swsetup_r+0x9c>
 8019aec:	200003e0 	.word	0x200003e0

08019af0 <__ascii_wctomb>:
 8019af0:	4603      	mov	r3, r0
 8019af2:	4608      	mov	r0, r1
 8019af4:	b141      	cbz	r1, 8019b08 <__ascii_wctomb+0x18>
 8019af6:	2aff      	cmp	r2, #255	; 0xff
 8019af8:	d904      	bls.n	8019b04 <__ascii_wctomb+0x14>
 8019afa:	228a      	movs	r2, #138	; 0x8a
 8019afc:	601a      	str	r2, [r3, #0]
 8019afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b02:	4770      	bx	lr
 8019b04:	700a      	strb	r2, [r1, #0]
 8019b06:	2001      	movs	r0, #1
 8019b08:	4770      	bx	lr

08019b0a <__swhatbuf_r>:
 8019b0a:	b570      	push	{r4, r5, r6, lr}
 8019b0c:	460c      	mov	r4, r1
 8019b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b12:	2900      	cmp	r1, #0
 8019b14:	b096      	sub	sp, #88	; 0x58
 8019b16:	4615      	mov	r5, r2
 8019b18:	461e      	mov	r6, r3
 8019b1a:	da0d      	bge.n	8019b38 <__swhatbuf_r+0x2e>
 8019b1c:	89a3      	ldrh	r3, [r4, #12]
 8019b1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019b22:	f04f 0100 	mov.w	r1, #0
 8019b26:	bf0c      	ite	eq
 8019b28:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019b2c:	2340      	movne	r3, #64	; 0x40
 8019b2e:	2000      	movs	r0, #0
 8019b30:	6031      	str	r1, [r6, #0]
 8019b32:	602b      	str	r3, [r5, #0]
 8019b34:	b016      	add	sp, #88	; 0x58
 8019b36:	bd70      	pop	{r4, r5, r6, pc}
 8019b38:	466a      	mov	r2, sp
 8019b3a:	f000 f873 	bl	8019c24 <_fstat_r>
 8019b3e:	2800      	cmp	r0, #0
 8019b40:	dbec      	blt.n	8019b1c <__swhatbuf_r+0x12>
 8019b42:	9901      	ldr	r1, [sp, #4]
 8019b44:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019b48:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019b4c:	4259      	negs	r1, r3
 8019b4e:	4159      	adcs	r1, r3
 8019b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b54:	e7eb      	b.n	8019b2e <__swhatbuf_r+0x24>

08019b56 <__smakebuf_r>:
 8019b56:	898b      	ldrh	r3, [r1, #12]
 8019b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019b5a:	079d      	lsls	r5, r3, #30
 8019b5c:	4606      	mov	r6, r0
 8019b5e:	460c      	mov	r4, r1
 8019b60:	d507      	bpl.n	8019b72 <__smakebuf_r+0x1c>
 8019b62:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019b66:	6023      	str	r3, [r4, #0]
 8019b68:	6123      	str	r3, [r4, #16]
 8019b6a:	2301      	movs	r3, #1
 8019b6c:	6163      	str	r3, [r4, #20]
 8019b6e:	b002      	add	sp, #8
 8019b70:	bd70      	pop	{r4, r5, r6, pc}
 8019b72:	ab01      	add	r3, sp, #4
 8019b74:	466a      	mov	r2, sp
 8019b76:	f7ff ffc8 	bl	8019b0a <__swhatbuf_r>
 8019b7a:	9900      	ldr	r1, [sp, #0]
 8019b7c:	4605      	mov	r5, r0
 8019b7e:	4630      	mov	r0, r6
 8019b80:	f7ff f8ba 	bl	8018cf8 <_malloc_r>
 8019b84:	b948      	cbnz	r0, 8019b9a <__smakebuf_r+0x44>
 8019b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b8a:	059a      	lsls	r2, r3, #22
 8019b8c:	d4ef      	bmi.n	8019b6e <__smakebuf_r+0x18>
 8019b8e:	f023 0303 	bic.w	r3, r3, #3
 8019b92:	f043 0302 	orr.w	r3, r3, #2
 8019b96:	81a3      	strh	r3, [r4, #12]
 8019b98:	e7e3      	b.n	8019b62 <__smakebuf_r+0xc>
 8019b9a:	89a3      	ldrh	r3, [r4, #12]
 8019b9c:	6020      	str	r0, [r4, #0]
 8019b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ba2:	81a3      	strh	r3, [r4, #12]
 8019ba4:	9b00      	ldr	r3, [sp, #0]
 8019ba6:	6163      	str	r3, [r4, #20]
 8019ba8:	9b01      	ldr	r3, [sp, #4]
 8019baa:	6120      	str	r0, [r4, #16]
 8019bac:	b15b      	cbz	r3, 8019bc6 <__smakebuf_r+0x70>
 8019bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019bb2:	4630      	mov	r0, r6
 8019bb4:	f000 f848 	bl	8019c48 <_isatty_r>
 8019bb8:	b128      	cbz	r0, 8019bc6 <__smakebuf_r+0x70>
 8019bba:	89a3      	ldrh	r3, [r4, #12]
 8019bbc:	f023 0303 	bic.w	r3, r3, #3
 8019bc0:	f043 0301 	orr.w	r3, r3, #1
 8019bc4:	81a3      	strh	r3, [r4, #12]
 8019bc6:	89a3      	ldrh	r3, [r4, #12]
 8019bc8:	431d      	orrs	r5, r3
 8019bca:	81a5      	strh	r5, [r4, #12]
 8019bcc:	e7cf      	b.n	8019b6e <__smakebuf_r+0x18>

08019bce <memmove>:
 8019bce:	4288      	cmp	r0, r1
 8019bd0:	b510      	push	{r4, lr}
 8019bd2:	eb01 0402 	add.w	r4, r1, r2
 8019bd6:	d902      	bls.n	8019bde <memmove+0x10>
 8019bd8:	4284      	cmp	r4, r0
 8019bda:	4623      	mov	r3, r4
 8019bdc:	d807      	bhi.n	8019bee <memmove+0x20>
 8019bde:	1e43      	subs	r3, r0, #1
 8019be0:	42a1      	cmp	r1, r4
 8019be2:	d008      	beq.n	8019bf6 <memmove+0x28>
 8019be4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019be8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019bec:	e7f8      	b.n	8019be0 <memmove+0x12>
 8019bee:	4402      	add	r2, r0
 8019bf0:	4601      	mov	r1, r0
 8019bf2:	428a      	cmp	r2, r1
 8019bf4:	d100      	bne.n	8019bf8 <memmove+0x2a>
 8019bf6:	bd10      	pop	{r4, pc}
 8019bf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019bfc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c00:	e7f7      	b.n	8019bf2 <memmove+0x24>
	...

08019c04 <_close_r>:
 8019c04:	b538      	push	{r3, r4, r5, lr}
 8019c06:	4d06      	ldr	r5, [pc, #24]	; (8019c20 <_close_r+0x1c>)
 8019c08:	2300      	movs	r3, #0
 8019c0a:	4604      	mov	r4, r0
 8019c0c:	4608      	mov	r0, r1
 8019c0e:	602b      	str	r3, [r5, #0]
 8019c10:	f7e8 fd76 	bl	8002700 <_close>
 8019c14:	1c43      	adds	r3, r0, #1
 8019c16:	d102      	bne.n	8019c1e <_close_r+0x1a>
 8019c18:	682b      	ldr	r3, [r5, #0]
 8019c1a:	b103      	cbz	r3, 8019c1e <_close_r+0x1a>
 8019c1c:	6023      	str	r3, [r4, #0]
 8019c1e:	bd38      	pop	{r3, r4, r5, pc}
 8019c20:	20001e50 	.word	0x20001e50

08019c24 <_fstat_r>:
 8019c24:	b538      	push	{r3, r4, r5, lr}
 8019c26:	4d07      	ldr	r5, [pc, #28]	; (8019c44 <_fstat_r+0x20>)
 8019c28:	2300      	movs	r3, #0
 8019c2a:	4604      	mov	r4, r0
 8019c2c:	4608      	mov	r0, r1
 8019c2e:	4611      	mov	r1, r2
 8019c30:	602b      	str	r3, [r5, #0]
 8019c32:	f7e8 fd68 	bl	8002706 <_fstat>
 8019c36:	1c43      	adds	r3, r0, #1
 8019c38:	d102      	bne.n	8019c40 <_fstat_r+0x1c>
 8019c3a:	682b      	ldr	r3, [r5, #0]
 8019c3c:	b103      	cbz	r3, 8019c40 <_fstat_r+0x1c>
 8019c3e:	6023      	str	r3, [r4, #0]
 8019c40:	bd38      	pop	{r3, r4, r5, pc}
 8019c42:	bf00      	nop
 8019c44:	20001e50 	.word	0x20001e50

08019c48 <_isatty_r>:
 8019c48:	b538      	push	{r3, r4, r5, lr}
 8019c4a:	4d06      	ldr	r5, [pc, #24]	; (8019c64 <_isatty_r+0x1c>)
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	4604      	mov	r4, r0
 8019c50:	4608      	mov	r0, r1
 8019c52:	602b      	str	r3, [r5, #0]
 8019c54:	f7e8 fd5c 	bl	8002710 <_isatty>
 8019c58:	1c43      	adds	r3, r0, #1
 8019c5a:	d102      	bne.n	8019c62 <_isatty_r+0x1a>
 8019c5c:	682b      	ldr	r3, [r5, #0]
 8019c5e:	b103      	cbz	r3, 8019c62 <_isatty_r+0x1a>
 8019c60:	6023      	str	r3, [r4, #0]
 8019c62:	bd38      	pop	{r3, r4, r5, pc}
 8019c64:	20001e50 	.word	0x20001e50

08019c68 <_lseek_r>:
 8019c68:	b538      	push	{r3, r4, r5, lr}
 8019c6a:	4d07      	ldr	r5, [pc, #28]	; (8019c88 <_lseek_r+0x20>)
 8019c6c:	4604      	mov	r4, r0
 8019c6e:	4608      	mov	r0, r1
 8019c70:	4611      	mov	r1, r2
 8019c72:	2200      	movs	r2, #0
 8019c74:	602a      	str	r2, [r5, #0]
 8019c76:	461a      	mov	r2, r3
 8019c78:	f7e8 fd4c 	bl	8002714 <_lseek>
 8019c7c:	1c43      	adds	r3, r0, #1
 8019c7e:	d102      	bne.n	8019c86 <_lseek_r+0x1e>
 8019c80:	682b      	ldr	r3, [r5, #0]
 8019c82:	b103      	cbz	r3, 8019c86 <_lseek_r+0x1e>
 8019c84:	6023      	str	r3, [r4, #0]
 8019c86:	bd38      	pop	{r3, r4, r5, pc}
 8019c88:	20001e50 	.word	0x20001e50

08019c8c <_read_r>:
 8019c8c:	b538      	push	{r3, r4, r5, lr}
 8019c8e:	4d07      	ldr	r5, [pc, #28]	; (8019cac <_read_r+0x20>)
 8019c90:	4604      	mov	r4, r0
 8019c92:	4608      	mov	r0, r1
 8019c94:	4611      	mov	r1, r2
 8019c96:	2200      	movs	r2, #0
 8019c98:	602a      	str	r2, [r5, #0]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	f7e8 fd12 	bl	80026c4 <_read>
 8019ca0:	1c43      	adds	r3, r0, #1
 8019ca2:	d102      	bne.n	8019caa <_read_r+0x1e>
 8019ca4:	682b      	ldr	r3, [r5, #0]
 8019ca6:	b103      	cbz	r3, 8019caa <_read_r+0x1e>
 8019ca8:	6023      	str	r3, [r4, #0]
 8019caa:	bd38      	pop	{r3, r4, r5, pc}
 8019cac:	20001e50 	.word	0x20001e50

08019cb0 <_sbrk_r>:
 8019cb0:	b538      	push	{r3, r4, r5, lr}
 8019cb2:	4d06      	ldr	r5, [pc, #24]	; (8019ccc <_sbrk_r+0x1c>)
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	4604      	mov	r4, r0
 8019cb8:	4608      	mov	r0, r1
 8019cba:	602b      	str	r3, [r5, #0]
 8019cbc:	f7e8 fd2c 	bl	8002718 <_sbrk>
 8019cc0:	1c43      	adds	r3, r0, #1
 8019cc2:	d102      	bne.n	8019cca <_sbrk_r+0x1a>
 8019cc4:	682b      	ldr	r3, [r5, #0]
 8019cc6:	b103      	cbz	r3, 8019cca <_sbrk_r+0x1a>
 8019cc8:	6023      	str	r3, [r4, #0]
 8019cca:	bd38      	pop	{r3, r4, r5, pc}
 8019ccc:	20001e50 	.word	0x20001e50

08019cd0 <_write_r>:
 8019cd0:	b538      	push	{r3, r4, r5, lr}
 8019cd2:	4d07      	ldr	r5, [pc, #28]	; (8019cf0 <_write_r+0x20>)
 8019cd4:	4604      	mov	r4, r0
 8019cd6:	4608      	mov	r0, r1
 8019cd8:	4611      	mov	r1, r2
 8019cda:	2200      	movs	r2, #0
 8019cdc:	602a      	str	r2, [r5, #0]
 8019cde:	461a      	mov	r2, r3
 8019ce0:	f7e8 fd00 	bl	80026e4 <_write>
 8019ce4:	1c43      	adds	r3, r0, #1
 8019ce6:	d102      	bne.n	8019cee <_write_r+0x1e>
 8019ce8:	682b      	ldr	r3, [r5, #0]
 8019cea:	b103      	cbz	r3, 8019cee <_write_r+0x1e>
 8019cec:	6023      	str	r3, [r4, #0]
 8019cee:	bd38      	pop	{r3, r4, r5, pc}
 8019cf0:	20001e50 	.word	0x20001e50

08019cf4 <abort>:
 8019cf4:	b508      	push	{r3, lr}
 8019cf6:	2006      	movs	r0, #6
 8019cf8:	f000 f892 	bl	8019e20 <raise>
 8019cfc:	2001      	movs	r0, #1
 8019cfe:	f7e8 fcdb 	bl	80026b8 <_exit>

08019d02 <_calloc_r>:
 8019d02:	b570      	push	{r4, r5, r6, lr}
 8019d04:	fba1 5402 	umull	r5, r4, r1, r2
 8019d08:	b934      	cbnz	r4, 8019d18 <_calloc_r+0x16>
 8019d0a:	4629      	mov	r1, r5
 8019d0c:	f7fe fff4 	bl	8018cf8 <_malloc_r>
 8019d10:	4606      	mov	r6, r0
 8019d12:	b928      	cbnz	r0, 8019d20 <_calloc_r+0x1e>
 8019d14:	4630      	mov	r0, r6
 8019d16:	bd70      	pop	{r4, r5, r6, pc}
 8019d18:	220c      	movs	r2, #12
 8019d1a:	6002      	str	r2, [r0, #0]
 8019d1c:	2600      	movs	r6, #0
 8019d1e:	e7f9      	b.n	8019d14 <_calloc_r+0x12>
 8019d20:	462a      	mov	r2, r5
 8019d22:	4621      	mov	r1, r4
 8019d24:	f7fd faf4 	bl	8017310 <memset>
 8019d28:	e7f4      	b.n	8019d14 <_calloc_r+0x12>
	...

08019d2c <_free_r>:
 8019d2c:	b538      	push	{r3, r4, r5, lr}
 8019d2e:	4605      	mov	r5, r0
 8019d30:	2900      	cmp	r1, #0
 8019d32:	d041      	beq.n	8019db8 <_free_r+0x8c>
 8019d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d38:	1f0c      	subs	r4, r1, #4
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	bfb8      	it	lt
 8019d3e:	18e4      	addlt	r4, r4, r3
 8019d40:	f7ff f916 	bl	8018f70 <__malloc_lock>
 8019d44:	4a1d      	ldr	r2, [pc, #116]	; (8019dbc <_free_r+0x90>)
 8019d46:	6813      	ldr	r3, [r2, #0]
 8019d48:	b933      	cbnz	r3, 8019d58 <_free_r+0x2c>
 8019d4a:	6063      	str	r3, [r4, #4]
 8019d4c:	6014      	str	r4, [r2, #0]
 8019d4e:	4628      	mov	r0, r5
 8019d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d54:	f7ff b912 	b.w	8018f7c <__malloc_unlock>
 8019d58:	42a3      	cmp	r3, r4
 8019d5a:	d908      	bls.n	8019d6e <_free_r+0x42>
 8019d5c:	6820      	ldr	r0, [r4, #0]
 8019d5e:	1821      	adds	r1, r4, r0
 8019d60:	428b      	cmp	r3, r1
 8019d62:	bf01      	itttt	eq
 8019d64:	6819      	ldreq	r1, [r3, #0]
 8019d66:	685b      	ldreq	r3, [r3, #4]
 8019d68:	1809      	addeq	r1, r1, r0
 8019d6a:	6021      	streq	r1, [r4, #0]
 8019d6c:	e7ed      	b.n	8019d4a <_free_r+0x1e>
 8019d6e:	461a      	mov	r2, r3
 8019d70:	685b      	ldr	r3, [r3, #4]
 8019d72:	b10b      	cbz	r3, 8019d78 <_free_r+0x4c>
 8019d74:	42a3      	cmp	r3, r4
 8019d76:	d9fa      	bls.n	8019d6e <_free_r+0x42>
 8019d78:	6811      	ldr	r1, [r2, #0]
 8019d7a:	1850      	adds	r0, r2, r1
 8019d7c:	42a0      	cmp	r0, r4
 8019d7e:	d10b      	bne.n	8019d98 <_free_r+0x6c>
 8019d80:	6820      	ldr	r0, [r4, #0]
 8019d82:	4401      	add	r1, r0
 8019d84:	1850      	adds	r0, r2, r1
 8019d86:	4283      	cmp	r3, r0
 8019d88:	6011      	str	r1, [r2, #0]
 8019d8a:	d1e0      	bne.n	8019d4e <_free_r+0x22>
 8019d8c:	6818      	ldr	r0, [r3, #0]
 8019d8e:	685b      	ldr	r3, [r3, #4]
 8019d90:	6053      	str	r3, [r2, #4]
 8019d92:	4408      	add	r0, r1
 8019d94:	6010      	str	r0, [r2, #0]
 8019d96:	e7da      	b.n	8019d4e <_free_r+0x22>
 8019d98:	d902      	bls.n	8019da0 <_free_r+0x74>
 8019d9a:	230c      	movs	r3, #12
 8019d9c:	602b      	str	r3, [r5, #0]
 8019d9e:	e7d6      	b.n	8019d4e <_free_r+0x22>
 8019da0:	6820      	ldr	r0, [r4, #0]
 8019da2:	1821      	adds	r1, r4, r0
 8019da4:	428b      	cmp	r3, r1
 8019da6:	bf04      	itt	eq
 8019da8:	6819      	ldreq	r1, [r3, #0]
 8019daa:	685b      	ldreq	r3, [r3, #4]
 8019dac:	6063      	str	r3, [r4, #4]
 8019dae:	bf04      	itt	eq
 8019db0:	1809      	addeq	r1, r1, r0
 8019db2:	6021      	streq	r1, [r4, #0]
 8019db4:	6054      	str	r4, [r2, #4]
 8019db6:	e7ca      	b.n	8019d4e <_free_r+0x22>
 8019db8:	bd38      	pop	{r3, r4, r5, pc}
 8019dba:	bf00      	nop
 8019dbc:	20001e48 	.word	0x20001e48

08019dc0 <_malloc_usable_size_r>:
 8019dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019dc4:	1f18      	subs	r0, r3, #4
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	bfbc      	itt	lt
 8019dca:	580b      	ldrlt	r3, [r1, r0]
 8019dcc:	18c0      	addlt	r0, r0, r3
 8019dce:	4770      	bx	lr

08019dd0 <_raise_r>:
 8019dd0:	291f      	cmp	r1, #31
 8019dd2:	b538      	push	{r3, r4, r5, lr}
 8019dd4:	4604      	mov	r4, r0
 8019dd6:	460d      	mov	r5, r1
 8019dd8:	d904      	bls.n	8019de4 <_raise_r+0x14>
 8019dda:	2316      	movs	r3, #22
 8019ddc:	6003      	str	r3, [r0, #0]
 8019dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019de2:	bd38      	pop	{r3, r4, r5, pc}
 8019de4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019de6:	b112      	cbz	r2, 8019dee <_raise_r+0x1e>
 8019de8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019dec:	b94b      	cbnz	r3, 8019e02 <_raise_r+0x32>
 8019dee:	4620      	mov	r0, r4
 8019df0:	f000 f830 	bl	8019e54 <_getpid_r>
 8019df4:	462a      	mov	r2, r5
 8019df6:	4601      	mov	r1, r0
 8019df8:	4620      	mov	r0, r4
 8019dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019dfe:	f000 b817 	b.w	8019e30 <_kill_r>
 8019e02:	2b01      	cmp	r3, #1
 8019e04:	d00a      	beq.n	8019e1c <_raise_r+0x4c>
 8019e06:	1c59      	adds	r1, r3, #1
 8019e08:	d103      	bne.n	8019e12 <_raise_r+0x42>
 8019e0a:	2316      	movs	r3, #22
 8019e0c:	6003      	str	r3, [r0, #0]
 8019e0e:	2001      	movs	r0, #1
 8019e10:	e7e7      	b.n	8019de2 <_raise_r+0x12>
 8019e12:	2400      	movs	r4, #0
 8019e14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019e18:	4628      	mov	r0, r5
 8019e1a:	4798      	blx	r3
 8019e1c:	2000      	movs	r0, #0
 8019e1e:	e7e0      	b.n	8019de2 <_raise_r+0x12>

08019e20 <raise>:
 8019e20:	4b02      	ldr	r3, [pc, #8]	; (8019e2c <raise+0xc>)
 8019e22:	4601      	mov	r1, r0
 8019e24:	6818      	ldr	r0, [r3, #0]
 8019e26:	f7ff bfd3 	b.w	8019dd0 <_raise_r>
 8019e2a:	bf00      	nop
 8019e2c:	200003e0 	.word	0x200003e0

08019e30 <_kill_r>:
 8019e30:	b538      	push	{r3, r4, r5, lr}
 8019e32:	4d07      	ldr	r5, [pc, #28]	; (8019e50 <_kill_r+0x20>)
 8019e34:	2300      	movs	r3, #0
 8019e36:	4604      	mov	r4, r0
 8019e38:	4608      	mov	r0, r1
 8019e3a:	4611      	mov	r1, r2
 8019e3c:	602b      	str	r3, [r5, #0]
 8019e3e:	f7e8 fc33 	bl	80026a8 <_kill>
 8019e42:	1c43      	adds	r3, r0, #1
 8019e44:	d102      	bne.n	8019e4c <_kill_r+0x1c>
 8019e46:	682b      	ldr	r3, [r5, #0]
 8019e48:	b103      	cbz	r3, 8019e4c <_kill_r+0x1c>
 8019e4a:	6023      	str	r3, [r4, #0]
 8019e4c:	bd38      	pop	{r3, r4, r5, pc}
 8019e4e:	bf00      	nop
 8019e50:	20001e50 	.word	0x20001e50

08019e54 <_getpid_r>:
 8019e54:	f7e8 bc26 	b.w	80026a4 <_getpid>

08019e58 <floor>:
 8019e58:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e60:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8019e64:	2e13      	cmp	r6, #19
 8019e66:	460b      	mov	r3, r1
 8019e68:	4607      	mov	r7, r0
 8019e6a:	460c      	mov	r4, r1
 8019e6c:	4605      	mov	r5, r0
 8019e6e:	dc32      	bgt.n	8019ed6 <floor+0x7e>
 8019e70:	2e00      	cmp	r6, #0
 8019e72:	da14      	bge.n	8019e9e <floor+0x46>
 8019e74:	a334      	add	r3, pc, #208	; (adr r3, 8019f48 <floor+0xf0>)
 8019e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e7a:	f7e6 f9df 	bl	800023c <__adddf3>
 8019e7e:	2200      	movs	r2, #0
 8019e80:	2300      	movs	r3, #0
 8019e82:	f7e6 fe21 	bl	8000ac8 <__aeabi_dcmpgt>
 8019e86:	b138      	cbz	r0, 8019e98 <floor+0x40>
 8019e88:	2c00      	cmp	r4, #0
 8019e8a:	da56      	bge.n	8019f3a <floor+0xe2>
 8019e8c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8019e90:	4325      	orrs	r5, r4
 8019e92:	d055      	beq.n	8019f40 <floor+0xe8>
 8019e94:	4c2e      	ldr	r4, [pc, #184]	; (8019f50 <floor+0xf8>)
 8019e96:	2500      	movs	r5, #0
 8019e98:	4623      	mov	r3, r4
 8019e9a:	462f      	mov	r7, r5
 8019e9c:	e025      	b.n	8019eea <floor+0x92>
 8019e9e:	4a2d      	ldr	r2, [pc, #180]	; (8019f54 <floor+0xfc>)
 8019ea0:	fa42 f806 	asr.w	r8, r2, r6
 8019ea4:	ea01 0208 	and.w	r2, r1, r8
 8019ea8:	4302      	orrs	r2, r0
 8019eaa:	d01e      	beq.n	8019eea <floor+0x92>
 8019eac:	a326      	add	r3, pc, #152	; (adr r3, 8019f48 <floor+0xf0>)
 8019eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb2:	f7e6 f9c3 	bl	800023c <__adddf3>
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	2300      	movs	r3, #0
 8019eba:	f7e6 fe05 	bl	8000ac8 <__aeabi_dcmpgt>
 8019ebe:	2800      	cmp	r0, #0
 8019ec0:	d0ea      	beq.n	8019e98 <floor+0x40>
 8019ec2:	2c00      	cmp	r4, #0
 8019ec4:	bfbe      	ittt	lt
 8019ec6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019eca:	4133      	asrlt	r3, r6
 8019ecc:	18e4      	addlt	r4, r4, r3
 8019ece:	ea24 0408 	bic.w	r4, r4, r8
 8019ed2:	2500      	movs	r5, #0
 8019ed4:	e7e0      	b.n	8019e98 <floor+0x40>
 8019ed6:	2e33      	cmp	r6, #51	; 0x33
 8019ed8:	dd0b      	ble.n	8019ef2 <floor+0x9a>
 8019eda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019ede:	d104      	bne.n	8019eea <floor+0x92>
 8019ee0:	4602      	mov	r2, r0
 8019ee2:	f7e6 f9ab 	bl	800023c <__adddf3>
 8019ee6:	4607      	mov	r7, r0
 8019ee8:	460b      	mov	r3, r1
 8019eea:	4638      	mov	r0, r7
 8019eec:	4619      	mov	r1, r3
 8019eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ef2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8019ef6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019efa:	fa28 f802 	lsr.w	r8, r8, r2
 8019efe:	ea10 0f08 	tst.w	r0, r8
 8019f02:	d0f2      	beq.n	8019eea <floor+0x92>
 8019f04:	a310      	add	r3, pc, #64	; (adr r3, 8019f48 <floor+0xf0>)
 8019f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f0a:	f7e6 f997 	bl	800023c <__adddf3>
 8019f0e:	2200      	movs	r2, #0
 8019f10:	2300      	movs	r3, #0
 8019f12:	f7e6 fdd9 	bl	8000ac8 <__aeabi_dcmpgt>
 8019f16:	2800      	cmp	r0, #0
 8019f18:	d0be      	beq.n	8019e98 <floor+0x40>
 8019f1a:	2c00      	cmp	r4, #0
 8019f1c:	da0a      	bge.n	8019f34 <floor+0xdc>
 8019f1e:	2e14      	cmp	r6, #20
 8019f20:	d101      	bne.n	8019f26 <floor+0xce>
 8019f22:	3401      	adds	r4, #1
 8019f24:	e006      	b.n	8019f34 <floor+0xdc>
 8019f26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019f2a:	2301      	movs	r3, #1
 8019f2c:	40b3      	lsls	r3, r6
 8019f2e:	441d      	add	r5, r3
 8019f30:	42af      	cmp	r7, r5
 8019f32:	d8f6      	bhi.n	8019f22 <floor+0xca>
 8019f34:	ea25 0508 	bic.w	r5, r5, r8
 8019f38:	e7ae      	b.n	8019e98 <floor+0x40>
 8019f3a:	2500      	movs	r5, #0
 8019f3c:	462c      	mov	r4, r5
 8019f3e:	e7ab      	b.n	8019e98 <floor+0x40>
 8019f40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019f44:	e7a8      	b.n	8019e98 <floor+0x40>
 8019f46:	bf00      	nop
 8019f48:	8800759c 	.word	0x8800759c
 8019f4c:	7e37e43c 	.word	0x7e37e43c
 8019f50:	bff00000 	.word	0xbff00000
 8019f54:	000fffff 	.word	0x000fffff

08019f58 <_init>:
 8019f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f5a:	bf00      	nop
 8019f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f5e:	bc08      	pop	{r3}
 8019f60:	469e      	mov	lr, r3
 8019f62:	4770      	bx	lr

08019f64 <_fini>:
 8019f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f66:	bf00      	nop
 8019f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f6a:	bc08      	pop	{r3}
 8019f6c:	469e      	mov	lr, r3
 8019f6e:	4770      	bx	lr
