
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000191e0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014e0  08019320  08019320  00029320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a800  0801a800  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a800  0801a800  0002a800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a808  0801a808  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a808  0801a808  0002a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801a810  0801a810  0002a810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000003e8  20000000  0801a818  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001ac8  200003e8  200003e8  000403e8  2**2
                  ALLOC
 12 RAM1_region   00000000  20001eb0  20001eb0  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001eb0  20001eb0  000403e8  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .comment      00000043  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY
 17 .debug_info   000673c5  00000000  00000000  0003e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000e4f1  00000000  00000000  000a5a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001d660  00000000  00000000  000b3efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000035f0  00000000  00000000  000d1560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00002bdd  00000000  00000000  000d4b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  000318e1  00000000  00000000  000d772d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00062dda  00000000  00000000  0010900e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000e9a7e  00000000  00000000  0016bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000a95c  00000000  00000000  00255868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000084  00000000  00000000  002601c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003e8 	.word	0x200003e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08019308 	.word	0x08019308

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003ec 	.word	0x200003ec
 800017c:	08019308 	.word	0x08019308

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_f2iz>:
 8000e54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e5c:	d30f      	bcc.n	8000e7e <__aeabi_f2iz+0x2a>
 8000e5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e66:	d90d      	bls.n	8000e84 <__aeabi_f2iz+0x30>
 8000e68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e74:	fa23 f002 	lsr.w	r0, r3, r2
 8000e78:	bf18      	it	ne
 8000e7a:	4240      	negne	r0, r0
 8000e7c:	4770      	bx	lr
 8000e7e:	f04f 0000 	mov.w	r0, #0
 8000e82:	4770      	bx	lr
 8000e84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e88:	d101      	bne.n	8000e8e <__aeabi_f2iz+0x3a>
 8000e8a:	0242      	lsls	r2, r0, #9
 8000e8c:	d105      	bne.n	8000e9a <__aeabi_f2iz+0x46>
 8000e8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e92:	bf08      	it	eq
 8000e94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f04f 0000 	mov.w	r0, #0
 8000e9e:	4770      	bx	lr

08000ea0 <__aeabi_uldivmod>:
 8000ea0:	b953      	cbnz	r3, 8000eb8 <__aeabi_uldivmod+0x18>
 8000ea2:	b94a      	cbnz	r2, 8000eb8 <__aeabi_uldivmod+0x18>
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	bf08      	it	eq
 8000ea8:	2800      	cmpeq	r0, #0
 8000eaa:	bf1c      	itt	ne
 8000eac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000eb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000eb4:	f000 b9a8 	b.w	8001208 <__aeabi_idiv0>
 8000eb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ebc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec0:	f000 f83e 	bl	8000f40 <__udivmoddi4>
 8000ec4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr

08000ed0 <__aeabi_d2lz>:
 8000ed0:	b538      	push	{r3, r4, r5, lr}
 8000ed2:	4605      	mov	r5, r0
 8000ed4:	460c      	mov	r4, r1
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	4621      	mov	r1, r4
 8000eda:	2200      	movs	r2, #0
 8000edc:	2300      	movs	r3, #0
 8000ede:	f7ff fdd5 	bl	8000a8c <__aeabi_dcmplt>
 8000ee2:	b928      	cbnz	r0, 8000ef0 <__aeabi_d2lz+0x20>
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eec:	f000 b80a 	b.w	8000f04 <__aeabi_d2ulz>
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ef6:	f000 f805 	bl	8000f04 <__aeabi_d2ulz>
 8000efa:	4240      	negs	r0, r0
 8000efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb4b 	bl	80005a8 <__aeabi_dmul>
 8000f12:	f7ff fe21 	bl	8000b58 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff facc 	bl	80004b4 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb42 	bl	80005a8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f984 	bl	8000238 <__aeabi_dsub>
 8000f30:	f7ff fe12 	bl	8000b58 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9e08      	ldr	r6, [sp, #32]
 8000f46:	460d      	mov	r5, r1
 8000f48:	4604      	mov	r4, r0
 8000f4a:	460f      	mov	r7, r1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d14a      	bne.n	8000fe6 <__udivmoddi4+0xa6>
 8000f50:	428a      	cmp	r2, r1
 8000f52:	4694      	mov	ip, r2
 8000f54:	d965      	bls.n	8001022 <__udivmoddi4+0xe2>
 8000f56:	fab2 f382 	clz	r3, r2
 8000f5a:	b143      	cbz	r3, 8000f6e <__udivmoddi4+0x2e>
 8000f5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f60:	f1c3 0220 	rsb	r2, r3, #32
 8000f64:	409f      	lsls	r7, r3
 8000f66:	fa20 f202 	lsr.w	r2, r0, r2
 8000f6a:	4317      	orrs	r7, r2
 8000f6c:	409c      	lsls	r4, r3
 8000f6e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f72:	fa1f f58c 	uxth.w	r5, ip
 8000f76:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f7a:	0c22      	lsrs	r2, r4, #16
 8000f7c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f80:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f84:	fb01 f005 	mul.w	r0, r1, r5
 8000f88:	4290      	cmp	r0, r2
 8000f8a:	d90a      	bls.n	8000fa2 <__udivmoddi4+0x62>
 8000f8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f90:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000f94:	f080 811b 	bcs.w	80011ce <__udivmoddi4+0x28e>
 8000f98:	4290      	cmp	r0, r2
 8000f9a:	f240 8118 	bls.w	80011ce <__udivmoddi4+0x28e>
 8000f9e:	3902      	subs	r1, #2
 8000fa0:	4462      	add	r2, ip
 8000fa2:	1a12      	subs	r2, r2, r0
 8000fa4:	b2a4      	uxth	r4, r4
 8000fa6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000faa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fb2:	fb00 f505 	mul.w	r5, r0, r5
 8000fb6:	42a5      	cmp	r5, r4
 8000fb8:	d90a      	bls.n	8000fd0 <__udivmoddi4+0x90>
 8000fba:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000fc2:	f080 8106 	bcs.w	80011d2 <__udivmoddi4+0x292>
 8000fc6:	42a5      	cmp	r5, r4
 8000fc8:	f240 8103 	bls.w	80011d2 <__udivmoddi4+0x292>
 8000fcc:	4464      	add	r4, ip
 8000fce:	3802      	subs	r0, #2
 8000fd0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fd4:	1b64      	subs	r4, r4, r5
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	b11e      	cbz	r6, 8000fe2 <__udivmoddi4+0xa2>
 8000fda:	40dc      	lsrs	r4, r3
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e9c6 4300 	strd	r4, r3, [r6]
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0xbc>
 8000fea:	2e00      	cmp	r6, #0
 8000fec:	f000 80ec 	beq.w	80011c8 <__udivmoddi4+0x288>
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	e9c6 0500 	strd	r0, r5, [r6]
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffc:	fab3 f183 	clz	r1, r3
 8001000:	2900      	cmp	r1, #0
 8001002:	d149      	bne.n	8001098 <__udivmoddi4+0x158>
 8001004:	42ab      	cmp	r3, r5
 8001006:	d302      	bcc.n	800100e <__udivmoddi4+0xce>
 8001008:	4282      	cmp	r2, r0
 800100a:	f200 80f7 	bhi.w	80011fc <__udivmoddi4+0x2bc>
 800100e:	1a84      	subs	r4, r0, r2
 8001010:	eb65 0203 	sbc.w	r2, r5, r3
 8001014:	2001      	movs	r0, #1
 8001016:	4617      	mov	r7, r2
 8001018:	2e00      	cmp	r6, #0
 800101a:	d0e2      	beq.n	8000fe2 <__udivmoddi4+0xa2>
 800101c:	e9c6 4700 	strd	r4, r7, [r6]
 8001020:	e7df      	b.n	8000fe2 <__udivmoddi4+0xa2>
 8001022:	b902      	cbnz	r2, 8001026 <__udivmoddi4+0xe6>
 8001024:	deff      	udf	#255	; 0xff
 8001026:	fab2 f382 	clz	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 808f 	bne.w	800114e <__udivmoddi4+0x20e>
 8001030:	1a8a      	subs	r2, r1, r2
 8001032:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001036:	fa1f fe8c 	uxth.w	lr, ip
 800103a:	2101      	movs	r1, #1
 800103c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001040:	fb07 2015 	mls	r0, r7, r5, r2
 8001044:	0c22      	lsrs	r2, r4, #16
 8001046:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800104a:	fb0e f005 	mul.w	r0, lr, r5
 800104e:	4290      	cmp	r0, r2
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x124>
 8001052:	eb1c 0202 	adds.w	r2, ip, r2
 8001056:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800105a:	d202      	bcs.n	8001062 <__udivmoddi4+0x122>
 800105c:	4290      	cmp	r0, r2
 800105e:	f200 80ca 	bhi.w	80011f6 <__udivmoddi4+0x2b6>
 8001062:	4645      	mov	r5, r8
 8001064:	1a12      	subs	r2, r2, r0
 8001066:	b2a4      	uxth	r4, r4
 8001068:	fbb2 f0f7 	udiv	r0, r2, r7
 800106c:	fb07 2210 	mls	r2, r7, r0, r2
 8001070:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001074:	fb0e fe00 	mul.w	lr, lr, r0
 8001078:	45a6      	cmp	lr, r4
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0x14e>
 800107c:	eb1c 0404 	adds.w	r4, ip, r4
 8001080:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001084:	d202      	bcs.n	800108c <__udivmoddi4+0x14c>
 8001086:	45a6      	cmp	lr, r4
 8001088:	f200 80ba 	bhi.w	8001200 <__udivmoddi4+0x2c0>
 800108c:	4610      	mov	r0, r2
 800108e:	eba4 040e 	sub.w	r4, r4, lr
 8001092:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001096:	e79f      	b.n	8000fd8 <__udivmoddi4+0x98>
 8001098:	f1c1 0720 	rsb	r7, r1, #32
 800109c:	408b      	lsls	r3, r1
 800109e:	fa22 fc07 	lsr.w	ip, r2, r7
 80010a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80010a6:	fa05 f401 	lsl.w	r4, r5, r1
 80010aa:	fa20 f307 	lsr.w	r3, r0, r7
 80010ae:	40fd      	lsrs	r5, r7
 80010b0:	4323      	orrs	r3, r4
 80010b2:	fa00 f901 	lsl.w	r9, r0, r1
 80010b6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80010ba:	fa1f fe8c 	uxth.w	lr, ip
 80010be:	fbb5 f8f0 	udiv	r8, r5, r0
 80010c2:	0c1c      	lsrs	r4, r3, #16
 80010c4:	fb00 5518 	mls	r5, r0, r8, r5
 80010c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010cc:	fb08 f50e 	mul.w	r5, r8, lr
 80010d0:	42a5      	cmp	r5, r4
 80010d2:	fa02 f201 	lsl.w	r2, r2, r1
 80010d6:	d90b      	bls.n	80010f0 <__udivmoddi4+0x1b0>
 80010d8:	eb1c 0404 	adds.w	r4, ip, r4
 80010dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80010e0:	f080 8087 	bcs.w	80011f2 <__udivmoddi4+0x2b2>
 80010e4:	42a5      	cmp	r5, r4
 80010e6:	f240 8084 	bls.w	80011f2 <__udivmoddi4+0x2b2>
 80010ea:	f1a8 0802 	sub.w	r8, r8, #2
 80010ee:	4464      	add	r4, ip
 80010f0:	1b64      	subs	r4, r4, r5
 80010f2:	b29d      	uxth	r5, r3
 80010f4:	fbb4 f3f0 	udiv	r3, r4, r0
 80010f8:	fb00 4413 	mls	r4, r0, r3, r4
 80010fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001100:	fb03 fe0e 	mul.w	lr, r3, lr
 8001104:	45a6      	cmp	lr, r4
 8001106:	d908      	bls.n	800111a <__udivmoddi4+0x1da>
 8001108:	eb1c 0404 	adds.w	r4, ip, r4
 800110c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8001110:	d26b      	bcs.n	80011ea <__udivmoddi4+0x2aa>
 8001112:	45a6      	cmp	lr, r4
 8001114:	d969      	bls.n	80011ea <__udivmoddi4+0x2aa>
 8001116:	3b02      	subs	r3, #2
 8001118:	4464      	add	r4, ip
 800111a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800111e:	fba0 8302 	umull	r8, r3, r0, r2
 8001122:	eba4 040e 	sub.w	r4, r4, lr
 8001126:	429c      	cmp	r4, r3
 8001128:	46c6      	mov	lr, r8
 800112a:	461d      	mov	r5, r3
 800112c:	d355      	bcc.n	80011da <__udivmoddi4+0x29a>
 800112e:	d052      	beq.n	80011d6 <__udivmoddi4+0x296>
 8001130:	b156      	cbz	r6, 8001148 <__udivmoddi4+0x208>
 8001132:	ebb9 030e 	subs.w	r3, r9, lr
 8001136:	eb64 0405 	sbc.w	r4, r4, r5
 800113a:	fa04 f707 	lsl.w	r7, r4, r7
 800113e:	40cb      	lsrs	r3, r1
 8001140:	40cc      	lsrs	r4, r1
 8001142:	431f      	orrs	r7, r3
 8001144:	e9c6 7400 	strd	r7, r4, [r6]
 8001148:	2100      	movs	r1, #0
 800114a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800114e:	f1c3 0120 	rsb	r1, r3, #32
 8001152:	fa02 fc03 	lsl.w	ip, r2, r3
 8001156:	fa20 f201 	lsr.w	r2, r0, r1
 800115a:	fa25 f101 	lsr.w	r1, r5, r1
 800115e:	409d      	lsls	r5, r3
 8001160:	432a      	orrs	r2, r5
 8001162:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001166:	fa1f fe8c 	uxth.w	lr, ip
 800116a:	fbb1 f0f7 	udiv	r0, r1, r7
 800116e:	fb07 1510 	mls	r5, r7, r0, r1
 8001172:	0c11      	lsrs	r1, r2, #16
 8001174:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001178:	fb00 f50e 	mul.w	r5, r0, lr
 800117c:	428d      	cmp	r5, r1
 800117e:	fa04 f403 	lsl.w	r4, r4, r3
 8001182:	d908      	bls.n	8001196 <__udivmoddi4+0x256>
 8001184:	eb1c 0101 	adds.w	r1, ip, r1
 8001188:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800118c:	d22f      	bcs.n	80011ee <__udivmoddi4+0x2ae>
 800118e:	428d      	cmp	r5, r1
 8001190:	d92d      	bls.n	80011ee <__udivmoddi4+0x2ae>
 8001192:	3802      	subs	r0, #2
 8001194:	4461      	add	r1, ip
 8001196:	1b49      	subs	r1, r1, r5
 8001198:	b292      	uxth	r2, r2
 800119a:	fbb1 f5f7 	udiv	r5, r1, r7
 800119e:	fb07 1115 	mls	r1, r7, r5, r1
 80011a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011a6:	fb05 f10e 	mul.w	r1, r5, lr
 80011aa:	4291      	cmp	r1, r2
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x280>
 80011ae:	eb1c 0202 	adds.w	r2, ip, r2
 80011b2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80011b6:	d216      	bcs.n	80011e6 <__udivmoddi4+0x2a6>
 80011b8:	4291      	cmp	r1, r2
 80011ba:	d914      	bls.n	80011e6 <__udivmoddi4+0x2a6>
 80011bc:	3d02      	subs	r5, #2
 80011be:	4462      	add	r2, ip
 80011c0:	1a52      	subs	r2, r2, r1
 80011c2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80011c6:	e739      	b.n	800103c <__udivmoddi4+0xfc>
 80011c8:	4631      	mov	r1, r6
 80011ca:	4630      	mov	r0, r6
 80011cc:	e709      	b.n	8000fe2 <__udivmoddi4+0xa2>
 80011ce:	4639      	mov	r1, r7
 80011d0:	e6e7      	b.n	8000fa2 <__udivmoddi4+0x62>
 80011d2:	4610      	mov	r0, r2
 80011d4:	e6fc      	b.n	8000fd0 <__udivmoddi4+0x90>
 80011d6:	45c1      	cmp	r9, r8
 80011d8:	d2aa      	bcs.n	8001130 <__udivmoddi4+0x1f0>
 80011da:	ebb8 0e02 	subs.w	lr, r8, r2
 80011de:	eb63 050c 	sbc.w	r5, r3, ip
 80011e2:	3801      	subs	r0, #1
 80011e4:	e7a4      	b.n	8001130 <__udivmoddi4+0x1f0>
 80011e6:	4645      	mov	r5, r8
 80011e8:	e7ea      	b.n	80011c0 <__udivmoddi4+0x280>
 80011ea:	4603      	mov	r3, r0
 80011ec:	e795      	b.n	800111a <__udivmoddi4+0x1da>
 80011ee:	4640      	mov	r0, r8
 80011f0:	e7d1      	b.n	8001196 <__udivmoddi4+0x256>
 80011f2:	46d0      	mov	r8, sl
 80011f4:	e77c      	b.n	80010f0 <__udivmoddi4+0x1b0>
 80011f6:	3d02      	subs	r5, #2
 80011f8:	4462      	add	r2, ip
 80011fa:	e733      	b.n	8001064 <__udivmoddi4+0x124>
 80011fc:	4608      	mov	r0, r1
 80011fe:	e70b      	b.n	8001018 <__udivmoddi4+0xd8>
 8001200:	4464      	add	r4, ip
 8001202:	3802      	subs	r0, #2
 8001204:	e743      	b.n	800108e <__udivmoddi4+0x14e>
 8001206:	bf00      	nop

08001208 <__aeabi_idiv0>:
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop

0800120c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800120c:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_ADC_Init+0x50>)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_ADC_Init+0x54>)
 8001212:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001218:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800121a:	2300      	movs	r3, #0
 800121c:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121e:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001220:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001222:	2204      	movs	r2, #4
 8001224:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001226:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001228:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800122a:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 800122c:	2201      	movs	r2, #1
 800122e:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001230:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001234:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001236:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001238:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800123c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001240:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001242:	2207      	movs	r2, #7
 8001244:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001246:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001248:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800124c:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800124e:	f002 fc09 	bl	8003a64 <HAL_ADC_Init>
 8001252:	b900      	cbnz	r0, 8001256 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001254:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001256:	f000 fbcb 	bl	80019f0 <Error_Handler>
}
 800125a:	e7fb      	b.n	8001254 <MX_ADC_Init+0x48>
 800125c:	20000404 	.word	0x20000404
 8001260:	40012400 	.word	0x40012400

08001264 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001264:	6802      	ldr	r2, [r0, #0]
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_ADC_MspInit+0x28>)
 8001268:	429a      	cmp	r2, r3
 800126a:	d000      	beq.n	800126e <HAL_ADC_MspInit+0xa>
 800126c:	4770      	bx	lr
{
 800126e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001274:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800127a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001282:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001284:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001286:	b002      	add	sp, #8
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40012400 	.word	0x40012400

08001290 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001290:	6802      	ldr	r2, [r0, #0]
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_ADC_MspDeInit+0x18>)
 8001294:	429a      	cmp	r2, r3
 8001296:	d000      	beq.n	800129a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001298:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800129a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800129e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80012a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012a4:	6613      	str	r3, [r2, #96]	; 0x60
 80012a6:	e7f7      	b.n	8001298 <HAL_ADC_MspDeInit+0x8>
 80012a8:	40012400 	.word	0x40012400

080012ac <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012ac:	b530      	push	{r4, r5, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	2300      	movs	r3, #0
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 80012ba:	f7ff ffa7 	bl	800120c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012be:	4816      	ldr	r0, [pc, #88]	; (8001318 <ADC_ReadChannels+0x6c>)
 80012c0:	f003 f808 	bl	80042d4 <HAL_ADCEx_Calibration_Start>
 80012c4:	b9f8      	cbnz	r0, 8001306 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80012c6:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012cc:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012ce:	a901      	add	r1, sp, #4
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <ADC_ReadChannels+0x6c>)
 80012d2:	f002 fd41 	bl	8003d58 <HAL_ADC_ConfigChannel>
 80012d6:	b9c8      	cbnz	r0, 800130c <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80012d8:	480f      	ldr	r0, [pc, #60]	; (8001318 <ADC_ReadChannels+0x6c>)
 80012da:	f002 feff 	bl	80040dc <HAL_ADC_Start>
 80012de:	b9c0      	cbnz	r0, 8001312 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80012e0:	4c0d      	ldr	r4, [pc, #52]	; (8001318 <ADC_ReadChannels+0x6c>)
 80012e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e6:	4620      	mov	r0, r4
 80012e8:	f002 fcd4 	bl	8003c94 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80012ec:	4620      	mov	r0, r4
 80012ee:	f002 ffd1 	bl	8004294 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80012f2:	4620      	mov	r0, r4
 80012f4:	f002 fd2d 	bl	8003d52 <HAL_ADC_GetValue>
 80012f8:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80012fa:	4620      	mov	r0, r4
 80012fc:	f002 ff6a 	bl	80041d4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001300:	4628      	mov	r0, r5
 8001302:	b005      	add	sp, #20
 8001304:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001306:	f000 fb73 	bl	80019f0 <Error_Handler>
 800130a:	e7dc      	b.n	80012c6 <ADC_ReadChannels+0x1a>
    Error_Handler();
 800130c:	f000 fb70 	bl	80019f0 <Error_Handler>
 8001310:	e7e2      	b.n	80012d8 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001312:	f000 fb6d 	bl	80019f0 <Error_Handler>
 8001316:	e7e3      	b.n	80012e0 <ADC_ReadChannels+0x34>
 8001318:	20000404 	.word	0x20000404

0800131c <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 800131c:	4b01      	ldr	r3, [pc, #4]	; (8001324 <SYS_InitMeasurement+0x8>)
 800131e:	4a02      	ldr	r2, [pc, #8]	; (8001328 <SYS_InitMeasurement+0xc>)
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	4770      	bx	lr
 8001324:	20000404 	.word	0x20000404
 8001328:	40012400 	.word	0x40012400

0800132c <SYS_GetBatteryLevel>:
{
 800132c:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <SYS_GetBatteryLevel+0x38>)
 8001330:	f7ff ffbc 	bl	80012ac <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001334:	b1a0      	cbz	r0, 8001360 <SYS_GetBatteryLevel+0x34>
 8001336:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <SYS_GetBatteryLevel+0x3c>)
 800133a:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 800133e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001342:	4290      	cmp	r0, r2
 8001344:	d007      	beq.n	8001356 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001346:	f640 42e4 	movw	r2, #3300	; 0xce4
 800134a:	fb02 f000 	mul.w	r0, r2, r0
 800134e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001352:	b280      	uxth	r0, r0
 8001354:	e005      	b.n	8001362 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <SYS_GetBatteryLevel+0x40>)
 8001358:	fbb0 f0f3 	udiv	r0, r0, r3
 800135c:	b280      	uxth	r0, r0
 800135e:	e000      	b.n	8001362 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001360:	2000      	movs	r0, #0
}
 8001362:	bd08      	pop	{r3, pc}
 8001364:	b4002000 	.word	0xb4002000
 8001368:	1fff7500 	.word	0x1fff7500
 800136c:	004c08d8 	.word	0x004c08d8

08001370 <SYS_GetTemperatureLevel>:
{
 8001370:	b510      	push	{r4, lr}
 8001372:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800137a:	f7ff ffd7 	bl	800132c <SYS_GetBatteryLevel>
 800137e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001380:	4821      	ldr	r0, [pc, #132]	; (8001408 <SYS_GetTemperatureLevel+0x98>)
 8001382:	f7ff ff93 	bl	80012ac <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <SYS_GetTemperatureLevel+0x9c>)
 8001388:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 800138c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001390:	428a      	cmp	r2, r1
 8001392:	d01d      	beq.n	80013d0 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001394:	fb00 f304 	mul.w	r3, r0, r4
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	481d      	ldr	r0, [pc, #116]	; (8001410 <SYS_GetTemperatureLevel+0xa0>)
 800139c:	fba0 0303 	umull	r0, r3, r0, r3
 80013a0:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	fb00 f303 	mul.w	r3, r0, r3
 80013aa:	1a52      	subs	r2, r2, r1
 80013ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80013b0:	331e      	adds	r3, #30
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 80013b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 80013c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 80013ca:	b200      	sxth	r0, r0
 80013cc:	b002      	add	sp, #8
 80013ce:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80013d0:	fb04 f000 	mul.w	r0, r4, r0
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <SYS_GetTemperatureLevel+0xa4>)
 80013d6:	fba3 2300 	umull	r2, r3, r3, r0
 80013da:	1ac4      	subs	r4, r0, r3
 80013dc:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 80013e0:	0adb      	lsrs	r3, r3, #11
 80013e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 80013ee:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <SYS_GetTemperatureLevel+0xa8>)
 80013f4:	fb82 1203 	smull	r1, r2, r2, r3
 80013f8:	17db      	asrs	r3, r3, #31
 80013fa:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 80013fe:	331e      	adds	r3, #30
 8001400:	b21b      	sxth	r3, r3
 8001402:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001406:	e7d7      	b.n	80013b8 <SYS_GetTemperatureLevel+0x48>
 8001408:	b0001000 	.word	0xb0001000
 800140c:	1fff7500 	.word	0x1fff7500
 8001410:	09ee009f 	.word	0x09ee009f
 8001414:	00100101 	.word	0x00100101
 8001418:	68db8bad 	.word	0x68db8bad

0800141c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800141c:	b500      	push	{lr}
 800141e:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001426:	f042 0204 	orr.w	r2, r2, #4
 800142a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800142c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800142e:	f002 0204 	and.w	r2, r2, #4
 8001432:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001434:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001438:	f042 0201 	orr.w	r2, r2, #1
 800143c:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800143e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001446:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2102      	movs	r1, #2
 800144c:	200f      	movs	r0, #15
 800144e:	f002 fff3 	bl	8004438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001452:	200f      	movs	r0, #15
 8001454:	f003 f828 	bl	80044a8 <HAL_NVIC_EnableIRQ>

}
 8001458:	b003      	add	sp, #12
 800145a:	f85d fb04 	ldr.w	pc, [sp], #4

0800145e <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 800145e:	2300      	movs	r3, #0
 8001460:	e001      	b.n	8001466 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001462:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001464:	3308      	adds	r3, #8
 8001466:	428b      	cmp	r3, r1
 8001468:	d20a      	bcs.n	8001480 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 800146a:	6842      	ldr	r2, [r0, #4]
 800146c:	f8d0 c000 	ldr.w	ip, [r0]
 8001470:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8001474:	bf08      	it	eq
 8001476:	f1bc 3fff 	cmpeq.w	ip, #4294967295	; 0xffffffff
 800147a:	d0f2      	beq.n	8001462 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 800147c:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 800147e:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001480:	2000      	movs	r0, #0
 8001482:	4770      	bx	lr

08001484 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001484:	b130      	cbz	r0, 8001494 <FLASH_IF_INT_Read+0x10>
{
 8001486:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001488:	b139      	cbz	r1, 800149a <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800148a:	b292      	uxth	r2, r2
 800148c:	f012 fec6 	bl	801421c <UTIL_MEM_cpy_8>
  return ret_status;
 8001490:	2000      	movs	r0, #0
}
 8001492:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001494:	f06f 0005 	mvn.w	r0, #5
}
 8001498:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 800149a:	f06f 0005 	mvn.w	r0, #5
 800149e:	e7f8      	b.n	8001492 <FLASH_IF_INT_Read+0xe>

080014a0 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80014a0:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80014a2:	f003 fa5d 	bl	8004960 <HAL_FLASH_Unlock>
 80014a6:	b978      	cbnz	r0, 80014c8 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <FLASH_IF_INT_Clear_Error+0x30>)
 80014aa:	699a      	ldr	r2, [r3, #24]
 80014ac:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80014b6:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80014b8:	f003 fa6a 	bl	8004990 <HAL_FLASH_Lock>
 80014bc:	b908      	cbnz	r0, 80014c2 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 80014be:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 80014c0:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80014c2:	f06f 0004 	mvn.w	r0, #4
 80014c6:	e7fb      	b.n	80014c0 <FLASH_IF_INT_Clear_Error+0x20>
 80014c8:	f06f 0004 	mvn.w	r0, #4
 80014cc:	e7f8      	b.n	80014c0 <FLASH_IF_INT_Clear_Error+0x20>
 80014ce:	bf00      	nop
 80014d0:	58004000 	.word	0x58004000

080014d4 <FLASH_IF_INT_Erase>:
{
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 80014dc:	2800      	cmp	r0, #0
 80014de:	d039      	beq.n	8001554 <FLASH_IF_INT_Erase+0x80>
 80014e0:	460e      	mov	r6, r1
 80014e2:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 80014e4:	f7ff ffdc 	bl	80014a0 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80014e8:	4605      	mov	r5, r0
 80014ea:	b110      	cbz	r0, 80014f2 <FLASH_IF_INT_Erase+0x1e>
}
 80014ec:	4628      	mov	r0, r5
 80014ee:	b004      	add	sp, #16
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80014f2:	f003 fa35 	bl	8004960 <HAL_FLASH_Unlock>
 80014f6:	bb80      	cbnz	r0, 800155a <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80014f8:	2302      	movs	r3, #2
 80014fa:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 80014fc:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001500:	4817      	ldr	r0, [pc, #92]	; (8001560 <FLASH_IF_INT_Erase+0x8c>)
 8001502:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8001506:	4a17      	ldr	r2, [pc, #92]	; (8001564 <FLASH_IF_INT_Erase+0x90>)
 8001508:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 800150c:	fbb3 fcf1 	udiv	ip, r3, r1
 8001510:	fb01 331c 	mls	r3, r1, ip, r3
 8001514:	0adb      	lsrs	r3, r3, #11
 8001516:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001518:	19a1      	adds	r1, r4, r6
 800151a:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800151e:	3901      	subs	r1, #1
 8001520:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	; 0x5e0
 8001524:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 8001528:	fbb1 f0f2 	udiv	r0, r1, r2
 800152c:	fb02 1110 	mls	r1, r2, r0, r1
 8001530:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8001534:	3301      	adds	r3, #1
 8001536:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001538:	a903      	add	r1, sp, #12
 800153a:	4668      	mov	r0, sp
 800153c:	f003 faf4 	bl	8004b28 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8001540:	b118      	cbz	r0, 800154a <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001542:	2802      	cmp	r0, #2
 8001544:	d004      	beq.n	8001550 <FLASH_IF_INT_Erase+0x7c>
 8001546:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 800154a:	f003 fa21 	bl	8004990 <HAL_FLASH_Lock>
 800154e:	e7cd      	b.n	80014ec <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001550:	2501      	movs	r5, #1
 8001552:	e7fa      	b.n	800154a <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8001554:	f06f 0505 	mvn.w	r5, #5
 8001558:	e7c8      	b.n	80014ec <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 800155a:	f06f 0504 	mvn.w	r5, #4
 800155e:	e7c5      	b.n	80014ec <FLASH_IF_INT_Erase+0x18>
 8001560:	1fff7000 	.word	0x1fff7000
 8001564:	03fffc00 	.word	0x03fffc00

08001568 <FLASH_IF_INT_Write>:
{
 8001568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800156c:	b089      	sub	sp, #36	; 0x24
 800156e:	9003      	str	r0, [sp, #12]
 8001570:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8001572:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001574:	2800      	cmp	r0, #0
 8001576:	f000 80a9 	beq.w	80016cc <FLASH_IF_INT_Write+0x164>
 800157a:	4683      	mov	fp, r0
 800157c:	2900      	cmp	r1, #0
 800157e:	f000 80a9 	beq.w	80016d4 <FLASH_IF_INT_Write+0x16c>
 8001582:	f012 0f07 	tst.w	r2, #7
 8001586:	f040 80a9 	bne.w	80016dc <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800158a:	f010 0307 	ands.w	r3, r0, #7
 800158e:	9305      	str	r3, [sp, #20]
 8001590:	f040 80a8 	bne.w	80016e4 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001594:	f7ff ff84 	bl	80014a0 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001598:	9002      	str	r0, [sp, #8]
 800159a:	b118      	cbz	r0, 80015a4 <FLASH_IF_INT_Write+0x3c>
}
 800159c:	9802      	ldr	r0, [sp, #8]
 800159e:	b009      	add	sp, #36	; 0x24
 80015a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80015a4:	f003 f9dc 	bl	8004960 <HAL_FLASH_Unlock>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	f040 809f 	bne.w	80016ec <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 80015ae:	9c03      	ldr	r4, [sp, #12]
 80015b0:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 80015b4:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <FLASH_IF_INT_Write+0x18c>)
 80015b6:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80015ba:	494f      	ldr	r1, [pc, #316]	; (80016f8 <FLASH_IF_INT_Write+0x190>)
 80015bc:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 80015c0:	fbb2 f3f1 	udiv	r3, r2, r1
 80015c4:	fb01 2213 	mls	r2, r1, r3, r2
 80015c8:	0ad3      	lsrs	r3, r2, #11
 80015ca:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80015cc:	9b04      	ldr	r3, [sp, #16]
 80015ce:	18e3      	adds	r3, r4, r3
 80015d0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80015d4:	3b01      	subs	r3, #1
 80015d6:	fbb3 f0f1 	udiv	r0, r3, r1
 80015da:	fb01 3310 	mls	r3, r1, r0, r3
 80015de:	0adb      	lsrs	r3, r3, #11
 80015e0:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 80015e4:	3301      	adds	r3, #1
 80015e6:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d906      	bls.n	80015fa <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80015ec:	f3c4 090a 	ubfx	r9, r4, #0, #11
 80015f0:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 80015f4:	f8dd a018 	ldr.w	sl, [sp, #24]
 80015f8:	e02f      	b.n	800165a <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 80015fa:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80015fe:	e7f9      	b.n	80015f4 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 8001600:	46c8      	mov	r8, r9
          current_source = uSource;
 8001602:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 8001604:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001606:	9d05      	ldr	r5, [sp, #20]
 8001608:	4545      	cmp	r5, r8
 800160a:	d215      	bcs.n	8001638 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800160c:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 800160e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001612:	4621      	mov	r1, r4
 8001614:	2001      	movs	r0, #1
 8001616:	f003 f9ff 	bl	8004a18 <HAL_FLASH_Program>
 800161a:	b950      	cbnz	r0, 8001632 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800161c:	6820      	ldr	r0, [r4, #0]
 800161e:	6862      	ldr	r2, [r4, #4]
 8001620:	59e9      	ldr	r1, [r5, r7]
 8001622:	6873      	ldr	r3, [r6, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	bf08      	it	eq
 8001628:	4288      	cmpeq	r0, r1
 800162a:	d141      	bne.n	80016b0 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 800162c:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800162e:	3508      	adds	r5, #8
 8001630:	e7ea      	b.n	8001608 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 8001632:	f06f 0303 	mvn.w	r3, #3
 8001636:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8001638:	9b02      	ldr	r3, [sp, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d13f      	bne.n	80016be <FLASH_IF_INT_Write+0x156>
        uDest += length;
 800163e:	44cb      	add	fp, r9
        uSource += length;
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	444b      	add	r3, r9
 8001644:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001646:	9b04      	ldr	r3, [sp, #16]
 8001648:	eba3 0909 	sub.w	r9, r3, r9
 800164c:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 8001650:	bf28      	it	cs
 8001652:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001656:	f10a 0a01 	add.w	sl, sl, #1
 800165a:	9b06      	ldr	r3, [sp, #24]
 800165c:	9a07      	ldr	r2, [sp, #28]
 800165e:	4413      	add	r3, r2
 8001660:	4553      	cmp	r3, sl
 8001662:	d92c      	bls.n	80016be <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001664:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8001668:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800166a:	4649      	mov	r1, r9
 800166c:	9803      	ldr	r0, [sp, #12]
 800166e:	f7ff fef6 	bl	800145e <FLASH_IF_INT_IsEmpty>
 8001672:	2800      	cmp	r0, #0
 8001674:	d0c4      	beq.n	8001600 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <FLASH_IF_INT_Write+0x194>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	b1e8      	cbz	r0, 80016b8 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800167c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001680:	4621      	mov	r1, r4
 8001682:	f7ff feff 	bl	8001484 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <FLASH_IF_INT_Write+0x194>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f3cb 000a 	ubfx	r0, fp, #0, #11
 800168e:	fa1f f289 	uxth.w	r2, r9
 8001692:	9901      	ldr	r1, [sp, #4]
 8001694:	4418      	add	r0, r3
 8001696:	f012 fdc1 	bl	801421c <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800169a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff ff18 	bl	80014d4 <FLASH_IF_INT_Erase>
 80016a4:	b970      	cbnz	r0, 80016c4 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <FLASH_IF_INT_Write+0x194>)
 80016a8:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 80016aa:	f44f 6800 	mov.w	r8, #2048	; 0x800
 80016ae:	e7aa      	b.n	8001606 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 80016b0:	f06f 0303 	mvn.w	r3, #3
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	e7bf      	b.n	8001638 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 80016b8:	f06f 0305 	mvn.w	r3, #5
 80016bc:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 80016be:	f003 f967 	bl	8004990 <HAL_FLASH_Lock>
 80016c2:	e76b      	b.n	800159c <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 80016c4:	f06f 0301 	mvn.w	r3, #1
 80016c8:	9302      	str	r3, [sp, #8]
 80016ca:	e7f8      	b.n	80016be <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 80016cc:	f06f 0305 	mvn.w	r3, #5
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	e763      	b.n	800159c <FLASH_IF_INT_Write+0x34>
 80016d4:	f06f 0305 	mvn.w	r3, #5
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	e75f      	b.n	800159c <FLASH_IF_INT_Write+0x34>
 80016dc:	f06f 0305 	mvn.w	r3, #5
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	e75b      	b.n	800159c <FLASH_IF_INT_Write+0x34>
 80016e4:	f06f 0305 	mvn.w	r3, #5
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	e757      	b.n	800159c <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 80016ec:	f06f 0304 	mvn.w	r3, #4
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	e753      	b.n	800159c <FLASH_IF_INT_Write+0x34>
 80016f4:	1fff7000 	.word	0x1fff7000
 80016f8:	03fffc00 	.word	0x03fffc00
 80016fc:	20000468 	.word	0x20000468

08001700 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <FLASH_IF_Init+0x8>)
 8001702:	6018      	str	r0, [r3, #0]
}
 8001704:	2000      	movs	r0, #0
 8001706:	4770      	bx	lr
 8001708:	20000468 	.word	0x20000468

0800170c <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800170c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001710:	d30e      	bcc.n	8001730 <FLASH_IF_Write+0x24>
{
 8001712:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <FLASH_IF_Write+0x30>)
 8001716:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <FLASH_IF_Write+0x34>)
 800171c:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001720:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001724:	3b01      	subs	r3, #1
 8001726:	4298      	cmp	r0, r3
 8001728:	d805      	bhi.n	8001736 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800172a:	f7ff ff1d 	bl	8001568 <FLASH_IF_INT_Write>
}
 800172e:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001734:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173a:	e7f8      	b.n	800172e <FLASH_IF_Write+0x22>
 800173c:	1fff7000 	.word	0x1fff7000
 8001740:	03fffc00 	.word	0x03fffc00

08001744 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001744:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001748:	d30e      	bcc.n	8001768 <FLASH_IF_Read+0x24>
{
 800174a:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <FLASH_IF_Read+0x30>)
 800174e:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <FLASH_IF_Read+0x34>)
 8001754:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001758:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800175c:	3b01      	subs	r3, #1
 800175e:	4299      	cmp	r1, r3
 8001760:	d805      	bhi.n	800176e <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001762:	f7ff fe8f 	bl	8001484 <FLASH_IF_INT_Read>
}
 8001766:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800176c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800176e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001772:	e7f8      	b.n	8001766 <FLASH_IF_Read+0x22>
 8001774:	1fff7000 	.word	0x1fff7000
 8001778:	03fffc00 	.word	0x03fffc00

0800177c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800177c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001780:	d30e      	bcc.n	80017a0 <FLASH_IF_Erase+0x24>
{
 8001782:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <FLASH_IF_Erase+0x30>)
 8001786:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <FLASH_IF_Erase+0x34>)
 800178c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001790:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001794:	3b01      	subs	r3, #1
 8001796:	4298      	cmp	r0, r3
 8001798:	d805      	bhi.n	80017a6 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800179a:	f7ff fe9b 	bl	80014d4 <FLASH_IF_INT_Erase>
}
 800179e:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80017a4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017aa:	e7f8      	b.n	800179e <FLASH_IF_Erase+0x22>
 80017ac:	1fff7000 	.word	0x1fff7000
 80017b0:	03fffc00 	.word	0x03fffc00

080017b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017b8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	2400      	movs	r4, #0
 80017bc:	9403      	str	r4, [sp, #12]
 80017be:	9404      	str	r4, [sp, #16]
 80017c0:	9405      	str	r4, [sp, #20]
 80017c2:	9406      	str	r4, [sp, #24]
 80017c4:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017cc:	f042 0202 	orr.w	r2, r2, #2
 80017d0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d4:	f002 0202 	and.w	r2, r2, #2
 80017d8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80017da:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017de:	f042 0204 	orr.w	r2, r2, #4
 80017e2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e6:	f002 0204 	and.w	r2, r2, #4
 80017ea:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80017ec:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80017fe:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001800:	4e2c      	ldr	r6, [pc, #176]	; (80018b4 <MX_GPIO_Init+0x100>)
 8001802:	4622      	mov	r2, r4
 8001804:	f64b 2102 	movw	r1, #47618	; 0xba02
 8001808:	4630      	mov	r0, r6
 800180a:	f003 fb1d 	bl	8004e48 <HAL_GPIO_WritePin>
                          |SD_CS_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800180e:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001812:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2501      	movs	r5, #1
 8001816:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181a:	f04f 0802 	mov.w	r8, #2
 800181e:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	a903      	add	r1, sp, #12
 8001824:	4630      	mov	r0, r6
 8001826:	f003 f9bf 	bl	8004ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 800182a:	f04f 0903 	mov.w	r9, #3
 800182e:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001832:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 8001836:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001838:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	a903      	add	r1, sp, #12
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f003 f9b2 	bl	8004ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001844:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001848:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	f8cd 9018 	str.w	r9, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001852:	a903      	add	r1, sp, #12
 8001854:	4630      	mov	r0, r6
 8001856:	f003 f9a7 	bl	8004ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800185a:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001860:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001864:	a903      	add	r1, sp, #12
 8001866:	4630      	mov	r0, r6
 8001868:	f003 f99e 	bl	8004ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800186c:	2340      	movs	r3, #64	; 0x40
 800186e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001870:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001872:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001874:	a903      	add	r1, sp, #12
 8001876:	4810      	ldr	r0, [pc, #64]	; (80018b8 <MX_GPIO_Init+0x104>)
 8001878:	f003 f996 	bl	8004ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800187c:	4622      	mov	r2, r4
 800187e:	4621      	mov	r1, r4
 8001880:	2006      	movs	r0, #6
 8001882:	f002 fdd9 	bl	8004438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001886:	2006      	movs	r0, #6
 8001888:	f002 fe0e 	bl	80044a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800188c:	4622      	mov	r2, r4
 800188e:	4621      	mov	r1, r4
 8001890:	2007      	movs	r0, #7
 8001892:	f002 fdd1 	bl	8004438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001896:	2007      	movs	r0, #7
 8001898:	f002 fe06 	bl	80044a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800189c:	4622      	mov	r2, r4
 800189e:	4621      	mov	r1, r4
 80018a0:	2016      	movs	r0, #22
 80018a2:	f002 fdc9 	bl	8004438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018a6:	2016      	movs	r0, #22
 80018a8:	f002 fdfe 	bl	80044a8 <HAL_NVIC_EnableIRQ>

}
 80018ac:	b009      	add	sp, #36	; 0x24
 80018ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018b2:	bf00      	nop
 80018b4:	48000400 	.word	0x48000400
 80018b8:	48000800 	.word	0x48000800

080018bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018bc:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018be:	4812      	ldr	r0, [pc, #72]	; (8001908 <MX_I2C1_Init+0x4c>)
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_I2C1_Init+0x50>)
 80018c2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_I2C1_Init+0x54>)
 80018c6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018cc:	2201      	movs	r2, #1
 80018ce:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018d2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018da:	f003 fad1 	bl	8004e80 <HAL_I2C_Init>
 80018de:	b950      	cbnz	r0, 80018f6 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018e0:	2100      	movs	r1, #0
 80018e2:	4809      	ldr	r0, [pc, #36]	; (8001908 <MX_I2C1_Init+0x4c>)
 80018e4:	f003 fb2a 	bl	8004f3c <HAL_I2CEx_ConfigAnalogFilter>
 80018e8:	b940      	cbnz	r0, 80018fc <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018ea:	2100      	movs	r1, #0
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <MX_I2C1_Init+0x4c>)
 80018ee:	f003 fb53 	bl	8004f98 <HAL_I2CEx_ConfigDigitalFilter>
 80018f2:	b930      	cbnz	r0, 8001902 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018f6:	f000 f87b 	bl	80019f0 <Error_Handler>
 80018fa:	e7f1      	b.n	80018e0 <MX_I2C1_Init+0x24>
    Error_Handler();
 80018fc:	f000 f878 	bl	80019f0 <Error_Handler>
 8001900:	e7f3      	b.n	80018ea <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001902:	f000 f875 	bl	80019f0 <Error_Handler>
}
 8001906:	e7f5      	b.n	80018f4 <MX_I2C1_Init+0x38>
 8001908:	2000046c 	.word	0x2000046c
 800190c:	40005400 	.word	0x40005400
 8001910:	20303e5d 	.word	0x20303e5d

08001914 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	b097      	sub	sp, #92	; 0x5c
 8001918:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	2100      	movs	r1, #0
 800191c:	9111      	str	r1, [sp, #68]	; 0x44
 800191e:	9112      	str	r1, [sp, #72]	; 0x48
 8001920:	9113      	str	r1, [sp, #76]	; 0x4c
 8001922:	9114      	str	r1, [sp, #80]	; 0x50
 8001924:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001926:	2238      	movs	r2, #56	; 0x38
 8001928:	a803      	add	r0, sp, #12
 800192a:	f014 fecb 	bl	80166c4 <memset>
  if(i2cHandle->Instance==I2C1)
 800192e:	6822      	ldr	r2, [r4, #0]
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_I2C_MspInit+0xb0>)
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001936:	b017      	add	sp, #92	; 0x5c
 8001938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800193a:	2340      	movs	r3, #64	; 0x40
 800193c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800193e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001942:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001944:	a803      	add	r0, sp, #12
 8001946:	f004 f901 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 800194a:	2800      	cmp	r0, #0
 800194c:	d137      	bne.n	80019be <HAL_I2C_MspInit+0xaa>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800194e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001952:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800195a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001962:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001964:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800196c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001974:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197a:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197c:	2712      	movs	r7, #18
 800197e:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2500      	movs	r5, #0
 8001982:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001986:	2604      	movs	r6, #4
 8001988:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	a911      	add	r1, sp, #68	; 0x44
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f003 f90a 	bl	8004ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001998:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199a:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019a0:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	a911      	add	r1, sp, #68	; 0x44
 80019a4:	4808      	ldr	r0, [pc, #32]	; (80019c8 <HAL_I2C_MspInit+0xb4>)
 80019a6:	f003 f8ff 	bl	8004ba8 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b0:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80019ba:	9b00      	ldr	r3, [sp, #0]
}
 80019bc:	e7bb      	b.n	8001936 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80019be:	f000 f817 	bl	80019f0 <Error_Handler>
 80019c2:	e7c4      	b.n	800194e <HAL_I2C_MspInit+0x3a>
 80019c4:	40005400 	.word	0x40005400
 80019c8:	48000400 	.word	0x48000400

080019cc <UART_SendFixedStringEveryFiveSeconds>:
    }
}


void UART_SendFixedStringEveryFiveSeconds(UART_HandleTypeDef *huart)
{
 80019cc:	b508      	push	{r3, lr}
    const char *str = "Hello, UART Receiver!";  // Hardcoded test string
    uint16_t len = strlen(str);  // Calculate the string length

    while (1) {  // Infinite loop to send the string continuously
    	  HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	220a      	movs	r2, #10
 80019d4:	4904      	ldr	r1, [pc, #16]	; (80019e8 <UART_SendFixedStringEveryFiveSeconds+0x1c>)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <UART_SendFixedStringEveryFiveSeconds+0x20>)
 80019d8:	f006 fa7d 	bl	8007ed6 <HAL_UART_Transmit>
    	  HAL_Delay(10000);
 80019dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80019e0:	f000 fb2a 	bl	8002038 <HAL_Delay>
    while (1) {  // Infinite loop to send the string continuously
 80019e4:	e7f3      	b.n	80019ce <UART_SendFixedStringEveryFiveSeconds+0x2>
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000
 80019ec:	2000069c 	.word	0x2000069c

080019f0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <Error_Handler+0x2>

080019f4 <SystemClock_Config>:
{
 80019f4:	b510      	push	{r4, lr}
 80019f6:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f8:	2248      	movs	r2, #72	; 0x48
 80019fa:	2100      	movs	r1, #0
 80019fc:	a808      	add	r0, sp, #32
 80019fe:	f014 fe61 	bl	80166c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a02:	2400      	movs	r4, #0
 8001a04:	9401      	str	r4, [sp, #4]
 8001a06:	9402      	str	r4, [sp, #8]
 8001a08:	9403      	str	r4, [sp, #12]
 8001a0a:	9404      	str	r4, [sp, #16]
 8001a0c:	9405      	str	r4, [sp, #20]
 8001a0e:	9406      	str	r4, [sp, #24]
 8001a10:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001a12:	f003 faed 	bl	8004ff0 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a1e:	f023 0318 	bic.w	r3, r3, #24
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a40:	2324      	movs	r3, #36	; 0x24
 8001a42:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a44:	2381      	movs	r3, #129	; 0x81
 8001a46:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a4c:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001a4e:	23b0      	movs	r3, #176	; 0xb0
 8001a50:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a52:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a54:	a808      	add	r0, sp, #32
 8001a56:	f003 fbf3 	bl	8005240 <HAL_RCC_OscConfig>
 8001a5a:	b970      	cbnz	r0, 8001a7a <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001a5c:	234f      	movs	r3, #79	; 0x4f
 8001a5e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a60:	2300      	movs	r3, #0
 8001a62:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a64:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a66:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a68:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001a6a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	a801      	add	r0, sp, #4
 8001a70:	f003 ff18 	bl	80058a4 <HAL_RCC_ClockConfig>
 8001a74:	b918      	cbnz	r0, 8001a7e <SystemClock_Config+0x8a>
}
 8001a76:	b01a      	add	sp, #104	; 0x68
 8001a78:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001a7a:	f7ff ffb9 	bl	80019f0 <Error_Handler>
    Error_Handler();
 8001a7e:	f7ff ffb7 	bl	80019f0 <Error_Handler>
	...

08001a84 <main>:
 {
 8001a84:	b508      	push	{r3, lr}
  HAL_Init();
 8001a86:	f001 ffad 	bl	80039e4 <HAL_Init>
  SystemClock_Config();
 8001a8a:	f7ff ffb3 	bl	80019f4 <SystemClock_Config>
  MX_GPIO_Init();
 8001a8e:	f7ff fe91 	bl	80017b4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001a92:	f001 fa77 	bl	8002f84 <MX_LoRaWAN_Init>
  MX_SPI1_Init();
 8001a96:	f000 f88b 	bl	8001bb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001a9a:	f000 f8af 	bl	8001bfc <MX_SPI2_Init>
  MX_FATFS_Init();
 8001a9e:	f000 fec3 	bl	8002828 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001aa2:	f7ff ff0b 	bl	80018bc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001aa6:	f000 fccd 	bl	8002444 <MX_USART1_UART_Init>
	  UART_SendFixedStringEveryFiveSeconds(&huart1);
 8001aaa:	4801      	ldr	r0, [pc, #4]	; (8001ab0 <main+0x2c>)
 8001aac:	f7ff ff8e 	bl	80019cc <UART_SendFixedStringEveryFiveSeconds>
 8001ab0:	2000069c 	.word	0x2000069c

08001ab4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ab4:	b500      	push	{lr}
 8001ab6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001ab8:	222c      	movs	r2, #44	; 0x2c
 8001aba:	2100      	movs	r1, #0
 8001abc:	a801      	add	r0, sp, #4
 8001abe:	f014 fe01 	bl	80166c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ac2:	4819      	ldr	r0, [pc, #100]	; (8001b28 <MX_RTC_Init+0x74>)
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <MX_RTC_Init+0x78>)
 8001ac6:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001ac8:	231f      	movs	r3, #31
 8001aca:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ad0:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ad2:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad8:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001ada:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ae2:	f004 fa43 	bl	8005f6c <HAL_RTC_Init>
 8001ae6:	b9a8      	cbnz	r0, 8001b14 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001ae8:	480f      	ldr	r0, [pc, #60]	; (8001b28 <MX_RTC_Init+0x74>)
 8001aea:	f004 fb81 	bl	80061f0 <HAL_RTCEx_SetSSRU_IT>
 8001aee:	b9a0      	cbnz	r0, 8001b1a <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001af0:	2200      	movs	r2, #0
 8001af2:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001af4:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001af6:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001af8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001afc:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b02:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001b04:	a901      	add	r1, sp, #4
 8001b06:	4808      	ldr	r0, [pc, #32]	; (8001b28 <MX_RTC_Init+0x74>)
 8001b08:	f004 fa96 	bl	8006038 <HAL_RTC_SetAlarm_IT>
 8001b0c:	b940      	cbnz	r0, 8001b20 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b0e:	b00d      	add	sp, #52	; 0x34
 8001b10:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b14:	f7ff ff6c 	bl	80019f0 <Error_Handler>
 8001b18:	e7e6      	b.n	8001ae8 <MX_RTC_Init+0x34>
    Error_Handler();
 8001b1a:	f7ff ff69 	bl	80019f0 <Error_Handler>
 8001b1e:	e7e7      	b.n	8001af0 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001b20:	f7ff ff66 	bl	80019f0 <Error_Handler>
}
 8001b24:	e7f3      	b.n	8001b0e <MX_RTC_Init+0x5a>
 8001b26:	bf00      	nop
 8001b28:	200004c0 	.word	0x200004c0
 8001b2c:	40002800 	.word	0x40002800

08001b30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b30:	b510      	push	{r4, lr}
 8001b32:	b090      	sub	sp, #64	; 0x40
 8001b34:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b36:	2238      	movs	r2, #56	; 0x38
 8001b38:	2100      	movs	r1, #0
 8001b3a:	a802      	add	r0, sp, #8
 8001b3c:	f014 fdc2 	bl	80166c4 <memset>
  if(rtcHandle->Instance==RTC)
 8001b40:	6822      	ldr	r2, [r4, #0]
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_RTC_MspInit+0x7c>)
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b48:	b010      	add	sp, #64	; 0x40
 8001b4a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b50:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b56:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b58:	a802      	add	r0, sp, #8
 8001b5a:	f003 fff7 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	bb08      	cbnz	r0, 8001ba4 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b76:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b80:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	4611      	mov	r1, r2
 8001b86:	2002      	movs	r0, #2
 8001b88:	f002 fc56 	bl	8004438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f002 fc8b 	bl	80044a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	4611      	mov	r1, r2
 8001b96:	202a      	movs	r0, #42	; 0x2a
 8001b98:	f002 fc4e 	bl	8004438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b9c:	202a      	movs	r0, #42	; 0x2a
 8001b9e:	f002 fc83 	bl	80044a8 <HAL_NVIC_EnableIRQ>
}
 8001ba2:	e7d1      	b.n	8001b48 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001ba4:	f7ff ff24 	bl	80019f0 <Error_Handler>
 8001ba8:	e7da      	b.n	8001b60 <HAL_RTC_MspInit+0x30>
 8001baa:	bf00      	nop
 8001bac:	40002800 	.word	0x40002800

08001bb0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bb0:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bb2:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <MX_SPI1_Init+0x44>)
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_SPI1_Init+0x48>)
 8001bb6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bb8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001bbc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bc6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bca:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001bd2:	2238      	movs	r2, #56	; 0x38
 8001bd4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bda:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bdc:	2207      	movs	r2, #7
 8001bde:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001be0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001be2:	2308      	movs	r3, #8
 8001be4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001be6:	f004 fc66 	bl	80064b6 <HAL_SPI_Init>
 8001bea:	b900      	cbnz	r0, 8001bee <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bec:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bee:	f7ff feff 	bl	80019f0 <Error_Handler>
}
 8001bf2:	e7fb      	b.n	8001bec <MX_SPI1_Init+0x3c>
 8001bf4:	200004f8 	.word	0x200004f8
 8001bf8:	40013000 	.word	0x40013000

08001bfc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bfc:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001bfe:	4810      	ldr	r0, [pc, #64]	; (8001c40 <MX_SPI2_Init+0x44>)
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <MX_SPI2_Init+0x48>)
 8001c02:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c08:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c12:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c14:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c16:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c1e:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c20:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c22:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c24:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c26:	2207      	movs	r2, #7
 8001c28:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c2a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c30:	f004 fc41 	bl	80064b6 <HAL_SPI_Init>
 8001c34:	b900      	cbnz	r0, 8001c38 <MX_SPI2_Init+0x3c>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c36:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c38:	f7ff feda 	bl	80019f0 <Error_Handler>
}
 8001c3c:	e7fb      	b.n	8001c36 <MX_SPI2_Init+0x3a>
 8001c3e:	bf00      	nop
 8001c40:	2000055c 	.word	0x2000055c
 8001c44:	40003800 	.word	0x40003800

08001c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	b09b      	sub	sp, #108	; 0x6c
 8001c4c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	2100      	movs	r1, #0
 8001c50:	9115      	str	r1, [sp, #84]	; 0x54
 8001c52:	9116      	str	r1, [sp, #88]	; 0x58
 8001c54:	9117      	str	r1, [sp, #92]	; 0x5c
 8001c56:	9118      	str	r1, [sp, #96]	; 0x60
 8001c58:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5a:	2238      	movs	r2, #56	; 0x38
 8001c5c:	a807      	add	r0, sp, #28
 8001c5e:	f014 fd31 	bl	80166c4 <memset>
  if(spiHandle->Instance==SPI1)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_SPI_MspInit+0x14c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d004      	beq.n	8001c74 <HAL_SPI_MspInit+0x2c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8001c6a:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <HAL_SPI_MspInit+0x150>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d037      	beq.n	8001ce0 <HAL_SPI_MspInit+0x98>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c70:	b01b      	add	sp, #108	; 0x6c
 8001c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c82:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c86:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001c88:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c8c:	f042 0202 	orr.w	r2, r2, #2
 8001c90:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c94:	f002 0202 	and.w	r2, r2, #2
 8001c98:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001c9a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001cac:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2602      	movs	r6, #2
 8001cb4:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2501      	movs	r5, #1
 8001cb8:	9517      	str	r5, [sp, #92]	; 0x5c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cba:	2405      	movs	r4, #5
 8001cbc:	9419      	str	r4, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	a915      	add	r1, sp, #84	; 0x54
 8001cc0:	4836      	ldr	r0, [pc, #216]	; (8001d9c <HAL_SPI_MspInit+0x154>)
 8001cc2:	f002 ff71 	bl	8004ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc6:	23c0      	movs	r3, #192	; 0xc0
 8001cc8:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ccc:	9517      	str	r5, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd2:	9419      	str	r4, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	a915      	add	r1, sp, #84	; 0x54
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cda:	f002 ff65 	bl	8004ba8 <HAL_GPIO_Init>
 8001cde:	e7c7      	b.n	8001c70 <HAL_SPI_MspInit+0x28>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce8:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cea:	a807      	add	r0, sp, #28
 8001cec:	f003 ff2e 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	d14b      	bne.n	8001d8c <HAL_SPI_MspInit+0x144>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cfe:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d06:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
 8001d08:	9a06      	ldr	r2, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d0c:	f042 0202 	orr.w	r2, r2, #2
 8001d10:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d14:	f002 0202 	and.w	r2, r2, #2
 8001d18:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8001d1a:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d26:	f002 0201 	and.w	r2, r2, #1
 8001d2a:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001d2c:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d30:	f042 0204 	orr.w	r2, r2, #4
 8001d34:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001d3e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d44:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2402      	movs	r4, #2
 8001d48:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4a:	2601      	movs	r6, #1
 8001d4c:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2500      	movs	r5, #0
 8001d50:	9518      	str	r5, [sp, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d52:	2705      	movs	r7, #5
 8001d54:	9719      	str	r7, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	a915      	add	r1, sp, #84	; 0x54
 8001d58:	4810      	ldr	r0, [pc, #64]	; (8001d9c <HAL_SPI_MspInit+0x154>)
 8001d5a:	f002 ff25 	bl	8004ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d62:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d66:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	9518      	str	r5, [sp, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d6a:	9719      	str	r7, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	a915      	add	r1, sp, #84	; 0x54
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f002 ff19 	bl	8004ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d76:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7a:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	9518      	str	r5, [sp, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	9319      	str	r3, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d82:	a915      	add	r1, sp, #84	; 0x54
 8001d84:	4806      	ldr	r0, [pc, #24]	; (8001da0 <HAL_SPI_MspInit+0x158>)
 8001d86:	f002 ff0f 	bl	8004ba8 <HAL_GPIO_Init>
}
 8001d8a:	e771      	b.n	8001c70 <HAL_SPI_MspInit+0x28>
      Error_Handler();
 8001d8c:	f7ff fe30 	bl	80019f0 <Error_Handler>
 8001d90:	e7b0      	b.n	8001cf4 <HAL_SPI_MspInit+0xac>
 8001d92:	bf00      	nop
 8001d94:	40013000 	.word	0x40013000
 8001d98:	40003800 	.word	0x40003800
 8001d9c:	48000400 	.word	0x48000400
 8001da0:	48000800 	.word	0x48000800

08001da4 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da4:	4770      	bx	lr

08001da6 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <NMI_Handler>

08001da8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <HardFault_Handler>

08001daa <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <MemManage_Handler>

08001dac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <BusFault_Handler>

08001dae <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <UsageFault_Handler>

08001db0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db0:	4770      	bx	lr

08001db2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db2:	4770      	bx	lr

08001db4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db4:	4770      	bx	lr

08001db6 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db6:	4770      	bx	lr

08001db8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001dba:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001dbc:	f004 fa44 	bl	8006248 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001dc0:	bd08      	pop	{r3, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200004c0 	.word	0x200004c0

08001dc8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f003 f84a 	bl	8004e64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dd0:	bd08      	pop	{r3, pc}

08001dd2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001dd2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f003 f845 	bl	8004e64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001dda:	bd08      	pop	{r3, pc}

08001ddc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ddc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001dde:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DMA1_Channel1_IRQHandler+0xc>)
 8001de0:	f002 fd0c 	bl	80047fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001de4:	bd08      	pop	{r3, pc}
 8001de6:	bf00      	nop
 8001de8:	200005dc 	.word	0x200005dc

08001dec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001dee:	4802      	ldr	r0, [pc, #8]	; (8001df8 <DMA1_Channel2_IRQHandler+0xc>)
 8001df0:	f002 fd04 	bl	80047fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001df4:	bd08      	pop	{r3, pc}
 8001df6:	bf00      	nop
 8001df8:	2000063c 	.word	0x2000063c

08001dfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001dfe:	2040      	movs	r0, #64	; 0x40
 8001e00:	f003 f830 	bl	8004e64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e04:	bd08      	pop	{r3, pc}
	...

08001e08 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e0a:	4802      	ldr	r0, [pc, #8]	; (8001e14 <RTC_Alarm_IRQHandler+0xc>)
 8001e0c:	f004 f828 	bl	8005e60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e10:	bd08      	pop	{r3, pc}
 8001e12:	bf00      	nop
 8001e14:	200004c0 	.word	0x200004c0

08001e18 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e1a:	4802      	ldr	r0, [pc, #8]	; (8001e24 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001e1c:	f005 f992 	bl	8007144 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e20:	bd08      	pop	{r3, pc}
 8001e22:	bf00      	nop
 8001e24:	200005c0 	.word	0x200005c0

08001e28 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e28:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_SUBGHZ_Init+0x18>)
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e30:	f004 ff0a 	bl	8006c48 <HAL_SUBGHZ_Init>
 8001e34:	b900      	cbnz	r0, 8001e38 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e36:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e38:	f7ff fdda 	bl	80019f0 <Error_Handler>
}
 8001e3c:	e7fb      	b.n	8001e36 <MX_SUBGHZ_Init+0xe>
 8001e3e:	bf00      	nop
 8001e40:	200005c0 	.word	0x200005c0

08001e44 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e44:	b500      	push	{lr}
 8001e46:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e5c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4611      	mov	r1, r2
 8001e62:	2032      	movs	r0, #50	; 0x32
 8001e64:	f002 fae8 	bl	8004438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e68:	2032      	movs	r0, #50	; 0x32
 8001e6a:	f002 fb1d 	bl	80044a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e6e:	b003      	add	sp, #12
 8001e70:	f85d fb04 	ldr.w	pc, [sp], #4

08001e74 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001e74:	b40c      	push	{r2, r3}
 8001e76:	b500      	push	{lr}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	ab04      	add	r3, sp, #16
 8001e7c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001e80:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001e82:	f012 fd0d 	bl	80148a0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001e86:	b003      	add	sp, #12
 8001e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e8c:	b002      	add	sp, #8
 8001e8e:	4770      	bx	lr

08001e90 <TimestampNow>:
{
 8001e90:	b530      	push	{r4, r5, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	4604      	mov	r4, r0
 8001e96:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001e98:	a802      	add	r0, sp, #8
 8001e9a:	f012 fa75 	bl	8014388 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001e9e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	9b02      	ldr	r3, [sp, #8]
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <TimestampNow+0x2c>)
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff ffe2 	bl	8001e74 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f7fe f9b5 	bl	8000220 <strlen>
 8001eb6:	8028      	strh	r0, [r5, #0]
}
 8001eb8:	b005      	add	sp, #20
 8001eba:	bd30      	pop	{r4, r5, pc}
 8001ebc:	08019390 	.word	0x08019390

08001ec0 <SystemApp_Init>:
{
 8001ec0:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec6:	6893      	ldr	r3, [r2, #8]
 8001ec8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ecc:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001ece:	f012 fadf 	bl	8014490 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001ed2:	2401      	movs	r4, #1
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <SystemApp_Init+0x4c>)
 8001ed6:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001ed8:	f000 f8b8 	bl	800204c <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001edc:	f012 f838 	bl	8013f50 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001ee0:	480b      	ldr	r0, [pc, #44]	; (8001f10 <SystemApp_Init+0x50>)
 8001ee2:	f012 f84f 	bl	8013f84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <SystemApp_Init+0x54>)
 8001ee8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001eec:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001eee:	2002      	movs	r0, #2
 8001ef0:	f012 f84e 	bl	8013f90 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001ef4:	f7ff fa12 	bl	800131c <SYS_InitMeasurement>
  EnvSensors_Init();
 8001ef8:	f000 f908 	bl	800210c <EnvSensors_Init>
  UTIL_LPM_Init();
 8001efc:	f012 f958 	bl	80141b0 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f00:	4621      	mov	r1, r4
 8001f02:	4620      	mov	r0, r4
 8001f04:	f012 f974 	bl	80141f0 <UTIL_LPM_SetOffMode>
}
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200005cc 	.word	0x200005cc
 8001f10:	08001e91 	.word	0x08001e91
 8001f14:	58004000 	.word	0x58004000

08001f18 <GetBatteryLevel>:
{
 8001f18:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f1a:	f7ff fa07 	bl	800132c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001f1e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f22:	4298      	cmp	r0, r3
 8001f24:	d80d      	bhi.n	8001f42 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001f26:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001f2a:	d30c      	bcc.n	8001f46 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001f2c:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001f30:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001f34:	0040      	lsls	r0, r0, #1
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <GetBatteryLevel+0x34>)
 8001f38:	fba3 3000 	umull	r3, r0, r3, r0
 8001f3c:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001f40:	e000      	b.n	8001f44 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001f42:	20fe      	movs	r0, #254	; 0xfe
}
 8001f44:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001f46:	2000      	movs	r0, #0
 8001f48:	e7fc      	b.n	8001f44 <GetBatteryLevel+0x2c>
 8001f4a:	bf00      	nop
 8001f4c:	1b4e81b5 	.word	0x1b4e81b5

08001f50 <GetTemperatureLevel>:
{
 8001f50:	b500      	push	{lr}
 8001f52:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001f54:	4668      	mov	r0, sp
 8001f56:	f000 f8bd 	bl	80020d4 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001f5a:	9801      	ldr	r0, [sp, #4]
 8001f5c:	f7fe ff7a 	bl	8000e54 <__aeabi_f2iz>
}
 8001f60:	b200      	sxth	r0, r0
 8001f62:	b007      	add	sp, #28
 8001f64:	f85d fb04 	ldr.w	pc, [sp], #4

08001f68 <GetUniqueId>:
{
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <GetUniqueId+0x68>)
 8001f6e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f76:	d013      	beq.n	8001fa0 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001f78:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001f7a:	0a1a      	lsrs	r2, r3, #8
 8001f7c:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001f7e:	0c1a      	lsrs	r2, r3, #16
 8001f80:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001f82:	0e1b      	lsrs	r3, r3, #24
 8001f84:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <GetUniqueId+0x68>)
 8001f88:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001f8c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f8e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001f92:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001f94:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001f96:	0c1a      	lsrs	r2, r3, #16
 8001f98:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001f9a:	0e1b      	lsrs	r3, r3, #24
 8001f9c:	7003      	strb	r3, [r0, #0]
}
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001fa0:	f001 fd36 	bl	8003a10 <HAL_GetUIDw0>
 8001fa4:	4605      	mov	r5, r0
 8001fa6:	f001 fd3f 	bl	8003a28 <HAL_GetUIDw2>
 8001faa:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001fac:	f001 fd36 	bl	8003a1c <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001fb0:	0e2b      	lsrs	r3, r5, #24
 8001fb2:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001fb4:	0c2b      	lsrs	r3, r5, #16
 8001fb6:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001fb8:	0a2b      	lsrs	r3, r5, #8
 8001fba:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001fbc:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001fbe:	0e03      	lsrs	r3, r0, #24
 8001fc0:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001fc2:	0c03      	lsrs	r3, r0, #16
 8001fc4:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001fc6:	0a03      	lsrs	r3, r0, #8
 8001fc8:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001fca:	7020      	strb	r0, [r4, #0]
 8001fcc:	e7e7      	b.n	8001f9e <GetUniqueId+0x36>
 8001fce:	bf00      	nop
 8001fd0:	1fff7000 	.word	0x1fff7000

08001fd4 <GetDevAddr>:
{
 8001fd4:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <GetDevAddr+0x2c>)
 8001fd8:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001fdc:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fe2:	d000      	beq.n	8001fe6 <GetDevAddr+0x12>
}
 8001fe4:	bd38      	pop	{r3, r4, r5, pc}
 8001fe6:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001fe8:	f001 fd12 	bl	8003a10 <HAL_GetUIDw0>
 8001fec:	4605      	mov	r5, r0
 8001fee:	f001 fd15 	bl	8003a1c <HAL_GetUIDw1>
 8001ff2:	4045      	eors	r5, r0
 8001ff4:	f001 fd18 	bl	8003a28 <HAL_GetUIDw2>
 8001ff8:	4045      	eors	r5, r0
 8001ffa:	6025      	str	r5, [r4, #0]
}
 8001ffc:	e7f2      	b.n	8001fe4 <GetDevAddr+0x10>
 8001ffe:	bf00      	nop
 8002000:	1fff7000 	.word	0x1fff7000

08002004 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002004:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002006:	2101      	movs	r1, #1
 8002008:	2002      	movs	r0, #2
 800200a:	f012 f8db 	bl	80141c4 <UTIL_LPM_SetStopMode>
}
 800200e:	bd08      	pop	{r3, pc}

08002010 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002010:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002012:	2100      	movs	r1, #0
 8002014:	2002      	movs	r0, #2
 8002016:	f012 f8d5 	bl	80141c4 <UTIL_LPM_SetStopMode>
}
 800201a:	bd08      	pop	{r3, pc}

0800201c <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800201c:	2000      	movs	r0, #0
 800201e:	4770      	bx	lr

08002020 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002020:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_GetTick+0x14>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b90b      	cbnz	r3, 800202c <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8002028:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 800202a:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 800202c:	f000 f8f8 	bl	8002220 <TIMER_IF_GetTimerValue>
 8002030:	e7fb      	b.n	800202a <HAL_GetTick+0xa>
 8002032:	bf00      	nop
 8002034:	200005cc 	.word	0x200005cc

08002038 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002038:	b500      	push	{lr}
 800203a:	b083      	sub	sp, #12
 800203c:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800203e:	9801      	ldr	r0, [sp, #4]
 8002040:	f000 f9d4 	bl	80023ec <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002044:	b003      	add	sp, #12
 8002046:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800204c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800204c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204e:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8002050:	f001 fcf0 	bl	8003a34 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002054:	f001 fcf6 	bl	8003a44 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002058:	f001 fcfc 	bl	8003a54 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800205c:	2400      	movs	r4, #0
 800205e:	9403      	str	r4, [sp, #12]
 8002060:	9404      	str	r4, [sp, #16]
 8002062:	9405      	str	r4, [sp, #20]
 8002064:	9406      	str	r4, [sp, #24]
 8002066:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002068:	2301      	movs	r3, #1
 800206a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002076:	f042 0202 	orr.w	r2, r2, #2
 800207a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800207c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800207e:	f002 0202 	and.w	r2, r2, #2
 8002082:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002084:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002088:	f042 0202 	orr.w	r2, r2, #2
 800208c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002096:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002098:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800209c:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800209e:	4d0c      	ldr	r5, [pc, #48]	; (80020d0 <DBG_Init+0x84>)
 80020a0:	a903      	add	r1, sp, #12
 80020a2:	4628      	mov	r0, r5
 80020a4:	f002 fd80 	bl	8004ba8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80020a8:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80020ac:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80020ae:	a903      	add	r1, sp, #12
 80020b0:	4628      	mov	r0, r5
 80020b2:	f002 fd79 	bl	8004ba8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80020b6:	4622      	mov	r2, r4
 80020b8:	4639      	mov	r1, r7
 80020ba:	4628      	mov	r0, r5
 80020bc:	f002 fec4 	bl	8004e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80020c0:	4622      	mov	r2, r4
 80020c2:	4631      	mov	r1, r6
 80020c4:	4628      	mov	r0, r5
 80020c6:	f002 febf 	bl	8004e48 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80020ca:	b009      	add	sp, #36	; 0x24
 80020cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ce:	bf00      	nop
 80020d0:	48000400 	.word	0x48000400

080020d4 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80020d4:	b510      	push	{r4, lr}
 80020d6:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 80020d8:	f7ff f94a 	bl	8001370 <SYS_GetTemperatureLevel>
 80020dc:	f340 200f 	sbfx	r0, r0, #8, #16
 80020e0:	f7fe fe64 	bl	8000dac <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <EnvSensors_Read+0x28>)
 80020e6:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80020e8:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <EnvSensors_Read+0x2c>)
 80020ec:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <EnvSensors_Read+0x30>)
 80020f0:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <EnvSensors_Read+0x34>)
 80020f4:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 80020f6:	2000      	movs	r0, #0
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	bf00      	nop
 80020fc:	42480000 	.word	0x42480000
 8002100:	447a0000 	.word	0x447a0000
 8002104:	003e090d 	.word	0x003e090d
 8002108:	000503ab 	.word	0x000503ab

0800210c <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 800210c:	2000      	movs	r0, #0
 800210e:	4770      	bx	lr

08002110 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002110:	2001      	movs	r0, #1
 8002112:	4770      	bx	lr

08002114 <_kill>:

int _kill(int pid, int sig)
{
 8002114:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002116:	f014 fae1 	bl	80166dc <__errno>
 800211a:	2316      	movs	r3, #22
 800211c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800211e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002122:	bd08      	pop	{r3, pc}

08002124 <_exit>:

void _exit (int status)
{
 8002124:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002126:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800212a:	f7ff fff3 	bl	8002114 <_kill>
  while (1) {}    /* Make sure we hang here */
 800212e:	e7fe      	b.n	800212e <_exit+0xa>

08002130 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002130:	b570      	push	{r4, r5, r6, lr}
 8002132:	460c      	mov	r4, r1
 8002134:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	2500      	movs	r5, #0
 8002138:	e006      	b.n	8002148 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800213a:	f3af 8000 	nop.w
 800213e:	4621      	mov	r1, r4
 8002140:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002146:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	42b5      	cmp	r5, r6
 800214a:	dbf6      	blt.n	800213a <_read+0xa>
  }

  return len;
}
 800214c:	4630      	mov	r0, r6
 800214e:	bd70      	pop	{r4, r5, r6, pc}

08002150 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	460c      	mov	r4, r1
 8002154:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	2500      	movs	r5, #0
 8002158:	e004      	b.n	8002164 <_write+0x14>
  {
    __io_putchar(*ptr++);
 800215a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800215e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	3501      	adds	r5, #1
 8002164:	42b5      	cmp	r5, r6
 8002166:	dbf8      	blt.n	800215a <_write+0xa>
  }
  return len;
}
 8002168:	4630      	mov	r0, r6
 800216a:	bd70      	pop	{r4, r5, r6, pc}

0800216c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800216c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002170:	4770      	bx	lr

08002172 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002176:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002178:	2000      	movs	r0, #0
 800217a:	4770      	bx	lr

0800217c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800217c:	2001      	movs	r0, #1
 800217e:	4770      	bx	lr

08002180 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002180:	2000      	movs	r0, #0
 8002182:	4770      	bx	lr

08002184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002184:	b510      	push	{r4, lr}
 8002186:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002188:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <_sbrk+0x38>)
 800218a:	490d      	ldr	r1, [pc, #52]	; (80021c0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <_sbrk+0x40>)
 800218e:	6800      	ldr	r0, [r0, #0]
 8002190:	b140      	cbz	r0, 80021a4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <_sbrk+0x40>)
 8002194:	6800      	ldr	r0, [r0, #0]
 8002196:	4403      	add	r3, r0
 8002198:	1a52      	subs	r2, r2, r1
 800219a:	4293      	cmp	r3, r2
 800219c:	d806      	bhi.n	80021ac <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <_sbrk+0x40>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80021a2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80021a4:	4807      	ldr	r0, [pc, #28]	; (80021c4 <_sbrk+0x40>)
 80021a6:	4c08      	ldr	r4, [pc, #32]	; (80021c8 <_sbrk+0x44>)
 80021a8:	6004      	str	r4, [r0, #0]
 80021aa:	e7f2      	b.n	8002192 <_sbrk+0xe>
    errno = ENOMEM;
 80021ac:	f014 fa96 	bl	80166dc <__errno>
 80021b0:	230c      	movs	r3, #12
 80021b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021b8:	e7f3      	b.n	80021a2 <_sbrk+0x1e>
 80021ba:	bf00      	nop
 80021bc:	20008000 	.word	0x20008000
 80021c0:	00000800 	.word	0x00000800
 80021c4:	200005d0 	.word	0x200005d0
 80021c8:	20001eb0 	.word	0x20001eb0

080021cc <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <TIMER_IF_SetTimerContext+0x1c>)
 80021ce:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80021d0:	e001      	b.n	80021d6 <TIMER_IF_SetTimerContext+0xa>
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <TIMER_IF_SetTimerContext+0x1c>)
 80021d4:	6898      	ldr	r0, [r3, #8]
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <TIMER_IF_SetTimerContext+0x1c>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4283      	cmp	r3, r0
 80021dc:	d1f9      	bne.n	80021d2 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 80021de:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80021e0:	4b02      	ldr	r3, [pc, #8]	; (80021ec <TIMER_IF_SetTimerContext+0x20>)
 80021e2:	6018      	str	r0, [r3, #0]
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40002800 	.word	0x40002800
 80021ec:	200005d8 	.word	0x200005d8

080021f0 <TIMER_IF_GetTimerContext>:
}
 80021f0:	4b01      	ldr	r3, [pc, #4]	; (80021f8 <TIMER_IF_GetTimerContext+0x8>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200005d8 	.word	0x200005d8

080021fc <TIMER_IF_GetTimerElapsedTime>:
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80021fe:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002200:	e001      	b.n	8002206 <TIMER_IF_GetTimerElapsedTime+0xa>
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002204:	6898      	ldr	r0, [r3, #8]
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4283      	cmp	r3, r0
 800220c:	d1f9      	bne.n	8002202 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 800220e:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002210:	4b02      	ldr	r3, [pc, #8]	; (800221c <TIMER_IF_GetTimerElapsedTime+0x20>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	1ac0      	subs	r0, r0, r3
 8002216:	4770      	bx	lr
 8002218:	40002800 	.word	0x40002800
 800221c:	200005d8 	.word	0x200005d8

08002220 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <TIMER_IF_GetTimerValue+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b153      	cbz	r3, 800223c <TIMER_IF_GetTimerValue+0x1c>
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <TIMER_IF_GetTimerValue+0x24>)
 8002228:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800222a:	e001      	b.n	8002230 <TIMER_IF_GetTimerValue+0x10>
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <TIMER_IF_GetTimerValue+0x24>)
 800222e:	6898      	ldr	r0, [r3, #8]
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <TIMER_IF_GetTimerValue+0x24>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4283      	cmp	r3, r0
 8002236:	d1f9      	bne.n	800222c <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8002238:	43c0      	mvns	r0, r0
 800223a:	4770      	bx	lr
  uint32_t ret = 0;
 800223c:	2000      	movs	r0, #0
}
 800223e:	4770      	bx	lr
 8002240:	200005d4 	.word	0x200005d4
 8002244:	40002800 	.word	0x40002800

08002248 <TIMER_IF_GetMinimumTimeout>:
}
 8002248:	2003      	movs	r0, #3
 800224a:	4770      	bx	lr

0800224c <TIMER_IF_Convert_ms2Tick>:
{
 800224c:	b508      	push	{r3, lr}
 800224e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002254:	2300      	movs	r3, #0
 8002256:	0280      	lsls	r0, r0, #10
 8002258:	0d89      	lsrs	r1, r1, #22
 800225a:	f7fe fe21 	bl	8000ea0 <__aeabi_uldivmod>
}
 800225e:	bd08      	pop	{r3, pc}

08002260 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002260:	0ec2      	lsrs	r2, r0, #27
 8002262:	0143      	lsls	r3, r0, #5
 8002264:	1a1b      	subs	r3, r3, r0
 8002266:	f162 0200 	sbc.w	r2, r2, #0
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	181b      	adds	r3, r3, r0
 8002274:	f142 0000 	adc.w	r0, r2, #0
 8002278:	00c0      	lsls	r0, r0, #3
 800227a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800227e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002282:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8002286:	4770      	bx	lr

08002288 <TIMER_IF_StopTimer>:
{
 8002288:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <TIMER_IF_StopTimer+0x20>)
 800228c:	2201      	movs	r2, #1
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002290:	4c06      	ldr	r4, [pc, #24]	; (80022ac <TIMER_IF_StopTimer+0x24>)
 8002292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002296:	4620      	mov	r0, r4
 8002298:	f003 fda2 	bl	8005de0 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a0:	6323      	str	r3, [r4, #48]	; 0x30
}
 80022a2:	2000      	movs	r0, #0
 80022a4:	bd10      	pop	{r4, pc}
 80022a6:	bf00      	nop
 80022a8:	40002800 	.word	0x40002800
 80022ac:	200004c0 	.word	0x200004c0

080022b0 <TIMER_IF_BkUp_Write_MSBticks>:
{
 80022b0:	b508      	push	{r3, lr}
 80022b2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80022b4:	2102      	movs	r1, #2
 80022b6:	4802      	ldr	r0, [pc, #8]	; (80022c0 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 80022b8:	f003 ffdb 	bl	8006272 <HAL_RTCEx_BKUPWrite>
}
 80022bc:	bd08      	pop	{r3, pc}
 80022be:	bf00      	nop
 80022c0:	200004c0 	.word	0x200004c0

080022c4 <TIMER_IF_Init>:
{
 80022c4:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <TIMER_IF_Init+0x40>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b10b      	cbz	r3, 80022d0 <TIMER_IF_Init+0xc>
}
 80022cc:	2000      	movs	r0, #0
 80022ce:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022d0:	4c0d      	ldr	r4, [pc, #52]	; (8002308 <TIMER_IF_Init+0x44>)
 80022d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80022d6:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 80022d8:	f7ff fbec 	bl	8001ab4 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 80022dc:	f7ff ffd4 	bl	8002288 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e4:	4620      	mov	r0, r4
 80022e6:	f003 fd7b 	bl	8005de0 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022ea:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022ec:	4620      	mov	r0, r4
 80022ee:	f003 ff5f 	bl	80061b0 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff ffdc 	bl	80022b0 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 80022f8:	f7ff ff68 	bl	80021cc <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 80022fc:	4b01      	ldr	r3, [pc, #4]	; (8002304 <TIMER_IF_Init+0x40>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	e7e3      	b.n	80022cc <TIMER_IF_Init+0x8>
 8002304:	200005d4 	.word	0x200005d4
 8002308:	200004c0 	.word	0x200004c0

0800230c <TIMER_IF_BkUp_Write_Seconds>:
{
 800230c:	b508      	push	{r3, lr}
 800230e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002310:	2100      	movs	r1, #0
 8002312:	4802      	ldr	r0, [pc, #8]	; (800231c <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8002314:	f003 ffad 	bl	8006272 <HAL_RTCEx_BKUPWrite>
}
 8002318:	bd08      	pop	{r3, pc}
 800231a:	bf00      	nop
 800231c:	200004c0 	.word	0x200004c0

08002320 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002320:	b508      	push	{r3, lr}
 8002322:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002324:	2101      	movs	r1, #1
 8002326:	4802      	ldr	r0, [pc, #8]	; (8002330 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002328:	f003 ffa3 	bl	8006272 <HAL_RTCEx_BKUPWrite>
}
 800232c:	bd08      	pop	{r3, pc}
 800232e:	bf00      	nop
 8002330:	200004c0 	.word	0x200004c0

08002334 <TIMER_IF_StartTimer>:
{
 8002334:	b510      	push	{r4, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800233a:	222c      	movs	r2, #44	; 0x2c
 800233c:	2100      	movs	r1, #0
 800233e:	a801      	add	r0, sp, #4
 8002340:	f014 f9c0 	bl	80166c4 <memset>
  TIMER_IF_StopTimer();
 8002344:	f7ff ffa0 	bl	8002288 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <TIMER_IF_StartTimer+0x48>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800234e:	2300      	movs	r3, #0
 8002350:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002352:	43e4      	mvns	r4, r4
 8002354:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002356:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002358:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800235c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800235e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002362:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002364:	2201      	movs	r2, #1
 8002366:	a901      	add	r1, sp, #4
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <TIMER_IF_StartTimer+0x4c>)
 800236a:	f003 fe65 	bl	8006038 <HAL_RTC_SetAlarm_IT>
 800236e:	b910      	cbnz	r0, 8002376 <TIMER_IF_StartTimer+0x42>
}
 8002370:	2000      	movs	r0, #0
 8002372:	b00c      	add	sp, #48	; 0x30
 8002374:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002376:	f7ff fb3b 	bl	80019f0 <Error_Handler>
 800237a:	e7f9      	b.n	8002370 <TIMER_IF_StartTimer+0x3c>
 800237c:	200005d8 	.word	0x200005d8
 8002380:	200004c0 	.word	0x200004c0

08002384 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002384:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002386:	2102      	movs	r1, #2
 8002388:	4801      	ldr	r0, [pc, #4]	; (8002390 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800238a:	f003 ff79 	bl	8006280 <HAL_RTCEx_BKUPRead>
}
 800238e:	bd08      	pop	{r3, pc}
 8002390:	200004c0 	.word	0x200004c0

08002394 <TIMER_IF_GetTime>:
{
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4605      	mov	r5, r0
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <TIMER_IF_GetTime+0x34>)
 800239a:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800239c:	e001      	b.n	80023a2 <TIMER_IF_GetTime+0xe>
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <TIMER_IF_GetTime+0x34>)
 80023a0:	689c      	ldr	r4, [r3, #8]
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <TIMER_IF_GetTime+0x34>)
 80023a4:	6892      	ldr	r2, [r2, #8]
 80023a6:	42a2      	cmp	r2, r4
 80023a8:	d1f9      	bne.n	800239e <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 80023aa:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80023ac:	f7ff ffea 	bl	8002384 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80023b0:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80023b2:	0aa4      	lsrs	r4, r4, #10
 80023b4:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80023b8:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80023bc:	f7ff ff50 	bl	8002260 <TIMER_IF_Convert_Tick2ms>
 80023c0:	8028      	strh	r0, [r5, #0]
}
 80023c2:	4620      	mov	r0, r4
 80023c4:	bd38      	pop	{r3, r4, r5, pc}
 80023c6:	bf00      	nop
 80023c8:	40002800 	.word	0x40002800

080023cc <TIMER_IF_BkUp_Read_Seconds>:
{
 80023cc:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80023ce:	2100      	movs	r1, #0
 80023d0:	4801      	ldr	r0, [pc, #4]	; (80023d8 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80023d2:	f003 ff55 	bl	8006280 <HAL_RTCEx_BKUPRead>
}
 80023d6:	bd08      	pop	{r3, pc}
 80023d8:	200004c0 	.word	0x200004c0

080023dc <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80023dc:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80023de:	2101      	movs	r1, #1
 80023e0:	4801      	ldr	r0, [pc, #4]	; (80023e8 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80023e2:	f003 ff4d 	bl	8006280 <HAL_RTCEx_BKUPRead>
}
 80023e6:	bd08      	pop	{r3, pc}
 80023e8:	200004c0 	.word	0x200004c0

080023ec <TIMER_IF_DelayMs>:
{
 80023ec:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80023ee:	f7ff ff2d 	bl	800224c <TIMER_IF_Convert_ms2Tick>
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <TIMER_IF_DelayMs+0x3c>)
 80023f4:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80023f6:	e001      	b.n	80023fc <TIMER_IF_DelayMs+0x10>
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <TIMER_IF_DelayMs+0x3c>)
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <TIMER_IF_DelayMs+0x3c>)
 80023fe:	6892      	ldr	r2, [r2, #8]
 8002400:	428a      	cmp	r2, r1
 8002402:	d1f9      	bne.n	80023f8 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8002404:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002406:	e00a      	b.n	800241e <TIMER_IF_DelayMs+0x32>
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <TIMER_IF_DelayMs+0x3c>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a06      	ldr	r2, [pc, #24]	; (8002428 <TIMER_IF_DelayMs+0x3c>)
 800240e:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002410:	429a      	cmp	r2, r3
 8002412:	d1f9      	bne.n	8002408 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8002414:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002416:	1a5b      	subs	r3, r3, r1
 8002418:	4283      	cmp	r3, r0
 800241a:	d203      	bcs.n	8002424 <TIMER_IF_DelayMs+0x38>
    __NOP();
 800241c:	bf00      	nop
 800241e:	4b02      	ldr	r3, [pc, #8]	; (8002428 <TIMER_IF_DelayMs+0x3c>)
 8002420:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002422:	e7f3      	b.n	800240c <TIMER_IF_DelayMs+0x20>
}
 8002424:	bd08      	pop	{r3, pc}
 8002426:	bf00      	nop
 8002428:	40002800 	.word	0x40002800

0800242c <HAL_RTC_AlarmAEventCallback>:
{
 800242c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800242e:	f012 f953 	bl	80146d8 <UTIL_TIMER_IRQ_Handler>
}
 8002432:	bd08      	pop	{r3, pc}

08002434 <HAL_RTCEx_SSRUEventCallback>:
{
 8002434:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002436:	f7ff ffa5 	bl	8002384 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800243a:	3001      	adds	r0, #1
 800243c:	f7ff ff38 	bl	80022b0 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002440:	bd08      	pop	{r3, pc}
	...

08002444 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002444:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002446:	4817      	ldr	r0, [pc, #92]	; (80024a4 <MX_USART1_UART_Init+0x60>)
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <MX_USART1_UART_Init+0x64>)
 800244a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800244c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002450:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002452:	2300      	movs	r3, #0
 8002454:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002456:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002458:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800245a:	220c      	movs	r2, #12
 800245c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002460:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002462:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002464:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002466:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002468:	f005 fdd2 	bl	8008010 <HAL_UART_Init>
 800246c:	b970      	cbnz	r0, 800248c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800246e:	2100      	movs	r1, #0
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <MX_USART1_UART_Init+0x60>)
 8002472:	f005 ff7a 	bl	800836a <HAL_UARTEx_SetTxFifoThreshold>
 8002476:	b960      	cbnz	r0, 8002492 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002478:	2100      	movs	r1, #0
 800247a:	480a      	ldr	r0, [pc, #40]	; (80024a4 <MX_USART1_UART_Init+0x60>)
 800247c:	f005 ff9a 	bl	80083b4 <HAL_UARTEx_SetRxFifoThreshold>
 8002480:	b950      	cbnz	r0, 8002498 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002482:	4808      	ldr	r0, [pc, #32]	; (80024a4 <MX_USART1_UART_Init+0x60>)
 8002484:	f005 ff52 	bl	800832c <HAL_UARTEx_DisableFifoMode>
 8002488:	b948      	cbnz	r0, 800249e <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800248a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800248c:	f7ff fab0 	bl	80019f0 <Error_Handler>
 8002490:	e7ed      	b.n	800246e <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8002492:	f7ff faad 	bl	80019f0 <Error_Handler>
 8002496:	e7ef      	b.n	8002478 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8002498:	f7ff faaa 	bl	80019f0 <Error_Handler>
 800249c:	e7f1      	b.n	8002482 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 800249e:	f7ff faa7 	bl	80019f0 <Error_Handler>
}
 80024a2:	e7f2      	b.n	800248a <MX_USART1_UART_Init+0x46>
 80024a4:	2000069c 	.word	0x2000069c
 80024a8:	40013800 	.word	0x40013800

080024ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024ac:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024ae:	4817      	ldr	r0, [pc, #92]	; (800250c <MX_USART2_UART_Init+0x60>)
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_USART2_UART_Init+0x64>)
 80024b2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80024b4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80024b8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ba:	2300      	movs	r3, #0
 80024bc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024be:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024c0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c2:	220c      	movs	r2, #12
 80024c4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ca:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024cc:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ce:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024d0:	f005 fd9e 	bl	8008010 <HAL_UART_Init>
 80024d4:	b970      	cbnz	r0, 80024f4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d6:	2100      	movs	r1, #0
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <MX_USART2_UART_Init+0x60>)
 80024da:	f005 ff46 	bl	800836a <HAL_UARTEx_SetTxFifoThreshold>
 80024de:	b960      	cbnz	r0, 80024fa <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e0:	2100      	movs	r1, #0
 80024e2:	480a      	ldr	r0, [pc, #40]	; (800250c <MX_USART2_UART_Init+0x60>)
 80024e4:	f005 ff66 	bl	80083b4 <HAL_UARTEx_SetRxFifoThreshold>
 80024e8:	b950      	cbnz	r0, 8002500 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024ea:	4808      	ldr	r0, [pc, #32]	; (800250c <MX_USART2_UART_Init+0x60>)
 80024ec:	f005 ff1e 	bl	800832c <HAL_UARTEx_DisableFifoMode>
 80024f0:	b948      	cbnz	r0, 8002506 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024f2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80024f4:	f7ff fa7c 	bl	80019f0 <Error_Handler>
 80024f8:	e7ed      	b.n	80024d6 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80024fa:	f7ff fa79 	bl	80019f0 <Error_Handler>
 80024fe:	e7ef      	b.n	80024e0 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002500:	f7ff fa76 	bl	80019f0 <Error_Handler>
 8002504:	e7f1      	b.n	80024ea <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002506:	f7ff fa73 	bl	80019f0 <Error_Handler>
}
 800250a:	e7f2      	b.n	80024f2 <MX_USART2_UART_Init+0x46>
 800250c:	20000730 	.word	0x20000730
 8002510:	40004400 	.word	0x40004400

08002514 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002514:	b530      	push	{r4, r5, lr}
 8002516:	b099      	sub	sp, #100	; 0x64
 8002518:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	2100      	movs	r1, #0
 800251c:	9113      	str	r1, [sp, #76]	; 0x4c
 800251e:	9114      	str	r1, [sp, #80]	; 0x50
 8002520:	9115      	str	r1, [sp, #84]	; 0x54
 8002522:	9116      	str	r1, [sp, #88]	; 0x58
 8002524:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002526:	2238      	movs	r2, #56	; 0x38
 8002528:	a805      	add	r0, sp, #20
 800252a:	f014 f8cb 	bl	80166c4 <memset>
  if(uartHandle->Instance==USART1)
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	4a57      	ldr	r2, [pc, #348]	; (8002690 <HAL_UART_MspInit+0x17c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d004      	beq.n	8002540 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002536:	4a57      	ldr	r2, [pc, #348]	; (8002694 <HAL_UART_MspInit+0x180>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d07a      	beq.n	8002632 <HAL_UART_MspInit+0x11e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800253c:	b019      	add	sp, #100	; 0x64
 800253e:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002540:	2301      	movs	r3, #1
 8002542:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002544:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002548:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254a:	a805      	add	r0, sp, #20
 800254c:	f003 fafe 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 8002550:	2800      	cmp	r0, #0
 8002552:	d15f      	bne.n	8002614 <HAL_UART_MspInit+0x100>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002558:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800255a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800255e:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002560:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002562:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002566:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002568:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800256a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800256c:	f042 0202 	orr.w	r2, r2, #2
 8002570:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800257a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800257c:	23c0      	movs	r3, #192	; 0xc0
 800257e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2500      	movs	r5, #0
 8002586:	9515      	str	r5, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002588:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800258a:	2307      	movs	r3, #7
 800258c:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	a913      	add	r1, sp, #76	; 0x4c
 8002590:	4841      	ldr	r0, [pc, #260]	; (8002698 <HAL_UART_MspInit+0x184>)
 8002592:	f002 fb09 	bl	8004ba8 <HAL_GPIO_Init>
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_UART_MspInit+0x188>)
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80025a8:	483d      	ldr	r0, [pc, #244]	; (80026a0 <HAL_UART_MspInit+0x18c>)
 80025aa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80025ae:	3308      	adds	r3, #8
 80025b0:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80025b2:	2311      	movs	r3, #17
 80025b4:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b6:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025be:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025c0:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80025c2:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025c4:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025c6:	f001 ffff 	bl	80045c8 <HAL_DMA_Init>
 80025ca:	bb30      	cbnz	r0, 800261a <HAL_UART_MspInit+0x106>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80025cc:	2110      	movs	r1, #16
 80025ce:	4834      	ldr	r0, [pc, #208]	; (80026a0 <HAL_UART_MspInit+0x18c>)
 80025d0:	f002 f988 	bl	80048e4 <HAL_DMA_ConfigChannelAttributes>
 80025d4:	bb20      	cbnz	r0, 8002620 <HAL_UART_MspInit+0x10c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80025d6:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <HAL_UART_MspInit+0x18c>)
 80025d8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80025dc:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80025de:	4831      	ldr	r0, [pc, #196]	; (80026a4 <HAL_UART_MspInit+0x190>)
 80025e0:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_UART_MspInit+0x194>)
 80025e2:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025e4:	2312      	movs	r3, #18
 80025e6:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e8:	2310      	movs	r3, #16
 80025ea:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f4:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025f6:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025f8:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025fa:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025fc:	f001 ffe4 	bl	80045c8 <HAL_DMA_Init>
 8002600:	b988      	cbnz	r0, 8002626 <HAL_UART_MspInit+0x112>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002602:	2110      	movs	r1, #16
 8002604:	4827      	ldr	r0, [pc, #156]	; (80026a4 <HAL_UART_MspInit+0x190>)
 8002606:	f002 f96d 	bl	80048e4 <HAL_DMA_ConfigChannelAttributes>
 800260a:	b978      	cbnz	r0, 800262c <HAL_UART_MspInit+0x118>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_UART_MspInit+0x190>)
 800260e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002610:	629c      	str	r4, [r3, #40]	; 0x28
 8002612:	e793      	b.n	800253c <HAL_UART_MspInit+0x28>
      Error_Handler();
 8002614:	f7ff f9ec 	bl	80019f0 <Error_Handler>
 8002618:	e79c      	b.n	8002554 <HAL_UART_MspInit+0x40>
      Error_Handler();
 800261a:	f7ff f9e9 	bl	80019f0 <Error_Handler>
 800261e:	e7d5      	b.n	80025cc <HAL_UART_MspInit+0xb8>
      Error_Handler();
 8002620:	f7ff f9e6 	bl	80019f0 <Error_Handler>
 8002624:	e7d7      	b.n	80025d6 <HAL_UART_MspInit+0xc2>
      Error_Handler();
 8002626:	f7ff f9e3 	bl	80019f0 <Error_Handler>
 800262a:	e7ea      	b.n	8002602 <HAL_UART_MspInit+0xee>
      Error_Handler();
 800262c:	f7ff f9e0 	bl	80019f0 <Error_Handler>
 8002630:	e7ec      	b.n	800260c <HAL_UART_MspInit+0xf8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002632:	2302      	movs	r3, #2
 8002634:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_UART_MspInit+0x198>)
 8002638:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263a:	a805      	add	r0, sp, #20
 800263c:	f003 fa86 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 8002640:	bb18      	cbnz	r0, 800268a <HAL_UART_MspInit+0x176>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002648:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800264c:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800264e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002650:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002654:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8002656:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002658:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8002668:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800266a:	230c      	movs	r3, #12
 800266c:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800267a:	2307      	movs	r3, #7
 800267c:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	a913      	add	r1, sp, #76	; 0x4c
 8002680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002684:	f002 fa90 	bl	8004ba8 <HAL_GPIO_Init>
}
 8002688:	e758      	b.n	800253c <HAL_UART_MspInit+0x28>
      Error_Handler();
 800268a:	f7ff f9b1 	bl	80019f0 <Error_Handler>
 800268e:	e7d8      	b.n	8002642 <HAL_UART_MspInit+0x12e>
 8002690:	40013800 	.word	0x40013800
 8002694:	40004400 	.word	0x40004400
 8002698:	48000400 	.word	0x48000400
 800269c:	40010000 	.word	0x40010000
 80026a0:	200005dc 	.word	0x200005dc
 80026a4:	2000063c 	.word	0x2000063c
 80026a8:	4002001c 	.word	0x4002001c
 80026ac:	000c0004 	.word	0x000c0004

080026b0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80026b0:	b510      	push	{r4, lr}

  if(uartHandle->Instance==USART1)
 80026b2:	6803      	ldr	r3, [r0, #0]
 80026b4:	4a12      	ldr	r2, [pc, #72]	; (8002700 <HAL_UART_MspDeInit+0x50>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d003      	beq.n	80026c2 <HAL_UART_MspDeInit+0x12>
    HAL_DMA_DeInit(uartHandle->hdmatx);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <HAL_UART_MspDeInit+0x54>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_UART_MspDeInit+0x38>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80026c0:	bd10      	pop	{r4, pc}
 80026c2:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80026c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80026ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ce:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 80026d0:	21c0      	movs	r1, #192	; 0xc0
 80026d2:	480d      	ldr	r0, [pc, #52]	; (8002708 <HAL_UART_MspDeInit+0x58>)
 80026d4:	f002 fb3a 	bl	8004d4c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80026d8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80026dc:	f001 ffe6 	bl	80046ac <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80026e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80026e2:	f001 ffe3 	bl	80046ac <HAL_DMA_DeInit>
 80026e6:	e7eb      	b.n	80026c0 <HAL_UART_MspDeInit+0x10>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80026e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80026f2:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80026f4:	210c      	movs	r1, #12
 80026f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fa:	f002 fb27 	bl	8004d4c <HAL_GPIO_DeInit>
}
 80026fe:	e7df      	b.n	80026c0 <HAL_UART_MspDeInit+0x10>
 8002700:	40013800 	.word	0x40013800
 8002704:	40004400 	.word	0x40004400
 8002708:	48000400 	.word	0x48000400

0800270c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800270c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <vcom_Init+0x20>)
 8002710:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002712:	f7fe fe83 	bl	800141c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002716:	f7ff fec9 	bl	80024ac <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <vcom_Init+0x24>)
 800271c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002720:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002724:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002728:	2000      	movs	r0, #0
 800272a:	bd08      	pop	{r3, pc}
 800272c:	200007c8 	.word	0x200007c8
 8002730:	58000800 	.word	0x58000800

08002734 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002734:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002744:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800274a:	4804      	ldr	r0, [pc, #16]	; (800275c <vcom_DeInit+0x28>)
 800274c:	f7ff ffb0 	bl	80026b0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002750:	200f      	movs	r0, #15
 8002752:	f001 feb7 	bl	80044c4 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002756:	2000      	movs	r0, #0
 8002758:	bd08      	pop	{r3, pc}
 800275a:	bf00      	nop
 800275c:	20000730 	.word	0x20000730

08002760 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002760:	b508      	push	{r3, lr}
 8002762:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002764:	4601      	mov	r1, r0
 8002766:	4802      	ldr	r0, [pc, #8]	; (8002770 <vcom_Trace_DMA+0x10>)
 8002768:	f004 fe32 	bl	80073d0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800276c:	2000      	movs	r0, #0
 800276e:	bd08      	pop	{r3, pc}
 8002770:	20000730 	.word	0x20000730

08002774 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002774:	b510      	push	{r4, lr}
 8002776:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <vcom_ReceiveInit+0x50>)
 800277a:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800277c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002780:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002782:	ab02      	add	r3, sp, #8
 8002784:	e913 0006 	ldmdb	r3, {r1, r2}
 8002788:	480f      	ldr	r0, [pc, #60]	; (80027c8 <vcom_ReceiveInit+0x54>)
 800278a:	f005 fd77 	bl	800827c <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <vcom_ReceiveInit+0x54>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002798:	d1f9      	bne.n	800278e <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80027a0:	d0fb      	beq.n	800279a <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80027a8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80027aa:	4c07      	ldr	r4, [pc, #28]	; (80027c8 <vcom_ReceiveInit+0x54>)
 80027ac:	4620      	mov	r0, r4
 80027ae:	f005 fda6 	bl	80082fe <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80027b2:	2201      	movs	r2, #1
 80027b4:	4905      	ldr	r1, [pc, #20]	; (80027cc <vcom_ReceiveInit+0x58>)
 80027b6:	4620      	mov	r0, r4
 80027b8:	f005 fcfc 	bl	80081b4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80027bc:	2000      	movs	r0, #0
 80027be:	b002      	add	sp, #8
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	bf00      	nop
 80027c4:	200007c4 	.word	0x200007c4
 80027c8:	20000730 	.word	0x20000730
 80027cc:	200007cc 	.word	0x200007cc

080027d0 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80027d2:	6802      	ldr	r2, [r0, #0]
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_UART_TxCpltCallback+0x18>)
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d000      	beq.n	80027dc <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80027da:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_UART_TxCpltCallback+0x1c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2000      	movs	r0, #0
 80027e2:	4798      	blx	r3
}
 80027e4:	e7f9      	b.n	80027da <HAL_UART_TxCpltCallback+0xa>
 80027e6:	bf00      	nop
 80027e8:	40004400 	.word	0x40004400
 80027ec:	200007c8 	.word	0x200007c8

080027f0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80027f0:	6802      	ldr	r2, [r0, #0]
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_UART_RxCpltCallback+0x2c>)
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d000      	beq.n	80027fa <HAL_UART_RxCpltCallback+0xa>
 80027f8:	4770      	bx	lr
{
 80027fa:	b510      	push	{r4, lr}
 80027fc:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_UART_RxCpltCallback+0x30>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b12b      	cbz	r3, 8002810 <HAL_UART_RxCpltCallback+0x20>
 8002804:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002808:	b912      	cbnz	r2, 8002810 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800280a:	2101      	movs	r1, #1
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <HAL_UART_RxCpltCallback+0x34>)
 800280e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002810:	2201      	movs	r2, #1
 8002812:	4904      	ldr	r1, [pc, #16]	; (8002824 <HAL_UART_RxCpltCallback+0x34>)
 8002814:	4620      	mov	r0, r4
 8002816:	f005 fccd 	bl	80081b4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800281a:	bd10      	pop	{r4, pc}
 800281c:	40004400 	.word	0x40004400
 8002820:	200007c4 	.word	0x200007c4
 8002824:	200007cc 	.word	0x200007cc

08002828 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8002828:	b508      	push	{r3, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800282a:	4906      	ldr	r1, [pc, #24]	; (8002844 <MX_FATFS_Init+0x1c>)
 800282c:	4806      	ldr	r0, [pc, #24]	; (8002848 <MX_FATFS_Init+0x20>)
 800282e:	f005 fe11 	bl	8008454 <FATFS_LinkDriver>
 8002832:	b918      	cbnz	r0, 800283c <MX_FATFS_Init+0x14>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <MX_FATFS_Init+0x24>)
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 800283a:	bd08      	pop	{r3, pc}
    return APP_ERROR;
 800283c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002840:	e7fb      	b.n	800283a <MX_FATFS_Init+0x12>
 8002842:	bf00      	nop
 8002844:	200007d0 	.word	0x200007d0
 8002848:	20000010 	.word	0x20000010
 800284c:	200007cd 	.word	0x200007cd

08002850 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8002852:	f000 f925 	bl	8002aa0 <USER_SPI_initialize>

  /* USER CODE END INIT */
}
 8002856:	bd08      	pop	{r3, pc}

08002858 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002858:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800285a:	f000 f9d9 	bl	8002c10 <USER_SPI_status>

  /* USER CODE END STATUS */
}
 800285e:	bd08      	pop	{r3, pc}

08002860 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8002862:	f000 f9df 	bl	8002c24 <USER_SPI_read>
  /* USER CODE END READ */
}
 8002866:	bd08      	pop	{r3, pc}

08002868 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800286a:	f000 fa21 	bl	8002cb0 <USER_SPI_write>

  /* USER CODE END WRITE */
}
 800286e:	bd08      	pop	{r3, pc}

08002870 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8002872:	f000 fa75 	bl	8002d60 <USER_SPI_ioctl>

  /* USER CODE END IOCTL */
}
 8002876:	bd08      	pop	{r3, pc}

08002878 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002878:	b500      	push	{lr}
 800287a:	b087      	sub	sp, #28
 800287c:	f88d 000f 	strb.w	r0, [sp, #15]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002880:	2332      	movs	r3, #50	; 0x32
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2301      	movs	r3, #1
 8002886:	f10d 0217 	add.w	r2, sp, #23
 800288a:	f10d 010f 	add.w	r1, sp, #15
 800288e:	4804      	ldr	r0, [pc, #16]	; (80028a0 <xchg_spi+0x28>)
 8002890:	f003 ffbe 	bl	8006810 <HAL_SPI_TransmitReceive>
    return rxDat;
}
 8002894:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002898:	b007      	add	sp, #28
 800289a:	f85d fb04 	ldr.w	pc, [sp], #4
 800289e:	bf00      	nop
 80028a0:	200004f8 	.word	0x200004f8

080028a4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	4606      	mov	r6, r0
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80028a8:	f7ff fbba 	bl	8002020 <HAL_GetTick>
 80028ac:	4605      	mov	r5, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
	do {
		d = xchg_spi(0xFF);
 80028ae:	20ff      	movs	r0, #255	; 0xff
 80028b0:	f7ff ffe2 	bl	8002878 <xchg_spi>
 80028b4:	4604      	mov	r4, r0
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80028b6:	28ff      	cmp	r0, #255	; 0xff
 80028b8:	d004      	beq.n	80028c4 <wait_ready+0x20>
 80028ba:	f7ff fbb1 	bl	8002020 <HAL_GetTick>
 80028be:	1b40      	subs	r0, r0, r5
 80028c0:	42b0      	cmp	r0, r6
 80028c2:	d3f4      	bcc.n	80028ae <wait_ready+0xa>

	return (d == 0xFF) ? 1 : 0;
}
 80028c4:	2cff      	cmp	r4, #255	; 0xff
 80028c6:	bf14      	ite	ne
 80028c8:	2000      	movne	r0, #0
 80028ca:	2001      	moveq	r0, #1
 80028cc:	bd70      	pop	{r4, r5, r6, pc}

080028ce <rcvr_spi_multi>:
{
 80028ce:	b570      	push	{r4, r5, r6, lr}
 80028d0:	4606      	mov	r6, r0
 80028d2:	460d      	mov	r5, r1
	for(UINT i=0; i<btr; i++) {
 80028d4:	2400      	movs	r4, #0
 80028d6:	e004      	b.n	80028e2 <rcvr_spi_multi+0x14>
		*(buff+i) = xchg_spi(0xFF);
 80028d8:	20ff      	movs	r0, #255	; 0xff
 80028da:	f7ff ffcd 	bl	8002878 <xchg_spi>
 80028de:	5530      	strb	r0, [r6, r4]
	for(UINT i=0; i<btr; i++) {
 80028e0:	3401      	adds	r4, #1
 80028e2:	42ac      	cmp	r4, r5
 80028e4:	d3f8      	bcc.n	80028d8 <rcvr_spi_multi+0xa>
}
 80028e6:	bd70      	pop	{r4, r5, r6, pc}

080028e8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80028e8:	b508      	push	{r3, lr}
	CS_HIGH();		/* Set CS# high */
 80028ea:	2201      	movs	r2, #1
 80028ec:	2102      	movs	r1, #2
 80028ee:	4803      	ldr	r0, [pc, #12]	; (80028fc <despiselect+0x14>)
 80028f0:	f002 faaa 	bl	8004e48 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80028f4:	20ff      	movs	r0, #255	; 0xff
 80028f6:	f7ff ffbf 	bl	8002878 <xchg_spi>

}
 80028fa:	bd08      	pop	{r3, pc}
 80028fc:	48000400 	.word	0x48000400

08002900 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002900:	b510      	push	{r4, lr}
	CS_LOW();		/* Set CS# low */
 8002902:	2200      	movs	r2, #0
 8002904:	2102      	movs	r1, #2
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <spiselect+0x2c>)
 8002908:	f002 fa9e 	bl	8004e48 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800290c:	20ff      	movs	r0, #255	; 0xff
 800290e:	f7ff ffb3 	bl	8002878 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002912:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002916:	f7ff ffc5 	bl	80028a4 <wait_ready>
 800291a:	b110      	cbz	r0, 8002922 <spiselect+0x22>
 800291c:	2401      	movs	r4, #1

	despiselect();
	return 0;	/* Timeout */
}
 800291e:	4620      	mov	r0, r4
 8002920:	bd10      	pop	{r4, pc}
 8002922:	4604      	mov	r4, r0
	despiselect();
 8002924:	f7ff ffe0 	bl	80028e8 <despiselect>
	return 0;	/* Timeout */
 8002928:	e7f9      	b.n	800291e <spiselect+0x1e>
 800292a:	bf00      	nop
 800292c:	48000400 	.word	0x48000400

08002930 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4604      	mov	r4, r0
 8002934:	460d      	mov	r5, r1
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002936:	f010 0f80 	tst.w	r0, #128	; 0x80
 800293a:	d12c      	bne.n	8002996 <send_cmd+0x66>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800293c:	2c0c      	cmp	r4, #12
 800293e:	d004      	beq.n	800294a <send_cmd+0x1a>
		despiselect();
 8002940:	f7ff ffd2 	bl	80028e8 <despiselect>
		if (!spiselect()) return 0xFF;
 8002944:	f7ff ffdc 	bl	8002900 <spiselect>
 8002948:	b3b0      	cbz	r0, 80029b8 <send_cmd+0x88>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800294a:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 800294e:	f7ff ff93 	bl	8002878 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002952:	0e28      	lsrs	r0, r5, #24
 8002954:	f7ff ff90 	bl	8002878 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002958:	f3c5 4007 	ubfx	r0, r5, #16, #8
 800295c:	f7ff ff8c 	bl	8002878 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002960:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8002964:	f7ff ff88 	bl	8002878 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002968:	b2e8      	uxtb	r0, r5
 800296a:	f7ff ff85 	bl	8002878 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800296e:	b1dc      	cbz	r4, 80029a8 <send_cmd+0x78>
	n = 0x01;							/* Dummy CRC + Stop */
 8002970:	2001      	movs	r0, #1
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002972:	2c08      	cmp	r4, #8
 8002974:	d01a      	beq.n	80029ac <send_cmd+0x7c>
	xchg_spi(n);
 8002976:	f7ff ff7f 	bl	8002878 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800297a:	2c0c      	cmp	r4, #12
 800297c:	d018      	beq.n	80029b0 <send_cmd+0x80>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800297e:	240a      	movs	r4, #10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 8002980:	20ff      	movs	r0, #255	; 0xff
 8002982:	f7ff ff79 	bl	8002878 <xchg_spi>
	} while ((res & 0x80) && --n);
 8002986:	f010 0f80 	tst.w	r0, #128	; 0x80
 800298a:	d003      	beq.n	8002994 <send_cmd+0x64>
 800298c:	1e63      	subs	r3, r4, #1
 800298e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8002992:	d1f5      	bne.n	8002980 <send_cmd+0x50>

	return res;							/* Return received response */
}
 8002994:	bd38      	pop	{r3, r4, r5, pc}
		cmd &= 0x7F;
 8002996:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
 800299a:	2100      	movs	r1, #0
 800299c:	2037      	movs	r0, #55	; 0x37
 800299e:	f7ff ffc7 	bl	8002930 <send_cmd>
		if (res > 1) return res;
 80029a2:	2801      	cmp	r0, #1
 80029a4:	d9ca      	bls.n	800293c <send_cmd+0xc>
 80029a6:	e7f5      	b.n	8002994 <send_cmd+0x64>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80029a8:	2095      	movs	r0, #149	; 0x95
 80029aa:	e7e2      	b.n	8002972 <send_cmd+0x42>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80029ac:	2087      	movs	r0, #135	; 0x87
 80029ae:	e7e2      	b.n	8002976 <send_cmd+0x46>
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80029b0:	20ff      	movs	r0, #255	; 0xff
 80029b2:	f7ff ff61 	bl	8002878 <xchg_spi>
 80029b6:	e7e2      	b.n	800297e <send_cmd+0x4e>
		if (!spiselect()) return 0xFF;
 80029b8:	20ff      	movs	r0, #255	; 0xff
 80029ba:	e7eb      	b.n	8002994 <send_cmd+0x64>

080029bc <xmit_spi_multi>:
{
 80029bc:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80029be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029c2:	b28a      	uxth	r2, r1
 80029c4:	4601      	mov	r1, r0
 80029c6:	4802      	ldr	r0, [pc, #8]	; (80029d0 <xmit_spi_multi+0x14>)
 80029c8:	f003 fe08 	bl	80065dc <HAL_SPI_Transmit>
}
 80029cc:	bd08      	pop	{r3, pc}
 80029ce:	bf00      	nop
 80029d0:	200004f8 	.word	0x200004f8

080029d4 <xmit_datablock>:
{
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4605      	mov	r5, r0
 80029d8:	460c      	mov	r4, r1
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80029da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029de:	f7ff ff61 	bl	80028a4 <wait_ready>
 80029e2:	b900      	cbnz	r0, 80029e6 <xmit_datablock+0x12>
}
 80029e4:	bd38      	pop	{r3, r4, r5, pc}
	xchg_spi(token);					/* Send token */
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7ff ff46 	bl	8002878 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80029ec:	2cfd      	cmp	r4, #253	; 0xfd
 80029ee:	d101      	bne.n	80029f4 <xmit_datablock+0x20>
	return 1;
 80029f0:	2001      	movs	r0, #1
 80029f2:	e7f7      	b.n	80029e4 <xmit_datablock+0x10>
		xmit_spi_multi(buff, 512);		/* Data */
 80029f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f8:	4628      	mov	r0, r5
 80029fa:	f7ff ffdf 	bl	80029bc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80029fe:	20ff      	movs	r0, #255	; 0xff
 8002a00:	f7ff ff3a 	bl	8002878 <xchg_spi>
 8002a04:	20ff      	movs	r0, #255	; 0xff
 8002a06:	f7ff ff37 	bl	8002878 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002a0a:	20ff      	movs	r0, #255	; 0xff
 8002a0c:	f7ff ff34 	bl	8002878 <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002a10:	f000 001f 	and.w	r0, r0, #31
 8002a14:	2805      	cmp	r0, #5
 8002a16:	d101      	bne.n	8002a1c <xmit_datablock+0x48>
	return 1;
 8002a18:	2001      	movs	r0, #1
 8002a1a:	e7e3      	b.n	80029e4 <xmit_datablock+0x10>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	e7e1      	b.n	80029e4 <xmit_datablock+0x10>

08002a20 <SPI_Timer_On>:
void SPI_Timer_On(uint32_t waitTicks) {
 8002a20:	b510      	push	{r4, lr}
 8002a22:	4604      	mov	r4, r0
    spiTimerTickStart = HAL_GetTick();
 8002a24:	f7ff fafc 	bl	8002020 <HAL_GetTick>
 8002a28:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <SPI_Timer_On+0x14>)
 8002a2a:	6018      	str	r0, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <SPI_Timer_On+0x18>)
 8002a2e:	601c      	str	r4, [r3, #0]
}
 8002a30:	bd10      	pop	{r4, pc}
 8002a32:	bf00      	nop
 8002a34:	200007dc 	.word	0x200007dc
 8002a38:	200007d8 	.word	0x200007d8

08002a3c <SPI_Timer_Status>:
uint8_t SPI_Timer_Status() {
 8002a3c:	b508      	push	{r3, lr}
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002a3e:	f7ff faef 	bl	8002020 <HAL_GetTick>
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <SPI_Timer_Status+0x1c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1ac0      	subs	r0, r0, r3
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SPI_Timer_Status+0x20>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4298      	cmp	r0, r3
 8002a4e:	bf2c      	ite	cs
 8002a50:	2000      	movcs	r0, #0
 8002a52:	2001      	movcc	r0, #1
 8002a54:	bd08      	pop	{r3, pc}
 8002a56:	bf00      	nop
 8002a58:	200007dc 	.word	0x200007dc
 8002a5c:	200007d8 	.word	0x200007d8

08002a60 <rcvr_datablock>:
{
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	4605      	mov	r5, r0
 8002a64:	460e      	mov	r6, r1
	SPI_Timer_On(200);
 8002a66:	20c8      	movs	r0, #200	; 0xc8
 8002a68:	f7ff ffda 	bl	8002a20 <SPI_Timer_On>
		token = xchg_spi(0xFF);
 8002a6c:	20ff      	movs	r0, #255	; 0xff
 8002a6e:	f7ff ff03 	bl	8002878 <xchg_spi>
 8002a72:	4604      	mov	r4, r0
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002a74:	28ff      	cmp	r0, #255	; 0xff
 8002a76:	d103      	bne.n	8002a80 <rcvr_datablock+0x20>
 8002a78:	f7ff ffe0 	bl	8002a3c <SPI_Timer_Status>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d1f5      	bne.n	8002a6c <rcvr_datablock+0xc>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002a80:	2cfe      	cmp	r4, #254	; 0xfe
 8002a82:	d001      	beq.n	8002a88 <rcvr_datablock+0x28>
 8002a84:	2000      	movs	r0, #0
}
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002a88:	4631      	mov	r1, r6
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	f7ff ff1f 	bl	80028ce <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002a90:	20ff      	movs	r0, #255	; 0xff
 8002a92:	f7ff fef1 	bl	8002878 <xchg_spi>
 8002a96:	20ff      	movs	r0, #255	; 0xff
 8002a98:	f7ff feee 	bl	8002878 <xchg_spi>
	return 1;						/* Function succeeded */
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	e7f2      	b.n	8002a86 <rcvr_datablock+0x26>

08002aa0 <USER_SPI_initialize>:
	BYTE drv		/* Physical drive number (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	f040 80ad 	bne.w	8002c00 <USER_SPI_initialize+0x160>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002aa6:	4b57      	ldr	r3, [pc, #348]	; (8002c04 <USER_SPI_initialize+0x164>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f013 0f02 	tst.w	r3, #2
 8002aae:	d10b      	bne.n	8002ac8 <USER_SPI_initialize+0x28>
{
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	b082      	sub	sp, #8

	FCLK_SLOW();
 8002ab4:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <USER_SPI_initialize+0x168>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	6813      	ldr	r3, [r2, #0]
 8002aba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002abe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002ac2:	6013      	str	r3, [r2, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002ac4:	240a      	movs	r4, #10
 8002ac6:	e008      	b.n	8002ada <USER_SPI_initialize+0x3a>
	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002ac8:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <USER_SPI_initialize+0x164>)
 8002aca:	7818      	ldrb	r0, [r3, #0]
 8002acc:	b2c0      	uxtb	r0, r0
 8002ace:	4770      	bx	lr
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002ad0:	20ff      	movs	r0, #255	; 0xff
 8002ad2:	f7ff fed1 	bl	8002878 <xchg_spi>
 8002ad6:	3c01      	subs	r4, #1
 8002ad8:	b2e4      	uxtb	r4, r4
 8002ada:	2c00      	cmp	r4, #0
 8002adc:	d1f8      	bne.n	8002ad0 <USER_SPI_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	f7ff ff25 	bl	8002930 <send_cmd>
 8002ae6:	4605      	mov	r5, r0
 8002ae8:	2801      	cmp	r0, #1
 8002aea:	d017      	beq.n	8002b1c <USER_SPI_initialize+0x7c>
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <USER_SPI_initialize+0x16c>)
 8002aee:	701c      	strb	r4, [r3, #0]
	despiselect();
 8002af0:	f7ff fefa 	bl	80028e8 <despiselect>

	if (ty) {			/* OK */
 8002af4:	2c00      	cmp	r4, #0
 8002af6:	d07f      	beq.n	8002bf8 <USER_SPI_initialize+0x158>
		FCLK_FAST();			/* Set fast clock */
 8002af8:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <USER_SPI_initialize+0x168>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	6813      	ldr	r3, [r2, #0]
 8002afe:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002b02:	f043 0310 	orr.w	r3, r3, #16
 8002b06:	6013      	str	r3, [r2, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002b08:	4a3e      	ldr	r2, [pc, #248]	; (8002c04 <USER_SPI_initialize+0x164>)
 8002b0a:	7813      	ldrb	r3, [r2, #0]
 8002b0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b10:	7013      	strb	r3, [r2, #0]
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
 8002b12:	4b3c      	ldr	r3, [pc, #240]	; (8002c04 <USER_SPI_initialize+0x164>)
 8002b14:	7818      	ldrb	r0, [r3, #0]
 8002b16:	b2c0      	uxtb	r0, r0
}
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002b1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b20:	f7ff ff7e 	bl	8002a20 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002b24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b28:	2008      	movs	r0, #8
 8002b2a:	f7ff ff01 	bl	8002930 <send_cmd>
 8002b2e:	2801      	cmp	r0, #1
 8002b30:	d13e      	bne.n	8002bb0 <USER_SPI_initialize+0x110>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002b32:	4625      	mov	r5, r4
 8002b34:	e009      	b.n	8002b4a <USER_SPI_initialize+0xaa>
 8002b36:	20ff      	movs	r0, #255	; 0xff
 8002b38:	f7ff fe9e 	bl	8002878 <xchg_spi>
 8002b3c:	f105 0308 	add.w	r3, r5, #8
 8002b40:	446b      	add	r3, sp
 8002b42:	f803 0c04 	strb.w	r0, [r3, #-4]
 8002b46:	3501      	adds	r5, #1
 8002b48:	b2ed      	uxtb	r5, r5
 8002b4a:	2d03      	cmp	r5, #3
 8002b4c:	d9f3      	bls.n	8002b36 <USER_SPI_initialize+0x96>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002b4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d1ca      	bne.n	8002aec <USER_SPI_initialize+0x4c>
 8002b56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b5a:	2baa      	cmp	r3, #170	; 0xaa
 8002b5c:	d1c6      	bne.n	8002aec <USER_SPI_initialize+0x4c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002b5e:	f7ff ff6d 	bl	8002a3c <SPI_Timer_Status>
 8002b62:	b130      	cbz	r0, 8002b72 <USER_SPI_initialize+0xd2>
 8002b64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b68:	20a9      	movs	r0, #169	; 0xa9
 8002b6a:	f7ff fee1 	bl	8002930 <send_cmd>
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d1f5      	bne.n	8002b5e <USER_SPI_initialize+0xbe>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002b72:	f7ff ff63 	bl	8002a3c <SPI_Timer_Status>
 8002b76:	b908      	cbnz	r0, 8002b7c <USER_SPI_initialize+0xdc>
	ty = 0;
 8002b78:	4604      	mov	r4, r0
 8002b7a:	e7b7      	b.n	8002aec <USER_SPI_initialize+0x4c>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	203a      	movs	r0, #58	; 0x3a
 8002b80:	f7ff fed6 	bl	8002930 <send_cmd>
 8002b84:	4605      	mov	r5, r0
 8002b86:	b150      	cbz	r0, 8002b9e <USER_SPI_initialize+0xfe>
 8002b88:	e7b0      	b.n	8002aec <USER_SPI_initialize+0x4c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002b8a:	20ff      	movs	r0, #255	; 0xff
 8002b8c:	f7ff fe74 	bl	8002878 <xchg_spi>
 8002b90:	f105 0308 	add.w	r3, r5, #8
 8002b94:	446b      	add	r3, sp
 8002b96:	f803 0c04 	strb.w	r0, [r3, #-4]
 8002b9a:	3501      	adds	r5, #1
 8002b9c:	b2ed      	uxtb	r5, r5
 8002b9e:	2d03      	cmp	r5, #3
 8002ba0:	d9f3      	bls.n	8002b8a <USER_SPI_initialize+0xea>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002ba2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ba6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002baa:	d023      	beq.n	8002bf4 <USER_SPI_initialize+0x154>
 8002bac:	240c      	movs	r4, #12
 8002bae:	e79d      	b.n	8002aec <USER_SPI_initialize+0x4c>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	20a9      	movs	r0, #169	; 0xa9
 8002bb4:	f7ff febc 	bl	8002930 <send_cmd>
 8002bb8:	2801      	cmp	r0, #1
 8002bba:	d90e      	bls.n	8002bda <USER_SPI_initialize+0x13a>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002bbc:	462e      	mov	r6, r5
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002bbe:	f7ff ff3d 	bl	8002a3c <SPI_Timer_Status>
 8002bc2:	b128      	cbz	r0, 8002bd0 <USER_SPI_initialize+0x130>
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f7ff feb2 	bl	8002930 <send_cmd>
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d1f6      	bne.n	8002bbe <USER_SPI_initialize+0x11e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002bd0:	f7ff ff34 	bl	8002a3c <SPI_Timer_Status>
 8002bd4:	b920      	cbnz	r0, 8002be0 <USER_SPI_initialize+0x140>
				ty = 0;
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	e788      	b.n	8002aec <USER_SPI_initialize+0x4c>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002bda:	2602      	movs	r6, #2
 8002bdc:	25a9      	movs	r5, #169	; 0xa9
 8002bde:	e7ee      	b.n	8002bbe <USER_SPI_initialize+0x11e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002be4:	2010      	movs	r0, #16
 8002be6:	f7ff fea3 	bl	8002930 <send_cmd>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	f47f af7e 	bne.w	8002aec <USER_SPI_initialize+0x4c>
 8002bf0:	4634      	mov	r4, r6
 8002bf2:	e77b      	b.n	8002aec <USER_SPI_initialize+0x4c>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002bf4:	2404      	movs	r4, #4
 8002bf6:	e779      	b.n	8002aec <USER_SPI_initialize+0x4c>
		Stat = STA_NOINIT;
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <USER_SPI_initialize+0x164>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e788      	b.n	8002b12 <USER_SPI_initialize+0x72>
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002c00:	2001      	movs	r0, #1
}
 8002c02:	4770      	bx	lr
 8002c04:	20000024 	.word	0x20000024
 8002c08:	200004f8 	.word	0x200004f8
 8002c0c:	200007d4 	.word	0x200007d4

08002c10 <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002c10:	b918      	cbnz	r0, 8002c1a <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 8002c12:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <USER_SPI_status+0x10>)
 8002c14:	7818      	ldrb	r0, [r3, #0]
 8002c16:	b2c0      	uxtb	r0, r0
 8002c18:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002c1a:	2001      	movs	r0, #1
}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000024 	.word	0x20000024

08002c24 <USER_SPI_read>:
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d139      	bne.n	8002c9c <USER_SPI_read+0x78>
{
 8002c28:	b538      	push	{r3, r4, r5, lr}
 8002c2a:	460d      	mov	r5, r1
 8002c2c:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d036      	beq.n	8002ca0 <USER_SPI_read+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <USER_SPI_read+0x84>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	f013 0f01 	tst.w	r3, #1
 8002c3a:	d133      	bne.n	8002ca4 <USER_SPI_read+0x80>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <USER_SPI_read+0x88>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f013 0f08 	tst.w	r3, #8
 8002c44:	d100      	bne.n	8002c48 <USER_SPI_read+0x24>
 8002c46:	0252      	lsls	r2, r2, #9

	if (count == 1) {	/* Single sector read */
 8002c48:	2c01      	cmp	r4, #1
 8002c4a:	d018      	beq.n	8002c7e <USER_SPI_read+0x5a>
			&& rcvr_datablock(buff, 512)) {
			count = 0;
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	2012      	movs	r0, #18
 8002c50:	f7ff fe6e 	bl	8002930 <send_cmd>
 8002c54:	b968      	cbnz	r0, 8002c72 <USER_SPI_read+0x4e>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f7ff ff00 	bl	8002a60 <rcvr_datablock>
 8002c60:	b118      	cbz	r0, 8002c6a <USER_SPI_read+0x46>
				buff += 512;
 8002c62:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8002c66:	3c01      	subs	r4, #1
 8002c68:	d1f5      	bne.n	8002c56 <USER_SPI_read+0x32>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	200c      	movs	r0, #12
 8002c6e:	f7ff fe5f 	bl	8002930 <send_cmd>
		}
	}
	despiselect();
 8002c72:	f7ff fe39 	bl	80028e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002c76:	1e20      	subs	r0, r4, #0
 8002c78:	bf18      	it	ne
 8002c7a:	2001      	movne	r0, #1
}
 8002c7c:	bd38      	pop	{r3, r4, r5, pc}
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002c7e:	4611      	mov	r1, r2
 8002c80:	2011      	movs	r0, #17
 8002c82:	f7ff fe55 	bl	8002930 <send_cmd>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d1f3      	bne.n	8002c72 <USER_SPI_read+0x4e>
			&& rcvr_datablock(buff, 512)) {
 8002c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f7ff fee6 	bl	8002a60 <rcvr_datablock>
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d0ec      	beq.n	8002c72 <USER_SPI_read+0x4e>
			count = 0;
 8002c98:	2400      	movs	r4, #0
 8002c9a:	e7ea      	b.n	8002c72 <USER_SPI_read+0x4e>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002c9c:	2004      	movs	r0, #4
}
 8002c9e:	4770      	bx	lr
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002ca0:	2004      	movs	r0, #4
 8002ca2:	e7eb      	b.n	8002c7c <USER_SPI_read+0x58>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	e7e9      	b.n	8002c7c <USER_SPI_read+0x58>
 8002ca8:	20000024 	.word	0x20000024
 8002cac:	200007d4 	.word	0x200007d4

08002cb0 <USER_SPI_write>:
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	d148      	bne.n	8002d46 <USER_SPI_write+0x96>
{
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	460d      	mov	r5, r1
 8002cb8:	4616      	mov	r6, r2
 8002cba:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d044      	beq.n	8002d4a <USER_SPI_write+0x9a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <USER_SPI_write+0xa8>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f013 0f01 	tst.w	r3, #1
 8002cc8:	d141      	bne.n	8002d4e <USER_SPI_write+0x9e>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <USER_SPI_write+0xa8>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	f013 0f04 	tst.w	r3, #4
 8002cd2:	d13e      	bne.n	8002d52 <USER_SPI_write+0xa2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <USER_SPI_write+0xac>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	f013 0f08 	tst.w	r3, #8
 8002cdc:	d100      	bne.n	8002ce0 <USER_SPI_write+0x30>
 8002cde:	0256      	lsls	r6, r2, #9

	if (count == 1) {	/* Single sector write */
 8002ce0:	2c01      	cmp	r4, #1
 8002ce2:	d01b      	beq.n	8002d1c <USER_SPI_write+0x6c>
			&& xmit_datablock(buff, 0xFE)) {
			count = 0;
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002ce4:	f013 0f06 	tst.w	r3, #6
 8002ce8:	d126      	bne.n	8002d38 <USER_SPI_write+0x88>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002cea:	4631      	mov	r1, r6
 8002cec:	2019      	movs	r0, #25
 8002cee:	f7ff fe1f 	bl	8002930 <send_cmd>
 8002cf2:	b968      	cbnz	r0, 8002d10 <USER_SPI_write+0x60>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002cf4:	21fc      	movs	r1, #252	; 0xfc
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f7ff fe6c 	bl	80029d4 <xmit_datablock>
 8002cfc:	b118      	cbz	r0, 8002d06 <USER_SPI_write+0x56>
				buff += 512;
 8002cfe:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8002d02:	3c01      	subs	r4, #1
 8002d04:	d1f6      	bne.n	8002cf4 <USER_SPI_write+0x44>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002d06:	21fd      	movs	r1, #253	; 0xfd
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7ff fe63 	bl	80029d4 <xmit_datablock>
 8002d0e:	b1c0      	cbz	r0, 8002d42 <USER_SPI_write+0x92>
		}
	}
	despiselect();
 8002d10:	f7ff fdea 	bl	80028e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002d14:	1e20      	subs	r0, r4, #0
 8002d16:	bf18      	it	ne
 8002d18:	2001      	movne	r0, #1
}
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002d1c:	4631      	mov	r1, r6
 8002d1e:	2018      	movs	r0, #24
 8002d20:	f7ff fe06 	bl	8002930 <send_cmd>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d1f3      	bne.n	8002d10 <USER_SPI_write+0x60>
			&& xmit_datablock(buff, 0xFE)) {
 8002d28:	21fe      	movs	r1, #254	; 0xfe
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	f7ff fe52 	bl	80029d4 <xmit_datablock>
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d0ed      	beq.n	8002d10 <USER_SPI_write+0x60>
			count = 0;
 8002d34:	2400      	movs	r4, #0
 8002d36:	e7eb      	b.n	8002d10 <USER_SPI_write+0x60>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002d38:	4621      	mov	r1, r4
 8002d3a:	2097      	movs	r0, #151	; 0x97
 8002d3c:	f7ff fdf8 	bl	8002930 <send_cmd>
 8002d40:	e7d3      	b.n	8002cea <USER_SPI_write+0x3a>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002d42:	2401      	movs	r4, #1
 8002d44:	e7e4      	b.n	8002d10 <USER_SPI_write+0x60>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002d46:	2004      	movs	r0, #4
}
 8002d48:	4770      	bx	lr
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002d4a:	2004      	movs	r0, #4
 8002d4c:	e7e5      	b.n	8002d1a <USER_SPI_write+0x6a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002d4e:	2003      	movs	r0, #3
 8002d50:	e7e3      	b.n	8002d1a <USER_SPI_write+0x6a>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002d52:	2002      	movs	r0, #2
 8002d54:	e7e1      	b.n	8002d1a <USER_SPI_write+0x6a>
 8002d56:	bf00      	nop
 8002d58:	20000024 	.word	0x20000024
 8002d5c:	200007d4 	.word	0x200007d4

08002d60 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	b084      	sub	sp, #16
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002d64:	2800      	cmp	r0, #0
 8002d66:	f040 8104 	bne.w	8002f72 <USER_SPI_ioctl+0x212>
 8002d6a:	460d      	mov	r5, r1
 8002d6c:	4616      	mov	r6, r2
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002d6e:	4b83      	ldr	r3, [pc, #524]	; (8002f7c <USER_SPI_ioctl+0x21c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f013 0f01 	tst.w	r3, #1
 8002d76:	f040 80fe 	bne.w	8002f76 <USER_SPI_ioctl+0x216>

	res = RES_ERROR;

	switch (cmd) {
 8002d7a:	2904      	cmp	r1, #4
 8002d7c:	f200 80ed 	bhi.w	8002f5a <USER_SPI_ioctl+0x1fa>
 8002d80:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002d84:	000c0005 	.word	0x000c0005
 8002d88:	005400eb 	.word	0x005400eb
 8002d8c:	00af      	.short	0x00af
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002d8e:	f7ff fdb7 	bl	8002900 <spiselect>
 8002d92:	2800      	cmp	r0, #0
 8002d94:	f040 80e3 	bne.w	8002f5e <USER_SPI_ioctl+0x1fe>
	res = RES_ERROR;
 8002d98:	2401      	movs	r4, #1
 8002d9a:	e006      	b.n	8002daa <USER_SPI_ioctl+0x4a>
		break;

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2009      	movs	r0, #9
 8002da0:	f7ff fdc6 	bl	8002930 <send_cmd>
 8002da4:	4604      	mov	r4, r0
 8002da6:	b128      	cbz	r0, 8002db4 <USER_SPI_ioctl+0x54>
	res = RES_ERROR;
 8002da8:	462c      	mov	r4, r5

	default:
		res = RES_PARERR;
	}

	despiselect();
 8002daa:	f7ff fd9d 	bl	80028e8 <despiselect>

	return res;
}
 8002dae:	4620      	mov	r0, r4
 8002db0:	b004      	add	sp, #16
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002db4:	2110      	movs	r1, #16
 8002db6:	4668      	mov	r0, sp
 8002db8:	f7ff fe52 	bl	8002a60 <rcvr_datablock>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	f000 80d0 	beq.w	8002f62 <USER_SPI_ioctl+0x202>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002dc2:	f89d 3000 	ldrb.w	r3, [sp]
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d01f      	beq.n	8002e0c <USER_SPI_ioctl+0xac>
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002dcc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002dd0:	f002 020f 	and.w	r2, r2, #15
 8002dd4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002dd8:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8002ddc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	f003 0306 	and.w	r3, r3, #6
 8002de6:	441a      	add	r2, r3
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002de8:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002dec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 8002df6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8002dfa:	0289      	lsls	r1, r1, #10
 8002dfc:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8002e00:	440b      	add	r3, r1
 8002e02:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 8002e04:	3a07      	subs	r2, #7
 8002e06:	4093      	lsls	r3, r2
 8002e08:	6033      	str	r3, [r6, #0]
 8002e0a:	e7ce      	b.n	8002daa <USER_SPI_ioctl+0x4a>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002e0c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002e10:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002e14:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002e1c:	0412      	lsls	r2, r2, #16
 8002e1e:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8002e22:	4413      	add	r3, r2
 8002e24:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << 10;
 8002e26:	029b      	lsls	r3, r3, #10
 8002e28:	6033      	str	r3, [r6, #0]
 8002e2a:	e7be      	b.n	8002daa <USER_SPI_ioctl+0x4a>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002e2c:	4b54      	ldr	r3, [pc, #336]	; (8002f80 <USER_SPI_ioctl+0x220>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	f013 0f04 	tst.w	r3, #4
 8002e34:	d020      	beq.n	8002e78 <USER_SPI_ioctl+0x118>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002e36:	2100      	movs	r1, #0
 8002e38:	208d      	movs	r0, #141	; 0x8d
 8002e3a:	f7ff fd79 	bl	8002930 <send_cmd>
 8002e3e:	b108      	cbz	r0, 8002e44 <USER_SPI_ioctl+0xe4>
	res = RES_ERROR;
 8002e40:	2401      	movs	r4, #1
 8002e42:	e7b2      	b.n	8002daa <USER_SPI_ioctl+0x4a>
				xchg_spi(0xFF);
 8002e44:	20ff      	movs	r0, #255	; 0xff
 8002e46:	f7ff fd17 	bl	8002878 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	4668      	mov	r0, sp
 8002e4e:	f7ff fe07 	bl	8002a60 <rcvr_datablock>
 8002e52:	b978      	cbnz	r0, 8002e74 <USER_SPI_ioctl+0x114>
	res = RES_ERROR;
 8002e54:	2401      	movs	r4, #1
 8002e56:	e7a8      	b.n	8002daa <USER_SPI_ioctl+0x4a>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002e58:	20ff      	movs	r0, #255	; 0xff
 8002e5a:	f7ff fd0d 	bl	8002878 <xchg_spi>
 8002e5e:	3c01      	subs	r4, #1
 8002e60:	b2e4      	uxtb	r4, r4
 8002e62:	2c00      	cmp	r4, #0
 8002e64:	d1f8      	bne.n	8002e58 <USER_SPI_ioctl+0xf8>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002e66:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8002e6a:	0912      	lsrs	r2, r2, #4
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	4093      	lsls	r3, r2
 8002e70:	6033      	str	r3, [r6, #0]
					res = RES_OK;
 8002e72:	e79a      	b.n	8002daa <USER_SPI_ioctl+0x4a>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002e74:	2430      	movs	r4, #48	; 0x30
 8002e76:	e7f4      	b.n	8002e62 <USER_SPI_ioctl+0x102>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2009      	movs	r0, #9
 8002e7c:	f7ff fd58 	bl	8002930 <send_cmd>
 8002e80:	4605      	mov	r5, r0
 8002e82:	b108      	cbz	r0, 8002e88 <USER_SPI_ioctl+0x128>
	res = RES_ERROR;
 8002e84:	2401      	movs	r4, #1
 8002e86:	e790      	b.n	8002daa <USER_SPI_ioctl+0x4a>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002e88:	2110      	movs	r1, #16
 8002e8a:	4668      	mov	r0, sp
 8002e8c:	f7ff fde8 	bl	8002a60 <rcvr_datablock>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d068      	beq.n	8002f66 <USER_SPI_ioctl+0x206>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002e94:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <USER_SPI_ioctl+0x220>)
 8002e96:	781c      	ldrb	r4, [r3, #0]
 8002e98:	f014 0402 	ands.w	r4, r4, #2
 8002e9c:	d011      	beq.n	8002ec2 <USER_SPI_ioctl+0x162>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002e9e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002ea8:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002eac:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002eb6:	0992      	lsrs	r2, r2, #6
 8002eb8:	3a01      	subs	r2, #1
 8002eba:	4093      	lsls	r3, r2
 8002ebc:	6033      	str	r3, [r6, #0]
				res = RES_OK;
 8002ebe:	462c      	mov	r4, r5
 8002ec0:	e773      	b.n	8002daa <USER_SPI_ioctl+0x4a>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002ec2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8002ec6:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8002eca:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8002ece:	00cb      	lsls	r3, r1, #3
 8002ed0:	f003 0318 	and.w	r3, r3, #24
 8002ed4:	eb03 1351 	add.w	r3, r3, r1, lsr #5
 8002ed8:	3301      	adds	r3, #1
 8002eda:	fb02 3303 	mla	r3, r2, r3, r3
 8002ede:	6033      	str	r3, [r6, #0]
 8002ee0:	e763      	b.n	8002daa <USER_SPI_ioctl+0x4a>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002ee2:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <USER_SPI_ioctl+0x220>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f013 0f06 	tst.w	r3, #6
 8002eea:	d101      	bne.n	8002ef0 <USER_SPI_ioctl+0x190>
	res = RES_ERROR;
 8002eec:	2401      	movs	r4, #1
 8002eee:	e75c      	b.n	8002daa <USER_SPI_ioctl+0x4a>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002ef0:	466a      	mov	r2, sp
 8002ef2:	210b      	movs	r1, #11
 8002ef4:	f7ff ff34 	bl	8002d60 <USER_SPI_ioctl>
 8002ef8:	bbb8      	cbnz	r0, 8002f6a <USER_SPI_ioctl+0x20a>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002efa:	f89d 3000 	ldrb.w	r3, [sp]
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	d104      	bne.n	8002f0c <USER_SPI_ioctl+0x1ac>
 8002f02:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002f06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f0a:	d030      	beq.n	8002f6e <USER_SPI_ioctl+0x20e>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002f0c:	6831      	ldr	r1, [r6, #0]
 8002f0e:	6874      	ldr	r4, [r6, #4]
		if (!(CardType & CT_BLOCK)) {
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <USER_SPI_ioctl+0x220>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f013 0f08 	tst.w	r3, #8
 8002f18:	d101      	bne.n	8002f1e <USER_SPI_ioctl+0x1be>
			st *= 512; ed *= 512;
 8002f1a:	0249      	lsls	r1, r1, #9
 8002f1c:	0264      	lsls	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002f1e:	2020      	movs	r0, #32
 8002f20:	f7ff fd06 	bl	8002930 <send_cmd>
 8002f24:	b108      	cbz	r0, 8002f2a <USER_SPI_ioctl+0x1ca>
	res = RES_ERROR;
 8002f26:	2401      	movs	r4, #1
 8002f28:	e73f      	b.n	8002daa <USER_SPI_ioctl+0x4a>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	2021      	movs	r0, #33	; 0x21
 8002f2e:	f7ff fcff 	bl	8002930 <send_cmd>
 8002f32:	b108      	cbz	r0, 8002f38 <USER_SPI_ioctl+0x1d8>
	res = RES_ERROR;
 8002f34:	2401      	movs	r4, #1
 8002f36:	e738      	b.n	8002daa <USER_SPI_ioctl+0x4a>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2026      	movs	r0, #38	; 0x26
 8002f3c:	f7ff fcf8 	bl	8002930 <send_cmd>
 8002f40:	4604      	mov	r4, r0
 8002f42:	b108      	cbz	r0, 8002f48 <USER_SPI_ioctl+0x1e8>
	res = RES_ERROR;
 8002f44:	2401      	movs	r4, #1
 8002f46:	e730      	b.n	8002daa <USER_SPI_ioctl+0x4a>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002f48:	f247 5030 	movw	r0, #30000	; 0x7530
 8002f4c:	f7ff fcaa 	bl	80028a4 <wait_ready>
 8002f50:	2800      	cmp	r0, #0
 8002f52:	f47f af2a 	bne.w	8002daa <USER_SPI_ioctl+0x4a>
	res = RES_ERROR;
 8002f56:	2401      	movs	r4, #1
 8002f58:	e727      	b.n	8002daa <USER_SPI_ioctl+0x4a>
	switch (cmd) {
 8002f5a:	2404      	movs	r4, #4
 8002f5c:	e725      	b.n	8002daa <USER_SPI_ioctl+0x4a>
		if (spiselect()) res = RES_OK;
 8002f5e:	462c      	mov	r4, r5
 8002f60:	e723      	b.n	8002daa <USER_SPI_ioctl+0x4a>
	res = RES_ERROR;
 8002f62:	462c      	mov	r4, r5
 8002f64:	e721      	b.n	8002daa <USER_SPI_ioctl+0x4a>
 8002f66:	2401      	movs	r4, #1
 8002f68:	e71f      	b.n	8002daa <USER_SPI_ioctl+0x4a>
 8002f6a:	2401      	movs	r4, #1
 8002f6c:	e71d      	b.n	8002daa <USER_SPI_ioctl+0x4a>
 8002f6e:	2401      	movs	r4, #1
 8002f70:	e71b      	b.n	8002daa <USER_SPI_ioctl+0x4a>
	if (drv) return RES_PARERR;					/* Check parameter */
 8002f72:	2404      	movs	r4, #4
 8002f74:	e71b      	b.n	8002dae <USER_SPI_ioctl+0x4e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002f76:	2403      	movs	r4, #3
 8002f78:	e719      	b.n	8002dae <USER_SPI_ioctl+0x4e>
 8002f7a:	bf00      	nop
 8002f7c:	20000024 	.word	0x20000024
 8002f80:	200007d4 	.word	0x200007d4

08002f84 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002f84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002f86:	f7fe ff9b 	bl	8001ec0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002f8a:	f000 fa93 	bl	80034b4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002f8e:	bd08      	pop	{r3, pc}

08002f90 <FwUpdateAgent_Run>:
void FwUpdateAgent_Run(void)
{
  /* USER CODE BEGIN FwUpdateAgent_Run_1 */

  /* USER CODE END FwUpdateAgent_Run_1 */
}
 8002f90:	4770      	bx	lr

08002f92 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
//  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
}
 8002f92:	4770      	bx	lr

08002f94 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
//  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
}
 8002f94:	4770      	bx	lr

08002f96 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 8002f96:	4770      	bx	lr

08002f98 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002f98:	4b01      	ldr	r3, [pc, #4]	; (8002fa0 <OnTxFrameCtrlChanged+0x8>)
 8002f9a:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	2000007c 	.word	0x2000007c

08002fa4 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002fa4:	4b01      	ldr	r3, [pc, #4]	; (8002fac <OnPingSlotPeriodicityChanged+0x8>)
 8002fa6:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2000007c 	.word	0x2000007c

08002fb0 <OnBeaconStatusChange>:
  if (params != NULL)
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d03f      	beq.n	8003034 <OnBeaconStatusChange+0x84>
{
 8002fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb8:	b08c      	sub	sp, #48	; 0x30
 8002fba:	4603      	mov	r3, r0
    switch (params->State)
 8002fbc:	7842      	ldrb	r2, [r0, #1]
 8002fbe:	2a02      	cmp	r2, #2
 8002fc0:	d00a      	beq.n	8002fd8 <OnBeaconStatusChange+0x28>
 8002fc2:	2a03      	cmp	r2, #3
 8002fc4:	d02f      	beq.n	8003026 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <OnBeaconStatusChange+0x88>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4611      	mov	r1, r2
 8002fcc:	2002      	movs	r0, #2
 8002fce:	f011 f833 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 8002fd2:	b00c      	add	sp, #48	; 0x30
 8002fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002fd8:	7c02      	ldrb	r2, [r0, #16]
 8002fda:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002fde:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002fe2:	7d9c      	ldrb	r4, [r3, #22]
 8002fe4:	7ddd      	ldrb	r5, [r3, #23]
 8002fe6:	7e1e      	ldrb	r6, [r3, #24]
 8002fe8:	7e5f      	ldrb	r7, [r3, #25]
 8002fea:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002fee:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002ff2:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002ff6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002ffa:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002ffe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8003002:	9708      	str	r7, [sp, #32]
 8003004:	9607      	str	r6, [sp, #28]
 8003006:	9506      	str	r5, [sp, #24]
 8003008:	9405      	str	r4, [sp, #20]
 800300a:	685c      	ldr	r4, [r3, #4]
 800300c:	9404      	str	r4, [sp, #16]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	9303      	str	r3, [sp, #12]
 8003012:	9002      	str	r0, [sp, #8]
 8003014:	9101      	str	r1, [sp, #4]
 8003016:	9200      	str	r2, [sp, #0]
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <OnBeaconStatusChange+0x8c>)
 800301a:	2200      	movs	r2, #0
 800301c:	4611      	mov	r1, r2
 800301e:	2002      	movs	r0, #2
 8003020:	f011 f80a 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8003024:	e7d5      	b.n	8002fd2 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <OnBeaconStatusChange+0x90>)
 8003028:	2200      	movs	r2, #0
 800302a:	4611      	mov	r1, r2
 800302c:	2002      	movs	r0, #2
 800302e:	f011 f803 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 8003032:	e7ce      	b.n	8002fd2 <OnBeaconStatusChange+0x22>
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	080193ec 	.word	0x080193ec
 800303c:	08019404 	.word	0x08019404
 8003040:	08019478 	.word	0x08019478

08003044 <OnClassChange>:
{
 8003044:	b500      	push	{lr}
 8003046:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <OnClassChange+0x1c>)
 800304a:	5c1b      	ldrb	r3, [r3, r0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <OnClassChange+0x20>)
 8003050:	2200      	movs	r2, #0
 8003052:	4611      	mov	r1, r2
 8003054:	2002      	movs	r0, #2
 8003056:	f010 ffef 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 800305a:	b003      	add	sp, #12
 800305c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003060:	080194b4 	.word	0x080194b4
 8003064:	08019498 	.word	0x08019498

08003068 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8003068:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800306a:	2801      	cmp	r0, #1
 800306c:	d006      	beq.n	800307c <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <OnNvmDataChange+0x24>)
 8003070:	2200      	movs	r2, #0
 8003072:	4611      	mov	r1, r2
 8003074:	2002      	movs	r0, #2
 8003076:	f010 ffdf 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800307a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <OnNvmDataChange+0x28>)
 800307e:	2200      	movs	r2, #0
 8003080:	4611      	mov	r1, r2
 8003082:	2002      	movs	r0, #2
 8003084:	f010 ffd8 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
 8003088:	e7f7      	b.n	800307a <OnNvmDataChange+0x12>
 800308a:	bf00      	nop
 800308c:	080194cc 	.word	0x080194cc
 8003090:	080194b8 	.word	0x080194b8

08003094 <OnTxTimerEvent>:
{
 8003094:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8003096:	2100      	movs	r1, #0
 8003098:	2002      	movs	r0, #2
 800309a:	f011 f8d3 	bl	8014244 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 800309e:	4802      	ldr	r0, [pc, #8]	; (80030a8 <OnTxTimerEvent+0x14>)
 80030a0:	f011 faba 	bl	8014618 <UTIL_TIMER_Start>
}
 80030a4:	bd08      	pop	{r3, pc}
 80030a6:	bf00      	nop
 80030a8:	20000934 	.word	0x20000934

080030ac <OnMacProcessNotify>:
{
 80030ac:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80030ae:	2100      	movs	r1, #0
 80030b0:	2001      	movs	r0, #1
 80030b2:	f011 f8c7 	bl	8014244 <UTIL_SEQ_SetTask>
}
 80030b6:	bd08      	pop	{r3, pc}

080030b8 <OnStopJoinTimerEvent>:
{
 80030b8:	b508      	push	{r3, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <OnStopJoinTimerEvent+0x18>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d000      	beq.n	80030c4 <OnStopJoinTimerEvent+0xc>
}
 80030c2:	bd08      	pop	{r3, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80030c4:	2100      	movs	r1, #0
 80030c6:	2008      	movs	r0, #8
 80030c8:	f011 f8bc 	bl	8014244 <UTIL_SEQ_SetTask>
}
 80030cc:	e7f9      	b.n	80030c2 <OnStopJoinTimerEvent+0xa>
 80030ce:	bf00      	nop
 80030d0:	20000025 	.word	0x20000025

080030d4 <OnSystemReset>:
{
 80030d4:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80030d6:	f006 f9a3 	bl	8009420 <LmHandlerHalt>
 80030da:	b100      	cbz	r0, 80030de <OnSystemReset+0xa>
}
 80030dc:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80030de:	f005 fe5d 	bl	8008d9c <LmHandlerJoinStatus>
 80030e2:	2801      	cmp	r0, #1
 80030e4:	d1fa      	bne.n	80030dc <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030e6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80030ea:	4905      	ldr	r1, [pc, #20]	; (8003100 <OnSystemReset+0x2c>)
 80030ec:	68ca      	ldr	r2, [r1, #12]
 80030ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80030f2:	4b04      	ldr	r3, [pc, #16]	; (8003104 <OnSystemReset+0x30>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60cb      	str	r3, [r1, #12]
 80030f8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80030fc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80030fe:	e7fd      	b.n	80030fc <OnSystemReset+0x28>
 8003100:	e000ed00 	.word	0xe000ed00
 8003104:	05fa0004 	.word	0x05fa0004

08003108 <OnTxPeriodicityChanged>:
{
 8003108:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <OnTxPeriodicityChanged+0x28>)
 800310c:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800310e:	b910      	cbnz	r0, 8003116 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8003110:	f242 7210 	movw	r2, #10000	; 0x2710
 8003114:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8003116:	4c07      	ldr	r4, [pc, #28]	; (8003134 <OnTxPeriodicityChanged+0x2c>)
 8003118:	4620      	mov	r0, r4
 800311a:	f011 fa23 	bl	8014564 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800311e:	4b04      	ldr	r3, [pc, #16]	; (8003130 <OnTxPeriodicityChanged+0x28>)
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	4620      	mov	r0, r4
 8003124:	f011 fabe 	bl	80146a4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8003128:	4620      	mov	r0, r4
 800312a:	f011 fa75 	bl	8014618 <UTIL_TIMER_Start>
}
 800312e:	bd10      	pop	{r4, pc}
 8003130:	20000094 	.word	0x20000094
 8003134:	20000934 	.word	0x20000934

08003138 <OnRxData>:
{
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	4605      	mov	r5, r0
 800313e:	460c      	mov	r4, r1
  APP_LOG(TS_OFF, VLEVEL_H, "HEY ITS ME IM RECEIVING DATA WOW\r\n");
 8003140:	4b36      	ldr	r3, [pc, #216]	; (800321c <OnRxData+0xe4>)
 8003142:	2200      	movs	r2, #0
 8003144:	4611      	mov	r1, r2
 8003146:	2003      	movs	r0, #3
 8003148:	f010 ff76 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  if (params != NULL)
 800314c:	2c00      	cmp	r4, #0
 800314e:	d04b      	beq.n	80031e8 <OnRxData+0xb0>
    UTIL_TIMER_Start(&RxLedTimer);
 8003150:	4833      	ldr	r0, [pc, #204]	; (8003220 <OnRxData+0xe8>)
 8003152:	f011 fa61 	bl	8014618 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8003156:	7826      	ldrb	r6, [r4, #0]
 8003158:	2e00      	cmp	r6, #0
 800315a:	d042      	beq.n	80031e2 <OnRxData+0xaa>
      if (appData != NULL)
 800315c:	2d00      	cmp	r5, #0
 800315e:	d03f      	beq.n	80031e0 <OnRxData+0xa8>
        RxPort = appData->Port;
 8003160:	782e      	ldrb	r6, [r5, #0]
        if (appData->Buffer != NULL)
 8003162:	686b      	ldr	r3, [r5, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d03c      	beq.n	80031e2 <OnRxData+0xaa>
          switch (appData->Port)
 8003168:	2e02      	cmp	r6, #2
 800316a:	d016      	beq.n	800319a <OnRxData+0x62>
 800316c:	2e03      	cmp	r6, #3
 800316e:	d138      	bne.n	80031e2 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8003170:	786a      	ldrb	r2, [r5, #1]
 8003172:	2a01      	cmp	r2, #1
 8003174:	d135      	bne.n	80031e2 <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d006      	beq.n	800318a <OnRxData+0x52>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d008      	beq.n	8003192 <OnRxData+0x5a>
 8003180:	bb7b      	cbnz	r3, 80031e2 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 8003182:	2000      	movs	r0, #0
 8003184:	f005 fedc 	bl	8008f40 <LmHandlerRequestClass>
                    break;
 8003188:	e02b      	b.n	80031e2 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 800318a:	2001      	movs	r0, #1
 800318c:	f005 fed8 	bl	8008f40 <LmHandlerRequestClass>
                    break;
 8003190:	e027      	b.n	80031e2 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 8003192:	2002      	movs	r0, #2
 8003194:	f005 fed4 	bl	8008f40 <LmHandlerRequestClass>
                    break;
 8003198:	e023      	b.n	80031e2 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800319a:	786a      	ldrb	r2, [r5, #1]
 800319c:	2a01      	cmp	r2, #1
 800319e:	d120      	bne.n	80031e2 <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <OnRxData+0xec>)
 80031a8:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 80031aa:	b963      	cbnz	r3, 80031c6 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <OnRxData+0xf0>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	4611      	mov	r1, r2
 80031b2:	2003      	movs	r0, #3
 80031b4:	f010 ff40 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80031b8:	2200      	movs	r2, #0
 80031ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031be:	481b      	ldr	r0, [pc, #108]	; (800322c <OnRxData+0xf4>)
 80031c0:	f001 fe42 	bl	8004e48 <HAL_GPIO_WritePin>
 80031c4:	e00d      	b.n	80031e2 <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <OnRxData+0xf8>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	4611      	mov	r1, r2
 80031cc:	2003      	movs	r0, #3
 80031ce:	f010 ff33 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80031d2:	2201      	movs	r2, #1
 80031d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031d8:	4814      	ldr	r0, [pc, #80]	; (800322c <OnRxData+0xf4>)
 80031da:	f001 fe35 	bl	8004e48 <HAL_GPIO_WritePin>
 80031de:	e000      	b.n	80031e2 <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80031e0:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80031e2:	7c23      	ldrb	r3, [r4, #16]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d901      	bls.n	80031ec <OnRxData+0xb4>
}
 80031e8:	b006      	add	sp, #24
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80031ec:	f994 2008 	ldrsb.w	r2, [r4, #8]
 80031f0:	f994 1009 	ldrsb.w	r1, [r4, #9]
 80031f4:	f994 000a 	ldrsb.w	r0, [r4, #10]
 80031f8:	9005      	str	r0, [sp, #20]
 80031fa:	9104      	str	r1, [sp, #16]
 80031fc:	490d      	ldr	r1, [pc, #52]	; (8003234 <OnRxData+0xfc>)
 80031fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003202:	9303      	str	r3, [sp, #12]
 8003204:	9202      	str	r2, [sp, #8]
 8003206:	9601      	str	r6, [sp, #4]
 8003208:	68e3      	ldr	r3, [r4, #12]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <OnRxData+0x100>)
 800320e:	2200      	movs	r2, #0
 8003210:	4611      	mov	r1, r2
 8003212:	2003      	movs	r0, #3
 8003214:	f010 ff10 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 8003218:	e7e6      	b.n	80031e8 <OnRxData+0xb0>
 800321a:	bf00      	nop
 800321c:	080194e0 	.word	0x080194e0
 8003220:	200008ec 	.word	0x200008ec
 8003224:	200008d2 	.word	0x200008d2
 8003228:	08019504 	.word	0x08019504
 800322c:	48000400 	.word	0x48000400
 8003230:	08019510 	.word	0x08019510
 8003234:	080197c4 	.word	0x080197c4
 8003238:	0801951c 	.word	0x0801951c

0800323c <OnTxData>:
  if ((params != NULL))
 800323c:	2800      	cmp	r0, #0
 800323e:	d042      	beq.n	80032c6 <OnTxData+0x8a>
{
 8003240:	b510      	push	{r4, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8003246:	7803      	ldrb	r3, [r0, #0]
 8003248:	b90b      	cbnz	r3, 800324e <OnTxData+0x12>
}
 800324a:	b004      	add	sp, #16
 800324c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800324e:	2201      	movs	r2, #1
 8003250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003254:	481c      	ldr	r0, [pc, #112]	; (80032c8 <OnTxData+0x8c>)
 8003256:	f001 fdf7 	bl	8004e48 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800325a:	481c      	ldr	r0, [pc, #112]	; (80032cc <OnTxData+0x90>)
 800325c:	f011 f9dc 	bl	8014618 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <OnTxData+0x94>)
 8003262:	2200      	movs	r2, #0
 8003264:	4611      	mov	r1, r2
 8003266:	2002      	movs	r0, #2
 8003268:	f010 fee6 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800326c:	7c23      	ldrb	r3, [r4, #16]
 800326e:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8003272:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8003276:	9103      	str	r1, [sp, #12]
 8003278:	9202      	str	r2, [sp, #8]
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	68e3      	ldr	r3, [r4, #12]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <OnTxData+0x98>)
 8003282:	2200      	movs	r2, #0
 8003284:	4611      	mov	r1, r2
 8003286:	2003      	movs	r0, #3
 8003288:	f010 fed6 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <OnTxData+0x9c>)
 800328e:	2200      	movs	r2, #0
 8003290:	4611      	mov	r1, r2
 8003292:	2003      	movs	r0, #3
 8003294:	f010 fed0 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8003298:	7a23      	ldrb	r3, [r4, #8]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10c      	bne.n	80032b8 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800329e:	7a63      	ldrb	r3, [r4, #9]
 80032a0:	b143      	cbz	r3, 80032b4 <OnTxData+0x78>
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <OnTxData+0xa0>)
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <OnTxData+0xa4>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	4611      	mov	r1, r2
 80032ac:	2003      	movs	r0, #3
 80032ae:	f010 fec3 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
 80032b2:	e7ca      	b.n	800324a <OnTxData+0xe>
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <OnTxData+0xa8>)
 80032b6:	e7f5      	b.n	80032a4 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <OnTxData+0xac>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	4611      	mov	r1, r2
 80032be:	2003      	movs	r0, #3
 80032c0:	f010 feba 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 80032c4:	e7c1      	b.n	800324a <OnTxData+0xe>
 80032c6:	4770      	bx	lr
 80032c8:	48000400 	.word	0x48000400
 80032cc:	2000091c 	.word	0x2000091c
 80032d0:	08019570 	.word	0x08019570
 80032d4:	080195a4 	.word	0x080195a4
 80032d8:	080195d8 	.word	0x080195d8
 80032dc:	08019564 	.word	0x08019564
 80032e0:	080195e8 	.word	0x080195e8
 80032e4:	08019568 	.word	0x08019568
 80032e8:	080195fc 	.word	0x080195fc

080032ec <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4604      	mov	r4, r0
 80032f0:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 80032f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032f6:	4805      	ldr	r0, [pc, #20]	; (800330c <OnStoreContextRequest+0x20>)
 80032f8:	f7fe fa40 	bl	800177c <FLASH_IF_Erase>
 80032fc:	b100      	cbz	r0, 8003300 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 80032fe:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8003300:	462a      	mov	r2, r5
 8003302:	4621      	mov	r1, r4
 8003304:	4801      	ldr	r0, [pc, #4]	; (800330c <OnStoreContextRequest+0x20>)
 8003306:	f7fe fa01 	bl	800170c <FLASH_IF_Write>
}
 800330a:	e7f8      	b.n	80032fe <OnStoreContextRequest+0x12>
 800330c:	0803f000 	.word	0x0803f000

08003310 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8003310:	b508      	push	{r3, lr}
 8003312:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8003314:	4901      	ldr	r1, [pc, #4]	; (800331c <OnRestoreContextRequest+0xc>)
 8003316:	f7fe fa15 	bl	8001744 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800331a:	bd08      	pop	{r3, pc}
 800331c:	0803f000 	.word	0x0803f000

08003320 <StopJoin>:
{
 8003320:	b538      	push	{r3, r4, r5, lr}
  UTIL_TIMER_Stop(&TxTimer);
 8003322:	4815      	ldr	r0, [pc, #84]	; (8003378 <StopJoin+0x58>)
 8003324:	f011 f91e 	bl	8014564 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8003328:	f006 f872 	bl	8009410 <LmHandlerStop>
 800332c:	b148      	cbz	r0, 8003342 <StopJoin+0x22>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <StopJoin+0x5c>)
 8003330:	2200      	movs	r2, #0
 8003332:	4611      	mov	r1, r2
 8003334:	2002      	movs	r0, #2
 8003336:	f010 fe7f 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 800333a:	4811      	ldr	r0, [pc, #68]	; (8003380 <StopJoin+0x60>)
 800333c:	f011 f96c 	bl	8014618 <UTIL_TIMER_Start>
}
 8003340:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <StopJoin+0x64>)
 8003344:	2200      	movs	r2, #0
 8003346:	4611      	mov	r1, r2
 8003348:	2002      	movs	r0, #2
 800334a:	f010 fe75 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 800334e:	4c0e      	ldr	r4, [pc, #56]	; (8003388 <StopJoin+0x68>)
 8003350:	2501      	movs	r5, #1
 8003352:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8003354:	4b0d      	ldr	r3, [pc, #52]	; (800338c <StopJoin+0x6c>)
 8003356:	2200      	movs	r2, #0
 8003358:	4611      	mov	r1, r2
 800335a:	2002      	movs	r0, #2
 800335c:	f010 fe6c 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <StopJoin+0x70>)
 8003362:	f005 fecd 	bl	8009100 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8003366:	4629      	mov	r1, r5
 8003368:	7820      	ldrb	r0, [r4, #0]
 800336a:	f005 fc85 	bl	8008c78 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800336e:	4802      	ldr	r0, [pc, #8]	; (8003378 <StopJoin+0x58>)
 8003370:	f011 f952 	bl	8014618 <UTIL_TIMER_Start>
 8003374:	e7e1      	b.n	800333a <StopJoin+0x1a>
 8003376:	bf00      	nop
 8003378:	20000934 	.word	0x20000934
 800337c:	0801960c 	.word	0x0801960c
 8003380:	20000904 	.word	0x20000904
 8003384:	0801962c 	.word	0x0801962c
 8003388:	20000025 	.word	0x20000025
 800338c:	08019640 	.word	0x08019640
 8003390:	2000007c 	.word	0x2000007c

08003394 <StoreContext>:
{
 8003394:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8003396:	f006 f8e3 	bl	8009560 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800339a:	f110 0f08 	cmn.w	r0, #8
 800339e:	d003      	beq.n	80033a8 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 80033a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80033a4:	d007      	beq.n	80033b6 <StoreContext+0x22>
}
 80033a6:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <StoreContext+0x30>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	4611      	mov	r1, r2
 80033ae:	2002      	movs	r0, #2
 80033b0:	f010 fe42 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
 80033b4:	e7f7      	b.n	80033a6 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 80033b6:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <StoreContext+0x34>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	4611      	mov	r1, r2
 80033bc:	2002      	movs	r0, #2
 80033be:	f010 fe3b 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 80033c2:	e7f0      	b.n	80033a6 <StoreContext+0x12>
 80033c4:	08019660 	.word	0x08019660
 80033c8:	08019678 	.word	0x08019678

080033cc <SendTxData>:
{
 80033cc:	b530      	push	{r4, r5, lr}
 80033ce:	b083      	sub	sp, #12
  if (LmHandlerIsBusy() == false)
 80033d0:	f005 fcf6 	bl	8008dc0 <LmHandlerIsBusy>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d13e      	bne.n	8003456 <SendTxData+0x8a>
    AppData.Port = LORAWAN_USER_APP_PORT;
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <SendTxData+0xb0>)
 80033da:	2202      	movs	r2, #2
 80033dc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[0] = (uint8_t)10;
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	210a      	movs	r1, #10
 80033e2:	7011      	strb	r1, [r2, #0]
    AppData.BufferSize = 1; // Update the buffer size to the size of the integer SOC value
 80033e4:	2201      	movs	r2, #1
 80033e6:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <SendTxData+0xb4>)
 80033ea:	7a5b      	ldrb	r3, [r3, #9]
 80033ec:	b96b      	cbnz	r3, 800340a <SendTxData+0x3e>
    status = LmHandlerDeviceTimeReq ( );
 80033ee:	f005 fcbb 	bl	8008d68 <LmHandlerDeviceTimeReq>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80033f2:	2200      	movs	r2, #0
 80033f4:	4b23      	ldr	r3, [pc, #140]	; (8003484 <SendTxData+0xb8>)
 80033f6:	78d9      	ldrb	r1, [r3, #3]
 80033f8:	4820      	ldr	r0, [pc, #128]	; (800347c <SendTxData+0xb0>)
 80033fa:	f005 fcf7 	bl	8008dec <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 80033fe:	b190      	cbz	r0, 8003426 <SendTxData+0x5a>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8003400:	f110 0f06 	cmn.w	r0, #6
 8003404:	d017      	beq.n	8003436 <SendTxData+0x6a>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8003406:	2500      	movs	r5, #0
 8003408:	e026      	b.n	8003458 <SendTxData+0x8c>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800340a:	f005 fcc7 	bl	8008d9c <LmHandlerJoinStatus>
 800340e:	2801      	cmp	r0, #1
 8003410:	d1ed      	bne.n	80033ee <SendTxData+0x22>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8003412:	481b      	ldr	r0, [pc, #108]	; (8003480 <SendTxData+0xb4>)
 8003414:	f011 f8a6 	bl	8014564 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); // LED_RED
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800341e:	481a      	ldr	r0, [pc, #104]	; (8003488 <SendTxData+0xbc>)
 8003420:	f001 fd12 	bl	8004e48 <HAL_GPIO_WritePin>
 8003424:	e7e3      	b.n	80033ee <SendTxData+0x22>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8003426:	4b19      	ldr	r3, [pc, #100]	; (800348c <SendTxData+0xc0>)
 8003428:	2201      	movs	r2, #1
 800342a:	2100      	movs	r1, #0
 800342c:	4610      	mov	r0, r2
 800342e:	f010 fe03 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8003432:	2500      	movs	r5, #0
 8003434:	e010      	b.n	8003458 <SendTxData+0x8c>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8003436:	f005 fcab 	bl	8008d90 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 800343a:	4605      	mov	r5, r0
 800343c:	b160      	cbz	r0, 8003458 <SendTxData+0x8c>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <SendTxData+0xc4>)
 8003440:	fba3 2300 	umull	r2, r3, r3, r0
 8003444:	099b      	lsrs	r3, r3, #6
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <SendTxData+0xc8>)
 800344a:	2201      	movs	r2, #1
 800344c:	2100      	movs	r1, #0
 800344e:	4610      	mov	r0, r2
 8003450:	f010 fdf2 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
 8003454:	e000      	b.n	8003458 <SendTxData+0x8c>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8003456:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8003458:	4c0f      	ldr	r4, [pc, #60]	; (8003498 <SendTxData+0xcc>)
 800345a:	4620      	mov	r0, r4
 800345c:	f011 f882 	bl	8014564 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <SendTxData+0xd0>)
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	42a9      	cmp	r1, r5
 8003466:	bf38      	it	cc
 8003468:	4629      	movcc	r1, r5
 800346a:	4620      	mov	r0, r4
 800346c:	f011 f91a 	bl	80146a4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8003470:	4620      	mov	r0, r4
 8003472:	f011 f8d1 	bl	8014618 <UTIL_TIMER_Start>
}
 8003476:	b003      	add	sp, #12
 8003478:	bd30      	pop	{r4, r5, pc}
 800347a:	bf00      	nop
 800347c:	20000028 	.word	0x20000028
 8003480:	200008d4 	.word	0x200008d4
 8003484:	2000007c 	.word	0x2000007c
 8003488:	48000400 	.word	0x48000400
 800348c:	08019690 	.word	0x08019690
 8003490:	10624dd3 	.word	0x10624dd3
 8003494:	080196a0 	.word	0x080196a0
 8003498:	20000934 	.word	0x20000934
 800349c:	20000094 	.word	0x20000094

080034a0 <OnJoinTimerLedEvent>:
{
 80034a0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80034a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034a6:	4802      	ldr	r0, [pc, #8]	; (80034b0 <OnJoinTimerLedEvent+0x10>)
 80034a8:	f001 fcd3 	bl	8004e52 <HAL_GPIO_TogglePin>
}
 80034ac:	bd08      	pop	{r3, pc}
 80034ae:	bf00      	nop
 80034b0:	48000400 	.word	0x48000400

080034b4 <LoRaWAN_Init>:
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 80034b8:	2400      	movs	r4, #0
 80034ba:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80034bc:	9402      	str	r4, [sp, #8]
 80034be:	2703      	movs	r7, #3
 80034c0:	9701      	str	r7, [sp, #4]
 80034c2:	2601      	movs	r6, #1
 80034c4:	9600      	str	r6, [sp, #0]
 80034c6:	4b50      	ldr	r3, [pc, #320]	; (8003608 <LoRaWAN_Init+0x154>)
 80034c8:	4622      	mov	r2, r4
 80034ca:	4621      	mov	r1, r4
 80034cc:	2002      	movs	r0, #2
 80034ce:	f010 fdb3 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80034d2:	9402      	str	r4, [sp, #8]
 80034d4:	2305      	movs	r3, #5
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	2502      	movs	r5, #2
 80034da:	9500      	str	r5, [sp, #0]
 80034dc:	4b4b      	ldr	r3, [pc, #300]	; (800360c <LoRaWAN_Init+0x158>)
 80034de:	4622      	mov	r2, r4
 80034e0:	4621      	mov	r1, r4
 80034e2:	4628      	mov	r0, r5
 80034e4:	f010 fda8 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80034e8:	9402      	str	r4, [sp, #8]
 80034ea:	9701      	str	r7, [sp, #4]
 80034ec:	9600      	str	r6, [sp, #0]
 80034ee:	4b48      	ldr	r3, [pc, #288]	; (8003610 <LoRaWAN_Init+0x15c>)
 80034f0:	4622      	mov	r2, r4
 80034f2:	4621      	mov	r1, r4
 80034f4:	4628      	mov	r0, r5
 80034f6:	f010 fd9f 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 80034fa:	a905      	add	r1, sp, #20
 80034fc:	4620      	mov	r0, r4
 80034fe:	f005 ff71 	bl	80093e4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8003502:	9b05      	ldr	r3, [sp, #20]
 8003504:	0e1a      	lsrs	r2, r3, #24
 8003506:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800350a:	9102      	str	r1, [sp, #8]
 800350c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	9200      	str	r2, [sp, #0]
 8003514:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <LoRaWAN_Init+0x160>)
 8003516:	4622      	mov	r2, r4
 8003518:	4621      	mov	r1, r4
 800351a:	4628      	mov	r0, r5
 800351c:	f010 fd8c 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8003520:	a905      	add	r1, sp, #20
 8003522:	4630      	mov	r0, r6
 8003524:	f005 ff5e 	bl	80093e4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8003528:	9b05      	ldr	r3, [sp, #20]
 800352a:	0e1a      	lsrs	r2, r3, #24
 800352c:	b2d9      	uxtb	r1, r3
 800352e:	9103      	str	r1, [sp, #12]
 8003530:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003534:	9102      	str	r1, [sp, #8]
 8003536:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	9200      	str	r2, [sp, #0]
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <LoRaWAN_Init+0x164>)
 8003540:	4622      	mov	r2, r4
 8003542:	4621      	mov	r1, r4
 8003544:	4628      	mov	r0, r5
 8003546:	f010 fd77 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800354a:	9400      	str	r4, [sp, #0]
 800354c:	4b33      	ldr	r3, [pc, #204]	; (800361c <LoRaWAN_Init+0x168>)
 800354e:	4622      	mov	r2, r4
 8003550:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003554:	4832      	ldr	r0, [pc, #200]	; (8003620 <LoRaWAN_Init+0x16c>)
 8003556:	f010 ffa7 	bl	80144a8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800355a:	9400      	str	r4, [sp, #0]
 800355c:	4b31      	ldr	r3, [pc, #196]	; (8003624 <LoRaWAN_Init+0x170>)
 800355e:	4622      	mov	r2, r4
 8003560:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003564:	4830      	ldr	r0, [pc, #192]	; (8003628 <LoRaWAN_Init+0x174>)
 8003566:	f010 ff9f 	bl	80144a8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800356a:	9400      	str	r4, [sp, #0]
 800356c:	4b2f      	ldr	r3, [pc, #188]	; (800362c <LoRaWAN_Init+0x178>)
 800356e:	4632      	mov	r2, r6
 8003570:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003574:	482e      	ldr	r0, [pc, #184]	; (8003630 <LoRaWAN_Init+0x17c>)
 8003576:	f010 ff97 	bl	80144a8 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 800357a:	4620      	mov	r0, r4
 800357c:	f7fe f8c0 	bl	8001700 <FLASH_IF_Init>
 8003580:	2800      	cmp	r0, #0
 8003582:	d13e      	bne.n	8003602 <LoRaWAN_Init+0x14e>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8003584:	2400      	movs	r4, #0
 8003586:	9400      	str	r4, [sp, #0]
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <LoRaWAN_Init+0x180>)
 800358a:	4622      	mov	r2, r4
 800358c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003590:	4829      	ldr	r0, [pc, #164]	; (8003638 <LoRaWAN_Init+0x184>)
 8003592:	f010 ff89 	bl	80144a8 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8003596:	4a29      	ldr	r2, [pc, #164]	; (800363c <LoRaWAN_Init+0x188>)
 8003598:	4621      	mov	r1, r4
 800359a:	2001      	movs	r0, #1
 800359c:	f010 fe84 	bl	80142a8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80035a0:	4a27      	ldr	r2, [pc, #156]	; (8003640 <LoRaWAN_Init+0x18c>)
 80035a2:	4621      	mov	r1, r4
 80035a4:	2002      	movs	r0, #2
 80035a6:	f010 fe7f 	bl	80142a8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80035aa:	4a26      	ldr	r2, [pc, #152]	; (8003644 <LoRaWAN_Init+0x190>)
 80035ac:	4621      	mov	r1, r4
 80035ae:	2004      	movs	r0, #4
 80035b0:	f010 fe7a 	bl	80142a8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80035b4:	4a24      	ldr	r2, [pc, #144]	; (8003648 <LoRaWAN_Init+0x194>)
 80035b6:	4621      	mov	r1, r4
 80035b8:	2008      	movs	r0, #8
 80035ba:	f010 fe75 	bl	80142a8 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80035be:	f000 f88b 	bl	80036d8 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80035c2:	4922      	ldr	r1, [pc, #136]	; (800364c <LoRaWAN_Init+0x198>)
 80035c4:	4822      	ldr	r0, [pc, #136]	; (8003650 <LoRaWAN_Init+0x19c>)
 80035c6:	f005 fec1 	bl	800934c <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80035ca:	4822      	ldr	r0, [pc, #136]	; (8003654 <LoRaWAN_Init+0x1a0>)
 80035cc:	f005 fd98 	bl	8009100 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80035d0:	4817      	ldr	r0, [pc, #92]	; (8003630 <LoRaWAN_Init+0x17c>)
 80035d2:	f011 f821 	bl	8014618 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 80035d6:	2101      	movs	r1, #1
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <LoRaWAN_Init+0x1a4>)
 80035da:	7818      	ldrb	r0, [r3, #0]
 80035dc:	f005 fb4c 	bl	8008c78 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80035e0:	4d1e      	ldr	r5, [pc, #120]	; (800365c <LoRaWAN_Init+0x1a8>)
 80035e2:	9400      	str	r4, [sp, #0]
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <LoRaWAN_Init+0x1ac>)
 80035e6:	4622      	mov	r2, r4
 80035e8:	491e      	ldr	r1, [pc, #120]	; (8003664 <LoRaWAN_Init+0x1b0>)
 80035ea:	6809      	ldr	r1, [r1, #0]
 80035ec:	4628      	mov	r0, r5
 80035ee:	f010 ff5b 	bl	80144a8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80035f2:	4628      	mov	r0, r5
 80035f4:	f011 f810 	bl	8014618 <UTIL_TIMER_Start>
  waitForRx = 1;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <LoRaWAN_Init+0x1b4>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	b007      	add	sp, #28
 8003600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003602:	f7fe f9f5 	bl	80019f0 <Error_Handler>
 8003606:	e7bd      	b.n	8003584 <LoRaWAN_Init+0xd0>
 8003608:	080196c0 	.word	0x080196c0
 800360c:	080196e4 	.word	0x080196e4
 8003610:	08019708 	.word	0x08019708
 8003614:	0801972c 	.word	0x0801972c
 8003618:	08019750 	.word	0x08019750
 800361c:	08002f93 	.word	0x08002f93
 8003620:	2000091c 	.word	0x2000091c
 8003624:	08002f95 	.word	0x08002f95
 8003628:	200008ec 	.word	0x200008ec
 800362c:	080034a1 	.word	0x080034a1
 8003630:	200008d4 	.word	0x200008d4
 8003634:	080030b9 	.word	0x080030b9
 8003638:	20000904 	.word	0x20000904
 800363c:	08008ef9 	.word	0x08008ef9
 8003640:	080033cd 	.word	0x080033cd
 8003644:	08003395 	.word	0x08003395
 8003648:	08003321 	.word	0x08003321
 800364c:	01030000 	.word	0x01030000
 8003650:	20000030 	.word	0x20000030
 8003654:	2000007c 	.word	0x2000007c
 8003658:	20000025 	.word	0x20000025
 800365c:	20000934 	.word	0x20000934
 8003660:	08003095 	.word	0x08003095
 8003664:	20000094 	.word	0x20000094
 8003668:	2000000c 	.word	0x2000000c

0800366c <HAL_GPIO_EXTI_Callback>:
{
 800366c:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 800366e:	2802      	cmp	r0, #2
 8003670:	d002      	beq.n	8003678 <HAL_GPIO_EXTI_Callback+0xc>
 8003672:	2840      	cmp	r0, #64	; 0x40
 8003674:	d005      	beq.n	8003682 <HAL_GPIO_EXTI_Callback+0x16>
}
 8003676:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8003678:	2100      	movs	r1, #0
 800367a:	2008      	movs	r0, #8
 800367c:	f010 fde2 	bl	8014244 <UTIL_SEQ_SetTask>
      break;
 8003680:	e7f9      	b.n	8003676 <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8003682:	2100      	movs	r1, #0
 8003684:	2004      	movs	r0, #4
 8003686:	f010 fddd 	bl	8014244 <UTIL_SEQ_SetTask>
}
 800368a:	e7f4      	b.n	8003676 <HAL_GPIO_EXTI_Callback+0xa>

0800368c <sendCurrentTime>:
{
 800368c:	b500      	push	{lr}
 800368e:	b085      	sub	sp, #20
	uint8_t tx_buff[]={0,1,2,3,4,5,6,7,8,9};
 8003690:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <sendCurrentTime+0x28>)
 8003692:	ab01      	add	r3, sp, #4
 8003694:	ca07      	ldmia	r2, {r0, r1, r2}
 8003696:	c303      	stmia	r3!, {r0, r1}
 8003698:	801a      	strh	r2, [r3, #0]
	    	 HAL_UART_Transmit_DMA(&huart1, tx_buff, 10);
 800369a:	220a      	movs	r2, #10
 800369c:	a901      	add	r1, sp, #4
 800369e:	4806      	ldr	r0, [pc, #24]	; (80036b8 <sendCurrentTime+0x2c>)
 80036a0:	f003 fe96 	bl	80073d0 <HAL_UART_Transmit_DMA>
	    	 HAL_Delay(5000);
 80036a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80036a8:	f7fe fcc6 	bl	8002038 <HAL_Delay>
	    	  printf("Transmiotted Data\n");
 80036ac:	4803      	ldr	r0, [pc, #12]	; (80036bc <sendCurrentTime+0x30>)
 80036ae:	f012 ffef 	bl	8016690 <puts>
	    while (1) {  // Infinite loop to send the string continuously
 80036b2:	e7f2      	b.n	800369a <sendCurrentTime+0xe>
 80036b4:	08019320 	.word	0x08019320
 80036b8:	2000069c 	.word	0x2000069c
 80036bc:	08019774 	.word	0x08019774

080036c0 <OnSysTimeUpdate>:
{
 80036c0:	b508      	push	{r3, lr}
		printf("Sending time to other chip\n");
 80036c2:	4803      	ldr	r0, [pc, #12]	; (80036d0 <OnSysTimeUpdate+0x10>)
 80036c4:	f012 ffe4 	bl	8016690 <puts>
	  sendCurrentTime(&huart1);
 80036c8:	4802      	ldr	r0, [pc, #8]	; (80036d4 <OnSysTimeUpdate+0x14>)
 80036ca:	f7ff ffdf 	bl	800368c <sendCurrentTime>
 80036ce:	bf00      	nop
 80036d0:	08019788 	.word	0x08019788
 80036d4:	2000069c 	.word	0x2000069c

080036d8 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <LoraInfo_Init+0x18>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80036de:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80036e0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80036e2:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 80036e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e8:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80036ee:	4770      	bx	lr
 80036f0:	2000094c 	.word	0x2000094c

080036f4 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80036f4:	4800      	ldr	r0, [pc, #0]	; (80036f8 <LoraInfo_GetPtr+0x4>)
 80036f6:	4770      	bx	lr
 80036f8:	2000094c 	.word	0x2000094c

080036fc <FRAG_DECODER_IF_Erase>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FRAG_DECODER_IF_Erase(void)
{
 80036fc:	b508      	push	{r3, lr}

  /* USER CODE END FRAG_DECODER_IF_Erase_1 */
#if (INTEROP_TEST_MODE == 1)
  UTIL_MEM_set_8(UnfragmentedData, 0xFF, UNFRAGMENTED_DATA_SIZE);
#else /* INTEROP_TEST_MODE == 0 */
  status = FLASH_IF_Erase((void *)FRAG_DECODER_DWL_REGION_START, FRAG_DECODER_DWL_REGION_SIZE);
 80036fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003702:	4802      	ldr	r0, [pc, #8]	; (800370c <FRAG_DECODER_IF_Erase+0x10>)
 8003704:	f7fe f83a 	bl	800177c <FLASH_IF_Erase>
#endif /* INTEROP_TEST_MODE */
  /* USER CODE BEGIN FRAG_DECODER_IF_Erase_2 */

  /* USER CODE END FRAG_DECODER_IF_Erase_2 */
  return status;
}
 8003708:	bd08      	pop	{r3, pc}
 800370a:	bf00      	nop
 800370c:	0803f000 	.word	0x0803f000

08003710 <FRAG_DECODER_IF_Write>:

int32_t FRAG_DECODER_IF_Write(uint32_t addr, uint8_t *data, uint32_t size)
{
 8003710:	b510      	push	{r4, lr}
 8003712:	b082      	sub	sp, #8
  /* USER CODE END FRAG_DECODER_IF_Write_1 */
#if (INTEROP_TEST_MODE == 1)  /*write fragment in RAM - Caching mode*/
  UTIL_MEM_cpy_8(&UnfragmentedData[addr], data, size);
#else /* INTEROP_TEST_MODE == 0 */

  status = FLASH_IF_Write((void *)(FRAG_DECODER_DWL_REGION_START + addr), (const void *)data, size);
 8003714:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 8003718:	f500 307c 	add.w	r0, r0, #258048	; 0x3f000
 800371c:	f7fd fff6 	bl	800170c <FLASH_IF_Write>

  if (status != FLASH_IF_OK)
 8003720:	4604      	mov	r4, r0
 8003722:	b910      	cbnz	r0, 800372a <FRAG_DECODER_IF_Write+0x1a>
#endif /* INTEROP_TEST_MODE */
  /* USER CODE BEGIN FRAG_DECODER_IF_Write_2 */

  /* USER CODE END FRAG_DECODER_IF_Write_2 */
  return status;
}
 8003724:	4620      	mov	r0, r4
 8003726:	b002      	add	sp, #8
 8003728:	bd10      	pop	{r4, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n.... !! FLASH_IF_WRITE_ERROR: %d !! ....\r\n", status);
 800372a:	9000      	str	r0, [sp, #0]
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <FRAG_DECODER_IF_Write+0x2c>)
 800372e:	2200      	movs	r2, #0
 8003730:	4611      	mov	r1, r2
 8003732:	2002      	movs	r0, #2
 8003734:	f010 fc80 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  return status;
 8003738:	e7f4      	b.n	8003724 <FRAG_DECODER_IF_Write+0x14>
 800373a:	bf00      	nop
 800373c:	080197dc 	.word	0x080197dc

08003740 <FRAG_DECODER_IF_OnProgress>:
  /* USER CODE END FRAG_DECODER_IF_Read_2 */
  return status;
}

void FRAG_DECODER_IF_OnProgress(uint16_t fragCounter, uint16_t fragNb, uint8_t fragSize, uint16_t fragNbLost)
{
 8003740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	4606      	mov	r6, r0
 8003748:	460d      	mov	r5, r1
 800374a:	4614      	mov	r4, r2
 800374c:	461f      	mov	r7, r3
  /* USER CODE BEGIN FRAG_DECODER_IF_OnProgress_1 */

  /* USER CODE END FRAG_DECODER_IF_OnProgress_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n.... FRAG_DECODER in Progress ....\r\n");
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <FRAG_DECODER_IF_OnProgress+0x80>)
 8003750:	2200      	movs	r2, #0
 8003752:	4611      	mov	r1, r2
 8003754:	2002      	movs	r0, #2
 8003756:	f010 fc6f 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "EXPECTED   : %03d Fragments (%05d Bytes)\r\n", fragNb, fragNb * fragSize);
 800375a:	fb04 f305 	mul.w	r3, r4, r5
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	9500      	str	r5, [sp, #0]
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <FRAG_DECODER_IF_OnProgress+0x84>)
 8003764:	2200      	movs	r2, #0
 8003766:	4611      	mov	r1, r2
 8003768:	2002      	movs	r0, #2
 800376a:	f010 fc65 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "RECEIVED   : %03d Fragments\r\n", fragCounter - fragNbLost);
 800376e:	eba6 0807 	sub.w	r8, r6, r7
 8003772:	f8cd 8000 	str.w	r8, [sp]
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <FRAG_DECODER_IF_OnProgress+0x88>)
 8003778:	2200      	movs	r2, #0
 800377a:	4611      	mov	r1, r2
 800377c:	2002      	movs	r0, #2
 800377e:	f010 fc5b 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "             %05d Bytes\r\n", (fragCounter - fragNbLost) * fragSize);
 8003782:	fb08 f404 	mul.w	r4, r8, r4
 8003786:	9400      	str	r4, [sp, #0]
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <FRAG_DECODER_IF_OnProgress+0x8c>)
 800378a:	2200      	movs	r2, #0
 800378c:	4611      	mov	r1, r2
 800378e:	2002      	movs	r0, #2
 8003790:	f010 fc52 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LOST       : %03d Fragments\r\n\r\n", fragNbLost);
 8003794:	9700      	str	r7, [sp, #0]
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <FRAG_DECODER_IF_OnProgress+0x90>)
 8003798:	2200      	movs	r2, #0
 800379a:	4611      	mov	r1, r2
 800379c:	2002      	movs	r0, #2
 800379e:	f010 fc4b 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  if (fragCounter > fragNb)
 80037a2:	42b5      	cmp	r5, r6
 80037a4:	d302      	bcc.n	80037ac <FRAG_DECODER_IF_OnProgress+0x6c>
    APP_LOG(TS_OFF, VLEVEL_M, "REDUNDANCY : %03d Fragments\r\n", fragCounter - fragNb);
  }
  /* USER CODE BEGIN FRAG_DECODER_IF_OnProgress_2 */

  /* USER CODE END FRAG_DECODER_IF_OnProgress_2 */
}
 80037a6:	b002      	add	sp, #8
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "REDUNDANCY : %03d Fragments\r\n", fragCounter - fragNb);
 80037ac:	1b76      	subs	r6, r6, r5
 80037ae:	9600      	str	r6, [sp, #0]
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <FRAG_DECODER_IF_OnProgress+0x94>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	4611      	mov	r1, r2
 80037b6:	2002      	movs	r0, #2
 80037b8:	f010 fc3e 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 80037bc:	e7f3      	b.n	80037a6 <FRAG_DECODER_IF_OnProgress+0x66>
 80037be:	bf00      	nop
 80037c0:	0801980c 	.word	0x0801980c
 80037c4:	08019834 	.word	0x08019834
 80037c8:	08019860 	.word	0x08019860
 80037cc:	08019880 	.word	0x08019880
 80037d0:	0801989c 	.word	0x0801989c
 80037d4:	080198bc 	.word	0x080198bc

080037d8 <FRAG_DECODER_IF_OnDone>:

void FRAG_DECODER_IF_OnDone(int32_t status, uint32_t size, uint32_t *addr)
{
 80037d8:	b530      	push	{r4, r5, lr}
 80037da:	b083      	sub	sp, #12
 80037dc:	4605      	mov	r5, r0
 80037de:	4614      	mov	r4, r2
  /* USER CODE BEGIN FRAG_DECODER_IF_OnDone_1 */

  /* USER CODE END FRAG_DECODER_IF_OnDone_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n.... FRAG_DECODER Finished ....\r\n");
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <FRAG_DECODER_IF_OnDone+0x2c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	4611      	mov	r1, r2
 80037e6:	2002      	movs	r0, #2
 80037e8:	f010 fc26 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "STATUS     : %d\r\n", status);
 80037ec:	9500      	str	r5, [sp, #0]
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <FRAG_DECODER_IF_OnDone+0x30>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	4611      	mov	r1, r2
 80037f4:	2002      	movs	r0, #2
 80037f6:	f010 fc1f 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
#if (LORAWAN_PACKAGES_VERSION == 1)
  /* only required without Firmware Management protocol */
  FwUpdateAgent_Run();
#endif /* LORAWAN_PACKAGES_VERSION */

  *addr = FRAG_DECODER_DWL_REGION_START;
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <FRAG_DECODER_IF_OnDone+0x34>)
 80037fc:	6023      	str	r3, [r4, #0]
  *addr = (uint32_t)&UnfragmentedData[0];
#endif /* INTEROP_TEST_MODE == 1 */
  /* USER CODE BEGIN FRAG_DECODER_IF_OnDone_2 */

  /* USER CODE END FRAG_DECODER_IF_OnDone_2 */
}
 80037fe:	b003      	add	sp, #12
 8003800:	bd30      	pop	{r4, r5, pc}
 8003802:	bf00      	nop
 8003804:	080198dc 	.word	0x080198dc
 8003808:	08019900 	.word	0x08019900
 800380c:	0803f000 	.word	0x0803f000

08003810 <FRAG_DECODER_IF_Read>:
{
 8003810:	b508      	push	{r3, lr}
 8003812:	460b      	mov	r3, r1
  FLASH_IF_Read((void *)data, (const void *)(FRAG_DECODER_DWL_REGION_START + addr), size);
 8003814:	f100 6100 	add.w	r1, r0, #134217728	; 0x8000000
 8003818:	f501 317c 	add.w	r1, r1, #258048	; 0x3f000
 800381c:	4618      	mov	r0, r3
 800381e:	f7fd ff91 	bl	8001744 <FLASH_IF_Read>
}
 8003822:	2000      	movs	r0, #0
 8003824:	bd08      	pop	{r3, pc}

08003826 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8003826:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8003828:	f000 f840 	bl	80038ac <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800382c:	bd08      	pop	{r3, pc}

0800382e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800382e:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8003830:	f000 f87e 	bl	8003930 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8003834:	bd08      	pop	{r3, pc}

08003836 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8003836:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8003838:	f000 f8c8 	bl	80039cc <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800383c:	bd08      	pop	{r3, pc}

0800383e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800383e:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8003840:	f000 f8c6 	bl	80039d0 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003844:	bd08      	pop	{r3, pc}

08003846 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8003846:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8003848:	f000 f8c4 	bl	80039d4 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800384c:	bd08      	pop	{r3, pc}

0800384e <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800384e:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8003850:	f000 f8c2 	bl	80039d8 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8003854:	bd08      	pop	{r3, pc}
	...

08003858 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003858:	480d      	ldr	r0, [pc, #52]	; (8003890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800385a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800385c:	f000 f8c1 	bl	80039e2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003860:	480c      	ldr	r0, [pc, #48]	; (8003894 <LoopForever+0x6>)
  ldr r1, =_edata
 8003862:	490d      	ldr	r1, [pc, #52]	; (8003898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <LoopForever+0xe>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003868:	e002      	b.n	8003870 <LoopCopyDataInit>

0800386a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800386a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800386c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800386e:	3304      	adds	r3, #4

08003870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003874:	d3f9      	bcc.n	800386a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003878:	4c0a      	ldr	r4, [pc, #40]	; (80038a4 <LoopForever+0x16>)
  movs r3, #0
 800387a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800387c:	e001      	b.n	8003882 <LoopFillZerobss>

0800387e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800387e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003880:	3204      	adds	r2, #4

08003882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003884:	d3fb      	bcc.n	800387e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003886:	f012 ff2f 	bl	80166e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800388a:	f7fe f8fb 	bl	8001a84 <main>

0800388e <LoopForever>:

LoopForever:
    b LoopForever
 800388e:	e7fe      	b.n	800388e <LoopForever>
  ldr   r0, =_estack
 8003890:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003898:	200003e8 	.word	0x200003e8
  ldr r2, =_sidata
 800389c:	0801a818 	.word	0x0801a818
  ldr r2, =_sbss
 80038a0:	200003e8 	.word	0x200003e8
  ldr r4, =_ebss
 80038a4:	20001eb0 	.word	0x20001eb0

080038a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038a8:	e7fe      	b.n	80038a8 <ADC_IRQHandler>
	...

080038ac <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80038ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038b0:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80038b2:	2400      	movs	r4, #0
 80038b4:	9401      	str	r4, [sp, #4]
 80038b6:	9402      	str	r4, [sp, #8]
 80038b8:	9403      	str	r4, [sp, #12]
 80038ba:	9404      	str	r4, [sp, #16]
 80038bc:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80038be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c4:	f042 0204 	orr.w	r2, r2, #4
 80038c8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80038ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80038d2:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80038d4:	2710      	movs	r7, #16
 80038d6:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80038d8:	2301      	movs	r3, #1
 80038da:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	2303      	movs	r3, #3
 80038de:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80038e0:	4d12      	ldr	r5, [pc, #72]	; (800392c <BSP_RADIO_Init+0x80>)
 80038e2:	a901      	add	r1, sp, #4
 80038e4:	4628      	mov	r0, r5
 80038e6:	f001 f95f 	bl	8004ba8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80038ea:	f04f 0820 	mov.w	r8, #32
 80038ee:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80038f2:	a901      	add	r1, sp, #4
 80038f4:	4628      	mov	r0, r5
 80038f6:	f001 f957 	bl	8004ba8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80038fa:	2608      	movs	r6, #8
 80038fc:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80038fe:	a901      	add	r1, sp, #4
 8003900:	4628      	mov	r0, r5
 8003902:	f001 f951 	bl	8004ba8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003906:	4622      	mov	r2, r4
 8003908:	4641      	mov	r1, r8
 800390a:	4628      	mov	r0, r5
 800390c:	f001 fa9c 	bl	8004e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003910:	4622      	mov	r2, r4
 8003912:	4639      	mov	r1, r7
 8003914:	4628      	mov	r0, r5
 8003916:	f001 fa97 	bl	8004e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 800391a:	4622      	mov	r2, r4
 800391c:	4631      	mov	r1, r6
 800391e:	4628      	mov	r0, r5
 8003920:	f001 fa92 	bl	8004e48 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003924:	4620      	mov	r0, r4
 8003926:	b006      	add	sp, #24
 8003928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800392c:	48000800 	.word	0x48000800

08003930 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003930:	b510      	push	{r4, lr}
  switch (Config)
 8003932:	2803      	cmp	r0, #3
 8003934:	d813      	bhi.n	800395e <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003936:	e8df f000 	tbb	[pc, r0]
 800393a:	1402      	.short	0x1402
 800393c:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800393e:	4c22      	ldr	r4, [pc, #136]	; (80039c8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003940:	2200      	movs	r2, #0
 8003942:	2108      	movs	r1, #8
 8003944:	4620      	mov	r0, r4
 8003946:	f001 fa7f 	bl	8004e48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800394a:	2200      	movs	r2, #0
 800394c:	2110      	movs	r1, #16
 800394e:	4620      	mov	r0, r4
 8003950:	f001 fa7a 	bl	8004e48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003954:	2200      	movs	r2, #0
 8003956:	2120      	movs	r1, #32
 8003958:	4620      	mov	r0, r4
 800395a:	f001 fa75 	bl	8004e48 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800395e:	2000      	movs	r0, #0
 8003960:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003962:	4c19      	ldr	r4, [pc, #100]	; (80039c8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003964:	2201      	movs	r2, #1
 8003966:	2108      	movs	r1, #8
 8003968:	4620      	mov	r0, r4
 800396a:	f001 fa6d 	bl	8004e48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800396e:	2201      	movs	r2, #1
 8003970:	2110      	movs	r1, #16
 8003972:	4620      	mov	r0, r4
 8003974:	f001 fa68 	bl	8004e48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003978:	2200      	movs	r2, #0
 800397a:	2120      	movs	r1, #32
 800397c:	4620      	mov	r0, r4
 800397e:	f001 fa63 	bl	8004e48 <HAL_GPIO_WritePin>
      break;
 8003982:	e7ec      	b.n	800395e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003984:	4c10      	ldr	r4, [pc, #64]	; (80039c8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003986:	2201      	movs	r2, #1
 8003988:	2108      	movs	r1, #8
 800398a:	4620      	mov	r0, r4
 800398c:	f001 fa5c 	bl	8004e48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003990:	2201      	movs	r2, #1
 8003992:	2110      	movs	r1, #16
 8003994:	4620      	mov	r0, r4
 8003996:	f001 fa57 	bl	8004e48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800399a:	2201      	movs	r2, #1
 800399c:	2120      	movs	r1, #32
 800399e:	4620      	mov	r0, r4
 80039a0:	f001 fa52 	bl	8004e48 <HAL_GPIO_WritePin>
      break;
 80039a4:	e7db      	b.n	800395e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80039a6:	4c08      	ldr	r4, [pc, #32]	; (80039c8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	2108      	movs	r1, #8
 80039ac:	4620      	mov	r0, r4
 80039ae:	f001 fa4b 	bl	8004e48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80039b2:	2200      	movs	r2, #0
 80039b4:	2110      	movs	r1, #16
 80039b6:	4620      	mov	r0, r4
 80039b8:	f001 fa46 	bl	8004e48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80039bc:	2201      	movs	r2, #1
 80039be:	2120      	movs	r1, #32
 80039c0:	4620      	mov	r0, r4
 80039c2:	f001 fa41 	bl	8004e48 <HAL_GPIO_WritePin>
      break;
 80039c6:	e7ca      	b.n	800395e <BSP_RADIO_ConfigRFSwitch+0x2e>
 80039c8:	48000800 	.word	0x48000800

080039cc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80039cc:	2000      	movs	r0, #0
 80039ce:	4770      	bx	lr

080039d0 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 80039d0:	2001      	movs	r0, #1
 80039d2:	4770      	bx	lr

080039d4 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 80039d4:	2001      	movs	r0, #1
 80039d6:	4770      	bx	lr

080039d8 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80039d8:	b908      	cbnz	r0, 80039de <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80039da:	200f      	movs	r0, #15
 80039dc:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80039de:	2016      	movs	r0, #22
  }

  return ret;
}
 80039e0:	4770      	bx	lr

080039e2 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80039e2:	4770      	bx	lr

080039e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e4:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e6:	2003      	movs	r0, #3
 80039e8:	f000 fd14 	bl	8004414 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039ec:	f001 fc18 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_Init+0x28>)
 80039f2:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039f4:	200f      	movs	r0, #15
 80039f6:	f7fe fb11 	bl	800201c <HAL_InitTick>
 80039fa:	b110      	cbz	r0, 8003a02 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80039fc:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80039fe:	4620      	mov	r0, r4
 8003a00:	bd10      	pop	{r4, pc}
 8003a02:	4604      	mov	r4, r0
    HAL_MspInit();
 8003a04:	f7fe f9ce 	bl	8001da4 <HAL_MspInit>
 8003a08:	e7f9      	b.n	80039fe <HAL_Init+0x1a>
 8003a0a:	bf00      	nop
 8003a0c:	20000098 	.word	0x20000098

08003a10 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003a10:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <HAL_GetUIDw0+0x8>)
 8003a12:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8003a16:	4770      	bx	lr
 8003a18:	1fff7000 	.word	0x1fff7000

08003a1c <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003a1c:	4b01      	ldr	r3, [pc, #4]	; (8003a24 <HAL_GetUIDw1+0x8>)
 8003a1e:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8003a22:	4770      	bx	lr
 8003a24:	1fff7000 	.word	0x1fff7000

08003a28 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8003a28:	4b01      	ldr	r3, [pc, #4]	; (8003a30 <HAL_GetUIDw2+0x8>)
 8003a2a:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8003a2e:	4770      	bx	lr
 8003a30:	1fff7000 	.word	0x1fff7000

08003a34 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003a34:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8003a36:	6853      	ldr	r3, [r2, #4]
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8003a3e:	4770      	bx	lr
 8003a40:	e0042000 	.word	0xe0042000

08003a44 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003a44:	4a02      	ldr	r2, [pc, #8]	; (8003a50 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8003a46:	6853      	ldr	r3, [r2, #4]
 8003a48:	f023 0302 	bic.w	r3, r3, #2
 8003a4c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8003a4e:	4770      	bx	lr
 8003a50:	e0042000 	.word	0xe0042000

08003a54 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003a54:	4a02      	ldr	r2, [pc, #8]	; (8003a60 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8003a56:	6853      	ldr	r3, [r2, #4]
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8003a5e:	4770      	bx	lr
 8003a60:	e0042000 	.word	0xe0042000

08003a64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a64:	b530      	push	{r4, r5, lr}
 8003a66:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	f000 8106 	beq.w	8003c7e <HAL_ADC_Init+0x21a>
 8003a72:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a74:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003a76:	b1bb      	cbz	r3, 8003aa8 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a78:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a7a:	6893      	ldr	r3, [r2, #8]
 8003a7c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a80:	d11f      	bne.n	8003ac2 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8003a82:	6893      	ldr	r3, [r2, #8]
 8003a84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a88:	f023 0317 	bic.w	r3, r3, #23
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a92:	4b7c      	ldr	r3, [pc, #496]	; (8003c84 <HAL_ADC_Init+0x220>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	4a7b      	ldr	r2, [pc, #492]	; (8003c88 <HAL_ADC_Init+0x224>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003aa6:	e009      	b.n	8003abc <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003aa8:	f7fd fbdc 	bl	8001264 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003aac:	2300      	movs	r3, #0
 8003aae:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003ab0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003ab4:	e7e0      	b.n	8003a78 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f9      	bne.n	8003ab6 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ac2:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ac4:	6893      	ldr	r3, [r2, #8]
 8003ac6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003aca:	f040 809a 	bne.w	8003c02 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ad0:	f043 0310 	orr.w	r3, r3, #16
 8003ad4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ade:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ae0:	6893      	ldr	r3, [r2, #8]
 8003ae2:	f013 0304 	ands.w	r3, r3, #4
 8003ae6:	d000      	beq.n	8003aea <HAL_ADC_Init+0x86>
 8003ae8:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003aea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003aec:	f011 0f10 	tst.w	r1, #16
 8003af0:	f040 80be 	bne.w	8003c70 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 80bb 	bne.w	8003c70 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003afa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003afc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b06:	6893      	ldr	r3, [r2, #8]
 8003b08:	f013 0f01 	tst.w	r3, #1
 8003b0c:	d14f      	bne.n	8003bae <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003b0e:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b10:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003b12:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b16:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b18:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b1c:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b1e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b24:	b109      	cbz	r1, 8003b2a <HAL_ADC_Init+0xc6>
 8003b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b2a:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8003b2c:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b2e:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b30:	6921      	ldr	r1, [r4, #16]
 8003b32:	2900      	cmp	r1, #0
 8003b34:	db67      	blt.n	8003c06 <HAL_ADC_Init+0x1a2>
 8003b36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003b3a:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b3c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b40:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b44:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003b48:	2901      	cmp	r1, #1
 8003b4a:	d05f      	beq.n	8003c0c <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b4e:	b121      	cbz	r1, 8003b5a <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b50:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003b54:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b56:	4329      	orrs	r1, r5
 8003b58:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b5a:	68d1      	ldr	r1, [r2, #12]
 8003b5c:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 8003b60:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 8003b64:	4319      	orrs	r1, r3
 8003b66:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b68:	6863      	ldr	r3, [r4, #4]
 8003b6a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003b6e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b70:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b72:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003b76:	2901      	cmp	r1, #1
 8003b78:	d055      	beq.n	8003c26 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003b7a:	6821      	ldr	r1, [r4, #0]
 8003b7c:	690d      	ldr	r5, [r1, #16]
 8003b7e:	4b43      	ldr	r3, [pc, #268]	; (8003c8c <HAL_ADC_Init+0x228>)
 8003b80:	402b      	ands	r3, r5
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b86:	6863      	ldr	r3, [r4, #4]
 8003b88:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003b8c:	d00f      	beq.n	8003bae <HAL_ADC_Init+0x14a>
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b92:	d00c      	beq.n	8003bae <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b98:	d009      	beq.n	8003bae <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003b9a:	493d      	ldr	r1, [pc, #244]	; (8003c90 <HAL_ADC_Init+0x22c>)
 8003b9c:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8003ba0:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8003ba4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003bae:	6821      	ldr	r1, [r4, #0]
 8003bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8003bb2:	694a      	ldr	r2, [r1, #20]
 8003bb4:	f022 0207 	bic.w	r2, r2, #7
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003bc0:	6953      	ldr	r3, [r2, #20]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003bca:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003bcc:	6923      	ldr	r3, [r4, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d133      	bne.n	8003c3a <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003bd6:	f063 030f 	orn	r3, r3, #15
 8003bda:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003bdc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8003be4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d039      	beq.n	8003c5e <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003bea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bec:	f023 0312 	bic.w	r3, r3, #18
 8003bf0:	f043 0310 	orr.w	r3, r3, #16
 8003bf4:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003bfe:	2001      	movs	r0, #1
 8003c00:	e03b      	b.n	8003c7a <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c02:	2000      	movs	r0, #0
 8003c04:	e76c      	b.n	8003ae0 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003c06:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003c0a:	e796      	b.n	8003b3a <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c0c:	b915      	cbnz	r5, 8003c14 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	e79b      	b.n	8003b4c <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c14:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003c16:	f041 0120 	orr.w	r1, r1, #32
 8003c1a:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003c1e:	f041 0101 	orr.w	r1, r1, #1
 8003c22:	65e1      	str	r1, [r4, #92]	; 0x5c
 8003c24:	e792      	b.n	8003b4c <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8003c26:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003c28:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003c2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003c2c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003c2e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003c30:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003c32:	431a      	orrs	r2, r3
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	e79f      	b.n	8003b7a <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c3e:	d1cd      	bne.n	8003bdc <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003c40:	6821      	ldr	r1, [r4, #0]
 8003c42:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003c44:	69e3      	ldr	r3, [r4, #28]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	f003 031c 	and.w	r3, r3, #28
 8003c4e:	f06f 020f 	mvn.w	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	628b      	str	r3, [r1, #40]	; 0x28
 8003c5c:	e7be      	b.n	8003bdc <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c64:	f023 0303 	bic.w	r3, r3, #3
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c6e:	e004      	b.n	8003c7a <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c72:	f043 0310 	orr.w	r3, r3, #16
 8003c76:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c78:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003c7a:	b003      	add	sp, #12
 8003c7c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003c7e:	2001      	movs	r0, #1
 8003c80:	e7fb      	b.n	8003c7a <HAL_ADC_Init+0x216>
 8003c82:	bf00      	nop
 8003c84:	20000098 	.word	0x20000098
 8003c88:	053e2d63 	.word	0x053e2d63
 8003c8c:	1ffffc02 	.word	0x1ffffc02
 8003c90:	40012000 	.word	0x40012000

08003c94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	4604      	mov	r4, r0
 8003c98:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c9a:	6946      	ldr	r6, [r0, #20]
 8003c9c:	2e08      	cmp	r6, #8
 8003c9e:	d005      	beq.n	8003cac <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003ca0:	6803      	ldr	r3, [r0, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f013 0f01 	tst.w	r3, #1
 8003ca8:	d11e      	bne.n	8003ce8 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003caa:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003cac:	f7fe f9b8 	bl	8002020 <HAL_GetTick>
 8003cb0:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4232      	tst	r2, r6
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003cbe:	d0f8      	beq.n	8003cb2 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003cc0:	f7fe f9ae 	bl	8002020 <HAL_GetTick>
 8003cc4:	1bc3      	subs	r3, r0, r7
 8003cc6:	42ab      	cmp	r3, r5
 8003cc8:	d801      	bhi.n	8003cce <HAL_ADC_PollForConversion+0x3a>
 8003cca:	2d00      	cmp	r5, #0
 8003ccc:	d1f1      	bne.n	8003cb2 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4233      	tst	r3, r6
 8003cd4:	d1ed      	bne.n	8003cb2 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8003ce4:	2003      	movs	r0, #3
 8003ce6:	e028      	b.n	8003d3a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003cea:	f043 0320 	orr.w	r3, r3, #32
 8003cee:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	e022      	b.n	8003d3a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cf4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003d02:	d115      	bne.n	8003d30 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d04:	7ea2      	ldrb	r2, [r4, #26]
 8003d06:	b99a      	cbnz	r2, 8003d30 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	f012 0f08 	tst.w	r2, #8
 8003d0e:	d00f      	beq.n	8003d30 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	f012 0f04 	tst.w	r2, #4
 8003d16:	d111      	bne.n	8003d3c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	f022 020c 	bic.w	r2, r2, #12
 8003d1e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003d30:	7e20      	ldrb	r0, [r4, #24]
 8003d32:	b960      	cbnz	r0, 8003d4e <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	220c      	movs	r2, #12
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d3e:	f043 0320 	orr.w	r3, r3, #32
 8003d42:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003d4c:	e7f0      	b.n	8003d30 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8003d4e:	2000      	movs	r0, #0
 8003d50:	e7f3      	b.n	8003d3a <HAL_ADC_PollForConversion+0xa6>

08003d52 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d52:	6803      	ldr	r3, [r0, #0]
 8003d54:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003d58:	b470      	push	{r4, r5, r6}
 8003d5a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d60:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003d62:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8003d66:	2a01      	cmp	r2, #1
 8003d68:	f000 8103 	beq.w	8003f72 <HAL_ADC_ConfigChannel+0x21a>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d74:	6802      	ldr	r2, [r0, #0]
 8003d76:	6890      	ldr	r0, [r2, #8]
 8003d78:	f010 0f04 	tst.w	r0, #4
 8003d7c:	d00a      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d80:	f042 0220 	orr.w	r2, r2, #32
 8003d84:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d86:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8003d8e:	b003      	add	sp, #12
 8003d90:	bc70      	pop	{r4, r5, r6}
 8003d92:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003d94:	6848      	ldr	r0, [r1, #4]
 8003d96:	2802      	cmp	r0, #2
 8003d98:	f000 809c 	beq.w	8003ed4 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d9c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003da0:	d027      	beq.n	8003df2 <HAL_ADC_ConfigChannel+0x9a>
 8003da2:	4d75      	ldr	r5, [pc, #468]	; (8003f78 <HAL_ADC_ConfigChannel+0x220>)
 8003da4:	42ac      	cmp	r4, r5
 8003da6:	d024      	beq.n	8003df2 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003da8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003daa:	f000 001f 	and.w	r0, r0, #31
 8003dae:	250f      	movs	r5, #15
 8003db0:	4085      	lsls	r5, r0
 8003db2:	ea24 0505 	bic.w	r5, r4, r5
 8003db6:	680c      	ldr	r4, [r1, #0]
 8003db8:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003dbc:	2e00      	cmp	r6, #0
 8003dbe:	d131      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0xcc>
 8003dc0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003dc4:	4084      	lsls	r4, r0
 8003dc6:	432c      	orrs	r4, r5
 8003dc8:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003dca:	684c      	ldr	r4, [r1, #4]
 8003dcc:	08a0      	lsrs	r0, r4, #2
 8003dce:	3001      	adds	r0, #1
 8003dd0:	69dd      	ldr	r5, [r3, #28]
 8003dd2:	42a8      	cmp	r0, r5
 8003dd4:	d813      	bhi.n	8003dfe <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003dd6:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8003dd8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003dda:	f004 041f 	and.w	r4, r4, #31
 8003dde:	260f      	movs	r6, #15
 8003de0:	40a6      	lsls	r6, r4
 8003de2:	ea20 0006 	bic.w	r0, r0, r6
 8003de6:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003dea:	40a5      	lsls	r5, r4
 8003dec:	4328      	orrs	r0, r5
 8003dee:	6290      	str	r0, [r2, #40]	; 0x28
}
 8003df0:	e005      	b.n	8003dfe <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003df2:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003df4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003df6:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003dfa:	4320      	orrs	r0, r4
 8003dfc:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003dfe:	681c      	ldr	r4, [r3, #0]
 8003e00:	680d      	ldr	r5, [r1, #0]
 8003e02:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003e04:	6960      	ldr	r0, [r4, #20]
 8003e06:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8003e0a:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8003e0e:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8003e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e16:	4302      	orrs	r2, r0
 8003e18:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e1a:	680a      	ldr	r2, [r1, #0]
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	db09      	blt.n	8003e34 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e20:	2000      	movs	r0, #0
 8003e22:	e7b1      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e28:	b114      	cbz	r4, 8003e30 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003e2a:	fab4 f484 	clz	r4, r4
 8003e2e:	e7c9      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8003e30:	2420      	movs	r4, #32
 8003e32:	e7c7      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e34:	4951      	ldr	r1, [pc, #324]	; (8003f7c <HAL_ADC_ConfigChannel+0x224>)
 8003e36:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8003e3a:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e3e:	4c50      	ldr	r4, [pc, #320]	; (8003f80 <HAL_ADC_ConfigChannel+0x228>)
 8003e40:	42a2      	cmp	r2, r4
 8003e42:	d007      	beq.n	8003e54 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e44:	4c4f      	ldr	r4, [pc, #316]	; (8003f84 <HAL_ADC_ConfigChannel+0x22c>)
 8003e46:	42a2      	cmp	r2, r4
 8003e48:	d026      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e4a:	4c4f      	ldr	r4, [pc, #316]	; (8003f88 <HAL_ADC_ConfigChannel+0x230>)
 8003e4c:	42a2      	cmp	r2, r4
 8003e4e:	d032      	beq.n	8003eb6 <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e50:	2000      	movs	r0, #0
 8003e52:	e799      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003e58:	d1f4      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e5e:	4847      	ldr	r0, [pc, #284]	; (8003f7c <HAL_ADC_ConfigChannel+0x224>)
 8003e60:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003e64:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e6e:	4a47      	ldr	r2, [pc, #284]	; (8003f8c <HAL_ADC_ConfigChannel+0x234>)
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	0992      	lsrs	r2, r2, #6
 8003e74:	4946      	ldr	r1, [pc, #280]	; (8003f90 <HAL_ADC_ConfigChannel+0x238>)
 8003e76:	fba1 1202 	umull	r1, r2, r1, r2
 8003e7a:	0992      	lsrs	r2, r2, #6
 8003e7c:	3201      	adds	r2, #1
 8003e7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e82:	0092      	lsls	r2, r2, #2
 8003e84:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003e86:	e002      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8003e88:	9a01      	ldr	r2, [sp, #4]
 8003e8a:	3a01      	subs	r2, #1
 8003e8c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003e8e:	9a01      	ldr	r2, [sp, #4]
 8003e90:	2a00      	cmp	r2, #0
 8003e92:	d1f9      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e94:	2000      	movs	r0, #0
 8003e96:	e777      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e98:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003e9c:	d1d5      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e9e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003ea2:	4836      	ldr	r0, [pc, #216]	; (8003f7c <HAL_ADC_ConfigChannel+0x224>)
 8003ea4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003ea8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003eac:	4311      	orrs	r1, r2
 8003eae:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb2:	2000      	movs	r0, #0
}
 8003eb4:	e768      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003eb6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003eba:	d158      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ebc:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ec0:	482e      	ldr	r0, [pc, #184]	; (8003f7c <HAL_ADC_ConfigChannel+0x224>)
 8003ec2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003ec6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed0:	2000      	movs	r0, #0
}
 8003ed2:	e759      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ed4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003ed8:	d002      	beq.n	8003ee0 <HAL_ADC_ConfigChannel+0x188>
 8003eda:	4827      	ldr	r0, [pc, #156]	; (8003f78 <HAL_ADC_ConfigChannel+0x220>)
 8003edc:	4284      	cmp	r4, r0
 8003ede:	d106      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003ee0:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003ee2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003ee4:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003ee8:	ea20 0004 	bic.w	r0, r0, r4
 8003eec:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003eee:	680a      	ldr	r2, [r1, #0]
 8003ef0:	2a00      	cmp	r2, #0
 8003ef2:	db01      	blt.n	8003ef8 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	e747      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ef8:	4920      	ldr	r1, [pc, #128]	; (8003f7c <HAL_ADC_ConfigChannel+0x224>)
 8003efa:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003efe:	4820      	ldr	r0, [pc, #128]	; (8003f80 <HAL_ADC_ConfigChannel+0x228>)
 8003f00:	4282      	cmp	r2, r0
 8003f02:	d007      	beq.n	8003f14 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f04:	481f      	ldr	r0, [pc, #124]	; (8003f84 <HAL_ADC_ConfigChannel+0x22c>)
 8003f06:	4282      	cmp	r2, r0
 8003f08:	d013      	beq.n	8003f32 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f0a:	481f      	ldr	r0, [pc, #124]	; (8003f88 <HAL_ADC_ConfigChannel+0x230>)
 8003f0c:	4282      	cmp	r2, r0
 8003f0e:	d01f      	beq.n	8003f50 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f10:	2000      	movs	r0, #0
 8003f12:	e739      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f14:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f18:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003f1c:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003f20:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003f24:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003f28:	4311      	orrs	r1, r2
 8003f2a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f2e:	2000      	movs	r0, #0
}
 8003f30:	e72a      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f32:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f36:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8003f3a:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8003f3e:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003f42:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003f46:	430a      	orrs	r2, r1
 8003f48:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f4c:	2000      	movs	r0, #0
}
 8003f4e:	e71b      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f50:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f54:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8003f58:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003f5c:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003f60:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003f64:	430a      	orrs	r2, r1
 8003f66:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f6a:	2000      	movs	r0, #0
}
 8003f6c:	e70c      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e70a      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003f72:	2002      	movs	r0, #2
 8003f74:	e70b      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x36>
 8003f76:	bf00      	nop
 8003f78:	80000004 	.word	0x80000004
 8003f7c:	40012000 	.word	0x40012000
 8003f80:	b0001000 	.word	0xb0001000
 8003f84:	b8004000 	.word	0xb8004000
 8003f88:	b4002000 	.word	0xb4002000
 8003f8c:	20000098 	.word	0x20000098
 8003f90:	053e2d63 	.word	0x053e2d63

08003f94 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003f94:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f96:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	f012 0f04 	tst.w	r2, #4
 8003f9e:	d02a      	beq.n	8003ff6 <ADC_ConversionStop+0x62>
 8003fa0:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	f012 0f02 	tst.w	r2, #2
 8003fa8:	d107      	bne.n	8003fba <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fb0:	f022 0217 	bic.w	r2, r2, #23
 8003fb4:	f042 0210 	orr.w	r2, r2, #16
 8003fb8:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fba:	f7fe f831 	bl	8002020 <HAL_GetTick>
 8003fbe:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f013 0f04 	tst.w	r3, #4
 8003fc8:	d013      	beq.n	8003ff2 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003fca:	f7fe f829 	bl	8002020 <HAL_GetTick>
 8003fce:	1b43      	subs	r3, r0, r5
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d9f5      	bls.n	8003fc0 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f013 0f04 	tst.w	r3, #4
 8003fdc:	d0f0      	beq.n	8003fc0 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fe0:	f043 0310 	orr.w	r3, r3, #16
 8003fe4:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003fee:	2001      	movs	r0, #1
 8003ff0:	e002      	b.n	8003ff8 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e000      	b.n	8003ff8 <ADC_ConversionStop+0x64>
 8003ff6:	2000      	movs	r0, #0
}
 8003ff8:	bd38      	pop	{r3, r4, r5, pc}
	...

08003ffc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ffc:	b530      	push	{r4, r5, lr}
 8003ffe:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004000:	2300      	movs	r3, #0
 8004002:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004004:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	f012 0f01 	tst.w	r2, #1
 800400c:	d15b      	bne.n	80040c6 <ADC_Enable+0xca>
 800400e:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004010:	6899      	ldr	r1, [r3, #8]
 8004012:	4a2e      	ldr	r2, [pc, #184]	; (80040cc <ADC_Enable+0xd0>)
 8004014:	4211      	tst	r1, r2
 8004016:	d117      	bne.n	8004048 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800401e:	f022 0217 	bic.w	r2, r2, #23
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004028:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <ADC_Enable+0xd4>)
 800402a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800402e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004032:	d019      	beq.n	8004068 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004034:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <ADC_Enable+0xd8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	099b      	lsrs	r3, r3, #6
 800403a:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <ADC_Enable+0xdc>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	099b      	lsrs	r3, r3, #6
 8004042:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004044:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004046:	e00c      	b.n	8004062 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004048:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800404a:	f043 0310 	orr.w	r3, r3, #16
 800404e:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004050:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8004058:	2001      	movs	r0, #1
 800405a:	e035      	b.n	80040c8 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 800405c:	9b01      	ldr	r3, [sp, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004062:	9b01      	ldr	r3, [sp, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f9      	bne.n	800405c <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004068:	7e63      	ldrb	r3, [r4, #25]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800406e:	2000      	movs	r0, #0
 8004070:	e02a      	b.n	80040c8 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8004072:	f7fd ffd5 	bl	8002020 <HAL_GetTick>
 8004076:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	f012 0f01 	tst.w	r2, #1
 8004080:	d11f      	bne.n	80040c2 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	f012 0f01 	tst.w	r2, #1
 8004088:	d107      	bne.n	800409a <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004090:	f022 0217 	bic.w	r2, r2, #23
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800409a:	f7fd ffc1 	bl	8002020 <HAL_GetTick>
 800409e:	1b40      	subs	r0, r0, r5
 80040a0:	2802      	cmp	r0, #2
 80040a2:	d9e9      	bls.n	8004078 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f013 0f01 	tst.w	r3, #1
 80040ac:	d1e4      	bne.n	8004078 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040b0:	f043 0310 	orr.w	r3, r3, #16
 80040b4:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80040be:	2001      	movs	r0, #1
 80040c0:	e002      	b.n	80040c8 <ADC_Enable+0xcc>
  return HAL_OK;
 80040c2:	2000      	movs	r0, #0
 80040c4:	e000      	b.n	80040c8 <ADC_Enable+0xcc>
 80040c6:	2000      	movs	r0, #0
}
 80040c8:	b003      	add	sp, #12
 80040ca:	bd30      	pop	{r4, r5, pc}
 80040cc:	80000017 	.word	0x80000017
 80040d0:	40012000 	.word	0x40012000
 80040d4:	20000098 	.word	0x20000098
 80040d8:	053e2d63 	.word	0x053e2d63

080040dc <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040dc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f013 0f04 	tst.w	r3, #4
 80040e4:	d128      	bne.n	8004138 <HAL_ADC_Start+0x5c>
{
 80040e6:	b510      	push	{r4, lr}
 80040e8:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80040ea:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d024      	beq.n	800413c <HAL_ADC_Start+0x60>
 80040f2:	2301      	movs	r3, #1
 80040f4:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80040f8:	f7ff ff80 	bl	8003ffc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80040fc:	b9c0      	cbnz	r0, 8004130 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80040fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004100:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800410e:	2300      	movs	r3, #0
 8004110:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004112:	6822      	ldr	r2, [r4, #0]
 8004114:	211c      	movs	r1, #28
 8004116:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004118:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 800411c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800411e:	6893      	ldr	r3, [r2, #8]
 8004120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004124:	f023 0317 	bic.w	r3, r3, #23
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6093      	str	r3, [r2, #8]
}
 800412e:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8004130:	2300      	movs	r3, #0
 8004132:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8004136:	e7fa      	b.n	800412e <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8004138:	2002      	movs	r0, #2
}
 800413a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800413c:	2002      	movs	r0, #2
 800413e:	e7f6      	b.n	800412e <HAL_ADC_Start+0x52>

08004140 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004144:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004146:	6893      	ldr	r3, [r2, #8]
 8004148:	f013 0302 	ands.w	r3, r3, #2
 800414c:	d000      	beq.n	8004150 <ADC_Disable+0x10>
 800414e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004150:	6891      	ldr	r1, [r2, #8]
 8004152:	f011 0f01 	tst.w	r1, #1
 8004156:	d039      	beq.n	80041cc <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8004158:	2b00      	cmp	r3, #0
 800415a:	d139      	bne.n	80041d0 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800415c:	6893      	ldr	r3, [r2, #8]
 800415e:	f003 0305 	and.w	r3, r3, #5
 8004162:	2b01      	cmp	r3, #1
 8004164:	d009      	beq.n	800417a <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004168:	f043 0310 	orr.w	r3, r3, #16
 800416c:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8004176:	2001      	movs	r0, #1
 8004178:	e029      	b.n	80041ce <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800417a:	6893      	ldr	r3, [r2, #8]
 800417c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004180:	f023 0317 	bic.w	r3, r3, #23
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	2203      	movs	r2, #3
 800418e:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004190:	f7fd ff46 	bl	8002020 <HAL_GetTick>
 8004194:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f013 0f01 	tst.w	r3, #1
 800419e:	d013      	beq.n	80041c8 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041a0:	f7fd ff3e 	bl	8002020 <HAL_GetTick>
 80041a4:	1b40      	subs	r0, r0, r5
 80041a6:	2802      	cmp	r0, #2
 80041a8:	d9f5      	bls.n	8004196 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f013 0f01 	tst.w	r3, #1
 80041b2:	d0f0      	beq.n	8004196 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041b6:	f043 0310 	orr.w	r3, r3, #16
 80041ba:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80041c4:	2001      	movs	r0, #1
 80041c6:	e002      	b.n	80041ce <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041c8:	2000      	movs	r0, #0
 80041ca:	e000      	b.n	80041ce <ADC_Disable+0x8e>
 80041cc:	2000      	movs	r0, #0
}
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80041d0:	2000      	movs	r0, #0
 80041d2:	e7fc      	b.n	80041ce <ADC_Disable+0x8e>

080041d4 <HAL_ADC_DeInit>:
{
 80041d4:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d056      	beq.n	8004288 <HAL_ADC_DeInit+0xb4>
 80041da:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80041dc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80041de:	f043 0302 	orr.w	r3, r3, #2
 80041e2:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80041e4:	f7ff fed6 	bl	8003f94 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80041e8:	4606      	mov	r6, r0
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d03d      	beq.n	800426a <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80041ee:	6822      	ldr	r2, [r4, #0]
 80041f0:	6853      	ldr	r3, [r2, #4]
 80041f2:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	f240 329f 	movw	r2, #927	; 0x39f
 8004202:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004204:	6822      	ldr	r2, [r4, #0]
 8004206:	68d1      	ldr	r1, [r2, #12]
 8004208:	4b20      	ldr	r3, [pc, #128]	; (800428c <HAL_ADC_DeInit+0xb8>)
 800420a:	400b      	ands	r3, r1
 800420c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	6913      	ldr	r3, [r2, #16]
 8004212:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004216:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	6953      	ldr	r3, [r2, #20]
 800421c:	f023 0307 	bic.w	r3, r3, #7
 8004220:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8004222:	6822      	ldr	r2, [r4, #0]
 8004224:	6a13      	ldr	r3, [r2, #32]
 8004226:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800422a:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800422c:	6822      	ldr	r2, [r4, #0]
 800422e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004230:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8004234:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800423a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800423e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004244:	2500      	movs	r5, #0
 8004246:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <HAL_ADC_DeInit+0xbc>)
 800424a:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 800424e:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004252:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8004256:	4620      	mov	r0, r4
 8004258:	f7fd f81a 	bl	8001290 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800425c:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800425e:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8004260:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8004262:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8004266:	4630      	mov	r0, r6
 8004268:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800426a:	4620      	mov	r0, r4
 800426c:	f7ff ff68 	bl	8004140 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004270:	4606      	mov	r6, r0
 8004272:	b908      	cbnz	r0, 8004278 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8004274:	2301      	movs	r3, #1
 8004276:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004278:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800427a:	6893      	ldr	r3, [r2, #8]
 800427c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004280:	f023 0317 	bic.w	r3, r3, #23
 8004284:	6093      	str	r3, [r2, #8]
}
 8004286:	e7b2      	b.n	80041ee <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8004288:	2601      	movs	r6, #1
 800428a:	e7ec      	b.n	8004266 <HAL_ADC_DeInit+0x92>
 800428c:	833e0200 	.word	0x833e0200
 8004290:	40012000 	.word	0x40012000

08004294 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004294:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004298:	2b01      	cmp	r3, #1
 800429a:	d019      	beq.n	80042d0 <HAL_ADC_Stop+0x3c>
{
 800429c:	b510      	push	{r4, lr}
 800429e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80042a0:	2301      	movs	r3, #1
 80042a2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80042a6:	f7ff fe75 	bl	8003f94 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80042aa:	b118      	cbz	r0, 80042b4 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80042ac:	2300      	movs	r3, #0
 80042ae:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80042b2:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff ff43 	bl	8004140 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d1f6      	bne.n	80042ac <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80042be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80042ce:	e7ed      	b.n	80042ac <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80042d0:	2002      	movs	r0, #2
}
 80042d2:	4770      	bx	lr

080042d4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80042d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042d8:	2300      	movs	r3, #0
 80042da:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80042dc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	f000 8094 	beq.w	800440e <HAL_ADCEx_Calibration_Start+0x13a>
 80042e6:	4604      	mov	r4, r0
 80042e8:	2301      	movs	r3, #1
 80042ea:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042ee:	f7ff ff27 	bl	8004140 <ADC_Disable>
 80042f2:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042f4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	f012 0201 	ands.w	r2, r2, #1
 80042fc:	d009      	beq.n	8004312 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004300:	f043 0310 	orr.w	r3, r3, #16
 8004304:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004306:	2300      	movs	r3, #0
 8004308:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 800430c:	4628      	mov	r0, r5
 800430e:	b003      	add	sp, #12
 8004310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004312:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004314:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8004318:	f041 0102 	orr.w	r1, r1, #2
 800431c:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800431e:	68de      	ldr	r6, [r3, #12]
 8004320:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8004324:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8004328:	0436      	lsls	r6, r6, #16
 800432a:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800432c:	68d9      	ldr	r1, [r3, #12]
 800432e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004332:	f021 0103 	bic.w	r1, r1, #3
 8004336:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8004338:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800433a:	e005      	b.n	8004348 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800433c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004344:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004346:	3201      	adds	r2, #1
 8004348:	2a07      	cmp	r2, #7
 800434a:	d81e      	bhi.n	800438a <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 800434c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800434e:	688b      	ldr	r3, [r1, #8]
 8004350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004354:	f023 0317 	bic.w	r3, r3, #23
 8004358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800435c:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800435e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	2900      	cmp	r1, #0
 8004364:	daea      	bge.n	800433c <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8004366:	9b01      	ldr	r3, [sp, #4]
 8004368:	3301      	adds	r3, #1
 800436a:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800436c:	9b01      	ldr	r3, [sp, #4]
 800436e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004372:	d3f4      	bcc.n	800435e <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8004374:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004376:	f023 0312 	bic.w	r3, r3, #18
 800437a:	f043 0310 	orr.w	r3, r3, #16
 800437e:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8004380:	2300      	movs	r3, #0
 8004382:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8004386:	2501      	movs	r5, #1
 8004388:	e7c0      	b.n	800430c <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800438a:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 800438e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004390:	6893      	ldr	r3, [r2, #8]
 8004392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004396:	f023 0317 	bic.w	r3, r3, #23
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80043a0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 80043a2:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 80043a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043aa:	4318      	orrs	r0, r3
 80043ac:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 80043b0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80043b2:	6893      	ldr	r3, [r2, #8]
 80043b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043b8:	f023 0317 	bic.w	r3, r3, #23
 80043bc:	f043 0302 	orr.w	r3, r3, #2
 80043c0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80043c2:	f7fd fe2d 	bl	8002020 <HAL_GetTick>
 80043c6:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043c8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	f012 0f01 	tst.w	r2, #1
 80043d0:	d109      	bne.n	80043e6 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	4332      	orrs	r2, r6
 80043d6:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80043d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80043e4:	e78f      	b.n	8004306 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043e6:	f7fd fe1b 	bl	8002020 <HAL_GetTick>
 80043ea:	1bc3      	subs	r3, r0, r7
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d9eb      	bls.n	80043c8 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f013 0f01 	tst.w	r3, #1
 80043f8:	d0e6      	beq.n	80043c8 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043fc:	f043 0310 	orr.w	r3, r3, #16
 8004400:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004402:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800440a:	2501      	movs	r5, #1
 800440c:	e77e      	b.n	800430c <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 800440e:	2502      	movs	r5, #2
 8004410:	e77c      	b.n	800430c <HAL_ADCEx_Calibration_Start+0x38>
	...

08004414 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004414:	4a07      	ldr	r2, [pc, #28]	; (8004434 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004416:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004418:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004420:	0200      	lsls	r0, r0, #8
 8004422:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004426:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800442c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004430:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004432:	4770      	bx	lr
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004438:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800443a:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_NVIC_SetPriority+0x68>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004442:	f1c3 0c07 	rsb	ip, r3, #7
 8004446:	f1bc 0f04 	cmp.w	ip, #4
 800444a:	bf28      	it	cs
 800444c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004450:	f103 0e04 	add.w	lr, r3, #4
 8004454:	f1be 0f06 	cmp.w	lr, #6
 8004458:	d918      	bls.n	800448c <HAL_NVIC_SetPriority+0x54>
 800445a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004460:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004464:	ea21 010c 	bic.w	r1, r1, ip
 8004468:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800446a:	fa0e fe03 	lsl.w	lr, lr, r3
 800446e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004472:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8004474:	2800      	cmp	r0, #0
 8004476:	db0b      	blt.n	8004490 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004478:	0112      	lsls	r2, r2, #4
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004480:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004484:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004488:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448c:	2300      	movs	r3, #0
 800448e:	e7e5      	b.n	800445c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004490:	f000 000f 	and.w	r0, r0, #15
 8004494:	0112      	lsls	r2, r2, #4
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	4b02      	ldr	r3, [pc, #8]	; (80044a4 <HAL_NVIC_SetPriority+0x6c>)
 800449a:	541a      	strb	r2, [r3, r0]
 800449c:	e7f4      	b.n	8004488 <HAL_NVIC_SetPriority+0x50>
 800449e:	bf00      	nop
 80044a0:	e000ed00 	.word	0xe000ed00
 80044a4:	e000ed14 	.word	0xe000ed14

080044a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044a8:	2800      	cmp	r0, #0
 80044aa:	db07      	blt.n	80044bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ac:	f000 021f 	and.w	r2, r0, #31
 80044b0:	0940      	lsrs	r0, r0, #5
 80044b2:	2301      	movs	r3, #1
 80044b4:	4093      	lsls	r3, r2
 80044b6:	4a02      	ldr	r2, [pc, #8]	; (80044c0 <HAL_NVIC_EnableIRQ+0x18>)
 80044b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000e100 	.word	0xe000e100

080044c4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044c4:	2800      	cmp	r0, #0
 80044c6:	db0c      	blt.n	80044e2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c8:	f000 021f 	and.w	r2, r0, #31
 80044cc:	0940      	lsrs	r0, r0, #5
 80044ce:	2301      	movs	r3, #1
 80044d0:	4093      	lsls	r3, r2
 80044d2:	3020      	adds	r0, #32
 80044d4:	4a03      	ldr	r2, [pc, #12]	; (80044e4 <HAL_NVIC_DisableIRQ+0x20>)
 80044d6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80044da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80044de:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80044e2:	4770      	bx	lr
 80044e4:	e000e100 	.word	0xe000e100

080044e8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044ea:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80044ec:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80044f0:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80044f4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80044f6:	b124      	cbz	r4, 8004502 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044f8:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80044fa:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80044fe:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004502:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004504:	f004 0c1c 	and.w	ip, r4, #28
 8004508:	2401      	movs	r4, #1
 800450a:	fa04 f40c 	lsl.w	r4, r4, ip
 800450e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8004512:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004516:	6804      	ldr	r4, [r0, #0]
 8004518:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800451a:	6883      	ldr	r3, [r0, #8]
 800451c:	2b10      	cmp	r3, #16
 800451e:	d005      	beq.n	800452c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004520:	6803      	ldr	r3, [r0, #0]
 8004522:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004524:	6803      	ldr	r3, [r0, #0]
 8004526:	60da      	str	r2, [r3, #12]
  }
}
 8004528:	bc10      	pop	{r4}
 800452a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800452c:	6803      	ldr	r3, [r0, #0]
 800452e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004530:	6803      	ldr	r3, [r0, #0]
 8004532:	60d9      	str	r1, [r3, #12]
 8004534:	e7f8      	b.n	8004528 <DMA_SetConfig+0x40>
	...

08004538 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004538:	6803      	ldr	r3, [r0, #0]
 800453a:	4a14      	ldr	r2, [pc, #80]	; (800458c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d816      	bhi.n	800456e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004540:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004542:	f022 0203 	bic.w	r2, r2, #3
 8004546:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800454a:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800454e:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3b08      	subs	r3, #8
 8004554:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800455e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2201      	movs	r2, #1
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	6503      	str	r3, [r0, #80]	; 0x50
}
 800456c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800456e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004570:	f022 0103 	bic.w	r1, r2, #3
 8004574:	4a08      	ldr	r2, [pc, #32]	; (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004576:	440a      	add	r2, r1
 8004578:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800457a:	b2db      	uxtb	r3, r3
 800457c:	3b08      	subs	r3, #8
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	3307      	adds	r3, #7
 8004588:	e7e8      	b.n	800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800458a:	bf00      	nop
 800458c:	40020407 	.word	0x40020407
 8004590:	cccccccd 	.word	0xcccccccd
 8004594:	40020880 	.word	0x40020880
 8004598:	4002081c 	.word	0x4002081c

0800459c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800459c:	6843      	ldr	r3, [r0, #4]
 800459e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045a2:	4a07      	ldr	r2, [pc, #28]	; (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80045a4:	441a      	add	r2, r3
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045aa:	4a06      	ldr	r2, [pc, #24]	; (80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80045ac:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80045ae:	3b01      	subs	r3, #1
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2201      	movs	r2, #1
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	1000823f 	.word	0x1000823f
 80045c4:	40020940 	.word	0x40020940

080045c8 <HAL_DMA_Init>:
  if (hdma == NULL)
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d060      	beq.n	800468e <HAL_DMA_Init+0xc6>
{
 80045cc:	b510      	push	{r4, lr}
 80045ce:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045d0:	6802      	ldr	r2, [r0, #0]
 80045d2:	4b30      	ldr	r3, [pc, #192]	; (8004694 <HAL_DMA_Init+0xcc>)
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d842      	bhi.n	800465e <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80045d8:	4b2f      	ldr	r3, [pc, #188]	; (8004698 <HAL_DMA_Init+0xd0>)
 80045da:	4413      	add	r3, r2
 80045dc:	492f      	ldr	r1, [pc, #188]	; (800469c <HAL_DMA_Init+0xd4>)
 80045de:	fba1 1303 	umull	r1, r3, r1, r3
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80045e8:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <HAL_DMA_Init+0xd8>)
 80045ea:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80045ec:	2302      	movs	r3, #2
 80045ee:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fc:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	680a      	ldr	r2, [r1, #0]
 8004602:	68a3      	ldr	r3, [r4, #8]
 8004604:	68e0      	ldr	r0, [r4, #12]
 8004606:	4303      	orrs	r3, r0
 8004608:	6920      	ldr	r0, [r4, #16]
 800460a:	4303      	orrs	r3, r0
 800460c:	6960      	ldr	r0, [r4, #20]
 800460e:	4303      	orrs	r3, r0
 8004610:	69a0      	ldr	r0, [r4, #24]
 8004612:	4303      	orrs	r3, r0
 8004614:	69e0      	ldr	r0, [r4, #28]
 8004616:	4303      	orrs	r3, r0
 8004618:	6a20      	ldr	r0, [r4, #32]
 800461a:	4303      	orrs	r3, r0
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004620:	4620      	mov	r0, r4
 8004622:	f7ff ff89 	bl	8004538 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004626:	68a3      	ldr	r3, [r4, #8]
 8004628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800462c:	d022      	beq.n	8004674 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800462e:	6863      	ldr	r3, [r4, #4]
 8004630:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004636:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004638:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800463a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800463c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800463e:	6863      	ldr	r3, [r4, #4]
 8004640:	3b01      	subs	r3, #1
 8004642:	2b03      	cmp	r3, #3
 8004644:	d919      	bls.n	800467a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800464a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800464c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800464e:	2000      	movs	r0, #0
 8004650:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004652:	2301      	movs	r3, #1
 8004654:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004658:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800465c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <HAL_DMA_Init+0xdc>)
 8004660:	4413      	add	r3, r2
 8004662:	490e      	ldr	r1, [pc, #56]	; (800469c <HAL_DMA_Init+0xd4>)
 8004664:	fba1 1303 	umull	r1, r3, r1, r3
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800466e:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <HAL_DMA_Init+0xe0>)
 8004670:	6403      	str	r3, [r0, #64]	; 0x40
 8004672:	e7bb      	b.n	80045ec <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004674:	2300      	movs	r3, #0
 8004676:	6063      	str	r3, [r4, #4]
 8004678:	e7d9      	b.n	800462e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800467a:	4620      	mov	r0, r4
 800467c:	f7ff ff8e 	bl	800459c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004680:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004688:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	e7df      	b.n	800464e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800468e:	2001      	movs	r0, #1
}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40020407 	.word	0x40020407
 8004698:	bffdfff8 	.word	0xbffdfff8
 800469c:	cccccccd 	.word	0xcccccccd
 80046a0:	40020000 	.word	0x40020000
 80046a4:	bffdfbf8 	.word	0xbffdfbf8
 80046a8:	40020400 	.word	0x40020400

080046ac <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d04b      	beq.n	8004748 <HAL_DMA_DeInit+0x9c>
{
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80046b4:	6802      	ldr	r2, [r0, #0]
 80046b6:	6813      	ldr	r3, [r2, #0]
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046be:	6802      	ldr	r2, [r0, #0]
 80046c0:	4b22      	ldr	r3, [pc, #136]	; (800474c <HAL_DMA_DeInit+0xa0>)
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d82c      	bhi.n	8004720 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046c6:	4b22      	ldr	r3, [pc, #136]	; (8004750 <HAL_DMA_DeInit+0xa4>)
 80046c8:	4413      	add	r3, r2
 80046ca:	4922      	ldr	r1, [pc, #136]	; (8004754 <HAL_DMA_DeInit+0xa8>)
 80046cc:	fba1 1303 	umull	r1, r3, r1, r3
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046d6:	4b20      	ldr	r3, [pc, #128]	; (8004758 <HAL_DMA_DeInit+0xac>)
 80046d8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80046da:	2500      	movs	r5, #0
 80046dc:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046e0:	f003 021c 	and.w	r2, r3, #28
 80046e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80046e6:	2301      	movs	r3, #1
 80046e8:	4093      	lsls	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7ff ff23 	bl	8004538 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80046f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80046f4:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80046f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80046fa:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	2b03      	cmp	r3, #3
 8004702:	d918      	bls.n	8004736 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8004704:	2000      	movs	r0, #0
 8004706:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004708:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800470a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 800470c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800470e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004710:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004712:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004714:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004716:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800471a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800471e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004720:	4b0e      	ldr	r3, [pc, #56]	; (800475c <HAL_DMA_DeInit+0xb0>)
 8004722:	4413      	add	r3, r2
 8004724:	490b      	ldr	r1, [pc, #44]	; (8004754 <HAL_DMA_DeInit+0xa8>)
 8004726:	fba1 1303 	umull	r1, r3, r1, r3
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_DMA_DeInit+0xb4>)
 8004732:	6403      	str	r3, [r0, #64]	; 0x40
 8004734:	e7d1      	b.n	80046da <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004736:	4620      	mov	r0, r4
 8004738:	f7ff ff30 	bl	800459c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800473c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800473e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004740:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004742:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	e7dd      	b.n	8004704 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004748:	2001      	movs	r0, #1
}
 800474a:	4770      	bx	lr
 800474c:	40020407 	.word	0x40020407
 8004750:	bffdfff8 	.word	0xbffdfff8
 8004754:	cccccccd 	.word	0xcccccccd
 8004758:	40020000 	.word	0x40020000
 800475c:	bffdfbf8 	.word	0xbffdfbf8
 8004760:	40020400 	.word	0x40020400

08004764 <HAL_DMA_Start_IT>:
{
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004768:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800476c:	2801      	cmp	r0, #1
 800476e:	d043      	beq.n	80047f8 <HAL_DMA_Start_IT+0x94>
 8004770:	2001      	movs	r0, #1
 8004772:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004776:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800477a:	b2c0      	uxtb	r0, r0
 800477c:	2801      	cmp	r0, #1
 800477e:	d006      	beq.n	800478e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004784:	2300      	movs	r3, #0
 8004786:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800478a:	2001      	movs	r0, #1
}
 800478c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800478e:	2002      	movs	r0, #2
 8004790:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004794:	2000      	movs	r0, #0
 8004796:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004798:	6825      	ldr	r5, [r4, #0]
 800479a:	6828      	ldr	r0, [r5, #0]
 800479c:	f020 0001 	bic.w	r0, r0, #1
 80047a0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047a2:	4620      	mov	r0, r4
 80047a4:	f7ff fea0 	bl	80044e8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80047a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047aa:	b1d3      	cbz	r3, 80047e2 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	6813      	ldr	r3, [r2, #0]
 80047b0:	f043 030e 	orr.w	r3, r3, #14
 80047b4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80047be:	d003      	beq.n	80047c8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 80047c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047ca:	b11b      	cbz	r3, 80047d4 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	6813      	ldr	r3, [r2, #0]
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047de:	2000      	movs	r0, #0
 80047e0:	e7d4      	b.n	800478c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	6813      	ldr	r3, [r2, #0]
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	f043 030a 	orr.w	r3, r3, #10
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e7de      	b.n	80047b6 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80047f8:	2002      	movs	r0, #2
 80047fa:	e7c7      	b.n	800478c <HAL_DMA_Start_IT+0x28>

080047fc <HAL_DMA_IRQHandler>:
{
 80047fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004800:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004802:	6804      	ldr	r4, [r0, #0]
 8004804:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004806:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004808:	f003 031c 	and.w	r3, r3, #28
 800480c:	2204      	movs	r2, #4
 800480e:	409a      	lsls	r2, r3
 8004810:	420a      	tst	r2, r1
 8004812:	d015      	beq.n	8004840 <HAL_DMA_IRQHandler+0x44>
 8004814:	f015 0f04 	tst.w	r5, #4
 8004818:	d012      	beq.n	8004840 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f013 0f20 	tst.w	r3, #32
 8004820:	d103      	bne.n	800482a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800482a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800482c:	f003 021c 	and.w	r2, r3, #28
 8004830:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004832:	2304      	movs	r3, #4
 8004834:	4093      	lsls	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004838:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800483a:	b103      	cbz	r3, 800483e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800483c:	4798      	blx	r3
}
 800483e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004840:	2202      	movs	r2, #2
 8004842:	409a      	lsls	r2, r3
 8004844:	420a      	tst	r2, r1
 8004846:	d028      	beq.n	800489a <HAL_DMA_IRQHandler+0x9e>
 8004848:	f015 0f02 	tst.w	r5, #2
 800484c:	d025      	beq.n	800489a <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	f013 0f20 	tst.w	r3, #32
 8004854:	d106      	bne.n	8004864 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	f023 030a 	bic.w	r3, r3, #10
 800485c:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800485e:	2301      	movs	r3, #1
 8004860:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004864:	6802      	ldr	r2, [r0, #0]
 8004866:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <HAL_DMA_IRQHandler+0xdc>)
 8004868:	429a      	cmp	r2, r3
 800486a:	d90e      	bls.n	800488a <HAL_DMA_IRQHandler+0x8e>
 800486c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800486e:	f003 021c 	and.w	r2, r3, #28
 8004872:	2302      	movs	r3, #2
 8004874:	4093      	lsls	r3, r2
 8004876:	4a19      	ldr	r2, [pc, #100]	; (80048dc <HAL_DMA_IRQHandler+0xe0>)
 8004878:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 800487a:	2300      	movs	r3, #0
 800487c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004880:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0db      	beq.n	800483e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8004886:	4798      	blx	r3
 8004888:	e7d9      	b.n	800483e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800488a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800488c:	f003 021c 	and.w	r2, r3, #28
 8004890:	2302      	movs	r3, #2
 8004892:	4093      	lsls	r3, r2
 8004894:	4a12      	ldr	r2, [pc, #72]	; (80048e0 <HAL_DMA_IRQHandler+0xe4>)
 8004896:	6053      	str	r3, [r2, #4]
 8004898:	e7ef      	b.n	800487a <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800489a:	2208      	movs	r2, #8
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	420b      	tst	r3, r1
 80048a2:	d0cc      	beq.n	800483e <HAL_DMA_IRQHandler+0x42>
 80048a4:	f015 0f08 	tst.w	r5, #8
 80048a8:	d0c9      	beq.n	800483e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	f023 030e 	bic.w	r3, r3, #14
 80048b0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048b4:	f003 031c 	and.w	r3, r3, #28
 80048b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80048ba:	2201      	movs	r2, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048c2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80048c4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80048c8:	2300      	movs	r3, #0
 80048ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80048ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0b4      	beq.n	800483e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80048d4:	4798      	blx	r3
  return;
 80048d6:	e7b2      	b.n	800483e <HAL_DMA_IRQHandler+0x42>
 80048d8:	40020080 	.word	0x40020080
 80048dc:	40020400 	.word	0x40020400
 80048e0:	40020000 	.word	0x40020000

080048e4 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80048e4:	b178      	cbz	r0, 8004906 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80048e6:	6803      	ldr	r3, [r0, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80048ea:	f011 0f10 	tst.w	r1, #16
 80048ee:	d004      	beq.n	80048fa <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80048f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80048f4:	d004      	beq.n	8004900 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80048f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80048fa:	601a      	str	r2, [r3, #0]
  return status;
 80048fc:	2000      	movs	r0, #0
 80048fe:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004900:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004904:	e7f9      	b.n	80048fa <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004906:	2001      	movs	r0, #1
}
 8004908:	4770      	bx	lr
	...

0800490c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800490c:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800490e:	4c05      	ldr	r4, [pc, #20]	; (8004924 <FLASH_Program_DoubleWord+0x18>)
 8004910:	6961      	ldr	r1, [r4, #20]
 8004912:	f041 0101 	orr.w	r1, r1, #1
 8004916:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004918:	6002      	str	r2, [r0, #0]
 800491a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800491e:	6043      	str	r3, [r0, #4]
}
 8004920:	bc10      	pop	{r4}
 8004922:	4770      	bx	lr
 8004924:	58004000 	.word	0x58004000

08004928 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004928:	4a0c      	ldr	r2, [pc, #48]	; (800495c <FLASH_Program_Fast+0x34>)
 800492a:	6953      	ldr	r3, [r2, #20]
 800492c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004930:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004932:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004936:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004938:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800493a:	f851 2b04 	ldr.w	r2, [r1], #4
 800493e:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8004942:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004944:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004948:	d1f7      	bne.n	800493a <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800494a:	4b04      	ldr	r3, [pc, #16]	; (800495c <FLASH_Program_Fast+0x34>)
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004952:	d1fa      	bne.n	800494a <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004954:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	58004000 	.word	0x58004000

08004960 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004960:	4b09      	ldr	r3, [pc, #36]	; (8004988 <HAL_FLASH_Unlock+0x28>)
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	db01      	blt.n	800496c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004968:	2000      	movs	r0, #0
 800496a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_FLASH_Unlock+0x28>)
 800496e:	4a07      	ldr	r2, [pc, #28]	; (800498c <HAL_FLASH_Unlock+0x2c>)
 8004970:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004972:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004976:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	2b00      	cmp	r3, #0
 800497c:	db01      	blt.n	8004982 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2000      	movs	r0, #0
 8004980:	4770      	bx	lr
      status = HAL_ERROR;
 8004982:	2001      	movs	r0, #1
}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	58004000 	.word	0x58004000
 800498c:	45670123 	.word	0x45670123

08004990 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HAL_FLASH_Lock+0x18>)
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004998:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	db01      	blt.n	80049a4 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 80049a0:	2001      	movs	r0, #1
}
 80049a2:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2000      	movs	r0, #0
 80049a6:	4770      	bx	lr
 80049a8:	58004000 	.word	0x58004000

080049ac <FLASH_WaitForLastOperation>:
{
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80049b0:	f7fd fb36 	bl	8002020 <HAL_GetTick>
 80049b4:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80049b6:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <FLASH_WaitForLastOperation+0x64>)
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80049be:	d006      	beq.n	80049ce <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80049c0:	f7fd fb2e 	bl	8002020 <HAL_GetTick>
 80049c4:	1b00      	subs	r0, r0, r4
 80049c6:	42a8      	cmp	r0, r5
 80049c8:	d3f5      	bcc.n	80049b6 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 80049ca:	2003      	movs	r0, #3
}
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 80049ce:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <FLASH_WaitForLastOperation+0x64>)
 80049d0:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 80049d2:	f013 0f01 	tst.w	r3, #1
 80049d6:	d002      	beq.n	80049de <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80049d8:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <FLASH_WaitForLastOperation+0x64>)
 80049da:	2101      	movs	r1, #1
 80049dc:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 80049de:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 80049e2:	4013      	ands	r3, r2
 80049e4:	d001      	beq.n	80049ea <FLASH_WaitForLastOperation+0x3e>
 80049e6:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <FLASH_WaitForLastOperation+0x64>)
 80049e8:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 80049ea:	b95b      	cbnz	r3, 8004a04 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80049ec:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <FLASH_WaitForLastOperation+0x64>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80049f4:	d00a      	beq.n	8004a0c <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80049f6:	f7fd fb13 	bl	8002020 <HAL_GetTick>
 80049fa:	1b00      	subs	r0, r0, r4
 80049fc:	42a8      	cmp	r0, r5
 80049fe:	d3f5      	bcc.n	80049ec <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004a00:	2003      	movs	r0, #3
 8004a02:	e7e3      	b.n	80049cc <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004a04:	4a03      	ldr	r2, [pc, #12]	; (8004a14 <FLASH_WaitForLastOperation+0x68>)
 8004a06:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e7df      	b.n	80049cc <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e7dd      	b.n	80049cc <FLASH_WaitForLastOperation+0x20>
 8004a10:	58004000 	.word	0x58004000
 8004a14:	2000095c 	.word	0x2000095c

08004a18 <HAL_FLASH_Program>:
{
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <HAL_FLASH_Program+0x5c>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d025      	beq.n	8004a70 <HAL_FLASH_Program+0x58>
 8004a24:	4604      	mov	r4, r0
 8004a26:	460d      	mov	r5, r1
 8004a28:	4616      	mov	r6, r2
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <HAL_FLASH_Program+0x5c>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a30:	2200      	movs	r2, #0
 8004a32:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a38:	f7ff ffb8 	bl	80049ac <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004a3c:	b970      	cbnz	r0, 8004a5c <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004a3e:	2c01      	cmp	r4, #1
 8004a40:	d010      	beq.n	8004a64 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	f7ff ff6f 	bl	8004928 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a4e:	f7ff ffad 	bl	80049ac <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <HAL_FLASH_Program+0x60>)
 8004a54:	6953      	ldr	r3, [r2, #20]
 8004a56:	ea23 0304 	bic.w	r3, r3, r4
 8004a5a:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_FLASH_Program+0x5c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
}
 8004a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004a64:	4632      	mov	r2, r6
 8004a66:	463b      	mov	r3, r7
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f7ff ff4f 	bl	800490c <FLASH_Program_DoubleWord>
 8004a6e:	e7ec      	b.n	8004a4a <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004a70:	2002      	movs	r0, #2
 8004a72:	e7f6      	b.n	8004a62 <HAL_FLASH_Program+0x4a>
 8004a74:	2000095c 	.word	0x2000095c
 8004a78:	58004000 	.word	0x58004000

08004a7c <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004a7c:	4a03      	ldr	r2, [pc, #12]	; (8004a8c <FLASH_MassErase+0x10>)
 8004a7e:	6953      	ldr	r3, [r2, #20]
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a84:	f043 0304 	orr.w	r3, r3, #4
 8004a88:	6153      	str	r3, [r2, #20]
#endif
}
 8004a8a:	4770      	bx	lr
 8004a8c:	58004000 	.word	0x58004000

08004a90 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004a90:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <FLASH_FlushCaches+0x64>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d006      	beq.n	8004aaa <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004a9c:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <FLASH_FlushCaches+0x64>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d012      	beq.n	8004ace <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004aa8:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <FLASH_FlushCaches+0x64>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ab2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	e7e6      	b.n	8004a9c <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004ace:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <FLASH_FlushCaches+0x64>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ae6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aee:	601a      	str	r2, [r3, #0]
}
 8004af0:	e7da      	b.n	8004aa8 <FLASH_FlushCaches+0x18>
 8004af2:	bf00      	nop
 8004af4:	58004000 	.word	0x58004000

08004af8 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004af8:	4a03      	ldr	r2, [pc, #12]	; (8004b08 <FLASH_AcknowledgePageErase+0x10>)
 8004afa:	6953      	ldr	r3, [r2, #20]
 8004afc:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004b00:	f023 0302 	bic.w	r3, r3, #2
 8004b04:	6153      	str	r3, [r2, #20]
#endif
}
 8004b06:	4770      	bx	lr
 8004b08:	58004000 	.word	0x58004000

08004b0c <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004b0c:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <FLASH_PageErase+0x18>)
 8004b0e:	6953      	ldr	r3, [r2, #20]
 8004b10:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004b14:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004b18:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004b1c:	f040 0002 	orr.w	r0, r0, #2
 8004b20:	6150      	str	r0, [r2, #20]
}
 8004b22:	4770      	bx	lr
 8004b24:	58004000 	.word	0x58004000

08004b28 <HAL_FLASHEx_Erase>:
{
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004b2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <HAL_FLASHEx_Erase+0x7c>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d035      	beq.n	8004b9e <HAL_FLASHEx_Erase+0x76>
 8004b32:	4605      	mov	r5, r0
 8004b34:	460f      	mov	r7, r1
 8004b36:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <HAL_FLASHEx_Erase+0x7c>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b44:	f7ff ff32 	bl	80049ac <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004b48:	4606      	mov	r6, r0
 8004b4a:	bb18      	cbnz	r0, 8004b94 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d013      	beq.n	8004b7a <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b56:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004b58:	686c      	ldr	r4, [r5, #4]
 8004b5a:	686b      	ldr	r3, [r5, #4]
 8004b5c:	68aa      	ldr	r2, [r5, #8]
 8004b5e:	4413      	add	r3, r2
 8004b60:	42a3      	cmp	r3, r4
 8004b62:	d913      	bls.n	8004b8c <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7ff ffd1 	bl	8004b0c <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b6e:	f7ff ff1d 	bl	80049ac <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004b72:	4606      	mov	r6, r0
 8004b74:	b948      	cbnz	r0, 8004b8a <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004b76:	3401      	adds	r4, #1
 8004b78:	e7ef      	b.n	8004b5a <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004b7a:	f7ff ff7f 	bl	8004a7c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b82:	f7ff ff13 	bl	80049ac <FLASH_WaitForLastOperation>
 8004b86:	4606      	mov	r6, r0
 8004b88:	e002      	b.n	8004b90 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004b8a:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004b8c:	f7ff ffb4 	bl	8004af8 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004b90:	f7ff ff7e 	bl	8004a90 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <HAL_FLASHEx_Erase+0x7c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
}
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004b9e:	2602      	movs	r6, #2
 8004ba0:	e7fb      	b.n	8004b9a <HAL_FLASHEx_Erase+0x72>
 8004ba2:	bf00      	nop
 8004ba4:	2000095c 	.word	0x2000095c

08004ba8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba8:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8004baa:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bac:	e069      	b.n	8004c82 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bae:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bb0:	005e      	lsls	r6, r3, #1
 8004bb2:	2403      	movs	r4, #3
 8004bb4:	40b4      	lsls	r4, r6
 8004bb6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bba:	68cc      	ldr	r4, [r1, #12]
 8004bbc:	40b4      	lsls	r4, r6
 8004bbe:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004bc0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bc2:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bc4:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bc8:	684c      	ldr	r4, [r1, #4]
 8004bca:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004bce:	409c      	lsls	r4, r3
 8004bd0:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004bd2:	6044      	str	r4, [r0, #4]
 8004bd4:	e066      	b.n	8004ca4 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bd6:	08dd      	lsrs	r5, r3, #3
 8004bd8:	3508      	adds	r5, #8
 8004bda:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bde:	f003 0c07 	and.w	ip, r3, #7
 8004be2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004be6:	f04f 0e0f 	mov.w	lr, #15
 8004bea:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004bee:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bf2:	690c      	ldr	r4, [r1, #16]
 8004bf4:	fa04 f40c 	lsl.w	r4, r4, ip
 8004bf8:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004bfc:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004c00:	e067      	b.n	8004cd2 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c02:	2402      	movs	r4, #2
 8004c04:	e000      	b.n	8004c08 <HAL_GPIO_Init+0x60>
 8004c06:	2400      	movs	r4, #0
 8004c08:	fa04 f40e 	lsl.w	r4, r4, lr
 8004c0c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c0e:	f10c 0c02 	add.w	ip, ip, #2
 8004c12:	4d4b      	ldr	r5, [pc, #300]	; (8004d40 <HAL_GPIO_Init+0x198>)
 8004c14:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c18:	4c4a      	ldr	r4, [pc, #296]	; (8004d44 <HAL_GPIO_Init+0x19c>)
 8004c1a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004c1c:	43d4      	mvns	r4, r2
 8004c1e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c22:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004c26:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8004c2a:	d001      	beq.n	8004c30 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004c2c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004c30:	4d44      	ldr	r5, [pc, #272]	; (8004d44 <HAL_GPIO_Init+0x19c>)
 8004c32:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004c34:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004c36:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c3a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004c3e:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8004c42:	d001      	beq.n	8004c48 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8004c44:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004c48:	4d3e      	ldr	r5, [pc, #248]	; (8004d44 <HAL_GPIO_Init+0x19c>)
 8004c4a:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004c4c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c50:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c54:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004c58:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8004c5c:	d001      	beq.n	8004c62 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004c5e:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004c62:	4d38      	ldr	r5, [pc, #224]	; (8004d44 <HAL_GPIO_Init+0x19c>)
 8004c64:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004c68:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c6c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c6e:	684e      	ldr	r6, [r1, #4]
 8004c70:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8004c74:	d001      	beq.n	8004c7a <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8004c76:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004c7a:	4a32      	ldr	r2, [pc, #200]	; (8004d44 <HAL_GPIO_Init+0x19c>)
 8004c7c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004c80:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c82:	680a      	ldr	r2, [r1, #0]
 8004c84:	fa32 f403 	lsrs.w	r4, r2, r3
 8004c88:	d058      	beq.n	8004d3c <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c8a:	f04f 0c01 	mov.w	ip, #1
 8004c8e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004c92:	ea1c 0202 	ands.w	r2, ip, r2
 8004c96:	d0f3      	beq.n	8004c80 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c98:	684c      	ldr	r4, [r1, #4]
 8004c9a:	f004 0403 	and.w	r4, r4, #3
 8004c9e:	3c01      	subs	r4, #1
 8004ca0:	2c01      	cmp	r4, #1
 8004ca2:	d984      	bls.n	8004bae <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ca4:	684c      	ldr	r4, [r1, #4]
 8004ca6:	f004 0403 	and.w	r4, r4, #3
 8004caa:	2c03      	cmp	r4, #3
 8004cac:	d00c      	beq.n	8004cc8 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004cae:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cb0:	005d      	lsls	r5, r3, #1
 8004cb2:	f04f 0c03 	mov.w	ip, #3
 8004cb6:	fa0c fc05 	lsl.w	ip, ip, r5
 8004cba:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cbe:	688c      	ldr	r4, [r1, #8]
 8004cc0:	40ac      	lsls	r4, r5
 8004cc2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004cc6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cc8:	684c      	ldr	r4, [r1, #4]
 8004cca:	f004 0403 	and.w	r4, r4, #3
 8004cce:	2c02      	cmp	r4, #2
 8004cd0:	d081      	beq.n	8004bd6 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8004cd2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cd4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004cd8:	f04f 0c03 	mov.w	ip, #3
 8004cdc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004ce0:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ce4:	684c      	ldr	r4, [r1, #4]
 8004ce6:	f004 0403 	and.w	r4, r4, #3
 8004cea:	fa04 f40e 	lsl.w	r4, r4, lr
 8004cee:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004cf2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cf4:	684c      	ldr	r4, [r1, #4]
 8004cf6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004cfa:	d0c1      	beq.n	8004c80 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004cfc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004d00:	f10c 0502 	add.w	r5, ip, #2
 8004d04:	4c0e      	ldr	r4, [pc, #56]	; (8004d40 <HAL_GPIO_Init+0x198>)
 8004d06:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004d0a:	f003 0e03 	and.w	lr, r3, #3
 8004d0e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004d12:	2407      	movs	r4, #7
 8004d14:	fa04 f40e 	lsl.w	r4, r4, lr
 8004d18:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d1c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004d20:	f43f af71 	beq.w	8004c06 <HAL_GPIO_Init+0x5e>
 8004d24:	4c08      	ldr	r4, [pc, #32]	; (8004d48 <HAL_GPIO_Init+0x1a0>)
 8004d26:	42a0      	cmp	r0, r4
 8004d28:	d006      	beq.n	8004d38 <HAL_GPIO_Init+0x190>
 8004d2a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d2e:	42a0      	cmp	r0, r4
 8004d30:	f43f af67 	beq.w	8004c02 <HAL_GPIO_Init+0x5a>
 8004d34:	2407      	movs	r4, #7
 8004d36:	e767      	b.n	8004c08 <HAL_GPIO_Init+0x60>
 8004d38:	2401      	movs	r4, #1
 8004d3a:	e765      	b.n	8004c08 <HAL_GPIO_Init+0x60>
  }
}
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000
 8004d44:	58000800 	.word	0x58000800
 8004d48:	48000400 	.word	0x48000400

08004d4c <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8004d4c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004d4e:	fa31 f203 	lsrs.w	r2, r1, r3
 8004d52:	d071      	beq.n	8004e38 <HAL_GPIO_DeInit+0xec>
{
 8004d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d56:	e02e      	b.n	8004db6 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d58:	2502      	movs	r5, #2
 8004d5a:	e000      	b.n	8004d5e <HAL_GPIO_DeInit+0x12>
 8004d5c:	2500      	movs	r5, #0
 8004d5e:	fa05 f50c 	lsl.w	r5, r5, ip
 8004d62:	42a5      	cmp	r5, r4
 8004d64:	d049      	beq.n	8004dfa <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d66:	6804      	ldr	r4, [r0, #0]
 8004d68:	005d      	lsls	r5, r3, #1
 8004d6a:	f04f 0c03 	mov.w	ip, #3
 8004d6e:	fa0c fc05 	lsl.w	ip, ip, r5
 8004d72:	ea44 040c 	orr.w	r4, r4, ip
 8004d76:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004d78:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004d7c:	f10e 0e08 	add.w	lr, lr, #8
 8004d80:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004d84:	f003 0607 	and.w	r6, r3, #7
 8004d88:	00b6      	lsls	r6, r6, #2
 8004d8a:	250f      	movs	r5, #15
 8004d8c:	40b5      	lsls	r5, r6
 8004d8e:	ea24 0405 	bic.w	r4, r4, r5
 8004d92:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d96:	6884      	ldr	r4, [r0, #8]
 8004d98:	ea24 040c 	bic.w	r4, r4, ip
 8004d9c:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d9e:	6844      	ldr	r4, [r0, #4]
 8004da0:	ea24 0202 	bic.w	r2, r4, r2
 8004da4:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004da6:	68c2      	ldr	r2, [r0, #12]
 8004da8:	ea22 020c 	bic.w	r2, r2, ip
 8004dac:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004dae:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004db0:	fa31 f203 	lsrs.w	r2, r1, r3
 8004db4:	d03f      	beq.n	8004e36 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004db6:	2201      	movs	r2, #1
 8004db8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8004dba:	ea12 0701 	ands.w	r7, r2, r1
 8004dbe:	d0f6      	beq.n	8004dae <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004dc0:	089e      	lsrs	r6, r3, #2
 8004dc2:	1cb5      	adds	r5, r6, #2
 8004dc4:	4c1d      	ldr	r4, [pc, #116]	; (8004e3c <HAL_GPIO_DeInit+0xf0>)
 8004dc6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004dca:	f003 0c03 	and.w	ip, r3, #3
 8004dce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004dd2:	f04f 0e07 	mov.w	lr, #7
 8004dd6:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004dda:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004dde:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004de2:	d0bb      	beq.n	8004d5c <HAL_GPIO_DeInit+0x10>
 8004de4:	4d16      	ldr	r5, [pc, #88]	; (8004e40 <HAL_GPIO_DeInit+0xf4>)
 8004de6:	42a8      	cmp	r0, r5
 8004de8:	d005      	beq.n	8004df6 <HAL_GPIO_DeInit+0xaa>
 8004dea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004dee:	42a8      	cmp	r0, r5
 8004df0:	d0b2      	beq.n	8004d58 <HAL_GPIO_DeInit+0xc>
 8004df2:	2507      	movs	r5, #7
 8004df4:	e7b3      	b.n	8004d5e <HAL_GPIO_DeInit+0x12>
 8004df6:	2501      	movs	r5, #1
 8004df8:	e7b1      	b.n	8004d5e <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004dfa:	4c12      	ldr	r4, [pc, #72]	; (8004e44 <HAL_GPIO_DeInit+0xf8>)
 8004dfc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004e00:	ea25 0507 	bic.w	r5, r5, r7
 8004e04:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004e08:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004e0c:	ea25 0507 	bic.w	r5, r5, r7
 8004e10:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004e14:	6825      	ldr	r5, [r4, #0]
 8004e16:	ea25 0507 	bic.w	r5, r5, r7
 8004e1a:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004e1c:	6865      	ldr	r5, [r4, #4]
 8004e1e:	ea25 0507 	bic.w	r5, r5, r7
 8004e22:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004e24:	4d05      	ldr	r5, [pc, #20]	; (8004e3c <HAL_GPIO_DeInit+0xf0>)
 8004e26:	3602      	adds	r6, #2
 8004e28:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004e2c:	ea24 040e 	bic.w	r4, r4, lr
 8004e30:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004e34:	e797      	b.n	8004d66 <HAL_GPIO_DeInit+0x1a>
  }
}
 8004e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	48000400 	.word	0x48000400
 8004e44:	58000800 	.word	0x58000800

08004e48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e48:	b10a      	cbz	r2, 8004e4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e4a:	6181      	str	r1, [r0, #24]
 8004e4c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e4e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004e50:	4770      	bx	lr

08004e52 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e52:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e54:	ea01 0203 	and.w	r2, r1, r3
 8004e58:	ea21 0103 	bic.w	r1, r1, r3
 8004e5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e60:	6181      	str	r1, [r0, #24]
}
 8004e62:	4770      	bx	lr

08004e64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e64:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	4203      	tst	r3, r0
 8004e6c:	d100      	bne.n	8004e70 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004e6e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e70:	4b02      	ldr	r3, [pc, #8]	; (8004e7c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004e72:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e74:	f7fe fbfa 	bl	800366c <HAL_GPIO_EXTI_Callback>
}
 8004e78:	e7f9      	b.n	8004e6e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004e7a:	bf00      	nop
 8004e7c:	58000800 	.word	0x58000800

08004e80 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d059      	beq.n	8004f38 <HAL_I2C_Init+0xb8>
{
 8004e84:	b510      	push	{r4, lr}
 8004e86:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d043      	beq.n	8004f18 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e90:	2324      	movs	r3, #36	; 0x24
 8004e92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	6813      	ldr	r3, [r2, #0]
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004ea8:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	6893      	ldr	r3, [r2, #8]
 8004eae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eb2:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eb4:	68e3      	ldr	r3, [r4, #12]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d033      	beq.n	8004f22 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004eba:	68a3      	ldr	r3, [r4, #8]
 8004ebc:	6822      	ldr	r2, [r4, #0]
 8004ebe:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004ec2:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ec4:	68e3      	ldr	r3, [r4, #12]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d031      	beq.n	8004f2e <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	6853      	ldr	r3, [r2, #4]
 8004ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	68d3      	ldr	r3, [r2, #12]
 8004edc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ee0:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ee2:	6923      	ldr	r3, [r4, #16]
 8004ee4:	6962      	ldr	r2, [r4, #20]
 8004ee6:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ee8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eea:	6822      	ldr	r2, [r4, #0]
 8004eec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004ef0:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ef2:	69e3      	ldr	r3, [r4, #28]
 8004ef4:	6a21      	ldr	r1, [r4, #32]
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f06:	2000      	movs	r0, #0
 8004f08:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f12:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8004f16:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004f18:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004f1c:	f7fc fcfa 	bl	8001914 <HAL_I2C_MspInit>
 8004f20:	e7b6      	b.n	8004e90 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f22:	68a3      	ldr	r3, [r4, #8]
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2a:	6093      	str	r3, [r2, #8]
 8004f2c:	e7ca      	b.n	8004ec4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	e7c8      	b.n	8004eca <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004f38:	2001      	movs	r0, #1
}
 8004f3a:	4770      	bx	lr

08004f3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f3c:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	2a20      	cmp	r2, #32
 8004f46:	d123      	bne.n	8004f90 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f48:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004f4c:	2a01      	cmp	r2, #1
 8004f4e:	d021      	beq.n	8004f94 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004f50:	2201      	movs	r2, #1
 8004f52:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f56:	2224      	movs	r2, #36	; 0x24
 8004f58:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	6802      	ldr	r2, [r0, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	6802      	ldr	r2, [r0, #0]
 8004f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f6e:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	6802      	ldr	r2, [r0, #0]
 8004f74:	4311      	orrs	r1, r2
 8004f76:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	680a      	ldr	r2, [r1, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f88:	2000      	movs	r0, #0
 8004f8a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8004f8e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004f90:	2002      	movs	r0, #2
 8004f92:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004f94:	2002      	movs	r0, #2
  }
}
 8004f96:	4770      	bx	lr

08004f98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f98:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f9a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	2a20      	cmp	r2, #32
 8004fa2:	d121      	bne.n	8004fe8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004fa8:	2a01      	cmp	r2, #1
 8004faa:	d01f      	beq.n	8004fec <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004fac:	2201      	movs	r2, #1
 8004fae:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb2:	2224      	movs	r2, #36	; 0x24
 8004fb4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fb8:	6800      	ldr	r0, [r0, #0]
 8004fba:	6802      	ldr	r2, [r0, #0]
 8004fbc:	f022 0201 	bic.w	r2, r2, #1
 8004fc0:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fc6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fce:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	680a      	ldr	r2, [r1, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8004fe6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2002      	movs	r0, #2
 8004fea:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004fec:	2002      	movs	r0, #2
  }
}
 8004fee:	4770      	bx	lr

08004ff0 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff0:	4a02      	ldr	r2, [pc, #8]	; (8004ffc <HAL_PWR_EnableBkUpAccess+0xc>)
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff8:	6013      	str	r3, [r2, #0]
}
 8004ffa:	4770      	bx	lr
 8004ffc:	58000400 	.word	0x58000400

08005000 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005000:	4b02      	ldr	r3, [pc, #8]	; (800500c <HAL_PWREx_GetVoltageRange+0xc>)
 8005002:	6818      	ldr	r0, [r3, #0]
}
 8005004:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	58000400 	.word	0x58000400

08005010 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005010:	b530      	push	{r4, r5, lr}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	4604      	mov	r4, r0
 8005016:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005018:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <RCC_SetFlashLatency+0xb4>)
 800501a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800501e:	9006      	str	r0, [sp, #24]
 8005020:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005024:	f103 0208 	add.w	r2, r3, #8
 8005028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800502c:	9004      	str	r0, [sp, #16]
 800502e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005032:	ad01      	add	r5, sp, #4
 8005034:	3310      	adds	r3, #16
 8005036:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800503a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800503e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005042:	d007      	beq.n	8005054 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005044:	2300      	movs	r3, #0
 8005046:	e014      	b.n	8005072 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005048:	aa08      	add	r2, sp, #32
 800504a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800504e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005052:	e01e      	b.n	8005092 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005054:	2300      	movs	r3, #0
 8005056:	2b02      	cmp	r3, #2
 8005058:	d808      	bhi.n	800506c <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800505a:	aa08      	add	r2, sp, #32
 800505c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005060:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005064:	42a2      	cmp	r2, r4
 8005066:	d2ef      	bcs.n	8005048 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005068:	3301      	adds	r3, #1
 800506a:	e7f4      	b.n	8005056 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800506c:	2500      	movs	r5, #0
 800506e:	e010      	b.n	8005092 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005070:	3301      	adds	r3, #1
 8005072:	2b02      	cmp	r3, #2
 8005074:	d80c      	bhi.n	8005090 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005076:	aa08      	add	r2, sp, #32
 8005078:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800507c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005080:	42a2      	cmp	r2, r4
 8005082:	d3f5      	bcc.n	8005070 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005084:	aa08      	add	r2, sp, #32
 8005086:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800508a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800508e:	e000      	b.n	8005092 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005090:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005092:	4a0d      	ldr	r2, [pc, #52]	; (80050c8 <RCC_SetFlashLatency+0xb8>)
 8005094:	6813      	ldr	r3, [r2, #0]
 8005096:	f023 0307 	bic.w	r3, r3, #7
 800509a:	432b      	orrs	r3, r5
 800509c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800509e:	f7fc ffbf 	bl	8002020 <HAL_GetTick>
 80050a2:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <RCC_SetFlashLatency+0xb8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	d006      	beq.n	80050be <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050b0:	f7fc ffb6 	bl	8002020 <HAL_GetTick>
 80050b4:	1b00      	subs	r0, r0, r4
 80050b6:	2802      	cmp	r0, #2
 80050b8:	d9f4      	bls.n	80050a4 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80050ba:	2003      	movs	r0, #3
 80050bc:	e000      	b.n	80050c0 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80050be:	2000      	movs	r0, #0
}
 80050c0:	b009      	add	sp, #36	; 0x24
 80050c2:	bd30      	pop	{r4, r5, pc}
 80050c4:	0801932c 	.word	0x0801932c
 80050c8:	58004000 	.word	0x58004000

080050cc <RCC_SetFlashLatencyFromMSIRange>:
{
 80050cc:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80050ce:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80050d4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	4a08      	ldr	r2, [pc, #32]	; (8005108 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80050e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ea:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80050ee:	f7ff ff87 	bl	8005000 <HAL_PWREx_GetVoltageRange>
 80050f2:	4601      	mov	r1, r0
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80050f6:	fba3 3404 	umull	r3, r4, r3, r4
 80050fa:	0ca0      	lsrs	r0, r4, #18
 80050fc:	f7ff ff88 	bl	8005010 <RCC_SetFlashLatency>
}
 8005100:	bd10      	pop	{r4, pc}
 8005102:	bf00      	nop
 8005104:	08019988 	.word	0x08019988
 8005108:	08019928 	.word	0x08019928
 800510c:	431bde83 	.word	0x431bde83

08005110 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005114:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800511c:	f011 010c 	ands.w	r1, r1, #12
 8005120:	d00a      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x28>
 8005122:	290c      	cmp	r1, #12
 8005124:	d006      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005126:	2904      	cmp	r1, #4
 8005128:	d047      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800512a:	2908      	cmp	r1, #8
 800512c:	d03b      	beq.n	80051a6 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800512e:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005130:	4610      	mov	r0, r2
 8005132:	e026      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005134:	2b01      	cmp	r3, #1
 8005136:	d1f6      	bne.n	8005126 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f013 0308 	ands.w	r3, r3, #8
 8005142:	d00d      	beq.n	8005160 <HAL_RCC_GetSysClockFreq+0x50>
 8005144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f013 0308 	ands.w	r3, r3, #8
 800514e:	d124      	bne.n	800519a <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005154:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005158:	4a2e      	ldr	r2, [pc, #184]	; (8005214 <HAL_RCC_GetSysClockFreq+0x104>)
 800515a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800515e:	e00e      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	f012 0f08 	tst.w	r2, #8
 800516a:	d112      	bne.n	8005192 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005174:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005178:	4a26      	ldr	r2, [pc, #152]	; (8005214 <HAL_RCC_GetSysClockFreq+0x104>)
 800517a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800517e:	b1d1      	cbz	r1, 80051b6 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005180:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d01a      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005190:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	e7ee      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x68>
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519e:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80051a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80051a4:	e7d8      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80051b0:	d106      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80051b2:	4819      	ldr	r0, [pc, #100]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051b4:	e7e5      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80051b6:	4610      	mov	r0, r2
 80051b8:	e7e3      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80051ba:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80051bc:	4817      	ldr	r0, [pc, #92]	; (800521c <HAL_RCC_GetSysClockFreq+0x10c>)
 80051be:	e7e0      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80051c0:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80051c2:	4816      	ldr	r0, [pc, #88]	; (800521c <HAL_RCC_GetSysClockFreq+0x10c>)
 80051c4:	e7dd      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d009      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0xd8>
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d108      	bne.n	80051ea <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80051e2:	d115      	bne.n	8005210 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80051e4:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e6:	e000      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80051e8:	4a0c      	ldr	r2, [pc, #48]	; (800521c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80051ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ee:	68cb      	ldr	r3, [r1, #12]
 80051f0:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80051f4:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80051f8:	68cb      	ldr	r3, [r1, #12]
 80051fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80051fe:	3301      	adds	r3, #1
 8005200:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005204:	68c8      	ldr	r0, [r1, #12]
 8005206:	0f40      	lsrs	r0, r0, #29
 8005208:	3001      	adds	r0, #1
 800520a:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800520e:	e7bf      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005210:	4a02      	ldr	r2, [pc, #8]	; (800521c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005212:	e7ea      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0xda>
 8005214:	08019988 	.word	0x08019988
 8005218:	01e84800 	.word	0x01e84800
 800521c:	00f42400 	.word	0x00f42400

08005220 <HAL_RCC_GetHCLKFreq>:
{
 8005220:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005222:	f7ff ff75 	bl	8005110 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005230:	4a02      	ldr	r2, [pc, #8]	; (800523c <HAL_RCC_GetHCLKFreq+0x1c>)
 8005232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005236:	fbb0 f0f3 	udiv	r0, r0, r3
 800523a:	bd08      	pop	{r3, pc}
 800523c:	08019928 	.word	0x08019928

08005240 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005240:	2800      	cmp	r0, #0
 8005242:	f000 8311 	beq.w	8005868 <HAL_RCC_OscConfig+0x628>
{
 8005246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005248:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800524a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524e:	689d      	ldr	r5, [r3, #8]
 8005250:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005254:	68de      	ldr	r6, [r3, #12]
 8005256:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800525a:	6803      	ldr	r3, [r0, #0]
 800525c:	f013 0f20 	tst.w	r3, #32
 8005260:	d02a      	beq.n	80052b8 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005262:	2d00      	cmp	r5, #0
 8005264:	d065      	beq.n	8005332 <HAL_RCC_OscConfig+0xf2>
 8005266:	2d0c      	cmp	r5, #12
 8005268:	d061      	beq.n	800532e <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800526a:	6a23      	ldr	r3, [r4, #32]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80bf 	beq.w	80053f0 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005276:	6813      	ldr	r3, [r2, #0]
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800527e:	f7fc fecf 	bl	8002020 <HAL_GetTick>
 8005282:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f013 0f02 	tst.w	r3, #2
 800528e:	f000 80a7 	beq.w	80053e0 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	f042 0208 	orr.w	r2, r2, #8
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80052a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80052a6:	430a      	orrs	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80052b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80052b6:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	f013 0f01 	tst.w	r3, #1
 80052be:	f000 80b5 	beq.w	800542c <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80052c2:	2d08      	cmp	r5, #8
 80052c4:	f000 80ae 	beq.w	8005424 <HAL_RCC_OscConfig+0x1e4>
 80052c8:	2d0c      	cmp	r5, #12
 80052ca:	f000 80a8 	beq.w	800541e <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80052ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80052d8:	68a1      	ldr	r1, [r4, #8]
 80052da:	430b      	orrs	r3, r1
 80052dc:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052de:	6863      	ldr	r3, [r4, #4]
 80052e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e4:	f000 80c4 	beq.w	8005470 <HAL_RCC_OscConfig+0x230>
 80052e8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80052ec:	f000 80c5 	beq.w	800547a <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80052f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005302:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005304:	6863      	ldr	r3, [r4, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80c2 	beq.w	8005490 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 800530c:	f7fc fe88 	bl	8002020 <HAL_GetTick>
 8005310:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800531c:	f040 8086 	bne.w	800542c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005320:	f7fc fe7e 	bl	8002020 <HAL_GetTick>
 8005324:	1bc0      	subs	r0, r0, r7
 8005326:	2864      	cmp	r0, #100	; 0x64
 8005328:	d9f3      	bls.n	8005312 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 800532a:	2003      	movs	r0, #3
 800532c:	e2a9      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800532e:	2e01      	cmp	r6, #1
 8005330:	d19b      	bne.n	800526a <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005332:	6a23      	ldr	r3, [r4, #32]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8299 	beq.w	800586c <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800533a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800533c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f013 0f08 	tst.w	r3, #8
 8005346:	d029      	beq.n	800539c <HAL_RCC_OscConfig+0x15c>
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005352:	4298      	cmp	r0, r3
 8005354:	d92a      	bls.n	80053ac <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005356:	f7ff feb9 	bl	80050cc <RCC_SetFlashLatencyFromMSIRange>
 800535a:	2800      	cmp	r0, #0
 800535c:	f040 8288 	bne.w	8005870 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	f042 0208 	orr.w	r2, r2, #8
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005372:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005378:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005380:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005384:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005386:	f7ff ff4b 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 800538a:	4bba      	ldr	r3, [pc, #744]	; (8005674 <HAL_RCC_OscConfig+0x434>)
 800538c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800538e:	4bba      	ldr	r3, [pc, #744]	; (8005678 <HAL_RCC_OscConfig+0x438>)
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	f7fc fe43 	bl	800201c <HAL_InitTick>
        if (status != HAL_OK)
 8005396:	2800      	cmp	r0, #0
 8005398:	d08e      	beq.n	80052b8 <HAL_RCC_OscConfig+0x78>
 800539a:	e272      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800539c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053aa:	e7d2      	b.n	8005352 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	f042 0208 	orr.w	r2, r2, #8
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80053be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80053c0:	430a      	orrs	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80053cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80053d0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80053d4:	f7ff fe7a 	bl	80050cc <RCC_SetFlashLatencyFromMSIRange>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d0d4      	beq.n	8005386 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 80053dc:	2001      	movs	r0, #1
 80053de:	e250      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053e0:	f7fc fe1e 	bl	8002020 <HAL_GetTick>
 80053e4:	1bc0      	subs	r0, r0, r7
 80053e6:	2802      	cmp	r0, #2
 80053e8:	f67f af4c 	bls.w	8005284 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80053ec:	2003      	movs	r0, #3
 80053ee:	e248      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80053f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053f4:	6813      	ldr	r3, [r2, #0]
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80053fc:	f7fc fe10 	bl	8002020 <HAL_GetTick>
 8005400:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f013 0f02 	tst.w	r3, #2
 800540c:	f43f af54 	beq.w	80052b8 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005410:	f7fc fe06 	bl	8002020 <HAL_GetTick>
 8005414:	1bc0      	subs	r0, r0, r7
 8005416:	2802      	cmp	r0, #2
 8005418:	d9f3      	bls.n	8005402 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 800541a:	2003      	movs	r0, #3
 800541c:	e231      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800541e:	2e03      	cmp	r6, #3
 8005420:	f47f af55 	bne.w	80052ce <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8224 	beq.w	8005874 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	f013 0f02 	tst.w	r3, #2
 8005432:	d056      	beq.n	80054e2 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005434:	2d04      	cmp	r5, #4
 8005436:	d03d      	beq.n	80054b4 <HAL_RCC_OscConfig+0x274>
 8005438:	2d0c      	cmp	r5, #12
 800543a:	d039      	beq.n	80054b0 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 808a 	beq.w	8005558 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005448:	6813      	ldr	r3, [r2, #0]
 800544a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005450:	f7fc fde6 	bl	8002020 <HAL_GetTick>
 8005454:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005460:	d136      	bne.n	80054d0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005462:	f7fc fddd 	bl	8002020 <HAL_GetTick>
 8005466:	1b80      	subs	r0, r0, r6
 8005468:	2802      	cmp	r0, #2
 800546a:	d9f4      	bls.n	8005456 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 800546c:	2003      	movs	r0, #3
 800546e:	e208      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005470:	6813      	ldr	r3, [r2, #0]
 8005472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	e744      	b.n	8005304 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800547a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005484:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800548c:	601a      	str	r2, [r3, #0]
}
 800548e:	e739      	b.n	8005304 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005490:	f7fc fdc6 	bl	8002020 <HAL_GetTick>
 8005494:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80054a0:	d0c4      	beq.n	800542c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a2:	f7fc fdbd 	bl	8002020 <HAL_GetTick>
 80054a6:	1bc0      	subs	r0, r0, r7
 80054a8:	2864      	cmp	r0, #100	; 0x64
 80054aa:	d9f4      	bls.n	8005496 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 80054ac:	2003      	movs	r0, #3
 80054ae:	e1e8      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054b0:	2e02      	cmp	r6, #2
 80054b2:	d1c3      	bne.n	800543c <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 81de 	beq.w	8005878 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054bc:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80054be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054c2:	6853      	ldr	r3, [r2, #4]
 80054c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80054c8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80054cc:	6053      	str	r3, [r2, #4]
}
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80054d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d6:	6853      	ldr	r3, [r2, #4]
 80054d8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80054dc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80054e0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	f013 0f08 	tst.w	r3, #8
 80054e8:	d07e      	beq.n	80055e8 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054ea:	69a3      	ldr	r3, [r4, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d062      	beq.n	80055b6 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80054f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80054f8:	69e1      	ldr	r1, [r4, #28]
 80054fa:	f003 0210 	and.w	r2, r3, #16
 80054fe:	4291      	cmp	r1, r2
 8005500:	d011      	beq.n	8005526 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005502:	f003 0203 	and.w	r2, r3, #3
 8005506:	2a02      	cmp	r2, #2
 8005508:	f000 81b8 	beq.w	800587c <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800550c:	f013 0f01 	tst.w	r3, #1
 8005510:	d138      	bne.n	8005584 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005516:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800551a:	f023 0310 	bic.w	r3, r3, #16
 800551e:	69e1      	ldr	r1, [r4, #28]
 8005520:	430b      	orrs	r3, r1
 8005522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800552a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005536:	f7fc fd73 	bl	8002020 <HAL_GetTick>
 800553a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005544:	f013 0f02 	tst.w	r3, #2
 8005548:	d14e      	bne.n	80055e8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554a:	f7fc fd69 	bl	8002020 <HAL_GetTick>
 800554e:	1b80      	subs	r0, r0, r6
 8005550:	2811      	cmp	r0, #17
 8005552:	d9f3      	bls.n	800553c <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8005554:	2003      	movs	r0, #3
 8005556:	e194      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800555c:	6813      	ldr	r3, [r2, #0]
 800555e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005562:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005564:	f7fc fd5c 	bl	8002020 <HAL_GetTick>
 8005568:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005574:	d0b5      	beq.n	80054e2 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005576:	f7fc fd53 	bl	8002020 <HAL_GetTick>
 800557a:	1b80      	subs	r0, r0, r6
 800557c:	2802      	cmp	r0, #2
 800557e:	d9f4      	bls.n	800556a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005580:	2003      	movs	r0, #3
 8005582:	e17e      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005588:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005594:	f7fc fd44 	bl	8002020 <HAL_GetTick>
 8005598:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800559a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a2:	f013 0f02 	tst.w	r3, #2
 80055a6:	d0b4      	beq.n	8005512 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a8:	f7fc fd3a 	bl	8002020 <HAL_GetTick>
 80055ac:	1b80      	subs	r0, r0, r6
 80055ae:	2811      	cmp	r0, #17
 80055b0:	d9f3      	bls.n	800559a <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80055b2:	2003      	movs	r0, #3
 80055b4:	e165      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80055b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ba:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80055c6:	f7fc fd2b 	bl	8002020 <HAL_GetTick>
 80055ca:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80055cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d4:	f013 0f02 	tst.w	r3, #2
 80055d8:	d006      	beq.n	80055e8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055da:	f7fc fd21 	bl	8002020 <HAL_GetTick>
 80055de:	1b80      	subs	r0, r0, r6
 80055e0:	2811      	cmp	r0, #17
 80055e2:	d9f3      	bls.n	80055cc <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80055e4:	2003      	movs	r0, #3
 80055e6:	e14c      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	f013 0f04 	tst.w	r3, #4
 80055ee:	f000 80b8 	beq.w	8005762 <HAL_RCC_OscConfig+0x522>
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80055f2:	4b22      	ldr	r3, [pc, #136]	; (800567c <HAL_RCC_OscConfig+0x43c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80055fa:	d110      	bne.n	800561e <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 80055fc:	f7ff fcf8 	bl	8004ff0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005600:	f7fc fd0e 	bl	8002020 <HAL_GetTick>
 8005604:	4606      	mov	r6, r0
 8005606:	4b1d      	ldr	r3, [pc, #116]	; (800567c <HAL_RCC_OscConfig+0x43c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800560e:	d106      	bne.n	800561e <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005610:	f7fc fd06 	bl	8002020 <HAL_GetTick>
 8005614:	1b80      	subs	r0, r0, r6
 8005616:	2802      	cmp	r0, #2
 8005618:	d9f5      	bls.n	8005606 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 800561a:	2003      	movs	r0, #3
 800561c:	e131      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d068      	beq.n	80056f6 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005624:	2b85      	cmp	r3, #133	; 0x85
 8005626:	d001      	beq.n	800562c <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005628:	2b05      	cmp	r3, #5
 800562a:	d107      	bne.n	800563c <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800562c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005630:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005634:	f043 0304 	orr.w	r3, r3, #4
 8005638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800563c:	f7fc fcf0 	bl	8002020 <HAL_GetTick>
 8005640:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005646:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565a:	f013 0f02 	tst.w	r3, #2
 800565e:	d10f      	bne.n	8005680 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005660:	f7fc fcde 	bl	8002020 <HAL_GetTick>
 8005664:	1b80      	subs	r0, r0, r6
 8005666:	f241 3388 	movw	r3, #5000	; 0x1388
 800566a:	4298      	cmp	r0, r3
 800566c:	d9f1      	bls.n	8005652 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 800566e:	2003      	movs	r0, #3
 8005670:	e107      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
 8005672:	bf00      	nop
 8005674:	20000098 	.word	0x20000098
 8005678:	2000009c 	.word	0x2000009c
 800567c:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005680:	68e3      	ldr	r3, [r4, #12]
 8005682:	2b81      	cmp	r3, #129	; 0x81
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005686:	2b85      	cmp	r3, #133	; 0x85
 8005688:	d11a      	bne.n	80056c0 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800568a:	f7fc fcc9 	bl	8002020 <HAL_GetTick>
 800568e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005694:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80056ac:	d159      	bne.n	8005762 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ae:	f7fc fcb7 	bl	8002020 <HAL_GetTick>
 80056b2:	1b80      	subs	r0, r0, r6
 80056b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80056b8:	4298      	cmp	r0, r3
 80056ba:	d9f1      	bls.n	80056a0 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80056bc:	2003      	movs	r0, #3
 80056be:	e0e0      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 80056c0:	f7fc fcae 	bl	8002020 <HAL_GetTick>
 80056c4:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80056d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80056e2:	d03e      	beq.n	8005762 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e4:	f7fc fc9c 	bl	8002020 <HAL_GetTick>
 80056e8:	1b80      	subs	r0, r0, r6
 80056ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80056ee:	4298      	cmp	r0, r3
 80056f0:	d9f1      	bls.n	80056d6 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80056f2:	2003      	movs	r0, #3
 80056f4:	e0c5      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80056f6:	f7fc fc93 	bl	8002020 <HAL_GetTick>
 80056fa:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005700:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005718:	d008      	beq.n	800572c <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fc fc81 	bl	8002020 <HAL_GetTick>
 800571e:	1b80      	subs	r0, r0, r6
 8005720:	f241 3388 	movw	r3, #5000	; 0x1388
 8005724:	4298      	cmp	r0, r3
 8005726:	d9f1      	bls.n	800570c <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8005728:	2003      	movs	r0, #3
 800572a:	e0aa      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 800572c:	f7fc fc78 	bl	8002020 <HAL_GetTick>
 8005730:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005736:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574a:	f013 0f02 	tst.w	r3, #2
 800574e:	d008      	beq.n	8005762 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fc fc66 	bl	8002020 <HAL_GetTick>
 8005754:	1b80      	subs	r0, r0, r6
 8005756:	f241 3388 	movw	r3, #5000	; 0x1388
 800575a:	4298      	cmp	r0, r3
 800575c:	d9f1      	bls.n	8005742 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 800575e:	2003      	movs	r0, #3
 8005760:	e08f      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005762:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 808b 	beq.w	8005880 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800576a:	2d0c      	cmp	r5, #12
 800576c:	d060      	beq.n	8005830 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800576e:	2b02      	cmp	r3, #2
 8005770:	d016      	beq.n	80057a0 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800577c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800577e:	f7fc fc4f 	bl	8002020 <HAL_GetTick>
 8005782:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800578e:	d148      	bne.n	8005822 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005794:	68d1      	ldr	r1, [r2, #12]
 8005796:	4b41      	ldr	r3, [pc, #260]	; (800589c <HAL_RCC_OscConfig+0x65c>)
 8005798:	400b      	ands	r3, r1
 800579a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800579c:	2000      	movs	r0, #0
 800579e:	e070      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80057a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057a4:	6813      	ldr	r3, [r2, #0]
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80057ac:	f7fc fc38 	bl	8002020 <HAL_GetTick>
 80057b0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80057bc:	d12a      	bne.n	8005814 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c2:	68d3      	ldr	r3, [r2, #12]
 80057c4:	4936      	ldr	r1, [pc, #216]	; (80058a0 <HAL_RCC_OscConfig+0x660>)
 80057c6:	4019      	ands	r1, r3
 80057c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80057cc:	4303      	orrs	r3, r0
 80057ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80057d0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80057d4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80057d6:	4303      	orrs	r3, r0
 80057d8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80057da:	4303      	orrs	r3, r0
 80057dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80057de:	4303      	orrs	r3, r0
 80057e0:	4319      	orrs	r1, r3
 80057e2:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80057e4:	6813      	ldr	r3, [r2, #0]
 80057e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ea:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057ec:	68d3      	ldr	r3, [r2, #12]
 80057ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80057f4:	f7fc fc14 	bl	8002020 <HAL_GetTick>
 80057f8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80057fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005804:	d13e      	bne.n	8005884 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005806:	f7fc fc0b 	bl	8002020 <HAL_GetTick>
 800580a:	1b00      	subs	r0, r0, r4
 800580c:	280a      	cmp	r0, #10
 800580e:	d9f4      	bls.n	80057fa <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8005810:	2003      	movs	r0, #3
 8005812:	e036      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005814:	f7fc fc04 	bl	8002020 <HAL_GetTick>
 8005818:	1b40      	subs	r0, r0, r5
 800581a:	280a      	cmp	r0, #10
 800581c:	d9c9      	bls.n	80057b2 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800581e:	2003      	movs	r0, #3
 8005820:	e02f      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005822:	f7fc fbfd 	bl	8002020 <HAL_GetTick>
 8005826:	1b00      	subs	r0, r0, r4
 8005828:	280a      	cmp	r0, #10
 800582a:	d9ab      	bls.n	8005784 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 800582c:	2003      	movs	r0, #3
 800582e:	e028      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005830:	2b01      	cmp	r3, #1
 8005832:	d029      	beq.n	8005888 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8005834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005838:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800583a:	f003 0103 	and.w	r1, r3, #3
 800583e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005840:	4291      	cmp	r1, r2
 8005842:	d123      	bne.n	800588c <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005844:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584a:	428a      	cmp	r2, r1
 800584c:	d120      	bne.n	8005890 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800584e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005852:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005854:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005858:	d11c      	bne.n	8005894 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800585a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800585e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005860:	4293      	cmp	r3, r2
 8005862:	d119      	bne.n	8005898 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8005864:	2000      	movs	r0, #0
 8005866:	e00c      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8005868:	2001      	movs	r0, #1
}
 800586a:	4770      	bx	lr
        return HAL_ERROR;
 800586c:	2001      	movs	r0, #1
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8005870:	2001      	movs	r0, #1
 8005872:	e006      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005874:	2001      	movs	r0, #1
 8005876:	e004      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005878:	2001      	movs	r0, #1
 800587a:	e002      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800587c:	2001      	movs	r0, #1
 800587e:	e000      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8005880:	2000      	movs	r0, #0
}
 8005882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005884:	2000      	movs	r0, #0
 8005886:	e7fc      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005888:	2001      	movs	r0, #1
 800588a:	e7fa      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800588c:	2001      	movs	r0, #1
 800588e:	e7f8      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
 8005890:	2001      	movs	r0, #1
 8005892:	e7f6      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
 8005894:	2001      	movs	r0, #1
 8005896:	e7f4      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
 8005898:	2001      	movs	r0, #1
 800589a:	e7f2      	b.n	8005882 <HAL_RCC_OscConfig+0x642>
 800589c:	eefefffc 	.word	0xeefefffc
 80058a0:	11c1808c 	.word	0x11c1808c

080058a4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80058a4:	2800      	cmp	r0, #0
 80058a6:	f000 8127 	beq.w	8005af8 <HAL_RCC_ClockConfig+0x254>
{
 80058aa:	b570      	push	{r4, r5, r6, lr}
 80058ac:	460c      	mov	r4, r1
 80058ae:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058b0:	4b93      	ldr	r3, [pc, #588]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	428b      	cmp	r3, r1
 80058ba:	d32d      	bcc.n	8005918 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	f013 0f02 	tst.w	r3, #2
 80058c2:	d13f      	bne.n	8005944 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	f013 0f20 	tst.w	r3, #32
 80058ca:	d153      	bne.n	8005974 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80058d2:	d16a      	bne.n	80059aa <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	f013 0f04 	tst.w	r3, #4
 80058da:	f040 8083 	bne.w	80059e4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058de:	682b      	ldr	r3, [r5, #0]
 80058e0:	f013 0f08 	tst.w	r3, #8
 80058e4:	f040 8097 	bne.w	8005a16 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	f013 0f01 	tst.w	r3, #1
 80058ee:	f000 80de 	beq.w	8005aae <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f2:	686b      	ldr	r3, [r5, #4]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	f000 80a8 	beq.w	8005a4a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	f000 80ad 	beq.w	8005a5a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005900:	2b00      	cmp	r3, #0
 8005902:	f040 80b2 	bne.w	8005a6a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	f012 0f02 	tst.w	r2, #2
 8005910:	f040 80b1 	bne.w	8005a76 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005914:	2001      	movs	r0, #1
 8005916:	e0ee      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005918:	4a79      	ldr	r2, [pc, #484]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 800591a:	6813      	ldr	r3, [r2, #0]
 800591c:	f023 0307 	bic.w	r3, r3, #7
 8005920:	430b      	orrs	r3, r1
 8005922:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005924:	f7fc fb7c 	bl	8002020 <HAL_GetTick>
 8005928:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800592a:	4b75      	ldr	r3, [pc, #468]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	42a3      	cmp	r3, r4
 8005934:	d0c2      	beq.n	80058bc <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005936:	f7fc fb73 	bl	8002020 <HAL_GetTick>
 800593a:	1b80      	subs	r0, r0, r6
 800593c:	2802      	cmp	r0, #2
 800593e:	d9f4      	bls.n	800592a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005940:	2003      	movs	r0, #3
 8005942:	e0d8      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005944:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800594a:	688a      	ldr	r2, [r1, #8]
 800594c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005950:	4313      	orrs	r3, r2
 8005952:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005954:	f7fc fb64 	bl	8002020 <HAL_GetTick>
 8005958:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005964:	d1ae      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005966:	f7fc fb5b 	bl	8002020 <HAL_GetTick>
 800596a:	1b80      	subs	r0, r0, r6
 800596c:	2802      	cmp	r0, #2
 800596e:	d9f4      	bls.n	800595a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005970:	2003      	movs	r0, #3
 8005972:	e0c0      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005974:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800597a:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800597e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005988:	f7fc fb4a 	bl	8002020 <HAL_GetTick>
 800598c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005992:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005996:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800599a:	d197      	bne.n	80058cc <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800599c:	f7fc fb40 	bl	8002020 <HAL_GetTick>
 80059a0:	1b80      	subs	r0, r0, r6
 80059a2:	2802      	cmp	r0, #2
 80059a4:	d9f3      	bls.n	800598e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80059a6:	2003      	movs	r0, #3
 80059a8:	e0a5      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80059aa:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80059ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059b0:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80059b4:	f023 030f 	bic.w	r3, r3, #15
 80059b8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80059bc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80059c0:	f7fc fb2e 	bl	8002020 <HAL_GetTick>
 80059c4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80059c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80059d2:	f47f af7f 	bne.w	80058d4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059d6:	f7fc fb23 	bl	8002020 <HAL_GetTick>
 80059da:	1b80      	subs	r0, r0, r6
 80059dc:	2802      	cmp	r0, #2
 80059de:	d9f2      	bls.n	80059c6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80059e0:	2003      	movs	r0, #3
 80059e2:	e088      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80059e4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80059e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059ea:	688a      	ldr	r2, [r1, #8]
 80059ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059f0:	4313      	orrs	r3, r2
 80059f2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80059f4:	f7fc fb14 	bl	8002020 <HAL_GetTick>
 80059f8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80059fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a04:	f47f af6b 	bne.w	80058de <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a08:	f7fc fb0a 	bl	8002020 <HAL_GetTick>
 8005a0c:	1b80      	subs	r0, r0, r6
 8005a0e:	2802      	cmp	r0, #2
 8005a10:	d9f3      	bls.n	80059fa <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8005a12:	2003      	movs	r0, #3
 8005a14:	e06f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005a16:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1c:	6893      	ldr	r3, [r2, #8]
 8005a1e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005a22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005a26:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005a28:	f7fc fafa 	bl	8002020 <HAL_GetTick>
 8005a2c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005a38:	f47f af56 	bne.w	80058e8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a3c:	f7fc faf0 	bl	8002020 <HAL_GetTick>
 8005a40:	1b80      	subs	r0, r0, r6
 8005a42:	2802      	cmp	r0, #2
 8005a44:	d9f3      	bls.n	8005a2e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8005a46:	2003      	movs	r0, #3
 8005a48:	e055      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005a54:	d10f      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005a56:	2001      	movs	r0, #1
 8005a58:	e04d      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005a64:	d107      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005a66:	2001      	movs	r0, #1
 8005a68:	e045      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005a74:	d042      	beq.n	8005afc <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a7a:	688a      	ldr	r2, [r1, #8]
 8005a7c:	f022 0203 	bic.w	r2, r2, #3
 8005a80:	4313      	orrs	r3, r2
 8005a82:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005a84:	f7fc facc 	bl	8002020 <HAL_GetTick>
 8005a88:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a94:	686a      	ldr	r2, [r5, #4]
 8005a96:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005a9a:	d008      	beq.n	8005aae <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a9c:	f7fc fac0 	bl	8002020 <HAL_GetTick>
 8005aa0:	1b80      	subs	r0, r0, r6
 8005aa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8005aa6:	4298      	cmp	r0, r3
 8005aa8:	d9ef      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8005aaa:	2003      	movs	r0, #3
 8005aac:	e023      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	d915      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4a11      	ldr	r2, [pc, #68]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 8005abc:	6813      	ldr	r3, [r2, #0]
 8005abe:	f023 0307 	bic.w	r3, r3, #7
 8005ac2:	4323      	orrs	r3, r4
 8005ac4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005ac6:	f7fc faab 	bl	8002020 <HAL_GetTick>
 8005aca:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005acc:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d006      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ad8:	f7fc faa2 	bl	8002020 <HAL_GetTick>
 8005adc:	1b40      	subs	r0, r0, r5
 8005ade:	2802      	cmp	r0, #2
 8005ae0:	d9f4      	bls.n	8005acc <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8005ae2:	2003      	movs	r0, #3
 8005ae4:	e007      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ae6:	f7ff fb9b 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 8005aec:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_RCC_ClockConfig+0x264>)
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	f7fc fa93 	bl	800201c <HAL_InitTick>
}
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005af8:	2001      	movs	r0, #1
}
 8005afa:	4770      	bx	lr
        return HAL_ERROR;
 8005afc:	2001      	movs	r0, #1
 8005afe:	e7fa      	b.n	8005af6 <HAL_RCC_ClockConfig+0x252>
 8005b00:	58004000 	.word	0x58004000
 8005b04:	20000098 	.word	0x20000098
 8005b08:	2000009c 	.word	0x2000009c

08005b0c <HAL_RCC_GetPCLK1Freq>:
{
 8005b0c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005b0e:	f7ff fb87 	bl	8005220 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005b1c:	4a02      	ldr	r2, [pc, #8]	; (8005b28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005b22:	40d8      	lsrs	r0, r3
 8005b24:	bd08      	pop	{r3, pc}
 8005b26:	bf00      	nop
 8005b28:	08019968 	.word	0x08019968

08005b2c <HAL_RCC_GetPCLK2Freq>:
{
 8005b2c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005b2e:	f7ff fb77 	bl	8005220 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005b3c:	4a02      	ldr	r2, [pc, #8]	; (8005b48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005b42:	40d8      	lsrs	r0, r3
 8005b44:	bd08      	pop	{r3, pc}
 8005b46:	bf00      	nop
 8005b48:	08019968 	.word	0x08019968

08005b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b50:	6803      	ldr	r3, [r0, #0]
 8005b52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005b56:	f040 80ab 	bne.w	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b5a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	f013 0f01 	tst.w	r3, #1
 8005b62:	d00a      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b64:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b6a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005b6e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005b72:	b292      	uxth	r2, r2
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	f013 0f02 	tst.w	r3, #2
 8005b80:	d00a      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b82:	68a2      	ldr	r2, [r4, #8]
 8005b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b88:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005b8c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005b90:	b292      	uxth	r2, r2
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	f013 0f20 	tst.w	r3, #32
 8005b9e:	d009      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ba0:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ba6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005baa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005bba:	d00c      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bbc:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005bc6:	0c02      	lsrs	r2, r0, #16
 8005bc8:	0412      	lsls	r2, r2, #16
 8005bca:	ea23 0302 	bic.w	r3, r3, r2
 8005bce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005bdc:	d00c      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005be0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005be4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005be8:	0c02      	lsrs	r2, r0, #16
 8005bea:	0412      	lsls	r2, r2, #16
 8005bec:	ea23 0302 	bic.w	r3, r3, r2
 8005bf0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005bfe:	d00c      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005c00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005c0a:	0c02      	lsrs	r2, r0, #16
 8005c0c:	0412      	lsls	r2, r2, #16
 8005c0e:	ea23 0302 	bic.w	r3, r3, r2
 8005c12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c20:	f040 809e 	bne.w	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c2a:	f040 80aa 	bne.w	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005c34:	f040 80b6 	bne.w	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	f013 0f10 	tst.w	r3, #16
 8005c3e:	d00e      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005c40:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c46:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005c4a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005c54:	68e3      	ldr	r3, [r4, #12]
 8005c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c5a:	f000 80b4 	beq.w	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005c64:	d00f      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005c70:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c7c:	b91b      	cbnz	r3, 8005c86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005c7e:	68cb      	ldr	r3, [r1, #12]
 8005c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c84:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005c8c:	d00e      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c94:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005c98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005ca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca8:	f000 8092 	beq.w	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8005cac:	4628      	mov	r0, r5
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8005cb0:	f7ff f99e 	bl	8004ff0 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8005cb4:	f7fc f9b4 	bl	8002020 <HAL_GetTick>
 8005cb8:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005cba:	4b48      	ldr	r3, [pc, #288]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005cc2:	d106      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc4:	f7fc f9ac 	bl	8002020 <HAL_GetTick>
 8005cc8:	1b40      	subs	r0, r0, r5
 8005cca:	2802      	cmp	r0, #2
 8005ccc:	d9f5      	bls.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8005cce:	2503      	movs	r5, #3
 8005cd0:	e000      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005cd2:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8005cd4:	2d00      	cmp	r5, #0
 8005cd6:	f47f af41 	bne.w	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005ce6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d024      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005cf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005cf8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005cfc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005d00:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d04:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005d08:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005d0c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005d14:	f012 0f02 	tst.w	r2, #2
 8005d18:	d10f      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8005d1a:	2d00      	cmp	r5, #0
 8005d1c:	f47f af1e 	bne.w	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d20:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d26:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005d2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005d34:	e712      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8005d36:	2200      	movs	r2, #0
 8005d38:	e7ec      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8005d3a:	f7fc f971 	bl	8002020 <HAL_GetTick>
 8005d3e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	f013 0f02 	tst.w	r3, #2
 8005d4c:	d1e5      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4e:	f7fc f967 	bl	8002020 <HAL_GetTick>
 8005d52:	1b80      	subs	r0, r0, r6
 8005d54:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d58:	4298      	cmp	r0, r3
 8005d5a:	d9f1      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8005d5c:	2503      	movs	r5, #3
 8005d5e:	e7dc      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d60:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005d62:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005d66:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005d6a:	0919      	lsrs	r1, r3, #4
 8005d6c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005d70:	ea22 0201 	bic.w	r2, r2, r1
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005d80:	e750      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d82:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005d84:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005d88:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005d8c:	0919      	lsrs	r1, r3, #4
 8005d8e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005d92:	ea22 0201 	bic.w	r2, r2, r1
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005da2:	e744      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005da4:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005da6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005daa:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005dae:	0919      	lsrs	r1, r3, #4
 8005db0:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005db4:	ea22 0201 	bic.w	r2, r2, r1
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005dc4:	e738      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005dc6:	68cb      	ldr	r3, [r1, #12]
 8005dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dcc:	60cb      	str	r3, [r1, #12]
 8005dce:	e746      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dd0:	68cb      	ldr	r3, [r1, #12]
 8005dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd6:	60cb      	str	r3, [r1, #12]
 8005dd8:	e768      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005dda:	bf00      	nop
 8005ddc:	58000400 	.word	0x58000400

08005de0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005de0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005de2:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8005de6:	2a01      	cmp	r2, #1
 8005de8:	d035      	beq.n	8005e56 <HAL_RTC_DeactivateAlarm+0x76>
 8005dea:	2201      	movs	r2, #1
 8005dec:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005df0:	2202      	movs	r2, #2
 8005df2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005df6:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <HAL_RTC_DeactivateAlarm+0x7c>)
 8005df8:	20ca      	movs	r0, #202	; 0xca
 8005dfa:	6250      	str	r0, [r2, #36]	; 0x24
 8005dfc:	2053      	movs	r0, #83	; 0x53
 8005dfe:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8005e00:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005e04:	d018      	beq.n	8005e38 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005e06:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <HAL_RTC_DeactivateAlarm+0x7c>)
 8005e08:	6991      	ldr	r1, [r2, #24]
 8005e0a:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8005e0e:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005e10:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8005e12:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e16:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005e18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e1a:	f021 0102 	bic.w	r1, r1, #2
 8005e1e:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005e20:	2102      	movs	r1, #2
 8005e22:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <HAL_RTC_DeactivateAlarm+0x7c>)
 8005e26:	21ff      	movs	r1, #255	; 0xff
 8005e28:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e30:	2000      	movs	r0, #0
 8005e32:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e36:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005e38:	6991      	ldr	r1, [r2, #24]
 8005e3a:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8005e3e:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005e40:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005e42:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e46:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005e48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e4a:	f021 0101 	bic.w	r1, r1, #1
 8005e4e:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005e50:	2101      	movs	r1, #1
 8005e52:	65d1      	str	r1, [r2, #92]	; 0x5c
 8005e54:	e7e6      	b.n	8005e24 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8005e56:	2002      	movs	r0, #2
}
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40002800 	.word	0x40002800

08005e60 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005e64:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005e66:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8005e68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005e6a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005e6c:	f015 0f01 	tst.w	r5, #1
 8005e70:	d106      	bne.n	8005e80 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005e72:	f015 0f02 	tst.w	r5, #2
 8005e76:	d109      	bne.n	8005e8c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005e86:	f7fc fad1 	bl	800242c <HAL_RTC_AlarmAEventCallback>
 8005e8a:	e7f2      	b.n	8005e72 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005e8c:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005e8e:	2202      	movs	r2, #2
 8005e90:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 f9ec 	bl	8006270 <HAL_RTCEx_AlarmBEventCallback>
 8005e98:	e7ee      	b.n	8005e78 <HAL_RTC_AlarmIRQHandler+0x18>
 8005e9a:	bf00      	nop
 8005e9c:	40002800 	.word	0x40002800

08005ea0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ea0:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005ea2:	4a0b      	ldr	r2, [pc, #44]	; (8005ed0 <HAL_RTC_WaitForSynchro+0x30>)
 8005ea4:	68d3      	ldr	r3, [r2, #12]
 8005ea6:	f023 0320 	bic.w	r3, r3, #32
 8005eaa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005eac:	f7fc f8b8 	bl	8002020 <HAL_GetTick>
 8005eb0:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005eb2:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <HAL_RTC_WaitForSynchro+0x30>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f013 0f20 	tst.w	r3, #32
 8005eba:	d107      	bne.n	8005ecc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ebc:	f7fc f8b0 	bl	8002020 <HAL_GetTick>
 8005ec0:	1b00      	subs	r0, r0, r4
 8005ec2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005ec6:	d9f4      	bls.n	8005eb2 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8005ec8:	2003      	movs	r0, #3
 8005eca:	e000      	b.n	8005ece <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005ecc:	2000      	movs	r0, #0
}
 8005ece:	bd10      	pop	{r4, pc}
 8005ed0:	40002800 	.word	0x40002800

08005ed4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ed4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005ed6:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <RTC_EnterInitMode+0x48>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ede:	d002      	beq.n	8005ee6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8005ee0:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005ee8:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <RTC_EnterInitMode+0x48>)
 8005eea:	68d3      	ldr	r3, [r2, #12]
 8005eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8005ef2:	f7fc f895 	bl	8002020 <HAL_GetTick>
 8005ef6:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005ef8:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005efa:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <RTC_EnterInitMode+0x48>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f02:	d1ee      	bne.n	8005ee2 <RTC_EnterInitMode+0xe>
 8005f04:	2c03      	cmp	r4, #3
 8005f06:	d0ec      	beq.n	8005ee2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005f08:	f7fc f88a 	bl	8002020 <HAL_GetTick>
 8005f0c:	1b43      	subs	r3, r0, r5
 8005f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f12:	d9f2      	bls.n	8005efa <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f14:	2403      	movs	r4, #3
 8005f16:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8005f1a:	e7ee      	b.n	8005efa <RTC_EnterInitMode+0x26>
 8005f1c:	40002800 	.word	0x40002800

08005f20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f20:	b510      	push	{r4, lr}
 8005f22:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005f24:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <RTC_ExitInitMode+0x48>)
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f2c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f013 0f20 	tst.w	r3, #32
 8005f34:	d106      	bne.n	8005f44 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f36:	f7ff ffb3 	bl	8005ea0 <HAL_RTC_WaitForSynchro>
 8005f3a:	b198      	cbz	r0, 8005f64 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f3c:	2003      	movs	r0, #3
 8005f3e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005f42:	e00f      	b.n	8005f64 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f44:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <RTC_ExitInitMode+0x48>)
 8005f46:	6993      	ldr	r3, [r2, #24]
 8005f48:	f023 0320 	bic.w	r3, r3, #32
 8005f4c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f4e:	f7ff ffa7 	bl	8005ea0 <HAL_RTC_WaitForSynchro>
 8005f52:	b110      	cbz	r0, 8005f5a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f54:	2003      	movs	r0, #3
 8005f56:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f5a:	4a03      	ldr	r2, [pc, #12]	; (8005f68 <RTC_ExitInitMode+0x48>)
 8005f5c:	6993      	ldr	r3, [r2, #24]
 8005f5e:	f043 0320 	orr.w	r3, r3, #32
 8005f62:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8005f64:	bd10      	pop	{r4, pc}
 8005f66:	bf00      	nop
 8005f68:	40002800 	.word	0x40002800

08005f6c <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d052      	beq.n	8006016 <HAL_RTC_Init+0xaa>
{
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f74:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005f78:	b163      	cbz	r3, 8005f94 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005f80:	4b26      	ldr	r3, [pc, #152]	; (800601c <HAL_RTC_Init+0xb0>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f013 0f10 	tst.w	r3, #16
 8005f88:	d009      	beq.n	8005f9e <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8005f8a:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8005f94:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8005f98:	f7fb fdca 	bl	8001b30 <HAL_RTC_MspInit>
 8005f9c:	e7ed      	b.n	8005f7a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f9e:	4b1f      	ldr	r3, [pc, #124]	; (800601c <HAL_RTC_Init+0xb0>)
 8005fa0:	22ca      	movs	r2, #202	; 0xca
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8005fa4:	2253      	movs	r2, #83	; 0x53
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7ff ff93 	bl	8005ed4 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8005fae:	b128      	cbz	r0, 8005fbc <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb0:	4b1a      	ldr	r3, [pc, #104]	; (800601c <HAL_RTC_Init+0xb0>)
 8005fb2:	22ff      	movs	r2, #255	; 0xff
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d1eb      	bne.n	8005f92 <HAL_RTC_Init+0x26>
 8005fba:	e7e7      	b.n	8005f8c <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005fbc:	4b17      	ldr	r3, [pc, #92]	; (800601c <HAL_RTC_Init+0xb0>)
 8005fbe:	699a      	ldr	r2, [r3, #24]
 8005fc0:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8005fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc8:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005fca:	6999      	ldr	r1, [r3, #24]
 8005fcc:	6862      	ldr	r2, [r4, #4]
 8005fce:	6920      	ldr	r0, [r4, #16]
 8005fd0:	4302      	orrs	r2, r0
 8005fd2:	69a0      	ldr	r0, [r4, #24]
 8005fd4:	4302      	orrs	r2, r0
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005fda:	68e2      	ldr	r2, [r4, #12]
 8005fdc:	68a1      	ldr	r1, [r4, #8]
 8005fde:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005fe2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005fea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005fec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005fee:	4301      	orrs	r1, r0
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f7ff ff93 	bl	8005f20 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d1d8      	bne.n	8005fb0 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 8005ffe:	4907      	ldr	r1, [pc, #28]	; (800601c <HAL_RTC_Init+0xb0>)
 8006000:	698b      	ldr	r3, [r1, #24]
 8006002:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006006:	6a22      	ldr	r2, [r4, #32]
 8006008:	69e5      	ldr	r5, [r4, #28]
 800600a:	432a      	orrs	r2, r5
 800600c:	6965      	ldr	r5, [r4, #20]
 800600e:	432a      	orrs	r2, r5
 8006010:	4313      	orrs	r3, r2
 8006012:	618b      	str	r3, [r1, #24]
 8006014:	e7cc      	b.n	8005fb0 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006016:	2001      	movs	r0, #1
}
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40002800 	.word	0x40002800

08006020 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006020:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006022:	e002      	b.n	800602a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006024:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006026:	380a      	subs	r0, #10
 8006028:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800602a:	2809      	cmp	r0, #9
 800602c:	d8fa      	bhi.n	8006024 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	b2db      	uxtb	r3, r3
}
 8006032:	4318      	orrs	r0, r3
 8006034:	4770      	bx	lr
	...

08006038 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006038:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800603c:	2b01      	cmp	r3, #1
 800603e:	f000 80b0 	beq.w	80061a2 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006046:	4605      	mov	r5, r0
 8006048:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800604a:	2301      	movs	r3, #1
 800604c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006050:	2302      	movs	r3, #2
 8006052:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006056:	4b54      	ldr	r3, [pc, #336]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006058:	68de      	ldr	r6, [r3, #12]
 800605a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800605e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006062:	d043      	beq.n	80060ec <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006064:	bb12      	cbnz	r2, 80060ac <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f013 0f40 	tst.w	r3, #64	; 0x40
 800606c:	d101      	bne.n	8006072 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800606e:	2300      	movs	r3, #0
 8006070:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006072:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006076:	7820      	ldrb	r0, [r4, #0]
 8006078:	f7ff ffd2 	bl	8006020 <RTC_ByteToBcd2>
 800607c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800607e:	7860      	ldrb	r0, [r4, #1]
 8006080:	f7ff ffce 	bl	8006020 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006084:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006088:	78a0      	ldrb	r0, [r4, #2]
 800608a:	f7ff ffc9 	bl	8006020 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800608e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006090:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006092:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006096:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800609a:	f7ff ffc1 	bl	8006020 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800609e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80060a2:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80060a4:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060a6:	ea48 0000 	orr.w	r0, r8, r0
 80060aa:	e020      	b.n	80060ee <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80060ac:	6948      	ldr	r0, [r1, #20]
 80060ae:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80060b2:	d009      	beq.n	80060c8 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80060b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80060b8:	d006      	beq.n	80060c8 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80060ba:	4b3b      	ldr	r3, [pc, #236]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060c2:	d101      	bne.n	80060c8 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060c8:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80060ca:	7863      	ldrb	r3, [r4, #1]
 80060cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80060d2:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80060d4:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80060d6:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80060d8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80060dc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80060e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80060e4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80060e6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060e8:	4318      	orrs	r0, r3
 80060ea:	e000      	b.n	80060ee <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80060ec:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ee:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 80060f0:	22ca      	movs	r2, #202	; 0xca
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24
 80060f4:	2253      	movs	r2, #83	; 0x53
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80060f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80060fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fe:	d02a      	beq.n	8006156 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006100:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006108:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800610a:	2202      	movs	r2, #2
 800610c:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800610e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006112:	d040      	beq.n	8006196 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006116:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006118:	69a2      	ldr	r2, [r4, #24]
 800611a:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800611c:	6862      	ldr	r2, [r4, #4]
 800611e:	4b22      	ldr	r3, [pc, #136]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006120:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006122:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006124:	f042 0202 	orr.w	r2, r2, #2
 8006128:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800612a:	699a      	ldr	r2, [r3, #24]
 800612c:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006130:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006132:	4a1e      	ldr	r2, [pc, #120]	; (80061ac <HAL_RTC_SetAlarm_IT+0x174>)
 8006134:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800613c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006140:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006142:	22ff      	movs	r2, #255	; 0xff
 8006144:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006146:	2301      	movs	r3, #1
 8006148:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800614c:	2000      	movs	r0, #0
 800614e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800615e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006160:	2201      	movs	r2, #1
 8006162:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006164:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006168:	d00f      	beq.n	800618a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 800616c:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800616e:	69a2      	ldr	r2, [r4, #24]
 8006170:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006172:	6862      	ldr	r2, [r4, #4]
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006176:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006178:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8006186:	619a      	str	r2, [r3, #24]
 8006188:	e7d3      	b.n	8006132 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800618a:	69a3      	ldr	r3, [r4, #24]
 800618c:	69e2      	ldr	r2, [r4, #28]
 800618e:	4313      	orrs	r3, r2
 8006190:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006192:	6453      	str	r3, [r2, #68]	; 0x44
 8006194:	e7ed      	b.n	8006172 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006196:	69a3      	ldr	r3, [r4, #24]
 8006198:	69e2      	ldr	r2, [r4, #28]
 800619a:	4313      	orrs	r3, r2
 800619c:	4a02      	ldr	r2, [pc, #8]	; (80061a8 <HAL_RTC_SetAlarm_IT+0x170>)
 800619e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061a0:	e7bc      	b.n	800611c <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80061a2:	2002      	movs	r0, #2
}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40002800 	.word	0x40002800
 80061ac:	58000800 	.word	0x58000800

080061b0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061b0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d017      	beq.n	80061e8 <HAL_RTCEx_EnableBypassShadow+0x38>
 80061b8:	2101      	movs	r1, #1
 80061ba:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061be:	2302      	movs	r3, #2
 80061c0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80061c6:	22ca      	movs	r2, #202	; 0xca
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24
 80061ca:	2253      	movs	r2, #83	; 0x53
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	f042 0220 	orr.w	r2, r2, #32
 80061d4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061d6:	22ff      	movs	r2, #255	; 0xff
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061da:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061de:	2300      	movs	r3, #0
 80061e0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80061e4:	4618      	mov	r0, r3
 80061e6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80061e8:	2002      	movs	r0, #2
}
 80061ea:	4770      	bx	lr
 80061ec:	40002800 	.word	0x40002800

080061f0 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061f0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d020      	beq.n	800623a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80061f8:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80061fa:	2101      	movs	r1, #1
 80061fc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006200:	2302      	movs	r3, #2
 8006202:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006206:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8006208:	22ca      	movs	r2, #202	; 0xca
 800620a:	625a      	str	r2, [r3, #36]	; 0x24
 800620c:	2253      	movs	r2, #83	; 0x53
 800620e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006216:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006218:	4c0a      	ldr	r4, [pc, #40]	; (8006244 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800621a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800621e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006222:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006226:	22ff      	movs	r2, #255	; 0xff
 8006228:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800622a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800622e:	2300      	movs	r3, #0
 8006230:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006234:	4618      	mov	r0, r3
}
 8006236:	bc10      	pop	{r4}
 8006238:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800623a:	2002      	movs	r0, #2
}
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40002800 	.word	0x40002800
 8006244:	58000800 	.word	0x58000800

08006248 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006248:	b510      	push	{r4, lr}
 800624a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800624c:	4b07      	ldr	r3, [pc, #28]	; (800626c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006254:	d103      	bne.n	800625e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006256:	2301      	movs	r3, #1
 8006258:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800625c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800625e:	4b03      	ldr	r3, [pc, #12]	; (800626c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006260:	2240      	movs	r2, #64	; 0x40
 8006262:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006264:	f7fc f8e6 	bl	8002434 <HAL_RTCEx_SSRUEventCallback>
 8006268:	e7f5      	b.n	8006256 <HAL_RTCEx_SSRUIRQHandler+0xe>
 800626a:	bf00      	nop
 800626c:	40002800 	.word	0x40002800

08006270 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006270:	4770      	bx	lr

08006272 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006272:	0089      	lsls	r1, r1, #2
 8006274:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006278:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800627c:	600a      	str	r2, [r1, #0]
}
 800627e:	4770      	bx	lr

08006280 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006280:	0089      	lsls	r1, r1, #2
 8006282:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006286:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800628a:	6808      	ldr	r0, [r1, #0]
}
 800628c:	4770      	bx	lr
	...

08006290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	4605      	mov	r5, r0
 8006298:	4688      	mov	r8, r1
 800629a:	4617      	mov	r7, r2
 800629c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800629e:	f7fb febf 	bl	8002020 <HAL_GetTick>
 80062a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a4:	1a1b      	subs	r3, r3, r0
 80062a6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80062aa:	f7fb feb9 	bl	8002020 <HAL_GetTick>
 80062ae:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062b0:	4b2a      	ldr	r3, [pc, #168]	; (800635c <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80062b8:	fb09 f303 	mul.w	r3, r9, r3
 80062bc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	689c      	ldr	r4, [r3, #8]
 80062c2:	ea38 0404 	bics.w	r4, r8, r4
 80062c6:	bf0c      	ite	eq
 80062c8:	2301      	moveq	r3, #1
 80062ca:	2300      	movne	r3, #0
 80062cc:	42bb      	cmp	r3, r7
 80062ce:	d040      	beq.n	8006352 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062d0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80062d4:	d0f3      	beq.n	80062be <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062d6:	f7fb fea3 	bl	8002020 <HAL_GetTick>
 80062da:	eba0 000a 	sub.w	r0, r0, sl
 80062de:	4548      	cmp	r0, r9
 80062e0:	d20a      	bcs.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x68>
 80062e2:	f1b9 0f00 	cmp.w	r9, #0
 80062e6:	d007      	beq.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062e8:	9a01      	ldr	r2, [sp, #4]
 80062ea:	b102      	cbz	r2, 80062ee <SPI_WaitFlagStateUntilTimeout+0x5e>
 80062ec:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80062ee:	9b01      	ldr	r3, [sp, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	4691      	mov	r9, r2
 80062f6:	e7e2      	b.n	80062be <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062f8:	682a      	ldr	r2, [r5, #0]
 80062fa:	6853      	ldr	r3, [r2, #4]
 80062fc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006300:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006302:	686b      	ldr	r3, [r5, #4]
 8006304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006308:	d00b      	beq.n	8006322 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800630a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800630c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006310:	d014      	beq.n	800633c <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8006312:	2301      	movs	r3, #1
 8006314:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8006318:	2300      	movs	r3, #0
 800631a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800631e:	2003      	movs	r0, #3
 8006320:	e018      	b.n	8006354 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006322:	68ab      	ldr	r3, [r5, #8]
 8006324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006328:	d002      	beq.n	8006330 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800632a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632e:	d1ec      	bne.n	800630a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8006330:	682a      	ldr	r2, [r5, #0]
 8006332:	6813      	ldr	r3, [r2, #0]
 8006334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e7e6      	b.n	800630a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800633c:	682a      	ldr	r2, [r5, #0]
 800633e:	6813      	ldr	r3, [r2, #0]
 8006340:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	682a      	ldr	r2, [r5, #0]
 8006348:	6813      	ldr	r3, [r2, #0]
 800634a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	e7df      	b.n	8006312 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8006352:	2000      	movs	r0, #0
}
 8006354:	b002      	add	sp, #8
 8006356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635a:	bf00      	nop
 800635c:	20000098 	.word	0x20000098

08006360 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	4606      	mov	r6, r0
 8006368:	460c      	mov	r4, r1
 800636a:	4615      	mov	r5, r2
 800636c:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006374:	f7fb fe54 	bl	8002020 <HAL_GetTick>
 8006378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800637a:	1a1b      	subs	r3, r3, r0
 800637c:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8006380:	f7fb fe4e 	bl	8002020 <HAL_GetTick>
 8006384:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006386:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800638a:	4b31      	ldr	r3, [pc, #196]	; (8006450 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006392:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006396:	0d1b      	lsrs	r3, r3, #20
 8006398:	fb08 f303 	mul.w	r3, r8, r3
 800639c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800639e:	e002      	b.n	80063a6 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80063a0:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80063a4:	d112      	bne.n	80063cc <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 80063a6:	6833      	ldr	r3, [r6, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	ea03 0c04 	and.w	ip, r3, r4
 80063ae:	45ac      	cmp	ip, r5
 80063b0:	d04a      	beq.n	8006448 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063b2:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80063b6:	d1f3      	bne.n	80063a0 <SPI_WaitFifoStateUntilTimeout+0x40>
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	d1f1      	bne.n	80063a0 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 80063bc:	f89a 300c 	ldrb.w	r3, [sl, #12]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80063c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063ca:	e7e9      	b.n	80063a0 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063cc:	f7fb fe28 	bl	8002020 <HAL_GetTick>
 80063d0:	eba0 0009 	sub.w	r0, r0, r9
 80063d4:	4540      	cmp	r0, r8
 80063d6:	d20a      	bcs.n	80063ee <SPI_WaitFifoStateUntilTimeout+0x8e>
 80063d8:	f1b8 0f00 	cmp.w	r8, #0
 80063dc:	d007      	beq.n	80063ee <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063de:	9a01      	ldr	r2, [sp, #4]
 80063e0:	b102      	cbz	r2, 80063e4 <SPI_WaitFifoStateUntilTimeout+0x84>
 80063e2:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 80063e4:	9b01      	ldr	r3, [sp, #4]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	4690      	mov	r8, r2
 80063ec:	e7db      	b.n	80063a6 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063ee:	6832      	ldr	r2, [r6, #0]
 80063f0:	6853      	ldr	r3, [r2, #4]
 80063f2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80063f6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f8:	6873      	ldr	r3, [r6, #4]
 80063fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063fe:	d00b      	beq.n	8006418 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006400:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006406:	d014      	beq.n	8006432 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8006408:	2301      	movs	r3, #1
 800640a:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800640e:	2300      	movs	r3, #0
 8006410:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8006414:	2003      	movs	r0, #3
 8006416:	e018      	b.n	800644a <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006418:	68b3      	ldr	r3, [r6, #8]
 800641a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800641e:	d002      	beq.n	8006426 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006424:	d1ec      	bne.n	8006400 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8006426:	6832      	ldr	r2, [r6, #0]
 8006428:	6813      	ldr	r3, [r2, #0]
 800642a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	e7e6      	b.n	8006400 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8006432:	6832      	ldr	r2, [r6, #0]
 8006434:	6813      	ldr	r3, [r2, #0]
 8006436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	6832      	ldr	r2, [r6, #0]
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	e7df      	b.n	8006408 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8006448:	2000      	movs	r0, #0
}
 800644a:	b002      	add	sp, #8
 800644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006450:	20000098 	.word	0x20000098

08006454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	4604      	mov	r4, r0
 800645a:	460d      	mov	r5, r1
 800645c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800645e:	9200      	str	r2, [sp, #0]
 8006460:	460b      	mov	r3, r1
 8006462:	2200      	movs	r2, #0
 8006464:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006468:	f7ff ff7a 	bl	8006360 <SPI_WaitFifoStateUntilTimeout>
 800646c:	b9b0      	cbnz	r0, 800649c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800646e:	9600      	str	r6, [sp, #0]
 8006470:	462b      	mov	r3, r5
 8006472:	2200      	movs	r2, #0
 8006474:	2180      	movs	r1, #128	; 0x80
 8006476:	4620      	mov	r0, r4
 8006478:	f7ff ff0a 	bl	8006290 <SPI_WaitFlagStateUntilTimeout>
 800647c:	b9a8      	cbnz	r0, 80064aa <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800647e:	9600      	str	r6, [sp, #0]
 8006480:	462b      	mov	r3, r5
 8006482:	2200      	movs	r2, #0
 8006484:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006488:	4620      	mov	r0, r4
 800648a:	f7ff ff69 	bl	8006360 <SPI_WaitFifoStateUntilTimeout>
 800648e:	b150      	cbz	r0, 80064a6 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006490:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006492:	f043 0320 	orr.w	r3, r3, #32
 8006496:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8006498:	2003      	movs	r0, #3
 800649a:	e004      	b.n	80064a6 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800649c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800649e:	f043 0320 	orr.w	r3, r3, #32
 80064a2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80064a4:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80064a6:	b002      	add	sp, #8
 80064a8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80064ac:	f043 0320 	orr.w	r3, r3, #32
 80064b0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80064b2:	2003      	movs	r0, #3
 80064b4:	e7f7      	b.n	80064a6 <SPI_EndRxTxTransaction+0x52>

080064b6 <HAL_SPI_Init>:
  if (hspi == NULL)
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f000 808e 	beq.w	80065d8 <HAL_SPI_Init+0x122>
{
 80064bc:	b510      	push	{r4, lr}
 80064be:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80064c2:	b933      	cbnz	r3, 80064d2 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c4:	6843      	ldr	r3, [r0, #4]
 80064c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ca:	d005      	beq.n	80064d8 <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61c3      	str	r3, [r0, #28]
 80064d0:	e002      	b.n	80064d8 <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064d2:	2300      	movs	r3, #0
 80064d4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064d6:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80064d8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d05a      	beq.n	8006596 <HAL_SPI_Init+0xe0>
  hspi->State = HAL_SPI_STATE_BUSY;
 80064e0:	2302      	movs	r3, #2
 80064e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	6813      	ldr	r3, [r2, #0]
 80064ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ee:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064f0:	68e3      	ldr	r3, [r4, #12]
 80064f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064f6:	d954      	bls.n	80065a2 <HAL_SPI_Init+0xec>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064f8:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064fe:	d004      	beq.n	800650a <HAL_SPI_Init+0x54>
 8006500:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006504:	d001      	beq.n	800650a <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006506:	2300      	movs	r3, #0
 8006508:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006510:	68a1      	ldr	r1, [r4, #8]
 8006512:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8006516:	430b      	orrs	r3, r1
 8006518:	6921      	ldr	r1, [r4, #16]
 800651a:	f001 0102 	and.w	r1, r1, #2
 800651e:	430b      	orrs	r3, r1
 8006520:	6961      	ldr	r1, [r4, #20]
 8006522:	f001 0101 	and.w	r1, r1, #1
 8006526:	430b      	orrs	r3, r1
 8006528:	69a1      	ldr	r1, [r4, #24]
 800652a:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800652e:	430b      	orrs	r3, r1
 8006530:	69e1      	ldr	r1, [r4, #28]
 8006532:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8006536:	430b      	orrs	r3, r1
 8006538:	6a21      	ldr	r1, [r4, #32]
 800653a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800653e:	430b      	orrs	r3, r1
 8006540:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006542:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8006546:	6820      	ldr	r0, [r4, #0]
 8006548:	430b      	orrs	r3, r1
 800654a:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800654c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800654e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006552:	d029      	beq.n	80065a8 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006554:	8b63      	ldrh	r3, [r4, #26]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800655c:	f001 0110 	and.w	r1, r1, #16
 8006560:	430b      	orrs	r3, r1
 8006562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006564:	f001 0108 	and.w	r1, r1, #8
 8006568:	430b      	orrs	r3, r1
 800656a:	68e1      	ldr	r1, [r4, #12]
 800656c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8006570:	430b      	orrs	r3, r1
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	431a      	orrs	r2, r3
 8006576:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006578:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800657a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657e:	d027      	beq.n	80065d0 <HAL_SPI_Init+0x11a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006580:	6822      	ldr	r2, [r4, #0]
 8006582:	69d3      	ldr	r3, [r2, #28]
 8006584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006588:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800658a:	2000      	movs	r0, #0
 800658c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800658e:	2301      	movs	r3, #1
 8006590:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8006594:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006596:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800659a:	4620      	mov	r0, r4
 800659c:	f7fb fb54 	bl	8001c48 <HAL_SPI_MspInit>
 80065a0:	e79e      	b.n	80064e0 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80065a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065a6:	e7a8      	b.n	80064fa <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80065a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065aa:	b92b      	cbnz	r3, 80065b8 <HAL_SPI_Init+0x102>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ac:	68e3      	ldr	r3, [r4, #12]
 80065ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065b2:	d90a      	bls.n	80065ca <HAL_SPI_Init+0x114>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80065b4:	2302      	movs	r3, #2
 80065b6:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80065b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d1ca      	bne.n	8006554 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80065be:	6821      	ldr	r1, [r4, #0]
 80065c0:	680b      	ldr	r3, [r1, #0]
 80065c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065c6:	600b      	str	r3, [r1, #0]
 80065c8:	e7c4      	b.n	8006554 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80065ca:	2301      	movs	r3, #1
 80065cc:	6323      	str	r3, [r4, #48]	; 0x30
 80065ce:	e7f3      	b.n	80065b8 <HAL_SPI_Init+0x102>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80065d4:	611a      	str	r2, [r3, #16]
 80065d6:	e7d3      	b.n	8006580 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 80065d8:	2001      	movs	r0, #1
}
 80065da:	4770      	bx	lr

080065dc <HAL_SPI_Transmit>:
{
 80065dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065e0:	b083      	sub	sp, #12
 80065e2:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80065e4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	f000 810f 	beq.w	800680c <HAL_SPI_Transmit+0x230>
 80065ee:	4604      	mov	r4, r0
 80065f0:	4688      	mov	r8, r1
 80065f2:	4691      	mov	r9, r2
 80065f4:	2301      	movs	r3, #1
 80065f6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80065fa:	f7fb fd11 	bl	8002020 <HAL_GetTick>
 80065fe:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006600:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8006604:	b2f6      	uxtb	r6, r6
 8006606:	2e01      	cmp	r6, #1
 8006608:	f040 80ed 	bne.w	80067e6 <HAL_SPI_Transmit+0x20a>
  if ((pData == NULL) || (Size == 0U))
 800660c:	f1b8 0f00 	cmp.w	r8, #0
 8006610:	f000 80ea 	beq.w	80067e8 <HAL_SPI_Transmit+0x20c>
 8006614:	f1b9 0f00 	cmp.w	r9, #0
 8006618:	f000 80e6 	beq.w	80067e8 <HAL_SPI_Transmit+0x20c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800661c:	2303      	movs	r3, #3
 800661e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006622:	2300      	movs	r3, #0
 8006624:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006626:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800662a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800662e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006632:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006634:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006638:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800663c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800663e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006640:	68a3      	ldr	r3, [r4, #8]
 8006642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006646:	d022      	beq.n	800668e <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006648:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800664a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664e:	d029      	beq.n	80066a4 <HAL_SPI_Transmit+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006658:	d103      	bne.n	8006662 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006660:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006662:	68e3      	ldr	r3, [r4, #12]
 8006664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006668:	d94d      	bls.n	8006706 <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800666a:	6863      	ldr	r3, [r4, #4]
 800666c:	b113      	cbz	r3, 8006674 <HAL_SPI_Transmit+0x98>
 800666e:	f1b9 0f01 	cmp.w	r9, #1
 8006672:	d12e      	bne.n	80066d2 <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006674:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	8812      	ldrh	r2, [r2, #0]
 800667a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800667c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800667e:	3302      	adds	r3, #2
 8006680:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8006682:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800668c:	e021      	b.n	80066d2 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006696:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8006698:	6822      	ldr	r2, [r4, #0]
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e7d1      	b.n	8006648 <HAL_SPI_Transmit+0x6c>
    SPI_RESET_CRC(hspi);
 80066a4:	6822      	ldr	r2, [r4, #0]
 80066a6:	6813      	ldr	r3, [r2, #0]
 80066a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	6813      	ldr	r3, [r2, #0]
 80066b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	e7ca      	b.n	8006650 <HAL_SPI_Transmit+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ba:	f7fb fcb1 	bl	8002020 <HAL_GetTick>
 80066be:	1bc0      	subs	r0, r0, r7
 80066c0:	42a8      	cmp	r0, r5
 80066c2:	d303      	bcc.n	80066cc <HAL_SPI_Transmit+0xf0>
 80066c4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80066c8:	f040 8098 	bne.w	80067fc <HAL_SPI_Transmit+0x220>
 80066cc:	2d00      	cmp	r5, #0
 80066ce:	f000 8097 	beq.w	8006800 <HAL_SPI_Transmit+0x224>
    while (hspi->TxXferCount > 0U)
 80066d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d066      	beq.n	80067a8 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	f012 0f02 	tst.w	r2, #2
 80066e2:	d0ea      	beq.n	80066ba <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80066e6:	8812      	ldrh	r2, [r2, #0]
 80066e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066ec:	3302      	adds	r3, #2
 80066ee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80066f0:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 80066f4:	fa1f fc8c 	uxth.w	ip, ip
 80066f8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80066fc:	fa1f fc8c 	uxth.w	ip, ip
 8006700:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8006704:	e7e5      	b.n	80066d2 <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	b113      	cbz	r3, 8006710 <HAL_SPI_Transmit+0x134>
 800670a:	f1b9 0f01 	cmp.w	r9, #1
 800670e:	d133      	bne.n	8006778 <HAL_SPI_Transmit+0x19c>
      if (hspi->TxXferCount > 1U)
 8006710:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	d90c      	bls.n	8006732 <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006718:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	8812      	ldrh	r2, [r2, #0]
 800671e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006720:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006722:	3302      	adds	r3, #2
 8006724:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006726:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b02      	subs	r3, #2
 800672c:	b29b      	uxth	r3, r3
 800672e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006730:	e022      	b.n	8006778 <HAL_SPI_Transmit+0x19c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006732:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	7812      	ldrb	r2, [r2, #0]
 8006738:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800673a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800673c:	3301      	adds	r3, #1
 800673e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006740:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29b      	uxth	r3, r3
 8006748:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800674a:	e015      	b.n	8006778 <HAL_SPI_Transmit+0x19c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800674c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006754:	3301      	adds	r3, #1
 8006756:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8006758:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006762:	e009      	b.n	8006778 <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006764:	f7fb fc5c 	bl	8002020 <HAL_GetTick>
 8006768:	1bc0      	subs	r0, r0, r7
 800676a:	42a8      	cmp	r0, r5
 800676c:	d302      	bcc.n	8006774 <HAL_SPI_Transmit+0x198>
 800676e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006772:	d147      	bne.n	8006804 <HAL_SPI_Transmit+0x228>
 8006774:	2d00      	cmp	r5, #0
 8006776:	d047      	beq.n	8006808 <HAL_SPI_Transmit+0x22c>
    while (hspi->TxXferCount > 0U)
 8006778:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800677a:	b29b      	uxth	r3, r3
 800677c:	b1a3      	cbz	r3, 80067a8 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	6893      	ldr	r3, [r2, #8]
 8006782:	f013 0f02 	tst.w	r3, #2
 8006786:	d0ed      	beq.n	8006764 <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 8006788:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d9dd      	bls.n	800674c <HAL_SPI_Transmit+0x170>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006798:	3302      	adds	r3, #2
 800679a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800679c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b02      	subs	r3, #2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80067a6:	e7e7      	b.n	8006778 <HAL_SPI_Transmit+0x19c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ae:	d014      	beq.n	80067da <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067b0:	463a      	mov	r2, r7
 80067b2:	4629      	mov	r1, r5
 80067b4:	4620      	mov	r0, r4
 80067b6:	f7ff fe4d 	bl	8006454 <SPI_EndRxTxTransaction>
 80067ba:	b108      	cbz	r0, 80067c0 <HAL_SPI_Transmit+0x1e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067bc:	2320      	movs	r3, #32
 80067be:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067c0:	68a3      	ldr	r3, [r4, #8]
 80067c2:	b933      	cbnz	r3, 80067d2 <HAL_SPI_Transmit+0x1f6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	9201      	str	r2, [sp, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80067d4:	b943      	cbnz	r3, 80067e8 <HAL_SPI_Transmit+0x20c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067d6:	2600      	movs	r6, #0
 80067d8:	e006      	b.n	80067e8 <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	6813      	ldr	r3, [r2, #0]
 80067de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e7e4      	b.n	80067b0 <HAL_SPI_Transmit+0x1d4>
    errorcode = HAL_BUSY;
 80067e6:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80067ee:	2300      	movs	r3, #0
 80067f0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80067f4:	4630      	mov	r0, r6
 80067f6:	b003      	add	sp, #12
 80067f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80067fc:	2603      	movs	r6, #3
 80067fe:	e7f3      	b.n	80067e8 <HAL_SPI_Transmit+0x20c>
 8006800:	2603      	movs	r6, #3
 8006802:	e7f1      	b.n	80067e8 <HAL_SPI_Transmit+0x20c>
          errorcode = HAL_TIMEOUT;
 8006804:	2603      	movs	r6, #3
 8006806:	e7ef      	b.n	80067e8 <HAL_SPI_Transmit+0x20c>
 8006808:	2603      	movs	r6, #3
 800680a:	e7ed      	b.n	80067e8 <HAL_SPI_Transmit+0x20c>
  __HAL_LOCK(hspi);
 800680c:	2602      	movs	r6, #2
 800680e:	e7f1      	b.n	80067f4 <HAL_SPI_Transmit+0x218>

08006810 <HAL_SPI_TransmitReceive>:
{
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	b085      	sub	sp, #20
 8006816:	461f      	mov	r7, r3
 8006818:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  __IO uint32_t tmpreg = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 800681e:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8006822:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006826:	2b01      	cmp	r3, #1
 8006828:	f000 81fa 	beq.w	8006c20 <HAL_SPI_TransmitReceive+0x410>
 800682c:	4604      	mov	r4, r0
 800682e:	468a      	mov	sl, r1
 8006830:	4693      	mov	fp, r2
 8006832:	2301      	movs	r3, #1
 8006834:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8006838:	f7fb fbf2 	bl	8002020 <HAL_GetTick>
 800683c:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800683e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006842:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8006844:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800684c:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006850:	2b01      	cmp	r3, #1
 8006852:	d00a      	beq.n	800686a <HAL_SPI_TransmitReceive+0x5a>
 8006854:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8006858:	f040 81c7 	bne.w	8006bea <HAL_SPI_TransmitReceive+0x3da>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800685c:	68a1      	ldr	r1, [r4, #8]
 800685e:	2900      	cmp	r1, #0
 8006860:	f040 81ce 	bne.w	8006c00 <HAL_SPI_TransmitReceive+0x3f0>
 8006864:	2b04      	cmp	r3, #4
 8006866:	f040 81cd 	bne.w	8006c04 <HAL_SPI_TransmitReceive+0x3f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800686a:	f1ba 0f00 	cmp.w	sl, #0
 800686e:	f000 81cb 	beq.w	8006c08 <HAL_SPI_TransmitReceive+0x3f8>
 8006872:	f1bb 0f00 	cmp.w	fp, #0
 8006876:	f000 81c9 	beq.w	8006c0c <HAL_SPI_TransmitReceive+0x3fc>
 800687a:	2f00      	cmp	r7, #0
 800687c:	f000 81c8 	beq.w	8006c10 <HAL_SPI_TransmitReceive+0x400>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006880:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b04      	cmp	r3, #4
 8006888:	d002      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x80>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800688a:	2305      	movs	r3, #5
 800688c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006890:	2300      	movs	r3, #0
 8006892:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006894:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006898:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800689c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068a0:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80068a4:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80068a6:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80068a8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068aa:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b2:	d029      	beq.n	8006908 <HAL_SPI_TransmitReceive+0xf8>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068b4:	68e3      	ldr	r3, [r4, #12]
 80068b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068ba:	d801      	bhi.n	80068c0 <HAL_SPI_TransmitReceive+0xb0>
 80068bc:	2f01      	cmp	r7, #1
 80068be:	d92d      	bls.n	800691c <HAL_SPI_TransmitReceive+0x10c>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	6853      	ldr	r3, [r2, #4]
 80068c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068c8:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80068d2:	d103      	bne.n	80068dc <HAL_SPI_TransmitReceive+0xcc>
    __HAL_SPI_ENABLE(hspi);
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068da:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068dc:	68e3      	ldr	r3, [r4, #12]
 80068de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068e2:	d97d      	bls.n	80069e0 <HAL_SPI_TransmitReceive+0x1d0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	b10b      	cbz	r3, 80068ec <HAL_SPI_TransmitReceive+0xdc>
 80068e8:	2f01      	cmp	r7, #1
 80068ea:	d10b      	bne.n	8006904 <HAL_SPI_TransmitReceive+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	8812      	ldrh	r2, [r2, #0]
 80068f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068f6:	3302      	adds	r3, #2
 80068f8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80068fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29b      	uxth	r3, r3
 8006902:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006904:	2701      	movs	r7, #1
 8006906:	e042      	b.n	800698e <HAL_SPI_TransmitReceive+0x17e>
    SPI_RESET_CRC(hspi);
 8006908:	6813      	ldr	r3, [r2, #0]
 800690a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	6822      	ldr	r2, [r4, #0]
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e7cb      	b.n	80068b4 <HAL_SPI_TransmitReceive+0xa4>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	6853      	ldr	r3, [r2, #4]
 8006920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006924:	6053      	str	r3, [r2, #4]
 8006926:	e7d0      	b.n	80068ca <HAL_SPI_TransmitReceive+0xba>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006928:	f018 0f04 	tst.w	r8, #4
 800692c:	d107      	bne.n	800693e <HAL_SPI_TransmitReceive+0x12e>
 800692e:	f019 0f08 	tst.w	r9, #8
 8006932:	d004      	beq.n	800693e <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006934:	6822      	ldr	r2, [r4, #0]
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800693c:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800693e:	6822      	ldr	r2, [r4, #0]
 8006940:	6813      	ldr	r3, [r2, #0]
 8006942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006946:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8006948:	2700      	movs	r7, #0
 800694a:	e000      	b.n	800694e <HAL_SPI_TransmitReceive+0x13e>
 800694c:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	f012 0f01 	tst.w	r2, #1
 8006956:	d011      	beq.n	800697c <HAL_SPI_TransmitReceive+0x16c>
 8006958:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800695c:	b292      	uxth	r2, r2
 800695e:	b16a      	cbz	r2, 800697c <HAL_SPI_TransmitReceive+0x16c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006968:	3302      	adds	r3, #2
 800696a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800696c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29b      	uxth	r3, r3
 8006976:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800697a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800697c:	f7fb fb50 	bl	8002020 <HAL_GetTick>
 8006980:	1b80      	subs	r0, r0, r6
 8006982:	42a8      	cmp	r0, r5
 8006984:	d303      	bcc.n	800698e <HAL_SPI_TransmitReceive+0x17e>
 8006986:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800698a:	f040 8143 	bne.w	8006c14 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800698e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006990:	b29b      	uxth	r3, r3
 8006992:	b92b      	cbnz	r3, 80069a0 <HAL_SPI_TransmitReceive+0x190>
 8006994:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80d1 	beq.w	8006b42 <HAL_SPI_TransmitReceive+0x332>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	f012 0f02 	tst.w	r2, #2
 80069a8:	d0d1      	beq.n	800694e <HAL_SPI_TransmitReceive+0x13e>
 80069aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80069ac:	b292      	uxth	r2, r2
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	d0cd      	beq.n	800694e <HAL_SPI_TransmitReceive+0x13e>
 80069b2:	2f00      	cmp	r7, #0
 80069b4:	d0cb      	beq.n	800694e <HAL_SPI_TransmitReceive+0x13e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069b8:	8812      	ldrh	r2, [r2, #0]
 80069ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069be:	3302      	adds	r3, #2
 80069c0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80069c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80069cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1bb      	bne.n	800694c <HAL_SPI_TransmitReceive+0x13c>
 80069d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069da:	d0a5      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x118>
        txallowed = 0U;
 80069dc:	2700      	movs	r7, #0
 80069de:	e7b6      	b.n	800694e <HAL_SPI_TransmitReceive+0x13e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e0:	6863      	ldr	r3, [r4, #4]
 80069e2:	b10b      	cbz	r3, 80069e8 <HAL_SPI_TransmitReceive+0x1d8>
 80069e4:	2f01      	cmp	r7, #1
 80069e6:	d10f      	bne.n	8006a08 <HAL_SPI_TransmitReceive+0x1f8>
      if (hspi->TxXferCount > 1U)
 80069e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d90d      	bls.n	8006a0c <HAL_SPI_TransmitReceive+0x1fc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	8812      	ldrh	r2, [r2, #0]
 80069f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069fa:	3302      	adds	r3, #2
 80069fc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b02      	subs	r3, #2
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006a08:	2701      	movs	r7, #1
 8006a0a:	e065      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x2c8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a16:	3301      	adds	r3, #1
 8006a18:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006a1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006a24:	e7f0      	b.n	8006a08 <HAL_SPI_TransmitReceive+0x1f8>
        if (hspi->TxXferCount > 1U)
 8006a26:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006a28:	b292      	uxth	r2, r2
 8006a2a:	2a01      	cmp	r2, #1
 8006a2c:	d913      	bls.n	8006a56 <HAL_SPI_TransmitReceive+0x246>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a30:	8812      	ldrh	r2, [r2, #0]
 8006a32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a36:	3302      	adds	r3, #2
 8006a38:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b02      	subs	r3, #2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006a44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	bb1b      	cbnz	r3, 8006a92 <HAL_SPI_TransmitReceive+0x282>
 8006a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a50:	d00d      	beq.n	8006a6e <HAL_SPI_TransmitReceive+0x25e>
        txallowed = 0U;
 8006a52:	2700      	movs	r7, #0
 8006a54:	e052      	b.n	8006afc <HAL_SPI_TransmitReceive+0x2ec>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a58:	7812      	ldrb	r2, [r2, #0]
 8006a5a:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8006a5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a5e:	3301      	adds	r3, #1
 8006a60:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8006a62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006a6c:	e7ea      	b.n	8006a44 <HAL_SPI_TransmitReceive+0x234>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006a6e:	f018 0f04 	tst.w	r8, #4
 8006a72:	d107      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x274>
 8006a74:	f019 0f08 	tst.w	r9, #8
 8006a78:	d004      	beq.n	8006a84 <HAL_SPI_TransmitReceive+0x274>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	6813      	ldr	r3, [r2, #0]
 8006a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a82:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006a84:	6822      	ldr	r2, [r4, #0]
 8006a86:	6813      	ldr	r3, [r2, #0]
 8006a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a8c:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8006a8e:	2700      	movs	r7, #0
 8006a90:	e034      	b.n	8006afc <HAL_SPI_TransmitReceive+0x2ec>
 8006a92:	2700      	movs	r7, #0
 8006a94:	e032      	b.n	8006afc <HAL_SPI_TransmitReceive+0x2ec>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	6853      	ldr	r3, [r2, #4]
 8006a9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a9e:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8006aa0:	2701      	movs	r7, #1
 8006aa2:	e00d      	b.n	8006ac0 <HAL_SPI_TransmitReceive+0x2b0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006aa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006aa6:	7b1b      	ldrb	r3, [r3, #12]
 8006aa8:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8006aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aac:	3301      	adds	r3, #1
 8006aae:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8006ab0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8006abe:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ac0:	f7fb faae 	bl	8002020 <HAL_GetTick>
 8006ac4:	1b80      	subs	r0, r0, r6
 8006ac6:	42a8      	cmp	r0, r5
 8006ac8:	d303      	bcc.n	8006ad2 <HAL_SPI_TransmitReceive+0x2c2>
 8006aca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006ace:	f040 80a3 	bne.w	8006c18 <HAL_SPI_TransmitReceive+0x408>
 8006ad2:	2d00      	cmp	r5, #0
 8006ad4:	f000 80a2 	beq.w	8006c1c <HAL_SPI_TransmitReceive+0x40c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ad8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	b923      	cbnz	r3, 8006ae8 <HAL_SPI_TransmitReceive+0x2d8>
 8006ade:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02c      	beq.n	8006b42 <HAL_SPI_TransmitReceive+0x332>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	f012 0f02 	tst.w	r2, #2
 8006af0:	d004      	beq.n	8006afc <HAL_SPI_TransmitReceive+0x2ec>
 8006af2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006af4:	b292      	uxth	r2, r2
 8006af6:	b10a      	cbz	r2, 8006afc <HAL_SPI_TransmitReceive+0x2ec>
 8006af8:	2f00      	cmp	r7, #0
 8006afa:	d194      	bne.n	8006a26 <HAL_SPI_TransmitReceive+0x216>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	f012 0f01 	tst.w	r2, #1
 8006b04:	d0dc      	beq.n	8006ac0 <HAL_SPI_TransmitReceive+0x2b0>
 8006b06:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8006b0a:	b292      	uxth	r2, r2
 8006b0c:	2a00      	cmp	r2, #0
 8006b0e:	d0d7      	beq.n	8006ac0 <HAL_SPI_TransmitReceive+0x2b0>
        if (hspi->RxXferCount > 1U)
 8006b10:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8006b14:	b292      	uxth	r2, r2
 8006b16:	2a01      	cmp	r2, #1
 8006b18:	d9c4      	bls.n	8006aa4 <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b1e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b22:	3302      	adds	r3, #2
 8006b24:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b26:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	3b02      	subs	r3, #2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b34:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d9ab      	bls.n	8006a96 <HAL_SPI_TransmitReceive+0x286>
        txallowed = 1U;
 8006b3e:	2701      	movs	r7, #1
 8006b40:	e7be      	b.n	8006ac0 <HAL_SPI_TransmitReceive+0x2b0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b48:	d017      	beq.n	8006b7a <HAL_SPI_TransmitReceive+0x36a>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	f012 0f10 	tst.w	r2, #16
 8006b52:	d048      	beq.n	8006be6 <HAL_SPI_TransmitReceive+0x3d6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006b54:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006b56:	f042 0202 	orr.w	r2, r2, #2
 8006b5a:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006b5c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006b60:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 8006b62:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b64:	4632      	mov	r2, r6
 8006b66:	4629      	mov	r1, r5
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7ff fc73 	bl	8006454 <SPI_EndRxTxTransaction>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d03c      	beq.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b72:	2320      	movs	r3, #32
 8006b74:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006b76:	2701      	movs	r7, #1
 8006b78:	e038      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006b7a:	9600      	str	r6, [sp, #0]
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	2201      	movs	r2, #1
 8006b80:	4611      	mov	r1, r2
 8006b82:	4620      	mov	r0, r4
 8006b84:	f7ff fb84 	bl	8006290 <SPI_WaitFlagStateUntilTimeout>
 8006b88:	b9e0      	cbnz	r0, 8006bc4 <HAL_SPI_TransmitReceive+0x3b4>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006b90:	d01e      	beq.n	8006bd0 <HAL_SPI_TransmitReceive+0x3c0>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b92:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8006b94:	7b3b      	ldrb	r3, [r7, #12]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8006b9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006ba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d1d1      	bne.n	8006b4a <HAL_SPI_TransmitReceive+0x33a>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006ba6:	9600      	str	r6, [sp, #0]
 8006ba8:	462b      	mov	r3, r5
 8006baa:	2201      	movs	r2, #1
 8006bac:	4611      	mov	r1, r2
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f7ff fb6e 	bl	8006290 <SPI_WaitFlagStateUntilTimeout>
 8006bb4:	b988      	cbnz	r0, 8006bda <HAL_SPI_TransmitReceive+0x3ca>
        tmpreg8 = *ptmpreg8;
 8006bb6:	7b3b      	ldrb	r3, [r7, #12]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8006bbe:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006bc2:	e7c2      	b.n	8006b4a <HAL_SPI_TransmitReceive+0x33a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006bc4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006bc6:	f043 0302 	orr.w	r3, r3, #2
 8006bca:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006bcc:	2703      	movs	r7, #3
      goto error;
 8006bce:	e00d      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
      tmpreg = READ_REG(hspi->Instance->DR);
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8006bd6:	9b03      	ldr	r3, [sp, #12]
 8006bd8:	e7b7      	b.n	8006b4a <HAL_SPI_TransmitReceive+0x33a>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006bda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006bdc:	f043 0302 	orr.w	r3, r3, #2
 8006be0:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006be2:	2703      	movs	r7, #3
          goto error;
 8006be4:	e002      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006be6:	2700      	movs	r7, #0
 8006be8:	e7bc      	b.n	8006b64 <HAL_SPI_TransmitReceive+0x354>
    errorcode = HAL_BUSY;
 8006bea:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	b005      	add	sp, #20
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 8006c00:	2702      	movs	r7, #2
 8006c02:	e7f3      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
 8006c04:	2702      	movs	r7, #2
 8006c06:	e7f1      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
    errorcode = HAL_ERROR;
 8006c08:	2701      	movs	r7, #1
 8006c0a:	e7ef      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
 8006c0c:	2701      	movs	r7, #1
 8006c0e:	e7ed      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
 8006c10:	2701      	movs	r7, #1
 8006c12:	e7eb      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
        errorcode = HAL_TIMEOUT;
 8006c14:	2703      	movs	r7, #3
 8006c16:	e7e9      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
        errorcode = HAL_TIMEOUT;
 8006c18:	2703      	movs	r7, #3
 8006c1a:	e7e7      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
 8006c1c:	2703      	movs	r7, #3
 8006c1e:	e7e5      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3dc>
  __HAL_LOCK(hspi);
 8006c20:	2702      	movs	r7, #2
 8006c22:	e7e9      	b.n	8006bf8 <HAL_SPI_TransmitReceive+0x3e8>

08006c24 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006c24:	4b07      	ldr	r3, [pc, #28]	; (8006c44 <SUBGHZSPI_Init+0x20>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006c2e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006c32:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006c34:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006c38:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c40:	601a      	str	r2, [r3, #0]
}
 8006c42:	4770      	bx	lr
 8006c44:	58010000 	.word	0x58010000

08006c48 <HAL_SUBGHZ_Init>:
{
 8006c48:	b530      	push	{r4, r5, lr}
 8006c4a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d058      	beq.n	8006d02 <HAL_SUBGHZ_Init+0xba>
 8006c50:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8006c52:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006c54:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006c58:	b10b      	cbz	r3, 8006c5e <HAL_SUBGHZ_Init+0x16>
 8006c5a:	2d03      	cmp	r5, #3
 8006c5c:	d10b      	bne.n	8006c76 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7fb f8ee 	bl	8001e44 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006c68:	4a27      	ldr	r2, [pc, #156]	; (8006d08 <HAL_SUBGHZ_Init+0xc0>)
 8006c6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006c76:	b185      	cbz	r5, 8006c9a <HAL_SUBGHZ_Init+0x52>
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006c78:	4b24      	ldr	r3, [pc, #144]	; (8006d0c <HAL_SUBGHZ_Init+0xc4>)
 8006c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c7e:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8006c80:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	f7ff ffce 	bl	8006c24 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c90:	2301      	movs	r3, #1
 8006c92:	71a3      	strb	r3, [r4, #6]
}
 8006c94:	4628      	mov	r0, r5
 8006c96:	b003      	add	sp, #12
 8006c98:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ca2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006ca6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006cae:	4b18      	ldr	r3, [pc, #96]	; (8006d10 <HAL_SUBGHZ_Init+0xc8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006cb6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006cba:	2264      	movs	r2, #100	; 0x64
 8006cbc:	fb02 f303 	mul.w	r3, r2, r3
 8006cc0:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006cc2:	9b01      	ldr	r3, [sp, #4]
 8006cc4:	b1d3      	cbz	r3, 8006cfc <HAL_SUBGHZ_Init+0xb4>
      count--;
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cd4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006cd8:	d1f3      	bne.n	8006cc2 <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cda:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <HAL_SUBGHZ_Init+0xc4>)
 8006cdc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ce0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cee:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cf4:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	d1ca      	bne.n	8006c90 <HAL_SUBGHZ_Init+0x48>
 8006cfa:	e7c2      	b.n	8006c82 <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006cfc:	2501      	movs	r5, #1
 8006cfe:	60a5      	str	r5, [r4, #8]
        break;
 8006d00:	e7eb      	b.n	8006cda <HAL_SUBGHZ_Init+0x92>
    return status;
 8006d02:	2501      	movs	r5, #1
 8006d04:	e7c6      	b.n	8006c94 <HAL_SUBGHZ_Init+0x4c>
 8006d06:	bf00      	nop
 8006d08:	58000800 	.word	0x58000800
 8006d0c:	58000400 	.word	0x58000400
 8006d10:	20000098 	.word	0x20000098

08006d14 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006d14:	b082      	sub	sp, #8
 8006d16:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d18:	4b1a      	ldr	r3, [pc, #104]	; (8006d84 <SUBGHZSPI_Transmit+0x70>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006d20:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006d24:	2064      	movs	r0, #100	; 0x64
 8006d26:	fb00 f303 	mul.w	r3, r0, r3
 8006d2a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006d2c:	9b01      	ldr	r3, [sp, #4]
 8006d2e:	b14b      	cbz	r3, 8006d44 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006d30:	9b01      	ldr	r3, [sp, #4]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006d36:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <SUBGHZSPI_Transmit+0x74>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f013 0f02 	tst.w	r3, #2
 8006d3e:	d0f5      	beq.n	8006d2c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006d40:	2000      	movs	r0, #0
 8006d42:	e001      	b.n	8006d48 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006d44:	2001      	movs	r0, #1
 8006d46:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006d48:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <SUBGHZSPI_Transmit+0x74>)
 8006d4a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d4c:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <SUBGHZSPI_Transmit+0x70>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006d54:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006d58:	2164      	movs	r1, #100	; 0x64
 8006d5a:	fb01 f303 	mul.w	r3, r1, r3
 8006d5e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006d60:	9b01      	ldr	r3, [sp, #4]
 8006d62:	b143      	cbz	r3, 8006d76 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <SUBGHZSPI_Transmit+0x74>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f013 0f01 	tst.w	r3, #1
 8006d72:	d0f5      	beq.n	8006d60 <SUBGHZSPI_Transmit+0x4c>
 8006d74:	e001      	b.n	8006d7a <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006d76:	2001      	movs	r0, #1
 8006d78:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006d7a:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <SUBGHZSPI_Transmit+0x74>)
 8006d7c:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006d7e:	b002      	add	sp, #8
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000098 	.word	0x20000098
 8006d88:	58010000 	.word	0x58010000

08006d8c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d90:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <SUBGHZSPI_Receive+0x78>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006d98:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006d9c:	2064      	movs	r0, #100	; 0x64
 8006d9e:	fb00 f303 	mul.w	r3, r0, r3
 8006da2:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006da4:	9b01      	ldr	r3, [sp, #4]
 8006da6:	b14b      	cbz	r3, 8006dbc <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006da8:	9b01      	ldr	r3, [sp, #4]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006dae:	4b16      	ldr	r3, [pc, #88]	; (8006e08 <SUBGHZSPI_Receive+0x7c>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f013 0f02 	tst.w	r3, #2
 8006db6:	d0f5      	beq.n	8006da4 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006db8:	2000      	movs	r0, #0
 8006dba:	e001      	b.n	8006dc0 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006dc0:	4b11      	ldr	r3, [pc, #68]	; (8006e08 <SUBGHZSPI_Receive+0x7c>)
 8006dc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006dc6:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006dca:	4b0e      	ldr	r3, [pc, #56]	; (8006e04 <SUBGHZSPI_Receive+0x78>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006dd2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006dd6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006dda:	fb0c f303 	mul.w	r3, ip, r3
 8006dde:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	b143      	cbz	r3, 8006df6 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006dea:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <SUBGHZSPI_Receive+0x7c>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f013 0f01 	tst.w	r3, #1
 8006df2:	d0f5      	beq.n	8006de0 <SUBGHZSPI_Receive+0x54>
 8006df4:	e001      	b.n	8006dfa <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006df6:	2001      	movs	r0, #1
 8006df8:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006dfa:	4b03      	ldr	r3, [pc, #12]	; (8006e08 <SUBGHZSPI_Receive+0x7c>)
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006e00:	b002      	add	sp, #8
 8006e02:	4770      	bx	lr
 8006e04:	20000098 	.word	0x20000098
 8006e08:	58010000 	.word	0x58010000

08006e0c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e0c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <SUBGHZ_WaitOnBusy+0x50>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e16:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006e1a:	2264      	movs	r2, #100	; 0x64
 8006e1c:	fb02 f303 	mul.w	r3, r2, r3
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	e006      	b.n	8006e32 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006e24:	2302      	movs	r3, #2
 8006e26:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006e28:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006e2a:	b002      	add	sp, #8
 8006e2c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006e2e:	4213      	tst	r3, r2
 8006e30:	d012      	beq.n	8006e58 <SUBGHZ_WaitOnBusy+0x4c>
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006e32:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <SUBGHZ_WaitOnBusy+0x54>)
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f013 0304 	ands.w	r3, r3, #4
 8006e3a:	d000      	beq.n	8006e3e <SUBGHZ_WaitOnBusy+0x32>
 8006e3c:	2301      	movs	r3, #1
    if (count == 0U)
 8006e3e:	9a01      	ldr	r2, [sp, #4]
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	d0ef      	beq.n	8006e24 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006e44:	9a01      	ldr	r2, [sp, #4]
 8006e46:	3a01      	subs	r2, #1
 8006e48:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006e4a:	4a05      	ldr	r2, [pc, #20]	; (8006e60 <SUBGHZ_WaitOnBusy+0x54>)
 8006e4c:	6952      	ldr	r2, [r2, #20]
 8006e4e:	f012 0202 	ands.w	r2, r2, #2
 8006e52:	d0ec      	beq.n	8006e2e <SUBGHZ_WaitOnBusy+0x22>
 8006e54:	2201      	movs	r2, #1
 8006e56:	e7ea      	b.n	8006e2e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e7e6      	b.n	8006e2a <SUBGHZ_WaitOnBusy+0x1e>
 8006e5c:	20000098 	.word	0x20000098
 8006e60:	58000400 	.word	0x58000400

08006e64 <SUBGHZ_CheckDeviceReady>:
{
 8006e64:	b500      	push	{lr}
 8006e66:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006e68:	7903      	ldrb	r3, [r0, #4]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d004      	beq.n	8006e78 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006e6e:	f7ff ffcd 	bl	8006e0c <SUBGHZ_WaitOnBusy>
}
 8006e72:	b003      	add	sp, #12
 8006e74:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006e78:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <SUBGHZ_CheckDeviceReady+0x4c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e80:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006e84:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e86:	4a0b      	ldr	r2, [pc, #44]	; (8006eb4 <SUBGHZ_CheckDeviceReady+0x50>)
 8006e88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006e9a:	9b01      	ldr	r3, [sp, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f9      	bne.n	8006e94 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ea0:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <SUBGHZ_CheckDeviceReady+0x50>)
 8006ea2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006eae:	e7de      	b.n	8006e6e <SUBGHZ_CheckDeviceReady+0xa>
 8006eb0:	20000098 	.word	0x20000098
 8006eb4:	58000400 	.word	0x58000400

08006eb8 <HAL_SUBGHZ_WriteRegisters>:
{
 8006eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebc:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ebe:	7980      	ldrb	r0, [r0, #6]
 8006ec0:	fa5f f880 	uxtb.w	r8, r0
 8006ec4:	f1b8 0f01 	cmp.w	r8, #1
 8006ec8:	d13e      	bne.n	8006f48 <HAL_SUBGHZ_WriteRegisters+0x90>
 8006eca:	460c      	mov	r4, r1
 8006ecc:	4617      	mov	r7, r2
 8006ece:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006ed0:	796b      	ldrb	r3, [r5, #5]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d03b      	beq.n	8006f4e <HAL_SUBGHZ_WriteRegisters+0x96>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006eda:	2302      	movs	r3, #2
 8006edc:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f7ff ffc0 	bl	8006e64 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ee4:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006ee6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006eea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006ef2:	210d      	movs	r1, #13
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f7ff ff0d 	bl	8006d14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006efa:	0a21      	lsrs	r1, r4, #8
 8006efc:	4628      	mov	r0, r5
 8006efe:	f7ff ff09 	bl	8006d14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006f02:	b2e1      	uxtb	r1, r4
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff ff05 	bl	8006d14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f0a:	2400      	movs	r4, #0
 8006f0c:	e005      	b.n	8006f1a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f0e:	5d39      	ldrb	r1, [r7, r4]
 8006f10:	4628      	mov	r0, r5
 8006f12:	f7ff feff 	bl	8006d14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f16:	3401      	adds	r4, #1
 8006f18:	b2a4      	uxth	r4, r4
 8006f1a:	42b4      	cmp	r4, r6
 8006f1c:	d3f7      	bcc.n	8006f0e <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f1e:	4a0d      	ldr	r2, [pc, #52]	; (8006f54 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006f20:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f7ff ff6d 	bl	8006e0c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f32:	68ab      	ldr	r3, [r5, #8]
 8006f34:	b90b      	cbnz	r3, 8006f3a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006f36:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006f3e:	2300      	movs	r3, #0
 8006f40:	716b      	strb	r3, [r5, #5]
}
 8006f42:	4640      	mov	r0, r8
 8006f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006f48:	f04f 0802 	mov.w	r8, #2
 8006f4c:	e7f9      	b.n	8006f42 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006f4e:	f04f 0802 	mov.w	r8, #2
 8006f52:	e7f6      	b.n	8006f42 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006f54:	58000400 	.word	0x58000400

08006f58 <HAL_SUBGHZ_ReadRegisters>:
{
 8006f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f5e:	7980      	ldrb	r0, [r0, #6]
 8006f60:	fa5f f880 	uxtb.w	r8, r0
 8006f64:	f1b8 0f01 	cmp.w	r8, #1
 8006f68:	d141      	bne.n	8006fee <HAL_SUBGHZ_ReadRegisters+0x96>
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	4615      	mov	r5, r2
 8006f6e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006f70:	7973      	ldrb	r3, [r6, #5]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d03e      	beq.n	8006ff4 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006f76:	2301      	movs	r3, #1
 8006f78:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7ff ff72 	bl	8006e64 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f80:	4a1e      	ldr	r2, [pc, #120]	; (8006ffc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006f82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006f8e:	211d      	movs	r1, #29
 8006f90:	4630      	mov	r0, r6
 8006f92:	f7ff febf 	bl	8006d14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006f96:	0a21      	lsrs	r1, r4, #8
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f7ff febb 	bl	8006d14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006f9e:	b2e1      	uxtb	r1, r4
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f7ff feb7 	bl	8006d14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7ff feb3 	bl	8006d14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fae:	2400      	movs	r4, #0
 8006fb0:	e006      	b.n	8006fc0 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7ff fee9 	bl	8006d8c <SUBGHZSPI_Receive>
      pData++;
 8006fba:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006fbc:	3401      	adds	r4, #1
 8006fbe:	b2a4      	uxth	r4, r4
 8006fc0:	42bc      	cmp	r4, r7
 8006fc2:	d3f6      	bcc.n	8006fb2 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fc4:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006fc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7ff ff1a 	bl	8006e0c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006fd8:	68b3      	ldr	r3, [r6, #8]
 8006fda:	b90b      	cbnz	r3, 8006fe0 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8006fdc:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	7173      	strb	r3, [r6, #5]
}
 8006fe8:	4640      	mov	r0, r8
 8006fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006fee:	f04f 0802 	mov.w	r8, #2
 8006ff2:	e7f9      	b.n	8006fe8 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006ff4:	f04f 0802 	mov.w	r8, #2
 8006ff8:	e7f6      	b.n	8006fe8 <HAL_SUBGHZ_ReadRegisters+0x90>
 8006ffa:	bf00      	nop
 8006ffc:	58000400 	.word	0x58000400

08007000 <HAL_SUBGHZ_ExecSetCmd>:
{
 8007000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007004:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007006:	7980      	ldrb	r0, [r0, #6]
 8007008:	fa5f f980 	uxtb.w	r9, r0
 800700c:	f1b9 0f01 	cmp.w	r9, #1
 8007010:	d143      	bne.n	800709a <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8007012:	4688      	mov	r8, r1
 8007014:	4617      	mov	r7, r2
 8007016:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007018:	796b      	ldrb	r3, [r5, #5]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d040      	beq.n	80070a0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800701e:	2301      	movs	r3, #1
 8007020:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007022:	4628      	mov	r0, r5
 8007024:	f7ff ff1e 	bl	8006e64 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007028:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800702c:	d005      	beq.n	800703a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800702e:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8007032:	d002      	beq.n	800703a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007034:	2300      	movs	r3, #0
 8007036:	712b      	strb	r3, [r5, #4]
 8007038:	e001      	b.n	800703e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800703a:	2301      	movs	r3, #1
 800703c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800703e:	4a1a      	ldr	r2, [pc, #104]	; (80070a8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8007040:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007044:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800704c:	4641      	mov	r1, r8
 800704e:	4628      	mov	r0, r5
 8007050:	f7ff fe60 	bl	8006d14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007054:	2400      	movs	r4, #0
 8007056:	e005      	b.n	8007064 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007058:	5d39      	ldrb	r1, [r7, r4]
 800705a:	4628      	mov	r0, r5
 800705c:	f7ff fe5a 	bl	8006d14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007060:	3401      	adds	r4, #1
 8007062:	b2a4      	uxth	r4, r4
 8007064:	42b4      	cmp	r4, r6
 8007066:	d3f7      	bcc.n	8007058 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007068:	4a0f      	ldr	r2, [pc, #60]	; (80070a8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800706a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800706e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8007076:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800707a:	d10a      	bne.n	8007092 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800707c:	68ab      	ldr	r3, [r5, #8]
 800707e:	b90b      	cbnz	r3, 8007084 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8007080:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007084:	2301      	movs	r3, #1
 8007086:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007088:	2300      	movs	r3, #0
 800708a:	716b      	strb	r3, [r5, #5]
}
 800708c:	4648      	mov	r0, r9
 800708e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007092:	4628      	mov	r0, r5
 8007094:	f7ff feba 	bl	8006e0c <SUBGHZ_WaitOnBusy>
 8007098:	e7f0      	b.n	800707c <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800709a:	f04f 0902 	mov.w	r9, #2
 800709e:	e7f5      	b.n	800708c <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80070a0:	f04f 0902 	mov.w	r9, #2
 80070a4:	e7f2      	b.n	800708c <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80070a6:	bf00      	nop
 80070a8:	58000400 	.word	0x58000400

080070ac <HAL_SUBGHZ_ExecGetCmd>:
{
 80070ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070b2:	7980      	ldrb	r0, [r0, #6]
 80070b4:	fa5f f880 	uxtb.w	r8, r0
 80070b8:	f1b8 0f01 	cmp.w	r8, #1
 80070bc:	d139      	bne.n	8007132 <HAL_SUBGHZ_ExecGetCmd+0x86>
 80070be:	460c      	mov	r4, r1
 80070c0:	4615      	mov	r5, r2
 80070c2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80070c4:	7973      	ldrb	r3, [r6, #5]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d036      	beq.n	8007138 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80070ca:	2301      	movs	r3, #1
 80070cc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070ce:	4630      	mov	r0, r6
 80070d0:	f7ff fec8 	bl	8006e64 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070d4:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80070d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80070da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80070e2:	4621      	mov	r1, r4
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff fe15 	bl	8006d14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80070ea:	2100      	movs	r1, #0
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7ff fe11 	bl	8006d14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070f2:	2400      	movs	r4, #0
 80070f4:	e006      	b.n	8007104 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff fe47 	bl	8006d8c <SUBGHZSPI_Receive>
      pData++;
 80070fe:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007100:	3401      	adds	r4, #1
 8007102:	b2a4      	uxth	r4, r4
 8007104:	42bc      	cmp	r4, r7
 8007106:	d3f6      	bcc.n	80070f6 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007108:	4a0d      	ldr	r2, [pc, #52]	; (8007140 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800710a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800710e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007116:	4630      	mov	r0, r6
 8007118:	f7ff fe78 	bl	8006e0c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800711c:	68b3      	ldr	r3, [r6, #8]
 800711e:	b90b      	cbnz	r3, 8007124 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8007120:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007124:	2301      	movs	r3, #1
 8007126:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007128:	2300      	movs	r3, #0
 800712a:	7173      	strb	r3, [r6, #5]
}
 800712c:	4640      	mov	r0, r8
 800712e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007132:	f04f 0802 	mov.w	r8, #2
 8007136:	e7f9      	b.n	800712c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8007138:	f04f 0802 	mov.w	r8, #2
 800713c:	e7f6      	b.n	800712c <HAL_SUBGHZ_ExecGetCmd+0x80>
 800713e:	bf00      	nop
 8007140:	58000400 	.word	0x58000400

08007144 <HAL_SUBGHZ_IRQHandler>:
{
 8007144:	b530      	push	{r4, r5, lr}
 8007146:	b083      	sub	sp, #12
 8007148:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800714a:	2300      	movs	r3, #0
 800714c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007150:	2302      	movs	r3, #2
 8007152:	aa01      	add	r2, sp, #4
 8007154:	2112      	movs	r1, #18
 8007156:	f7ff ffa9 	bl	80070ac <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800715a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800715e:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8007162:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007166:	2302      	movs	r3, #2
 8007168:	aa01      	add	r2, sp, #4
 800716a:	4619      	mov	r1, r3
 800716c:	4628      	mov	r0, r5
 800716e:	f7ff ff47 	bl	8007000 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007172:	f014 0f01 	tst.w	r4, #1
 8007176:	d123      	bne.n	80071c0 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007178:	f014 0f02 	tst.w	r4, #2
 800717c:	d124      	bne.n	80071c8 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800717e:	f014 0f04 	tst.w	r4, #4
 8007182:	d125      	bne.n	80071d0 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007184:	f014 0f08 	tst.w	r4, #8
 8007188:	d126      	bne.n	80071d8 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800718a:	f014 0f10 	tst.w	r4, #16
 800718e:	d127      	bne.n	80071e0 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007190:	f014 0f20 	tst.w	r4, #32
 8007194:	d128      	bne.n	80071e8 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007196:	f014 0f40 	tst.w	r4, #64	; 0x40
 800719a:	d129      	bne.n	80071f0 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800719c:	f014 0f80 	tst.w	r4, #128	; 0x80
 80071a0:	d006      	beq.n	80071b0 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80071a2:	f414 7f80 	tst.w	r4, #256	; 0x100
 80071a6:	d027      	beq.n	80071f8 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80071a8:	2101      	movs	r1, #1
 80071aa:	4628      	mov	r0, r5
 80071ac:	f00c fdb4 	bl	8013d18 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80071b0:	f414 7f00 	tst.w	r4, #512	; 0x200
 80071b4:	d125      	bne.n	8007202 <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80071b6:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 80071ba:	d126      	bne.n	800720a <HAL_SUBGHZ_IRQHandler+0xc6>
}
 80071bc:	b003      	add	sp, #12
 80071be:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80071c0:	4628      	mov	r0, r5
 80071c2:	f00c fd91 	bl	8013ce8 <HAL_SUBGHZ_TxCpltCallback>
 80071c6:	e7d7      	b.n	8007178 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80071c8:	4628      	mov	r0, r5
 80071ca:	f00c fd95 	bl	8013cf8 <HAL_SUBGHZ_RxCpltCallback>
 80071ce:	e7d6      	b.n	800717e <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80071d0:	4628      	mov	r0, r5
 80071d2:	f00c fdc5 	bl	8013d60 <HAL_SUBGHZ_PreambleDetectedCallback>
 80071d6:	e7d5      	b.n	8007184 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80071d8:	4628      	mov	r0, r5
 80071da:	f00c fdc9 	bl	8013d70 <HAL_SUBGHZ_SyncWordValidCallback>
 80071de:	e7d4      	b.n	800718a <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80071e0:	4628      	mov	r0, r5
 80071e2:	f00c fdcd 	bl	8013d80 <HAL_SUBGHZ_HeaderValidCallback>
 80071e6:	e7d3      	b.n	8007190 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80071e8:	4628      	mov	r0, r5
 80071ea:	f00c fdb1 	bl	8013d50 <HAL_SUBGHZ_HeaderErrorCallback>
 80071ee:	e7d2      	b.n	8007196 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80071f0:	4628      	mov	r0, r5
 80071f2:	f00c fd89 	bl	8013d08 <HAL_SUBGHZ_CRCErrorCallback>
 80071f6:	e7d1      	b.n	800719c <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80071f8:	2100      	movs	r1, #0
 80071fa:	4628      	mov	r0, r5
 80071fc:	f00c fd8c 	bl	8013d18 <HAL_SUBGHZ_CADStatusCallback>
 8007200:	e7d6      	b.n	80071b0 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007202:	4628      	mov	r0, r5
 8007204:	f00c fd9a 	bl	8013d3c <HAL_SUBGHZ_RxTxTimeoutCallback>
 8007208:	e7d5      	b.n	80071b6 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800720a:	4628      	mov	r0, r5
 800720c:	f00c fdc0 	bl	8013d90 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8007210:	e7d4      	b.n	80071bc <HAL_SUBGHZ_IRQHandler+0x78>
	...

08007214 <HAL_SUBGHZ_WriteBuffer>:
{
 8007214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007218:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800721a:	7980      	ldrb	r0, [r0, #6]
 800721c:	fa5f f880 	uxtb.w	r8, r0
 8007220:	f1b8 0f01 	cmp.w	r8, #1
 8007224:	d138      	bne.n	8007298 <HAL_SUBGHZ_WriteBuffer+0x84>
 8007226:	460c      	mov	r4, r1
 8007228:	4617      	mov	r7, r2
 800722a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800722c:	796b      	ldrb	r3, [r5, #5]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d035      	beq.n	800729e <HAL_SUBGHZ_WriteBuffer+0x8a>
 8007232:	2301      	movs	r3, #1
 8007234:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007236:	4628      	mov	r0, r5
 8007238:	f7ff fe14 	bl	8006e64 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800723c:	4a19      	ldr	r2, [pc, #100]	; (80072a4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800723e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007242:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800724a:	210e      	movs	r1, #14
 800724c:	4628      	mov	r0, r5
 800724e:	f7ff fd61 	bl	8006d14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f7ff fd5d 	bl	8006d14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800725a:	2400      	movs	r4, #0
 800725c:	e005      	b.n	800726a <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800725e:	5d39      	ldrb	r1, [r7, r4]
 8007260:	4628      	mov	r0, r5
 8007262:	f7ff fd57 	bl	8006d14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007266:	3401      	adds	r4, #1
 8007268:	b2a4      	uxth	r4, r4
 800726a:	42b4      	cmp	r4, r6
 800726c:	d3f7      	bcc.n	800725e <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800726e:	4a0d      	ldr	r2, [pc, #52]	; (80072a4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007270:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800727c:	4628      	mov	r0, r5
 800727e:	f7ff fdc5 	bl	8006e0c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007282:	68ab      	ldr	r3, [r5, #8]
 8007284:	b90b      	cbnz	r3, 800728a <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8007286:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800728a:	2301      	movs	r3, #1
 800728c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800728e:	2300      	movs	r3, #0
 8007290:	716b      	strb	r3, [r5, #5]
}
 8007292:	4640      	mov	r0, r8
 8007294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007298:	f04f 0802 	mov.w	r8, #2
 800729c:	e7f9      	b.n	8007292 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800729e:	f04f 0802 	mov.w	r8, #2
 80072a2:	e7f6      	b.n	8007292 <HAL_SUBGHZ_WriteBuffer+0x7e>
 80072a4:	58000400 	.word	0x58000400

080072a8 <HAL_SUBGHZ_ReadBuffer>:
{
 80072a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ac:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80072ae:	7980      	ldrb	r0, [r0, #6]
 80072b0:	fa5f f880 	uxtb.w	r8, r0
 80072b4:	f1b8 0f01 	cmp.w	r8, #1
 80072b8:	d13d      	bne.n	8007336 <HAL_SUBGHZ_ReadBuffer+0x8e>
 80072ba:	460c      	mov	r4, r1
 80072bc:	4615      	mov	r5, r2
 80072be:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80072c0:	7973      	ldrb	r3, [r6, #5]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d03a      	beq.n	800733c <HAL_SUBGHZ_ReadBuffer+0x94>
 80072c6:	2301      	movs	r3, #1
 80072c8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff fdca 	bl	8006e64 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80072d0:	4a1c      	ldr	r2, [pc, #112]	; (8007344 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80072d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80072d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80072de:	211e      	movs	r1, #30
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff fd17 	bl	8006d14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80072e6:	4621      	mov	r1, r4
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff fd13 	bl	8006d14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80072ee:	2100      	movs	r1, #0
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7ff fd0f 	bl	8006d14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072f6:	2400      	movs	r4, #0
 80072f8:	e006      	b.n	8007308 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80072fa:	4629      	mov	r1, r5
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff fd45 	bl	8006d8c <SUBGHZSPI_Receive>
      pData++;
 8007302:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007304:	3401      	adds	r4, #1
 8007306:	b2a4      	uxth	r4, r4
 8007308:	42bc      	cmp	r4, r7
 800730a:	d3f6      	bcc.n	80072fa <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800730c:	4a0d      	ldr	r2, [pc, #52]	; (8007344 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800730e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800731a:	4630      	mov	r0, r6
 800731c:	f7ff fd76 	bl	8006e0c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007320:	68b3      	ldr	r3, [r6, #8]
 8007322:	b90b      	cbnz	r3, 8007328 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8007324:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007328:	2301      	movs	r3, #1
 800732a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800732c:	2300      	movs	r3, #0
 800732e:	7173      	strb	r3, [r6, #5]
}
 8007330:	4640      	mov	r0, r8
 8007332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007336:	f04f 0802 	mov.w	r8, #2
 800733a:	e7f9      	b.n	8007330 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 800733c:	f04f 0802 	mov.w	r8, #2
 8007340:	e7f6      	b.n	8007330 <HAL_SUBGHZ_ReadBuffer+0x88>
 8007342:	bf00      	nop
 8007344:	58000400 	.word	0x58000400

08007348 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007348:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	e852 3f00 	ldrex	r3, [r2]
 800734e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	e842 3100 	strex	r1, r3, [r2]
 8007356:	2900      	cmp	r1, #0
 8007358:	d1f6      	bne.n	8007348 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800735a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	f102 0308 	add.w	r3, r2, #8
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	3208      	adds	r2, #8
 800736a:	e842 3100 	strex	r1, r3, [r2]
 800736e:	2900      	cmp	r1, #0
 8007370:	d1f3      	bne.n	800735a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007372:	2320      	movs	r3, #32
 8007374:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8007378:	4770      	bx	lr

0800737a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800737a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	e852 3f00 	ldrex	r3, [r2]
 8007380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	e842 3100 	strex	r1, r3, [r2]
 8007388:	2900      	cmp	r1, #0
 800738a:	d1f6      	bne.n	800737a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800738c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	f102 0308 	add.w	r3, r2, #8
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800739a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	3208      	adds	r2, #8
 80073a0:	e842 3100 	strex	r1, r3, [r2]
 80073a4:	2900      	cmp	r1, #0
 80073a6:	d1f1      	bne.n	800738c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d006      	beq.n	80073bc <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073ae:	2320      	movs	r3, #32
 80073b0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b4:	2300      	movs	r3, #0
 80073b6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073b8:	6743      	str	r3, [r0, #116]	; 0x74
}
 80073ba:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	e852 3f00 	ldrex	r3, [r2]
 80073c2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	e842 3100 	strex	r1, r3, [r2]
 80073ca:	2900      	cmp	r1, #0
 80073cc:	d1f6      	bne.n	80073bc <UART_EndRxTransfer+0x42>
 80073ce:	e7ee      	b.n	80073ae <UART_EndRxTransfer+0x34>

080073d0 <HAL_UART_Transmit_DMA>:
{
 80073d0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80073d2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80073d6:	2a20      	cmp	r2, #32
 80073d8:	d13d      	bne.n	8007456 <HAL_UART_Transmit_DMA+0x86>
{
 80073da:	b510      	push	{r4, lr}
 80073dc:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80073de:	2900      	cmp	r1, #0
 80073e0:	d03b      	beq.n	800745a <HAL_UART_Transmit_DMA+0x8a>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d03b      	beq.n	800745e <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 80073e6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80073e8:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80073ec:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073f6:	2221      	movs	r2, #33	; 0x21
 80073f8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 80073fc:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80073fe:	b1ca      	cbz	r2, 8007434 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007400:	4918      	ldr	r1, [pc, #96]	; (8007464 <HAL_UART_Transmit_DMA+0x94>)
 8007402:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007404:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007406:	4918      	ldr	r1, [pc, #96]	; (8007468 <HAL_UART_Transmit_DMA+0x98>)
 8007408:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800740a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800740c:	4917      	ldr	r1, [pc, #92]	; (800746c <HAL_UART_Transmit_DMA+0x9c>)
 800740e:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007410:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007412:	2100      	movs	r1, #0
 8007414:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007416:	6802      	ldr	r2, [r0, #0]
 8007418:	3228      	adds	r2, #40	; 0x28
 800741a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800741c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800741e:	f7fd f9a1 	bl	8004764 <HAL_DMA_Start_IT>
 8007422:	b138      	cbz	r0, 8007434 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007424:	2310      	movs	r3, #16
 8007426:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 800742a:	2320      	movs	r3, #32
 800742c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8007430:	2001      	movs	r0, #1
 8007432:	e00f      	b.n	8007454 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	2240      	movs	r2, #64	; 0x40
 8007438:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800743a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	f102 0308 	add.w	r3, r2, #8
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	3208      	adds	r2, #8
 800744a:	e842 3100 	strex	r1, r3, [r2]
 800744e:	2900      	cmp	r1, #0
 8007450:	d1f3      	bne.n	800743a <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8007452:	2000      	movs	r0, #0
}
 8007454:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007456:	2002      	movs	r0, #2
}
 8007458:	4770      	bx	lr
      return HAL_ERROR;
 800745a:	2001      	movs	r0, #1
 800745c:	e7fa      	b.n	8007454 <HAL_UART_Transmit_DMA+0x84>
 800745e:	2001      	movs	r0, #1
 8007460:	e7f8      	b.n	8007454 <HAL_UART_Transmit_DMA+0x84>
 8007462:	bf00      	nop
 8007464:	08007471 	.word	0x08007471
 8007468:	080074bb 	.word	0x080074bb
 800746c:	080074c7 	.word	0x080074c7

08007470 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007470:	b508      	push	{r3, lr}
 8007472:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007474:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f013 0f20 	tst.w	r3, #32
 800747e:	d118      	bne.n	80074b2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007486:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	f102 0308 	add.w	r3, r2, #8
 800748c:	e853 3f00 	ldrex	r3, [r3]
 8007490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	3208      	adds	r2, #8
 8007496:	e842 3100 	strex	r1, r3, [r2]
 800749a:	2900      	cmp	r1, #0
 800749c:	d1f3      	bne.n	8007486 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800749e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	e852 3f00 	ldrex	r3, [r2]
 80074a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	e842 3100 	strex	r1, r3, [r2]
 80074ac:	2900      	cmp	r1, #0
 80074ae:	d1f6      	bne.n	800749e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074b0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80074b2:	f7fb f98d 	bl	80027d0 <HAL_UART_TxCpltCallback>
}
 80074b6:	e7fb      	b.n	80074b0 <UART_DMATransmitCplt+0x40>

080074b8 <HAL_UART_TxHalfCpltCallback>:
}
 80074b8:	4770      	bx	lr

080074ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074ba:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80074bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80074be:	f7ff fffb 	bl	80074b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c2:	bd08      	pop	{r3, pc}

080074c4 <HAL_UART_ErrorCallback>:
}
 80074c4:	4770      	bx	lr

080074c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074c6:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074c8:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80074ca:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80074ce:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074da:	d001      	beq.n	80074e0 <UART_DMAError+0x1a>
 80074dc:	2a21      	cmp	r2, #33	; 0x21
 80074de:	d010      	beq.n	8007502 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074e8:	d001      	beq.n	80074ee <UART_DMAError+0x28>
 80074ea:	2d22      	cmp	r5, #34	; 0x22
 80074ec:	d010      	beq.n	8007510 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80074f2:	f043 0310 	orr.w	r3, r3, #16
 80074f6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074fa:	4620      	mov	r0, r4
 80074fc:	f7ff ffe2 	bl	80074c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007500:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007508:	4620      	mov	r0, r4
 800750a:	f7ff ff1d 	bl	8007348 <UART_EndTxTransfer>
 800750e:	e7e7      	b.n	80074e0 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007516:	4620      	mov	r0, r4
 8007518:	f7ff ff2f 	bl	800737a <UART_EndRxTransfer>
 800751c:	e7e7      	b.n	80074ee <UART_DMAError+0x28>

0800751e <HAL_UARTEx_RxEventCallback>:
}
 800751e:	4770      	bx	lr

08007520 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007520:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8007522:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007526:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800752a:	2a22      	cmp	r2, #34	; 0x22
 800752c:	d005      	beq.n	800753a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800752e:	6802      	ldr	r2, [r0, #0]
 8007530:	6993      	ldr	r3, [r2, #24]
 8007532:	f043 0308 	orr.w	r3, r3, #8
 8007536:	6193      	str	r3, [r2, #24]
  }
}
 8007538:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800753a:	6802      	ldr	r2, [r0, #0]
 800753c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800753e:	b2db      	uxtb	r3, r3
 8007540:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007542:	400b      	ands	r3, r1
 8007544:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007546:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007548:	3301      	adds	r3, #1
 800754a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800754c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29b      	uxth	r3, r3
 8007556:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800755a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e9      	bne.n	8007538 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007564:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	e852 3f00 	ldrex	r3, [r2]
 800756a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	e842 3100 	strex	r1, r3, [r2]
 8007572:	2900      	cmp	r1, #0
 8007574:	d1f6      	bne.n	8007564 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007576:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	f102 0308 	add.w	r3, r2, #8
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	3208      	adds	r2, #8
 8007586:	e842 3100 	strex	r1, r3, [r2]
 800758a:	2900      	cmp	r1, #0
 800758c:	d1f3      	bne.n	8007576 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800758e:	2320      	movs	r3, #32
 8007590:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007598:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800759a:	6803      	ldr	r3, [r0, #0]
 800759c:	4a16      	ldr	r2, [pc, #88]	; (80075f8 <UART_RxISR_8BIT+0xd8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00c      	beq.n	80075bc <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80075a8:	d008      	beq.n	80075bc <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	e852 3f00 	ldrex	r3, [r2]
 80075b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	e842 3100 	strex	r1, r3, [r2]
 80075b8:	2900      	cmp	r1, #0
 80075ba:	d1f6      	bne.n	80075aa <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075bc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d116      	bne.n	80075f0 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c2:	2300      	movs	r3, #0
 80075c4:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	e852 3f00 	ldrex	r3, [r2]
 80075cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	e842 3100 	strex	r1, r3, [r2]
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d1f6      	bne.n	80075c6 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075d8:	6803      	ldr	r3, [r0, #0]
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	f012 0f10 	tst.w	r2, #16
 80075e0:	d001      	beq.n	80075e6 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075e2:	2210      	movs	r2, #16
 80075e4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075e6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80075ea:	f7ff ff98 	bl	800751e <HAL_UARTEx_RxEventCallback>
 80075ee:	e7a3      	b.n	8007538 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80075f0:	f7fb f8fe 	bl	80027f0 <HAL_UART_RxCpltCallback>
 80075f4:	e7a0      	b.n	8007538 <UART_RxISR_8BIT+0x18>
 80075f6:	bf00      	nop
 80075f8:	40008000 	.word	0x40008000

080075fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075fc:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075fe:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007602:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007606:	2b22      	cmp	r3, #34	; 0x22
 8007608:	d005      	beq.n	8007616 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800760a:	6802      	ldr	r2, [r0, #0]
 800760c:	6993      	ldr	r3, [r2, #24]
 800760e:	f043 0308 	orr.w	r3, r3, #8
 8007612:	6193      	str	r3, [r2, #24]
  }
}
 8007614:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007616:	6803      	ldr	r3, [r0, #0]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800761a:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800761c:	4013      	ands	r3, r2
 800761e:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007620:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007622:	3302      	adds	r3, #2
 8007624:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007626:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29b      	uxth	r3, r3
 8007630:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007634:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1ea      	bne.n	8007614 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800763e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	e852 3f00 	ldrex	r3, [r2]
 8007644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	e842 3100 	strex	r1, r3, [r2]
 800764c:	2900      	cmp	r1, #0
 800764e:	d1f6      	bne.n	800763e <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007650:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	f102 0308 	add.w	r3, r2, #8
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	3208      	adds	r2, #8
 8007660:	e842 3100 	strex	r1, r3, [r2]
 8007664:	2900      	cmp	r1, #0
 8007666:	d1f3      	bne.n	8007650 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007668:	2320      	movs	r3, #32
 800766a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007672:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007674:	6803      	ldr	r3, [r0, #0]
 8007676:	4a16      	ldr	r2, [pc, #88]	; (80076d0 <UART_RxISR_16BIT+0xd4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00c      	beq.n	8007696 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007682:	d008      	beq.n	8007696 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007684:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	e852 3f00 	ldrex	r3, [r2]
 800768a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	e842 3100 	strex	r1, r3, [r2]
 8007692:	2900      	cmp	r1, #0
 8007694:	d1f6      	bne.n	8007684 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007696:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007698:	2b01      	cmp	r3, #1
 800769a:	d116      	bne.n	80076ca <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769c:	2300      	movs	r3, #0
 800769e:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	e852 3f00 	ldrex	r3, [r2]
 80076a6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	e842 3100 	strex	r1, r3, [r2]
 80076ae:	2900      	cmp	r1, #0
 80076b0:	d1f6      	bne.n	80076a0 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076b2:	6803      	ldr	r3, [r0, #0]
 80076b4:	69da      	ldr	r2, [r3, #28]
 80076b6:	f012 0f10 	tst.w	r2, #16
 80076ba:	d001      	beq.n	80076c0 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076bc:	2210      	movs	r2, #16
 80076be:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076c0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80076c4:	f7ff ff2b 	bl	800751e <HAL_UARTEx_RxEventCallback>
 80076c8:	e7a4      	b.n	8007614 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80076ca:	f7fb f891 	bl	80027f0 <HAL_UART_RxCpltCallback>
 80076ce:	e7a1      	b.n	8007614 <UART_RxISR_16BIT+0x18>
 80076d0:	40008000 	.word	0x40008000

080076d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80076d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80076d8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80076dc:	6803      	ldr	r3, [r0, #0]
 80076de:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80076e0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80076e4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076e8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80076ec:	2a22      	cmp	r2, #34	; 0x22
 80076ee:	d005      	beq.n	80076fc <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f0:	699a      	ldr	r2, [r3, #24]
 80076f2:	f042 0208 	orr.w	r2, r2, #8
 80076f6:	619a      	str	r2, [r3, #24]
  }
}
 80076f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80076fe:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007702:	e008      	b.n	8007716 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007704:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007708:	2b00      	cmp	r3, #0
 800770a:	d14c      	bne.n	80077a6 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800770c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d04e      	beq.n	80077b4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007716:	2f00      	cmp	r7, #0
 8007718:	f000 809a 	beq.w	8007850 <UART_RxISR_8BIT_FIFOEN+0x17c>
 800771c:	f015 0f20 	tst.w	r5, #32
 8007720:	f000 8096 	beq.w	8007850 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007728:	b2f3      	uxtb	r3, r6
 800772a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800772c:	400b      	ands	r3, r1
 800772e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007730:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007732:	3301      	adds	r3, #1
 8007734:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007736:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007748:	f015 0f07 	tst.w	r5, #7
 800774c:	d0de      	beq.n	800770c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800774e:	f015 0f01 	tst.w	r5, #1
 8007752:	d009      	beq.n	8007768 <UART_RxISR_8BIT_FIFOEN+0x94>
 8007754:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007758:	d006      	beq.n	8007768 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800775a:	2201      	movs	r2, #1
 800775c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800775e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007768:	f015 0f02 	tst.w	r5, #2
 800776c:	d00b      	beq.n	8007786 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800776e:	f018 0f01 	tst.w	r8, #1
 8007772:	d008      	beq.n	8007786 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	2202      	movs	r2, #2
 8007778:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800777a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800777e:	f043 0304 	orr.w	r3, r3, #4
 8007782:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007786:	f015 0f04 	tst.w	r5, #4
 800778a:	d0bb      	beq.n	8007704 <UART_RxISR_8BIT_FIFOEN+0x30>
 800778c:	f018 0f01 	tst.w	r8, #1
 8007790:	d0b8      	beq.n	8007704 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	2204      	movs	r2, #4
 8007796:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007798:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800779c:	f043 0302 	orr.w	r3, r3, #2
 80077a0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80077a4:	e7ae      	b.n	8007704 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7ff fe8c 	bl	80074c4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80077b2:	e7ab      	b.n	800770c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	e852 3f00 	ldrex	r3, [r2]
 80077ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	e842 3100 	strex	r1, r3, [r2]
 80077c2:	2900      	cmp	r1, #0
 80077c4:	d1f6      	bne.n	80077b4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	f102 0308 	add.w	r3, r2, #8
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	3208      	adds	r2, #8
 80077da:	e842 3100 	strex	r1, r3, [r2]
 80077de:	2900      	cmp	r1, #0
 80077e0:	d1f1      	bne.n	80077c6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80077e2:	2320      	movs	r3, #32
 80077e4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ec:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	4a29      	ldr	r2, [pc, #164]	; (8007898 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80077fc:	d106      	bne.n	800780c <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d00d      	beq.n	8007820 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8007804:	4620      	mov	r0, r4
 8007806:	f7fa fff3 	bl	80027f0 <HAL_UART_RxCpltCallback>
 800780a:	e784      	b.n	8007716 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800780c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	e852 3f00 	ldrex	r3, [r2]
 8007812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	e842 3100 	strex	r1, r3, [r2]
 800781a:	2900      	cmp	r1, #0
 800781c:	d1f6      	bne.n	800780c <UART_RxISR_8BIT_FIFOEN+0x138>
 800781e:	e7ee      	b.n	80077fe <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007820:	2300      	movs	r3, #0
 8007822:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007824:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	e852 3f00 	ldrex	r3, [r2]
 800782a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	e842 3100 	strex	r1, r3, [r2]
 8007832:	2900      	cmp	r1, #0
 8007834:	d1f6      	bne.n	8007824 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	69da      	ldr	r2, [r3, #28]
 800783a:	f012 0f10 	tst.w	r2, #16
 800783e:	d001      	beq.n	8007844 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007840:	2210      	movs	r2, #16
 8007842:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007844:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007848:	4620      	mov	r0, r4
 800784a:	f7ff fe68 	bl	800751e <HAL_UARTEx_RxEventCallback>
 800784e:	e762      	b.n	8007716 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007850:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007854:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007856:	2b00      	cmp	r3, #0
 8007858:	f43f af4e 	beq.w	80076f8 <UART_RxISR_8BIT_FIFOEN+0x24>
 800785c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007860:	429a      	cmp	r2, r3
 8007862:	f67f af49 	bls.w	80076f8 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007866:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007868:	f102 0308 	add.w	r3, r2, #8
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	3208      	adds	r2, #8
 8007876:	e842 3100 	strex	r1, r3, [r2]
 800787a:	2900      	cmp	r1, #0
 800787c:	d1f3      	bne.n	8007866 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800787e:	4b07      	ldr	r3, [pc, #28]	; (800789c <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8007880:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007882:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	e852 3f00 	ldrex	r3, [r2]
 8007888:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	e842 3100 	strex	r1, r3, [r2]
 8007890:	2900      	cmp	r1, #0
 8007892:	d1f6      	bne.n	8007882 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8007894:	e730      	b.n	80076f8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007896:	bf00      	nop
 8007898:	40008000 	.word	0x40008000
 800789c:	08007521 	.word	0x08007521

080078a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80078a4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078a8:	6803      	ldr	r3, [r0, #0]
 80078aa:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078ac:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80078b0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078b4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80078b8:	2a22      	cmp	r2, #34	; 0x22
 80078ba:	d005      	beq.n	80078c8 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	f042 0208 	orr.w	r2, r2, #8
 80078c2:	619a      	str	r2, [r3, #24]
  }
}
 80078c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80078ca:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078ce:	e008      	b.n	80078e2 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078d0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d14b      	bne.n	8007970 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80078d8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d04d      	beq.n	800797e <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078e2:	2f00      	cmp	r7, #0
 80078e4:	f000 8099 	beq.w	8007a1a <UART_RxISR_16BIT_FIFOEN+0x17a>
 80078e8:	f015 0f20 	tst.w	r5, #32
 80078ec:	f000 8095 	beq.w	8007a1a <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078f4:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80078f6:	4033      	ands	r3, r6
 80078f8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80078fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078fc:	3302      	adds	r3, #2
 80078fe:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007900:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	b29b      	uxth	r3, r3
 800790a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007912:	f015 0f07 	tst.w	r5, #7
 8007916:	d0df      	beq.n	80078d8 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007918:	f015 0f01 	tst.w	r5, #1
 800791c:	d009      	beq.n	8007932 <UART_RxISR_16BIT_FIFOEN+0x92>
 800791e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007922:	d006      	beq.n	8007932 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007924:	2201      	movs	r2, #1
 8007926:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007928:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007932:	f015 0f02 	tst.w	r5, #2
 8007936:	d00b      	beq.n	8007950 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007938:	f018 0f01 	tst.w	r8, #1
 800793c:	d008      	beq.n	8007950 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	2202      	movs	r2, #2
 8007942:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007944:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007948:	f043 0304 	orr.w	r3, r3, #4
 800794c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007950:	f015 0f04 	tst.w	r5, #4
 8007954:	d0bc      	beq.n	80078d0 <UART_RxISR_16BIT_FIFOEN+0x30>
 8007956:	f018 0f01 	tst.w	r8, #1
 800795a:	d0b9      	beq.n	80078d0 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	2204      	movs	r2, #4
 8007960:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007962:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007966:	f043 0302 	orr.w	r3, r3, #2
 800796a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800796e:	e7af      	b.n	80078d0 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007970:	4620      	mov	r0, r4
 8007972:	f7ff fda7 	bl	80074c4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007976:	2300      	movs	r3, #0
 8007978:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800797c:	e7ac      	b.n	80078d8 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800797e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	e852 3f00 	ldrex	r3, [r2]
 8007984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	e842 3100 	strex	r1, r3, [r2]
 800798c:	2900      	cmp	r1, #0
 800798e:	d1f6      	bne.n	800797e <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007990:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	f102 0308 	add.w	r3, r2, #8
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800799e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	3208      	adds	r2, #8
 80079a4:	e842 3100 	strex	r1, r3, [r2]
 80079a8:	2900      	cmp	r1, #0
 80079aa:	d1f1      	bne.n	8007990 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80079ac:	2320      	movs	r3, #32
 80079ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079b6:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	4a29      	ldr	r2, [pc, #164]	; (8007a60 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d003      	beq.n	80079c8 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80079c6:	d106      	bne.n	80079d6 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d00d      	beq.n	80079ea <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 80079ce:	4620      	mov	r0, r4
 80079d0:	f7fa ff0e 	bl	80027f0 <HAL_UART_RxCpltCallback>
 80079d4:	e785      	b.n	80078e2 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	e852 3f00 	ldrex	r3, [r2]
 80079dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	e842 3100 	strex	r1, r3, [r2]
 80079e4:	2900      	cmp	r1, #0
 80079e6:	d1f6      	bne.n	80079d6 <UART_RxISR_16BIT_FIFOEN+0x136>
 80079e8:	e7ee      	b.n	80079c8 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ea:	2300      	movs	r3, #0
 80079ec:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	e852 3f00 	ldrex	r3, [r2]
 80079f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	e842 3100 	strex	r1, r3, [r2]
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d1f6      	bne.n	80079ee <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	f012 0f10 	tst.w	r2, #16
 8007a08:	d001      	beq.n	8007a0e <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a0a:	2210      	movs	r2, #16
 8007a0c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a0e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007a12:	4620      	mov	r0, r4
 8007a14:	f7ff fd83 	bl	800751e <HAL_UARTEx_RxEventCallback>
 8007a18:	e763      	b.n	80078e2 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007a1a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007a1e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f43f af4f 	beq.w	80078c4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007a26:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	f67f af4a 	bls.w	80078c4 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a30:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	f102 0308 	add.w	r3, r2, #8
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	3208      	adds	r2, #8
 8007a40:	e842 3100 	strex	r1, r3, [r2]
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d1f3      	bne.n	8007a30 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8007a48:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8007a4a:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a4c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	e852 3f00 	ldrex	r3, [r2]
 8007a52:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	e842 3100 	strex	r1, r3, [r2]
 8007a5a:	2900      	cmp	r1, #0
 8007a5c:	d1f6      	bne.n	8007a4c <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8007a5e:	e731      	b.n	80078c4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007a60:	40008000 	.word	0x40008000
 8007a64:	080075fd 	.word	0x080075fd

08007a68 <UART_SetConfig>:
{
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a6c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a6e:	6883      	ldr	r3, [r0, #8]
 8007a70:	6902      	ldr	r2, [r0, #16]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	6942      	ldr	r2, [r0, #20]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	69c2      	ldr	r2, [r0, #28]
 8007a7a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a7c:	6808      	ldr	r0, [r1, #0]
 8007a7e:	4a9d      	ldr	r2, [pc, #628]	; (8007cf4 <UART_SetConfig+0x28c>)
 8007a80:	4002      	ands	r2, r0
 8007a82:	431a      	orrs	r2, r3
 8007a84:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a86:	6822      	ldr	r2, [r4, #0]
 8007a88:	6853      	ldr	r3, [r2, #4]
 8007a8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007a8e:	68e1      	ldr	r1, [r4, #12]
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a94:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	4b97      	ldr	r3, [pc, #604]	; (8007cf8 <UART_SetConfig+0x290>)
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d001      	beq.n	8007aa2 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007a9e:	6a23      	ldr	r3, [r4, #32]
 8007aa0:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aa2:	6893      	ldr	r3, [r2, #8]
 8007aa4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007aa8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007aac:	430b      	orrs	r3, r1
 8007aae:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ab0:	6822      	ldr	r2, [r4, #0]
 8007ab2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ab4:	f023 030f 	bic.w	r3, r3, #15
 8007ab8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007aba:	430b      	orrs	r3, r1
 8007abc:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	4a8e      	ldr	r2, [pc, #568]	; (8007cfc <UART_SetConfig+0x294>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01c      	beq.n	8007b00 <UART_SetConfig+0x98>
 8007ac6:	4a8e      	ldr	r2, [pc, #568]	; (8007d00 <UART_SetConfig+0x298>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d031      	beq.n	8007b30 <UART_SetConfig+0xc8>
 8007acc:	4a8a      	ldr	r2, [pc, #552]	; (8007cf8 <UART_SetConfig+0x290>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d04b      	beq.n	8007b6a <UART_SetConfig+0x102>
 8007ad2:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ad4:	4988      	ldr	r1, [pc, #544]	; (8007cf8 <UART_SetConfig+0x290>)
 8007ad6:	428b      	cmp	r3, r1
 8007ad8:	d068      	beq.n	8007bac <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ada:	69e0      	ldr	r0, [r4, #28]
 8007adc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007ae0:	f000 80a5 	beq.w	8007c2e <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007ae4:	2a08      	cmp	r2, #8
 8007ae6:	f200 811f 	bhi.w	8007d28 <UART_SetConfig+0x2c0>
 8007aea:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007aee:	00d3      	.short	0x00d3
 8007af0:	00d100f5 	.word	0x00d100f5
 8007af4:	00f8011d 	.word	0x00f8011d
 8007af8:	011d011d 	.word	0x011d011d
 8007afc:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b04:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007b08:	f002 0203 	and.w	r2, r2, #3
 8007b0c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b10:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007b14:	2a03      	cmp	r2, #3
 8007b16:	d809      	bhi.n	8007b2c <UART_SetConfig+0xc4>
 8007b18:	e8df f002 	tbb	[pc, r2]
 8007b1c:	063c0402 	.word	0x063c0402
 8007b20:	2201      	movs	r2, #1
 8007b22:	e7d7      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b24:	2204      	movs	r2, #4
 8007b26:	e7d5      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b28:	2208      	movs	r2, #8
 8007b2a:	e7d3      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b2c:	2210      	movs	r2, #16
 8007b2e:	e7d1      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b34:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007b38:	f002 020c 	and.w	r2, r2, #12
 8007b3c:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007b40:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007b44:	2a0c      	cmp	r2, #12
 8007b46:	d80e      	bhi.n	8007b66 <UART_SetConfig+0xfe>
 8007b48:	e8df f002 	tbb	[pc, r2]
 8007b4c:	0d0d0d07 	.word	0x0d0d0d07
 8007b50:	0d0d0d09 	.word	0x0d0d0d09
 8007b54:	0d0d0d26 	.word	0x0d0d0d26
 8007b58:	0b          	.byte	0x0b
 8007b59:	00          	.byte	0x00
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	e7ba      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b5e:	2204      	movs	r2, #4
 8007b60:	e7b8      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b62:	2208      	movs	r2, #8
 8007b64:	e7b6      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b66:	2210      	movs	r2, #16
 8007b68:	e7b4      	b.n	8007ad4 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b6e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007b72:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007b76:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007b7a:	d00f      	beq.n	8007b9c <UART_SetConfig+0x134>
 8007b7c:	d805      	bhi.n	8007b8a <UART_SetConfig+0x122>
 8007b7e:	b17a      	cbz	r2, 8007ba0 <UART_SetConfig+0x138>
 8007b80:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007b84:	d10e      	bne.n	8007ba4 <UART_SetConfig+0x13c>
 8007b86:	2204      	movs	r2, #4
 8007b88:	e7a4      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b8a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007b8e:	d10b      	bne.n	8007ba8 <UART_SetConfig+0x140>
 8007b90:	2208      	movs	r2, #8
 8007b92:	e79f      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b94:	2202      	movs	r2, #2
 8007b96:	e79d      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b98:	2202      	movs	r2, #2
 8007b9a:	e79b      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	e799      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	e797      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007ba4:	2210      	movs	r2, #16
 8007ba6:	e795      	b.n	8007ad4 <UART_SetConfig+0x6c>
 8007ba8:	2210      	movs	r2, #16
 8007baa:	e793      	b.n	8007ad4 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007bac:	2a08      	cmp	r2, #8
 8007bae:	f200 809c 	bhi.w	8007cea <UART_SetConfig+0x282>
 8007bb2:	e8df f002 	tbb	[pc, r2]
 8007bb6:	9a08      	.short	0x9a08
 8007bb8:	9a379a3a 	.word	0x9a379a3a
 8007bbc:	9a9a      	.short	0x9a9a
 8007bbe:	05          	.byte	0x05
 8007bbf:	00          	.byte	0x00
 8007bc0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007bc4:	e004      	b.n	8007bd0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc6:	f7fd ffa1 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f000 808f 	beq.w	8007cee <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007bd2:	4b4c      	ldr	r3, [pc, #304]	; (8007d04 <UART_SetConfig+0x29c>)
 8007bd4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007bd8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bdc:	6865      	ldr	r5, [r4, #4]
 8007bde:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007be2:	4299      	cmp	r1, r3
 8007be4:	f200 8094 	bhi.w	8007d10 <UART_SetConfig+0x2a8>
 8007be8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007bec:	f200 8092 	bhi.w	8007d14 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bf0:	2600      	movs	r6, #0
 8007bf2:	4633      	mov	r3, r6
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	f7f9 f953 	bl	8000ea0 <__aeabi_uldivmod>
 8007bfa:	0209      	lsls	r1, r1, #8
 8007bfc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007c00:	0200      	lsls	r0, r0, #8
 8007c02:	086b      	lsrs	r3, r5, #1
 8007c04:	18c0      	adds	r0, r0, r3
 8007c06:	462a      	mov	r2, r5
 8007c08:	4633      	mov	r3, r6
 8007c0a:	f141 0100 	adc.w	r1, r1, #0
 8007c0e:	f7f9 f947 	bl	8000ea0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c12:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007c16:	4b3c      	ldr	r3, [pc, #240]	; (8007d08 <UART_SetConfig+0x2a0>)
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d87d      	bhi.n	8007d18 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	60d8      	str	r0, [r3, #12]
 8007c20:	4630      	mov	r0, r6
 8007c22:	e050      	b.n	8007cc6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007c24:	f7fd fa74 	bl	8005110 <HAL_RCC_GetSysClockFreq>
        break;
 8007c28:	e7cf      	b.n	8007bca <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8007c2a:	4838      	ldr	r0, [pc, #224]	; (8007d0c <UART_SetConfig+0x2a4>)
 8007c2c:	e7d0      	b.n	8007bd0 <UART_SetConfig+0x168>
    switch (clocksource)
 8007c2e:	2a08      	cmp	r2, #8
 8007c30:	d874      	bhi.n	8007d1c <UART_SetConfig+0x2b4>
 8007c32:	e8df f002 	tbb	[pc, r2]
 8007c36:	2707      	.short	0x2707
 8007c38:	732a7305 	.word	0x732a7305
 8007c3c:	7373      	.short	0x7373
 8007c3e:	0b          	.byte	0x0b
 8007c3f:	00          	.byte	0x00
 8007c40:	4832      	ldr	r0, [pc, #200]	; (8007d0c <UART_SetConfig+0x2a4>)
 8007c42:	e003      	b.n	8007c4c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c44:	f7fd ff62 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d069      	beq.n	8007d20 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007c4e:	4b2d      	ldr	r3, [pc, #180]	; (8007d04 <UART_SetConfig+0x29c>)
 8007c50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007c54:	fbb0 f0f3 	udiv	r0, r0, r3
 8007c58:	6862      	ldr	r2, [r4, #4]
 8007c5a:	0853      	lsrs	r3, r2, #1
 8007c5c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007c60:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c64:	f1a3 0110 	sub.w	r1, r3, #16
 8007c68:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007c6c:	4291      	cmp	r1, r2
 8007c6e:	d859      	bhi.n	8007d24 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c76:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007c7a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8007c7c:	6822      	ldr	r2, [r4, #0]
 8007c7e:	60d3      	str	r3, [r2, #12]
 8007c80:	2000      	movs	r0, #0
 8007c82:	e020      	b.n	8007cc6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c84:	f7fd ff52 	bl	8005b2c <HAL_RCC_GetPCLK2Freq>
        break;
 8007c88:	e7de      	b.n	8007c48 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8a:	f7fd fa41 	bl	8005110 <HAL_RCC_GetSysClockFreq>
        break;
 8007c8e:	e7db      	b.n	8007c48 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007c90:	481e      	ldr	r0, [pc, #120]	; (8007d0c <UART_SetConfig+0x2a4>)
 8007c92:	e003      	b.n	8007c9c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c94:	f7fd ff3a 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d047      	beq.n	8007d2c <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007c9e:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <UART_SetConfig+0x29c>)
 8007ca0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007ca4:	fbb0 f0f3 	udiv	r0, r0, r3
 8007ca8:	6863      	ldr	r3, [r4, #4]
 8007caa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007cae:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb2:	f1a0 0210 	sub.w	r2, r0, #16
 8007cb6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d838      	bhi.n	8007d30 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	b280      	uxth	r0, r0
 8007cc2:	60d8      	str	r0, [r3, #12]
 8007cc4:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ccc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8007cd4:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd8:	f7fd ff28 	bl	8005b2c <HAL_RCC_GetPCLK2Freq>
        break;
 8007cdc:	e7dc      	b.n	8007c98 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8007cde:	f7fd fa17 	bl	8005110 <HAL_RCC_GetSysClockFreq>
        break;
 8007ce2:	e7d9      	b.n	8007c98 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8007ce4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007ce8:	e7d8      	b.n	8007c9c <UART_SetConfig+0x234>
    switch (clocksource)
 8007cea:	2001      	movs	r0, #1
 8007cec:	e7eb      	b.n	8007cc6 <UART_SetConfig+0x25e>
 8007cee:	2000      	movs	r0, #0
 8007cf0:	e7e9      	b.n	8007cc6 <UART_SetConfig+0x25e>
 8007cf2:	bf00      	nop
 8007cf4:	cfff69f3 	.word	0xcfff69f3
 8007cf8:	40008000 	.word	0x40008000
 8007cfc:	40013800 	.word	0x40013800
 8007d00:	40004400 	.word	0x40004400
 8007d04:	080199c8 	.word	0x080199c8
 8007d08:	000ffcff 	.word	0x000ffcff
 8007d0c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8007d10:	2001      	movs	r0, #1
 8007d12:	e7d8      	b.n	8007cc6 <UART_SetConfig+0x25e>
 8007d14:	2001      	movs	r0, #1
 8007d16:	e7d6      	b.n	8007cc6 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8007d18:	2001      	movs	r0, #1
 8007d1a:	e7d4      	b.n	8007cc6 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	e7d2      	b.n	8007cc6 <UART_SetConfig+0x25e>
 8007d20:	2000      	movs	r0, #0
 8007d22:	e7d0      	b.n	8007cc6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007d24:	2001      	movs	r0, #1
 8007d26:	e7ce      	b.n	8007cc6 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007d28:	2001      	movs	r0, #1
 8007d2a:	e7cc      	b.n	8007cc6 <UART_SetConfig+0x25e>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e7ca      	b.n	8007cc6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007d30:	2001      	movs	r0, #1
 8007d32:	e7c8      	b.n	8007cc6 <UART_SetConfig+0x25e>

08007d34 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d36:	f013 0f01 	tst.w	r3, #1
 8007d3a:	d006      	beq.n	8007d4a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d3c:	6802      	ldr	r2, [r0, #0]
 8007d3e:	6853      	ldr	r3, [r2, #4]
 8007d40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d44:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007d46:	430b      	orrs	r3, r1
 8007d48:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d4c:	f013 0f02 	tst.w	r3, #2
 8007d50:	d006      	beq.n	8007d60 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d52:	6802      	ldr	r2, [r0, #0]
 8007d54:	6853      	ldr	r3, [r2, #4]
 8007d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d5a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d62:	f013 0f04 	tst.w	r3, #4
 8007d66:	d006      	beq.n	8007d76 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d68:	6802      	ldr	r2, [r0, #0]
 8007d6a:	6853      	ldr	r3, [r2, #4]
 8007d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d70:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007d72:	430b      	orrs	r3, r1
 8007d74:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d78:	f013 0f08 	tst.w	r3, #8
 8007d7c:	d006      	beq.n	8007d8c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d7e:	6802      	ldr	r2, [r0, #0]
 8007d80:	6853      	ldr	r3, [r2, #4]
 8007d82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d86:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d8e:	f013 0f10 	tst.w	r3, #16
 8007d92:	d006      	beq.n	8007da2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d94:	6802      	ldr	r2, [r0, #0]
 8007d96:	6893      	ldr	r3, [r2, #8]
 8007d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d9c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007da2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007da4:	f013 0f20 	tst.w	r3, #32
 8007da8:	d006      	beq.n	8007db8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007daa:	6802      	ldr	r2, [r0, #0]
 8007dac:	6893      	ldr	r3, [r2, #8]
 8007dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007db2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007db8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007dba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007dbe:	d00a      	beq.n	8007dd6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dc0:	6802      	ldr	r2, [r0, #0]
 8007dc2:	6853      	ldr	r3, [r2, #4]
 8007dc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dc8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007dca:	430b      	orrs	r3, r1
 8007dcc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd4:	d00b      	beq.n	8007dee <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007dd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ddc:	d006      	beq.n	8007dec <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dde:	6802      	ldr	r2, [r0, #0]
 8007de0:	6853      	ldr	r3, [r2, #4]
 8007de2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007de6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6053      	str	r3, [r2, #4]
}
 8007dec:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dee:	6802      	ldr	r2, [r0, #0]
 8007df0:	6853      	ldr	r3, [r2, #4]
 8007df2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007df6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007df8:	430b      	orrs	r3, r1
 8007dfa:	6053      	str	r3, [r2, #4]
 8007dfc:	e7eb      	b.n	8007dd6 <UART_AdvFeatureConfig+0xa2>

08007dfe <UART_WaitOnFlagUntilTimeout>:
{
 8007dfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e02:	4605      	mov	r5, r0
 8007e04:	460f      	mov	r7, r1
 8007e06:	4616      	mov	r6, r2
 8007e08:	4699      	mov	r9, r3
 8007e0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e0e:	682b      	ldr	r3, [r5, #0]
 8007e10:	69dc      	ldr	r4, [r3, #28]
 8007e12:	ea37 0404 	bics.w	r4, r7, r4
 8007e16:	bf0c      	ite	eq
 8007e18:	2401      	moveq	r4, #1
 8007e1a:	2400      	movne	r4, #0
 8007e1c:	42b4      	cmp	r4, r6
 8007e1e:	d157      	bne.n	8007ed0 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8007e20:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007e24:	d0f3      	beq.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e26:	f7fa f8fb 	bl	8002020 <HAL_GetTick>
 8007e2a:	eba0 0009 	sub.w	r0, r0, r9
 8007e2e:	4540      	cmp	r0, r8
 8007e30:	d82f      	bhi.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x94>
 8007e32:	f1b8 0f00 	cmp.w	r8, #0
 8007e36:	d02c      	beq.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	f012 0f04 	tst.w	r2, #4
 8007e40:	d0e5      	beq.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e42:	69da      	ldr	r2, [r3, #28]
 8007e44:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007e48:	d0e1      	beq.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e4e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e50:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	e852 3f00 	ldrex	r3, [r2]
 8007e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	e842 3100 	strex	r1, r3, [r2]
 8007e5e:	2900      	cmp	r1, #0
 8007e60:	d1f6      	bne.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e62:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	f102 0308 	add.w	r3, r2, #8
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	3208      	adds	r2, #8
 8007e72:	e842 3100 	strex	r1, r3, [r2]
 8007e76:	2900      	cmp	r1, #0
 8007e78:	d1f3      	bne.n	8007e62 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8007e7a:	2320      	movs	r3, #32
 8007e7c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007e80:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e84:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 8007e8e:	2003      	movs	r0, #3
 8007e90:	e01f      	b.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e92:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	e852 3f00 	ldrex	r3, [r2]
 8007e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	e842 3100 	strex	r1, r3, [r2]
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	d1f6      	bne.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	f102 0308 	add.w	r3, r2, #8
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	3208      	adds	r2, #8
 8007eb4:	e842 3100 	strex	r1, r3, [r2]
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	d1f3      	bne.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8007ebc:	2320      	movs	r3, #32
 8007ebe:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007ec2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 8007ecc:	2003      	movs	r0, #3
 8007ece:	e000      	b.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8007ed0:	2000      	movs	r0, #0
}
 8007ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007ed6 <HAL_UART_Transmit>:
{
 8007ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007ede:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d14f      	bne.n	8007f86 <HAL_UART_Transmit+0xb0>
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	460d      	mov	r5, r1
 8007eea:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d04e      	beq.n	8007f8e <HAL_UART_Transmit+0xb8>
 8007ef0:	b90a      	cbnz	r2, 8007ef6 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e048      	b.n	8007f88 <HAL_UART_Transmit+0xb2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007efc:	2321      	movs	r3, #33	; 0x21
 8007efe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 8007f02:	f7fa f88d 	bl	8002020 <HAL_GetTick>
 8007f06:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8007f08:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f0c:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f10:	68a3      	ldr	r3, [r4, #8]
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f16:	d002      	beq.n	8007f1e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8007f18:	f04f 0800 	mov.w	r8, #0
 8007f1c:	e011      	b.n	8007f42 <HAL_UART_Transmit+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	b313      	cbz	r3, 8007f68 <HAL_UART_Transmit+0x92>
      pdata16bits = NULL;
 8007f22:	f04f 0800 	mov.w	r8, #0
 8007f26:	e00c      	b.n	8007f42 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f28:	f838 3b02 	ldrh.w	r3, [r8], #2
 8007f2c:	6822      	ldr	r2, [r4, #0]
 8007f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f32:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8007f34:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8007f38:	b292      	uxth	r2, r2
 8007f3a:	3a01      	subs	r2, #1
 8007f3c:	b292      	uxth	r2, r2
 8007f3e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f42:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	b18b      	cbz	r3, 8007f6e <HAL_UART_Transmit+0x98>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f4a:	9600      	str	r6, [sp, #0]
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2180      	movs	r1, #128	; 0x80
 8007f52:	4620      	mov	r0, r4
 8007f54:	f7ff ff53 	bl	8007dfe <UART_WaitOnFlagUntilTimeout>
 8007f58:	b9d8      	cbnz	r0, 8007f92 <HAL_UART_Transmit+0xbc>
      if (pdata8bits == NULL)
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	d0e4      	beq.n	8007f28 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f5e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f66:	e7e5      	b.n	8007f34 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 8007f68:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8007f6a:	2500      	movs	r5, #0
 8007f6c:	e7e9      	b.n	8007f42 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f6e:	9600      	str	r6, [sp, #0]
 8007f70:	463b      	mov	r3, r7
 8007f72:	2200      	movs	r2, #0
 8007f74:	2140      	movs	r1, #64	; 0x40
 8007f76:	4620      	mov	r0, r4
 8007f78:	f7ff ff41 	bl	8007dfe <UART_WaitOnFlagUntilTimeout>
 8007f7c:	b958      	cbnz	r0, 8007f96 <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 8007f7e:	2320      	movs	r3, #32
 8007f80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 8007f84:	e000      	b.n	8007f88 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8007f86:	2002      	movs	r0, #2
}
 8007f88:	b002      	add	sp, #8
 8007f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8007f8e:	2001      	movs	r0, #1
 8007f90:	e7fa      	b.n	8007f88 <HAL_UART_Transmit+0xb2>
        return HAL_TIMEOUT;
 8007f92:	2003      	movs	r0, #3
 8007f94:	e7f8      	b.n	8007f88 <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
 8007f96:	2003      	movs	r0, #3
 8007f98:	e7f6      	b.n	8007f88 <HAL_UART_Transmit+0xb2>

08007f9a <UART_CheckIdleState>:
{
 8007f9a:	b530      	push	{r4, r5, lr}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8007fa6:	f7fa f83b 	bl	8002020 <HAL_GetTick>
 8007faa:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fac:	6822      	ldr	r2, [r4, #0]
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	f012 0f08 	tst.w	r2, #8
 8007fb4:	d110      	bne.n	8007fd8 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f013 0f04 	tst.w	r3, #4
 8007fbe:	d119      	bne.n	8007ff4 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007fc6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fca:	2000      	movs	r0, #0
 8007fcc:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fce:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8007fd0:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007fd4:	b003      	add	sp, #12
 8007fd6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7ff ff09 	bl	8007dfe <UART_WaitOnFlagUntilTimeout>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d0e2      	beq.n	8007fb6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8007ff0:	2003      	movs	r0, #3
 8007ff2:	e7ef      	b.n	8007fd4 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	462b      	mov	r3, r5
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008002:	4620      	mov	r0, r4
 8008004:	f7ff fefb 	bl	8007dfe <UART_WaitOnFlagUntilTimeout>
 8008008:	2800      	cmp	r0, #0
 800800a:	d0d9      	beq.n	8007fc0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800800c:	2003      	movs	r0, #3
 800800e:	e7e1      	b.n	8007fd4 <UART_CheckIdleState+0x3a>

08008010 <HAL_UART_Init>:
  if (huart == NULL)
 8008010:	b378      	cbz	r0, 8008072 <HAL_UART_Init+0x62>
{
 8008012:	b510      	push	{r4, lr}
 8008014:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008016:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800801a:	b30b      	cbz	r3, 8008060 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800801c:	2324      	movs	r3, #36	; 0x24
 800801e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8008022:	6822      	ldr	r2, [r4, #0]
 8008024:	6813      	ldr	r3, [r2, #0]
 8008026:	f023 0301 	bic.w	r3, r3, #1
 800802a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800802c:	4620      	mov	r0, r4
 800802e:	f7ff fd1b 	bl	8007a68 <UART_SetConfig>
 8008032:	2801      	cmp	r0, #1
 8008034:	d013      	beq.n	800805e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008038:	b9bb      	cbnz	r3, 800806a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800803a:	6822      	ldr	r2, [r4, #0]
 800803c:	6853      	ldr	r3, [r2, #4]
 800803e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008042:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008044:	6822      	ldr	r2, [r4, #0]
 8008046:	6893      	ldr	r3, [r2, #8]
 8008048:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800804c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800804e:	6822      	ldr	r2, [r4, #0]
 8008050:	6813      	ldr	r3, [r2, #0]
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008058:	4620      	mov	r0, r4
 800805a:	f7ff ff9e 	bl	8007f9a <UART_CheckIdleState>
}
 800805e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008060:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8008064:	f7fa fa56 	bl	8002514 <HAL_UART_MspInit>
 8008068:	e7d8      	b.n	800801c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800806a:	4620      	mov	r0, r4
 800806c:	f7ff fe62 	bl	8007d34 <UART_AdvFeatureConfig>
 8008070:	e7e3      	b.n	800803a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008072:	2001      	movs	r0, #1
}
 8008074:	4770      	bx	lr
	...

08008078 <UART_Start_Receive_IT>:
{
 8008078:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800807a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800807c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008080:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8008088:	6883      	ldr	r3, [r0, #8]
 800808a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808e:	d006      	beq.n	800809e <UART_Start_Receive_IT+0x26>
 8008090:	b9a3      	cbnz	r3, 80080bc <UART_Start_Receive_IT+0x44>
 8008092:	6903      	ldr	r3, [r0, #16]
 8008094:	b973      	cbnz	r3, 80080b4 <UART_Start_Receive_IT+0x3c>
 8008096:	23ff      	movs	r3, #255	; 0xff
 8008098:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800809c:	e014      	b.n	80080c8 <UART_Start_Receive_IT+0x50>
 800809e:	6903      	ldr	r3, [r0, #16]
 80080a0:	b923      	cbnz	r3, 80080ac <UART_Start_Receive_IT+0x34>
 80080a2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80080a6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080aa:	e00d      	b.n	80080c8 <UART_Start_Receive_IT+0x50>
 80080ac:	23ff      	movs	r3, #255	; 0xff
 80080ae:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080b2:	e009      	b.n	80080c8 <UART_Start_Receive_IT+0x50>
 80080b4:	237f      	movs	r3, #127	; 0x7f
 80080b6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080ba:	e005      	b.n	80080c8 <UART_Start_Receive_IT+0x50>
 80080bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080c0:	d02d      	beq.n	800811e <UART_Start_Receive_IT+0xa6>
 80080c2:	2300      	movs	r3, #0
 80080c4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080ce:	2322      	movs	r3, #34	; 0x22
 80080d0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d4:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	f101 0308 	add.w	r3, r1, #8
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	3108      	adds	r1, #8
 80080e4:	e841 3400 	strex	r4, r3, [r1]
 80080e8:	2c00      	cmp	r4, #0
 80080ea:	d1f3      	bne.n	80080d4 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80080ec:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80080ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080f2:	d01e      	beq.n	8008132 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080f4:	6883      	ldr	r3, [r0, #8]
 80080f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fa:	d042      	beq.n	8008182 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 80080fc:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <UART_Start_Receive_IT+0x12c>)
 80080fe:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008100:	6903      	ldr	r3, [r0, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d043      	beq.n	800818e <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008106:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	e852 3f00 	ldrex	r3, [r2]
 800810c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	e842 3100 	strex	r1, r3, [r2]
 8008114:	2900      	cmp	r1, #0
 8008116:	d1f6      	bne.n	8008106 <UART_Start_Receive_IT+0x8e>
}
 8008118:	2000      	movs	r0, #0
 800811a:	bc10      	pop	{r4}
 800811c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800811e:	6903      	ldr	r3, [r0, #16]
 8008120:	b91b      	cbnz	r3, 800812a <UART_Start_Receive_IT+0xb2>
 8008122:	237f      	movs	r3, #127	; 0x7f
 8008124:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008128:	e7ce      	b.n	80080c8 <UART_Start_Receive_IT+0x50>
 800812a:	233f      	movs	r3, #63	; 0x3f
 800812c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008130:	e7ca      	b.n	80080c8 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008132:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008136:	4293      	cmp	r3, r2
 8008138:	d8dc      	bhi.n	80080f4 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800813a:	6883      	ldr	r3, [r0, #8]
 800813c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008140:	d019      	beq.n	8008176 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008142:	4b19      	ldr	r3, [pc, #100]	; (80081a8 <UART_Start_Receive_IT+0x130>)
 8008144:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008146:	6903      	ldr	r3, [r0, #16]
 8008148:	b143      	cbz	r3, 800815c <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800814a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	e852 3f00 	ldrex	r3, [r2]
 8008150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	e842 3100 	strex	r1, r3, [r2]
 8008158:	2900      	cmp	r1, #0
 800815a:	d1f6      	bne.n	800814a <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800815c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	f102 0308 	add.w	r3, r2, #8
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	3208      	adds	r2, #8
 800816c:	e842 3100 	strex	r1, r3, [r2]
 8008170:	2900      	cmp	r1, #0
 8008172:	d1f3      	bne.n	800815c <UART_Start_Receive_IT+0xe4>
 8008174:	e7d0      	b.n	8008118 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008176:	6903      	ldr	r3, [r0, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e2      	bne.n	8008142 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800817c:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <UART_Start_Receive_IT+0x134>)
 800817e:	6743      	str	r3, [r0, #116]	; 0x74
 8008180:	e7e1      	b.n	8008146 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008182:	6903      	ldr	r3, [r0, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1b9      	bne.n	80080fc <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008188:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <UART_Start_Receive_IT+0x138>)
 800818a:	6743      	str	r3, [r0, #116]	; 0x74
 800818c:	e7b8      	b.n	8008100 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800818e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	e852 3f00 	ldrex	r3, [r2]
 8008194:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	e842 3100 	strex	r1, r3, [r2]
 800819c:	2900      	cmp	r1, #0
 800819e:	d1f6      	bne.n	800818e <UART_Start_Receive_IT+0x116>
 80081a0:	e7ba      	b.n	8008118 <UART_Start_Receive_IT+0xa0>
 80081a2:	bf00      	nop
 80081a4:	08007521 	.word	0x08007521
 80081a8:	080076d5 	.word	0x080076d5
 80081ac:	080078a1 	.word	0x080078a1
 80081b0:	080075fd 	.word	0x080075fd

080081b4 <HAL_UART_Receive_IT>:
{
 80081b4:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80081b6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d117      	bne.n	80081ee <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80081be:	b1c1      	cbz	r1, 80081f2 <HAL_UART_Receive_IT+0x3e>
 80081c0:	b1ca      	cbz	r2, 80081f6 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c2:	2300      	movs	r3, #0
 80081c4:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081c6:	6803      	ldr	r3, [r0, #0]
 80081c8:	4c0c      	ldr	r4, [pc, #48]	; (80081fc <HAL_UART_Receive_IT+0x48>)
 80081ca:	42a3      	cmp	r3, r4
 80081cc:	d00c      	beq.n	80081e8 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80081d4:	d008      	beq.n	80081e8 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081d6:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	e854 3f00 	ldrex	r3, [r4]
 80081dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e0:	e844 3500 	strex	r5, r3, [r4]
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	d1f6      	bne.n	80081d6 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80081e8:	f7ff ff46 	bl	8008078 <UART_Start_Receive_IT>
 80081ec:	e000      	b.n	80081f0 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 80081ee:	2002      	movs	r0, #2
}
 80081f0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80081f2:	2001      	movs	r0, #1
 80081f4:	e7fc      	b.n	80081f0 <HAL_UART_Receive_IT+0x3c>
 80081f6:	2001      	movs	r0, #1
 80081f8:	e7fa      	b.n	80081f0 <HAL_UART_Receive_IT+0x3c>
 80081fa:	bf00      	nop
 80081fc:	40008000 	.word	0x40008000

08008200 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008200:	b082      	sub	sp, #8
 8008202:	ab02      	add	r3, sp, #8
 8008204:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008208:	6802      	ldr	r2, [r0, #0]
 800820a:	6853      	ldr	r3, [r2, #4]
 800820c:	f023 0310 	bic.w	r3, r3, #16
 8008210:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008214:	430b      	orrs	r3, r1
 8008216:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008218:	6802      	ldr	r2, [r0, #0]
 800821a:	6853      	ldr	r3, [r2, #4]
 800821c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008220:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008224:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008228:	6053      	str	r3, [r2, #4]
}
 800822a:	b002      	add	sp, #8
 800822c:	4770      	bx	lr
	...

08008230 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008230:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008232:	b92b      	cbnz	r3, 8008240 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008234:	2301      	movs	r3, #1
 8008236:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800823a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800823e:	4770      	bx	lr
{
 8008240:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008242:	6803      	ldr	r3, [r0, #0]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800824a:	6899      	ldr	r1, [r3, #8]
 800824c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800824e:	4d09      	ldr	r5, [pc, #36]	; (8008274 <UARTEx_SetNbDataToProcess+0x44>)
 8008250:	5c6b      	ldrb	r3, [r5, r1]
 8008252:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008254:	4c08      	ldr	r4, [pc, #32]	; (8008278 <UARTEx_SetNbDataToProcess+0x48>)
 8008256:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008258:	fb93 f3f1 	sdiv	r3, r3, r1
 800825c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008260:	5cab      	ldrb	r3, [r5, r2]
 8008262:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008264:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008266:	fb93 f3f2 	sdiv	r3, r3, r2
 800826a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800826e:	bc30      	pop	{r4, r5}
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	080199e8 	.word	0x080199e8
 8008278:	080199e0 	.word	0x080199e0

0800827c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800827c:	b510      	push	{r4, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	ab04      	add	r3, sp, #16
 8008282:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008286:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800828a:	2b01      	cmp	r3, #1
 800828c:	d035      	beq.n	80082fa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800828e:	4604      	mov	r4, r0
 8008290:	2301      	movs	r3, #1
 8008292:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008296:	2324      	movs	r3, #36	; 0x24
 8008298:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800829c:	6802      	ldr	r2, [r0, #0]
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	f023 0301 	bic.w	r3, r3, #1
 80082a4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80082a6:	6801      	ldr	r1, [r0, #0]
 80082a8:	688b      	ldr	r3, [r1, #8]
 80082aa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80082ae:	9a02      	ldr	r2, [sp, #8]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80082b4:	b1aa      	cbz	r2, 80082e2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80082b6:	6822      	ldr	r2, [r4, #0]
 80082b8:	6813      	ldr	r3, [r2, #0]
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80082c0:	f7f9 feae 	bl	8002020 <HAL_GetTick>
 80082c4:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082c6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80082ca:	9200      	str	r2, [sp, #0]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082d2:	4620      	mov	r0, r4
 80082d4:	f7ff fd93 	bl	8007dfe <UART_WaitOnFlagUntilTimeout>
 80082d8:	b948      	cbnz	r0, 80082ee <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80082da:	2320      	movs	r3, #32
 80082dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80082e0:	e006      	b.n	80082f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80082e2:	ab04      	add	r3, sp, #16
 80082e4:	e913 0006 	ldmdb	r3, {r1, r2}
 80082e8:	f7ff ff8a 	bl	8008200 <UARTEx_Wakeup_AddressConfig>
 80082ec:	e7e3      	b.n	80082b6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80082ee:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80082f0:	2300      	movs	r3, #0
 80082f2:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 80082f6:	b004      	add	sp, #16
 80082f8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80082fa:	2002      	movs	r0, #2
 80082fc:	e7fb      	b.n	80082f6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080082fe <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80082fe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008302:	2b01      	cmp	r3, #1
 8008304:	d010      	beq.n	8008328 <HAL_UARTEx_EnableStopMode+0x2a>
 8008306:	2301      	movs	r3, #1
 8008308:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800830c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	e852 3f00 	ldrex	r3, [r2]
 8008312:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	e842 3100 	strex	r1, r3, [r2]
 800831a:	2900      	cmp	r1, #0
 800831c:	d1f6      	bne.n	800830c <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800831e:	2300      	movs	r3, #0
 8008320:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8008324:	4618      	mov	r0, r3
 8008326:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008328:	2002      	movs	r0, #2
}
 800832a:	4770      	bx	lr

0800832c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800832c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008330:	2b01      	cmp	r3, #1
 8008332:	d018      	beq.n	8008366 <HAL_UARTEx_DisableFifoMode+0x3a>
 8008334:	2301      	movs	r3, #1
 8008336:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800833a:	2324      	movs	r3, #36	; 0x24
 800833c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008340:	6803      	ldr	r3, [r0, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008344:	6819      	ldr	r1, [r3, #0]
 8008346:	f021 0101 	bic.w	r1, r1, #1
 800834a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800834c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008350:	2300      	movs	r3, #0
 8008352:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008354:	6801      	ldr	r1, [r0, #0]
 8008356:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008358:	2220      	movs	r2, #32
 800835a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800835e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8008362:	4618      	mov	r0, r3
 8008364:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008366:	2002      	movs	r0, #2
}
 8008368:	4770      	bx	lr

0800836a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800836a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800836c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008370:	2b01      	cmp	r3, #1
 8008372:	d01d      	beq.n	80083b0 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008374:	4604      	mov	r4, r0
 8008376:	2301      	movs	r3, #1
 8008378:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800837c:	2324      	movs	r3, #36	; 0x24
 800837e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008382:	6803      	ldr	r3, [r0, #0]
 8008384:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800838e:	6802      	ldr	r2, [r0, #0]
 8008390:	6893      	ldr	r3, [r2, #8]
 8008392:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008396:	4319      	orrs	r1, r3
 8008398:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800839a:	f7ff ff49 	bl	8008230 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80083a2:	2320      	movs	r3, #32
 80083a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80083a8:	2000      	movs	r0, #0
 80083aa:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80083b0:	2002      	movs	r0, #2
 80083b2:	e7fc      	b.n	80083ae <HAL_UARTEx_SetTxFifoThreshold+0x44>

080083b4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80083b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80083b6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d01d      	beq.n	80083fa <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80083be:	4604      	mov	r4, r0
 80083c0:	2301      	movs	r3, #1
 80083c2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80083c6:	2324      	movs	r3, #36	; 0x24
 80083c8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083cc:	6803      	ldr	r3, [r0, #0]
 80083ce:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083d8:	6802      	ldr	r2, [r0, #0]
 80083da:	6893      	ldr	r3, [r2, #8]
 80083dc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80083e0:	4319      	orrs	r1, r3
 80083e2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80083e4:	f7ff ff24 	bl	8008230 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80083ec:	2320      	movs	r3, #32
 80083ee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80083f2:	2000      	movs	r0, #0
 80083f4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80083f8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80083fa:	2002      	movs	r0, #2
 80083fc:	e7fc      	b.n	80083f8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008400 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008400:	4b13      	ldr	r3, [pc, #76]	; (8008450 <FATFS_LinkDriverEx+0x50>)
 8008402:	7a5b      	ldrb	r3, [r3, #9]
 8008404:	bb13      	cbnz	r3, 800844c <FATFS_LinkDriverEx+0x4c>
{
 8008406:	b510      	push	{r4, lr}
 8008408:	4604      	mov	r4, r0
 800840a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800840e:	4b10      	ldr	r3, [pc, #64]	; (8008450 <FATFS_LinkDriverEx+0x50>)
 8008410:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008414:	fa5f fc8c 	uxtb.w	ip, ip
 8008418:	f04f 0e00 	mov.w	lr, #0
 800841c:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8008420:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008424:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8008428:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800842c:	7a5c      	ldrb	r4, [r3, #9]
 800842e:	441c      	add	r4, r3
 8008430:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008432:	7a5a      	ldrb	r2, [r3, #9]
 8008434:	1c54      	adds	r4, r2, #1
 8008436:	b2e4      	uxtb	r4, r4
 8008438:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800843a:	3230      	adds	r2, #48	; 0x30
 800843c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800843e:	233a      	movs	r3, #58	; 0x3a
 8008440:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008442:	232f      	movs	r3, #47	; 0x2f
 8008444:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008446:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800844a:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800844c:	2001      	movs	r0, #1
}
 800844e:	4770      	bx	lr
 8008450:	20000974 	.word	0x20000974

08008454 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008454:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8008456:	2200      	movs	r2, #0
 8008458:	f7ff ffd2 	bl	8008400 <FATFS_LinkDriverEx>
}
 800845c:	bd08      	pop	{r3, pc}
	...

08008460 <SetRow>:
 * Fragmentation decoder algorithm utilities
 *=============================================================================
 */

static void SetRow( uint8_t *src, uint16_t row, uint16_t size )
{
 8008460:	460b      	mov	r3, r1
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderWrite != NULL ) )
 8008462:	4906      	ldr	r1, [pc, #24]	; (800847c <SetRow+0x1c>)
 8008464:	6809      	ldr	r1, [r1, #0]
 8008466:	b139      	cbz	r1, 8008478 <SetRow+0x18>
{
 8008468:	b510      	push	{r4, lr}
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderWrite != NULL ) )
 800846a:	684c      	ldr	r4, [r1, #4]
 800846c:	b11c      	cbz	r4, 8008476 <SetRow+0x16>
    {
        FragDecoder.Callbacks->FragDecoderWrite( row * size, src, size );
 800846e:	4601      	mov	r1, r0
 8008470:	fb02 f003 	mul.w	r0, r2, r3
 8008474:	47a0      	blx	r4
    }
}
 8008476:	bd10      	pop	{r4, pc}
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000980 	.word	0x20000980

08008480 <GetRow>:

static void GetRow( uint8_t *dst, uint16_t row, uint16_t size )
{
 8008480:	460b      	mov	r3, r1
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderRead != NULL ) )
 8008482:	4906      	ldr	r1, [pc, #24]	; (800849c <GetRow+0x1c>)
 8008484:	6809      	ldr	r1, [r1, #0]
 8008486:	b139      	cbz	r1, 8008498 <GetRow+0x18>
{
 8008488:	b510      	push	{r4, lr}
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderRead != NULL ) )
 800848a:	688c      	ldr	r4, [r1, #8]
 800848c:	b11c      	cbz	r4, 8008496 <GetRow+0x16>
    {
        FragDecoder.Callbacks->FragDecoderRead( row * size, dst, size );
 800848e:	4601      	mov	r1, r0
 8008490:	fb02 f003 	mul.w	r0, r2, r3
 8008494:	47a0      	blx	r4
    }
}
 8008496:	bd10      	pop	{r4, pc}
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20000980 	.word	0x20000980

080084a0 <GetParity>:

static uint8_t GetParity( uint16_t index, uint8_t *matrixRow )
{
    uint8_t parity;
    parity = matrixRow[index >> 3];
 80084a0:	08c3      	lsrs	r3, r0, #3
 80084a2:	5ccb      	ldrb	r3, [r1, r3]
    parity = ( parity >> ( 7 - ( index % 8 ) ) ) & 0x01;
 80084a4:	43c0      	mvns	r0, r0
 80084a6:	f000 0007 	and.w	r0, r0, #7
 80084aa:	fa43 f000 	asr.w	r0, r3, r0
    return parity;
}
 80084ae:	f000 0001 	and.w	r0, r0, #1
 80084b2:	4770      	bx	lr

080084b4 <SetParity>:

static void SetParity( uint16_t index, uint8_t *matrixRow, uint8_t parity )
{
    uint8_t mask = 0xFF - ( 1 << ( 7 - ( index % 8 ) ) );
 80084b4:	ea6f 0c00 	mvn.w	ip, r0
 80084b8:	f00c 0c07 	and.w	ip, ip, #7
 80084bc:	2301      	movs	r3, #1
 80084be:	fa03 f30c 	lsl.w	r3, r3, ip
 80084c2:	b2db      	uxtb	r3, r3
    parity = parity << ( 7 - ( index % 8 ) );
 80084c4:	fa02 f20c 	lsl.w	r2, r2, ip
    matrixRow[index >> 3] = ( matrixRow[index >> 3] & mask ) + parity;
 80084c8:	08c0      	lsrs	r0, r0, #3
 80084ca:	f811 c000 	ldrb.w	ip, [r1, r0]
 80084ce:	ea2c 0303 	bic.w	r3, ip, r3
 80084d2:	fa53 f282 	uxtab	r2, r3, r2
 80084d6:	540a      	strb	r2, [r1, r0]
}
 80084d8:	4770      	bx	lr

080084da <IsPowerOfTwo>:

static bool IsPowerOfTwo( uint32_t x )
{
    uint8_t sumBit = 0;

    for( uint8_t i = 0; i < 32; i++ )
 80084da:	2200      	movs	r2, #0
    uint8_t sumBit = 0;
 80084dc:	4611      	mov	r1, r2
    for( uint8_t i = 0; i < 32; i++ )
 80084de:	e007      	b.n	80084f0 <IsPowerOfTwo+0x16>
    {
        sumBit += ( x & ( 1 << i ) ) >> i;
 80084e0:	2301      	movs	r3, #1
 80084e2:	4093      	lsls	r3, r2
 80084e4:	4003      	ands	r3, r0
 80084e6:	40d3      	lsrs	r3, r2
 80084e8:	4419      	add	r1, r3
 80084ea:	b2c9      	uxtb	r1, r1
    for( uint8_t i = 0; i < 32; i++ )
 80084ec:	3201      	adds	r2, #1
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	2a1f      	cmp	r2, #31
 80084f2:	d9f5      	bls.n	80084e0 <IsPowerOfTwo+0x6>
    }
    if( sumBit == 1 )
 80084f4:	2901      	cmp	r1, #1
 80084f6:	d001      	beq.n	80084fc <IsPowerOfTwo+0x22>
    {
        return true;
    }
    return false;
 80084f8:	2000      	movs	r0, #0
 80084fa:	4770      	bx	lr
        return true;
 80084fc:	2001      	movs	r0, #1
}
 80084fe:	4770      	bx	lr

08008500 <XorDataLine>:

static void XorDataLine( uint8_t *line1, uint8_t *line2, int32_t size )
{
    for( int32_t i = 0; i < size; i++ )
 8008500:	2300      	movs	r3, #0
 8008502:	4293      	cmp	r3, r2
 8008504:	da0d      	bge.n	8008522 <XorDataLine+0x22>
{
 8008506:	b500      	push	{lr}
    {
        line1[i] = line1[i] ^ line2[i];
 8008508:	f810 c003 	ldrb.w	ip, [r0, r3]
 800850c:	f811 e003 	ldrb.w	lr, [r1, r3]
 8008510:	ea8c 0c0e 	eor.w	ip, ip, lr
 8008514:	f800 c003 	strb.w	ip, [r0, r3]
    for( int32_t i = 0; i < size; i++ )
 8008518:	3301      	adds	r3, #1
 800851a:	4293      	cmp	r3, r2
 800851c:	dbf4      	blt.n	8008508 <XorDataLine+0x8>
    }
}
 800851e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008522:	4770      	bx	lr

08008524 <XorParityLine>:

static void XorParityLine( uint8_t *line1, uint8_t *line2, int32_t size )
{
 8008524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008528:	4607      	mov	r7, r0
 800852a:	4689      	mov	r9, r1
 800852c:	4690      	mov	r8, r2
    for( int32_t i = 0; i < size; i++ )
 800852e:	2500      	movs	r5, #0
 8008530:	e011      	b.n	8008556 <XorParityLine+0x32>
    {
        SetParity( i, line1, ( GetParity( i, line1 ) ^ GetParity( i, line2 ) ) );
 8008532:	b2ae      	uxth	r6, r5
 8008534:	4639      	mov	r1, r7
 8008536:	4630      	mov	r0, r6
 8008538:	f7ff ffb2 	bl	80084a0 <GetParity>
 800853c:	4604      	mov	r4, r0
 800853e:	4649      	mov	r1, r9
 8008540:	4630      	mov	r0, r6
 8008542:	f7ff ffad 	bl	80084a0 <GetParity>
 8008546:	ea84 0200 	eor.w	r2, r4, r0
 800854a:	b2d2      	uxtb	r2, r2
 800854c:	4639      	mov	r1, r7
 800854e:	4630      	mov	r0, r6
 8008550:	f7ff ffb0 	bl	80084b4 <SetParity>
    for( int32_t i = 0; i < size; i++ )
 8008554:	3501      	adds	r5, #1
 8008556:	4545      	cmp	r5, r8
 8008558:	dbeb      	blt.n	8008532 <XorParityLine+0xe>
    }
}
 800855a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800855e <FragPrbs23>:

static int32_t FragPrbs23( int32_t value )
{
    int32_t b0 = value & 0x01;
    int32_t b1 = ( value & 0x20 ) >> 5;
    return ( value >> 1 ) + ( ( b0 ^ b1 ) << 22 );
 800855e:	ea80 1360 	eor.w	r3, r0, r0, asr #5
 8008562:	059b      	lsls	r3, r3, #22
 8008564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8008568:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800856c:	4770      	bx	lr
	...

08008570 <FragGetParityMatrixRow>:

static void FragGetParityMatrixRow( int32_t n, int32_t m, uint8_t *matrixRow )
{
 8008570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008574:	4604      	mov	r4, r0
 8008576:	460e      	mov	r6, r1
 8008578:	4690      	mov	r8, r2
    int32_t mTemp;
    int32_t x;
    int32_t nbCoeff = 0;
    int32_t r;

    if( IsPowerOfTwo( m ) != false )
 800857a:	4608      	mov	r0, r1
 800857c:	f7ff ffad 	bl	80084da <IsPowerOfTwo>
 8008580:	b138      	cbz	r0, 8008592 <FragGetParityMatrixRow+0x22>
    {
        mTemp = 1;
 8008582:	2701      	movs	r7, #1
    else
    {
        mTemp = 0;
    }

    x = 1 + ( 1001 * n );
 8008584:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8008588:	fb03 f404 	mul.w	r4, r3, r4
 800858c:	3401      	adds	r4, #1
    for( uint16_t i = 0; i < ( ( m >> 3 ) + 1 ); i++ )
 800858e:	2300      	movs	r3, #0
 8008590:	e006      	b.n	80085a0 <FragGetParityMatrixRow+0x30>
        mTemp = 0;
 8008592:	2700      	movs	r7, #0
 8008594:	e7f6      	b.n	8008584 <FragGetParityMatrixRow+0x14>
    {
        matrixRow[i] = 0;
 8008596:	2200      	movs	r2, #0
 8008598:	f808 2003 	strb.w	r2, [r8, r3]
    for( uint16_t i = 0; i < ( ( m >> 3 ) + 1 ); i++ )
 800859c:	3301      	adds	r3, #1
 800859e:	b29b      	uxth	r3, r3
 80085a0:	ebb3 0fe6 	cmp.w	r3, r6, asr #3
 80085a4:	ddf7      	ble.n	8008596 <FragGetParityMatrixRow+0x26>
    int32_t nbCoeff = 0;
 80085a6:	f04f 0900 	mov.w	r9, #0
 80085aa:	e01b      	b.n	80085e4 <FragGetParityMatrixRow+0x74>
    while( nbCoeff < ( m >> 1 ) )
    {
        r = 1 << 16;
        while( r >= m )
        {
            x = FragPrbs23( x );
 80085ac:	4620      	mov	r0, r4
 80085ae:	f7ff ffd6 	bl	800855e <FragPrbs23>
 80085b2:	4604      	mov	r4, r0
            r = x % ( m + mTemp );
 80085b4:	19bb      	adds	r3, r7, r6
 80085b6:	fb90 f0f3 	sdiv	r0, r0, r3
 80085ba:	fb03 4010 	mls	r0, r3, r0, r4
        while( r >= m )
 80085be:	42b0      	cmp	r0, r6
 80085c0:	daf4      	bge.n	80085ac <FragGetParityMatrixRow+0x3c>
        }

        /* FEC algorithm optimization in V2.0.0 */
        if( ( GetParity( r, matrixRow ) == 0 ) || ( FragmentationPackageVersion == 1U ) )
 80085c2:	b285      	uxth	r5, r0
 80085c4:	4641      	mov	r1, r8
 80085c6:	4628      	mov	r0, r5
 80085c8:	f7ff ff6a 	bl	80084a0 <GetParity>
 80085cc:	b118      	cbz	r0, 80085d6 <FragGetParityMatrixRow+0x66>
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <FragGetParityMatrixRow+0x84>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d106      	bne.n	80085e4 <FragGetParityMatrixRow+0x74>
        {
            SetParity( r, matrixRow, 1 );
 80085d6:	2201      	movs	r2, #1
 80085d8:	4641      	mov	r1, r8
 80085da:	4628      	mov	r0, r5
 80085dc:	f7ff ff6a 	bl	80084b4 <SetParity>
            nbCoeff += 1;
 80085e0:	f109 0901 	add.w	r9, r9, #1
    while( nbCoeff < ( m >> 1 ) )
 80085e4:	ebb9 0f66 	cmp.w	r9, r6, asr #1
 80085e8:	da02      	bge.n	80085f0 <FragGetParityMatrixRow+0x80>
        r = 1 << 16;
 80085ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80085ee:	e7e6      	b.n	80085be <FragGetParityMatrixRow+0x4e>
        }
    }
}
 80085f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f4:	200009bc 	.word	0x200009bc

080085f8 <BitArrayFindFirstOne>:

static uint16_t BitArrayFindFirstOne( uint8_t *bitArray, uint16_t size )
{
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	4606      	mov	r6, r0
 80085fc:	460d      	mov	r5, r1
    for( uint16_t i = 0; i < size; i++ )
 80085fe:	2400      	movs	r4, #0
 8008600:	e001      	b.n	8008606 <BitArrayFindFirstOne+0xe>
 8008602:	3401      	adds	r4, #1
 8008604:	b2a4      	uxth	r4, r4
 8008606:	42ac      	cmp	r4, r5
 8008608:	d206      	bcs.n	8008618 <BitArrayFindFirstOne+0x20>
    {
        if( GetParity( i, bitArray ) == 1 )
 800860a:	4631      	mov	r1, r6
 800860c:	4620      	mov	r0, r4
 800860e:	f7ff ff47 	bl	80084a0 <GetParity>
 8008612:	2801      	cmp	r0, #1
 8008614:	d1f5      	bne.n	8008602 <BitArrayFindFirstOne+0xa>
 8008616:	e000      	b.n	800861a <BitArrayFindFirstOne+0x22>
        {
            return i;
        }
    }
    return 0;
 8008618:	2400      	movs	r4, #0
}
 800861a:	4620      	mov	r0, r4
 800861c:	bd70      	pop	{r4, r5, r6, pc}

0800861e <BitArrayIsAllZeros>:

static uint8_t BitArrayIsAllZeros( uint8_t *bitArray, uint16_t  size )
{
 800861e:	b570      	push	{r4, r5, r6, lr}
 8008620:	4606      	mov	r6, r0
 8008622:	460d      	mov	r5, r1
    for( uint16_t i = 0; i < size; i++ )
 8008624:	2400      	movs	r4, #0
 8008626:	e001      	b.n	800862c <BitArrayIsAllZeros+0xe>
 8008628:	3401      	adds	r4, #1
 800862a:	b2a4      	uxth	r4, r4
 800862c:	42ac      	cmp	r4, r5
 800862e:	d207      	bcs.n	8008640 <BitArrayIsAllZeros+0x22>
    {
        if( GetParity( i, bitArray ) == 1 )
 8008630:	4631      	mov	r1, r6
 8008632:	4620      	mov	r0, r4
 8008634:	f7ff ff34 	bl	80084a0 <GetParity>
 8008638:	2801      	cmp	r0, #1
 800863a:	d1f5      	bne.n	8008628 <BitArrayIsAllZeros+0xa>
        {
            return 0;
 800863c:	2000      	movs	r0, #0
 800863e:	e000      	b.n	8008642 <BitArrayIsAllZeros+0x24>
        }
    }
    return 1;
 8008640:	2001      	movs	r0, #1
}
 8008642:	bd70      	pop	{r4, r5, r6, pc}

08008644 <FragFindMissingFrags>:

static void FragFindMissingFrags( uint16_t counter )
{
    int32_t i;
    for( i = FragDecoder.Status.FragNbLastRx; i < ( counter - 1 ); i++ )
 8008644:	4b10      	ldr	r3, [pc, #64]	; (8008688 <FragFindMissingFrags+0x44>)
 8008646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008648:	e000      	b.n	800864c <FragFindMissingFrags+0x8>
 800864a:	3301      	adds	r3, #1
 800864c:	1e42      	subs	r2, r0, #1
 800864e:	429a      	cmp	r2, r3
 8008650:	dd0e      	ble.n	8008670 <FragFindMissingFrags+0x2c>
    {
        if( i < FragDecoder.FragNb )
 8008652:	4a0d      	ldr	r2, [pc, #52]	; (8008688 <FragFindMissingFrags+0x44>)
 8008654:	8892      	ldrh	r2, [r2, #4]
 8008656:	429a      	cmp	r2, r3
 8008658:	ddf7      	ble.n	800864a <FragFindMissingFrags+0x6>
        {
            FragDecoder.Status.FragNbLost++;
 800865a:	490b      	ldr	r1, [pc, #44]	; (8008688 <FragFindMissingFrags+0x44>)
 800865c:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
 800865e:	3201      	adds	r2, #1
 8008660:	b292      	uxth	r2, r2
 8008662:	868a      	strh	r2, [r1, #52]	; 0x34
            FragDecoder.FragNbMissingIndex[i] = FragDecoder.Status.FragNbLost;
 8008664:	f103 0c04 	add.w	ip, r3, #4
 8008668:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 800866c:	80ca      	strh	r2, [r1, #6]
 800866e:	e7ec      	b.n	800864a <FragFindMissingFrags+0x6>
        }
    }
    if( i < FragDecoder.FragNb )
 8008670:	4a05      	ldr	r2, [pc, #20]	; (8008688 <FragFindMissingFrags+0x44>)
 8008672:	8892      	ldrh	r2, [r2, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	dd02      	ble.n	800867e <FragFindMissingFrags+0x3a>
    {
        FragDecoder.Status.FragNbLastRx = counter;
 8008678:	4b03      	ldr	r3, [pc, #12]	; (8008688 <FragFindMissingFrags+0x44>)
 800867a:	86d8      	strh	r0, [r3, #54]	; 0x36
 800867c:	4770      	bx	lr
    }
    else
    {
        FragDecoder.Status.FragNbLastRx = FragDecoder.FragNb + 1;
 800867e:	3201      	adds	r2, #1
 8008680:	4b01      	ldr	r3, [pc, #4]	; (8008688 <FragFindMissingFrags+0x44>)
 8008682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
}
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20000980 	.word	0x20000980

0800868c <FragFindMissingIndex>:

static uint16_t FragFindMissingIndex( uint16_t x )
{
 800868c:	4601      	mov	r1, r0
    for( uint16_t i = 0; i < FragDecoder.FragNb; i++ )
 800868e:	2000      	movs	r0, #0
 8008690:	e001      	b.n	8008696 <FragFindMissingIndex+0xa>
 8008692:	3001      	adds	r0, #1
 8008694:	b280      	uxth	r0, r0
 8008696:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <FragFindMissingIndex+0x28>)
 8008698:	889b      	ldrh	r3, [r3, #4]
 800869a:	4283      	cmp	r3, r0
 800869c:	d908      	bls.n	80086b0 <FragFindMissingIndex+0x24>
    {
        if( FragDecoder.FragNbMissingIndex[i] == ( x + 1 ) )
 800869e:	1d02      	adds	r2, r0, #4
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <FragFindMissingIndex+0x28>)
 80086a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80086a6:	88da      	ldrh	r2, [r3, #6]
 80086a8:	1c4b      	adds	r3, r1, #1
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d1f1      	bne.n	8008692 <FragFindMissingIndex+0x6>
 80086ae:	e000      	b.n	80086b2 <FragFindMissingIndex+0x26>
        {
            return i;
        }
    }
    return 0;
 80086b0:	2000      	movs	r0, #0
}
 80086b2:	4770      	bx	lr
 80086b4:	20000980 	.word	0x20000980

080086b8 <FragExtractLineFromBinaryMatrix>:

static void FragExtractLineFromBinaryMatrix( uint8_t *bitArray, uint16_t rowIndex, uint16_t bitsInRow )
{
 80086b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086bc:	4606      	mov	r6, r0
 80086be:	4690      	mov	r8, r2
    uint32_t findByte = 0;
    uint32_t findBitInByte = 0;

    if( rowIndex > 0 )
 80086c0:	460c      	mov	r4, r1
 80086c2:	b1e9      	cbz	r1, 8008700 <FragExtractLineFromBinaryMatrix+0x48>
    {
        findByte      = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) >> 3;
 80086c4:	fb01 f502 	mul.w	r5, r1, r2
 80086c8:	1e4b      	subs	r3, r1, #1
 80086ca:	fb01 f303 	mul.w	r3, r1, r3
 80086ce:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 80086d2:	10ef      	asrs	r7, r5, #3
        findBitInByte = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) % 8;
 80086d4:	426b      	negs	r3, r5
 80086d6:	f005 0507 	and.w	r5, r5, #7
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	bf58      	it	pl
 80086e0:	425d      	negpl	r5, r3
    }
    if( rowIndex > 0 )
 80086e2:	b194      	cbz	r4, 800870a <FragExtractLineFromBinaryMatrix+0x52>
    {
        for( uint16_t i = 0; i < rowIndex; i++ )
 80086e4:	f04f 0900 	mov.w	r9, #0
 80086e8:	45a1      	cmp	r9, r4
 80086ea:	d20e      	bcs.n	800870a <FragExtractLineFromBinaryMatrix+0x52>
        {
            SetParity( i, bitArray, 0 );
 80086ec:	2200      	movs	r2, #0
 80086ee:	4631      	mov	r1, r6
 80086f0:	4648      	mov	r0, r9
 80086f2:	f7ff fedf 	bl	80084b4 <SetParity>
        for( uint16_t i = 0; i < rowIndex; i++ )
 80086f6:	f109 0901 	add.w	r9, r9, #1
 80086fa:	fa1f f989 	uxth.w	r9, r9
 80086fe:	e7f3      	b.n	80086e8 <FragExtractLineFromBinaryMatrix+0x30>
    uint32_t findBitInByte = 0;
 8008700:	2500      	movs	r5, #0
    uint32_t findByte = 0;
 8008702:	462f      	mov	r7, r5
 8008704:	e7ed      	b.n	80086e2 <FragExtractLineFromBinaryMatrix+0x2a>
        }
    }
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 8008706:	3401      	adds	r4, #1
 8008708:	b2a4      	uxth	r4, r4
 800870a:	4544      	cmp	r4, r8
 800870c:	d211      	bcs.n	8008732 <FragExtractLineFromBinaryMatrix+0x7a>
    {
        SetParity( i,
                   bitArray,
                   ( FragDecoder.MatrixM2B[findByte] >> ( 7 - findBitInByte ) ) & 0x01 );
 800870e:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <FragExtractLineFromBinaryMatrix+0x80>)
 8008710:	443b      	add	r3, r7
 8008712:	7b1a      	ldrb	r2, [r3, #12]
 8008714:	f1c5 0307 	rsb	r3, r5, #7
 8008718:	411a      	asrs	r2, r3
        SetParity( i,
 800871a:	f002 0201 	and.w	r2, r2, #1
 800871e:	4631      	mov	r1, r6
 8008720:	4620      	mov	r0, r4
 8008722:	f7ff fec7 	bl	80084b4 <SetParity>

        findBitInByte++;
 8008726:	3501      	adds	r5, #1
        if( findBitInByte == 8 )
 8008728:	2d08      	cmp	r5, #8
 800872a:	d1ec      	bne.n	8008706 <FragExtractLineFromBinaryMatrix+0x4e>
        {
            findBitInByte = 0;
            findByte++;
 800872c:	3701      	adds	r7, #1
            findBitInByte = 0;
 800872e:	2500      	movs	r5, #0
 8008730:	e7e9      	b.n	8008706 <FragExtractLineFromBinaryMatrix+0x4e>
        }
    }
}
 8008732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008736:	bf00      	nop
 8008738:	20000980 	.word	0x20000980

0800873c <FragPushLineToBinaryMatrix>:

static void FragPushLineToBinaryMatrix( uint8_t *bitArray, uint16_t rowIndex, uint16_t bitsInRow )
{
 800873c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008740:	4607      	mov	r7, r0
 8008742:	4616      	mov	r6, r2
    uint32_t findByte = 0;
    uint32_t findBitInByte = 0;

    if( rowIndex > 0 )
 8008744:	460c      	mov	r4, r1
 8008746:	b369      	cbz	r1, 80087a4 <FragPushLineToBinaryMatrix+0x68>
    {
        findByte      = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) >> 3;
 8008748:	fb01 f502 	mul.w	r5, r1, r2
 800874c:	1e4b      	subs	r3, r1, #1
 800874e:	fb01 f303 	mul.w	r3, r1, r3
 8008752:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 8008756:	ea4f 08e5 	mov.w	r8, r5, asr #3
        findBitInByte = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) % 8;
 800875a:	426b      	negs	r3, r5
 800875c:	f005 0507 	and.w	r5, r5, #7
 8008760:	f003 0307 	and.w	r3, r3, #7
 8008764:	bf58      	it	pl
 8008766:	425d      	negpl	r5, r3
 8008768:	e004      	b.n	8008774 <FragPushLineToBinaryMatrix+0x38>
    {
        if( GetParity( i, bitArray ) == 0 )
        {
            FragDecoder.MatrixM2B[findByte] = FragDecoder.MatrixM2B[findByte] & ( 0xFF - ( 1 << ( 7 - findBitInByte ) ) );
        }
        findBitInByte++;
 800876a:	3501      	adds	r5, #1
        if( findBitInByte == 8 )
 800876c:	2d08      	cmp	r5, #8
 800876e:	d015      	beq.n	800879c <FragPushLineToBinaryMatrix+0x60>
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 8008770:	3401      	adds	r4, #1
 8008772:	b2a4      	uxth	r4, r4
 8008774:	42b4      	cmp	r4, r6
 8008776:	d218      	bcs.n	80087aa <FragPushLineToBinaryMatrix+0x6e>
        if( GetParity( i, bitArray ) == 0 )
 8008778:	4639      	mov	r1, r7
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff fe90 	bl	80084a0 <GetParity>
 8008780:	2800      	cmp	r0, #0
 8008782:	d1f2      	bne.n	800876a <FragPushLineToBinaryMatrix+0x2e>
            FragDecoder.MatrixM2B[findByte] = FragDecoder.MatrixM2B[findByte] & ( 0xFF - ( 1 << ( 7 - findBitInByte ) ) );
 8008784:	4a0a      	ldr	r2, [pc, #40]	; (80087b0 <FragPushLineToBinaryMatrix+0x74>)
 8008786:	4442      	add	r2, r8
 8008788:	7b11      	ldrb	r1, [r2, #12]
 800878a:	f1c5 0007 	rsb	r0, r5, #7
 800878e:	2301      	movs	r3, #1
 8008790:	4083      	lsls	r3, r0
 8008792:	43db      	mvns	r3, r3
 8008794:	b25b      	sxtb	r3, r3
 8008796:	400b      	ands	r3, r1
 8008798:	7313      	strb	r3, [r2, #12]
 800879a:	e7e6      	b.n	800876a <FragPushLineToBinaryMatrix+0x2e>
        {
            findBitInByte = 0;
            findByte++;
 800879c:	f108 0801 	add.w	r8, r8, #1
            findBitInByte = 0;
 80087a0:	2500      	movs	r5, #0
 80087a2:	e7e5      	b.n	8008770 <FragPushLineToBinaryMatrix+0x34>
    uint32_t findBitInByte = 0;
 80087a4:	2500      	movs	r5, #0
    uint32_t findByte = 0;
 80087a6:	46a8      	mov	r8, r5
 80087a8:	e7e4      	b.n	8008774 <FragPushLineToBinaryMatrix+0x38>
        }
    }
}
 80087aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ae:	bf00      	nop
 80087b0:	20000980 	.word	0x20000980

080087b4 <FragDecoderInit>:
{
 80087b4:	b510      	push	{r4, lr}
    FragmentationPackageVersion = fragPVer;
 80087b6:	4c17      	ldr	r4, [pc, #92]	; (8008814 <FragDecoderInit+0x60>)
 80087b8:	7023      	strb	r3, [r4, #0]
    FragDecoder.Callbacks = callbacks;
 80087ba:	4c17      	ldr	r4, [pc, #92]	; (8008818 <FragDecoderInit+0x64>)
 80087bc:	6022      	str	r2, [r4, #0]
    FragDecoder.FragNb = fragNb;                                /* FragNb = FRAG_MAX_SIZE */
 80087be:	80a0      	strh	r0, [r4, #4]
    FragDecoder.FragSize = fragSize;                            /* number of byte on a row */
 80087c0:	71a1      	strb	r1, [r4, #6]
    FragDecoder.Status.FragNbLastRx = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	86e3      	strh	r3, [r4, #54]	; 0x36
    FragDecoder.Status.FragNbLost = 0;
 80087c6:	86a3      	strh	r3, [r4, #52]	; 0x34
    FragDecoder.M2BLine = 0;
 80087c8:	60a3      	str	r3, [r4, #8]
    for( uint16_t i = 0; i < FRAG_MAX_NB; i++ )
 80087ca:	e007      	b.n	80087dc <FragDecoderInit+0x28>
        FragDecoder.FragNbMissingIndex[i] = 1;
 80087cc:	1d18      	adds	r0, r3, #4
 80087ce:	4912      	ldr	r1, [pc, #72]	; (8008818 <FragDecoderInit+0x64>)
 80087d0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80087d4:	2001      	movs	r0, #1
 80087d6:	80c8      	strh	r0, [r1, #6]
    for( uint16_t i = 0; i < FRAG_MAX_NB; i++ )
 80087d8:	4403      	add	r3, r0
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2b10      	cmp	r3, #16
 80087de:	d9f5      	bls.n	80087cc <FragDecoderInit+0x18>
    for( uint32_t i = 0; i < ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ); i++ )
 80087e0:	2300      	movs	r3, #0
 80087e2:	b10b      	cbz	r3, 80087e8 <FragDecoderInit+0x34>
    for( uint32_t i = 0; i < ( ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ) * FRAG_MAX_REDUNDANCY ); i++ )
 80087e4:	2300      	movs	r3, #0
 80087e6:	e00b      	b.n	8008800 <FragDecoderInit+0x4c>
        FragDecoder.S[i] = 0;
 80087e8:	490b      	ldr	r1, [pc, #44]	; (8008818 <FragDecoderInit+0x64>)
 80087ea:	4419      	add	r1, r3
 80087ec:	2000      	movs	r0, #0
 80087ee:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    for( uint32_t i = 0; i < ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ); i++ )
 80087f2:	3301      	adds	r3, #1
 80087f4:	e7f5      	b.n	80087e2 <FragDecoderInit+0x2e>
        FragDecoder.MatrixM2B[i] = 0xFF;
 80087f6:	4908      	ldr	r1, [pc, #32]	; (8008818 <FragDecoderInit+0x64>)
 80087f8:	4419      	add	r1, r3
 80087fa:	20ff      	movs	r0, #255	; 0xff
 80087fc:	7308      	strb	r0, [r1, #12]
    for( uint32_t i = 0; i < ( ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ) * FRAG_MAX_REDUNDANCY ); i++ )
 80087fe:	3301      	adds	r3, #1
 8008800:	2b01      	cmp	r3, #1
 8008802:	d9f8      	bls.n	80087f6 <FragDecoderInit+0x42>
    if( FragDecoder.Callbacks->FragDecoderErase != NULL )
 8008804:	6813      	ldr	r3, [r2, #0]
 8008806:	b103      	cbz	r3, 800880a <FragDecoderInit+0x56>
        FragDecoder.Callbacks->FragDecoderErase();
 8008808:	4798      	blx	r3
    FragDecoder.Status.FragNbLost = 0;
 800880a:	4b03      	ldr	r3, [pc, #12]	; (8008818 <FragDecoderInit+0x64>)
 800880c:	2200      	movs	r2, #0
 800880e:	869a      	strh	r2, [r3, #52]	; 0x34
    FragDecoder.Status.FragNbLastRx = 0;
 8008810:	86da      	strh	r2, [r3, #54]	; 0x36
}
 8008812:	bd10      	pop	{r4, pc}
 8008814:	200009bc 	.word	0x200009bc
 8008818:	20000980 	.word	0x20000980

0800881c <FragDecoderProcess>:
{
 800881c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	4604      	mov	r4, r0
 8008822:	4689      	mov	r9, r1
    memset1( matrixRow, 0, ( FRAG_MAX_NB >> 3 ) + 1 );
 8008824:	2203      	movs	r2, #3
 8008826:	2100      	movs	r1, #0
 8008828:	4896      	ldr	r0, [pc, #600]	; (8008a84 <FragDecoderProcess+0x268>)
 800882a:	f009 fd40 	bl	80122ae <memset1>
    memset1( matrixDataTemp, 0, FRAG_MAX_SIZE );
 800882e:	2278      	movs	r2, #120	; 0x78
 8008830:	2100      	movs	r1, #0
 8008832:	4895      	ldr	r0, [pc, #596]	; (8008a88 <FragDecoderProcess+0x26c>)
 8008834:	f009 fd3b 	bl	80122ae <memset1>
    memset1( dataTempVector, 0, ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 );
 8008838:	2201      	movs	r2, #1
 800883a:	2100      	movs	r1, #0
 800883c:	4893      	ldr	r0, [pc, #588]	; (8008a8c <FragDecoderProcess+0x270>)
 800883e:	f009 fd36 	bl	80122ae <memset1>
    memset1( dataTempVector2, 0, ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 );
 8008842:	2201      	movs	r2, #1
 8008844:	2100      	movs	r1, #0
 8008846:	4892      	ldr	r0, [pc, #584]	; (8008a90 <FragDecoderProcess+0x274>)
 8008848:	f009 fd31 	bl	80122ae <memset1>
    FragDecoder.Status.FragNbRx = fragCounter;
 800884c:	4b91      	ldr	r3, [pc, #580]	; (8008a94 <FragDecoderProcess+0x278>)
 800884e:	865c      	strh	r4, [r3, #50]	; 0x32
    if( fragCounter < FragDecoder.Status.FragNbLastRx )
 8008850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008852:	42a3      	cmp	r3, r4
 8008854:	f200 810c 	bhi.w	8008a70 <FragDecoderProcess+0x254>
    if( fragCounter < ( FragDecoder.FragNb + 1 ) )
 8008858:	4b8e      	ldr	r3, [pc, #568]	; (8008a94 <FragDecoderProcess+0x278>)
 800885a:	889b      	ldrh	r3, [r3, #4]
 800885c:	42a3      	cmp	r3, r4
 800885e:	d20a      	bcs.n	8008876 <FragDecoderProcess+0x5a>
        if( FragDecoder.Status.FragNbLost > FRAG_MAX_REDUNDANCY )
 8008860:	4b8c      	ldr	r3, [pc, #560]	; (8008a94 <FragDecoderProcess+0x278>)
 8008862:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008864:	2b02      	cmp	r3, #2
 8008866:	d920      	bls.n	80088aa <FragDecoderProcess+0x8e>
            FragDecoder.Status.MatrixError = 1;
 8008868:	4b8a      	ldr	r3, [pc, #552]	; (8008a94 <FragDecoderProcess+0x278>)
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            return FRAG_SESSION_FINISHED;
 8008870:	2000      	movs	r0, #0
}
 8008872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        SetRow( rawData, fragCounter - 1, FragDecoder.FragSize );
 8008876:	4d87      	ldr	r5, [pc, #540]	; (8008a94 <FragDecoderProcess+0x278>)
 8008878:	1e61      	subs	r1, r4, #1
 800887a:	79aa      	ldrb	r2, [r5, #6]
 800887c:	b289      	uxth	r1, r1
 800887e:	4648      	mov	r0, r9
 8008880:	f7ff fdee 	bl	8008460 <SetRow>
        FragDecoder.FragNbMissingIndex[fragCounter - 1] = 0;
 8008884:	1ce3      	adds	r3, r4, #3
 8008886:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800888a:	2200      	movs	r2, #0
 800888c:	80da      	strh	r2, [r3, #6]
        FragFindMissingFrags( fragCounter );
 800888e:	4620      	mov	r0, r4
 8008890:	f7ff fed8 	bl	8008644 <FragFindMissingFrags>
        if( ( fragCounter == FragDecoder.FragNb ) && ( FragDecoder.Status.FragNbLost == 0U ) )
 8008894:	88ab      	ldrh	r3, [r5, #4]
 8008896:	42a3      	cmp	r3, r4
 8008898:	f040 80ed 	bne.w	8008a76 <FragDecoderProcess+0x25a>
 800889c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800889e:	b90b      	cbnz	r3, 80088a4 <FragDecoderProcess+0x88>
            return FRAG_SESSION_FINISHED;
 80088a0:	2000      	movs	r0, #0
 80088a2:	e7e6      	b.n	8008872 <FragDecoderProcess+0x56>
    return FRAG_SESSION_ONGOING;
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088a8:	e7e3      	b.n	8008872 <FragDecoderProcess+0x56>
        FragFindMissingFrags( fragCounter );
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff feca 	bl	8008644 <FragFindMissingFrags>
        if( FragDecoder.Status.FragNbLost == 0 )
 80088b0:	4b78      	ldr	r3, [pc, #480]	; (8008a94 <FragDecoderProcess+0x278>)
 80088b2:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d0dc      	beq.n	8008872 <FragDecoderProcess+0x56>
        FragGetParityMatrixRow( fragCounter - FragDecoder.FragNb, FragDecoder.FragNb, matrixRow );
 80088b8:	8899      	ldrh	r1, [r3, #4]
 80088ba:	4a72      	ldr	r2, [pc, #456]	; (8008a84 <FragDecoderProcess+0x268>)
 80088bc:	1a60      	subs	r0, r4, r1
 80088be:	f7ff fe57 	bl	8008570 <FragGetParityMatrixRow>
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 80088c2:	2400      	movs	r4, #0
    int32_t first = 0;
 80088c4:	4626      	mov	r6, r4
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 80088c6:	e008      	b.n	80088da <FragDecoderProcess+0xbe>
                    SetParity( FragDecoder.FragNbMissingIndex[i] - 1, dataTempVector, 1 );
 80088c8:	3801      	subs	r0, #1
 80088ca:	2201      	movs	r2, #1
 80088cc:	496f      	ldr	r1, [pc, #444]	; (8008a8c <FragDecoderProcess+0x270>)
 80088ce:	b280      	uxth	r0, r0
 80088d0:	f7ff fdf0 	bl	80084b4 <SetParity>
                    if( first == 0 )
 80088d4:	b906      	cbnz	r6, 80088d8 <FragDecoderProcess+0xbc>
                        first = 1;
 80088d6:	2601      	movs	r6, #1
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 80088d8:	3401      	adds	r4, #1
 80088da:	4b6e      	ldr	r3, [pc, #440]	; (8008a94 <FragDecoderProcess+0x278>)
 80088dc:	889b      	ldrh	r3, [r3, #4]
 80088de:	42a3      	cmp	r3, r4
 80088e0:	dd22      	ble.n	8008928 <FragDecoderProcess+0x10c>
            if( GetParity( i, matrixRow ) == 1 )
 80088e2:	b2a5      	uxth	r5, r4
 80088e4:	4967      	ldr	r1, [pc, #412]	; (8008a84 <FragDecoderProcess+0x268>)
 80088e6:	4628      	mov	r0, r5
 80088e8:	f7ff fdda 	bl	80084a0 <GetParity>
 80088ec:	2801      	cmp	r0, #1
 80088ee:	d1f3      	bne.n	80088d8 <FragDecoderProcess+0xbc>
                if( FragDecoder.FragNbMissingIndex[i] == 0 )
 80088f0:	1d22      	adds	r2, r4, #4
 80088f2:	4b68      	ldr	r3, [pc, #416]	; (8008a94 <FragDecoderProcess+0x278>)
 80088f4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80088f8:	88d8      	ldrh	r0, [r3, #6]
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d1e4      	bne.n	80088c8 <FragDecoderProcess+0xac>
                    SetParity( i, matrixRow, 0 );
 80088fe:	2200      	movs	r2, #0
 8008900:	4960      	ldr	r1, [pc, #384]	; (8008a84 <FragDecoderProcess+0x268>)
 8008902:	4628      	mov	r0, r5
 8008904:	f7ff fdd6 	bl	80084b4 <SetParity>
                    GetRow( matrixDataTemp, i, FragDecoder.FragSize );
 8008908:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8008a94 <FragDecoderProcess+0x278>
 800890c:	4f5e      	ldr	r7, [pc, #376]	; (8008a88 <FragDecoderProcess+0x26c>)
 800890e:	f898 2006 	ldrb.w	r2, [r8, #6]
 8008912:	4629      	mov	r1, r5
 8008914:	4638      	mov	r0, r7
 8008916:	f7ff fdb3 	bl	8008480 <GetRow>
                    XorDataLine( rawData, matrixDataTemp, FragDecoder.FragSize );
 800891a:	f898 2006 	ldrb.w	r2, [r8, #6]
 800891e:	4639      	mov	r1, r7
 8008920:	4648      	mov	r0, r9
 8008922:	f7ff fded 	bl	8008500 <XorDataLine>
 8008926:	e7d7      	b.n	80088d8 <FragDecoderProcess+0xbc>
        firstOneInRow = BitArrayFindFirstOne( dataTempVector, FragDecoder.Status.FragNbLost );
 8008928:	4b5a      	ldr	r3, [pc, #360]	; (8008a94 <FragDecoderProcess+0x278>)
 800892a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800892c:	4857      	ldr	r0, [pc, #348]	; (8008a8c <FragDecoderProcess+0x270>)
 800892e:	f7ff fe63 	bl	80085f8 <BitArrayFindFirstOne>
 8008932:	4604      	mov	r4, r0
        if( first > 0 )
 8008934:	b366      	cbz	r6, 8008990 <FragDecoderProcess+0x174>
            while( GetParity( firstOneInRow, FragDecoder.S ) == 1 )
 8008936:	4958      	ldr	r1, [pc, #352]	; (8008a98 <FragDecoderProcess+0x27c>)
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff fdb1 	bl	80084a0 <GetParity>
 800893e:	2801      	cmp	r0, #1
 8008940:	d129      	bne.n	8008996 <FragDecoderProcess+0x17a>
                FragExtractLineFromBinaryMatrix( dataTempVector2, firstOneInRow, FragDecoder.Status.FragNbLost );
 8008942:	4d54      	ldr	r5, [pc, #336]	; (8008a94 <FragDecoderProcess+0x278>)
 8008944:	4f52      	ldr	r7, [pc, #328]	; (8008a90 <FragDecoderProcess+0x274>)
 8008946:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8008948:	4621      	mov	r1, r4
 800894a:	4638      	mov	r0, r7
 800894c:	f7ff feb4 	bl	80086b8 <FragExtractLineFromBinaryMatrix>
                XorParityLine( dataTempVector, dataTempVector2, FragDecoder.Status.FragNbLost );
 8008950:	4e4e      	ldr	r6, [pc, #312]	; (8008a8c <FragDecoderProcess+0x270>)
 8008952:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8008954:	4639      	mov	r1, r7
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff fde4 	bl	8008524 <XorParityLine>
                li = FragFindMissingIndex( firstOneInRow );
 800895c:	4620      	mov	r0, r4
 800895e:	f7ff fe95 	bl	800868c <FragFindMissingIndex>
 8008962:	4601      	mov	r1, r0
                GetRow( matrixDataTemp, li, FragDecoder.FragSize );
 8008964:	4f48      	ldr	r7, [pc, #288]	; (8008a88 <FragDecoderProcess+0x26c>)
 8008966:	79aa      	ldrb	r2, [r5, #6]
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff fd89 	bl	8008480 <GetRow>
                XorDataLine( rawData, matrixDataTemp, FragDecoder.FragSize );
 800896e:	79aa      	ldrb	r2, [r5, #6]
 8008970:	4639      	mov	r1, r7
 8008972:	4648      	mov	r0, r9
 8008974:	f7ff fdc4 	bl	8008500 <XorDataLine>
                if( BitArrayIsAllZeros( dataTempVector, FragDecoder.Status.FragNbLost ) )
 8008978:	8ead      	ldrh	r5, [r5, #52]	; 0x34
 800897a:	4629      	mov	r1, r5
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff fe4e 	bl	800861e <BitArrayIsAllZeros>
 8008982:	b9a8      	cbnz	r0, 80089b0 <FragDecoderProcess+0x194>
                firstOneInRow = BitArrayFindFirstOne( dataTempVector, FragDecoder.Status.FragNbLost );
 8008984:	4629      	mov	r1, r5
 8008986:	4630      	mov	r0, r6
 8008988:	f7ff fe36 	bl	80085f8 <BitArrayFindFirstOne>
 800898c:	4604      	mov	r4, r0
 800898e:	e7d2      	b.n	8008936 <FragDecoderProcess+0x11a>
    return FRAG_SESSION_ONGOING;
 8008990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008994:	e76d      	b.n	8008872 <FragDecoderProcess+0x56>
    int32_t noInfo = 0;
 8008996:	2300      	movs	r3, #0
            if( noInfo == 0 )
 8008998:	b163      	cbz	r3, 80089b4 <FragDecoderProcess+0x198>
            if( FragDecoder.M2BLine == FragDecoder.Status.FragNbLost )
 800899a:	4b3e      	ldr	r3, [pc, #248]	; (8008a94 <FragDecoderProcess+0x278>)
 800899c:	689a      	ldr	r2, [r3, #8]
 800899e:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 80089a0:	4282      	cmp	r2, r0
 80089a2:	d16b      	bne.n	8008a7c <FragDecoderProcess+0x260>
                if( FragDecoder.Status.FragNbLost > 1 )
 80089a4:	2801      	cmp	r0, #1
 80089a6:	f67f af64 	bls.w	8008872 <FragDecoderProcess+0x56>
                    for( i = ( FragDecoder.Status.FragNbLost - 2 ); i >= 0 ; i-- )
 80089aa:	f1a0 0802 	sub.w	r8, r0, #2
 80089ae:	e04a      	b.n	8008a46 <FragDecoderProcess+0x22a>
                    noInfo = 1;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e7f1      	b.n	8008998 <FragDecoderProcess+0x17c>
                FragPushLineToBinaryMatrix( dataTempVector, firstOneInRow, FragDecoder.Status.FragNbLost );
 80089b4:	4d37      	ldr	r5, [pc, #220]	; (8008a94 <FragDecoderProcess+0x278>)
 80089b6:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 80089b8:	4621      	mov	r1, r4
 80089ba:	4834      	ldr	r0, [pc, #208]	; (8008a8c <FragDecoderProcess+0x270>)
 80089bc:	f7ff febe 	bl	800873c <FragPushLineToBinaryMatrix>
                li = FragFindMissingIndex( firstOneInRow );
 80089c0:	4620      	mov	r0, r4
 80089c2:	f7ff fe63 	bl	800868c <FragFindMissingIndex>
 80089c6:	4601      	mov	r1, r0
                SetRow( rawData, li, FragDecoder.FragSize );
 80089c8:	79aa      	ldrb	r2, [r5, #6]
 80089ca:	4648      	mov	r0, r9
 80089cc:	f7ff fd48 	bl	8008460 <SetRow>
                SetParity( firstOneInRow, FragDecoder.S, 1 );
 80089d0:	2201      	movs	r2, #1
 80089d2:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7ff fd6c 	bl	80084b4 <SetParity>
                FragDecoder.M2BLine++;
 80089dc:	68ab      	ldr	r3, [r5, #8]
 80089de:	3301      	adds	r3, #1
 80089e0:	60ab      	str	r3, [r5, #8]
 80089e2:	e7da      	b.n	800899a <FragDecoderProcess+0x17e>
                        for( j = ( FragDecoder.Status.FragNbLost - 1 ); j > i; j-- )
 80089e4:	3c01      	subs	r4, #1
 80089e6:	45a0      	cmp	r8, r4
 80089e8:	da25      	bge.n	8008a36 <FragDecoderProcess+0x21a>
                            FragExtractLineFromBinaryMatrix( dataTempVector2, i, FragDecoder.Status.FragNbLost );
 80089ea:	4f2a      	ldr	r7, [pc, #168]	; (8008a94 <FragDecoderProcess+0x278>)
 80089ec:	4e28      	ldr	r6, [pc, #160]	; (8008a90 <FragDecoderProcess+0x274>)
 80089ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80089f0:	4651      	mov	r1, sl
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff fe60 	bl	80086b8 <FragExtractLineFromBinaryMatrix>
                            FragExtractLineFromBinaryMatrix( dataTempVector, j, FragDecoder.Status.FragNbLost );
 80089f8:	b2a5      	uxth	r5, r4
 80089fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80089fc:	4629      	mov	r1, r5
 80089fe:	4823      	ldr	r0, [pc, #140]	; (8008a8c <FragDecoderProcess+0x270>)
 8008a00:	f7ff fe5a 	bl	80086b8 <FragExtractLineFromBinaryMatrix>
                            if( GetParity( j, dataTempVector2 ) == 1 )
 8008a04:	4631      	mov	r1, r6
 8008a06:	4628      	mov	r0, r5
 8008a08:	f7ff fd4a 	bl	80084a0 <GetParity>
 8008a0c:	2801      	cmp	r0, #1
 8008a0e:	d1e9      	bne.n	80089e4 <FragDecoderProcess+0x1c8>
                                XorParityLine( dataTempVector2, dataTempVector, FragDecoder.Status.FragNbLost );
 8008a10:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008a12:	491e      	ldr	r1, [pc, #120]	; (8008a8c <FragDecoderProcess+0x270>)
 8008a14:	481e      	ldr	r0, [pc, #120]	; (8008a90 <FragDecoderProcess+0x274>)
 8008a16:	f7ff fd85 	bl	8008524 <XorParityLine>
                                lj = FragFindMissingIndex( j );
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f7ff fe36 	bl	800868c <FragFindMissingIndex>
 8008a20:	4601      	mov	r1, r0
                                GetRow( rawData, lj, FragDecoder.FragSize );
 8008a22:	79ba      	ldrb	r2, [r7, #6]
 8008a24:	4648      	mov	r0, r9
 8008a26:	f7ff fd2b 	bl	8008480 <GetRow>
                                XorDataLine( matrixDataTemp, rawData, FragDecoder.FragSize );
 8008a2a:	79ba      	ldrb	r2, [r7, #6]
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	4816      	ldr	r0, [pc, #88]	; (8008a88 <FragDecoderProcess+0x26c>)
 8008a30:	f7ff fd66 	bl	8008500 <XorDataLine>
 8008a34:	e7d6      	b.n	80089e4 <FragDecoderProcess+0x1c8>
                        SetRow( matrixDataTemp, li, FragDecoder.FragSize );
 8008a36:	4b17      	ldr	r3, [pc, #92]	; (8008a94 <FragDecoderProcess+0x278>)
 8008a38:	799a      	ldrb	r2, [r3, #6]
 8008a3a:	4659      	mov	r1, fp
 8008a3c:	4812      	ldr	r0, [pc, #72]	; (8008a88 <FragDecoderProcess+0x26c>)
 8008a3e:	f7ff fd0f 	bl	8008460 <SetRow>
                    for( i = ( FragDecoder.Status.FragNbLost - 2 ); i >= 0 ; i-- )
 8008a42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008a46:	f1b8 0f00 	cmp.w	r8, #0
 8008a4a:	db0e      	blt.n	8008a6a <FragDecoderProcess+0x24e>
                        li = FragFindMissingIndex( i );
 8008a4c:	fa1f fa88 	uxth.w	sl, r8
 8008a50:	4650      	mov	r0, sl
 8008a52:	f7ff fe1b 	bl	800868c <FragFindMissingIndex>
 8008a56:	4683      	mov	fp, r0
                        GetRow( matrixDataTemp, li, FragDecoder.FragSize );
 8008a58:	4c0e      	ldr	r4, [pc, #56]	; (8008a94 <FragDecoderProcess+0x278>)
 8008a5a:	79a2      	ldrb	r2, [r4, #6]
 8008a5c:	4601      	mov	r1, r0
 8008a5e:	480a      	ldr	r0, [pc, #40]	; (8008a88 <FragDecoderProcess+0x26c>)
 8008a60:	f7ff fd0e 	bl	8008480 <GetRow>
                        for( j = ( FragDecoder.Status.FragNbLost - 1 ); j > i; j-- )
 8008a64:	8ea4      	ldrh	r4, [r4, #52]	; 0x34
 8008a66:	3c01      	subs	r4, #1
 8008a68:	e7bd      	b.n	80089e6 <FragDecoderProcess+0x1ca>
                    return FragDecoder.Status.FragNbLost;
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <FragDecoderProcess+0x278>)
 8008a6c:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8008a6e:	e700      	b.n	8008872 <FragDecoderProcess+0x56>
        return FRAG_SESSION_ONGOING;  /* Drop frame out of order */
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a74:	e6fd      	b.n	8008872 <FragDecoderProcess+0x56>
    return FRAG_SESSION_ONGOING;
 8008a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a7a:	e6fa      	b.n	8008872 <FragDecoderProcess+0x56>
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a80:	e6f7      	b.n	8008872 <FragDecoderProcess+0x56>
 8008a82:	bf00      	nop
 8008a84:	20000a40 	.word	0x20000a40
 8008a88:	200009c8 	.word	0x200009c8
 8008a8c:	200009c0 	.word	0x200009c0
 8008a90:	200009c4 	.word	0x200009c4
 8008a94:	20000980 	.word	0x20000980
 8008a98:	200009b0 	.word	0x200009b0

08008a9c <FragDecoderGetStatus>:
    return FragDecoder.Status;
 8008a9c:	4a03      	ldr	r2, [pc, #12]	; (8008aac <FragDecoderGetStatus+0x10>)
 8008a9e:	f8d2 1032 	ldr.w	r1, [r2, #50]	; 0x32
 8008aa2:	f8d2 2036 	ldr.w	r2, [r2, #54]	; 0x36
 8008aa6:	6001      	str	r1, [r0, #0]
 8008aa8:	6042      	str	r2, [r0, #4]
}
 8008aaa:	4770      	bx	lr
 8008aac:	20000980 	.word	0x20000980

08008ab0 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8008ab0:	2804      	cmp	r0, #4
 8008ab2:	d807      	bhi.n	8008ac4 <LmHandlerPackageIsInitialized+0x14>
{
 8008ab4:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8008ab6:	4b05      	ldr	r3, [pc, #20]	; (8008acc <LmHandlerPackageIsInitialized+0x1c>)
 8008ab8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	b11b      	cbz	r3, 8008ac8 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8008ac0:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8008ac2:	bd08      	pop	{r3, pc}
        return false;
 8008ac4:	2000      	movs	r0, #0
}
 8008ac6:	4770      	bx	lr
        return false;
 8008ac8:	2000      	movs	r0, #0
 8008aca:	e7fa      	b.n	8008ac2 <LmHandlerPackageIsInitialized+0x12>
 8008acc:	20000b60 	.word	0x20000b60

08008ad0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008ad6:	2400      	movs	r4, #0
 8008ad8:	e005      	b.n	8008ae6 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	b10b      	cbz	r3, 8008ae2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008ae2:	3401      	adds	r4, #1
 8008ae4:	b264      	sxtb	r4, r4
 8008ae6:	2c04      	cmp	r4, #4
 8008ae8:	dc24      	bgt.n	8008b34 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8008aea:	4b13      	ldr	r3, [pc, #76]	; (8008b38 <LmHandlerPackagesNotify+0x68>)
 8008aec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0f6      	beq.n	8008ae2 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8008af4:	2d03      	cmp	r5, #3
 8008af6:	d8f4      	bhi.n	8008ae2 <LmHandlerPackagesNotify+0x12>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <LmHandlerPackagesNotify+0x30>)
 8008afa:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008adb 	.word	0x08008adb
 8008b04:	08008b11 	.word	0x08008b11
 8008b08:	08008b1d 	.word	0x08008b1d
 8008b0c:	08008b29 	.word	0x08008b29
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0e5      	beq.n	8008ae2 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8008b16:	4630      	mov	r0, r6
 8008b18:	4798      	blx	r3
 8008b1a:	e7e2      	b.n	8008ae2 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0df      	beq.n	8008ae2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8008b22:	4630      	mov	r0, r6
 8008b24:	4798      	blx	r3
 8008b26:	e7dc      	b.n	8008ae2 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0d9      	beq.n	8008ae2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4798      	blx	r3
 8008b32:	e7d6      	b.n	8008ae2 <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
 8008b36:	bf00      	nop
 8008b38:	20000b60 	.word	0x20000b60

08008b3c <MlmeIndication>:
{
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8008b40:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <MlmeIndication+0x4c>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8008b46:	7842      	ldrb	r2, [r0, #1]
 8008b48:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8008b4a:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8008b4e:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008b50:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008b54:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008b56:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8008b5a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008b5c:	78ca      	ldrb	r2, [r1, #3]
 8008b5e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8008b60:	6842      	ldr	r2, [r0, #4]
 8008b62:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8008b64:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <MlmeIndication+0x50>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6a:	b13b      	cbz	r3, 8008b7c <MlmeIndication+0x40>
 8008b6c:	7802      	ldrb	r2, [r0, #0]
 8008b6e:	2a0a      	cmp	r2, #10
 8008b70:	d004      	beq.n	8008b7c <MlmeIndication+0x40>
 8008b72:	2a0e      	cmp	r2, #14
 8008b74:	d002      	beq.n	8008b7c <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008b76:	4904      	ldr	r1, [pc, #16]	; (8008b88 <MlmeIndication+0x4c>)
 8008b78:	2000      	movs	r0, #0
 8008b7a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	2003      	movs	r0, #3
 8008b80:	f7ff ffa6 	bl	8008ad0 <LmHandlerPackagesNotify>
}
 8008b84:	bd10      	pop	{r4, pc}
 8008b86:	bf00      	nop
 8008b88:	200000ac 	.word	0x200000ac
 8008b8c:	20000b5c 	.word	0x20000b5c

08008b90 <McpsConfirm>:
{
 8008b90:	b510      	push	{r4, lr}
 8008b92:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8008b94:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <McpsConfirm+0x3c>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8008b9a:	7842      	ldrb	r2, [r0, #1]
 8008b9c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8008b9e:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8008ba2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8008ba4:	68c2      	ldr	r2, [r0, #12]
 8008ba6:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8008ba8:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8008bac:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8008bae:	6902      	ldr	r2, [r0, #16]
 8008bb0:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8008bb2:	7902      	ldrb	r2, [r0, #4]
 8008bb4:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8008bb6:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <McpsConfirm+0x40>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbc:	b10b      	cbz	r3, 8008bc2 <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8008bbe:	4803      	ldr	r0, [pc, #12]	; (8008bcc <McpsConfirm+0x3c>)
 8008bc0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f7ff ff83 	bl	8008ad0 <LmHandlerPackagesNotify>
}
 8008bca:	bd10      	pop	{r4, pc}
 8008bcc:	200000c0 	.word	0x200000c0
 8008bd0:	20000b5c 	.word	0x20000b5c

08008bd4 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8008bd4:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008bd6:	2400      	movs	r4, #0
 8008bd8:	e001      	b.n	8008bde <LmHandlerPackageIsTxPending+0xa>
 8008bda:	3401      	adds	r4, #1
 8008bdc:	b264      	sxtb	r4, r4
 8008bde:	2c04      	cmp	r4, #4
 8008be0:	dc0a      	bgt.n	8008bf8 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 8008be2:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <LmHandlerPackageIsTxPending+0x2c>)
 8008be4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0f6      	beq.n	8008bda <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	4798      	blx	r3
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0f1      	beq.n	8008bda <LmHandlerPackageIsTxPending+0x6>
 8008bf6:	e000      	b.n	8008bfa <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	bd10      	pop	{r4, pc}
 8008bfe:	bf00      	nop
 8008c00:	20000b60 	.word	0x20000b60

08008c04 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8008c04:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008c06:	2400      	movs	r4, #0
 8008c08:	e001      	b.n	8008c0e <LmHandlerPackagesProcess+0xa>
 8008c0a:	3401      	adds	r4, #1
 8008c0c:	b264      	sxtb	r4, r4
 8008c0e:	2c04      	cmp	r4, #4
 8008c10:	dc12      	bgt.n	8008c38 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008c12:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <LmHandlerPackagesProcess+0x38>)
 8008c14:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0f6      	beq.n	8008c0a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008c1c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0f3      	beq.n	8008c0a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8008c22:	b2e0      	uxtb	r0, r4
 8008c24:	f7ff ff44 	bl	8008ab0 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d0ee      	beq.n	8008c0a <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8008c2c:	4b03      	ldr	r3, [pc, #12]	; (8008c3c <LmHandlerPackagesProcess+0x38>)
 8008c2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	4798      	blx	r3
 8008c36:	e7e8      	b.n	8008c0a <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8008c38:	bd38      	pop	{r3, r4, r5, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20000b60 	.word	0x20000b60

08008c40 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 8008c40:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8008c42:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 8008c44:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 8008c46:	4b04      	ldr	r3, [pc, #16]	; (8008c58 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4c:	b103      	cbz	r3, 8008c50 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 8008c4e:	4798      	blx	r3
    }
}
 8008c50:	bd08      	pop	{r3, pc}
 8008c52:	bf00      	nop
 8008c54:	20000b74 	.word	0x20000b74
 8008c58:	20000b5c 	.word	0x20000b5c

08008c5c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 8008c5c:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8008c5e:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 8008c60:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 8008c62:	4b04      	ldr	r3, [pc, #16]	; (8008c74 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c68:	b103      	cbz	r3, 8008c6c <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 8008c6a:	4798      	blx	r3
    }
}
 8008c6c:	bd08      	pop	{r3, pc}
 8008c6e:	bf00      	nop
 8008c70:	20000b74 	.word	0x20000b74
 8008c74:	20000b5c 	.word	0x20000b5c

08008c78 <LmHandlerJoin>:
{
 8008c78:	b530      	push	{r4, r5, lr}
 8008c7a:	b091      	sub	sp, #68	; 0x44
 8008c7c:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008c84:	4b33      	ldr	r3, [pc, #204]	; (8008d54 <LmHandlerJoin+0xdc>)
 8008c86:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8008c8a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8008c8e:	f993 1005 	ldrsb.w	r1, [r3, #5]
 8008c92:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8008c96:	2802      	cmp	r0, #2
 8008c98:	d022      	beq.n	8008ce0 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008ca0:	4b2d      	ldr	r3, [pc, #180]	; (8008d58 <LmHandlerJoin+0xe0>)
 8008ca2:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008ca4:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8008ca6:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008ca8:	2100      	movs	r1, #0
 8008caa:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8008cac:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 8008cae:	4b2b      	ldr	r3, [pc, #172]	; (8008d5c <LmHandlerJoin+0xe4>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	b1f3      	cbz	r3, 8008cf2 <LmHandlerJoin+0x7a>
        LoRaMacStart();
 8008cb4:	f004 ff1c 	bl	800daf0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008cbe:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008cc2:	a801      	add	r0, sp, #4
 8008cc4:	f005 f952 	bl	800df6c <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8008cc8:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <LmHandlerJoin+0xe4>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b103      	cbz	r3, 8008cd0 <LmHandlerJoin+0x58>
 8008cce:	b114      	cbz	r4, 8008cd6 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 8008cd0:	a80b      	add	r0, sp, #44	; 0x2c
 8008cd2:	f005 fd45 	bl	800e760 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008cd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cd8:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <LmHandlerJoin+0xe8>)
 8008cda:	601a      	str	r2, [r3, #0]
}
 8008cdc:	b011      	add	sp, #68	; 0x44
 8008cde:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8008ce6:	4b1c      	ldr	r3, [pc, #112]	; (8008d58 <LmHandlerJoin+0xe0>)
 8008ce8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8008cea:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 8008cec:	f004 ff00 	bl	800daf0 <LoRaMacStart>
 8008cf0:	e7ea      	b.n	8008cc8 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8008cf2:	231f      	movs	r3, #31
 8008cf4:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8008cf8:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008cfc:	a801      	add	r0, sp, #4
 8008cfe:	f005 f935 	bl	800df6c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8008d02:	2320      	movs	r3, #32
 8008d04:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8008d08:	4d12      	ldr	r5, [pc, #72]	; (8008d54 <LmHandlerJoin+0xdc>)
 8008d0a:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8008d0e:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008d12:	a801      	add	r0, sp, #4
 8008d14:	f005 f92a 	bl	800df6c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8008d18:	2322      	movs	r3, #34	; 0x22
 8008d1a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8008d1e:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8008d22:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008d26:	a801      	add	r0, sp, #4
 8008d28:	f005 f920 	bl	800df6c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8008d2c:	2321      	movs	r3, #33	; 0x21
 8008d2e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8008d32:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8008d36:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008d3a:	a801      	add	r0, sp, #4
 8008d3c:	f005 f916 	bl	800df6c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8008d40:	2329      	movs	r3, #41	; 0x29
 8008d42:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008d46:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <LmHandlerJoin+0xec>)
 8008d48:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008d4a:	a801      	add	r0, sp, #4
 8008d4c:	f005 f90e 	bl	800df6c <LoRaMacMibSetRequestConfirm>
 8008d50:	e7b0      	b.n	8008cb4 <LmHandlerJoin+0x3c>
 8008d52:	bf00      	nop
 8008d54:	20000b74 	.word	0x20000b74
 8008d58:	200000a0 	.word	0x200000a0
 8008d5c:	20000b50 	.word	0x20000b50
 8008d60:	20000b54 	.word	0x20000b54
 8008d64:	01000400 	.word	0x01000400

08008d68 <LmHandlerDeviceTimeReq>:
{
 8008d68:	b500      	push	{lr}
 8008d6a:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8008d6c:	2309      	movs	r3, #9
 8008d6e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8008d72:	a801      	add	r0, sp, #4
 8008d74:	f005 fcf4 	bl	800e760 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008d78:	9a05      	ldr	r2, [sp, #20]
 8008d7a:	4b04      	ldr	r3, [pc, #16]	; (8008d8c <LmHandlerDeviceTimeReq+0x24>)
 8008d7c:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8008d7e:	b910      	cbnz	r0, 8008d86 <LmHandlerDeviceTimeReq+0x1e>
}
 8008d80:	b007      	add	sp, #28
 8008d82:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d8a:	e7f9      	b.n	8008d80 <LmHandlerDeviceTimeReq+0x18>
 8008d8c:	20000b54 	.word	0x20000b54

08008d90 <LmHandlerGetDutyCycleWaitTime>:
}
 8008d90:	4b01      	ldr	r3, [pc, #4]	; (8008d98 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8008d92:	6818      	ldr	r0, [r3, #0]
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	20000b54 	.word	0x20000b54

08008d9c <LmHandlerJoinStatus>:
{
 8008d9c:	b500      	push	{lr}
 8008d9e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008da0:	2301      	movs	r3, #1
 8008da2:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8008da6:	4668      	mov	r0, sp
 8008da8:	f004 ff6c 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8008dac:	b920      	cbnz	r0, 8008db8 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008dae:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008db2:	b110      	cbz	r0, 8008dba <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8008db4:	2001      	movs	r0, #1
 8008db6:	e000      	b.n	8008dba <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8008db8:	2000      	movs	r0, #0
}
 8008dba:	b00b      	add	sp, #44	; 0x2c
 8008dbc:	f85d fb04 	ldr.w	pc, [sp], #4

08008dc0 <LmHandlerIsBusy>:
{
 8008dc0:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 8008dc2:	f004 fc43 	bl	800d64c <LoRaMacIsBusy>
 8008dc6:	b100      	cbz	r0, 8008dca <LmHandlerIsBusy+0xa>
}
 8008dc8:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008dca:	f7ff ffe7 	bl	8008d9c <LmHandlerJoinStatus>
 8008dce:	2801      	cmp	r0, #1
 8008dd0:	d006      	beq.n	8008de0 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <LmHandlerIsBusy+0x28>)
 8008dd4:	7a19      	ldrb	r1, [r3, #8]
 8008dd6:	79d8      	ldrb	r0, [r3, #7]
 8008dd8:	f7ff ff4e 	bl	8008c78 <LmHandlerJoin>
        return true;
 8008ddc:	2001      	movs	r0, #1
 8008dde:	e7f3      	b.n	8008dc8 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008de0:	f7ff fef8 	bl	8008bd4 <LmHandlerPackageIsTxPending>
 8008de4:	e7f0      	b.n	8008dc8 <LmHandlerIsBusy+0x8>
 8008de6:	bf00      	nop
 8008de8:	200000a0 	.word	0x200000a0

08008dec <LmHandlerSend>:
{
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	4604      	mov	r4, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8008df6:	f004 fc29 	bl	800d64c <LoRaMacIsBusy>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d168      	bne.n	8008ed0 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 8008dfe:	f004 fc43 	bl	800d688 <LoRaMacIsStopped>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d167      	bne.n	8008ed6 <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008e06:	f7ff ffc9 	bl	8008d9c <LmHandlerJoinStatus>
 8008e0a:	2801      	cmp	r0, #1
 8008e0c:	d137      	bne.n	8008e7e <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 8008e0e:	4b35      	ldr	r3, [pc, #212]	; (8008ee4 <LmHandlerSend+0xf8>)
 8008e10:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8008e12:	3d00      	subs	r5, #0
 8008e14:	bf18      	it	ne
 8008e16:	2501      	movne	r5, #1
 8008e18:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8008e1c:	4b32      	ldr	r3, [pc, #200]	; (8008ee8 <LmHandlerSend+0xfc>)
 8008e1e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008e22:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8008e26:	4669      	mov	r1, sp
 8008e28:	7860      	ldrb	r0, [r4, #1]
 8008e2a:	f004 fec1 	bl	800dbb0 <LoRaMacQueryTxPossible>
 8008e2e:	b370      	cbz	r0, 8008e8e <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008e30:	2300      	movs	r3, #0
 8008e32:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008e36:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008e38:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8008e3c:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8008e40:	4b28      	ldr	r3, [pc, #160]	; (8008ee4 <LmHandlerSend+0xf8>)
 8008e42:	f103 0c10 	add.w	ip, r3, #16
 8008e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008e4a:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008e4e:	4a26      	ldr	r2, [pc, #152]	; (8008ee8 <LmHandlerSend+0xfc>)
 8008e50:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008e54:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8008e56:	4631      	mov	r1, r6
 8008e58:	a801      	add	r0, sp, #4
 8008e5a:	f005 fd85 	bl	800e968 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008e5e:	9a05      	ldr	r2, [sp, #20]
 8008e60:	4b22      	ldr	r3, [pc, #136]	; (8008eec <LmHandlerSend+0x100>)
 8008e62:	601a      	str	r2, [r3, #0]
    switch( status )
 8008e64:	2811      	cmp	r0, #17
 8008e66:	d830      	bhi.n	8008eca <LmHandlerSend+0xde>
 8008e68:	e8df f000 	tbb	[pc, r0]
 8008e6c:	2f2f1c21 	.word	0x2f2f1c21
 8008e70:	382f2f2f 	.word	0x382f2f2f
 8008e74:	2c2f2f2f 	.word	0x2c2f2f2f
 8008e78:	1c1c2f2f 	.word	0x1c1c2f2f
 8008e7c:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008e7e:	4b1c      	ldr	r3, [pc, #112]	; (8008ef0 <LmHandlerSend+0x104>)
 8008e80:	7a19      	ldrb	r1, [r3, #8]
 8008e82:	79d8      	ldrb	r0, [r3, #7]
 8008e84:	f7ff fef8 	bl	8008c78 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008e88:	f06f 0502 	mvn.w	r5, #2
 8008e8c:	e00c      	b.n	8008ea8 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008e8e:	7823      	ldrb	r3, [r4, #0]
 8008e90:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008e94:	7863      	ldrb	r3, [r4, #1]
 8008e96:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008e9a:	6863      	ldr	r3, [r4, #4]
 8008e9c:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8008e9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008ea2:	e7cd      	b.n	8008e40 <LmHandlerSend+0x54>
    switch( status )
 8008ea4:	f06f 0501 	mvn.w	r5, #1
}
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	b006      	add	sp, #24
 8008eac:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 8008eae:	4b11      	ldr	r3, [pc, #68]	; (8008ef4 <LmHandlerSend+0x108>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8008eb4:	f115 0f07 	cmn.w	r5, #7
 8008eb8:	d0f6      	beq.n	8008ea8 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8008eba:	2500      	movs	r5, #0
 8008ebc:	e7f4      	b.n	8008ea8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8008ebe:	f06f 0504 	mvn.w	r5, #4
            break;
 8008ec2:	e7f1      	b.n	8008ea8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8008ec4:	f06f 0505 	mvn.w	r5, #5
            break;
 8008ec8:	e7ee      	b.n	8008ea8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008eca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            break;
 8008ece:	e7eb      	b.n	8008ea8 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008ed0:	f06f 0501 	mvn.w	r5, #1
 8008ed4:	e7e8      	b.n	8008ea8 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008ed6:	f06f 0502 	mvn.w	r5, #2
 8008eda:	e7e5      	b.n	8008ea8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008edc:	f06f 0502 	mvn.w	r5, #2
 8008ee0:	e7e2      	b.n	8008ea8 <LmHandlerSend+0xbc>
 8008ee2:	bf00      	nop
 8008ee4:	200000c0 	.word	0x200000c0
 8008ee8:	20000b74 	.word	0x20000b74
 8008eec:	20000b54 	.word	0x20000b54
 8008ef0:	200000a0 	.word	0x200000a0
 8008ef4:	20000b58 	.word	0x20000b58

08008ef8 <LmHandlerProcess>:
{
 8008ef8:	b500      	push	{lr}
 8008efa:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8008efc:	f004 fbd0 	bl	800d6a0 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8008f00:	f7ff fe80 	bl	8008c04 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008f04:	f7ff fe66 	bl	8008bd4 <LmHandlerPackageIsTxPending>
 8008f08:	b910      	cbnz	r0, 8008f10 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <LmHandlerProcess+0x40>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	b913      	cbnz	r3, 8008f16 <LmHandlerProcess+0x1e>
}
 8008f10:	b003      	add	sp, #12
 8008f12:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8008f16:	2200      	movs	r2, #0
 8008f18:	f88d 2000 	strb.w	r2, [sp]
 8008f1c:	f88d 2001 	strb.w	r2, [sp, #1]
 8008f20:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8008f22:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <LmHandlerProcess+0x44>)
 8008f24:	78d9      	ldrb	r1, [r3, #3]
 8008f26:	4668      	mov	r0, sp
 8008f28:	f7ff ff60 	bl	8008dec <LmHandlerSend>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d1ef      	bne.n	8008f10 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8008f30:	4b01      	ldr	r3, [pc, #4]	; (8008f38 <LmHandlerProcess+0x40>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
 8008f36:	e7eb      	b.n	8008f10 <LmHandlerProcess+0x18>
 8008f38:	20000b58 	.word	0x20000b58
 8008f3c:	20000b74 	.word	0x20000b74

08008f40 <LmHandlerRequestClass>:
{
 8008f40:	b510      	push	{r4, lr}
 8008f42:	b08a      	sub	sp, #40	; 0x28
 8008f44:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 8008f46:	f004 fb81 	bl	800d64c <LoRaMacIsBusy>
 8008f4a:	bbb0      	cbnz	r0, 8008fba <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8008f4c:	f7ff ff26 	bl	8008d9c <LmHandlerJoinStatus>
 8008f50:	2801      	cmp	r0, #1
 8008f52:	d135      	bne.n	8008fc0 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 8008f54:	2300      	movs	r3, #0
 8008f56:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008f5a:	4668      	mov	r0, sp
 8008f5c:	f004 fe92 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
 8008f60:	bb88      	cbnz	r0, 8008fc6 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 8008f62:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	d030      	beq.n	8008fcc <LmHandlerRequestClass+0x8c>
        switch( newClass )
 8008f6a:	2c01      	cmp	r4, #1
 8008f6c:	d030      	beq.n	8008fd0 <LmHandlerRequestClass+0x90>
 8008f6e:	2c02      	cmp	r4, #2
 8008f70:	d014      	beq.n	8008f9c <LmHandlerRequestClass+0x5c>
 8008f72:	b114      	cbz	r4, 8008f7a <LmHandlerRequestClass+0x3a>
 8008f74:	2000      	movs	r0, #0
}
 8008f76:	b00a      	add	sp, #40	; 0x28
 8008f78:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 8008f7a:	b90b      	cbnz	r3, 8008f80 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e7fa      	b.n	8008f76 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 8008f80:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008f84:	4668      	mov	r0, sp
 8008f86:	f004 fff1 	bl	800df6c <LoRaMacMibSetRequestConfirm>
 8008f8a:	bb20      	cbnz	r0, 8008fd6 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8008f8c:	4b18      	ldr	r3, [pc, #96]	; (8008ff0 <LmHandlerRequestClass+0xb0>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	b31b      	cbz	r3, 8008fdc <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8008f94:	4620      	mov	r0, r4
 8008f96:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e7ec      	b.n	8008f76 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 8008f9c:	bb03      	cbnz	r3, 8008fe0 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 8008f9e:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008fa2:	4668      	mov	r0, sp
 8008fa4:	f004 ffe2 	bl	800df6c <LoRaMacMibSetRequestConfirm>
 8008fa8:	b9e8      	cbnz	r0, 8008fe6 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8008faa:	4b11      	ldr	r3, [pc, #68]	; (8008ff0 <LmHandlerRequestClass+0xb0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	b1e3      	cbz	r3, 8008fec <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e7dd      	b.n	8008f76 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008fba:	f06f 0001 	mvn.w	r0, #1
 8008fbe:	e7da      	b.n	8008f76 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008fc0:	f06f 0002 	mvn.w	r0, #2
 8008fc4:	e7d7      	b.n	8008f76 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 8008fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fca:	e7d4      	b.n	8008f76 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e7d2      	b.n	8008f76 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fd4:	e7cf      	b.n	8008f76 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fda:	e7cc      	b.n	8008f76 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008fdc:	2000      	movs	r0, #0
 8008fde:	e7ca      	b.n	8008f76 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe4:	e7c7      	b.n	8008f76 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8008fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fea:	e7c4      	b.n	8008f76 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008fec:	2000      	movs	r0, #0
 8008fee:	e7c2      	b.n	8008f76 <LmHandlerRequestClass+0x36>
 8008ff0:	20000b5c 	.word	0x20000b5c

08008ff4 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8008ff4:	b170      	cbz	r0, 8009014 <LmHandlerGetCurrentClass+0x20>
{
 8008ff6:	b510      	push	{r4, lr}
 8008ff8:	b08a      	sub	sp, #40	; 0x28
 8008ffa:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009002:	4668      	mov	r0, sp
 8009004:	f004 fe3e 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
 8009008:	b938      	cbnz	r0, 800901a <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800900a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800900e:	7023      	strb	r3, [r4, #0]
}
 8009010:	b00a      	add	sp, #40	; 0x28
 8009012:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8009014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009018:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800901a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800901e:	e7f7      	b.n	8009010 <LmHandlerGetCurrentClass+0x1c>

08009020 <McpsIndication>:
{
 8009020:	b510      	push	{r4, lr}
 8009022:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 8009024:	2300      	movs	r3, #0
 8009026:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800902a:	4a1d      	ldr	r2, [pc, #116]	; (80090a0 <McpsIndication+0x80>)
 800902c:	2301      	movs	r3, #1
 800902e:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8009030:	7843      	ldrb	r3, [r0, #1]
 8009032:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8009034:	2b00      	cmp	r3, #0
 8009036:	d131      	bne.n	800909c <McpsIndication+0x7c>
 8009038:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800903a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800903e:	4b18      	ldr	r3, [pc, #96]	; (80090a0 <McpsIndication+0x80>)
 8009040:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8009042:	f9b1 2000 	ldrsh.w	r2, [r1]
 8009046:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8009048:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800904c:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800904e:	78ca      	ldrb	r2, [r1, #3]
 8009050:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8009052:	6902      	ldr	r2, [r0, #16]
 8009054:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 8009056:	78c3      	ldrb	r3, [r0, #3]
 8009058:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800905c:	7b03      	ldrb	r3, [r0, #12]
 800905e:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8009062:	6883      	ldr	r3, [r0, #8]
 8009064:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 8009066:	4b0f      	ldr	r3, [pc, #60]	; (80090a4 <McpsIndication+0x84>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	b113      	cbz	r3, 8009074 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800906e:	490c      	ldr	r1, [pc, #48]	; (80090a0 <McpsIndication+0x80>)
 8009070:	a802      	add	r0, sp, #8
 8009072:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8009074:	4b0b      	ldr	r3, [pc, #44]	; (80090a4 <McpsIndication+0x84>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907a:	b113      	cbz	r3, 8009082 <McpsIndication+0x62>
 800907c:	7e22      	ldrb	r2, [r4, #24]
 800907e:	b102      	cbz	r2, 8009082 <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8009080:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8009082:	4621      	mov	r1, r4
 8009084:	2001      	movs	r0, #1
 8009086:	f7ff fd23 	bl	8008ad0 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800908a:	f10d 0007 	add.w	r0, sp, #7
 800908e:	f7ff ffb1 	bl	8008ff4 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8009092:	7963      	ldrb	r3, [r4, #5]
 8009094:	b113      	cbz	r3, 800909c <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 8009096:	4b04      	ldr	r3, [pc, #16]	; (80090a8 <McpsIndication+0x88>)
 8009098:	2201      	movs	r2, #1
 800909a:	701a      	strb	r2, [r3, #0]
}
 800909c:	b004      	add	sp, #16
 800909e:	bd10      	pop	{r4, pc}
 80090a0:	200000ac 	.word	0x200000ac
 80090a4:	20000b5c 	.word	0x20000b5c
 80090a8:	20000b58 	.word	0x20000b58

080090ac <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 80090ac:	b180      	cbz	r0, 80090d0 <LmHandlerGetTxDatarate+0x24>
{
 80090ae:	b510      	push	{r4, lr}
 80090b0:	b08a      	sub	sp, #40	; 0x28
 80090b2:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80090b4:	2320      	movs	r3, #32
 80090b6:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 80090ba:	4668      	mov	r0, sp
 80090bc:	f004 fde2 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
 80090c0:	b948      	cbnz	r0, 80090d6 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80090c2:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80090c6:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80090c8:	4a04      	ldr	r2, [pc, #16]	; (80090dc <LmHandlerGetTxDatarate+0x30>)
 80090ca:	7113      	strb	r3, [r2, #4]
}
 80090cc:	b00a      	add	sp, #40	; 0x28
 80090ce:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80090d4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80090d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090da:	e7f7      	b.n	80090cc <LmHandlerGetTxDatarate+0x20>
 80090dc:	20000b74 	.word	0x20000b74

080090e0 <LmHandlerSetSystemMaxRxError>:
{
 80090e0:	b500      	push	{lr}
 80090e2:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80090e4:	2323      	movs	r3, #35	; 0x23
 80090e6:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 80090ea:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80090ec:	4668      	mov	r0, sp
 80090ee:	f004 ff3d 	bl	800df6c <LoRaMacMibSetRequestConfirm>
 80090f2:	b910      	cbnz	r0, 80090fa <LmHandlerSetSystemMaxRxError+0x1a>
}
 80090f4:	b00b      	add	sp, #44	; 0x2c
 80090f6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090fe:	e7f9      	b.n	80090f4 <LmHandlerSetSystemMaxRxError+0x14>

08009100 <LmHandlerConfigure>:
{
 8009100:	b570      	push	{r4, r5, r6, lr}
 8009102:	b08e      	sub	sp, #56	; 0x38
 8009104:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8009106:	4c6d      	ldr	r4, [pc, #436]	; (80092bc <LmHandlerConfigure+0x1bc>)
 8009108:	2218      	movs	r2, #24
 800910a:	4620      	mov	r0, r4
 800910c:	f009 f8b7 	bl	801227e <memcpy1>
    IsUplinkTxPending = false;
 8009110:	4b6b      	ldr	r3, [pc, #428]	; (80092c0 <LmHandlerConfigure+0x1c0>)
 8009112:	2200      	movs	r2, #0
 8009114:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8009116:	f7fa faed 	bl	80036f4 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800911a:	7822      	ldrb	r2, [r4, #0]
 800911c:	2301      	movs	r3, #1
 800911e:	4093      	lsls	r3, r2
 8009120:	6841      	ldr	r1, [r0, #4]
 8009122:	420b      	tst	r3, r1
 8009124:	d106      	bne.n	8009134 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8009126:	4b67      	ldr	r3, [pc, #412]	; (80092c4 <LmHandlerConfigure+0x1c4>)
 8009128:	2201      	movs	r2, #1
 800912a:	2100      	movs	r1, #0
 800912c:	4608      	mov	r0, r1
 800912e:	f00a ff83 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8009132:	e7fe      	b.n	8009132 <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8009134:	4964      	ldr	r1, [pc, #400]	; (80092c8 <LmHandlerConfigure+0x1c8>)
 8009136:	4865      	ldr	r0, [pc, #404]	; (80092cc <LmHandlerConfigure+0x1cc>)
 8009138:	f004 fafa 	bl	800d730 <LoRaMacInitialization>
 800913c:	2800      	cmp	r0, #0
 800913e:	f040 80b7 	bne.w	80092b0 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 8009142:	2327      	movs	r3, #39	; 0x27
 8009144:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009148:	a804      	add	r0, sp, #16
 800914a:	f004 ff0f 	bl	800df6c <LoRaMacMibSetRequestConfirm>
 800914e:	2800      	cmp	r0, #0
 8009150:	d17c      	bne.n	800924c <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 8009152:	4b5f      	ldr	r3, [pc, #380]	; (80092d0 <LmHandlerConfigure+0x1d0>)
 8009154:	2201      	movs	r2, #1
 8009156:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 8009158:	4b5d      	ldr	r3, [pc, #372]	; (80092d0 <LmHandlerConfigure+0x1d0>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 809e 	beq.w	800929e <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8009162:	4b5c      	ldr	r3, [pc, #368]	; (80092d4 <LmHandlerConfigure+0x1d4>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	b10b      	cbz	r3, 800916e <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800916a:	2000      	movs	r0, #0
 800916c:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800916e:	2327      	movs	r3, #39	; 0x27
 8009170:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8009174:	a804      	add	r0, sp, #16
 8009176:	f004 fd85 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800917a:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800917c:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 8009180:	4b4e      	ldr	r3, [pc, #312]	; (80092bc <LmHandlerConfigure+0x1bc>)
 8009182:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8009184:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 8009188:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800918a:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 800918e:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8009190:	4b4d      	ldr	r3, [pc, #308]	; (80092c8 <LmHandlerConfigure+0x1c8>)
 8009192:	68d9      	ldr	r1, [r3, #12]
 8009194:	6898      	ldr	r0, [r3, #8]
 8009196:	f008 ff85 	bl	80120a4 <SecureElementInitMcuID>
 800919a:	2800      	cmp	r0, #0
 800919c:	f040 808b 	bne.w	80092b6 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 80091a0:	2306      	movs	r3, #6
 80091a2:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80091a6:	a804      	add	r0, sp, #16
 80091a8:	f004 fd6c 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80091ac:	4c4a      	ldr	r4, [pc, #296]	; (80092d8 <LmHandlerConfigure+0x1d8>)
 80091ae:	9b05      	ldr	r3, [sp, #20]
 80091b0:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80091b2:	a804      	add	r0, sp, #16
 80091b4:	f004 feda 	bl	800df6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 80091b8:	2302      	movs	r3, #2
 80091ba:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 80091be:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80091c0:	a804      	add	r0, sp, #16
 80091c2:	f004 fd5f 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 80091c6:	2303      	movs	r3, #3
 80091c8:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 80091cc:	3408      	adds	r4, #8
 80091ce:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80091d0:	a804      	add	r0, sp, #16
 80091d2:	f004 fd57 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 80091d6:	f008 ffff 	bl	80121d8 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80091da:	260f      	movs	r6, #15
 80091dc:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80091e6:	a804      	add	r0, sp, #16
 80091e8:	f004 fec0 	bl	800df6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80091ec:	2310      	movs	r3, #16
 80091ee:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80091f2:	2500      	movs	r5, #0
 80091f4:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80091f8:	eb0d 0003 	add.w	r0, sp, r3
 80091fc:	f004 feb6 	bl	800df6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8009200:	2304      	movs	r3, #4
 8009202:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8009206:	4c2d      	ldr	r4, [pc, #180]	; (80092bc <LmHandlerConfigure+0x1bc>)
 8009208:	78a3      	ldrb	r3, [r4, #2]
 800920a:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800920e:	a804      	add	r0, sp, #16
 8009210:	f004 feac 	bl	800df6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8009214:	233a      	movs	r3, #58	; 0x3a
 8009216:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800921a:	6963      	ldr	r3, [r4, #20]
 800921c:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800921e:	a804      	add	r0, sp, #16
 8009220:	f004 fea4 	bl	800df6c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009224:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8009228:	a902      	add	r1, sp, #8
 800922a:	7820      	ldrb	r0, [r4, #0]
 800922c:	f006 fdda 	bl	800fde4 <RegionGetPhyParam>
 8009230:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8009232:	1b43      	subs	r3, r0, r5
 8009234:	bf18      	it	ne
 8009236:	2301      	movne	r3, #1
 8009238:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800923a:	2014      	movs	r0, #20
 800923c:	f7ff ff50 	bl	80090e0 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8009240:	79e0      	ldrb	r0, [r4, #7]
 8009242:	f005 fc7f 	bl	800eb44 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8009246:	4628      	mov	r0, r5
}
 8009248:	b00e      	add	sp, #56	; 0x38
 800924a:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800924c:	2328      	movs	r3, #40	; 0x28
 800924e:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8009252:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <LmHandlerConfigure+0x1d4>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	b14b      	cbz	r3, 800926e <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800925a:	a804      	add	r0, sp, #16
 800925c:	f004 fd12 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8009260:	4b1c      	ldr	r3, [pc, #112]	; (80092d4 <LmHandlerConfigure+0x1d4>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800926a:	9805      	ldr	r0, [sp, #20]
 800926c:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800926e:	2327      	movs	r3, #39	; 0x27
 8009270:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009274:	a804      	add	r0, sp, #16
 8009276:	f004 fe79 	bl	800df6c <LoRaMacMibSetRequestConfirm>
 800927a:	2800      	cmp	r0, #0
 800927c:	f47f af6c 	bne.w	8009158 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009280:	2301      	movs	r3, #1
 8009282:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8009286:	a804      	add	r0, sp, #16
 8009288:	f004 fcfc 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800928c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f43f af61 	beq.w	8009158 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 8009296:	4b0e      	ldr	r3, [pc, #56]	; (80092d0 <LmHandlerConfigure+0x1d0>)
 8009298:	2201      	movs	r2, #1
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	e75c      	b.n	8009158 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 800929e:	2305      	movs	r3, #5
 80092a0:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80092a4:	2300      	movs	r3, #0
 80092a6:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80092a8:	a804      	add	r0, sp, #16
 80092aa:	f004 fe5f 	bl	800df6c <LoRaMacMibSetRequestConfirm>
 80092ae:	e76f      	b.n	8009190 <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092b4:	e7c8      	b.n	8009248 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 80092b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092ba:	e7c5      	b.n	8009248 <LmHandlerConfigure+0x148>
 80092bc:	20000b74 	.word	0x20000b74
 80092c0:	20000b58 	.word	0x20000b58
 80092c4:	080199f0 	.word	0x080199f0
 80092c8:	20000b9c 	.word	0x20000b9c
 80092cc:	20000bb4 	.word	0x20000bb4
 80092d0:	20000b50 	.word	0x20000b50
 80092d4:	20000b5c 	.word	0x20000b5c
 80092d8:	20000b38 	.word	0x20000b38

080092dc <LmHandlerPackageRegister>:
{
 80092dc:	b530      	push	{r4, r5, lr}
 80092de:	b083      	sub	sp, #12
 80092e0:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	9301      	str	r3, [sp, #4]
    switch( id )
 80092e6:	4604      	mov	r4, r0
 80092e8:	b9d8      	cbnz	r0, 8009322 <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 80092ea:	f000 fe27 	bl	8009f3c <LmhpCompliancePackageFactory>
 80092ee:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 80092f0:	9b01      	ldr	r3, [sp, #4]
 80092f2:	b1f3      	cbz	r3, 8009332 <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 80092f4:	4a10      	ldr	r2, [pc, #64]	; (8009338 <LmHandlerPackageRegister+0x5c>)
 80092f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80092fa:	4a10      	ldr	r2, [pc, #64]	; (800933c <LmHandlerPackageRegister+0x60>)
 80092fc:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 80092fe:	4a10      	ldr	r2, [pc, #64]	; (8009340 <LmHandlerPackageRegister+0x64>)
 8009300:	6812      	ldr	r2, [r2, #0]
 8009302:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009304:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8009306:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8009308:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800930a:	490e      	ldr	r1, [pc, #56]	; (8009344 <LmHandlerPackageRegister+0x68>)
 800930c:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800930e:	6992      	ldr	r2, [r2, #24]
 8009310:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	22f2      	movs	r2, #242	; 0xf2
 8009316:	490c      	ldr	r1, [pc, #48]	; (8009348 <LmHandlerPackageRegister+0x6c>)
 8009318:	4628      	mov	r0, r5
 800931a:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800931c:	2000      	movs	r0, #0
}
 800931e:	b003      	add	sp, #12
 8009320:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8009322:	a901      	add	r1, sp, #4
 8009324:	f001 faa4 	bl	800a870 <LmhpPackagesRegister>
 8009328:	2800      	cmp	r0, #0
 800932a:	d0e1      	beq.n	80092f0 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800932c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009330:	e7f5      	b.n	800931e <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 8009332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009336:	e7f2      	b.n	800931e <LmHandlerPackageRegister+0x42>
 8009338:	20000b60 	.word	0x20000b60
 800933c:	08008c79 	.word	0x08008c79
 8009340:	20000b5c 	.word	0x20000b5c
 8009344:	08008d69 	.word	0x08008d69
 8009348:	20000a44 	.word	0x20000a44

0800934c <LmHandlerInit>:
{
 800934c:	b500      	push	{lr}
 800934e:	b083      	sub	sp, #12
 8009350:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 8009352:	4b19      	ldr	r3, [pc, #100]	; (80093b8 <LmHandlerInit+0x6c>)
 8009354:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8009356:	4b19      	ldr	r3, [pc, #100]	; (80093bc <LmHandlerInit+0x70>)
 8009358:	4a19      	ldr	r2, [pc, #100]	; (80093c0 <LmHandlerInit+0x74>)
 800935a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800935c:	4a19      	ldr	r2, [pc, #100]	; (80093c4 <LmHandlerInit+0x78>)
 800935e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8009360:	4a19      	ldr	r2, [pc, #100]	; (80093c8 <LmHandlerInit+0x7c>)
 8009362:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8009364:	4a19      	ldr	r2, [pc, #100]	; (80093cc <LmHandlerInit+0x80>)
 8009366:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8009368:	6802      	ldr	r2, [r0, #0]
 800936a:	4b19      	ldr	r3, [pc, #100]	; (80093d0 <LmHandlerInit+0x84>)
 800936c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800936e:	6842      	ldr	r2, [r0, #4]
 8009370:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8009372:	6882      	ldr	r2, [r0, #8]
 8009374:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8009376:	68c2      	ldr	r2, [r0, #12]
 8009378:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800937a:	4a16      	ldr	r2, [pc, #88]	; (80093d4 <LmHandlerInit+0x88>)
 800937c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800937e:	6982      	ldr	r2, [r0, #24]
 8009380:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <LmHandlerInit+0x8c>)
 8009384:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8009386:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009388:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800938a:	4a14      	ldr	r2, [pc, #80]	; (80093dc <LmHandlerInit+0x90>)
 800938c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800938e:	4a14      	ldr	r2, [pc, #80]	; (80093e0 <LmHandlerInit+0x94>)
 8009390:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8009392:	4619      	mov	r1, r3
 8009394:	2000      	movs	r0, #0
 8009396:	f7ff ffa1 	bl	80092dc <LmHandlerPackageRegister>
 800939a:	b930      	cbnz	r0, 80093aa <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800939c:	a801      	add	r0, sp, #4
 800939e:	f001 fa41 	bl	800a824 <LmhpPackagesRegistrationInit>
 80093a2:	b928      	cbnz	r0, 80093b0 <LmHandlerInit+0x64>
}
 80093a4:	b003      	add	sp, #12
 80093a6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80093aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093ae:	e7f9      	b.n	80093a4 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093b4:	e7f6      	b.n	80093a4 <LmHandlerInit+0x58>
 80093b6:	bf00      	nop
 80093b8:	20000b5c 	.word	0x20000b5c
 80093bc:	20000bb4 	.word	0x20000bb4
 80093c0:	08008b91 	.word	0x08008b91
 80093c4:	08009021 	.word	0x08009021
 80093c8:	08009491 	.word	0x08009491
 80093cc:	08008b3d 	.word	0x08008b3d
 80093d0:	20000b9c 	.word	0x20000b9c
 80093d4:	0800fd95 	.word	0x0800fd95
 80093d8:	20000b8c 	.word	0x20000b8c
 80093dc:	08008c41 	.word	0x08008c41
 80093e0:	08008c5d 	.word	0x08008c5d

080093e4 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 80093e4:	b161      	cbz	r1, 8009400 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 80093e6:	b118      	cbz	r0, 80093f0 <LmHandlerGetVersion+0xc>
 80093e8:	2801      	cmp	r0, #1
 80093ea:	d005      	beq.n	80093f8 <LmHandlerGetVersion+0x14>
 80093ec:	2000      	movs	r0, #0
 80093ee:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 80093f0:	4a05      	ldr	r2, [pc, #20]	; (8009408 <LmHandlerGetVersion+0x24>)
 80093f2:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 80093f4:	2000      	movs	r0, #0
            break;
 80093f6:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 80093f8:	4a04      	ldr	r2, [pc, #16]	; (800940c <LmHandlerGetVersion+0x28>)
 80093fa:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80093fc:	2000      	movs	r0, #0
            break;
 80093fe:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	01000400 	.word	0x01000400
 800940c:	02010001 	.word	0x02010001

08009410 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8009410:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8009412:	f005 fbb5 	bl	800eb80 <LoRaMacDeInitialization>
 8009416:	b900      	cbnz	r0, 800941a <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009418:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800941a:	f06f 0001 	mvn.w	r0, #1
 800941e:	e7fb      	b.n	8009418 <LmHandlerStop+0x8>

08009420 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8009420:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8009422:	f004 fb93 	bl	800db4c <LoRaMacHalt>
 8009426:	b900      	cbnz	r0, 800942a <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009428:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800942a:	f06f 0001 	mvn.w	r0, #1
 800942e:	e7fb      	b.n	8009428 <LmHandlerHalt+0x8>

08009430 <LmHandlerGetDutyCycleEnable>:
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetDutyCycleEnable( bool *dutyCycleEnable )
{
    if( dutyCycleEnable == NULL )
 8009430:	b120      	cbz	r0, 800943c <LmHandlerGetDutyCycleEnable+0xc>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 8009432:	4a04      	ldr	r2, [pc, #16]	; (8009444 <LmHandlerGetDutyCycleEnable+0x14>)
 8009434:	79d2      	ldrb	r2, [r2, #7]
 8009436:	7002      	strb	r2, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8009438:	2000      	movs	r0, #0
 800943a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800943c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20000b74 	.word	0x20000b74

08009448 <LmHandlerSetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerSetDutyCycleEnable( bool dutyCycleEnable )
{
 8009448:	b508      	push	{r3, lr}
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 800944a:	4b03      	ldr	r3, [pc, #12]	; (8009458 <LmHandlerSetDutyCycleEnable+0x10>)
 800944c:	71d8      	strb	r0, [r3, #7]
    LoRaMacTestSetDutyCycleOn( dutyCycleEnable );
 800944e:	f005 fb79 	bl	800eb44 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
}
 8009452:	2000      	movs	r0, #0
 8009454:	bd08      	pop	{r3, pc}
 8009456:	bf00      	nop
 8009458:	20000b74 	.word	0x20000b74

0800945c <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800945c:	b180      	cbz	r0, 8009480 <LmHandlerGetTxPower+0x24>
{
 800945e:	b510      	push	{r4, lr}
 8009460:	b08a      	sub	sp, #40	; 0x28
 8009462:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8009464:	2321      	movs	r3, #33	; 0x21
 8009466:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800946a:	4668      	mov	r0, sp
 800946c:	f004 fc0a 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
 8009470:	b948      	cbnz	r0, 8009486 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8009472:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8009476:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 8009478:	4a04      	ldr	r2, [pc, #16]	; (800948c <LmHandlerGetTxPower+0x30>)
 800947a:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800947c:	b00a      	add	sp, #40	; 0x28
 800947e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8009480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009484:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800948a:	e7f7      	b.n	800947c <LmHandlerGetTxPower+0x20>
 800948c:	20000b74 	.word	0x20000b74

08009490 <MlmeConfirm>:
{
 8009490:	b510      	push	{r4, lr}
 8009492:	b08a      	sub	sp, #40	; 0x28
 8009494:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8009496:	4b2c      	ldr	r3, [pc, #176]	; (8009548 <MlmeConfirm+0xb8>)
 8009498:	2200      	movs	r2, #0
 800949a:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800949c:	7842      	ldrb	r2, [r0, #1]
 800949e:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80094a0:	4b2a      	ldr	r3, [pc, #168]	; (800954c <MlmeConfirm+0xbc>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a6:	b10b      	cbz	r3, 80094ac <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80094a8:	4827      	ldr	r0, [pc, #156]	; (8009548 <MlmeConfirm+0xb8>)
 80094aa:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80094ac:	4621      	mov	r1, r4
 80094ae:	2002      	movs	r0, #2
 80094b0:	f7ff fb0e 	bl	8008ad0 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80094b4:	7823      	ldrb	r3, [r4, #0]
 80094b6:	2b05      	cmp	r3, #5
 80094b8:	d037      	beq.n	800952a <MlmeConfirm+0x9a>
 80094ba:	2b0b      	cmp	r3, #11
 80094bc:	d03d      	beq.n	800953a <MlmeConfirm+0xaa>
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d001      	beq.n	80094c6 <MlmeConfirm+0x36>
}
 80094c2:	b00a      	add	sp, #40	; 0x28
 80094c4:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 80094c6:	2306      	movs	r3, #6
 80094c8:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80094cc:	4668      	mov	r0, sp
 80094ce:	f004 fbd9 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80094d2:	9901      	ldr	r1, [sp, #4]
 80094d4:	4b1e      	ldr	r3, [pc, #120]	; (8009550 <MlmeConfirm+0xc0>)
 80094d6:	79d8      	ldrb	r0, [r3, #7]
 80094d8:	f008 fdc2 	bl	8012060 <SecureElementSetDevAddr>
 80094dc:	b910      	cbnz	r0, 80094e4 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80094de:	9a01      	ldr	r2, [sp, #4]
 80094e0:	4b1c      	ldr	r3, [pc, #112]	; (8009554 <MlmeConfirm+0xc4>)
 80094e2:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80094e4:	4c1a      	ldr	r4, [pc, #104]	; (8009550 <MlmeConfirm+0xc0>)
 80094e6:	1d20      	adds	r0, r4, #4
 80094e8:	f7ff fde0 	bl	80090ac <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80094ec:	1d60      	adds	r0, r4, #5
 80094ee:	f7ff ffb5 	bl	800945c <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80094f2:	4b15      	ldr	r3, [pc, #84]	; (8009548 <MlmeConfirm+0xb8>)
 80094f4:	785b      	ldrb	r3, [r3, #1]
 80094f6:	b18b      	cbz	r3, 800951c <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80094f8:	4b15      	ldr	r3, [pc, #84]	; (8009550 <MlmeConfirm+0xc0>)
 80094fa:	22ff      	movs	r2, #255	; 0xff
 80094fc:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80094fe:	4b13      	ldr	r3, [pc, #76]	; (800954c <MlmeConfirm+0xbc>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	b10b      	cbz	r3, 800950a <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8009506:	4812      	ldr	r0, [pc, #72]	; (8009550 <MlmeConfirm+0xc0>)
 8009508:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800950a:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <MlmeConfirm+0xb8>)
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1d7      	bne.n	80094c2 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8009512:	4b0f      	ldr	r3, [pc, #60]	; (8009550 <MlmeConfirm+0xc0>)
 8009514:	79d8      	ldrb	r0, [r3, #7]
 8009516:	f008 fe71 	bl	80121fc <SecureElementPrintSessionKeys>
            break;
 800951a:	e7d2      	b.n	80094c2 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800951c:	2200      	movs	r2, #0
 800951e:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8009520:	4b0d      	ldr	r3, [pc, #52]	; (8009558 <MlmeConfirm+0xc8>)
 8009522:	7858      	ldrb	r0, [r3, #1]
 8009524:	f7ff fd0c 	bl	8008f40 <LmHandlerRequestClass>
 8009528:	e7e9      	b.n	80094fe <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <MlmeConfirm+0xcc>)
 800952c:	2201      	movs	r2, #1
 800952e:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8009530:	7a22      	ldrb	r2, [r4, #8]
 8009532:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8009534:	7a62      	ldrb	r2, [r4, #9]
 8009536:	74da      	strb	r2, [r3, #19]
            break;
 8009538:	e7c3      	b.n	80094c2 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800953a:	7863      	ldrb	r3, [r4, #1]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0c0      	beq.n	80094c2 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 8009540:	f7ff fc12 	bl	8008d68 <LmHandlerDeviceTimeReq>
}
 8009544:	e7bd      	b.n	80094c2 <MlmeConfirm+0x32>
 8009546:	bf00      	nop
 8009548:	200000c0 	.word	0x200000c0
 800954c:	20000b5c 	.word	0x20000b5c
 8009550:	200000a0 	.word	0x200000a0
 8009554:	20000b38 	.word	0x20000b38
 8009558:	20000b74 	.word	0x20000b74
 800955c:	200000ac 	.word	0x200000ac

08009560 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8009560:	b510      	push	{r4, lr}
 8009562:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8009564:	f7ff ff5c 	bl	8009420 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8009568:	4604      	mov	r4, r0
 800956a:	b148      	cbz	r0, 8009580 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800956c:	b92c      	cbnz	r4, 800957a <LmHandlerNvmDataStore+0x1a>
 800956e:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <LmHandlerNvmDataStore+0x70>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	b10b      	cbz	r3, 800957a <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8009576:	2001      	movs	r0, #1
 8009578:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800957a:	4620      	mov	r0, r4
 800957c:	b00a      	add	sp, #40	; 0x28
 800957e:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8009580:	f006 fc10 	bl	800fda4 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 8009584:	f110 0f02 	cmn.w	r0, #2
 8009588:	d012      	beq.n	80095b0 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800958a:	b9d0      	cbnz	r0, 80095c2 <LmHandlerNvmDataStore+0x62>
 800958c:	4b10      	ldr	r3, [pc, #64]	; (80095d0 <LmHandlerNvmDataStore+0x70>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	b1cb      	cbz	r3, 80095c8 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 8009594:	2327      	movs	r3, #39	; 0x27
 8009596:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800959a:	4668      	mov	r0, sp
 800959c:	f004 fb72 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 80095a0:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <LmHandlerNvmDataStore+0x70>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 80095aa:	9801      	ldr	r0, [sp, #4]
 80095ac:	4798      	blx	r3
 80095ae:	e001      	b.n	80095b4 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80095b0:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80095b4:	f006 fc06 	bl	800fdc4 <NvmDataMgmtStoreEnd>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d0d7      	beq.n	800956c <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80095bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80095c0:	e7db      	b.n	800957a <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80095c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80095c6:	e7f5      	b.n	80095b4 <LmHandlerNvmDataStore+0x54>
 80095c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80095cc:	e7f2      	b.n	80095b4 <LmHandlerNvmDataStore+0x54>
 80095ce:	bf00      	nop
 80095d0:	20000b5c 	.word	0x20000b5c

080095d4 <LmhpClockSyncIsInitialized>:
}

static bool LmhpClockSyncIsInitialized( void )
{
    return LmhpClockSyncState.Initialized;
}
 80095d4:	4b01      	ldr	r3, [pc, #4]	; (80095dc <LmhpClockSyncIsInitialized+0x8>)
 80095d6:	7818      	ldrb	r0, [r3, #0]
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	20000bc4 	.word	0x20000bc4

080095e0 <LmhpClockSyncIsTxPending>:

static bool LmhpClockSyncIsTxPending( void )
{
    return LmhpClockSyncState.IsTxPending;
}
 80095e0:	4b01      	ldr	r3, [pc, #4]	; (80095e8 <LmhpClockSyncIsTxPending+0x8>)
 80095e2:	7858      	ldrb	r0, [r3, #1]
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	20000bc4 	.word	0x20000bc4

080095ec <OnPeriodicTimeStartTimer>:

    return status;
}

static void OnPeriodicTimeStartTimer( void *context )
{
 80095ec:	b508      	push	{r3, lr}
    LmhpClockSyncState.NbTransmissions = 1;
 80095ee:	4b05      	ldr	r3, [pc, #20]	; (8009604 <OnPeriodicTimeStartTimer+0x18>)
 80095f0:	2201      	movs	r2, #1
 80095f2:	739a      	strb	r2, [r3, #14]
    TimerStart( &PeriodicTimeStartTimer );
 80095f4:	4804      	ldr	r0, [pc, #16]	; (8009608 <OnPeriodicTimeStartTimer+0x1c>)
 80095f6:	f00b f80f 	bl	8014618 <UTIL_TIMER_Start>
    if( LmhpClockSyncPackage.OnPackageProcessEvent != NULL )
 80095fa:	4b04      	ldr	r3, [pc, #16]	; (800960c <OnPeriodicTimeStartTimer+0x20>)
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	b103      	cbz	r3, 8009602 <OnPeriodicTimeStartTimer+0x16>
    {
        LmhpClockSyncPackage.OnPackageProcessEvent();
 8009600:	4798      	blx	r3
    }
}
 8009602:	bd08      	pop	{r3, pc}
 8009604:	20000bc4 	.word	0x20000bc4
 8009608:	20000bd4 	.word	0x20000bd4
 800960c:	200000dc 	.word	0x200000dc

08009610 <LmhpClockSyncOnMcpsIndication>:
    if( mcpsIndication->Port != CLOCK_SYNC_PORT )
 8009610:	78c3      	ldrb	r3, [r0, #3]
 8009612:	2bca      	cmp	r3, #202	; 0xca
 8009614:	f040 80eb 	bne.w	80097ee <LmhpClockSyncOnMcpsIndication+0x1de>
{
 8009618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	4606      	mov	r6, r0
    uint8_t dataBufferIndex = 0;
 8009620:	2500      	movs	r5, #0
    uint8_t cmdIndex = 0;
 8009622:	462c      	mov	r4, r5
 8009624:	e00e      	b.n	8009644 <LmhpClockSyncOnMcpsIndication+0x34>
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_PKG_VERSION_ANS;
 8009626:	4b72      	ldr	r3, [pc, #456]	; (80097f0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 8009628:	6859      	ldr	r1, [r3, #4]
 800962a:	1c68      	adds	r0, r5, #1
 800962c:	b2c0      	uxtb	r0, r0
 800962e:	2300      	movs	r3, #0
 8009630:	554b      	strb	r3, [r1, r5]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_ID;
 8009632:	1cab      	adds	r3, r5, #2
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2401      	movs	r4, #1
 8009638:	540c      	strb	r4, [r1, r0]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_VERSION;
 800963a:	3503      	adds	r5, #3
 800963c:	b2ed      	uxtb	r5, r5
 800963e:	2002      	movs	r0, #2
 8009640:	54c8      	strb	r0, [r1, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 8009642:	4614      	mov	r4, r2
    while( cmdIndex < mcpsIndication->BufferSize )
 8009644:	7b33      	ldrb	r3, [r6, #12]
 8009646:	42a3      	cmp	r3, r4
 8009648:	f240 80b4 	bls.w	80097b4 <LmhpClockSyncOnMcpsIndication+0x1a4>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800964c:	68b1      	ldr	r1, [r6, #8]
 800964e:	1c63      	adds	r3, r4, #1
 8009650:	b2da      	uxtb	r2, r3
 8009652:	5d0b      	ldrb	r3, [r1, r4]
 8009654:	2b03      	cmp	r3, #3
 8009656:	f200 80ab 	bhi.w	80097b0 <LmhpClockSyncOnMcpsIndication+0x1a0>
 800965a:	a001      	add	r0, pc, #4	; (adr r0, 8009660 <LmhpClockSyncOnMcpsIndication+0x50>)
 800965c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009660:	08009627 	.word	0x08009627
 8009664:	08009671 	.word	0x08009671
 8009668:	08009711 	.word	0x08009711
 800966c:	080097a1 	.word	0x080097a1
                    LmhpClockSyncState.NbTransmissions = 0;
 8009670:	4b5f      	ldr	r3, [pc, #380]	; (80097f0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 8009672:	2000      	movs	r0, #0
 8009674:	7398      	strb	r0, [r3, #14]
                    if( mcpsIndication->DeviceTimeAnsReceived == true )
 8009676:	7e33      	ldrb	r3, [r6, #24]
 8009678:	b113      	cbz	r3, 8009680 <LmhpClockSyncOnMcpsIndication+0x70>
                        cmdIndex += 5;
 800967a:	3406      	adds	r4, #6
 800967c:	b2e4      	uxtb	r4, r4
                        break;
 800967e:	e7e1      	b.n	8009644 <LmhpClockSyncOnMcpsIndication+0x34>
                    timeCorrection  = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 8009680:	1ca0      	adds	r0, r4, #2
 8009682:	b2c0      	uxtb	r0, r0
 8009684:	5c8b      	ldrb	r3, [r1, r2]
                    timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 8009686:	1ce2      	adds	r2, r4, #3
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	5c08      	ldrb	r0, [r1, r0]
 800968c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
                    timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 8009690:	1d20      	adds	r0, r4, #4
 8009692:	b2c0      	uxtb	r0, r0
 8009694:	5c8a      	ldrb	r2, [r1, r2]
 8009696:	eb03 4302 	add.w	r3, r3, r2, lsl #16
                    timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800969a:	1d62      	adds	r2, r4, #5
 800969c:	b2d2      	uxtb	r2, r2
 800969e:	5c08      	ldrb	r0, [r1, r0]
 80096a0:	eb03 6700 	add.w	r7, r3, r0, lsl #24
                    if( ( mcpsIndication->Buffer[cmdIndex++] & 0x0F ) == LmhpClockSyncState.TimeReqParam.Fields.TokenReq )
 80096a4:	3406      	adds	r4, #6
 80096a6:	b2e4      	uxtb	r4, r4
 80096a8:	5c8a      	ldrb	r2, [r1, r2]
 80096aa:	4b51      	ldr	r3, [pc, #324]	; (80097f0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 80096ac:	7a1b      	ldrb	r3, [r3, #8]
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	f002 020f 	and.w	r2, r2, #15
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d1c4      	bne.n	8009644 <LmhpClockSyncOnMcpsIndication+0x34>
                        SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 80096ba:	2300      	movs	r3, #0
 80096bc:	9302      	str	r3, [sp, #8]
 80096be:	f8ad 300c 	strh.w	r3, [sp, #12]
                        curTime = SysTimeGet( );
 80096c2:	a802      	add	r0, sp, #8
 80096c4:	f00a fe60 	bl	8014388 <SysTimeGet>
                        if( LmhpClockSyncState.SysTimeNotSync == true )
 80096c8:	4b49      	ldr	r3, [pc, #292]	; (80097f0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 80096ca:	7a9b      	ldrb	r3, [r3, #10]
 80096cc:	b11b      	cbz	r3, 80096d6 <LmhpClockSyncOnMcpsIndication+0xc6>
                            curTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80096ce:	4b49      	ldr	r3, [pc, #292]	; (80097f4 <LmhpClockSyncOnMcpsIndication+0x1e4>)
 80096d0:	9a02      	ldr	r2, [sp, #8]
 80096d2:	4413      	add	r3, r2
 80096d4:	9302      	str	r3, [sp, #8]
                        curTime.Seconds += timeCorrection;
 80096d6:	9b02      	ldr	r3, [sp, #8]
 80096d8:	443b      	add	r3, r7
 80096da:	9302      	str	r3, [sp, #8]
                        SysTimeSet( curTime );
 80096dc:	ab04      	add	r3, sp, #16
 80096de:	e913 0003 	ldmdb	r3, {r0, r1}
 80096e2:	f00a fe2f 	bl	8014344 <SysTimeSet>
                        LmhpClockSyncState.TimeReqParam.Fields.TokenReq = ( LmhpClockSyncState.TimeReqParam.Fields.TokenReq + 1 ) & 0x0F;
 80096e6:	4942      	ldr	r1, [pc, #264]	; (80097f0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 80096e8:	7a0b      	ldrb	r3, [r1, #8]
 80096ea:	f003 020f 	and.w	r2, r3, #15
 80096ee:	3201      	adds	r2, #1
 80096f0:	f362 0303 	bfi	r3, r2, #0, #4
 80096f4:	720b      	strb	r3, [r1, #8]
                        if( timeCorrection == ( int32_t )0x7FFFFFFF )
 80096f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80096fa:	429f      	cmp	r7, r3
 80096fc:	d005      	beq.n	800970a <LmhpClockSyncOnMcpsIndication+0xfa>
                        else if( LmhpClockSyncPackage.OnSysTimeUpdate != NULL )
 80096fe:	4b3e      	ldr	r3, [pc, #248]	; (80097f8 <LmhpClockSyncOnMcpsIndication+0x1e8>)
 8009700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009702:	2b00      	cmp	r3, #0
 8009704:	d09e      	beq.n	8009644 <LmhpClockSyncOnMcpsIndication+0x34>
                            LmhpClockSyncPackage.OnSysTimeUpdate( );
 8009706:	4798      	blx	r3
 8009708:	e79c      	b.n	8009644 <LmhpClockSyncOnMcpsIndication+0x34>
                            LmhpClockSyncState.NbTransmissions = 1;
 800970a:	2201      	movs	r2, #1
 800970c:	738a      	strb	r2, [r1, #14]
 800970e:	e799      	b.n	8009644 <LmhpClockSyncOnMcpsIndication+0x34>
                    cmdIndex++;
 8009710:	1ca3      	adds	r3, r4, #2
 8009712:	b2db      	uxtb	r3, r3
                    uint32_t periodTime = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 8009714:	3403      	adds	r4, #3
 8009716:	b2e4      	uxtb	r4, r4
 8009718:	5ccb      	ldrb	r3, [r1, r3]
 800971a:	f003 030f 	and.w	r3, r3, #15
                    periodTime = ( 128 << periodTime ) + randr( 0, 30 );
 800971e:	2780      	movs	r7, #128	; 0x80
 8009720:	409f      	lsls	r7, r3
 8009722:	211e      	movs	r1, #30
 8009724:	2000      	movs	r0, #0
 8009726:	f008 fd9d 	bl	8012264 <randr>
 800972a:	4407      	add	r7, r0
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_PERIOD_ANS;
 800972c:	4b30      	ldr	r3, [pc, #192]	; (80097f0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	1c6b      	adds	r3, r5, #1
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2102      	movs	r1, #2
 8009736:	5551      	strb	r1, [r2, r5]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = 0x00;
 8009738:	eb05 0801 	add.w	r8, r5, r1
 800973c:	fa5f f888 	uxtb.w	r8, r8
 8009740:	2100      	movs	r1, #0
 8009742:	54d1      	strb	r1, [r2, r3]
                    SysTime_t curTime = SysTimeGet( );
 8009744:	a802      	add	r0, sp, #8
 8009746:	f00a fe1f 	bl	8014388 <SysTimeGet>
                    if( curTime.Seconds > UNIX_GPS_EPOCH_OFFSET )
 800974a:	9b02      	ldr	r3, [sp, #8]
 800974c:	4a29      	ldr	r2, [pc, #164]	; (80097f4 <LmhpClockSyncOnMcpsIndication+0x1e4>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d902      	bls.n	8009758 <LmhpClockSyncOnMcpsIndication+0x148>
                        curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 8009752:	4a2a      	ldr	r2, [pc, #168]	; (80097fc <LmhpClockSyncOnMcpsIndication+0x1ec>)
 8009754:	441a      	add	r2, r3
 8009756:	9202      	str	r2, [sp, #8]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 0 ) & 0xFF;
 8009758:	9b02      	ldr	r3, [sp, #8]
 800975a:	4a25      	ldr	r2, [pc, #148]	; (80097f0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 800975c:	6852      	ldr	r2, [r2, #4]
 800975e:	1ce9      	adds	r1, r5, #3
 8009760:	b2c9      	uxtb	r1, r1
 8009762:	f802 3008 	strb.w	r3, [r2, r8]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 8 ) & 0xFF;
 8009766:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800976a:	1d28      	adds	r0, r5, #4
 800976c:	b2c0      	uxtb	r0, r0
 800976e:	f802 c001 	strb.w	ip, [r2, r1]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 16 ) & 0xFF;
 8009772:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8009776:	1d69      	adds	r1, r5, #5
 8009778:	b2c9      	uxtb	r1, r1
 800977a:	f802 c000 	strb.w	ip, [r2, r0]
                    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 24 ) & 0xFF;
 800977e:	0e1b      	lsrs	r3, r3, #24
 8009780:	3506      	adds	r5, #6
 8009782:	b2ed      	uxtb	r5, r5
 8009784:	5453      	strb	r3, [r2, r1]
                    TimerSetValue( &PeriodicTimeStartTimer, periodTime * 1000 );
 8009786:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8009800 <LmhpClockSyncOnMcpsIndication+0x1f0>
 800978a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800978e:	fb07 f101 	mul.w	r1, r7, r1
 8009792:	4640      	mov	r0, r8
 8009794:	f00a ff86 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &PeriodicTimeStartTimer );
 8009798:	4640      	mov	r0, r8
 800979a:	f00a ff3d 	bl	8014618 <UTIL_TIMER_Start>
                    break;
 800979e:	e751      	b.n	8009644 <LmhpClockSyncOnMcpsIndication+0x34>
                    LmhpClockSyncState.NbTransmissions = mcpsIndication->Buffer[cmdIndex++] & 0X07;
 80097a0:	3402      	adds	r4, #2
 80097a2:	b2e4      	uxtb	r4, r4
 80097a4:	5c8b      	ldrb	r3, [r1, r2]
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	4a11      	ldr	r2, [pc, #68]	; (80097f0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 80097ac:	7393      	strb	r3, [r2, #14]
                    break;
 80097ae:	e749      	b.n	8009644 <LmhpClockSyncOnMcpsIndication+0x34>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 80097b0:	4614      	mov	r4, r2
 80097b2:	e747      	b.n	8009644 <LmhpClockSyncOnMcpsIndication+0x34>
    if( dataBufferIndex != 0 )
 80097b4:	b915      	cbnz	r5, 80097bc <LmhpClockSyncOnMcpsIndication+0x1ac>
}
 80097b6:	b004      	add	sp, #16
 80097b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LmHandlerAppData_t appData =
 80097bc:	23ca      	movs	r3, #202	; 0xca
 80097be:	f88d 3008 	strb.w	r3, [sp, #8]
 80097c2:	f88d 5009 	strb.w	r5, [sp, #9]
            .Buffer = LmhpClockSyncState.DataBuffer,
 80097c6:	4b0a      	ldr	r3, [pc, #40]	; (80097f0 <LmhpClockSyncOnMcpsIndication+0x1e0>)
 80097c8:	685b      	ldr	r3, [r3, #4]
        LmHandlerAppData_t appData =
 80097ca:	9303      	str	r3, [sp, #12]
        LmHandlerGetDutyCycleEnable( &current_dutycycle );
 80097cc:	f10d 0007 	add.w	r0, sp, #7
 80097d0:	f7ff fe2e 	bl	8009430 <LmHandlerGetDutyCycleEnable>
        LmHandlerSetDutyCycleEnable( false );
 80097d4:	2000      	movs	r0, #0
 80097d6:	f7ff fe37 	bl	8009448 <LmHandlerSetDutyCycleEnable>
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 80097da:	2201      	movs	r2, #1
 80097dc:	2100      	movs	r1, #0
 80097de:	a802      	add	r0, sp, #8
 80097e0:	f7ff fb04 	bl	8008dec <LmHandlerSend>
        LmHandlerSetDutyCycleEnable( current_dutycycle );
 80097e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80097e8:	f7ff fe2e 	bl	8009448 <LmHandlerSetDutyCycleEnable>
 80097ec:	e7e3      	b.n	80097b6 <LmhpClockSyncOnMcpsIndication+0x1a6>
 80097ee:	4770      	bx	lr
 80097f0:	20000bc4 	.word	0x20000bc4
 80097f4:	12d53d80 	.word	0x12d53d80
 80097f8:	200000dc 	.word	0x200000dc
 80097fc:	ed2ac280 	.word	0xed2ac280
 8009800:	20000bd4 	.word	0x20000bd4

08009804 <LmhpClockSyncOnMcpsConfirm>:
    if( LmhpClockSyncState.AppTimeReqPending == true )
 8009804:	4b13      	ldr	r3, [pc, #76]	; (8009854 <LmhpClockSyncOnMcpsConfirm+0x50>)
 8009806:	7a5b      	ldrb	r3, [r3, #9]
 8009808:	b903      	cbnz	r3, 800980c <LmhpClockSyncOnMcpsConfirm+0x8>
 800980a:	4770      	bx	lr
{
 800980c:	b510      	push	{r4, lr}
 800980e:	b08a      	sub	sp, #40	; 0x28
        mibReq.Type = MIB_ADR;
 8009810:	2304      	movs	r3, #4
 8009812:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = LmhpClockSyncState.AdrEnabledPrev;
 8009816:	4c0f      	ldr	r4, [pc, #60]	; (8009854 <LmhpClockSyncOnMcpsConfirm+0x50>)
 8009818:	7ae3      	ldrb	r3, [r4, #11]
 800981a:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800981e:	4668      	mov	r0, sp
 8009820:	f004 fba4 	bl	800df6c <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_NB_TRANS;
 8009824:	2318      	movs	r3, #24
 8009826:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.ChannelsNbTrans = LmhpClockSyncState.NbTransPrev;
 800982a:	7b23      	ldrb	r3, [r4, #12]
 800982c:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009830:	4668      	mov	r0, sp
 8009832:	f004 fb9b 	bl	800df6c <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_DATARATE;
 8009836:	2320      	movs	r3, #32
 8009838:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.ChannelsDatarate = LmhpClockSyncState.DataratePrev;
 800983c:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8009840:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009844:	4668      	mov	r0, sp
 8009846:	f004 fb91 	bl	800df6c <LoRaMacMibSetRequestConfirm>
        LmhpClockSyncState.AppTimeReqPending = false;
 800984a:	2300      	movs	r3, #0
 800984c:	7263      	strb	r3, [r4, #9]
}
 800984e:	b00a      	add	sp, #40	; 0x28
 8009850:	bd10      	pop	{r4, pc}
 8009852:	bf00      	nop
 8009854:	20000bc4 	.word	0x20000bc4

08009858 <LmhpClockSyncInit>:
    if( dataBuffer != NULL )
 8009858:	b1a1      	cbz	r1, 8009884 <LmhpClockSyncInit+0x2c>
{
 800985a:	b500      	push	{lr}
 800985c:	b083      	sub	sp, #12
        LmhpClockSyncState.DataBuffer = dataBuffer;
 800985e:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <LmhpClockSyncInit+0x3c>)
 8009860:	6059      	str	r1, [r3, #4]
        LmhpClockSyncState.DataBufferMaxSize = dataBufferMaxSize;
 8009862:	709a      	strb	r2, [r3, #2]
        LmhpClockSyncState.Initialized = true;
 8009864:	2201      	movs	r2, #1
 8009866:	701a      	strb	r2, [r3, #0]
        TimerInit( &PeriodicTimeStartTimer, OnPeriodicTimeStartTimer );
 8009868:	2200      	movs	r2, #0
 800986a:	9200      	str	r2, [sp, #0]
 800986c:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <LmhpClockSyncInit+0x40>)
 800986e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009872:	480a      	ldr	r0, [pc, #40]	; (800989c <LmhpClockSyncInit+0x44>)
 8009874:	f00a fe18 	bl	80144a8 <UTIL_TIMER_Create>
    LmhpClockSyncState.IsTxPending = false;
 8009878:	4b06      	ldr	r3, [pc, #24]	; (8009894 <LmhpClockSyncInit+0x3c>)
 800987a:	2200      	movs	r2, #0
 800987c:	705a      	strb	r2, [r3, #1]
}
 800987e:	b003      	add	sp, #12
 8009880:	f85d fb04 	ldr.w	pc, [sp], #4
        LmhpClockSyncState.Initialized = false;
 8009884:	4b03      	ldr	r3, [pc, #12]	; (8009894 <LmhpClockSyncInit+0x3c>)
 8009886:	2200      	movs	r2, #0
 8009888:	701a      	strb	r2, [r3, #0]
    LmhpClockSyncState.IsTxPending = false;
 800988a:	4b02      	ldr	r3, [pc, #8]	; (8009894 <LmhpClockSyncInit+0x3c>)
 800988c:	2200      	movs	r2, #0
 800988e:	705a      	strb	r2, [r3, #1]
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20000bc4 	.word	0x20000bc4
 8009898:	080095ed 	.word	0x080095ed
 800989c:	20000bd4 	.word	0x20000bd4

080098a0 <LmhpClockSyncPackageFactory>:
}
 80098a0:	4800      	ldr	r0, [pc, #0]	; (80098a4 <LmhpClockSyncPackageFactory+0x4>)
 80098a2:	4770      	bx	lr
 80098a4:	200000dc 	.word	0x200000dc

080098a8 <LmhpClockSyncAppTimeReq>:
{
 80098a8:	b510      	push	{r4, lr}
 80098aa:	b090      	sub	sp, #64	; 0x40
    if( LmHandlerIsBusy( ) == true )
 80098ac:	f7ff fa88 	bl	8008dc0 <LmHandlerIsBusy>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d16c      	bne.n	800998e <LmhpClockSyncAppTimeReq+0xe6>
    if( LmhpClockSyncState.AppTimeReqPending == false )
 80098b4:	4b37      	ldr	r3, [pc, #220]	; (8009994 <LmhpClockSyncAppTimeReq+0xec>)
 80098b6:	7a5b      	ldrb	r3, [r3, #9]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d03a      	beq.n	8009932 <LmhpClockSyncAppTimeReq+0x8a>
    SysTime_t curTime = SysTimeGet( );
 80098bc:	a80e      	add	r0, sp, #56	; 0x38
 80098be:	f00a fd63 	bl	8014388 <SysTimeGet>
    curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 80098c2:	4b35      	ldr	r3, [pc, #212]	; (8009998 <LmhpClockSyncAppTimeReq+0xf0>)
 80098c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098c6:	4413      	add	r3, r2
 80098c8:	930e      	str	r3, [sp, #56]	; 0x38
    if( curTime.Seconds > UNIX_GPS_EPOCH_OFFSET )
 80098ca:	4a34      	ldr	r2, [pc, #208]	; (800999c <LmhpClockSyncAppTimeReq+0xf4>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d95a      	bls.n	8009986 <LmhpClockSyncAppTimeReq+0xde>
        curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 80098d0:	4a31      	ldr	r2, [pc, #196]	; (8009998 <LmhpClockSyncAppTimeReq+0xf0>)
 80098d2:	441a      	add	r2, r3
 80098d4:	920e      	str	r2, [sp, #56]	; 0x38
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_REQ;
 80098d6:	492f      	ldr	r1, [pc, #188]	; (8009994 <LmhpClockSyncAppTimeReq+0xec>)
 80098d8:	684b      	ldr	r3, [r1, #4]
 80098da:	2401      	movs	r4, #1
 80098dc:	701c      	strb	r4, [r3, #0]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 0 ) & 0xFF;
 80098de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098e0:	705a      	strb	r2, [r3, #1]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 8 ) & 0xFF;
 80098e2:	0a10      	lsrs	r0, r2, #8
 80098e4:	7098      	strb	r0, [r3, #2]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 16 ) & 0xFF;
 80098e6:	0c10      	lsrs	r0, r2, #16
 80098e8:	70d8      	strb	r0, [r3, #3]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 24 ) & 0xFF;
 80098ea:	0e12      	lsrs	r2, r2, #24
 80098ec:	711a      	strb	r2, [r3, #4]
    LmhpClockSyncState.TimeReqParam.Fields.AnsRequired = 0;
 80098ee:	7a0a      	ldrb	r2, [r1, #8]
 80098f0:	f36f 1204 	bfc	r2, #4, #1
 80098f4:	720a      	strb	r2, [r1, #8]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = LmhpClockSyncState.TimeReqParam.Value;
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	715a      	strb	r2, [r3, #5]
    LmHandlerAppData_t appData =
 80098fa:	22ca      	movs	r2, #202	; 0xca
 80098fc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8009900:	2206      	movs	r2, #6
 8009902:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8009906:	930d      	str	r3, [sp, #52]	; 0x34
    LmhpClockSyncState.AppTimeReqPending = true;
 8009908:	724c      	strb	r4, [r1, #9]
    LmHandlerGetDutyCycleEnable( &current_dutycycle );
 800990a:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 800990e:	f7ff fd8f 	bl	8009430 <LmHandlerGetDutyCycleEnable>
    LmHandlerSetDutyCycleEnable( false );
 8009912:	2000      	movs	r0, #0
 8009914:	f7ff fd98 	bl	8009448 <LmHandlerSetDutyCycleEnable>
    LmHandlerErrorStatus_t status = LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8009918:	4622      	mov	r2, r4
 800991a:	2100      	movs	r1, #0
 800991c:	a80c      	add	r0, sp, #48	; 0x30
 800991e:	f7ff fa65 	bl	8008dec <LmHandlerSend>
 8009922:	4604      	mov	r4, r0
    LmHandlerSetDutyCycleEnable( current_dutycycle );
 8009924:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8009928:	f7ff fd8e 	bl	8009448 <LmHandlerSetDutyCycleEnable>
}
 800992c:	4620      	mov	r0, r4
 800992e:	b010      	add	sp, #64	; 0x40
 8009930:	bd10      	pop	{r4, pc}
        mibReq.Type = MIB_ADR;
 8009932:	2304      	movs	r3, #4
 8009934:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8009938:	eb0d 0003 	add.w	r0, sp, r3
 800993c:	f004 f9a2 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
        LmhpClockSyncState.AdrEnabledPrev = mibReq.Param.AdrEnable;
 8009940:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009944:	4c13      	ldr	r4, [pc, #76]	; (8009994 <LmhpClockSyncAppTimeReq+0xec>)
 8009946:	72e3      	strb	r3, [r4, #11]
        mibReq.Param.AdrEnable = false;
 8009948:	2300      	movs	r3, #0
 800994a:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800994e:	a801      	add	r0, sp, #4
 8009950:	f004 fb0c 	bl	800df6c <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_NB_TRANS;
 8009954:	2318      	movs	r3, #24
 8009956:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800995a:	a801      	add	r0, sp, #4
 800995c:	f004 f992 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
        LmhpClockSyncState.NbTransPrev = mibReq.Param.ChannelsNbTrans;
 8009960:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009964:	7323      	strb	r3, [r4, #12]
        mibReq.Param.ChannelsNbTrans = 1;
 8009966:	2301      	movs	r3, #1
 8009968:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800996c:	a801      	add	r0, sp, #4
 800996e:	f004 fafd 	bl	800df6c <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_DATARATE;
 8009972:	2320      	movs	r3, #32
 8009974:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8009978:	a801      	add	r0, sp, #4
 800997a:	f004 f983 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
        LmhpClockSyncState.DataratePrev = mibReq.Param.ChannelsDatarate;
 800997e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009982:	7363      	strb	r3, [r4, #13]
 8009984:	e79a      	b.n	80098bc <LmhpClockSyncAppTimeReq+0x14>
        LmhpClockSyncState.SysTimeNotSync = true;
 8009986:	4b03      	ldr	r3, [pc, #12]	; (8009994 <LmhpClockSyncAppTimeReq+0xec>)
 8009988:	2201      	movs	r2, #1
 800998a:	729a      	strb	r2, [r3, #10]
 800998c:	e7a3      	b.n	80098d6 <LmhpClockSyncAppTimeReq+0x2e>
        return LORAMAC_HANDLER_ERROR;
 800998e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009992:	e7cb      	b.n	800992c <LmhpClockSyncAppTimeReq+0x84>
 8009994:	20000bc4 	.word	0x20000bc4
 8009998:	ed2ac280 	.word	0xed2ac280
 800999c:	12d53d80 	.word	0x12d53d80

080099a0 <LmhpClockSyncProcess>:
{
 80099a0:	b508      	push	{r3, lr}
    if( LmhpClockSyncState.NbTransmissions > 0 )
 80099a2:	4b06      	ldr	r3, [pc, #24]	; (80099bc <LmhpClockSyncProcess+0x1c>)
 80099a4:	7b9b      	ldrb	r3, [r3, #14]
 80099a6:	b903      	cbnz	r3, 80099aa <LmhpClockSyncProcess+0xa>
}
 80099a8:	bd08      	pop	{r3, pc}
        if( LmhpClockSyncAppTimeReq( ) == LORAMAC_HANDLER_SUCCESS )
 80099aa:	f7ff ff7d 	bl	80098a8 <LmhpClockSyncAppTimeReq>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d1fa      	bne.n	80099a8 <LmhpClockSyncProcess+0x8>
            LmhpClockSyncState.NbTransmissions--;
 80099b2:	4a02      	ldr	r2, [pc, #8]	; (80099bc <LmhpClockSyncProcess+0x1c>)
 80099b4:	7b93      	ldrb	r3, [r2, #14]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	7393      	strb	r3, [r2, #14]
}
 80099ba:	e7f5      	b.n	80099a8 <LmhpClockSyncProcess+0x8>
 80099bc:	20000bc4 	.word	0x20000bc4

080099c0 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 80099c0:	4b01      	ldr	r3, [pc, #4]	; (80099c8 <LmhpComplianceIsInitialized+0x8>)
 80099c2:	7818      	ldrb	r0, [r3, #0]
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	20000bf0 	.word	0x20000bf0

080099cc <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 80099cc:	4b01      	ldr	r3, [pc, #4]	; (80099d4 <LmhpComplianceIsTxPending+0x8>)
 80099ce:	7858      	ldrb	r0, [r3, #1]
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000bf0 	.word	0x20000bf0

080099d8 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 80099d8:	4770      	bx	lr

080099da <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 80099da:	4770      	bx	lr

080099dc <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 80099dc:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 80099de:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <OnProcessTimer+0x18>)
 80099e0:	7a9b      	ldrb	r3, [r3, #10]
 80099e2:	b113      	cbz	r3, 80099ea <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 80099e4:	4b03      	ldr	r3, [pc, #12]	; (80099f4 <OnProcessTimer+0x18>)
 80099e6:	2201      	movs	r2, #1
 80099e8:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 80099ea:	4b03      	ldr	r3, [pc, #12]	; (80099f8 <OnProcessTimer+0x1c>)
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	b103      	cbz	r3, 80099f2 <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 80099f0:	4798      	blx	r3
    }
}
 80099f2:	bd08      	pop	{r3, pc}
 80099f4:	20000bf0 	.word	0x20000bf0
 80099f8:	20000114 	.word	0x20000114

080099fc <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 80099fc:	4b8c      	ldr	r3, [pc, #560]	; (8009c30 <LmhpComplianceOnMcpsIndication+0x234>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 8205 	beq.w	8009e10 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8009a06:	78c3      	ldrb	r3, [r0, #3]
 8009a08:	b90b      	cbnz	r3, 8009a0e <LmhpComplianceOnMcpsIndication+0x12>
 8009a0a:	7b83      	ldrb	r3, [r0, #14]
 8009a0c:	b11b      	cbz	r3, 8009a16 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8009a0e:	4a88      	ldr	r2, [pc, #544]	; (8009c30 <LmhpComplianceOnMcpsIndication+0x234>)
 8009a10:	8a13      	ldrh	r3, [r2, #16]
 8009a12:	3301      	adds	r3, #1
 8009a14:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8009a16:	7b43      	ldrb	r3, [r0, #13]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 81f9 	beq.w	8009e10 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8009a1e:	78c3      	ldrb	r3, [r0, #3]
 8009a20:	2be0      	cmp	r3, #224	; 0xe0
 8009a22:	f040 81f5 	bne.w	8009e10 <LmhpComplianceOnMcpsIndication+0x414>
{
 8009a26:	b570      	push	{r4, r5, r6, lr}
 8009a28:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 8009a2a:	4b81      	ldr	r3, [pc, #516]	; (8009c30 <LmhpComplianceOnMcpsIndication+0x234>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8009a30:	6884      	ldr	r4, [r0, #8]
 8009a32:	7823      	ldrb	r3, [r4, #0]
 8009a34:	2b7f      	cmp	r3, #127	; 0x7f
 8009a36:	f200 8093 	bhi.w	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
 8009a3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009a3e:	0080      	.short	0x0080
 8009a40:	00a2009d 	.word	0x00a2009d
 8009a44:	00b200aa 	.word	0x00b200aa
 8009a48:	00c600bf 	.word	0x00c600bf
 8009a4c:	00f000df 	.word	0x00f000df
 8009a50:	0131011d 	.word	0x0131011d
 8009a54:	00910091 	.word	0x00910091
 8009a58:	00910091 	.word	0x00910091
 8009a5c:	00910091 	.word	0x00910091
 8009a60:	00910091 	.word	0x00910091
 8009a64:	00910091 	.word	0x00910091
 8009a68:	00910091 	.word	0x00910091
 8009a6c:	00910091 	.word	0x00910091
 8009a70:	00910091 	.word	0x00910091
 8009a74:	00910091 	.word	0x00910091
 8009a78:	00910091 	.word	0x00910091
 8009a7c:	01350091 	.word	0x01350091
 8009a80:	0140013c 	.word	0x0140013c
 8009a84:	00910091 	.word	0x00910091
 8009a88:	00910091 	.word	0x00910091
 8009a8c:	00910091 	.word	0x00910091
 8009a90:	00910091 	.word	0x00910091
 8009a94:	00910091 	.word	0x00910091
 8009a98:	00910091 	.word	0x00910091
 8009a9c:	00910091 	.word	0x00910091
 8009aa0:	00910091 	.word	0x00910091
 8009aa4:	00910091 	.word	0x00910091
 8009aa8:	00910091 	.word	0x00910091
 8009aac:	00910091 	.word	0x00910091
 8009ab0:	00910091 	.word	0x00910091
 8009ab4:	00910091 	.word	0x00910091
 8009ab8:	00910091 	.word	0x00910091
 8009abc:	00910091 	.word	0x00910091
 8009ac0:	00910091 	.word	0x00910091
 8009ac4:	00910091 	.word	0x00910091
 8009ac8:	00910091 	.word	0x00910091
 8009acc:	00910091 	.word	0x00910091
 8009ad0:	00910091 	.word	0x00910091
 8009ad4:	00910091 	.word	0x00910091
 8009ad8:	00910091 	.word	0x00910091
 8009adc:	00910091 	.word	0x00910091
 8009ae0:	00910091 	.word	0x00910091
 8009ae4:	00910091 	.word	0x00910091
 8009ae8:	00910091 	.word	0x00910091
 8009aec:	00910091 	.word	0x00910091
 8009af0:	00910091 	.word	0x00910091
 8009af4:	00910091 	.word	0x00910091
 8009af8:	00910091 	.word	0x00910091
 8009afc:	00910091 	.word	0x00910091
 8009b00:	00910091 	.word	0x00910091
 8009b04:	00910091 	.word	0x00910091
 8009b08:	00910091 	.word	0x00910091
 8009b0c:	00910091 	.word	0x00910091
 8009b10:	00910091 	.word	0x00910091
 8009b14:	00910091 	.word	0x00910091
 8009b18:	00910091 	.word	0x00910091
 8009b1c:	00910091 	.word	0x00910091
 8009b20:	00910091 	.word	0x00910091
 8009b24:	00910091 	.word	0x00910091
 8009b28:	00910091 	.word	0x00910091
 8009b2c:	00910091 	.word	0x00910091
 8009b30:	00910091 	.word	0x00910091
 8009b34:	00910091 	.word	0x00910091
 8009b38:	016c014b 	.word	0x016c014b
 8009b3c:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8009b3e:	4b3c      	ldr	r3, [pc, #240]	; (8009c30 <LmhpComplianceOnMcpsIndication+0x234>)
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	2101      	movs	r1, #1
 8009b44:	7299      	strb	r1, [r3, #10]
 8009b46:	2000      	movs	r0, #0
 8009b48:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8009b4a:	68d8      	ldr	r0, [r3, #12]
 8009b4c:	7a9a      	ldrb	r2, [r3, #10]
 8009b4e:	1854      	adds	r4, r2, r1
 8009b50:	729c      	strb	r4, [r3, #10]
 8009b52:	2406      	movs	r4, #6
 8009b54:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8009b56:	68d8      	ldr	r0, [r3, #12]
 8009b58:	7a9a      	ldrb	r2, [r3, #10]
 8009b5a:	1854      	adds	r4, r2, r1
 8009b5c:	729c      	strb	r4, [r3, #10]
 8009b5e:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8009b60:	4b33      	ldr	r3, [pc, #204]	; (8009c30 <LmhpComplianceOnMcpsIndication+0x234>)
 8009b62:	7a9b      	ldrb	r3, [r3, #10]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f000 814c 	beq.w	8009e02 <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 8009b6a:	4b32      	ldr	r3, [pc, #200]	; (8009c34 <LmhpComplianceOnMcpsIndication+0x238>)
 8009b6c:	7a5b      	ldrb	r3, [r3, #9]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 813d 	beq.w	8009dee <LmhpComplianceOnMcpsIndication+0x3f2>
}
 8009b74:	b016      	add	sp, #88	; 0x58
 8009b76:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 8009b78:	4b2d      	ldr	r3, [pc, #180]	; (8009c30 <LmhpComplianceOnMcpsIndication+0x234>)
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8009b80:	e7ee      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 8009b82:	4b2d      	ldr	r3, [pc, #180]	; (8009c38 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d0ea      	beq.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	2002      	movs	r0, #2
 8009b8e:	4798      	blx	r3
 8009b90:	e7e6      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8009b92:	7862      	ldrb	r2, [r4, #1]
 8009b94:	4b26      	ldr	r3, [pc, #152]	; (8009c30 <LmhpComplianceOnMcpsIndication+0x234>)
 8009b96:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8009ba0:	e7de      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 8009ba2:	2304      	movs	r3, #4
 8009ba4:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8009ba8:	7863      	ldrb	r3, [r4, #1]
 8009baa:	3b00      	subs	r3, #0
 8009bac:	bf18      	it	ne
 8009bae:	2301      	movne	r3, #1
 8009bb0:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8009bb4:	a801      	add	r0, sp, #4
 8009bb6:	f004 f9d9 	bl	800df6c <LoRaMacMibSetRequestConfirm>
                break;
 8009bba:	e7d1      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8009bbc:	7860      	ldrb	r0, [r4, #1]
 8009bbe:	3800      	subs	r0, #0
 8009bc0:	bf18      	it	ne
 8009bc2:	2001      	movne	r0, #1
 8009bc4:	f004 ffbe 	bl	800eb44 <LoRaMacTestSetDutyCycleOn>
                break;
 8009bc8:	e7ca      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8009bca:	ad01      	add	r5, sp, #4
 8009bcc:	4e1b      	ldr	r6, [pc, #108]	; (8009c3c <LmhpComplianceOnMcpsIndication+0x240>)
 8009bce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bd6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009bda:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8009bde:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8009be0:	2b0a      	cmp	r3, #10
 8009be2:	d8bd      	bhi.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8009be4:	4a16      	ldr	r2, [pc, #88]	; (8009c40 <LmhpComplianceOnMcpsIndication+0x244>)
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	6852      	ldr	r2, [r2, #4]
 8009bea:	2a00      	cmp	r2, #0
 8009bec:	d0b8      	beq.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8009bee:	a916      	add	r1, sp, #88	; 0x58
 8009bf0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009bf4:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8009bf8:	4790      	blx	r2
                break;
 8009bfa:	e7b1      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8009bfc:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8009bfe:	1e53      	subs	r3, r2, #1
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d8ac      	bhi.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8009c06:	1e50      	subs	r0, r2, #1
 8009c08:	bf18      	it	ne
 8009c0a:	2001      	movne	r0, #1
 8009c0c:	4b08      	ldr	r3, [pc, #32]	; (8009c30 <LmhpComplianceOnMcpsIndication+0x234>)
 8009c0e:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8009c10:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <LmhpComplianceOnMcpsIndication+0x244>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0a2      	beq.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8009c1a:	4798      	blx	r3
 8009c1c:	e7a0      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8009c1e:	4b04      	ldr	r3, [pc, #16]	; (8009c30 <LmhpComplianceOnMcpsIndication+0x234>)
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	2101      	movs	r1, #1
 8009c24:	7299      	strb	r1, [r3, #10]
 8009c26:	2308      	movs	r3, #8
 8009c28:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	e01b      	b.n	8009c66 <LmhpComplianceOnMcpsIndication+0x26a>
 8009c2e:	bf00      	nop
 8009c30:	20000bf0 	.word	0x20000bf0
 8009c34:	20000c28 	.word	0x20000c28
 8009c38:	20000114 	.word	0x20000114
 8009c3c:	08019348 	.word	0x08019348
 8009c40:	20000bec 	.word	0x20000bec
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8009c44:	6882      	ldr	r2, [r0, #8]
 8009c46:	f101 0c01 	add.w	ip, r1, #1
 8009c4a:	5c52      	ldrb	r2, [r2, r1]
 8009c4c:	4971      	ldr	r1, [pc, #452]	; (8009e14 <LmhpComplianceOnMcpsIndication+0x418>)
 8009c4e:	68cd      	ldr	r5, [r1, #12]
 8009c50:	7a8c      	ldrb	r4, [r1, #10]
 8009c52:	f104 0e01 	add.w	lr, r4, #1
 8009c56:	f881 e00a 	strb.w	lr, [r1, #10]
 8009c5a:	3201      	adds	r2, #1
 8009c5c:	552a      	strb	r2, [r5, r4]
                     i++ )
 8009c5e:	3301      	adds	r3, #1
 8009c60:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8009c62:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8009c66:	4a6b      	ldr	r2, [pc, #428]	; (8009e14 <LmhpComplianceOnMcpsIndication+0x418>)
 8009c68:	7a52      	ldrb	r2, [r2, #9]
 8009c6a:	7b04      	ldrb	r4, [r0, #12]
 8009c6c:	42a2      	cmp	r2, r4
 8009c6e:	bf28      	it	cs
 8009c70:	4622      	movcs	r2, r4
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d8e6      	bhi.n	8009c44 <LmhpComplianceOnMcpsIndication+0x248>
 8009c76:	e773      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8009c78:	4b66      	ldr	r3, [pc, #408]	; (8009e14 <LmhpComplianceOnMcpsIndication+0x418>)
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	7299      	strb	r1, [r3, #10]
 8009c80:	2109      	movs	r1, #9
 8009c82:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8009c84:	8a18      	ldrh	r0, [r3, #16]
 8009c86:	68d9      	ldr	r1, [r3, #12]
 8009c88:	7a9a      	ldrb	r2, [r3, #10]
 8009c8a:	1c54      	adds	r4, r2, #1
 8009c8c:	729c      	strb	r4, [r3, #10]
 8009c8e:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8009c90:	8a1a      	ldrh	r2, [r3, #16]
 8009c92:	68d8      	ldr	r0, [r3, #12]
 8009c94:	7a99      	ldrb	r1, [r3, #10]
 8009c96:	1c4c      	adds	r4, r1, #1
 8009c98:	729c      	strb	r4, [r3, #10]
 8009c9a:	0a13      	lsrs	r3, r2, #8
 8009c9c:	5443      	strb	r3, [r0, r1]
                break;
 8009c9e:	e75f      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 8009ca0:	4b5c      	ldr	r3, [pc, #368]	; (8009e14 <LmhpComplianceOnMcpsIndication+0x418>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	821a      	strh	r2, [r3, #16]
                break;
 8009ca6:	e75b      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 8009ca8:	2305      	movs	r3, #5
 8009caa:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 8009cae:	a801      	add	r0, sp, #4
 8009cb0:	f004 fd56 	bl	800e760 <LoRaMacMlmeRequest>
                break;
 8009cb4:	e754      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 8009cb6:	4b58      	ldr	r3, [pc, #352]	; (8009e18 <LmhpComplianceOnMcpsIndication+0x41c>)
 8009cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cba:	4798      	blx	r3
                break;
 8009cbc:	e750      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8009cbe:	7860      	ldrb	r0, [r4, #1]
 8009cc0:	4b54      	ldr	r3, [pc, #336]	; (8009e14 <LmhpComplianceOnMcpsIndication+0x418>)
 8009cc2:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8009cc4:	4b55      	ldr	r3, [pc, #340]	; (8009e1c <LmhpComplianceOnMcpsIndication+0x420>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f43f af48 	beq.w	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8009cd0:	4798      	blx	r3
 8009cd2:	e745      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 8009cd4:	7b03      	ldrb	r3, [r0, #12]
 8009cd6:	2b07      	cmp	r3, #7
 8009cd8:	f47f af42 	bne.w	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8009cdc:	2306      	movs	r3, #6
 8009cde:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8009ce2:	7863      	ldrb	r3, [r4, #1]
 8009ce4:	78a2      	ldrb	r2, [r4, #2]
 8009ce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 8009cea:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8009cee:	78e3      	ldrb	r3, [r4, #3]
 8009cf0:	7922      	ldrb	r2, [r4, #4]
 8009cf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8009cf6:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8009cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8009cfc:	2264      	movs	r2, #100	; 0x64
 8009cfe:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8009d02:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8009d04:	6883      	ldr	r3, [r0, #8]
 8009d06:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8009d0a:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 8009d0e:	a801      	add	r0, sp, #4
 8009d10:	f004 fd26 	bl	800e760 <LoRaMacMlmeRequest>
                break;
 8009d14:	e724      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8009d16:	233b      	movs	r3, #59	; 0x3b
 8009d18:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 8009d22:	a80c      	add	r0, sp, #48	; 0x30
 8009d24:	f004 f922 	bl	800df6c <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8009d28:	4b3a      	ldr	r3, [pc, #232]	; (8009e14 <LmhpComplianceOnMcpsIndication+0x418>)
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8009d30:	e716      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 8009d32:	232a      	movs	r3, #42	; 0x2a
 8009d34:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8009d38:	a801      	add	r0, sp, #4
 8009d3a:	f003 ffa3 	bl	800dc84 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8009d3e:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8009d40:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8009d42:	4b34      	ldr	r3, [pc, #208]	; (8009e14 <LmhpComplianceOnMcpsIndication+0x418>)
 8009d44:	68dc      	ldr	r4, [r3, #12]
 8009d46:	7a98      	ldrb	r0, [r3, #10]
 8009d48:	1c45      	adds	r5, r0, #1
 8009d4a:	729d      	strb	r5, [r3, #10]
 8009d4c:	257f      	movs	r5, #127	; 0x7f
 8009d4e:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8009d50:	4832      	ldr	r0, [pc, #200]	; (8009e1c <LmhpComplianceOnMcpsIndication+0x420>)
 8009d52:	6800      	ldr	r0, [r0, #0]
 8009d54:	68dd      	ldr	r5, [r3, #12]
 8009d56:	7a9c      	ldrb	r4, [r3, #10]
 8009d58:	1c66      	adds	r6, r4, #1
 8009d5a:	729e      	strb	r6, [r3, #10]
 8009d5c:	78c6      	ldrb	r6, [r0, #3]
 8009d5e:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8009d60:	68dd      	ldr	r5, [r3, #12]
 8009d62:	7a9c      	ldrb	r4, [r3, #10]
 8009d64:	1c66      	adds	r6, r4, #1
 8009d66:	729e      	strb	r6, [r3, #10]
 8009d68:	7886      	ldrb	r6, [r0, #2]
 8009d6a:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8009d6c:	68dd      	ldr	r5, [r3, #12]
 8009d6e:	7a9c      	ldrb	r4, [r3, #10]
 8009d70:	1c66      	adds	r6, r4, #1
 8009d72:	729e      	strb	r6, [r3, #10]
 8009d74:	7846      	ldrb	r6, [r0, #1]
 8009d76:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8009d78:	68dd      	ldr	r5, [r3, #12]
 8009d7a:	7a9c      	ldrb	r4, [r3, #10]
 8009d7c:	1c66      	adds	r6, r4, #1
 8009d7e:	729e      	strb	r6, [r3, #10]
 8009d80:	7800      	ldrb	r0, [r0, #0]
 8009d82:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8009d84:	68dc      	ldr	r4, [r3, #12]
 8009d86:	7a98      	ldrb	r0, [r3, #10]
 8009d88:	1c45      	adds	r5, r0, #1
 8009d8a:	729d      	strb	r5, [r3, #10]
 8009d8c:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8009d90:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8009d92:	68dc      	ldr	r4, [r3, #12]
 8009d94:	7a98      	ldrb	r0, [r3, #10]
 8009d96:	1c45      	adds	r5, r0, #1
 8009d98:	729d      	strb	r5, [r3, #10]
 8009d9a:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8009d9e:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8009da0:	68dc      	ldr	r4, [r3, #12]
 8009da2:	7a98      	ldrb	r0, [r3, #10]
 8009da4:	1c45      	adds	r5, r0, #1
 8009da6:	729d      	strb	r5, [r3, #10]
 8009da8:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8009dac:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8009dae:	68dc      	ldr	r4, [r3, #12]
 8009db0:	7a98      	ldrb	r0, [r3, #10]
 8009db2:	1c45      	adds	r5, r0, #1
 8009db4:	729d      	strb	r5, [r3, #10]
 8009db6:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8009db8:	68d8      	ldr	r0, [r3, #12]
 8009dba:	7a99      	ldrb	r1, [r3, #10]
 8009dbc:	1c4c      	adds	r4, r1, #1
 8009dbe:	729c      	strb	r4, [r3, #10]
 8009dc0:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8009dc4:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8009dc6:	68d8      	ldr	r0, [r3, #12]
 8009dc8:	7a99      	ldrb	r1, [r3, #10]
 8009dca:	1c4c      	adds	r4, r1, #1
 8009dcc:	729c      	strb	r4, [r3, #10]
 8009dce:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009dd2:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8009dd4:	68d8      	ldr	r0, [r3, #12]
 8009dd6:	7a99      	ldrb	r1, [r3, #10]
 8009dd8:	1c4c      	adds	r4, r1, #1
 8009dda:	729c      	strb	r4, [r3, #10]
 8009ddc:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009de0:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8009de2:	68d8      	ldr	r0, [r3, #12]
 8009de4:	7a99      	ldrb	r1, [r3, #10]
 8009de6:	1c4c      	adds	r4, r1, #1
 8009de8:	729c      	strb	r4, [r3, #10]
 8009dea:	5442      	strb	r2, [r0, r1]
                break;
 8009dec:	e6b8      	b.n	8009b60 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 8009dee:	4c0c      	ldr	r4, [pc, #48]	; (8009e20 <LmhpComplianceOnMcpsIndication+0x424>)
 8009df0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009df4:	4620      	mov	r0, r4
 8009df6:	f00a fc55 	bl	80146a4 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f00a fc0c 	bl	8014618 <UTIL_TIMER_Start>
 8009e00:	e6b8      	b.n	8009b74 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 8009e02:	4807      	ldr	r0, [pc, #28]	; (8009e20 <LmhpComplianceOnMcpsIndication+0x424>)
 8009e04:	f00a fbae 	bl	8014564 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <LmhpComplianceOnMcpsIndication+0x418>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	705a      	strb	r2, [r3, #1]
 8009e0e:	e6b1      	b.n	8009b74 <LmhpComplianceOnMcpsIndication+0x178>
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	20000bf0 	.word	0x20000bf0
 8009e18:	20000114 	.word	0x20000114
 8009e1c:	20000bec 	.word	0x20000bec
 8009e20:	20000c28 	.word	0x20000c28

08009e24 <LmhpComplianceProcess>:
{
 8009e24:	b530      	push	{r4, r5, lr}
 8009e26:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8009e28:	4b27      	ldr	r3, [pc, #156]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	b993      	cbnz	r3, 8009e54 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8009e2e:	4b26      	ldr	r3, [pc, #152]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d13d      	bne.n	8009eb4 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 8009e38:	4b23      	ldr	r3, [pc, #140]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e3e:	b13b      	cbz	r3, 8009e50 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8009e40:	4b21      	ldr	r3, [pc, #132]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 8009e48:	4b20      	ldr	r3, [pc, #128]	; (8009ecc <LmhpComplianceProcess+0xa8>)
 8009e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e4c:	b103      	cbz	r3, 8009e50 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8009e4e:	4798      	blx	r3
}
 8009e50:	b003      	add	sp, #12
 8009e52:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8009e54:	f00a fb46 	bl	80144e4 <UTIL_TIMER_GetCurrentTime>
 8009e58:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009e5c:	685d      	ldr	r5, [r3, #4]
 8009e5e:	f7fe ff97 	bl	8008d90 <LmHandlerGetDutyCycleWaitTime>
 8009e62:	4405      	add	r5, r0
 8009e64:	42a5      	cmp	r5, r4
 8009e66:	d2e7      	bcs.n	8009e38 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8009e68:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009e6a:	7a9b      	ldrb	r3, [r3, #10]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0e3      	beq.n	8009e38 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 8009e70:	22e0      	movs	r2, #224	; 0xe0
 8009e72:	f88d 2000 	strb.w	r2, [sp]
 8009e76:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8009e7a:	4b13      	ldr	r3, [pc, #76]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009e7c:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 8009e7e:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8009e80:	2201      	movs	r2, #1
 8009e82:	7a19      	ldrb	r1, [r3, #8]
 8009e84:	4668      	mov	r0, sp
 8009e86:	f7fe ffb1 	bl	8008dec <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8009e8a:	b110      	cbz	r0, 8009e92 <LmhpComplianceProcess+0x6e>
 8009e8c:	f110 0f07 	cmn.w	r0, #7
 8009e90:	d106      	bne.n	8009ea0 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 8009e92:	4b0d      	ldr	r3, [pc, #52]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8009e98:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8009e9a:	4b0b      	ldr	r3, [pc, #44]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009e9c:	605c      	str	r4, [r3, #4]
 8009e9e:	e7cb      	b.n	8009e38 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 8009ea0:	4d0b      	ldr	r5, [pc, #44]	; (8009ed0 <LmhpComplianceProcess+0xac>)
 8009ea2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f00a fbfc 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8009eac:	4628      	mov	r0, r5
 8009eae:	f00a fbb3 	bl	8014618 <UTIL_TIMER_Start>
 8009eb2:	e7f2      	b.n	8009e9a <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 8009eb4:	4b04      	ldr	r3, [pc, #16]	; (8009ec8 <LmhpComplianceProcess+0xa4>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8009ebc:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8009ec0:	f7ff f83e 	bl	8008f40 <LmHandlerRequestClass>
 8009ec4:	e7b8      	b.n	8009e38 <LmhpComplianceProcess+0x14>
 8009ec6:	bf00      	nop
 8009ec8:	20000bf0 	.word	0x20000bf0
 8009ecc:	20000114 	.word	0x20000114
 8009ed0:	20000c28 	.word	0x20000c28

08009ed4 <LmhpComplianceInit>:
{
 8009ed4:	b530      	push	{r4, r5, lr}
 8009ed6:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8009ed8:	b188      	cbz	r0, 8009efe <LmhpComplianceInit+0x2a>
 8009eda:	4603      	mov	r3, r0
 8009edc:	b179      	cbz	r1, 8009efe <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8009ede:	4813      	ldr	r0, [pc, #76]	; (8009f2c <LmhpComplianceInit+0x58>)
 8009ee0:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8009ee2:	4b13      	ldr	r3, [pc, #76]	; (8009f30 <LmhpComplianceInit+0x5c>)
 8009ee4:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8009ee6:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8009ee8:	2201      	movs	r2, #1
 8009eea:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8009eec:	2200      	movs	r2, #0
 8009eee:	9200      	str	r2, [sp, #0]
 8009ef0:	4b10      	ldr	r3, [pc, #64]	; (8009f34 <LmhpComplianceInit+0x60>)
 8009ef2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009ef6:	4810      	ldr	r0, [pc, #64]	; (8009f38 <LmhpComplianceInit+0x64>)
 8009ef8:	f00a fad6 	bl	80144a8 <UTIL_TIMER_Create>
 8009efc:	e004      	b.n	8009f08 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	4a0a      	ldr	r2, [pc, #40]	; (8009f2c <LmhpComplianceInit+0x58>)
 8009f02:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8009f04:	4a0a      	ldr	r2, [pc, #40]	; (8009f30 <LmhpComplianceInit+0x5c>)
 8009f06:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8009f08:	4c09      	ldr	r4, [pc, #36]	; (8009f30 <LmhpComplianceInit+0x5c>)
 8009f0a:	2500      	movs	r5, #0
 8009f0c:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8009f0e:	2220      	movs	r2, #32
 8009f10:	4629      	mov	r1, r5
 8009f12:	f104 0014 	add.w	r0, r4, #20
 8009f16:	f008 f9ca 	bl	80122ae <memset1>
    ComplianceTestState.IsTxPending = false;
 8009f1a:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8009f1c:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8009f1e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8009f22:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8009f26:	b003      	add	sp, #12
 8009f28:	bd30      	pop	{r4, r5, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000bec 	.word	0x20000bec
 8009f30:	20000bf0 	.word	0x20000bf0
 8009f34:	080099dd 	.word	0x080099dd
 8009f38:	20000c28 	.word	0x20000c28

08009f3c <LmhpCompliancePackageFactory>:
}
 8009f3c:	4800      	ldr	r0, [pc, #0]	; (8009f40 <LmhpCompliancePackageFactory+0x4>)
 8009f3e:	4770      	bx	lr
 8009f40:	20000114 	.word	0x20000114

08009f44 <LmhpFirmwareManagementIsInitialized>:
}

static bool LmhpFirmwareManagementIsInitialized( void )
{
    return LmhpFirmwareManagementState.Initialized;
}
 8009f44:	4b01      	ldr	r3, [pc, #4]	; (8009f4c <LmhpFirmwareManagementIsInitialized+0x8>)
 8009f46:	7818      	ldrb	r0, [r3, #0]
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	20000c40 	.word	0x20000c40

08009f50 <LmhpFirmwareManagementIsTxPending>:

static bool LmhpFirmwareManagementIsTxPending( void )
{
    return LmhpFirmwareManagementState.IsTxPending;
}
 8009f50:	4b01      	ldr	r3, [pc, #4]	; (8009f58 <LmhpFirmwareManagementIsTxPending+0x8>)
 8009f52:	7858      	ldrb	r0, [r3, #1]
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	20000c40 	.word	0x20000c40

08009f5c <LmhpFirmwareManagementProcess>:

static void LmhpFirmwareManagementProcess( void )
{
    /* Not yet implemented */
}
 8009f5c:	4770      	bx	lr
	...

08009f60 <OnRebootTimer>:
        LmHandlerSetDutyCycleEnable( current_dutycycle );
    }
}

static void OnRebootTimer( void *context )
{
 8009f60:	b508      	push	{r3, lr}
#if (INTEROP_TEST_MODE == 0)
    /* Do a request to Run the Secure boot - The file is already in flash */
#if (LORAWAN_PACKAGES_VERSION == 2)
    FwUpdateAgent_Run();
 8009f62:	f7f9 f815 	bl	8002f90 <FwUpdateAgent_Run>
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* INTEROP_TEST_MODE */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LmhpFirmwareManagementPackage.OnSystemReset != NULL )
 8009f66:	4b09      	ldr	r3, [pc, #36]	; (8009f8c <OnRebootTimer+0x2c>)
 8009f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6a:	b10b      	cbz	r3, 8009f70 <OnRebootTimer+0x10>
    {
        LmhpFirmwareManagementPackage.OnSystemReset();
 8009f6c:	4798      	blx	r3
    else
#endif /* LORAMAC_VERSION */
    {
        NVIC_SystemReset();
    }
}
 8009f6e:	bd08      	pop	{r3, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 8009f70:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009f74:	4906      	ldr	r1, [pc, #24]	; (8009f90 <OnRebootTimer+0x30>)
 8009f76:	68ca      	ldr	r2, [r1, #12]
 8009f78:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009f7c:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <OnRebootTimer+0x34>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60cb      	str	r3, [r1, #12]
 8009f82:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009f86:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009f88:	e7fd      	b.n	8009f86 <OnRebootTimer+0x26>
 8009f8a:	bf00      	nop
 8009f8c:	2000014c 	.word	0x2000014c
 8009f90:	e000ed00 	.word	0xe000ed00
 8009f94:	05fa0004 	.word	0x05fa0004

08009f98 <LmhpFirmwareManagementOnMcpsIndication>:
    if( mcpsIndication->Port != FW_MANAGEMENT_PORT )
 8009f98:	78c3      	ldrb	r3, [r0, #3]
 8009f9a:	2bcb      	cmp	r3, #203	; 0xcb
 8009f9c:	f040 8110 	bne.w	800a1c0 <LmhpFirmwareManagementOnMcpsIndication+0x228>
{
 8009fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	4606      	mov	r6, r0
    uint8_t dataBufferIndex = 0;
 8009fa8:	2400      	movs	r4, #0
    uint8_t cmdIndex = 0;
 8009faa:	4625      	mov	r5, r4
 8009fac:	e00e      	b.n	8009fcc <LmhpFirmwareManagementOnMcpsIndication+0x34>
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_PKG_VERSION_ANS;
 8009fae:	4b85      	ldr	r3, [pc, #532]	; (800a1c4 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 8009fb0:	6859      	ldr	r1, [r3, #4]
 8009fb2:	1c60      	adds	r0, r4, #1
 8009fb4:	b2c0      	uxtb	r0, r0
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	550b      	strb	r3, [r1, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_ID;
 8009fba:	1ca3      	adds	r3, r4, #2
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2504      	movs	r5, #4
 8009fc0:	540d      	strb	r5, [r1, r0]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_VERSION;
 8009fc2:	3403      	adds	r4, #3
 8009fc4:	b2e4      	uxtb	r4, r4
 8009fc6:	2001      	movs	r0, #1
 8009fc8:	54c8      	strb	r0, [r1, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 8009fca:	4615      	mov	r5, r2
    while( cmdIndex < mcpsIndication->BufferSize )
 8009fcc:	7b33      	ldrb	r3, [r6, #12]
 8009fce:	42ab      	cmp	r3, r5
 8009fd0:	f240 80d9 	bls.w	800a186 <LmhpFirmwareManagementOnMcpsIndication+0x1ee>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 8009fd4:	68b1      	ldr	r1, [r6, #8]
 8009fd6:	1c6b      	adds	r3, r5, #1
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	5d4b      	ldrb	r3, [r1, r5]
 8009fdc:	2b05      	cmp	r3, #5
 8009fde:	f200 80d0 	bhi.w	800a182 <LmhpFirmwareManagementOnMcpsIndication+0x1ea>
 8009fe2:	a001      	add	r0, pc, #4	; (adr r0, 8009fe8 <LmhpFirmwareManagementOnMcpsIndication+0x50>)
 8009fe4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009fe8:	08009faf 	.word	0x08009faf
 8009fec:	0800a001 	.word	0x0800a001
 8009ff0:	0800a04d 	.word	0x0800a04d
 8009ff4:	0800a0e1 	.word	0x0800a0e1
 8009ff8:	0800a151 	.word	0x0800a151
 8009ffc:	0800a169 	.word	0x0800a169
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_VERSION_ANS;
 800a000:	4970      	ldr	r1, [pc, #448]	; (800a1c4 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800a002:	684b      	ldr	r3, [r1, #4]
 800a004:	1c65      	adds	r5, r4, #1
 800a006:	b2ed      	uxtb	r5, r5
 800a008:	2001      	movs	r0, #1
 800a00a:	5518      	strb	r0, [r3, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = LmhpFirmwareManagementState.fwVersion.Fields.Major;
 800a00c:	1ca0      	adds	r0, r4, #2
 800a00e:	b2c0      	uxtb	r0, r0
 800a010:	7acf      	ldrb	r7, [r1, #11]
 800a012:	555f      	strb	r7, [r3, r5]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = LmhpFirmwareManagementState.fwVersion.Fields.Minor;
 800a014:	1ce5      	adds	r5, r4, #3
 800a016:	b2ed      	uxtb	r5, r5
 800a018:	7a8f      	ldrb	r7, [r1, #10]
 800a01a:	541f      	strb	r7, [r3, r0]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = LmhpFirmwareManagementState.fwVersion.Fields.Patch;
 800a01c:	1d20      	adds	r0, r4, #4
 800a01e:	b2c0      	uxtb	r0, r0
 800a020:	7a4f      	ldrb	r7, [r1, #9]
 800a022:	555f      	strb	r7, [r3, r5]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = LmhpFirmwareManagementState.fwVersion.Fields.Revision;
 800a024:	1d65      	adds	r5, r4, #5
 800a026:	b2ed      	uxtb	r5, r5
 800a028:	7a09      	ldrb	r1, [r1, #8]
 800a02a:	5419      	strb	r1, [r3, r0]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( HW_VERSION >> 0 ) & 0xFF;
 800a02c:	1da0      	adds	r0, r4, #6
 800a02e:	b2c0      	uxtb	r0, r0
 800a030:	2100      	movs	r1, #0
 800a032:	5559      	strb	r1, [r3, r5]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( HW_VERSION >> 8 ) & 0xFF;
 800a034:	1de5      	adds	r5, r4, #7
 800a036:	b2ed      	uxtb	r5, r5
 800a038:	5419      	strb	r1, [r3, r0]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( HW_VERSION >> 16 ) & 0xFF;
 800a03a:	f104 0008 	add.w	r0, r4, #8
 800a03e:	b2c0      	uxtb	r0, r0
 800a040:	5559      	strb	r1, [r3, r5]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( HW_VERSION >> 24 ) & 0xFF;
 800a042:	3409      	adds	r4, #9
 800a044:	b2e4      	uxtb	r4, r4
 800a046:	5419      	strb	r1, [r3, r0]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a048:	4615      	mov	r5, r2
                    break;
 800a04a:	e7bf      	b.n	8009fcc <LmhpFirmwareManagementOnMcpsIndication+0x34>
                    rebootTimeReq  = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800a04c:	1cab      	adds	r3, r5, #2
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	5c8f      	ldrb	r7, [r1, r2]
                    rebootTimeReq += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800a052:	1cea      	adds	r2, r5, #3
 800a054:	b2d2      	uxtb	r2, r2
 800a056:	5ccb      	ldrb	r3, [r1, r3]
 800a058:	eb07 2703 	add.w	r7, r7, r3, lsl #8
                    rebootTimeReq += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800a05c:	1d2b      	adds	r3, r5, #4
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	5c8a      	ldrb	r2, [r1, r2]
 800a062:	eb07 4702 	add.w	r7, r7, r2, lsl #16
                    rebootTimeReq += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800a066:	3505      	adds	r5, #5
 800a068:	b2ed      	uxtb	r5, r5
 800a06a:	5ccb      	ldrb	r3, [r1, r3]
                    if( rebootTimeReq == 0 )
 800a06c:	eb17 6703 	adds.w	r7, r7, r3, lsl #24
 800a070:	d019      	beq.n	800a0a6 <LmhpFirmwareManagementOnMcpsIndication+0x10e>
                    else if( rebootTimeReq == 0xFFFFFFFF )
 800a072:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800a076:	d02f      	beq.n	800a0d8 <LmhpFirmwareManagementOnMcpsIndication+0x140>
                        SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 800a078:	2300      	movs	r3, #0
 800a07a:	9302      	str	r3, [sp, #8]
 800a07c:	f8ad 300c 	strh.w	r3, [sp, #12]
                        curTime = SysTimeGet();
 800a080:	a802      	add	r0, sp, #8
 800a082:	f00a f981 	bl	8014388 <SysTimeGet>
                        rebootTimeAns = rebootTimeReq - curTime.Seconds;
 800a086:	9b02      	ldr	r3, [sp, #8]
                        if( rebootTimeAns > 0 )
 800a088:	1aff      	subs	r7, r7, r3
 800a08a:	d00f      	beq.n	800a0ac <LmhpFirmwareManagementOnMcpsIndication+0x114>
                            TimerSetValue( &RebootTimer, rebootTimeAns * 1000 );
 800a08c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800a1c8 <LmhpFirmwareManagementOnMcpsIndication+0x230>
 800a090:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a094:	fb07 f101 	mul.w	r1, r7, r1
 800a098:	4640      	mov	r0, r8
 800a09a:	f00a fb03 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                            TimerStart( &RebootTimer );
 800a09e:	4640      	mov	r0, r8
 800a0a0:	f00a faba 	bl	8014618 <UTIL_TIMER_Start>
 800a0a4:	e002      	b.n	800a0ac <LmhpFirmwareManagementOnMcpsIndication+0x114>
                        OnRebootTimer( NULL );
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	f7ff ff5a 	bl	8009f60 <OnRebootTimer>
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_REBOOT_TIME_ANS;
 800a0ac:	4b45      	ldr	r3, [pc, #276]	; (800a1c4 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	1c61      	adds	r1, r4, #1
 800a0b2:	b2c9      	uxtb	r1, r1
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	551a      	strb	r2, [r3, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootTimeAns >> 0 ) & 0xFF;
 800a0b8:	18a2      	adds	r2, r4, r2
 800a0ba:	b2d2      	uxtb	r2, r2
 800a0bc:	545f      	strb	r7, [r3, r1]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootTimeAns >> 8 ) & 0xFF;
 800a0be:	0a38      	lsrs	r0, r7, #8
 800a0c0:	1ce1      	adds	r1, r4, #3
 800a0c2:	b2c9      	uxtb	r1, r1
 800a0c4:	5498      	strb	r0, [r3, r2]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootTimeAns >> 16 ) & 0xFF;
 800a0c6:	0c38      	lsrs	r0, r7, #16
 800a0c8:	1d22      	adds	r2, r4, #4
 800a0ca:	b2d2      	uxtb	r2, r2
 800a0cc:	5458      	strb	r0, [r3, r1]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootTimeAns >> 24 ) & 0xFF;
 800a0ce:	0e3f      	lsrs	r7, r7, #24
 800a0d0:	3405      	adds	r4, #5
 800a0d2:	b2e4      	uxtb	r4, r4
 800a0d4:	549f      	strb	r7, [r3, r2]
                    break;
 800a0d6:	e779      	b.n	8009fcc <LmhpFirmwareManagementOnMcpsIndication+0x34>
                        TimerStop( &RebootTimer );
 800a0d8:	483b      	ldr	r0, [pc, #236]	; (800a1c8 <LmhpFirmwareManagementOnMcpsIndication+0x230>)
 800a0da:	f00a fa43 	bl	8014564 <UTIL_TIMER_Stop>
 800a0de:	e7e5      	b.n	800a0ac <LmhpFirmwareManagementOnMcpsIndication+0x114>
                    rebootCountdown  = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800a0e0:	1ca8      	adds	r0, r5, #2
 800a0e2:	b2c0      	uxtb	r0, r0
 800a0e4:	5c8b      	ldrb	r3, [r1, r2]
                    rebootCountdown += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800a0e6:	1cea      	adds	r2, r5, #3
 800a0e8:	b2d2      	uxtb	r2, r2
 800a0ea:	5c08      	ldrb	r0, [r1, r0]
 800a0ec:	eb03 2300 	add.w	r3, r3, r0, lsl #8
                    rebootCountdown += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800a0f0:	3504      	adds	r5, #4
 800a0f2:	b2ed      	uxtb	r5, r5
 800a0f4:	5c8a      	ldrb	r2, [r1, r2]
                    if( rebootCountdown == 0 )
 800a0f6:	eb13 4702 	adds.w	r7, r3, r2, lsl #16
 800a0fa:	d021      	beq.n	800a140 <LmhpFirmwareManagementOnMcpsIndication+0x1a8>
                    else if( rebootCountdown == 0xFFFFFF )
 800a0fc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800a100:	429f      	cmp	r7, r3
 800a102:	d021      	beq.n	800a148 <LmhpFirmwareManagementOnMcpsIndication+0x1b0>
                            TimerSetValue( &RebootTimer, rebootCountdown * 1000 );
 800a104:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800a1c8 <LmhpFirmwareManagementOnMcpsIndication+0x230>
 800a108:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a10c:	fb07 f101 	mul.w	r1, r7, r1
 800a110:	4640      	mov	r0, r8
 800a112:	f00a fac7 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                            TimerStart( &RebootTimer );
 800a116:	4640      	mov	r0, r8
 800a118:	f00a fa7e 	bl	8014618 <UTIL_TIMER_Start>
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_REBOOT_COUNTDOWN_ANS;
 800a11c:	4b29      	ldr	r3, [pc, #164]	; (800a1c4 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	1c61      	adds	r1, r4, #1
 800a122:	b2c9      	uxtb	r1, r1
 800a124:	2303      	movs	r3, #3
 800a126:	5513      	strb	r3, [r2, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootCountdown >> 0 ) & 0xFF;
 800a128:	1ca3      	adds	r3, r4, #2
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	5457      	strb	r7, [r2, r1]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootCountdown >> 8 ) & 0xFF;
 800a12e:	0a38      	lsrs	r0, r7, #8
 800a130:	1ce1      	adds	r1, r4, #3
 800a132:	b2c9      	uxtb	r1, r1
 800a134:	54d0      	strb	r0, [r2, r3]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = ( rebootCountdown >> 16 ) & 0xFF;
 800a136:	0c3b      	lsrs	r3, r7, #16
 800a138:	3404      	adds	r4, #4
 800a13a:	b2e4      	uxtb	r4, r4
 800a13c:	5453      	strb	r3, [r2, r1]
                    break;
 800a13e:	e745      	b.n	8009fcc <LmhpFirmwareManagementOnMcpsIndication+0x34>
                        OnRebootTimer( NULL );
 800a140:	2000      	movs	r0, #0
 800a142:	f7ff ff0d 	bl	8009f60 <OnRebootTimer>
 800a146:	e7e9      	b.n	800a11c <LmhpFirmwareManagementOnMcpsIndication+0x184>
                        TimerStop( &RebootTimer );
 800a148:	481f      	ldr	r0, [pc, #124]	; (800a1c8 <LmhpFirmwareManagementOnMcpsIndication+0x230>)
 800a14a:	f00a fa0b 	bl	8014564 <UTIL_TIMER_Stop>
 800a14e:	e7e5      	b.n	800a11c <LmhpFirmwareManagementOnMcpsIndication+0x184>
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_UPGRADE_IMAGE_ANS;
 800a150:	4b1c      	ldr	r3, [pc, #112]	; (800a1c4 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800a152:	6859      	ldr	r1, [r3, #4]
 800a154:	1c63      	adds	r3, r4, #1
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2004      	movs	r0, #4
 800a15a:	5508      	strb	r0, [r1, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = imageStatus & 0x03;
 800a15c:	3402      	adds	r4, #2
 800a15e:	b2e4      	uxtb	r4, r4
 800a160:	2000      	movs	r0, #0
 800a162:	54c8      	strb	r0, [r1, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a164:	4615      	mov	r5, r2
 800a166:	e731      	b.n	8009fcc <LmhpFirmwareManagementOnMcpsIndication+0x34>
                    firmwareVersion += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800a168:	3505      	adds	r5, #5
 800a16a:	b2ed      	uxtb	r5, r5
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = FW_MANAGEMENT_DEV_DELETE_IMAGE_ANS;
 800a16c:	4b15      	ldr	r3, [pc, #84]	; (800a1c4 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	1c63      	adds	r3, r4, #1
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2105      	movs	r1, #5
 800a176:	5511      	strb	r1, [r2, r4]
                    LmhpFirmwareManagementState.DataBuffer[dataBufferIndex++] = 0x01;
 800a178:	3402      	adds	r4, #2
 800a17a:	b2e4      	uxtb	r4, r4
 800a17c:	2101      	movs	r1, #1
 800a17e:	54d1      	strb	r1, [r2, r3]
                    break;
 800a180:	e724      	b.n	8009fcc <LmhpFirmwareManagementOnMcpsIndication+0x34>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a182:	4615      	mov	r5, r2
 800a184:	e722      	b.n	8009fcc <LmhpFirmwareManagementOnMcpsIndication+0x34>
    if( dataBufferIndex != 0 )
 800a186:	b914      	cbnz	r4, 800a18e <LmhpFirmwareManagementOnMcpsIndication+0x1f6>
}
 800a188:	b004      	add	sp, #16
 800a18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LmHandlerAppData_t appData =
 800a18e:	23cb      	movs	r3, #203	; 0xcb
 800a190:	f88d 3008 	strb.w	r3, [sp, #8]
 800a194:	f88d 4009 	strb.w	r4, [sp, #9]
            .Buffer = LmhpFirmwareManagementState.DataBuffer,
 800a198:	4b0a      	ldr	r3, [pc, #40]	; (800a1c4 <LmhpFirmwareManagementOnMcpsIndication+0x22c>)
 800a19a:	685b      	ldr	r3, [r3, #4]
        LmHandlerAppData_t appData =
 800a19c:	9303      	str	r3, [sp, #12]
        LmHandlerGetDutyCycleEnable( &current_dutycycle );
 800a19e:	f10d 0007 	add.w	r0, sp, #7
 800a1a2:	f7ff f945 	bl	8009430 <LmHandlerGetDutyCycleEnable>
        LmHandlerSetDutyCycleEnable( false );
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	f7ff f94e 	bl	8009448 <LmHandlerSetDutyCycleEnable>
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	a802      	add	r0, sp, #8
 800a1b2:	f7fe fe1b 	bl	8008dec <LmHandlerSend>
        LmHandlerSetDutyCycleEnable( current_dutycycle );
 800a1b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800a1ba:	f7ff f945 	bl	8009448 <LmHandlerSetDutyCycleEnable>
 800a1be:	e7e3      	b.n	800a188 <LmhpFirmwareManagementOnMcpsIndication+0x1f0>
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	20000c40 	.word	0x20000c40
 800a1c8:	20000c4c 	.word	0x20000c4c

0800a1cc <LmhpFirmwareManagementInit>:
{
 800a1cc:	b510      	push	{r4, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	4604      	mov	r4, r0
    if( dataBuffer != NULL )
 800a1d2:	b199      	cbz	r1, 800a1fc <LmhpFirmwareManagementInit+0x30>
        LmhpFirmwareManagementState.DataBuffer = dataBuffer;
 800a1d4:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <LmhpFirmwareManagementInit+0x38>)
 800a1d6:	6059      	str	r1, [r3, #4]
        LmhpFirmwareManagementState.DataBufferMaxSize = dataBufferMaxSize;
 800a1d8:	709a      	strb	r2, [r3, #2]
        LmhpFirmwareManagementState.Initialized = true;
 800a1da:	2201      	movs	r2, #1
 800a1dc:	701a      	strb	r2, [r3, #0]
        TimerInit( &RebootTimer, OnRebootTimer );
 800a1de:	2200      	movs	r2, #0
 800a1e0:	9200      	str	r2, [sp, #0]
 800a1e2:	4b09      	ldr	r3, [pc, #36]	; (800a208 <LmhpFirmwareManagementInit+0x3c>)
 800a1e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a1e8:	4808      	ldr	r0, [pc, #32]	; (800a20c <LmhpFirmwareManagementInit+0x40>)
 800a1ea:	f00a f95d 	bl	80144a8 <UTIL_TIMER_Create>
    LmhpFirmwareManagementState.IsTxPending = false;
 800a1ee:	4b05      	ldr	r3, [pc, #20]	; (800a204 <LmhpFirmwareManagementInit+0x38>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	705a      	strb	r2, [r3, #1]
    LmhpFirmwareManagementState.fwVersion.Value = ( ( Version_t * )params )->Value;
 800a1f4:	6822      	ldr	r2, [r4, #0]
 800a1f6:	609a      	str	r2, [r3, #8]
}
 800a1f8:	b002      	add	sp, #8
 800a1fa:	bd10      	pop	{r4, pc}
        LmhpFirmwareManagementState.Initialized = false;
 800a1fc:	4b01      	ldr	r3, [pc, #4]	; (800a204 <LmhpFirmwareManagementInit+0x38>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	701a      	strb	r2, [r3, #0]
 800a202:	e7f4      	b.n	800a1ee <LmhpFirmwareManagementInit+0x22>
 800a204:	20000c40 	.word	0x20000c40
 800a208:	08009f61 	.word	0x08009f61
 800a20c:	20000c4c 	.word	0x20000c4c

0800a210 <LmhpFirmwareManagementPackageFactory>:
}
 800a210:	4800      	ldr	r0, [pc, #0]	; (800a214 <LmhpFirmwareManagementPackageFactory+0x4>)
 800a212:	4770      	bx	lr
 800a214:	2000014c 	.word	0x2000014c

0800a218 <OnFragmentProcessTimer>:

/*!
 * \brief Callback function for Fragment delay timer.
 */
static void OnFragmentProcessTimer( void *context )
{
 800a218:	b508      	push	{r3, lr}
    if( LmhpFragmentationState.DataBufferSize != 0 )
 800a21a:	4b05      	ldr	r3, [pc, #20]	; (800a230 <OnFragmentProcessTimer+0x18>)
 800a21c:	791b      	ldrb	r3, [r3, #4]
 800a21e:	b113      	cbz	r3, 800a226 <OnFragmentProcessTimer+0xe>
    {
        LmhpFragmentationState.IsTxPending = true;
 800a220:	4b03      	ldr	r3, [pc, #12]	; (800a230 <OnFragmentProcessTimer+0x18>)
 800a222:	2201      	movs	r2, #1
 800a224:	705a      	strb	r2, [r3, #1]
    }
    if( LmhpFragmentationPackage.OnPackageProcessEvent != NULL )
 800a226:	4b03      	ldr	r3, [pc, #12]	; (800a234 <OnFragmentProcessTimer+0x1c>)
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	b103      	cbz	r3, 800a22e <OnFragmentProcessTimer+0x16>
    {
        LmhpFragmentationPackage.OnPackageProcessEvent();
 800a22c:	4798      	blx	r3
    }
}
 800a22e:	bd08      	pop	{r3, pc}
 800a230:	20000d04 	.word	0x20000d04
 800a234:	20000184 	.word	0x20000184

0800a238 <LmhpFragmentationIsInitialized>:
}

static bool LmhpFragmentationIsInitialized( void )
{
    return LmhpFragmentationState.Initialized;
}
 800a238:	4b01      	ldr	r3, [pc, #4]	; (800a240 <LmhpFragmentationIsInitialized+0x8>)
 800a23a:	7818      	ldrb	r0, [r3, #0]
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	20000d04 	.word	0x20000d04

0800a244 <LmhpFragmentationIsTxPending>:

static bool LmhpFragmentationIsTxPending( void )
{
    return LmhpFragmentationState.IsTxPending;
}
 800a244:	4b01      	ldr	r3, [pc, #4]	; (800a24c <LmhpFragmentationIsTxPending+0x8>)
 800a246:	7858      	ldrb	r0, [r3, #1]
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	20000d04 	.word	0x20000d04

0800a250 <LmhpFragmentationOnMcpsIndication>:
{
    uint8_t cmdIndex = 0;
    uint8_t dataBufferIndex = 0;
    bool isAnswerDelayed = false;

    if( mcpsIndication->Port != FRAGMENTATION_PORT )
 800a250:	78c3      	ldrb	r3, [r0, #3]
 800a252:	2bc9      	cmp	r3, #201	; 0xc9
 800a254:	f040 8273 	bne.w	800a73e <LmhpFragmentationOnMcpsIndication+0x4ee>
{
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	b08f      	sub	sp, #60	; 0x3c
 800a25e:	4606      	mov	r6, r0
    {
        return;
    }
 
    LmhpFragmentationState.DataBufferSize = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	4aba      	ldr	r2, [pc, #744]	; (800a54c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800a264:	7113      	strb	r3, [r2, #4]
    bool isAnswerDelayed = false;
 800a266:	4698      	mov	r8, r3
    uint8_t dataBufferIndex = 0;
 800a268:	461f      	mov	r7, r3

    while( cmdIndex < mcpsIndication->BufferSize )
 800a26a:	e011      	b.n	800a290 <LmhpFragmentationOnMcpsIndication+0x40>
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
        {
            case FRAGMENTATION_PKG_VERSION_REQ:
                {
                    if( mcpsIndication->Multicast == 1 )
 800a26c:	78b3      	ldrb	r3, [r6, #2]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d00d      	beq.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                    {
                        /* Multicast channel. Don't process command. */
                        break;
                    }
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_PKG_VERSION_ANS;
 800a272:	4bb6      	ldr	r3, [pc, #728]	; (800a54c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800a274:	689a      	ldr	r2, [r3, #8]
 800a276:	1c79      	adds	r1, r7, #1
 800a278:	b2c9      	uxtb	r1, r1
 800a27a:	2300      	movs	r3, #0
 800a27c:	55d3      	strb	r3, [r2, r7]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_ID;
 800a27e:	1cbb      	adds	r3, r7, #2
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2003      	movs	r0, #3
 800a284:	5450      	strb	r0, [r2, r1]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_VERSION;
 800a286:	4407      	add	r7, r0
 800a288:	b2ff      	uxtb	r7, r7
 800a28a:	2102      	movs	r1, #2
 800a28c:	54d1      	strb	r1, [r2, r3]
                    if( mcpsIndication->Multicast == 1 )
                    {
                        /* Multicast channel. Don't process command. */
                        break;
                    }
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800a28e:	462b      	mov	r3, r5
    while( cmdIndex < mcpsIndication->BufferSize )
 800a290:	7b34      	ldrb	r4, [r6, #12]
 800a292:	429c      	cmp	r4, r3
 800a294:	f240 822e 	bls.w	800a6f4 <LmhpFragmentationOnMcpsIndication+0x4a4>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a298:	68b2      	ldr	r2, [r6, #8]
 800a29a:	1c5d      	adds	r5, r3, #1
 800a29c:	b2ed      	uxtb	r5, r5
 800a29e:	5cd1      	ldrb	r1, [r2, r3]
 800a2a0:	2908      	cmp	r1, #8
 800a2a2:	d8f4      	bhi.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
 800a2a4:	a001      	add	r0, pc, #4	; (adr r0, 800a2ac <LmhpFragmentationOnMcpsIndication+0x5c>)
 800a2a6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a2aa:	bf00      	nop
 800a2ac:	0800a26d 	.word	0x0800a26d
 800a2b0:	0800a2d1 	.word	0x0800a2d1
 800a2b4:	0800a35d 	.word	0x0800a35d
 800a2b8:	0800a4db 	.word	0x0800a4db
 800a2bc:	0800a51d 	.word	0x0800a51d
 800a2c0:	0800a28f 	.word	0x0800a28f
 800a2c4:	0800a28f 	.word	0x0800a28f
 800a2c8:	0800a28f 	.word	0x0800a28f
 800a2cc:	0800a575 	.word	0x0800a575
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	b2dc      	uxtb	r4, r3
 800a2d4:	f812 9005 	ldrb.w	r9, [r2, r5]
                    uint8_t participants = fragIndex & 0x01;
 800a2d8:	f009 0a01 	and.w	sl, r9, #1
                    fragIndex = ( fragIndex >> 1 ) & 0x03;
 800a2dc:	f3c9 0941 	ubfx	r9, r9, #1, #2
                    FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus( );
 800a2e0:	4d9b      	ldr	r5, [pc, #620]	; (800a550 <LmhpFragmentationOnMcpsIndication+0x300>)
 800a2e2:	eb05 1549 	add.w	r5, r5, r9, lsl #5
 800a2e6:	a802      	add	r0, sp, #8
 800a2e8:	f7fe fbd8 	bl	8008a9c <FragDecoderGetStatus>
 800a2ec:	f105 0314 	add.w	r3, r5, #20
 800a2f0:	9802      	ldr	r0, [sp, #8]
 800a2f2:	9903      	ldr	r1, [sp, #12]
 800a2f4:	c303      	stmia	r3!, {r0, r1}
                    if( ( participants == 1 ) ||
 800a2f6:	f1ba 0f00 	cmp.w	sl, #0
 800a2fa:	d107      	bne.n	800a30c <LmhpFragmentationOnMcpsIndication+0xbc>
 800a2fc:	f1ba 0f00 	cmp.w	sl, #0
 800a300:	f040 81f2 	bne.w	800a6e8 <LmhpFragmentationOnMcpsIndication+0x498>
                        ( ( participants == 0 ) && ( FragSessionData[fragIndex].FragDecoderStatus.FragNbLost > 0 ) ) )
 800a304:	8aeb      	ldrh	r3, [r5, #22]
 800a306:	2b00      	cmp	r3, #0
 800a308:	f000 81f0 	beq.w	800a6ec <LmhpFragmentationOnMcpsIndication+0x49c>
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_STATUS_ANS;
 800a30c:	4b8f      	ldr	r3, [pc, #572]	; (800a54c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	1c79      	adds	r1, r7, #1
 800a312:	b2c9      	uxtb	r1, r1
 800a314:	f04f 0801 	mov.w	r8, #1
 800a318:	f802 8007 	strb.w	r8, [r2, r7]
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbRx & 0xFF;
 800a31c:	4b8c      	ldr	r3, [pc, #560]	; (800a550 <LmhpFragmentationOnMcpsIndication+0x300>)
 800a31e:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 800a322:	8a98      	ldrh	r0, [r3, #20]
 800a324:	1cbd      	adds	r5, r7, #2
 800a326:	b2ed      	uxtb	r5, r5
 800a328:	5450      	strb	r0, [r2, r1]
                                                                               ( ( FragSessionData[fragIndex].FragDecoderStatus.FragNbRx >> 8 ) & 0x3F );
 800a32a:	8a99      	ldrh	r1, [r3, #20]
 800a32c:	f3c1 2105 	ubfx	r1, r1, #8, #6
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = ( fragIndex << 6 ) |
 800a330:	1cf8      	adds	r0, r7, #3
 800a332:	b2c0      	uxtb	r0, r0
 800a334:	ea41 1189 	orr.w	r1, r1, r9, lsl #6
 800a338:	5551      	strb	r1, [r2, r5]
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbLost;
 800a33a:	8add      	ldrh	r5, [r3, #22]
 800a33c:	1d39      	adds	r1, r7, #4
 800a33e:	b2c9      	uxtb	r1, r1
 800a340:	5415      	strb	r5, [r2, r0]
                        LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.MatrixError & 0x01;
 800a342:	7e98      	ldrb	r0, [r3, #26]
 800a344:	3705      	adds	r7, #5
 800a346:	b2ff      	uxtb	r7, r7
 800a348:	ea00 0008 	and.w	r0, r0, r8
 800a34c:	5450      	strb	r0, [r2, r1]
                        BlockAckDelay = FragSessionData[fragIndex].FragGroupData.Control.Fields.BlockAckDelay;
 800a34e:	795b      	ldrb	r3, [r3, #5]
 800a350:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a354:	4a7f      	ldr	r2, [pc, #508]	; (800a554 <LmhpFragmentationOnMcpsIndication+0x304>)
 800a356:	7013      	strb	r3, [r2, #0]
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 800a358:	4625      	mov	r5, r4
 800a35a:	e798      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                    if( mcpsIndication->Multicast == 1 )
 800a35c:	78b1      	ldrb	r1, [r6, #2]
 800a35e:	2901      	cmp	r1, #1
 800a360:	d095      	beq.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                    fragSessionData.FragGroupData.FragSession.Value = mcpsIndication->Buffer[cmdIndex++];
 800a362:	1c98      	adds	r0, r3, #2
 800a364:	b2c0      	uxtb	r0, r0
 800a366:	5d51      	ldrb	r1, [r2, r5]
 800a368:	f88d 1019 	strb.w	r1, [sp, #25]
                    fragSessionData.FragGroupData.FragNb = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 800a36c:	1cd9      	adds	r1, r3, #3
 800a36e:	b2c9      	uxtb	r1, r1
 800a370:	5c14      	ldrb	r4, [r2, r0]
 800a372:	f8ad 401a 	strh.w	r4, [sp, #26]
                    fragSessionData.FragGroupData.FragNb |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 800a376:	1d18      	adds	r0, r3, #4
 800a378:	b2c0      	uxtb	r0, r0
 800a37a:	5c51      	ldrb	r1, [r2, r1]
 800a37c:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 800a380:	f8ad 401a 	strh.w	r4, [sp, #26]
                    fragSessionData.FragGroupData.FragSize = mcpsIndication->Buffer[cmdIndex++];
 800a384:	1d59      	adds	r1, r3, #5
 800a386:	b2c9      	uxtb	r1, r1
 800a388:	f812 c000 	ldrb.w	ip, [r2, r0]
 800a38c:	f88d c01c 	strb.w	ip, [sp, #28]
                    fragSessionData.FragGroupData.Control.Value = mcpsIndication->Buffer[cmdIndex++];
 800a390:	1d9d      	adds	r5, r3, #6
 800a392:	b2ed      	uxtb	r5, r5
 800a394:	5c51      	ldrb	r1, [r2, r1]
 800a396:	f88d 101d 	strb.w	r1, [sp, #29]
                    fragSessionData.FragGroupData.Padding = mcpsIndication->Buffer[cmdIndex++];
 800a39a:	1dd8      	adds	r0, r3, #7
 800a39c:	b2c0      	uxtb	r0, r0
 800a39e:	5d55      	ldrb	r5, [r2, r5]
 800a3a0:	f88d 501e 	strb.w	r5, [sp, #30]
                    fragSessionData.FragGroupData.Descriptor = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800a3a4:	f103 0e08 	add.w	lr, r3, #8
 800a3a8:	fa5f fe8e 	uxtb.w	lr, lr
 800a3ac:	5c10      	ldrb	r0, [r2, r0]
 800a3ae:	9008      	str	r0, [sp, #32]
                    fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800a3b0:	f103 0509 	add.w	r5, r3, #9
 800a3b4:	b2ed      	uxtb	r5, r5
 800a3b6:	f812 e00e 	ldrb.w	lr, [r2, lr]
 800a3ba:	eb00 200e 	add.w	r0, r0, lr, lsl #8
 800a3be:	9008      	str	r0, [sp, #32]
                    fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800a3c0:	f103 0e0a 	add.w	lr, r3, #10
 800a3c4:	fa5f fe8e 	uxtb.w	lr, lr
 800a3c8:	5d55      	ldrb	r5, [r2, r5]
 800a3ca:	eb00 4005 	add.w	r0, r0, r5, lsl #16
 800a3ce:	9008      	str	r0, [sp, #32]
                    fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800a3d0:	f103 050b 	add.w	r5, r3, #11
 800a3d4:	b2ed      	uxtb	r5, r5
 800a3d6:	f812 e00e 	ldrb.w	lr, [r2, lr]
 800a3da:	eb00 600e 	add.w	r0, r0, lr, lsl #24
 800a3de:	9008      	str	r0, [sp, #32]
                    fragSessionData.FragGroupData.SessionCnt = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 800a3e0:	f103 000c 	add.w	r0, r3, #12
 800a3e4:	b2c0      	uxtb	r0, r0
 800a3e6:	f812 e005 	ldrb.w	lr, [r2, r5]
 800a3ea:	f8ad e024 	strh.w	lr, [sp, #36]	; 0x24
                    fragSessionData.FragGroupData.SessionCnt += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 800a3ee:	f103 080d 	add.w	r8, r3, #13
 800a3f2:	fa5f f888 	uxtb.w	r8, r8
 800a3f6:	5c10      	ldrb	r0, [r2, r0]
 800a3f8:	eb0e 2e00 	add.w	lr, lr, r0, lsl #8
 800a3fc:	fa1f fe8e 	uxth.w	lr, lr
 800a400:	f8ad e024 	strh.w	lr, [sp, #36]	; 0x24
                    fragSessionData.FragGroupData.Mic = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800a404:	f103 050e 	add.w	r5, r3, #14
 800a408:	b2ed      	uxtb	r5, r5
 800a40a:	f812 0008 	ldrb.w	r0, [r2, r8]
 800a40e:	900a      	str	r0, [sp, #40]	; 0x28
                    fragSessionData.FragGroupData.Mic += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800a410:	f103 090f 	add.w	r9, r3, #15
 800a414:	fa5f f989 	uxtb.w	r9, r9
 800a418:	5d55      	ldrb	r5, [r2, r5]
 800a41a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800a41e:	900a      	str	r0, [sp, #40]	; 0x28
                    fragSessionData.FragGroupData.Mic += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800a420:	f103 0810 	add.w	r8, r3, #16
 800a424:	fa5f f888 	uxtb.w	r8, r8
 800a428:	f812 5009 	ldrb.w	r5, [r2, r9]
 800a42c:	eb00 4005 	add.w	r0, r0, r5, lsl #16
 800a430:	900a      	str	r0, [sp, #40]	; 0x28
                    fragSessionData.FragGroupData.Mic += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800a432:	3311      	adds	r3, #17
 800a434:	b2dd      	uxtb	r5, r3
 800a436:	f812 3008 	ldrb.w	r3, [r2, r8]
 800a43a:	eb00 6003 	add.w	r0, r0, r3, lsl #24
 800a43e:	900a      	str	r0, [sp, #40]	; 0x28
                    if( fragSessionData.FragGroupData.Control.Fields.FragAlgo > 0 )
 800a440:	f011 0138 	ands.w	r1, r1, #56	; 0x38
 800a444:	d000      	beq.n	800a448 <LmhpFragmentationOnMcpsIndication+0x1f8>
                        status |= 0x01; /* Encoding unsupported */
 800a446:	2101      	movs	r1, #1
                    if( ( fragSessionData.FragGroupData.FragNb > FRAG_MAX_NB ) ||
 800a448:	2c11      	cmp	r4, #17
 800a44a:	d80a      	bhi.n	800a462 <LmhpFragmentationOnMcpsIndication+0x212>
 800a44c:	f1bc 0f78 	cmp.w	ip, #120	; 0x78
 800a450:	d807      	bhi.n	800a462 <LmhpFragmentationOnMcpsIndication+0x212>
                        ( fragSessionData.FragGroupData.FragSize > FRAG_MAX_SIZE ) ||
 800a452:	f1bc 0f27 	cmp.w	ip, #39	; 0x27
 800a456:	d904      	bls.n	800a462 <LmhpFragmentationOnMcpsIndication+0x212>
                        ( ( fragSessionData.FragGroupData.FragNb * fragSessionData.FragGroupData.FragSize ) > FRAG_DECODER_DWL_REGION_SIZE ) )
 800a458:	fb0c f304 	mul.w	r3, ip, r4
                        ( fragSessionData.FragGroupData.FragSize < FRAG_MIN_SIZE ) ||
 800a45c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a460:	dd01      	ble.n	800a466 <LmhpFragmentationOnMcpsIndication+0x216>
                        status |= 0x02; /* Not enough Memory */
 800a462:	f041 0102 	orr.w	r1, r1, #2
                    status |= ( fragSessionData.FragGroupData.FragSession.Fields.FragIndex << 6 ) & 0xC0;
 800a466:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a46a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a46e:	ea41 1883 	orr.w	r8, r1, r3, lsl #6
                    if( SessionCntPrev[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] >=
 800a472:	4a39      	ldr	r2, [pc, #228]	; (800a558 <LmhpFragmentationOnMcpsIndication+0x308>)
 800a474:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a478:	4572      	cmp	r2, lr
 800a47a:	db03      	blt.n	800a484 <LmhpFragmentationOnMcpsIndication+0x234>
                        status |= 0x10; /* SessionCnt Replay */
 800a47c:	f048 0110 	orr.w	r1, r8, #16
 800a480:	fa5f f881 	uxtb.w	r8, r1
                    if( ( status & 0x1F ) == 0 )
 800a484:	f018 0f1f 	tst.w	r8, #31
 800a488:	d00c      	beq.n	800a4a4 <LmhpFragmentationOnMcpsIndication+0x254>
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_SETUP_ANS;
 800a48a:	4b30      	ldr	r3, [pc, #192]	; (800a54c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800a48c:	689a      	ldr	r2, [r3, #8]
 800a48e:	1c7b      	adds	r3, r7, #1
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2102      	movs	r1, #2
 800a494:	55d1      	strb	r1, [r2, r7]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 800a496:	440f      	add	r7, r1
 800a498:	b2ff      	uxtb	r7, r7
 800a49a:	f802 8003 	strb.w	r8, [r2, r3]
                    isAnswerDelayed = false;
 800a49e:	f04f 0800 	mov.w	r8, #0
                    break;
 800a4a2:	e6f4      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                        fragSessionData.FragGroupData.IsActive = true;
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f88d 2018 	strb.w	r2, [sp, #24]
                        fragSessionData.FragDecoderProcessStatus = FRAG_SESSION_ONGOING;
 800a4aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4ae:	920d      	str	r2, [sp, #52]	; 0x34
                        FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 800a4b0:	4a27      	ldr	r2, [pc, #156]	; (800a550 <LmhpFragmentationOnMcpsIndication+0x300>)
 800a4b2:	eb02 1e43 	add.w	lr, r2, r3, lsl #5
 800a4b6:	f10d 0918 	add.w	r9, sp, #24
 800a4ba:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a4be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a4c2:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800a4c6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
                        FragDecoderInit( fragSessionData.FragGroupData.FragNb,
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	4a23      	ldr	r2, [pc, #140]	; (800a55c <LmhpFragmentationOnMcpsIndication+0x30c>)
 800a4ce:	6812      	ldr	r2, [r2, #0]
 800a4d0:	4661      	mov	r1, ip
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f7fe f96e 	bl	80087b4 <FragDecoderInit>
 800a4d8:	e7d7      	b.n	800a48a <LmhpFragmentationOnMcpsIndication+0x23a>
                    if( mcpsIndication->Multicast == 1 )
 800a4da:	78b1      	ldrb	r1, [r6, #2]
 800a4dc:	2901      	cmp	r1, #1
 800a4de:	f43f aed6 	beq.w	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                    uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800a4e2:	3302      	adds	r3, #2
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	5d52      	ldrb	r2, [r2, r5]
 800a4e8:	f002 0203 	and.w	r2, r2, #3
                    if( ( id >= FRAGMENTATION_MAX_SESSIONS ) || ( FragSessionData[id].FragGroupData.IsActive == false ) )
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	4818      	ldr	r0, [pc, #96]	; (800a550 <LmhpFragmentationOnMcpsIndication+0x300>)
 800a4f0:	5c41      	ldrb	r1, [r0, r1]
 800a4f2:	b971      	cbnz	r1, 800a512 <LmhpFragmentationOnMcpsIndication+0x2c2>
                        status |= 0x04; /* Session does not exist */
 800a4f4:	f042 0204 	orr.w	r2, r2, #4
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_DELETE_ANS;
 800a4f8:	4914      	ldr	r1, [pc, #80]	; (800a54c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800a4fa:	6888      	ldr	r0, [r1, #8]
 800a4fc:	1c79      	adds	r1, r7, #1
 800a4fe:	b2c9      	uxtb	r1, r1
 800a500:	2403      	movs	r4, #3
 800a502:	55c4      	strb	r4, [r0, r7]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 800a504:	3702      	adds	r7, #2
 800a506:	b2ff      	uxtb	r7, r7
 800a508:	5442      	strb	r2, [r0, r1]
                    uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800a50a:	461d      	mov	r5, r3
                    isAnswerDelayed = false;
 800a50c:	f04f 0800 	mov.w	r8, #0
                    break;
 800a510:	e6bd      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                        FragSessionData[id].FragGroupData.IsActive = false;
 800a512:	0151      	lsls	r1, r2, #5
 800a514:	480e      	ldr	r0, [pc, #56]	; (800a550 <LmhpFragmentationOnMcpsIndication+0x300>)
 800a516:	2400      	movs	r4, #0
 800a518:	5444      	strb	r4, [r0, r1]
 800a51a:	e7ed      	b.n	800a4f8 <LmhpFragmentationOnMcpsIndication+0x2a8>
                    if( mcpsIndication->Multicast == 1 )
 800a51c:	78b1      	ldrb	r1, [r6, #2]
 800a51e:	2901      	cmp	r1, #1
 800a520:	f43f aeb5 	beq.w	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800a524:	3302      	adds	r3, #2
 800a526:	b2dc      	uxtb	r4, r3
 800a528:	5d53      	ldrb	r3, [r2, r5]
 800a52a:	f003 0303 	and.w	r3, r3, #3

                    if( ( FragSessionData[fragIndex].FragGroupData.FragSession.Fields.FragIndex == fragIndex )
 800a52e:	4a08      	ldr	r2, [pc, #32]	; (800a550 <LmhpFragmentationOnMcpsIndication+0x300>)
 800a530:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 800a534:	7852      	ldrb	r2, [r2, #1]
 800a536:	f3c2 1201 	ubfx	r2, r2, #4, #2
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d001      	beq.n	800a542 <LmhpFragmentationOnMcpsIndication+0x2f2>
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800a53e:	4625      	mov	r5, r4
 800a540:	e6a5      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                        && ( LmhpFragmentationState.FragDataBlockAnsRequired == true ) )
 800a542:	4b02      	ldr	r3, [pc, #8]	; (800a54c <LmhpFragmentationOnMcpsIndication+0x2fc>)
 800a544:	789b      	ldrb	r3, [r3, #2]
 800a546:	b95b      	cbnz	r3, 800a560 <LmhpFragmentationOnMcpsIndication+0x310>
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800a548:	4625      	mov	r5, r4
 800a54a:	e6a0      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
 800a54c:	20000d04 	.word	0x20000d04
 800a550:	20000c68 	.word	0x20000c68
 800a554:	20000c64 	.word	0x20000c64
 800a558:	200001bc 	.word	0x200001bc
 800a55c:	20000d00 	.word	0x20000d00
                    {
                        TimerStop( &FragmentProcessTimer );
 800a560:	4877      	ldr	r0, [pc, #476]	; (800a740 <LmhpFragmentationOnMcpsIndication+0x4f0>)
 800a562:	f009 ffff 	bl	8014564 <UTIL_TIMER_Stop>
                        LmhpFragmentationState.IsTxPending = false;
 800a566:	4b77      	ldr	r3, [pc, #476]	; (800a744 <LmhpFragmentationOnMcpsIndication+0x4f4>)
 800a568:	2200      	movs	r2, #0
 800a56a:	705a      	strb	r2, [r3, #1]
                        LmhpFragmentationState.DataBufferSize = 0;
 800a56c:	711a      	strb	r2, [r3, #4]
                        LmhpFragmentationState.FragDataBlockAnsRequired = false;
 800a56e:	709a      	strb	r2, [r3, #2]
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800a570:	4625      	mov	r5, r4
 800a572:	e68c      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
            case FRAGMENTATION_DATA_FRAGMENT:
                {
                    uint8_t fragIndex = 0;
                    uint16_t fragCounter = 0;

                    fragCounter = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 800a574:	1c99      	adds	r1, r3, #2
 800a576:	b2c9      	uxtb	r1, r1
 800a578:	5d50      	ldrb	r0, [r2, r5]
                    fragCounter |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 800a57a:	3303      	adds	r3, #3
 800a57c:	fa5f f983 	uxtb.w	r9, r3
 800a580:	5c55      	ldrb	r5, [r2, r1]
 800a582:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

                    fragIndex = ( fragCounter >> 14 ) & 0x03;
 800a586:	09ad      	lsrs	r5, r5, #6
                    fragCounter &= 0x3FFF;
 800a588:	f3c0 0b0d 	ubfx	fp, r0, #0, #14
                    if( FragSessionData[fragIndex].FragGroupData.IsActive == false )
 800a58c:	46aa      	mov	sl, r5
 800a58e:	016b      	lsls	r3, r5, #5
 800a590:	4a6d      	ldr	r2, [pc, #436]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a592:	5cd3      	ldrb	r3, [r2, r3]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 80ab 	beq.w	800a6f0 <LmhpFragmentationOnMcpsIndication+0x4a0>
                    {
                        cmdIndex = mcpsIndication->BufferSize;
                        break;
                    }
                    if( mcpsIndication->Multicast == 1 )
 800a59a:	78b3      	ldrb	r3, [r6, #2]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d011      	beq.n	800a5c4 <LmhpFragmentationOnMcpsIndication+0x374>
                            cmdIndex = mcpsIndication->BufferSize;
                            break;
                        }
                    }

                    if( FragSessionData[fragIndex].FragDecoderProcessStatus == FRAG_SESSION_ONGOING )
 800a5a0:	4b69      	ldr	r3, [pc, #420]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a5a2:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5ac:	d01b      	beq.n	800a5e6 <LmhpFragmentationOnMcpsIndication+0x396>
#endif /* FRAGMENTATION_VERSION */

                            FragSessionData[fragIndex].FragDecoderProcessStatus = FRAG_SESSION_NOT_STARTED;
                        }
                    }
                    cmdIndex += FragSessionData[fragIndex].FragGroupData.FragSize;
 800a5ae:	4b66      	ldr	r3, [pc, #408]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a5b0:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a5b4:	791d      	ldrb	r5, [r3, #4]
 800a5b6:	444d      	add	r5, r9
 800a5b8:	b2ed      	uxtb	r5, r5
#if ( FRAGMENTATION_VERSION == 2 )
                    /* Store the previous session counter*/
                    SessionCntPrev[fragIndex] = FragSessionData[fragIndex].FragGroupData.SessionCnt;
 800a5ba:	899a      	ldrh	r2, [r3, #12]
 800a5bc:	4b63      	ldr	r3, [pc, #396]	; (800a74c <LmhpFragmentationOnMcpsIndication+0x4fc>)
 800a5be:	f843 202a 	str.w	r2, [r3, sl, lsl #2]
#endif /* FRAGMENTATION_VERSION */
                    break;
 800a5c2:	e664      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                        uint8_t groupId = LoRaMacMcChannelGetGroupId( mcpsIndication->DevAddress );
 800a5c4:	6970      	ldr	r0, [r6, #20]
 800a5c6:	f004 f81f 	bl	800e608 <LoRaMacMcChannelGetGroupId>
                        if( ( groupId == 0xFF ) ||
 800a5ca:	28ff      	cmp	r0, #255	; 0xff
 800a5cc:	d009      	beq.n	800a5e2 <LmhpFragmentationOnMcpsIndication+0x392>
                            ( ( FragSessionData[fragIndex].FragGroupData.FragSession.Fields.McGroupBitMask & ( 1 << groupId ) ) == 0 ) )
 800a5ce:	4b5e      	ldr	r3, [pc, #376]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a5d0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a5d4:	785b      	ldrb	r3, [r3, #1]
 800a5d6:	f003 030f 	and.w	r3, r3, #15
 800a5da:	4103      	asrs	r3, r0
                        if( ( groupId == 0xFF ) ||
 800a5dc:	f013 0f01 	tst.w	r3, #1
 800a5e0:	d1de      	bne.n	800a5a0 <LmhpFragmentationOnMcpsIndication+0x350>
                            cmdIndex = mcpsIndication->BufferSize;
 800a5e2:	7b35      	ldrb	r5, [r6, #12]
                            break;
 800a5e4:	e653      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                        FragSessionData[fragIndex].FragDecoderProcessStatus = FragDecoderProcess( fragCounter, &mcpsIndication->Buffer[cmdIndex] );
 800a5e6:	68b1      	ldr	r1, [r6, #8]
 800a5e8:	4449      	add	r1, r9
 800a5ea:	4658      	mov	r0, fp
 800a5ec:	f7fe f916 	bl	800881c <FragDecoderProcess>
 800a5f0:	4c55      	ldr	r4, [pc, #340]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a5f2:	eb04 144a 	add.w	r4, r4, sl, lsl #5
 800a5f6:	61e0      	str	r0, [r4, #28]
                        FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus( );
 800a5f8:	a802      	add	r0, sp, #8
 800a5fa:	f7fe fa4f 	bl	8008a9c <FragDecoderGetStatus>
 800a5fe:	f104 0314 	add.w	r3, r4, #20
 800a602:	9802      	ldr	r0, [sp, #8]
 800a604:	9903      	ldr	r1, [sp, #12]
 800a606:	c303      	stmia	r3!, {r0, r1}
                        if( LmhpFragmentationParams->OnProgress != NULL )
 800a608:	4b51      	ldr	r3, [pc, #324]	; (800a750 <LmhpFragmentationOnMcpsIndication+0x500>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68dc      	ldr	r4, [r3, #12]
 800a60e:	b13c      	cbz	r4, 800a620 <LmhpFragmentationOnMcpsIndication+0x3d0>
                            LmhpFragmentationParams->OnProgress( FragSessionData[fragIndex].FragDecoderStatus.FragNbRx,
 800a610:	484d      	ldr	r0, [pc, #308]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a612:	eb00 104a 	add.w	r0, r0, sl, lsl #5
 800a616:	8ac3      	ldrh	r3, [r0, #22]
 800a618:	7902      	ldrb	r2, [r0, #4]
 800a61a:	8841      	ldrh	r1, [r0, #2]
 800a61c:	8a80      	ldrh	r0, [r0, #20]
 800a61e:	47a0      	blx	r4
                        if( FragSessionData[fragIndex].FragDecoderProcessStatus >= 0 )
 800a620:	4b49      	ldr	r3, [pc, #292]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a622:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a626:	69d8      	ldr	r0, [r3, #28]
 800a628:	2800      	cmp	r0, #0
 800a62a:	dbc0      	blt.n	800a5ae <LmhpFragmentationOnMcpsIndication+0x35e>
                            if( LmhpFragmentationParams->OnDone != NULL )
 800a62c:	4b48      	ldr	r3, [pc, #288]	; (800a750 <LmhpFragmentationOnMcpsIndication+0x500>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	691c      	ldr	r4, [r3, #16]
 800a632:	b154      	cbz	r4, 800a64a <LmhpFragmentationOnMcpsIndication+0x3fa>
                                                                 ( FragSessionData[fragIndex].FragGroupData.FragNb * FragSessionData[fragIndex].FragGroupData.FragSize ) -
 800a634:	4b44      	ldr	r3, [pc, #272]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a636:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a63a:	8859      	ldrh	r1, [r3, #2]
 800a63c:	791a      	ldrb	r2, [r3, #4]
 800a63e:	fb02 f101 	mul.w	r1, r2, r1
                                                                 FragSessionData[fragIndex].FragGroupData.Padding,
 800a642:	799b      	ldrb	r3, [r3, #6]
                                LmhpFragmentationParams->OnDone( FragSessionData[fragIndex].FragDecoderProcessStatus,
 800a644:	aa05      	add	r2, sp, #20
 800a646:	1ac9      	subs	r1, r1, r3
 800a648:	47a0      	blx	r4
                            if( FragSessionData[fragIndex].FragGroupData.Control.Fields.AckReception == 1 )
 800a64a:	4b3f      	ldr	r3, [pc, #252]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a64c:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a650:	795b      	ldrb	r3, [r3, #5]
 800a652:	f3c3 1480 	ubfx	r4, r3, #6, #1
 800a656:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a65a:	d106      	bne.n	800a66a <LmhpFragmentationOnMcpsIndication+0x41a>
                            FragSessionData[fragIndex].FragDecoderProcessStatus = FRAG_SESSION_NOT_STARTED;
 800a65c:	4b3a      	ldr	r3, [pc, #232]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a65e:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a662:	f06f 0201 	mvn.w	r2, #1
 800a666:	61da      	str	r2, [r3, #28]
 800a668:	e7a1      	b.n	800a5ae <LmhpFragmentationOnMcpsIndication+0x35e>
                                uint32_t micComputed = 0;
 800a66a:	f04f 0b00 	mov.w	fp, #0
 800a66e:	f8cd b018 	str.w	fp, [sp, #24]
                                                               ( FragSessionData[fragIndex].FragGroupData.FragNb * FragSessionData[fragIndex].FragGroupData.FragSize ) -
 800a672:	4b35      	ldr	r3, [pc, #212]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a674:	eb03 184a 	add.w	r8, r3, sl, lsl #5
 800a678:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800a67c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800a680:	fb03 f101 	mul.w	r1, r3, r1
                                                               FragSessionData[fragIndex].FragGroupData.Padding,
 800a684:	f898 0006 	ldrb.w	r0, [r8, #6]
                                LoRaMacProcessMicForDatablock( ( uint8_t * )UnfragmentedBufferAddr,
 800a688:	ab06      	add	r3, sp, #24
 800a68a:	9301      	str	r3, [sp, #4]
 800a68c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	462b      	mov	r3, r5
 800a694:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800a698:	1a09      	subs	r1, r1, r0
 800a69a:	9805      	ldr	r0, [sp, #20]
 800a69c:	f004 f84e 	bl	800e73c <LoRaMacProcessMicForDatablock>
                                MW_LOG( TS_OFF, VLEVEL_M, "MIC         : %08X\r\n", micComputed );
 800a6a0:	9b06      	ldr	r3, [sp, #24]
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	4b2b      	ldr	r3, [pc, #172]	; (800a754 <LmhpFragmentationOnMcpsIndication+0x504>)
 800a6a6:	465a      	mov	r2, fp
 800a6a8:	4659      	mov	r1, fp
 800a6aa:	2002      	movs	r0, #2
 800a6ac:	f009 fcc4 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                                if( micComputed != FragSessionData[fragIndex].FragGroupData.Mic )
 800a6b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6b4:	9b06      	ldr	r3, [sp, #24]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d001      	beq.n	800a6be <LmhpFragmentationOnMcpsIndication+0x46e>
                                    status |= 0x04;
 800a6ba:	f045 0504 	orr.w	r5, r5, #4
                                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_DATA_BLOCK_RECEIVED_REQ;
 800a6be:	4a21      	ldr	r2, [pc, #132]	; (800a744 <LmhpFragmentationOnMcpsIndication+0x4f4>)
 800a6c0:	6891      	ldr	r1, [r2, #8]
 800a6c2:	1c7b      	adds	r3, r7, #1
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2004      	movs	r0, #4
 800a6c8:	55c8      	strb	r0, [r1, r7]
                                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 800a6ca:	3702      	adds	r7, #2
 800a6cc:	b2ff      	uxtb	r7, r7
 800a6ce:	54cd      	strb	r5, [r1, r3]
                                BlockAckDelay = FragSessionData[fragIndex].FragGroupData.Control.Fields.BlockAckDelay;
 800a6d0:	4b1d      	ldr	r3, [pc, #116]	; (800a748 <LmhpFragmentationOnMcpsIndication+0x4f8>)
 800a6d2:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a6d6:	795b      	ldrb	r3, [r3, #5]
 800a6d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a6dc:	491e      	ldr	r1, [pc, #120]	; (800a758 <LmhpFragmentationOnMcpsIndication+0x508>)
 800a6de:	700b      	strb	r3, [r1, #0]
                                LmhpFragmentationState.FragDataBlockAnsRequired = true;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	7093      	strb	r3, [r2, #2]
                                isAnswerDelayed = true;
 800a6e4:	46a0      	mov	r8, r4
 800a6e6:	e7b9      	b.n	800a65c <LmhpFragmentationOnMcpsIndication+0x40c>
                    uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 800a6e8:	4625      	mov	r5, r4
 800a6ea:	e5d0      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
 800a6ec:	4625      	mov	r5, r4
 800a6ee:	e5ce      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>
                        cmdIndex = mcpsIndication->BufferSize;
 800a6f0:	4625      	mov	r5, r4
 800a6f2:	e5cc      	b.n	800a28e <LmhpFragmentationOnMcpsIndication+0x3e>

    /* After processing the commands, if the end-node has to reply back then a flag is checked if the */
    /* reply is to be sent immediately or with a delay. */
    /* In some scenarios it is not desired that multiple end-notes send uplinks at the same time to */
    /* the same server. (Example: Fragment status during a multicast FUOTA) */
    if( dataBufferIndex != 0 )
 800a6f4:	b18f      	cbz	r7, 800a71a <LmhpFragmentationOnMcpsIndication+0x4ca>
    {
        /* Prepare Answer that is to be transmitted */
        LmhpFragmentationState.DataBufferSize = dataBufferIndex;
 800a6f6:	4b13      	ldr	r3, [pc, #76]	; (800a744 <LmhpFragmentationOnMcpsIndication+0x4f4>)
 800a6f8:	711f      	strb	r7, [r3, #4]

        if( isAnswerDelayed == true )
 800a6fa:	f1b8 0f00 	cmp.w	r8, #0
 800a6fe:	d10f      	bne.n	800a720 <LmhpFragmentationOnMcpsIndication+0x4d0>
             */
            TxDelayTime = 3000 + ( randr( 0, 1000 ) * ( 1 << ( BlockAckDelay + 4 ) ) );
        }
        else
        {
            TxDelayTime = 3000;
 800a700:	4b16      	ldr	r3, [pc, #88]	; (800a75c <LmhpFragmentationOnMcpsIndication+0x50c>)
 800a702:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800a706:	601a      	str	r2, [r3, #0]
        }
        TimerSetValue( &FragmentProcessTimer, TxDelayTime );
 800a708:	4c0d      	ldr	r4, [pc, #52]	; (800a740 <LmhpFragmentationOnMcpsIndication+0x4f0>)
 800a70a:	4b14      	ldr	r3, [pc, #80]	; (800a75c <LmhpFragmentationOnMcpsIndication+0x50c>)
 800a70c:	6819      	ldr	r1, [r3, #0]
 800a70e:	4620      	mov	r0, r4
 800a710:	f009 ffc8 	bl	80146a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &FragmentProcessTimer );
 800a714:	4620      	mov	r0, r4
 800a716:	f009 ff7f 	bl	8014618 <UTIL_TIMER_Start>
    }
}
 800a71a:	b00f      	add	sp, #60	; 0x3c
 800a71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            TxDelayTime = 3000 + ( randr( 0, 1000 ) * ( 1 << ( BlockAckDelay + 4 ) ) );
 800a720:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a724:	2000      	movs	r0, #0
 800a726:	f007 fd9d 	bl	8012264 <randr>
 800a72a:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <LmhpFragmentationOnMcpsIndication+0x508>)
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	3304      	adds	r3, #4
 800a730:	fa00 f303 	lsl.w	r3, r0, r3
 800a734:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800a738:	4a08      	ldr	r2, [pc, #32]	; (800a75c <LmhpFragmentationOnMcpsIndication+0x50c>)
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	e7e4      	b.n	800a708 <LmhpFragmentationOnMcpsIndication+0x4b8>
 800a73e:	4770      	bx	lr
 800a740:	20000ce8 	.word	0x20000ce8
 800a744:	20000d04 	.word	0x20000d04
 800a748:	20000c68 	.word	0x20000c68
 800a74c:	200001bc 	.word	0x200001bc
 800a750:	20000d00 	.word	0x20000d00
 800a754:	08019a3c 	.word	0x08019a3c
 800a758:	20000c64 	.word	0x20000c64
 800a75c:	20000d10 	.word	0x20000d10

0800a760 <LmhpFragmentationProcess>:
    if( LmhpFragmentationState.IsTxPending == true )
 800a760:	4b13      	ldr	r3, [pc, #76]	; (800a7b0 <LmhpFragmentationProcess+0x50>)
 800a762:	785b      	ldrb	r3, [r3, #1]
 800a764:	b903      	cbnz	r3, 800a768 <LmhpFragmentationProcess+0x8>
 800a766:	4770      	bx	lr
{
 800a768:	b510      	push	{r4, lr}
 800a76a:	b082      	sub	sp, #8
        LmHandlerAppData_t appData =
 800a76c:	23c9      	movs	r3, #201	; 0xc9
 800a76e:	f88d 3000 	strb.w	r3, [sp]
            .BufferSize = LmhpFragmentationState.DataBufferSize,
 800a772:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <LmhpFragmentationProcess+0x50>)
 800a774:	791a      	ldrb	r2, [r3, #4]
        LmHandlerAppData_t appData =
 800a776:	f88d 2001 	strb.w	r2, [sp, #1]
            .Buffer     = LmhpFragmentationState.DataBuffer,
 800a77a:	689b      	ldr	r3, [r3, #8]
        LmHandlerAppData_t appData =
 800a77c:	9301      	str	r3, [sp, #4]
        lmhStatus = LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800a77e:	2201      	movs	r2, #1
 800a780:	2100      	movs	r1, #0
 800a782:	4668      	mov	r0, sp
 800a784:	f7fe fb32 	bl	8008dec <LmHandlerSend>
        if( ( lmhStatus != LORAMAC_HANDLER_SUCCESS ) || ( LmhpFragmentationState.FragDataBlockAnsRequired == true ) )
 800a788:	b910      	cbnz	r0, 800a790 <LmhpFragmentationProcess+0x30>
 800a78a:	4b09      	ldr	r3, [pc, #36]	; (800a7b0 <LmhpFragmentationProcess+0x50>)
 800a78c:	789b      	ldrb	r3, [r3, #2]
 800a78e:	b153      	cbz	r3, 800a7a6 <LmhpFragmentationProcess+0x46>
            TimerSetValue( &FragmentProcessTimer, 1500 );
 800a790:	4c08      	ldr	r4, [pc, #32]	; (800a7b4 <LmhpFragmentationProcess+0x54>)
 800a792:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800a796:	4620      	mov	r0, r4
 800a798:	f009 ff84 	bl	80146a4 <UTIL_TIMER_SetPeriod>
            TimerStart( &FragmentProcessTimer );
 800a79c:	4620      	mov	r0, r4
 800a79e:	f009 ff3b 	bl	8014618 <UTIL_TIMER_Start>
}
 800a7a2:	b002      	add	sp, #8
 800a7a4:	bd10      	pop	{r4, pc}
            LmhpFragmentationState.IsTxPending = false;
 800a7a6:	4b02      	ldr	r3, [pc, #8]	; (800a7b0 <LmhpFragmentationProcess+0x50>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	705a      	strb	r2, [r3, #1]
            LmhpFragmentationState.DataBufferSize = 0;
 800a7ac:	711a      	strb	r2, [r3, #4]
}
 800a7ae:	e7f8      	b.n	800a7a2 <LmhpFragmentationProcess+0x42>
 800a7b0:	20000d04 	.word	0x20000d04
 800a7b4:	20000ce8 	.word	0x20000ce8

0800a7b8 <LmhpFragmentationInit>:
{
 800a7b8:	b500      	push	{lr}
 800a7ba:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800a7bc:	b198      	cbz	r0, 800a7e6 <LmhpFragmentationInit+0x2e>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	b189      	cbz	r1, 800a7e6 <LmhpFragmentationInit+0x2e>
        LmhpFragmentationParams = ( LmhpFragmentationParams_t * )params;
 800a7c2:	4810      	ldr	r0, [pc, #64]	; (800a804 <LmhpFragmentationInit+0x4c>)
 800a7c4:	6003      	str	r3, [r0, #0]
        LmhpFragmentationState.DataBuffer = dataBuffer;
 800a7c6:	4b10      	ldr	r3, [pc, #64]	; (800a808 <LmhpFragmentationInit+0x50>)
 800a7c8:	6099      	str	r1, [r3, #8]
        LmhpFragmentationState.DataBufferMaxSize = dataBufferMaxSize;
 800a7ca:	70da      	strb	r2, [r3, #3]
        LmhpFragmentationState.Initialized = true;
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	701a      	strb	r2, [r3, #0]
        TxDelayTime = 0;
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4b0e      	ldr	r3, [pc, #56]	; (800a80c <LmhpFragmentationInit+0x54>)
 800a7d4:	601a      	str	r2, [r3, #0]
        TimerInit( &FragmentProcessTimer, OnFragmentProcessTimer );
 800a7d6:	9200      	str	r2, [sp, #0]
 800a7d8:	4b0d      	ldr	r3, [pc, #52]	; (800a810 <LmhpFragmentationInit+0x58>)
 800a7da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a7de:	480d      	ldr	r0, [pc, #52]	; (800a814 <LmhpFragmentationInit+0x5c>)
 800a7e0:	f009 fe62 	bl	80144a8 <UTIL_TIMER_Create>
 800a7e4:	e004      	b.n	800a7f0 <LmhpFragmentationInit+0x38>
        LmhpFragmentationParams = NULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4a06      	ldr	r2, [pc, #24]	; (800a804 <LmhpFragmentationInit+0x4c>)
 800a7ea:	6013      	str	r3, [r2, #0]
        LmhpFragmentationState.Initialized = false;
 800a7ec:	4a06      	ldr	r2, [pc, #24]	; (800a808 <LmhpFragmentationInit+0x50>)
 800a7ee:	7013      	strb	r3, [r2, #0]
    LmhpFragmentationState.IsTxPending = false;
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4b05      	ldr	r3, [pc, #20]	; (800a808 <LmhpFragmentationInit+0x50>)
 800a7f4:	7059      	strb	r1, [r3, #1]
    memset1( ( uint8_t * )FragSessionData, 0, sizeof( FragSessionData ) );
 800a7f6:	2280      	movs	r2, #128	; 0x80
 800a7f8:	4807      	ldr	r0, [pc, #28]	; (800a818 <LmhpFragmentationInit+0x60>)
 800a7fa:	f007 fd58 	bl	80122ae <memset1>
}
 800a7fe:	b003      	add	sp, #12
 800a800:	f85d fb04 	ldr.w	pc, [sp], #4
 800a804:	20000d00 	.word	0x20000d00
 800a808:	20000d04 	.word	0x20000d04
 800a80c:	20000d10 	.word	0x20000d10
 800a810:	0800a219 	.word	0x0800a219
 800a814:	20000ce8 	.word	0x20000ce8
 800a818:	20000c68 	.word	0x20000c68

0800a81c <LmhpFragmentationPackageFactory>:
}
 800a81c:	4800      	ldr	r0, [pc, #0]	; (800a820 <LmhpFragmentationPackageFactory+0x4>)
 800a81e:	4770      	bx	lr
 800a820:	20000184 	.word	0x20000184

0800a824 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800a824:	b510      	push	{r4, lr}
 800a826:	4604      	mov	r4, r0
#if (defined (LORAWAN_DATA_DISTRIB_MGT) && (LORAWAN_DATA_DISTRIB_MGT == 1))
    if( LmHandlerPackageRegister( PACKAGE_ID_CLOCK_SYNC, NULL ) != LORAMAC_HANDLER_SUCCESS )
 800a828:	2100      	movs	r1, #0
 800a82a:	2001      	movs	r0, #1
 800a82c:	f7fe fd56 	bl	80092dc <LmHandlerPackageRegister>
 800a830:	b978      	cbnz	r0, 800a852 <LmhpPackagesRegistrationInit+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    else if( LmHandlerPackageRegister( PACKAGE_ID_REMOTE_MCAST_SETUP, NULL ) != LORAMAC_HANDLER_SUCCESS )
 800a832:	2100      	movs	r1, #0
 800a834:	2002      	movs	r0, #2
 800a836:	f7fe fd51 	bl	80092dc <LmHandlerPackageRegister>
 800a83a:	b968      	cbnz	r0, 800a858 <LmhpPackagesRegistrationInit+0x34>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    else if( LmHandlerPackageRegister( PACKAGE_ID_FRAGMENTATION,
 800a83c:	490b      	ldr	r1, [pc, #44]	; (800a86c <LmhpPackagesRegistrationInit+0x48>)
 800a83e:	2003      	movs	r0, #3
 800a840:	f7fe fd4c 	bl	80092dc <LmHandlerPackageRegister>
 800a844:	b958      	cbnz	r0, 800a85e <LmhpPackagesRegistrationInit+0x3a>
                                       ( LmhpFragmentationParams_t * )&FRAG_DECODER_IF_FragmentationParams ) != LORAMAC_HANDLER_SUCCESS )
    {
        return LORAMAC_HANDLER_ERROR;
    }
#if (LORAWAN_PACKAGES_VERSION == 2)
    else if( LmHandlerPackageRegister( PACKAGE_ID_FIRMWARE_MANAGEMENT, fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800a846:	4621      	mov	r1, r4
 800a848:	2004      	movs	r0, #4
 800a84a:	f7fe fd47 	bl	80092dc <LmHandlerPackageRegister>
 800a84e:	b948      	cbnz	r0, 800a864 <LmhpPackagesRegistrationInit+0x40>
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800a850:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a856:	e7fb      	b.n	800a850 <LmhpPackagesRegistrationInit+0x2c>
        return LORAMAC_HANDLER_ERROR;
 800a858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a85c:	e7f8      	b.n	800a850 <LmhpPackagesRegistrationInit+0x2c>
        return LORAMAC_HANDLER_ERROR;
 800a85e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a862:	e7f5      	b.n	800a850 <LmhpPackagesRegistrationInit+0x2c>
        return LORAMAC_HANDLER_ERROR;
 800a864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a868:	e7f2      	b.n	800a850 <LmhpPackagesRegistrationInit+0x2c>
 800a86a:	bf00      	nop
 800a86c:	08019914 	.word	0x08019914

0800a870 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
#if (defined (LORAWAN_DATA_DISTRIB_MGT) && (LORAWAN_DATA_DISTRIB_MGT == 1))
    if( package == NULL )
 800a870:	b1e1      	cbz	r1, 800a8ac <LmhpPackagesRegister+0x3c>
{
 800a872:	b510      	push	{r4, lr}
 800a874:	460c      	mov	r4, r1
    {
        return LORAMAC_HANDLER_ERROR;
    }
    switch( id )
 800a876:	3801      	subs	r0, #1
 800a878:	2803      	cmp	r0, #3
 800a87a:	d81a      	bhi.n	800a8b2 <LmhpPackagesRegister+0x42>
 800a87c:	e8df f000 	tbb	[pc, r0]
 800a880:	110c0702 	.word	0x110c0702
    {
        case PACKAGE_ID_CLOCK_SYNC:
            {
                *package = LmhpClockSyncPackageFactory();
 800a884:	f7ff f80c 	bl	80098a0 <LmhpClockSyncPackageFactory>
 800a888:	6020      	str	r0, [r4, #0]
            {
                *package = LmhpFirmwareManagementPackageFactory();
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
 800a88a:	2000      	movs	r0, #0
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800a88c:	bd10      	pop	{r4, pc}
                *package = LmhpRemoteMcastSetupPackageFactory();
 800a88e:	f000 fd5f 	bl	800b350 <LmhpRemoteMcastSetupPackageFactory>
 800a892:	6020      	str	r0, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800a894:	2000      	movs	r0, #0
                break;
 800a896:	e7f9      	b.n	800a88c <LmhpPackagesRegister+0x1c>
                *package = LmhpFragmentationPackageFactory();
 800a898:	f7ff ffc0 	bl	800a81c <LmhpFragmentationPackageFactory>
 800a89c:	6020      	str	r0, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800a89e:	2000      	movs	r0, #0
                break;
 800a8a0:	e7f4      	b.n	800a88c <LmhpPackagesRegister+0x1c>
                *package = LmhpFirmwareManagementPackageFactory();
 800a8a2:	f7ff fcb5 	bl	800a210 <LmhpFirmwareManagementPackageFactory>
 800a8a6:	6020      	str	r0, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800a8a8:	2000      	movs	r0, #0
                break;
 800a8aa:	e7ef      	b.n	800a88c <LmhpPackagesRegister+0x1c>
        return LORAMAC_HANDLER_ERROR;
 800a8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a8b0:	4770      	bx	lr
    switch( id )
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	e7ea      	b.n	800a88c <LmhpPackagesRegister+0x1c>
	...

0800a8b8 <LmhpRemoteMcastSetupIsInitialized>:
}

static bool LmhpRemoteMcastSetupIsInitialized( void )
{
    return LmhpRemoteMcastSetupState.Initialized;
}
 800a8b8:	4b01      	ldr	r3, [pc, #4]	; (800a8c0 <LmhpRemoteMcastSetupIsInitialized+0x8>)
 800a8ba:	7818      	ldrb	r0, [r3, #0]
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	20000204 	.word	0x20000204

0800a8c4 <LmhpRemoteMcastSetupIsTxPending>:

static bool LmhpRemoteMcastSetupIsTxPending( void )
{
    return LmhpRemoteMcastSetupState.IsTxPending;
}
 800a8c4:	4b01      	ldr	r3, [pc, #4]	; (800a8cc <LmhpRemoteMcastSetupIsTxPending+0x8>)
 800a8c6:	7858      	ldrb	r0, [r3, #1]
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20000204 	.word	0x20000204

0800a8d0 <LmhpRemoteMcastSetupOnMcpsIndication>:
{
    uint8_t cmdIndex = 0;
    uint8_t dataBufferIndex = 0;
    uint8_t id = 0xFF;

    if( mcpsIndication->Port != REMOTE_MCAST_SETUP_PORT )
 800a8d0:	78c3      	ldrb	r3, [r0, #3]
 800a8d2:	2bc8      	cmp	r3, #200	; 0xc8
 800a8d4:	f040 8406 	bne.w	800b0e4 <LmhpRemoteMcastSetupOnMcpsIndication+0x814>
{
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	b08f      	sub	sp, #60	; 0x3c
 800a8de:	4607      	mov	r7, r0
    uint8_t id = 0xFF;
 800a8e0:	26ff      	movs	r6, #255	; 0xff
    uint8_t dataBufferIndex = 0;
 800a8e2:	2500      	movs	r5, #0
    uint8_t cmdIndex = 0;
 800a8e4:	46a9      	mov	r9, r5
 800a8e6:	e00d      	b.n	800a904 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
        {
            case REMOTE_MCAST_SETUP_PKG_VERSION_REQ:
                {
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_PKG_VERSION_ANS;
 800a8e8:	4bc8      	ldr	r3, [pc, #800]	; (800ac0c <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800a8ea:	689a      	ldr	r2, [r3, #8]
 800a8ec:	1c68      	adds	r0, r5, #1
 800a8ee:	b2c0      	uxtb	r0, r0
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	5553      	strb	r3, [r2, r5]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_ID;
 800a8f4:	1cab      	adds	r3, r5, #2
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2402      	movs	r4, #2
 800a8fa:	5414      	strb	r4, [r2, r0]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_VERSION;
 800a8fc:	3503      	adds	r5, #3
 800a8fe:	b2ed      	uxtb	r5, r5
 800a900:	54d4      	strb	r4, [r2, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a902:	4689      	mov	r9, r1
    while( cmdIndex < mcpsIndication->BufferSize )
 800a904:	7b3b      	ldrb	r3, [r7, #12]
 800a906:	454b      	cmp	r3, r9
 800a908:	f240 832f 	bls.w	800af6a <LmhpRemoteMcastSetupOnMcpsIndication+0x69a>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	f109 0301 	add.w	r3, r9, #1
 800a912:	b2d9      	uxtb	r1, r3
 800a914:	f812 3009 	ldrb.w	r3, [r2, r9]
 800a918:	2b05      	cmp	r3, #5
 800a91a:	f200 8324 	bhi.w	800af66 <LmhpRemoteMcastSetupOnMcpsIndication+0x696>
 800a91e:	a001      	add	r0, pc, #4	; (adr r0, 800a924 <LmhpRemoteMcastSetupOnMcpsIndication+0x54>)
 800a920:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a924:	0800a8e9 	.word	0x0800a8e9
 800a928:	0800a93d 	.word	0x0800a93d
 800a92c:	0800a9f1 	.word	0x0800a9f1
 800a930:	0800abab 	.word	0x0800abab
 800a934:	0800ac25 	.word	0x0800ac25
 800a938:	0800adb7 	.word	0x0800adb7
                    break;
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_STATUS_REQ:
                {
                    uint8_t nbAvailableGroups = 0;
                    uint8_t reqGroupMask = mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 800a93c:	f109 0902 	add.w	r9, r9, #2
 800a940:	fa5f f989 	uxtb.w	r9, r9
 800a944:	f812 c001 	ldrb.w	ip, [r2, r1]
 800a948:	f00c 0c0f 	and.w	ip, ip, #15
                    uint8_t AnsGroupMask = 0x00;

                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_STATUS_ANS;
 800a94c:	4baf      	ldr	r3, [pc, #700]	; (800ac0c <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800a94e:	6899      	ldr	r1, [r3, #8]
 800a950:	2301      	movs	r3, #1
 800a952:	554b      	strb	r3, [r1, r5]

                    /* move index to the next first optional list */
                    dataBufferIndex++;
 800a954:	3502      	adds	r5, #2
 800a956:	b2ed      	uxtb	r5, r5
                    uint8_t AnsGroupMask = 0x00;
 800a958:	2200      	movs	r2, #0
                    uint8_t nbAvailableGroups = 0;
 800a95a:	4613      	mov	r3, r2
                    for( id = 0; id < LORAMAC_MAX_MC_CTX; id++ )
 800a95c:	4616      	mov	r6, r2
 800a95e:	e03d      	b.n	800a9dc <LmhpRemoteMcastSetupOnMcpsIndication+0x10c>
                    {
                        if( McSessionData[id].McGroupData.McGroupEnabled )
 800a960:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 800a964:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 800ac10 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>
 800a968:	f81e 0030 	ldrb.w	r0, [lr, r0, lsl #3]
 800a96c:	b3a0      	cbz	r0, 800a9d8 <LmhpRemoteMcastSetupOnMcpsIndication+0x108>
                        {
                            nbAvailableGroups++;
 800a96e:	3301      	adds	r3, #1
 800a970:	b2db      	uxtb	r3, r3

                            /* If multicast group defined in the input bit mask */
                            if( ( reqGroupMask & ( 1 << id ) ) != 0 )
 800a972:	fa4c f006 	asr.w	r0, ip, r6
 800a976:	f010 0f01 	tst.w	r0, #1
 800a97a:	d02d      	beq.n	800a9d8 <LmhpRemoteMcastSetupOnMcpsIndication+0x108>
                            {
                                AnsGroupMask |= ( 1 << id );
 800a97c:	2001      	movs	r0, #1
 800a97e:	40b0      	lsls	r0, r6
 800a980:	4302      	orrs	r2, r0
 800a982:	b2d2      	uxtb	r2, r2
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = id;
 800a984:	f105 0b01 	add.w	fp, r5, #1
 800a988:	fa5f fb8b 	uxtb.w	fp, fp
 800a98c:	554e      	strb	r6, [r1, r5]
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( McSessionData[id].McGroupData.McAddr >> 0 ) & 0xFF;
 800a98e:	46f0      	mov	r8, lr
 800a990:	ebc6 0ec6 	rsb	lr, r6, r6, lsl #3
 800a994:	eb08 0ece 	add.w	lr, r8, lr, lsl #3
 800a998:	f8de 0004 	ldr.w	r0, [lr, #4]
 800a99c:	f105 0a02 	add.w	sl, r5, #2
 800a9a0:	fa5f fa8a 	uxtb.w	sl, sl
 800a9a4:	f801 000b 	strb.w	r0, [r1, fp]
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( McSessionData[id].McGroupData.McAddr >> 8 ) & 0xFF;
 800a9a8:	f8de 0004 	ldr.w	r0, [lr, #4]
 800a9ac:	0a00      	lsrs	r0, r0, #8
 800a9ae:	f105 0b03 	add.w	fp, r5, #3
 800a9b2:	fa5f fb8b 	uxtb.w	fp, fp
 800a9b6:	f801 000a 	strb.w	r0, [r1, sl]
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( McSessionData[id].McGroupData.McAddr >> 16 ) & 0xFF;
 800a9ba:	f8be e006 	ldrh.w	lr, [lr, #6]
 800a9be:	1d28      	adds	r0, r5, #4
 800a9c0:	b2c0      	uxtb	r0, r0
 800a9c2:	f801 e00b 	strb.w	lr, [r1, fp]
                                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( McSessionData[id].McGroupData.McAddr >> 24 ) & 0xFF;
 800a9c6:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 800a9ca:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800a9ce:	f898 4007 	ldrb.w	r4, [r8, #7]
 800a9d2:	3505      	adds	r5, #5
 800a9d4:	b2ed      	uxtb	r5, r5
 800a9d6:	540c      	strb	r4, [r1, r0]
                    for( id = 0; id < LORAMAC_MAX_MC_CTX; id++ )
 800a9d8:	3601      	adds	r6, #1
 800a9da:	b2f6      	uxtb	r6, r6
 800a9dc:	2e00      	cmp	r6, #0
 800a9de:	d0bf      	beq.n	800a960 <LmhpRemoteMcastSetupOnMcpsIndication+0x90>
                            }
                        }
                    }
                    /* set the status bit */
                    LmhpRemoteMcastSetupState.DataBuffer[1] = ( nbAvailableGroups & 0x07 ) << 4 | ( AnsGroupMask & 0x0F );
 800a9e0:	011b      	lsls	r3, r3, #4
 800a9e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9e6:	f002 020f 	and.w	r2, r2, #15
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	704b      	strb	r3, [r1, #1]

                    break;
 800a9ee:	e789      	b.n	800a904 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_SETUP_REQ:
                {
                    uint8_t idError = 0x01; /* One bit value */
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800a9f0:	f109 0802 	add.w	r8, r9, #2
 800a9f4:	fa5f f888 	uxtb.w	r8, r8
 800a9f8:	5c56      	ldrb	r6, [r2, r1]
 800a9fa:	f006 0603 	and.w	r6, r6, #3

                    McSessionData[id].McGroupData.IdHeader.Value = id;
 800a9fe:	4634      	mov	r4, r6
 800aa00:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 800aa04:	4b82      	ldr	r3, [pc, #520]	; (800ac10 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800aa06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa0a:	705e      	strb	r6, [r3, #1]

                    if( id < LORAMAC_MAX_MC_CTX )
 800aa0c:	b1b6      	cbz	r6, 800aa3c <LmhpRemoteMcastSetupOnMcpsIndication+0x16c>
                    uint8_t idError = 0x01; /* One bit value */
 800aa0e:	f04f 0c01 	mov.w	ip, #1
                        {
                            idError = 0x00;
                            McSessionData[id].McGroupData.McGroupEnabled = true;
                        }
                    }
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_SETUP_ANS;
 800aa12:	4b7e      	ldr	r3, [pc, #504]	; (800ac0c <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800aa14:	6899      	ldr	r1, [r3, #8]
 800aa16:	1c6a      	adds	r2, r5, #1
 800aa18:	b2d2      	uxtb	r2, r2
 800aa1a:	2302      	movs	r3, #2
 800aa1c:	554b      	strb	r3, [r1, r5]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( idError << 2 ) | McSessionData[id].McGroupData.IdHeader.Fields.McGroupId;
 800aa1e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800aa22:	4b7b      	ldr	r3, [pc, #492]	; (800ac10 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800aa24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	3502      	adds	r5, #2
 800aa30:	b2ed      	uxtb	r5, r5
 800aa32:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 800aa36:	548b      	strb	r3, [r1, r2]
                    break;
 800aa38:	46c1      	mov	r9, r8
 800aa3a:	e763      	b.n	800a904 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                        McSessionData[id].McGroupData.McAddr = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f109 0c03 	add.w	ip, r9, #3
 800aa42:	fa5f fc8c 	uxtb.w	ip, ip
 800aa46:	f813 2008 	ldrb.w	r2, [r3, r8]
 800aa4a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800aa4e:	4970      	ldr	r1, [pc, #448]	; (800ac10 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800aa50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa54:	604a      	str	r2, [r1, #4]
                        McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	f109 0004 	add.w	r0, r9, #4
 800aa5c:	b2c0      	uxtb	r0, r0
 800aa5e:	f813 300c 	ldrb.w	r3, [r3, ip]
 800aa62:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 800aa66:	604a      	str	r2, [r1, #4]
                        McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f109 0c05 	add.w	ip, r9, #5
 800aa6e:	fa5f fc8c 	uxtb.w	ip, ip
 800aa72:	5c1b      	ldrb	r3, [r3, r0]
 800aa74:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 800aa78:	604a      	str	r2, [r1, #4]
                        McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800aa7a:	68b8      	ldr	r0, [r7, #8]
 800aa7c:	f109 0906 	add.w	r9, r9, #6
 800aa80:	fa5f f389 	uxtb.w	r3, r9
 800aa84:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aa88:	eb02 6a00 	add.w	sl, r2, r0, lsl #24
 800aa8c:	f8c1 a004 	str.w	sl, [r1, #4]
                        for( int8_t i = 0; i < 16; i++ )
 800aa90:	2100      	movs	r1, #0
 800aa92:	e00e      	b.n	800aab2 <LmhpRemoteMcastSetupOnMcpsIndication+0x1e2>
                            McSessionData[id].McGroupData.McKeyEncrypted[i] = mcpsIndication->Buffer[cmdIndex++];
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	1c58      	adds	r0, r3, #1
 800aa98:	f812 c003 	ldrb.w	ip, [r2, r3]
 800aa9c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800aaa0:	4b5b      	ldr	r3, [pc, #364]	; (800ac10 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800aaa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaa6:	440b      	add	r3, r1
 800aaa8:	f883 c008 	strb.w	ip, [r3, #8]
                        for( int8_t i = 0; i < 16; i++ )
 800aaac:	3101      	adds	r1, #1
 800aaae:	b249      	sxtb	r1, r1
                            McSessionData[id].McGroupData.McKeyEncrypted[i] = mcpsIndication->Buffer[cmdIndex++];
 800aab0:	b2c3      	uxtb	r3, r0
                        for( int8_t i = 0; i < 16; i++ )
 800aab2:	290f      	cmp	r1, #15
 800aab4:	ddee      	ble.n	800aa94 <LmhpRemoteMcastSetupOnMcpsIndication+0x1c4>
                        McSessionData[id].McGroupData.McFCountMin = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	1c59      	adds	r1, r3, #1
 800aaba:	b2c9      	uxtb	r1, r1
 800aabc:	5cd2      	ldrb	r2, [r2, r3]
 800aabe:	ebc4 0bc4 	rsb	fp, r4, r4, lsl #3
 800aac2:	4853      	ldr	r0, [pc, #332]	; (800ac10 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800aac4:	eb00 0bcb 	add.w	fp, r0, fp, lsl #3
 800aac8:	f8cb 2018 	str.w	r2, [fp, #24]
                        McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800aacc:	68b8      	ldr	r0, [r7, #8]
 800aace:	f103 0c02 	add.w	ip, r3, #2
 800aad2:	fa5f fc8c 	uxtb.w	ip, ip
 800aad6:	5c41      	ldrb	r1, [r0, r1]
 800aad8:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800aadc:	f8cb 2018 	str.w	r2, [fp, #24]
                        McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800aae0:	68b9      	ldr	r1, [r7, #8]
 800aae2:	1cd8      	adds	r0, r3, #3
 800aae4:	b2c0      	uxtb	r0, r0
 800aae6:	f811 100c 	ldrb.w	r1, [r1, ip]
 800aaea:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800aaee:	f8cb 2018 	str.w	r2, [fp, #24]
                        McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800aaf2:	68b9      	ldr	r1, [r7, #8]
 800aaf4:	f103 0c04 	add.w	ip, r3, #4
 800aaf8:	fa5f fc8c 	uxtb.w	ip, ip
 800aafc:	5c09      	ldrb	r1, [r1, r0]
 800aafe:	eb02 6901 	add.w	r9, r2, r1, lsl #24
 800ab02:	f8cb 9018 	str.w	r9, [fp, #24]
                        McSessionData[id].McGroupData.McFCountMax = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	1d59      	adds	r1, r3, #5
 800ab0a:	b2c9      	uxtb	r1, r1
 800ab0c:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ab10:	f8cb 201c 	str.w	r2, [fp, #28]
                        McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800ab14:	68b8      	ldr	r0, [r7, #8]
 800ab16:	f103 0c06 	add.w	ip, r3, #6
 800ab1a:	fa5f fc8c 	uxtb.w	ip, ip
 800ab1e:	5c41      	ldrb	r1, [r0, r1]
 800ab20:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800ab24:	f8cb 201c 	str.w	r2, [fp, #28]
                        McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800ab28:	68b9      	ldr	r1, [r7, #8]
 800ab2a:	1dd8      	adds	r0, r3, #7
 800ab2c:	b2c0      	uxtb	r0, r0
 800ab2e:	f811 100c 	ldrb.w	r1, [r1, ip]
 800ab32:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800ab36:	f8cb 201c 	str.w	r2, [fp, #28]
                        McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800ab3a:	68b9      	ldr	r1, [r7, #8]
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	fa5f f883 	uxtb.w	r8, r3
 800ab42:	5c0b      	ldrb	r3, [r1, r0]
 800ab44:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 800ab48:	9303      	str	r3, [sp, #12]
 800ab4a:	f8cb 301c 	str.w	r3, [fp, #28]
                        McChannelParams_t channel =
 800ab4e:	2224      	movs	r2, #36	; 0x24
 800ab50:	2100      	movs	r1, #0
 800ab52:	f10d 0c14 	add.w	ip, sp, #20
 800ab56:	4660      	mov	r0, ip
 800ab58:	f00b fdb4 	bl	80166c4 <memset>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	f88d 3014 	strb.w	r3, [sp, #20]
 800ab62:	f88d 3015 	strb.w	r3, [sp, #21]
                            .GroupID = ( AddressIdentifier_t )McSessionData[id].McGroupData.IdHeader.Fields.McGroupId,
 800ab66:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800ab6a:	f3c3 0301 	ubfx	r3, r3, #0, #2
                        McChannelParams_t channel =
 800ab6e:	f88d 3016 	strb.w	r3, [sp, #22]
 800ab72:	f8cd a018 	str.w	sl, [sp, #24]
                            .McKeys.McKeyE = McSessionData[id].McGroupData.McKeyEncrypted,
 800ab76:	00e3      	lsls	r3, r4, #3
 800ab78:	1b1b      	subs	r3, r3, r4
 800ab7a:	00db      	lsls	r3, r3, #3
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	4824      	ldr	r0, [pc, #144]	; (800ac10 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800ab80:	4403      	add	r3, r0
                        McChannelParams_t channel =
 800ab82:	9307      	str	r3, [sp, #28]
 800ab84:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ab88:	9b03      	ldr	r3, [sp, #12]
 800ab8a:	930a      	str	r3, [sp, #40]	; 0x28
                        if( LoRaMacMcChannelSetup( &channel ) == LORAMAC_STATUS_OK )
 800ab8c:	a805      	add	r0, sp, #20
 800ab8e:	f003 fca1 	bl	800e4d4 <LoRaMacMcChannelSetup>
 800ab92:	4684      	mov	ip, r0
 800ab94:	b930      	cbnz	r0, 800aba4 <LmhpRemoteMcastSetupOnMcpsIndication+0x2d4>
                            McSessionData[id].McGroupData.McGroupEnabled = true;
 800ab96:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800ab9a:	4a1d      	ldr	r2, [pc, #116]	; (800ac10 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800aba2:	e736      	b.n	800aa12 <LmhpRemoteMcastSetupOnMcpsIndication+0x142>
                    uint8_t idError = 0x01; /* One bit value */
 800aba4:	f04f 0c01 	mov.w	ip, #1
 800aba8:	e733      	b.n	800aa12 <LmhpRemoteMcastSetupOnMcpsIndication+0x142>
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_DELETE_REQ:
                {
                    uint8_t status = 0x00;
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800abaa:	f109 0902 	add.w	r9, r9, #2
 800abae:	fa5f f989 	uxtb.w	r9, r9
 800abb2:	5c56      	ldrb	r6, [r2, r1]
 800abb4:	f006 0603 	and.w	r6, r6, #3

                    status = id;
                    McSessionData[id].McGroupData.IdHeader.Value = 0;
 800abb8:	4815      	ldr	r0, [pc, #84]	; (800ac10 <LmhpRemoteMcastSetupOnMcpsIndication+0x340>)
 800abba:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 800abbe:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800abc2:	f04f 0800 	mov.w	r8, #0
 800abc6:	f884 8001 	strb.w	r8, [r4, #1]
                    McSessionData[id].McGroupData.McAddr = 0;
 800abca:	f8c4 8004 	str.w	r8, [r4, #4]
                    memset1( McSessionData[id].McGroupData.McKeyEncrypted, 0x00, 16 );
 800abce:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	3308      	adds	r3, #8
 800abd6:	2210      	movs	r2, #16
 800abd8:	4641      	mov	r1, r8
 800abda:	4418      	add	r0, r3
 800abdc:	f007 fb67 	bl	80122ae <memset1>
                    McSessionData[id].McGroupData.McFCountMin = 0;
 800abe0:	f8c4 8018 	str.w	r8, [r4, #24]
                    McSessionData[id].McGroupData.McFCountMax = 0;
 800abe4:	f8c4 801c 	str.w	r8, [r4, #28]

                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_DELETE_ANS;
 800abe8:	4b08      	ldr	r3, [pc, #32]	; (800ac0c <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	1c6c      	adds	r4, r5, #1
 800abee:	b2e4      	uxtb	r4, r4
 800abf0:	2203      	movs	r2, #3
 800abf2:	555a      	strb	r2, [r3, r5]

                    if( LoRaMacMcChannelDelete( ( AddressIdentifier_t )id ) != LORAMAC_STATUS_OK )
 800abf4:	4630      	mov	r0, r6
 800abf6:	f003 fcc7 	bl	800e588 <LoRaMacMcChannelDelete>
 800abfa:	b158      	cbz	r0, 800ac14 <LmhpRemoteMcastSetupOnMcpsIndication+0x344>
                    {
                        status |= 0x04; /* McGroupUndefined bit set */
 800abfc:	f046 0204 	orr.w	r2, r6, #4
                    }
                    else
                    {
                        McSessionData[id].McGroupData.McGroupEnabled = false;
                    }
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 800ac00:	4b02      	ldr	r3, [pc, #8]	; (800ac0c <LmhpRemoteMcastSetupOnMcpsIndication+0x33c>)
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	3502      	adds	r5, #2
 800ac06:	b2ed      	uxtb	r5, r5
 800ac08:	551a      	strb	r2, [r3, r4]
                    break;
 800ac0a:	e67b      	b.n	800a904 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
 800ac0c:	20000204 	.word	0x20000204
 800ac10:	20000d14 	.word	0x20000d14
                        McSessionData[id].McGroupData.McGroupEnabled = false;
 800ac14:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800ac18:	00db      	lsls	r3, r3, #3
 800ac1a:	4ac0      	ldr	r2, [pc, #768]	; (800af1c <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	54d1      	strb	r1, [r2, r3]
                    status = id;
 800ac20:	4632      	mov	r2, r6
 800ac22:	e7ed      	b.n	800ac00 <LmhpRemoteMcastSetupOnMcpsIndication+0x330>
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_REQ:
                {
                    bool isTimerSet = false;
                    int32_t timeToSessionStart = 0;
                    uint8_t status = 0x00;
 800ac24:	2300      	movs	r3, #0
 800ac26:	f88d 3013 	strb.w	r3, [sp, #19]
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800ac2a:	f109 0002 	add.w	r0, r9, #2
 800ac2e:	b2c0      	uxtb	r0, r0
 800ac30:	5c56      	ldrb	r6, [r2, r1]

                    if( id < LORAMAC_MAX_MC_CTX )
 800ac32:	f016 0603 	ands.w	r6, r6, #3
 800ac36:	d020      	beq.n	800ac7a <LmhpRemoteMcastSetupOnMcpsIndication+0x3aa>
                            }
                        }
                    }
                    else
                    {
                        status |= 0x10; /* McGroupUndefined bit set */
 800ac38:	2310      	movs	r3, #16
 800ac3a:	f88d 3013 	strb.w	r3, [sp, #19]
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800ac3e:	4681      	mov	r9, r0
                    int32_t timeToSessionStart = 0;
 800ac40:	2400      	movs	r4, #0
                    bool isTimerSet = false;
 800ac42:	46a4      	mov	ip, r4
                    }

                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_ANS;
 800ac44:	4bb6      	ldr	r3, [pc, #728]	; (800af20 <LmhpRemoteMcastSetupOnMcpsIndication+0x650>)
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	1c69      	adds	r1, r5, #1
 800ac4a:	b2c9      	uxtb	r1, r1
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	5553      	strb	r3, [r2, r5]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 800ac50:	1cab      	adds	r3, r5, #2
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800ac58:	5450      	strb	r0, [r2, r1]
                    if( isTimerSet == true )
 800ac5a:	f1bc 0f00 	cmp.w	ip, #0
 800ac5e:	d00a      	beq.n	800ac76 <LmhpRemoteMcastSetupOnMcpsIndication+0x3a6>
                    {
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 0 ) & 0xFF;
 800ac60:	1ce8      	adds	r0, r5, #3
 800ac62:	b2c0      	uxtb	r0, r0
 800ac64:	54d4      	strb	r4, [r2, r3]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 8 ) & 0xFF;
 800ac66:	1223      	asrs	r3, r4, #8
 800ac68:	1d29      	adds	r1, r5, #4
 800ac6a:	b2c9      	uxtb	r1, r1
 800ac6c:	5413      	strb	r3, [r2, r0]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 16 ) & 0xFF;
 800ac6e:	1424      	asrs	r4, r4, #16
 800ac70:	1d6b      	adds	r3, r5, #5
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	5454      	strb	r4, [r2, r1]
                    }
                    break;
 800ac76:	461d      	mov	r5, r3
 800ac78:	e644      	b.n	800a904 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                        McSessionData[id].RxParams.Class = CLASS_C;
 800ac7a:	49a8      	ldr	r1, [pc, #672]	; (800af1c <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800ac7c:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800ac80:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ac84:	2202      	movs	r2, #2
 800ac86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        McSessionData[id].SessionTime = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	f109 0403 	add.w	r4, r9, #3
 800ac90:	b2e4      	uxtb	r4, r4
 800ac92:	5c12      	ldrb	r2, [r2, r0]
 800ac94:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800ac96:	68b8      	ldr	r0, [r7, #8]
 800ac98:	f109 0e04 	add.w	lr, r9, #4
 800ac9c:	fa5f fe8e 	uxtb.w	lr, lr
 800aca0:	5d00      	ldrb	r0, [r0, r4]
 800aca2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800aca6:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800aca8:	68b8      	ldr	r0, [r7, #8]
 800acaa:	f109 0c05 	add.w	ip, r9, #5
 800acae:	fa5f fc8c 	uxtb.w	ip, ip
 800acb2:	f810 000e 	ldrb.w	r0, [r0, lr]
 800acb6:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 800acba:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800acbc:	68b8      	ldr	r0, [r7, #8]
 800acbe:	f109 0406 	add.w	r4, r9, #6
 800acc2:	b2e4      	uxtb	r4, r4
 800acc4:	f810 000c 	ldrb.w	r0, [r0, ip]
 800acc8:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 800accc:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += UNIX_GPS_EPOCH_OFFSET;
 800acce:	4895      	ldr	r0, [pc, #596]	; (800af24 <LmhpRemoteMcastSetupOnMcpsIndication+0x654>)
 800acd0:	4410      	add	r0, r2
 800acd2:	6258      	str	r0, [r3, #36]	; 0x24
                        McSessionData[id].SessionTimeout =  mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	f109 0007 	add.w	r0, r9, #7
 800acda:	b2c0      	uxtb	r0, r0
 800acdc:	5d12      	ldrb	r2, [r2, r4]
 800acde:	f002 020f 	and.w	r2, r2, #15
 800ace2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        McSessionData[id].RxParams.Params.ClassC.Frequency = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	f109 0408 	add.w	r4, r9, #8
 800acec:	b2e4      	uxtb	r4, r4
 800acee:	5c12      	ldrb	r2, [r2, r0]
 800acf0:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassC.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800acf2:	68b8      	ldr	r0, [r7, #8]
 800acf4:	f109 0c09 	add.w	ip, r9, #9
 800acf8:	fa5f fc8c 	uxtb.w	ip, ip
 800acfc:	5d00      	ldrb	r0, [r0, r4]
 800acfe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800ad02:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassC.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800ad04:	68b8      	ldr	r0, [r7, #8]
 800ad06:	f109 040a 	add.w	r4, r9, #10
 800ad0a:	b2e4      	uxtb	r4, r4
 800ad0c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ad10:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ad14:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassC.Frequency *= 100;
 800ad16:	2064      	movs	r0, #100	; 0x64
 800ad18:	fb00 f202 	mul.w	r2, r0, r2
 800ad1c:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassC.Datarate = mcpsIndication->Buffer[cmdIndex++];
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	f109 090b 	add.w	r9, r9, #11
 800ad24:	fa5f f989 	uxtb.w	r9, r9
 800ad28:	5712      	ldrsb	r2, [r2, r4]
 800ad2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        if( LoRaMacMcChannelSetupRxParams( ( AddressIdentifier_t )id, &McSessionData[id].RxParams,
 800ad2e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800ad32:	00db      	lsls	r3, r3, #3
 800ad34:	3328      	adds	r3, #40	; 0x28
 800ad36:	4419      	add	r1, r3
 800ad38:	f10d 0213 	add.w	r2, sp, #19
 800ad3c:	3104      	adds	r1, #4
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f003 fc76 	bl	800e630 <LoRaMacMcChannelSetupRxParams>
 800ad44:	b110      	cbz	r0, 800ad4c <LmhpRemoteMcastSetupOnMcpsIndication+0x47c>
                    int32_t timeToSessionStart = 0;
 800ad46:	2400      	movs	r4, #0
                    bool isTimerSet = false;
 800ad48:	46a4      	mov	ip, r4
 800ad4a:	e77b      	b.n	800ac44 <LmhpRemoteMcastSetupOnMcpsIndication+0x374>
                            SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9305      	str	r3, [sp, #20]
 800ad50:	f8ad 3018 	strh.w	r3, [sp, #24]
                            curTime = SysTimeGet( );
 800ad54:	a805      	add	r0, sp, #20
 800ad56:	f009 fb17 	bl	8014388 <SysTimeGet>
                            timeToSessionStart = McSessionData[id].SessionTime - curTime.Seconds;
 800ad5a:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 800ad5e:	4b6f      	ldr	r3, [pc, #444]	; (800af1c <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800ad60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ad66:	9b05      	ldr	r3, [sp, #20]
 800ad68:	1ae4      	subs	r4, r4, r3
                            if( timeToSessionStart > 0 )
 800ad6a:	2c00      	cmp	r4, #0
 800ad6c:	dc08      	bgt.n	800ad80 <LmhpRemoteMcastSetupOnMcpsIndication+0x4b0>
                                status |= 0x10; /* McGroupUndefined bit set */
 800ad6e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800ad72:	f043 0310 	orr.w	r3, r3, #16
 800ad76:	f88d 3013 	strb.w	r3, [sp, #19]
                    bool isTimerSet = false;
 800ad7a:	f04f 0c00 	mov.w	ip, #0
 800ad7e:	e761      	b.n	800ac44 <LmhpRemoteMcastSetupOnMcpsIndication+0x374>
                                TimerSetValue( &SessionStartTimer[id], timeToSessionStart * 1000 );
 800ad80:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800ad84:	4b68      	ldr	r3, [pc, #416]	; (800af28 <LmhpRemoteMcastSetupOnMcpsIndication+0x658>)
 800ad86:	eb03 0ac8 	add.w	sl, r3, r8, lsl #3
 800ad8a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800ad8e:	fb08 f804 	mul.w	r8, r8, r4
 800ad92:	4641      	mov	r1, r8
 800ad94:	4650      	mov	r0, sl
 800ad96:	f009 fc85 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                                TimerStart( &SessionStartTimer[id] );
 800ad9a:	4650      	mov	r0, sl
 800ad9c:	f009 fc3c 	bl	8014618 <UTIL_TIMER_Start>
                                MW_LOG( TS_OFF, VLEVEL_M, "Time2SessionStart: %d ms\r\n", timeToSessionStart * 1000 );
 800ada0:	f8cd 8000 	str.w	r8, [sp]
 800ada4:	4b61      	ldr	r3, [pc, #388]	; (800af2c <LmhpRemoteMcastSetupOnMcpsIndication+0x65c>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	4611      	mov	r1, r2
 800adaa:	2002      	movs	r0, #2
 800adac:	f009 f944 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                                isTimerSet = true;
 800adb0:	f04f 0c01 	mov.w	ip, #1
 800adb4:	e746      	b.n	800ac44 <LmhpRemoteMcastSetupOnMcpsIndication+0x374>
                }
            case REMOTE_MCAST_SETUP_MC_GROUP_CLASS_B_SESSION_REQ:
                {
                    bool isTimerSet = false;
                    int32_t timeToSessionStart = 0;
                    uint8_t status = 0x00;
 800adb6:	2300      	movs	r3, #0
 800adb8:	f88d 3013 	strb.w	r3, [sp, #19]
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800adbc:	f109 0002 	add.w	r0, r9, #2
 800adc0:	b2c0      	uxtb	r0, r0
 800adc2:	5c56      	ldrb	r6, [r2, r1]

                    if( id < LORAMAC_MAX_MC_CTX )
 800adc4:	f016 0603 	ands.w	r6, r6, #3
 800adc8:	d020      	beq.n	800ae0c <LmhpRemoteMcastSetupOnMcpsIndication+0x53c>
                            }
                        }
                    }
                    else
                    {
                        status |= 0x10; /* McGroupUndefined bit set */
 800adca:	2310      	movs	r3, #16
 800adcc:	f88d 3013 	strb.w	r3, [sp, #19]
                    id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800add0:	4681      	mov	r9, r0
                    int32_t timeToSessionStart = 0;
 800add2:	2400      	movs	r4, #0
                    bool isTimerSet = false;
 800add4:	46a4      	mov	ip, r4
                    }

                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_B_SESSION_ANS;
 800add6:	4b52      	ldr	r3, [pc, #328]	; (800af20 <LmhpRemoteMcastSetupOnMcpsIndication+0x650>)
 800add8:	689a      	ldr	r2, [r3, #8]
 800adda:	1c69      	adds	r1, r5, #1
 800addc:	b2c9      	uxtb	r1, r1
 800adde:	2305      	movs	r3, #5
 800ade0:	5553      	strb	r3, [r2, r5]
                    LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 800ade2:	1cab      	adds	r3, r5, #2
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800adea:	5450      	strb	r0, [r2, r1]
                    if( isTimerSet == true )
 800adec:	f1bc 0f00 	cmp.w	ip, #0
 800adf0:	d00a      	beq.n	800ae08 <LmhpRemoteMcastSetupOnMcpsIndication+0x538>
                    {
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 0 ) & 0xFF;
 800adf2:	1ce8      	adds	r0, r5, #3
 800adf4:	b2c0      	uxtb	r0, r0
 800adf6:	54d4      	strb	r4, [r2, r3]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 8 ) & 0xFF;
 800adf8:	1223      	asrs	r3, r4, #8
 800adfa:	1d29      	adds	r1, r5, #4
 800adfc:	b2c9      	uxtb	r1, r1
 800adfe:	5413      	strb	r3, [r2, r0]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 16 ) & 0xFF;
 800ae00:	1424      	asrs	r4, r4, #16
 800ae02:	1d6b      	adds	r3, r5, #5
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	5454      	strb	r4, [r2, r1]
                    }
                    break;
 800ae08:	461d      	mov	r5, r3
 800ae0a:	e57b      	b.n	800a904 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                        McSessionData[id].RxParams.Class = CLASS_B;
 800ae0c:	4943      	ldr	r1, [pc, #268]	; (800af1c <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800ae0e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800ae12:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        McSessionData[id].SessionTime = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	f109 0403 	add.w	r4, r9, #3
 800ae22:	b2e4      	uxtb	r4, r4
 800ae24:	5c12      	ldrb	r2, [r2, r0]
 800ae26:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800ae28:	68b8      	ldr	r0, [r7, #8]
 800ae2a:	f109 0e04 	add.w	lr, r9, #4
 800ae2e:	fa5f fe8e 	uxtb.w	lr, lr
 800ae32:	5d00      	ldrb	r0, [r0, r4]
 800ae34:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800ae38:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800ae3a:	68b8      	ldr	r0, [r7, #8]
 800ae3c:	f109 0c05 	add.w	ip, r9, #5
 800ae40:	fa5f fc8c 	uxtb.w	ip, ip
 800ae44:	f810 000e 	ldrb.w	r0, [r0, lr]
 800ae48:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 800ae4c:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800ae4e:	68b8      	ldr	r0, [r7, #8]
 800ae50:	f109 0406 	add.w	r4, r9, #6
 800ae54:	b2e4      	uxtb	r4, r4
 800ae56:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ae5a:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 800ae5e:	625a      	str	r2, [r3, #36]	; 0x24
                        McSessionData[id].SessionTime += UNIX_GPS_EPOCH_OFFSET;
 800ae60:	4830      	ldr	r0, [pc, #192]	; (800af24 <LmhpRemoteMcastSetupOnMcpsIndication+0x654>)
 800ae62:	4410      	add	r0, r2
 800ae64:	6258      	str	r0, [r3, #36]	; 0x24
                        McSessionData[id].RxParams.Params.ClassB.Periodicity = ( mcpsIndication->Buffer[cmdIndex] >> 4 ) & 0x07;
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	5d12      	ldrb	r2, [r2, r4]
 800ae6a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800ae6e:	86da      	strh	r2, [r3, #54]	; 0x36
                        McSessionData[id].SessionTimeout =  mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	f109 0007 	add.w	r0, r9, #7
 800ae76:	b2c0      	uxtb	r0, r0
 800ae78:	5d12      	ldrb	r2, [r2, r4]
 800ae7a:	f002 020f 	and.w	r2, r2, #15
 800ae7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        McSessionData[id].RxParams.Params.ClassB.Frequency = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x000000FF;
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	f109 0408 	add.w	r4, r9, #8
 800ae88:	b2e4      	uxtb	r4, r4
 800ae8a:	5c12      	ldrb	r2, [r2, r0]
 800ae8c:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassB.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0x0000FF00;
 800ae8e:	68b8      	ldr	r0, [r7, #8]
 800ae90:	f109 0c09 	add.w	ip, r9, #9
 800ae94:	fa5f fc8c 	uxtb.w	ip, ip
 800ae98:	5d00      	ldrb	r0, [r0, r4]
 800ae9a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800ae9e:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassB.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800aea0:	68b8      	ldr	r0, [r7, #8]
 800aea2:	f109 040a 	add.w	r4, r9, #10
 800aea6:	b2e4      	uxtb	r4, r4
 800aea8:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aeac:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800aeb0:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassB.Frequency *= 100;
 800aeb2:	2064      	movs	r0, #100	; 0x64
 800aeb4:	fb00 f202 	mul.w	r2, r0, r2
 800aeb8:	631a      	str	r2, [r3, #48]	; 0x30
                        McSessionData[id].RxParams.Params.ClassB.Datarate = mcpsIndication->Buffer[cmdIndex++];
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	f109 090b 	add.w	r9, r9, #11
 800aec0:	fa5f f989 	uxtb.w	r9, r9
 800aec4:	5712      	ldrsb	r2, [r2, r4]
 800aec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        if( LoRaMacMcChannelSetupRxParams( ( AddressIdentifier_t )id, &McSessionData[id].RxParams,
 800aeca:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	3328      	adds	r3, #40	; 0x28
 800aed2:	4419      	add	r1, r3
 800aed4:	f10d 0213 	add.w	r2, sp, #19
 800aed8:	3104      	adds	r1, #4
 800aeda:	4630      	mov	r0, r6
 800aedc:	f003 fba8 	bl	800e630 <LoRaMacMcChannelSetupRxParams>
 800aee0:	b110      	cbz	r0, 800aee8 <LmhpRemoteMcastSetupOnMcpsIndication+0x618>
                    int32_t timeToSessionStart = 0;
 800aee2:	2400      	movs	r4, #0
                    bool isTimerSet = false;
 800aee4:	46a4      	mov	ip, r4
 800aee6:	e776      	b.n	800add6 <LmhpRemoteMcastSetupOnMcpsIndication+0x506>
                            SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 800aee8:	2300      	movs	r3, #0
 800aeea:	9305      	str	r3, [sp, #20]
 800aeec:	f8ad 3018 	strh.w	r3, [sp, #24]
                            curTime = SysTimeGet( );
 800aef0:	a805      	add	r0, sp, #20
 800aef2:	f009 fa49 	bl	8014388 <SysTimeGet>
                            timeToSessionStart = McSessionData[id].SessionTime - curTime.Seconds;
 800aef6:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 800aefa:	4b08      	ldr	r3, [pc, #32]	; (800af1c <LmhpRemoteMcastSetupOnMcpsIndication+0x64c>)
 800aefc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800af02:	9b05      	ldr	r3, [sp, #20]
 800af04:	1ae4      	subs	r4, r4, r3
                            if( timeToSessionStart > 0 )
 800af06:	2c00      	cmp	r4, #0
 800af08:	dc12      	bgt.n	800af30 <LmhpRemoteMcastSetupOnMcpsIndication+0x660>
                                status |= 0x10; /* McGroupUndefined bit set */
 800af0a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800af0e:	f043 0310 	orr.w	r3, r3, #16
 800af12:	f88d 3013 	strb.w	r3, [sp, #19]
                    bool isTimerSet = false;
 800af16:	f04f 0c00 	mov.w	ip, #0
 800af1a:	e75c      	b.n	800add6 <LmhpRemoteMcastSetupOnMcpsIndication+0x506>
 800af1c:	20000d14 	.word	0x20000d14
 800af20:	20000204 	.word	0x20000204
 800af24:	12d53d80 	.word	0x12d53d80
 800af28:	20000d4c 	.word	0x20000d4c
 800af2c:	08019a54 	.word	0x08019a54
                                TimerSetValue( &SessionStartTimer[id], timeToSessionStart * 1000 );
 800af30:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800af34:	4b6c      	ldr	r3, [pc, #432]	; (800b0e8 <LmhpRemoteMcastSetupOnMcpsIndication+0x818>)
 800af36:	eb03 0ac8 	add.w	sl, r3, r8, lsl #3
 800af3a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800af3e:	fb08 f804 	mul.w	r8, r8, r4
 800af42:	4641      	mov	r1, r8
 800af44:	4650      	mov	r0, sl
 800af46:	f009 fbad 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                                TimerStart( &SessionStartTimer[id] );
 800af4a:	4650      	mov	r0, sl
 800af4c:	f009 fb64 	bl	8014618 <UTIL_TIMER_Start>
                                MW_LOG( TS_OFF, VLEVEL_M, "Time2SessionStart: %d ms\r\n", timeToSessionStart * 1000 );
 800af50:	f8cd 8000 	str.w	r8, [sp]
 800af54:	4b65      	ldr	r3, [pc, #404]	; (800b0ec <LmhpRemoteMcastSetupOnMcpsIndication+0x81c>)
 800af56:	2200      	movs	r2, #0
 800af58:	4611      	mov	r1, r2
 800af5a:	2002      	movs	r0, #2
 800af5c:	f009 f86c 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                                isTimerSet = true;
 800af60:	f04f 0c01 	mov.w	ip, #1
 800af64:	e737      	b.n	800add6 <LmhpRemoteMcastSetupOnMcpsIndication+0x506>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800af66:	4689      	mov	r9, r1
 800af68:	e4cc      	b.n	800a904 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                    break;
                }
        }
    }

    if( dataBufferIndex != 0 )
 800af6a:	b915      	cbnz	r5, 800af72 <LmhpRemoteMcastSetupOnMcpsIndication+0x6a2>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx Freq     : %u\r\n", McSessionData[id].RxParams.Params.ClassC.Frequency );
                MW_LOG( TS_OFF, VLEVEL_M, "Rx DR       : DR_%d\r\n", McSessionData[id].RxParams.Params.ClassC.Datarate );
            }
        }
    }
}
 800af6c:	b00f      	add	sp, #60	; 0x3c
 800af6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LmHandlerAppData_t appData =
 800af72:	23c8      	movs	r3, #200	; 0xc8
 800af74:	f88d 3014 	strb.w	r3, [sp, #20]
 800af78:	f88d 5015 	strb.w	r5, [sp, #21]
            .Buffer = LmhpRemoteMcastSetupState.DataBuffer,
 800af7c:	4b5c      	ldr	r3, [pc, #368]	; (800b0f0 <LmhpRemoteMcastSetupOnMcpsIndication+0x820>)
 800af7e:	689b      	ldr	r3, [r3, #8]
        LmHandlerAppData_t appData =
 800af80:	9306      	str	r3, [sp, #24]
        LmHandlerGetDutyCycleEnable( &current_dutycycle );
 800af82:	f10d 0013 	add.w	r0, sp, #19
 800af86:	f7fe fa53 	bl	8009430 <LmHandlerGetDutyCycleEnable>
        LmHandlerSetDutyCycleEnable( false );
 800af8a:	2000      	movs	r0, #0
 800af8c:	f7fe fa5c 	bl	8009448 <LmHandlerSetDutyCycleEnable>
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800af90:	2201      	movs	r2, #1
 800af92:	2100      	movs	r1, #0
 800af94:	a805      	add	r0, sp, #20
 800af96:	f7fd ff29 	bl	8008dec <LmHandlerSend>
        LmHandlerSetDutyCycleEnable( current_dutycycle );
 800af9a:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800af9e:	f7fe fa53 	bl	8009448 <LmHandlerSetDutyCycleEnable>
        if( id != 0xFF && id < LORAMAC_MAX_MC_CTX )
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d1e2      	bne.n	800af6c <LmhpRemoteMcastSetupOnMcpsIndication+0x69c>
            MW_LOG( TS_OFF, VLEVEL_M, "ID          : %d\r\n", McSessionData[id].McGroupData.IdHeader.Fields.McGroupId );
 800afa6:	4635      	mov	r5, r6
 800afa8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800afac:	4c51      	ldr	r4, [pc, #324]	; (800b0f4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800afae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800afb2:	7863      	ldrb	r3, [r4, #1]
 800afb4:	f003 0303 	and.w	r3, r3, #3
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	4b4f      	ldr	r3, [pc, #316]	; (800b0f8 <LmhpRemoteMcastSetupOnMcpsIndication+0x828>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	4611      	mov	r1, r2
 800afc0:	2002      	movs	r0, #2
 800afc2:	f009 f839 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "McAddr      : %08X\r\n", McSessionData[id].McGroupData.McAddr );
 800afc6:	6863      	ldr	r3, [r4, #4]
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	4b4c      	ldr	r3, [pc, #304]	; (800b0fc <LmhpRemoteMcastSetupOnMcpsIndication+0x82c>)
 800afcc:	2200      	movs	r2, #0
 800afce:	4611      	mov	r1, r2
 800afd0:	2002      	movs	r0, #2
 800afd2:	f009 f831 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "McKey       : %02X", McSessionData[id].McGroupData.McKeyEncrypted[0] );
 800afd6:	7a23      	ldrb	r3, [r4, #8]
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	4b49      	ldr	r3, [pc, #292]	; (800b100 <LmhpRemoteMcastSetupOnMcpsIndication+0x830>)
 800afdc:	2200      	movs	r2, #0
 800afde:	4611      	mov	r1, r2
 800afe0:	2002      	movs	r0, #2
 800afe2:	f009 f829 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
            for( int32_t i = 1; i < 16; i++ )
 800afe6:	2401      	movs	r4, #1
 800afe8:	e00e      	b.n	800b008 <LmhpRemoteMcastSetupOnMcpsIndication+0x738>
                MW_LOG( TS_OFF, VLEVEL_M, "-%02X",  McSessionData[id].McGroupData.McKeyEncrypted[i] );
 800afea:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800afee:	4b41      	ldr	r3, [pc, #260]	; (800b0f4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800aff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aff4:	4423      	add	r3, r4
 800aff6:	7a1b      	ldrb	r3, [r3, #8]
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	4b42      	ldr	r3, [pc, #264]	; (800b104 <LmhpRemoteMcastSetupOnMcpsIndication+0x834>)
 800affc:	2200      	movs	r2, #0
 800affe:	4611      	mov	r1, r2
 800b000:	2002      	movs	r0, #2
 800b002:	f009 f819 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
            for( int32_t i = 1; i < 16; i++ )
 800b006:	3401      	adds	r4, #1
 800b008:	2c0f      	cmp	r4, #15
 800b00a:	ddee      	ble.n	800afea <LmhpRemoteMcastSetupOnMcpsIndication+0x71a>
            MW_LOG( TS_OFF, VLEVEL_M, "\r\n" );
 800b00c:	4b3e      	ldr	r3, [pc, #248]	; (800b108 <LmhpRemoteMcastSetupOnMcpsIndication+0x838>)
 800b00e:	2200      	movs	r2, #0
 800b010:	4611      	mov	r1, r2
 800b012:	2002      	movs	r0, #2
 800b014:	f009 f810 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "McFCountMin : %u\r\n",  McSessionData[id].McGroupData.McFCountMin );
 800b018:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800b01c:	4c35      	ldr	r4, [pc, #212]	; (800b0f4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800b01e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800b022:	69a3      	ldr	r3, [r4, #24]
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	4b39      	ldr	r3, [pc, #228]	; (800b10c <LmhpRemoteMcastSetupOnMcpsIndication+0x83c>)
 800b028:	2200      	movs	r2, #0
 800b02a:	4611      	mov	r1, r2
 800b02c:	2002      	movs	r0, #2
 800b02e:	f009 f803 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "McFCountMax : %u\r\n",  McSessionData[id].McGroupData.McFCountMax );
 800b032:	69e3      	ldr	r3, [r4, #28]
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	4b36      	ldr	r3, [pc, #216]	; (800b110 <LmhpRemoteMcastSetupOnMcpsIndication+0x840>)
 800b038:	2200      	movs	r2, #0
 800b03a:	4611      	mov	r1, r2
 800b03c:	2002      	movs	r0, #2
 800b03e:	f008 fffb 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "SessionTime : %u\r\n",  McSessionData[id].SessionTime );
 800b042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	4b33      	ldr	r3, [pc, #204]	; (800b114 <LmhpRemoteMcastSetupOnMcpsIndication+0x844>)
 800b048:	2200      	movs	r2, #0
 800b04a:	4611      	mov	r1, r2
 800b04c:	2002      	movs	r0, #2
 800b04e:	f008 fff3 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
            MW_LOG( TS_OFF, VLEVEL_M, "SessionTimeT: %d s\r\n", ( 1 << McSessionData[id].SessionTimeout ) );
 800b052:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800b056:	2301      	movs	r3, #1
 800b058:	4093      	lsls	r3, r2
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	4b2e      	ldr	r3, [pc, #184]	; (800b118 <LmhpRemoteMcastSetupOnMcpsIndication+0x848>)
 800b05e:	2200      	movs	r2, #0
 800b060:	4611      	mov	r1, r2
 800b062:	2002      	movs	r0, #2
 800b064:	f008 ffe8 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
            if( McSessionData[id].RxParams.Class == CLASS_B )
 800b068:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d01a      	beq.n	800b0a6 <LmhpRemoteMcastSetupOnMcpsIndication+0x7d6>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx Freq     : %u\r\n", McSessionData[id].RxParams.Params.ClassC.Frequency );
 800b070:	4c20      	ldr	r4, [pc, #128]	; (800b0f4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800b072:	00ee      	lsls	r6, r5, #3
 800b074:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800b078:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800b07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	4b26      	ldr	r3, [pc, #152]	; (800b11c <LmhpRemoteMcastSetupOnMcpsIndication+0x84c>)
 800b082:	2200      	movs	r2, #0
 800b084:	4611      	mov	r1, r2
 800b086:	2002      	movs	r0, #2
 800b088:	f008 ffd6 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx DR       : DR_%d\r\n", McSessionData[id].RxParams.Params.ClassC.Datarate );
 800b08c:	1b76      	subs	r6, r6, r5
 800b08e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b092:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	4b21      	ldr	r3, [pc, #132]	; (800b120 <LmhpRemoteMcastSetupOnMcpsIndication+0x850>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	4611      	mov	r1, r2
 800b09e:	2002      	movs	r0, #2
 800b0a0:	f008 ffca 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
 800b0a4:	e762      	b.n	800af6c <LmhpRemoteMcastSetupOnMcpsIndication+0x69c>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx Freq     : %u\r\n", McSessionData[id].RxParams.Params.ClassB.Frequency );
 800b0a6:	4c13      	ldr	r4, [pc, #76]	; (800b0f4 <LmhpRemoteMcastSetupOnMcpsIndication+0x824>)
 800b0a8:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800b0ac:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800b0b0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	4b19      	ldr	r3, [pc, #100]	; (800b11c <LmhpRemoteMcastSetupOnMcpsIndication+0x84c>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	2002      	movs	r0, #2
 800b0bc:	f008 ffbc 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                MW_LOG( TS_OFF, VLEVEL_M, "Rx DR       : DR_%d\r\n", McSessionData[id].RxParams.Params.ClassB.Datarate );
 800b0c0:	f996 3034 	ldrsb.w	r3, [r6, #52]	; 0x34
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	4b16      	ldr	r3, [pc, #88]	; (800b120 <LmhpRemoteMcastSetupOnMcpsIndication+0x850>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	2002      	movs	r0, #2
 800b0ce:	f008 ffb3 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                MW_LOG( TS_OFF, VLEVEL_M, "Periodicity : %u\r\n", McSessionData[id].RxParams.Params.ClassB.Periodicity );
 800b0d2:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	4b13      	ldr	r3, [pc, #76]	; (800b124 <LmhpRemoteMcastSetupOnMcpsIndication+0x854>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	4611      	mov	r1, r2
 800b0dc:	2002      	movs	r0, #2
 800b0de:	f008 ffab 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
 800b0e2:	e743      	b.n	800af6c <LmhpRemoteMcastSetupOnMcpsIndication+0x69c>
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20000d4c 	.word	0x20000d4c
 800b0ec:	08019a54 	.word	0x08019a54
 800b0f0:	20000204 	.word	0x20000204
 800b0f4:	20000d14 	.word	0x20000d14
 800b0f8:	08019a70 	.word	0x08019a70
 800b0fc:	08019a84 	.word	0x08019a84
 800b100:	08019a9c 	.word	0x08019a9c
 800b104:	08019ab0 	.word	0x08019ab0
 800b108:	0801985c 	.word	0x0801985c
 800b10c:	08019ab8 	.word	0x08019ab8
 800b110:	08019acc 	.word	0x08019acc
 800b114:	08019ae0 	.word	0x08019ae0
 800b118:	08019af4 	.word	0x08019af4
 800b11c:	08019b0c 	.word	0x08019b0c
 800b120:	08019b20 	.word	0x08019b20
 800b124:	08019b38 	.word	0x08019b38

0800b128 <LmhpRemoteMcastSetupProcess>:
{
 800b128:	b510      	push	{r4, lr}
 800b12a:	b082      	sub	sp, #8
    DeviceClass_t deviceClass = CLASS_A;
 800b12c:	2300      	movs	r3, #0
 800b12e:	f88d 3007 	strb.w	r3, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b132:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b136:	b672      	cpsid	i
    state = LmhpRemoteMcastSetupState.SessionState;
 800b138:	4a4b      	ldr	r2, [pc, #300]	; (800b268 <LmhpRemoteMcastSetupProcess+0x140>)
 800b13a:	7893      	ldrb	r3, [r2, #2]
    id = LmhpRemoteMcastSetupState.ID;
 800b13c:	78d4      	ldrb	r4, [r2, #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b13e:	f381 8810 	msr	PRIMASK, r1
    switch( state )
 800b142:	2b01      	cmp	r3, #1
 800b144:	d003      	beq.n	800b14e <LmhpRemoteMcastSetupProcess+0x26>
 800b146:	2b02      	cmp	r3, #2
 800b148:	d070      	beq.n	800b22c <LmhpRemoteMcastSetupProcess+0x104>
}
 800b14a:	b002      	add	sp, #8
 800b14c:	bd10      	pop	{r4, pc}
            LmHandlerGetCurrentClass( &deviceClass );
 800b14e:	f10d 0007 	add.w	r0, sp, #7
 800b152:	f7fd ff4f 	bl	8008ff4 <LmHandlerGetCurrentClass>
            if( ( ( McSessionData[id].RxParams.Class == CLASS_B ) && ( deviceClass == CLASS_C ) ) ||
 800b156:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800b15a:	4b44      	ldr	r3, [pc, #272]	; (800b26c <LmhpRemoteMcastSetupProcess+0x144>)
 800b15c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b160:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
 800b164:	2801      	cmp	r0, #1
 800b166:	d02e      	beq.n	800b1c6 <LmhpRemoteMcastSetupProcess+0x9e>
 800b168:	2802      	cmp	r0, #2
 800b16a:	d103      	bne.n	800b174 <LmhpRemoteMcastSetupProcess+0x4c>
                ( ( McSessionData[id].RxParams.Class == CLASS_C ) && ( deviceClass == CLASS_B ) ) )
 800b16c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d02c      	beq.n	800b1ce <LmhpRemoteMcastSetupProcess+0xa6>
                if( LmHandlerRequestClass( McSessionData[id].RxParams.Class ) == LORAMAC_HANDLER_SUCCESS )
 800b174:	f7fd fee4 	bl	8008f40 <LmHandlerRequestClass>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d13d      	bne.n	800b1f8 <LmhpRemoteMcastSetupProcess+0xd0>
                    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_IDLE;
 800b17c:	4b3a      	ldr	r3, [pc, #232]	; (800b268 <LmhpRemoteMcastSetupProcess+0x140>)
 800b17e:	2200      	movs	r2, #0
 800b180:	709a      	strb	r2, [r3, #2]
                    if( McSessionData[id].RxParams.Class == CLASS_B )
 800b182:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800b186:	4b39      	ldr	r3, [pc, #228]	; (800b26c <LmhpRemoteMcastSetupProcess+0x144>)
 800b188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b18c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b190:	2b01      	cmp	r3, #1
 800b192:	d020      	beq.n	800b1d6 <LmhpRemoteMcastSetupProcess+0xae>
                        TimerSetValue( &SessionStopTimer[id], ( 1 << McSessionData[id].SessionTimeout ) * 1000 );
 800b194:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800b198:	4b34      	ldr	r3, [pc, #208]	; (800b26c <LmhpRemoteMcastSetupProcess+0x144>)
 800b19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b19e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1a2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800b1a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b1aa:	4099      	lsls	r1, r3
 800b1ac:	4b30      	ldr	r3, [pc, #192]	; (800b270 <LmhpRemoteMcastSetupProcess+0x148>)
 800b1ae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b1b2:	f009 fa77 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &SessionStopTimer[id] );
 800b1b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800b1ba:	482d      	ldr	r0, [pc, #180]	; (800b270 <LmhpRemoteMcastSetupProcess+0x148>)
 800b1bc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800b1c0:	f009 fa2a 	bl	8014618 <UTIL_TIMER_Start>
 800b1c4:	e7c1      	b.n	800b14a <LmhpRemoteMcastSetupProcess+0x22>
            if( ( ( McSessionData[id].RxParams.Class == CLASS_B ) && ( deviceClass == CLASS_C ) ) ||
 800b1c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d1cc      	bne.n	800b168 <LmhpRemoteMcastSetupProcess+0x40>
                LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_IDLE;
 800b1ce:	4b26      	ldr	r3, [pc, #152]	; (800b268 <LmhpRemoteMcastSetupProcess+0x140>)
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	709a      	strb	r2, [r3, #2]
 800b1d4:	e7b9      	b.n	800b14a <LmhpRemoteMcastSetupProcess+0x22>
                        TimerSetValue( &SessionStopTimer[id], ( 1 << McSessionData[id].SessionTimeout ) * 1000 * 128 );
 800b1d6:	4b25      	ldr	r3, [pc, #148]	; (800b26c <LmhpRemoteMcastSetupProcess+0x144>)
 800b1d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b1e4:	4099      	lsls	r1, r3
 800b1e6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800b1ea:	01c9      	lsls	r1, r1, #7
 800b1ec:	4b20      	ldr	r3, [pc, #128]	; (800b270 <LmhpRemoteMcastSetupProcess+0x148>)
 800b1ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b1f2:	f009 fa57 	bl	80146a4 <UTIL_TIMER_SetPeriod>
 800b1f6:	e7de      	b.n	800b1b6 <LmhpRemoteMcastSetupProcess+0x8e>
                    TimerSetValue( &SessionStartTimer[id], 1000 );
 800b1f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800b1fc:	4b1d      	ldr	r3, [pc, #116]	; (800b274 <LmhpRemoteMcastSetupProcess+0x14c>)
 800b1fe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b202:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b206:	4620      	mov	r0, r4
 800b208:	f009 fa4c 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &SessionStartTimer[id] );
 800b20c:	4620      	mov	r0, r4
 800b20e:	f009 fa03 	bl	8014618 <UTIL_TIMER_Start>
 800b212:	e79a      	b.n	800b14a <LmhpRemoteMcastSetupProcess+0x22>
                if( McSessionData[id_index].SessionState == SESSION_STARTED )
 800b214:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b218:	4a14      	ldr	r2, [pc, #80]	; (800b26c <LmhpRemoteMcastSetupProcess+0x144>)
 800b21a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b21e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b222:	2a01      	cmp	r2, #1
 800b224:	d010      	beq.n	800b248 <LmhpRemoteMcastSetupProcess+0x120>
            for( uint8_t id_index = 0; id_index < LORAMAC_MAX_MC_CTX; id_index++ )
 800b226:	3301      	adds	r3, #1
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	e000      	b.n	800b22e <LmhpRemoteMcastSetupProcess+0x106>
    switch( state )
 800b22c:	2300      	movs	r3, #0
            for( uint8_t id_index = 0; id_index < LORAMAC_MAX_MC_CTX; id_index++ )
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d0f0      	beq.n	800b214 <LmhpRemoteMcastSetupProcess+0xec>
    bool active_session = false;
 800b232:	2300      	movs	r3, #0
            if( active_session == false )
 800b234:	2b00      	cmp	r3, #0
 800b236:	d188      	bne.n	800b14a <LmhpRemoteMcastSetupProcess+0x22>
                if( LmHandlerRequestClass( CLASS_A ) == LORAMAC_HANDLER_SUCCESS )
 800b238:	2000      	movs	r0, #0
 800b23a:	f7fd fe81 	bl	8008f40 <LmHandlerRequestClass>
 800b23e:	b928      	cbnz	r0, 800b24c <LmhpRemoteMcastSetupProcess+0x124>
                    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_IDLE;
 800b240:	4b09      	ldr	r3, [pc, #36]	; (800b268 <LmhpRemoteMcastSetupProcess+0x140>)
 800b242:	2200      	movs	r2, #0
 800b244:	709a      	strb	r2, [r3, #2]
 800b246:	e780      	b.n	800b14a <LmhpRemoteMcastSetupProcess+0x22>
                    active_session = true;
 800b248:	2301      	movs	r3, #1
 800b24a:	e7f3      	b.n	800b234 <LmhpRemoteMcastSetupProcess+0x10c>
                    TimerSetValue( &SessionStopTimer[id], 1000 );
 800b24c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800b250:	4b07      	ldr	r3, [pc, #28]	; (800b270 <LmhpRemoteMcastSetupProcess+0x148>)
 800b252:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b256:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b25a:	4620      	mov	r0, r4
 800b25c:	f009 fa22 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &SessionStopTimer[id] );
 800b260:	4620      	mov	r0, r4
 800b262:	f009 f9d9 	bl	8014618 <UTIL_TIMER_Start>
}
 800b266:	e770      	b.n	800b14a <LmhpRemoteMcastSetupProcess+0x22>
 800b268:	20000204 	.word	0x20000204
 800b26c:	20000d14 	.word	0x20000d14
 800b270:	20000d64 	.word	0x20000d64
 800b274:	20000d4c 	.word	0x20000d4c

0800b278 <LmhpRemoteMcastSetupInit>:
{
 800b278:	b510      	push	{r4, lr}
 800b27a:	b082      	sub	sp, #8
    if( dataBuffer != NULL )
 800b27c:	b1d9      	cbz	r1, 800b2b6 <LmhpRemoteMcastSetupInit+0x3e>
        LmhpRemoteMcastSetupState.DataBuffer = dataBuffer;
 800b27e:	4b14      	ldr	r3, [pc, #80]	; (800b2d0 <LmhpRemoteMcastSetupInit+0x58>)
 800b280:	6099      	str	r1, [r3, #8]
        LmhpRemoteMcastSetupState.DataBufferMaxSize = dataBufferMaxSize;
 800b282:	711a      	strb	r2, [r3, #4]
        LmhpRemoteMcastSetupState.Initialized = true;
 800b284:	2201      	movs	r2, #1
 800b286:	701a      	strb	r2, [r3, #0]
        TimerInit( &SessionStartTimer[0], OnSessionStartTimer0 );
 800b288:	2400      	movs	r4, #0
 800b28a:	9400      	str	r4, [sp, #0]
 800b28c:	4b11      	ldr	r3, [pc, #68]	; (800b2d4 <LmhpRemoteMcastSetupInit+0x5c>)
 800b28e:	4622      	mov	r2, r4
 800b290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b294:	4810      	ldr	r0, [pc, #64]	; (800b2d8 <LmhpRemoteMcastSetupInit+0x60>)
 800b296:	f009 f907 	bl	80144a8 <UTIL_TIMER_Create>
        TimerInit( &SessionStopTimer[0], OnSessionStopTimer0 );
 800b29a:	9400      	str	r4, [sp, #0]
 800b29c:	4b0f      	ldr	r3, [pc, #60]	; (800b2dc <LmhpRemoteMcastSetupInit+0x64>)
 800b29e:	4622      	mov	r2, r4
 800b2a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b2a4:	480e      	ldr	r0, [pc, #56]	; (800b2e0 <LmhpRemoteMcastSetupInit+0x68>)
 800b2a6:	f009 f8ff 	bl	80144a8 <UTIL_TIMER_Create>
    LmhpRemoteMcastSetupState.IsTxPending = false;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	4a08      	ldr	r2, [pc, #32]	; (800b2d0 <LmhpRemoteMcastSetupInit+0x58>)
 800b2ae:	7053      	strb	r3, [r2, #1]
    for( uint8_t id = 0; id < LORAMAC_MAX_MC_CTX; id++ )
 800b2b0:	b12b      	cbz	r3, 800b2be <LmhpRemoteMcastSetupInit+0x46>
}
 800b2b2:	b002      	add	sp, #8
 800b2b4:	bd10      	pop	{r4, pc}
        LmhpRemoteMcastSetupState.Initialized = false;
 800b2b6:	4b06      	ldr	r3, [pc, #24]	; (800b2d0 <LmhpRemoteMcastSetupInit+0x58>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	e7f5      	b.n	800b2aa <LmhpRemoteMcastSetupInit+0x32>
        McSessionData[id].McGroupData.McGroupEnabled = false;
 800b2be:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800b2c2:	00d2      	lsls	r2, r2, #3
 800b2c4:	4907      	ldr	r1, [pc, #28]	; (800b2e4 <LmhpRemoteMcastSetupInit+0x6c>)
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	5488      	strb	r0, [r1, r2]
    for( uint8_t id = 0; id < LORAMAC_MAX_MC_CTX; id++ )
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	e7ef      	b.n	800b2b0 <LmhpRemoteMcastSetupInit+0x38>
 800b2d0:	20000204 	.word	0x20000204
 800b2d4:	0800b31d 	.word	0x0800b31d
 800b2d8:	20000d4c 	.word	0x20000d4c
 800b2dc:	0800b2e9 	.word	0x0800b2e9
 800b2e0:	20000d64 	.word	0x20000d64
 800b2e4:	20000d14 	.word	0x20000d14

0800b2e8 <OnSessionStopTimer0>:
        LmhpRemoteMcastSetupPackage.OnPackageProcessEvent();
    }
}

static void OnSessionStopTimer0( void *context )
{
 800b2e8:	b508      	push	{r3, lr}
    TimerStop( &SessionStopTimer[0] );
 800b2ea:	4808      	ldr	r0, [pc, #32]	; (800b30c <OnSessionStopTimer0+0x24>)
 800b2ec:	f009 f93a 	bl	8014564 <UTIL_TIMER_Stop>

    McSessionData[0].SessionState = SESSION_STOPPED;
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4b07      	ldr	r3, [pc, #28]	; (800b310 <OnSessionStopTimer0+0x28>)
 800b2f4:	f883 2020 	strb.w	r2, [r3, #32]
    LmhpRemoteMcastSetupState.ID = 0;
 800b2f8:	4b06      	ldr	r3, [pc, #24]	; (800b314 <OnSessionStopTimer0+0x2c>)
 800b2fa:	70da      	strb	r2, [r3, #3]
    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_STOP;
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	709a      	strb	r2, [r3, #2]
    if( LmhpRemoteMcastSetupPackage.OnPackageProcessEvent != NULL )
 800b300:	4b05      	ldr	r3, [pc, #20]	; (800b318 <OnSessionStopTimer0+0x30>)
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	b103      	cbz	r3, 800b308 <OnSessionStopTimer0+0x20>
    {
        LmhpRemoteMcastSetupPackage.OnPackageProcessEvent();
 800b306:	4798      	blx	r3
    }
}
 800b308:	bd08      	pop	{r3, pc}
 800b30a:	bf00      	nop
 800b30c:	20000d64 	.word	0x20000d64
 800b310:	20000d14 	.word	0x20000d14
 800b314:	20000204 	.word	0x20000204
 800b318:	200001cc 	.word	0x200001cc

0800b31c <OnSessionStartTimer0>:
{
 800b31c:	b508      	push	{r3, lr}
    TimerStop( &SessionStartTimer[0] );
 800b31e:	4808      	ldr	r0, [pc, #32]	; (800b340 <OnSessionStartTimer0+0x24>)
 800b320:	f009 f920 	bl	8014564 <UTIL_TIMER_Stop>
    McSessionData[0].SessionState = SESSION_STARTED;
 800b324:	2201      	movs	r2, #1
 800b326:	4b07      	ldr	r3, [pc, #28]	; (800b344 <OnSessionStartTimer0+0x28>)
 800b328:	f883 2020 	strb.w	r2, [r3, #32]
    LmhpRemoteMcastSetupState.ID = 0;
 800b32c:	4b06      	ldr	r3, [pc, #24]	; (800b348 <OnSessionStartTimer0+0x2c>)
 800b32e:	2100      	movs	r1, #0
 800b330:	70d9      	strb	r1, [r3, #3]
    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_START;
 800b332:	709a      	strb	r2, [r3, #2]
    if( LmhpRemoteMcastSetupPackage.OnPackageProcessEvent != NULL )
 800b334:	4b05      	ldr	r3, [pc, #20]	; (800b34c <OnSessionStartTimer0+0x30>)
 800b336:	695b      	ldr	r3, [r3, #20]
 800b338:	b103      	cbz	r3, 800b33c <OnSessionStartTimer0+0x20>
        LmhpRemoteMcastSetupPackage.OnPackageProcessEvent();
 800b33a:	4798      	blx	r3
}
 800b33c:	bd08      	pop	{r3, pc}
 800b33e:	bf00      	nop
 800b340:	20000d4c 	.word	0x20000d4c
 800b344:	20000d14 	.word	0x20000d14
 800b348:	20000204 	.word	0x20000204
 800b34c:	200001cc 	.word	0x200001cc

0800b350 <LmhpRemoteMcastSetupPackageFactory>:
}
 800b350:	4800      	ldr	r0, [pc, #0]	; (800b354 <LmhpRemoteMcastSetupPackageFactory+0x4>)
 800b352:	4770      	bx	lr
 800b354:	200001cc 	.word	0x200001cc

0800b358 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b358:	4b07      	ldr	r3, [pc, #28]	; (800b378 <UpdateRxSlotIdleState+0x20>)
 800b35a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d004      	beq.n	800b36c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800b362:	4b06      	ldr	r3, [pc, #24]	; (800b37c <UpdateRxSlotIdleState+0x24>)
 800b364:	2206      	movs	r2, #6
 800b366:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 800b36a:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b36c:	4b03      	ldr	r3, [pc, #12]	; (800b37c <UpdateRxSlotIdleState+0x24>)
 800b36e:	2202      	movs	r2, #2
 800b370:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	20008000 	.word	0x20008000
 800b37c:	20000d80 	.word	0x20000d80

0800b380 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800b380:	4b01      	ldr	r3, [pc, #4]	; (800b388 <LoRaMacEnableRequests+0x8>)
 800b382:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 800b386:	4770      	bx	lr
 800b388:	20000d80 	.word	0x20000d80

0800b38c <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800b38c:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b38e:	4b15      	ldr	r3, [pc, #84]	; (800b3e4 <LoRaMacHandleIndicationEvents+0x58>)
 800b390:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b394:	f013 0f08 	tst.w	r3, #8
 800b398:	d00e      	beq.n	800b3b8 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b39a:	4812      	ldr	r0, [pc, #72]	; (800b3e4 <LoRaMacHandleIndicationEvents+0x58>)
 800b39c:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800b3a0:	f36f 03c3 	bfc	r3, #3, #1
 800b3a4:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800b3a8:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800b3b2:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 800b3b6:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b3b8:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <LoRaMacHandleIndicationEvents+0x58>)
 800b3ba:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b3be:	f013 0f02 	tst.w	r3, #2
 800b3c2:	d00e      	beq.n	800b3e2 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b3c4:	4807      	ldr	r0, [pc, #28]	; (800b3e4 <LoRaMacHandleIndicationEvents+0x58>)
 800b3c6:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800b3ca:	f36f 0341 	bfc	r3, #1, #1
 800b3ce:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800b3d2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800b3dc:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 800b3e0:	4798      	blx	r3
    }
}
 800b3e2:	bd08      	pop	{r3, pc}
 800b3e4:	20000d80 	.word	0x20000d80

0800b3e8 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800b3e8:	b110      	cbz	r0, 800b3f0 <CheckForMinimumAbpDatarate+0x8>
 800b3ea:	2901      	cmp	r1, #1
 800b3ec:	d001      	beq.n	800b3f2 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800b3ee:	2000      	movs	r0, #0
}
 800b3f0:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800b3f2:	2a00      	cmp	r2, #0
 800b3f4:	d0fc      	beq.n	800b3f0 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	4770      	bx	lr
	...

0800b3fc <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b3fc:	4b07      	ldr	r3, [pc, #28]	; (800b41c <LoRaMacCheckForRxAbort+0x20>)
 800b3fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b402:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b406:	d008      	beq.n	800b41a <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b408:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b40c:	4a03      	ldr	r2, [pc, #12]	; (800b41c <LoRaMacCheckForRxAbort+0x20>)
 800b40e:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b412:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800b416:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800b41a:	4770      	bx	lr
 800b41c:	20000d80 	.word	0x20000d80

0800b420 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800b420:	4b06      	ldr	r3, [pc, #24]	; (800b43c <CalculateBackOff+0x1c>)
 800b422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b424:	b94b      	cbnz	r3, 800b43a <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b426:	4a05      	ldr	r2, [pc, #20]	; (800b43c <CalculateBackOff+0x1c>)
 800b428:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 800b42c:	4904      	ldr	r1, [pc, #16]	; (800b440 <CalculateBackOff+0x20>)
 800b42e:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 800b432:	3b01      	subs	r3, #1
 800b434:	fb01 f303 	mul.w	r3, r1, r3
 800b438:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800b43a:	4770      	bx	lr
 800b43c:	20008000 	.word	0x20008000
 800b440:	20000d80 	.word	0x20000d80

0800b444 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800b444:	b508      	push	{r3, lr}
 800b446:	4684      	mov	ip, r0
 800b448:	4608      	mov	r0, r1
 800b44a:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b44c:	4b06      	ldr	r3, [pc, #24]	; (800b468 <SetTxContinuousWave+0x24>)
 800b44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b450:	4662      	mov	r2, ip
 800b452:	b249      	sxtb	r1, r1
 800b454:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b456:	4a05      	ldr	r2, [pc, #20]	; (800b46c <SetTxContinuousWave+0x28>)
 800b458:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800b45c:	f043 0302 	orr.w	r3, r3, #2
 800b460:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800b464:	2000      	movs	r0, #0
 800b466:	bd08      	pop	{r3, pc}
 800b468:	0801a22c 	.word	0x0801a22c
 800b46c:	20000d80 	.word	0x20000d80

0800b470 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800b470:	4602      	mov	r2, r0
 800b472:	b1f8      	cbz	r0, 800b4b4 <DetermineFrameType+0x44>
 800b474:	b301      	cbz	r1, 800b4b8 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800b476:	7b03      	ldrb	r3, [r0, #12]
 800b478:	f013 030f 	ands.w	r3, r3, #15
 800b47c:	d005      	beq.n	800b48a <DetermineFrameType+0x1a>
 800b47e:	f890 0020 	ldrb.w	r0, [r0, #32]
 800b482:	b110      	cbz	r0, 800b48a <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800b484:	2000      	movs	r0, #0
 800b486:	7008      	strb	r0, [r1, #0]
 800b488:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800b48a:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800b48e:	b910      	cbnz	r0, 800b496 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800b490:	2301      	movs	r3, #1
 800b492:	700b      	strb	r3, [r1, #0]
 800b494:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800b496:	b92b      	cbnz	r3, 800b4a4 <DetermineFrameType+0x34>
 800b498:	f892 0020 	ldrb.w	r0, [r2, #32]
 800b49c:	b910      	cbnz	r0, 800b4a4 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800b49e:	2302      	movs	r3, #2
 800b4a0:	700b      	strb	r3, [r1, #0]
 800b4a2:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800b4a4:	b953      	cbnz	r3, 800b4bc <DetermineFrameType+0x4c>
 800b4a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b4aa:	b14a      	cbz	r2, 800b4c0 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800b4ac:	2203      	movs	r2, #3
 800b4ae:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800b4b0:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800b4b2:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b4b4:	2003      	movs	r0, #3
 800b4b6:	4770      	bx	lr
 800b4b8:	2003      	movs	r0, #3
 800b4ba:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800b4bc:	2018      	movs	r0, #24
 800b4be:	4770      	bx	lr
 800b4c0:	2018      	movs	r0, #24
}
 800b4c2:	4770      	bx	lr

0800b4c4 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800b4c4:	4288      	cmp	r0, r1
 800b4c6:	d201      	bcs.n	800b4cc <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	4770      	bx	lr
        return true;
 800b4cc:	2001      	movs	r0, #1
}
 800b4ce:	4770      	bx	lr

0800b4d0 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800b4d0:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800b4d2:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <CheckRetransUnconfirmedUplink+0x30>)
 800b4d4:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <CheckRetransUnconfirmedUplink+0x34>)
 800b4da:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800b4de:	f7ff fff1 	bl	800b4c4 <CheckRetrans>
 800b4e2:	b950      	cbnz	r0, 800b4fa <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b4e4:	4b07      	ldr	r3, [pc, #28]	; (800b504 <CheckRetransUnconfirmedUplink+0x34>)
 800b4e6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b4ea:	f013 0f02 	tst.w	r3, #2
 800b4ee:	d004      	beq.n	800b4fa <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b4f0:	4b04      	ldr	r3, [pc, #16]	; (800b504 <CheckRetransUnconfirmedUplink+0x34>)
 800b4f2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d900      	bls.n	800b4fc <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800b4fa:	bd08      	pop	{r3, pc}
            return true;
 800b4fc:	2001      	movs	r0, #1
 800b4fe:	e7fc      	b.n	800b4fa <CheckRetransUnconfirmedUplink+0x2a>
 800b500:	20008000 	.word	0x20008000
 800b504:	20000d80 	.word	0x20000d80

0800b508 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800b508:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800b50a:	4b09      	ldr	r3, [pc, #36]	; (800b530 <CheckRetransConfirmedUplink+0x28>)
 800b50c:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800b510:	4b08      	ldr	r3, [pc, #32]	; (800b534 <CheckRetransConfirmedUplink+0x2c>)
 800b512:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800b516:	f7ff ffd5 	bl	800b4c4 <CheckRetrans>
 800b51a:	b940      	cbnz	r0, 800b52e <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <CheckRetransConfirmedUplink+0x2c>)
 800b51e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b522:	f013 0f02 	tst.w	r3, #2
 800b526:	d002      	beq.n	800b52e <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800b528:	4b02      	ldr	r3, [pc, #8]	; (800b534 <CheckRetransConfirmedUplink+0x2c>)
 800b52a:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 800b52e:	bd08      	pop	{r3, pc}
 800b530:	20008000 	.word	0x20008000
 800b534:	20000d80 	.word	0x20000d80

0800b538 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800b538:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b53c:	d000      	beq.n	800b540 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800b53e:	3001      	adds	r0, #1
    }
    return counter;
}
 800b540:	4770      	bx	lr
	...

0800b544 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800b544:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800b546:	4b12      	ldr	r3, [pc, #72]	; (800b590 <StopRetransmission+0x4c>)
 800b548:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b54c:	f013 0f02 	tst.w	r3, #2
 800b550:	d004      	beq.n	800b55c <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800b552:	4b0f      	ldr	r3, [pc, #60]	; (800b590 <StopRetransmission+0x4c>)
 800b554:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d908      	bls.n	800b56e <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800b55c:	4b0d      	ldr	r3, [pc, #52]	; (800b594 <StopRetransmission+0x50>)
 800b55e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800b562:	b123      	cbz	r3, 800b56e <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800b564:	4c0b      	ldr	r4, [pc, #44]	; (800b594 <StopRetransmission+0x50>)
 800b566:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b568:	f7ff ffe6 	bl	800b538 <IncreaseAdrAckCounter>
 800b56c:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800b56e:	4b08      	ldr	r3, [pc, #32]	; (800b590 <StopRetransmission+0x4c>)
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 800b576:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800b57a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b57e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b582:	f022 0202 	bic.w	r2, r2, #2
 800b586:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800b58a:	2001      	movs	r0, #1
 800b58c:	bd10      	pop	{r4, pc}
 800b58e:	bf00      	nop
 800b590:	20000d80 	.word	0x20000d80
 800b594:	20008000 	.word	0x20008000

0800b598 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800b598:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b59a:	4b04      	ldr	r3, [pc, #16]	; (800b5ac <OnMacProcessNotify+0x14>)
 800b59c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b5a0:	b113      	cbz	r3, 800b5a8 <OnMacProcessNotify+0x10>
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	b103      	cbz	r3, 800b5a8 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b5a6:	4798      	blx	r3
    }
}
 800b5a8:	bd08      	pop	{r3, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20000d80 	.word	0x20000d80

0800b5b0 <OnRadioRxError>:
{
 800b5b0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800b5b2:	4a04      	ldr	r2, [pc, #16]	; (800b5c4 <OnRadioRxError+0x14>)
 800b5b4:	7813      	ldrb	r3, [r2, #0]
 800b5b6:	f043 0304 	orr.w	r3, r3, #4
 800b5ba:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b5bc:	f7ff ffec 	bl	800b598 <OnMacProcessNotify>
}
 800b5c0:	bd08      	pop	{r3, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20000d7c 	.word	0x20000d7c

0800b5c8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800b5c8:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800b5ca:	4b04      	ldr	r3, [pc, #16]	; (800b5dc <CallNvmDataChangeCallback+0x14>)
 800b5cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b5d0:	b113      	cbz	r3, 800b5d8 <CallNvmDataChangeCallback+0x10>
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	b103      	cbz	r3, 800b5d8 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800b5d6:	4798      	blx	r3
    }
}
 800b5d8:	bd08      	pop	{r3, pc}
 800b5da:	bf00      	nop
 800b5dc:	20000d80 	.word	0x20000d80

0800b5e0 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800b5e0:	4b04      	ldr	r3, [pc, #16]	; (800b5f4 <IsRequestPending+0x14>)
 800b5e2:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 800b5e6:	f010 0005 	ands.w	r0, r0, #5
 800b5ea:	d100      	bne.n	800b5ee <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800b5ec:	4770      	bx	lr
        return 1;
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	e7fc      	b.n	800b5ec <IsRequestPending+0xc>
 800b5f2:	bf00      	nop
 800b5f4:	20000d80 	.word	0x20000d80

0800b5f8 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800b5f8:	b500      	push	{lr}
 800b5fa:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b5fc:	4b0d      	ldr	r3, [pc, #52]	; (800b634 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800b5fe:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800b602:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800b606:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800b60a:	220d      	movs	r2, #13
 800b60c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800b610:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b614:	b113      	cbz	r3, 800b61c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800b616:	230e      	movs	r3, #14
 800b618:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b61c:	a902      	add	r1, sp, #8
 800b61e:	4b05      	ldr	r3, [pc, #20]	; (800b634 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800b620:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b624:	f004 fbde 	bl	800fde4 <RegionGetPhyParam>
 800b628:	9001      	str	r0, [sp, #4]
}
 800b62a:	b2c0      	uxtb	r0, r0
 800b62c:	b005      	add	sp, #20
 800b62e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b632:	bf00      	nop
 800b634:	20008000 	.word	0x20008000

0800b638 <ValidatePayloadLength>:
{
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4605      	mov	r5, r0
 800b63c:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b63e:	4608      	mov	r0, r1
 800b640:	f7ff ffda 	bl	800b5f8 <GetMaxAppPayloadWithoutFOptsLength>
 800b644:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800b646:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800b648:	4293      	cmp	r3, r2
 800b64a:	d303      	bcc.n	800b654 <ValidatePayloadLength+0x1c>
 800b64c:	2aff      	cmp	r2, #255	; 0xff
 800b64e:	d903      	bls.n	800b658 <ValidatePayloadLength+0x20>
    return false;
 800b650:	2000      	movs	r0, #0
 800b652:	e000      	b.n	800b656 <ValidatePayloadLength+0x1e>
 800b654:	2000      	movs	r0, #0
}
 800b656:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800b658:	2001      	movs	r0, #1
 800b65a:	e7fc      	b.n	800b656 <ValidatePayloadLength+0x1e>

0800b65c <ProcessRadioTxDone>:
{
 800b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b65e:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b660:	4b3b      	ldr	r3, [pc, #236]	; (800b750 <ProcessRadioTxDone+0xf4>)
 800b662:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b666:	2b02      	cmp	r3, #2
 800b668:	d002      	beq.n	800b670 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800b66a:	4b3a      	ldr	r3, [pc, #232]	; (800b754 <ProcessRadioTxDone+0xf8>)
 800b66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b670:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b674:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800b676:	f008 ff35 	bl	80144e4 <UTIL_TIMER_GetCurrentTime>
 800b67a:	4b37      	ldr	r3, [pc, #220]	; (800b758 <ProcessRadioTxDone+0xfc>)
 800b67c:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800b67e:	4c37      	ldr	r4, [pc, #220]	; (800b75c <ProcessRadioTxDone+0x100>)
 800b680:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800b684:	1a2d      	subs	r5, r5, r0
 800b686:	f504 7660 	add.w	r6, r4, #896	; 0x380
 800b68a:	4429      	add	r1, r5
 800b68c:	4630      	mov	r0, r6
 800b68e:	f009 f809 	bl	80146a4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800b692:	4630      	mov	r0, r6
 800b694:	f008 ffc0 	bl	8014618 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800b698:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800b69c:	f504 7666 	add.w	r6, r4, #920	; 0x398
 800b6a0:	4429      	add	r1, r5
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f008 fffe 	bl	80146a4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f008 ffb5 	bl	8014618 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6ae:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 800b6b2:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d134      	bne.n	800b724 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b6ba:	4b28      	ldr	r3, [pc, #160]	; (800b75c <ProcessRadioTxDone+0x100>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800b6c2:	4b25      	ldr	r3, [pc, #148]	; (800b758 <ProcessRadioTxDone+0xfc>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4c22      	ldr	r4, [pc, #136]	; (800b750 <ProcessRadioTxDone+0xf4>)
 800b6c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800b6ca:	4f24      	ldr	r7, [pc, #144]	; (800b75c <ProcessRadioTxDone+0x100>)
 800b6cc:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 800b6d0:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800b6d4:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b6d6:	ae0c      	add	r6, sp, #48	; 0x30
 800b6d8:	4630      	mov	r0, r6
 800b6da:	f008 fe77 	bl	80143cc <SysTimeGetMcuTime>
 800b6de:	ad02      	add	r5, sp, #8
 800b6e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800b6ea:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f008 fe09 	bl	8014306 <SysTimeSub>
 800b6f4:	ab07      	add	r3, sp, #28
 800b6f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b6fa:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800b6fe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800b702:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800b704:	2301      	movs	r3, #1
 800b706:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b70a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800b70e:	b90b      	cbnz	r3, 800b714 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 800b710:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800b714:	a904      	add	r1, sp, #16
 800b716:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <ProcessRadioTxDone+0xf4>)
 800b718:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b71c:	f004 fb73 	bl	800fe06 <RegionSetBandTxDone>
}
 800b720:	b00f      	add	sp, #60	; 0x3c
 800b722:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800b724:	2315      	movs	r3, #21
 800b726:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b72a:	a90a      	add	r1, sp, #40	; 0x28
 800b72c:	4b08      	ldr	r3, [pc, #32]	; (800b750 <ProcessRadioTxDone+0xf4>)
 800b72e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b732:	f004 fb57 	bl	800fde4 <RegionGetPhyParam>
 800b736:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800b738:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800b73c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b740:	4401      	add	r1, r0
 800b742:	4620      	mov	r0, r4
 800b744:	f008 ffae 	bl	80146a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800b748:	4620      	mov	r0, r4
 800b74a:	f008 ff65 	bl	8014618 <UTIL_TIMER_Start>
 800b74e:	e7b8      	b.n	800b6c2 <ProcessRadioTxDone+0x66>
 800b750:	20008000 	.word	0x20008000
 800b754:	0801a22c 	.word	0x0801a22c
 800b758:	2000133c 	.word	0x2000133c
 800b75c:	20000d80 	.word	0x20000d80

0800b760 <OnRetransmitTimeoutTimerEvent>:
{
 800b760:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800b762:	4c07      	ldr	r4, [pc, #28]	; (800b780 <OnRetransmitTimeoutTimerEvent+0x20>)
 800b764:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800b768:	f008 fefc 	bl	8014564 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800b76c:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800b770:	b113      	cbz	r3, 800b778 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800b772:	2201      	movs	r2, #1
 800b774:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 800b778:	f7ff ff0e 	bl	800b598 <OnMacProcessNotify>
}
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	bf00      	nop
 800b780:	20000d80 	.word	0x20000d80

0800b784 <PrepareRxDoneAbort>:
{
 800b784:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800b786:	4b0e      	ldr	r3, [pc, #56]	; (800b7c0 <PrepareRxDoneAbort+0x3c>)
 800b788:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b78c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b790:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800b794:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800b798:	b973      	cbnz	r3, 800b7b8 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800b79a:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <PrepareRxDoneAbort+0x3c>)
 800b79c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b7a0:	f042 0202 	orr.w	r2, r2, #2
 800b7a4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b7a8:	b2d2      	uxtb	r2, r2
 800b7aa:	f042 0210 	orr.w	r2, r2, #16
 800b7ae:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800b7b2:	f7ff fdd1 	bl	800b358 <UpdateRxSlotIdleState>
}
 800b7b6:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	f7ff ffd1 	bl	800b760 <OnRetransmitTimeoutTimerEvent>
 800b7be:	e7ec      	b.n	800b79a <PrepareRxDoneAbort+0x16>
 800b7c0:	20000d80 	.word	0x20000d80

0800b7c4 <LoRaMacCheckForBeaconAcquisition>:
{
 800b7c4:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b7c6:	200b      	movs	r0, #11
 800b7c8:	f003 fcfa 	bl	800f1c0 <LoRaMacConfirmQueueIsCmdActive>
 800b7cc:	b188      	cbz	r0, 800b7f2 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b7ce:	4b0b      	ldr	r3, [pc, #44]	; (800b7fc <LoRaMacCheckForBeaconAcquisition+0x38>)
 800b7d0:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b7d4:	f010 0f01 	tst.w	r0, #1
 800b7d8:	d10d      	bne.n	800b7f6 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b7da:	f010 0004 	ands.w	r0, r0, #4
 800b7de:	d009      	beq.n	800b7f4 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b7e6:	f023 0302 	bic.w	r3, r3, #2
 800b7ea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	e000      	b.n	800b7f4 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800b7f2:	2000      	movs	r0, #0
}
 800b7f4:	bd08      	pop	{r3, pc}
    return 0x00;
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	e7fc      	b.n	800b7f4 <LoRaMacCheckForBeaconAcquisition+0x30>
 800b7fa:	bf00      	nop
 800b7fc:	20000d80 	.word	0x20000d80

0800b800 <GetFCntDown>:
{
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	9c04      	ldr	r4, [sp, #16]
 800b804:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800b806:	b1f2      	cbz	r2, 800b846 <GetFCntDown+0x46>
 800b808:	4694      	mov	ip, r2
 800b80a:	b1f4      	cbz	r4, 800b84a <GetFCntDown+0x4a>
 800b80c:	b1fd      	cbz	r5, 800b84e <GetFCntDown+0x4e>
    switch( addrID )
 800b80e:	b188      	cbz	r0, 800b834 <GetFCntDown+0x34>
 800b810:	2801      	cmp	r0, #1
 800b812:	d11e      	bne.n	800b852 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800b814:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d002      	beq.n	800b822 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800b81c:	2303      	movs	r3, #3
 800b81e:	7023      	strb	r3, [r4, #0]
 800b820:	e00a      	b.n	800b838 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800b822:	b121      	cbz	r1, 800b82e <GetFCntDown+0x2e>
 800b824:	2903      	cmp	r1, #3
 800b826:	d002      	beq.n	800b82e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800b828:	2301      	movs	r3, #1
 800b82a:	7023      	strb	r3, [r4, #0]
 800b82c:	e004      	b.n	800b838 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800b82e:	2302      	movs	r3, #2
 800b830:	7023      	strb	r3, [r4, #0]
 800b832:	e001      	b.n	800b838 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800b834:	2304      	movs	r3, #4
 800b836:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800b838:	462a      	mov	r2, r5
 800b83a:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800b83e:	7820      	ldrb	r0, [r4, #0]
 800b840:	f003 ff2e 	bl	800f6a0 <LoRaMacCryptoGetFCntDown>
}
 800b844:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b846:	2009      	movs	r0, #9
 800b848:	e7fc      	b.n	800b844 <GetFCntDown+0x44>
 800b84a:	2009      	movs	r0, #9
 800b84c:	e7fa      	b.n	800b844 <GetFCntDown+0x44>
 800b84e:	2009      	movs	r0, #9
 800b850:	e7f8      	b.n	800b844 <GetFCntDown+0x44>
    switch( addrID )
 800b852:	2005      	movs	r0, #5
 800b854:	e7f6      	b.n	800b844 <GetFCntDown+0x44>

0800b856 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800b856:	2801      	cmp	r0, #1
 800b858:	d900      	bls.n	800b85c <RemoveMacCommands+0x6>
 800b85a:	4770      	bx	lr
{
 800b85c:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800b85e:	2a01      	cmp	r2, #1
 800b860:	d105      	bne.n	800b86e <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800b862:	f011 0f20 	tst.w	r1, #32
 800b866:	d004      	beq.n	800b872 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800b868:	f003 fb56 	bl	800ef18 <LoRaMacCommandsRemoveStickyAnsCmds>
 800b86c:	e001      	b.n	800b872 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800b86e:	f003 fb53 	bl	800ef18 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800b872:	bd08      	pop	{r3, pc}

0800b874 <ProcessMacCommands>:
{
 800b874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b878:	b08f      	sub	sp, #60	; 0x3c
 800b87a:	4698      	mov	r8, r3
    uint8_t status = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b882:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800b886:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	f200 82da 	bhi.w	800be44 <ProcessMacCommands+0x5d0>
 800b890:	4605      	mov	r5, r0
 800b892:	460c      	mov	r4, r1
 800b894:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800b896:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800b89a:	42bc      	cmp	r4, r7
 800b89c:	f080 82d2 	bcs.w	800be44 <ProcessMacCommands+0x5d0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800b8a0:	5d28      	ldrb	r0, [r5, r4]
 800b8a2:	f003 fb91 	bl	800efc8 <LoRaMacCommandsGetCmdSize>
 800b8a6:	4420      	add	r0, r4
 800b8a8:	42b8      	cmp	r0, r7
 800b8aa:	f300 82cb 	bgt.w	800be44 <ProcessMacCommands+0x5d0>
        switch( payload[macIndex++] )
 800b8ae:	1c66      	adds	r6, r4, #1
 800b8b0:	b2f6      	uxtb	r6, r6
 800b8b2:	5d2b      	ldrb	r3, [r5, r4]
 800b8b4:	3b02      	subs	r3, #2
 800b8b6:	2b11      	cmp	r3, #17
 800b8b8:	f200 82c4 	bhi.w	800be44 <ProcessMacCommands+0x5d0>
 800b8bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b8c0:	00280012 	.word	0x00280012
 800b8c4:	00c000ad 	.word	0x00c000ad
 800b8c8:	011e0106 	.word	0x011e0106
 800b8cc:	01740157 	.word	0x01740157
 800b8d0:	02c201c0 	.word	0x02c201c0
 800b8d4:	01f002c2 	.word	0x01f002c2
 800b8d8:	02c202c2 	.word	0x02c202c2
 800b8dc:	02690252 	.word	0x02690252
 800b8e0:	02a20288 	.word	0x02a20288
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800b8e4:	2005      	movs	r0, #5
 800b8e6:	f003 fc6b 	bl	800f1c0 <LoRaMacConfirmQueueIsCmdActive>
 800b8ea:	b908      	cbnz	r0, 800b8f0 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800b8ec:	4634      	mov	r4, r6
 800b8ee:	e7d4      	b.n	800b89a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800b8f0:	2105      	movs	r1, #5
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	f003 fc18 	bl	800f128 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800b8f8:	1ca3      	adds	r3, r4, #2
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	5da9      	ldrb	r1, [r5, r6]
 800b8fe:	4aa7      	ldr	r2, [pc, #668]	; (800bb9c <ProcessMacCommands+0x328>)
 800b900:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800b904:	3403      	adds	r4, #3
 800b906:	b2e4      	uxtb	r4, r4
 800b908:	5ceb      	ldrb	r3, [r5, r3]
 800b90a:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 800b90e:	e7c4      	b.n	800b89a <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800b910:	2300      	movs	r3, #0
 800b912:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800b916:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800b91a:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800b91e:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800b922:	f1b9 0f00 	cmp.w	r9, #0
 800b926:	d036      	beq.n	800b996 <ProcessMacCommands+0x122>
                    macIndex += 4;
 800b928:	3405      	adds	r4, #5
 800b92a:	b2e4      	uxtb	r4, r4
 800b92c:	e7b5      	b.n	800b89a <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800b92e:	2305      	movs	r3, #5
 800b930:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b934:	e050      	b.n	800b9d8 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800b936:	4b9a      	ldr	r3, [pc, #616]	; (800bba0 <ProcessMacCommands+0x32c>)
 800b938:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b93c:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800b940:	4293      	cmp	r3, r2
 800b942:	da03      	bge.n	800b94c <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800b944:	4b96      	ldr	r3, [pc, #600]	; (800bba0 <ProcessMacCommands+0x32c>)
 800b946:	2101      	movs	r1, #1
 800b948:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800b94c:	4b94      	ldr	r3, [pc, #592]	; (800bba0 <ProcessMacCommands+0x32c>)
 800b94e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800b952:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800b956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800b95a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b95e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800b962:	e04d      	b.n	800ba00 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800b964:	2201      	movs	r2, #1
 800b966:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800b96a:	2003      	movs	r0, #3
 800b96c:	f003 fa60 	bl	800ee30 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800b970:	3401      	adds	r4, #1
 800b972:	b2e4      	uxtb	r4, r4
 800b974:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b978:	498a      	ldr	r1, [pc, #552]	; (800bba4 <ProcessMacCommands+0x330>)
 800b97a:	fba1 2103 	umull	r2, r1, r1, r3
 800b97e:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800b982:	d3ef      	bcc.n	800b964 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 800b984:	4433      	add	r3, r6
 800b986:	b2de      	uxtb	r6, r3
 800b988:	1e74      	subs	r4, r6, #1
 800b98a:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800b98c:	42a7      	cmp	r7, r4
 800b98e:	d93a      	bls.n	800ba06 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800b990:	5d2b      	ldrb	r3, [r5, r4]
 800b992:	2b03      	cmp	r3, #3
 800b994:	d136      	bne.n	800ba04 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800b996:	1e73      	subs	r3, r6, #1
 800b998:	442b      	add	r3, r5
 800b99a:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800b99c:	4b80      	ldr	r3, [pc, #512]	; (800bba0 <ProcessMacCommands+0x32c>)
 800b99e:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800b9a2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b9a6:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800b9aa:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800b9ae:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800b9b2:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b9b6:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800b9ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b9be:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800b9c2:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800b9c6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800b9ca:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800b9cc:	2a00      	cmp	r2, #0
 800b9ce:	d0ae      	beq.n	800b92e <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800b9d0:	1bbb      	subs	r3, r7, r6
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800b9d8:	ab05      	add	r3, sp, #20
 800b9da:	9301      	str	r3, [sp, #4]
 800b9dc:	ab03      	add	r3, sp, #12
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	f10d 030b 	add.w	r3, sp, #11
 800b9e4:	f10d 020a 	add.w	r2, sp, #10
 800b9e8:	a907      	add	r1, sp, #28
 800b9ea:	486d      	ldr	r0, [pc, #436]	; (800bba0 <ProcessMacCommands+0x32c>)
 800b9ec:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800b9f0:	f004 fa58 	bl	800fea4 <RegionLinkAdrReq>
 800b9f4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800b9f8:	f000 0007 	and.w	r0, r0, #7
 800b9fc:	2807      	cmp	r0, #7
 800b9fe:	d09a      	beq.n	800b936 <ProcessMacCommands+0xc2>
{
 800ba00:	2400      	movs	r4, #0
 800ba02:	e7b7      	b.n	800b974 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800ba04:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800ba06:	42bc      	cmp	r4, r7
 800ba08:	d204      	bcs.n	800ba14 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800ba0a:	3c01      	subs	r4, #1
 800ba0c:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800ba0e:	f04f 0901 	mov.w	r9, #1
 800ba12:	e742      	b.n	800b89a <ProcessMacCommands+0x26>
 800ba14:	f04f 0901 	mov.w	r9, #1
                break;
 800ba18:	e73f      	b.n	800b89a <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ba1a:	3402      	adds	r4, #2
 800ba1c:	b2e4      	uxtb	r4, r4
 800ba1e:	5dab      	ldrb	r3, [r5, r6]
 800ba20:	f003 030f 	and.w	r3, r3, #15
 800ba24:	495e      	ldr	r1, [pc, #376]	; (800bba0 <ProcessMacCommands+0x32c>)
 800ba26:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba30:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800ba34:	2200      	movs	r2, #0
 800ba36:	a90b      	add	r1, sp, #44	; 0x2c
 800ba38:	2004      	movs	r0, #4
 800ba3a:	f003 f9f9 	bl	800ee30 <LoRaMacCommandsAddCmd>
                break;
 800ba3e:	e72c      	b.n	800b89a <ProcessMacCommands+0x26>
                status = 0x07;
 800ba40:	2307      	movs	r3, #7
 800ba42:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800ba46:	5dab      	ldrb	r3, [r5, r6]
 800ba48:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ba4c:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800ba50:	57ab      	ldrsb	r3, [r5, r6]
 800ba52:	f003 030f 	and.w	r3, r3, #15
 800ba56:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800ba5a:	1ca3      	adds	r3, r4, #2
 800ba5c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800ba5e:	1ce1      	adds	r1, r4, #3
 800ba60:	b2c9      	uxtb	r1, r1
 800ba62:	5ceb      	ldrb	r3, [r5, r3]
 800ba64:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ba66:	1d22      	adds	r2, r4, #4
 800ba68:	b2d2      	uxtb	r2, r2
 800ba6a:	5c69      	ldrb	r1, [r5, r1]
 800ba6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ba70:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ba72:	3405      	adds	r4, #5
 800ba74:	b2e4      	uxtb	r4, r4
 800ba76:	5caa      	ldrb	r2, [r5, r2]
 800ba78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba7c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800ba7e:	2264      	movs	r2, #100	; 0x64
 800ba80:	fb02 f303 	mul.w	r3, r2, r3
 800ba84:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800ba86:	a907      	add	r1, sp, #28
 800ba88:	4b45      	ldr	r3, [pc, #276]	; (800bba0 <ProcessMacCommands+0x32c>)
 800ba8a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ba8e:	f004 fa1b 	bl	800fec8 <RegionRxParamSetupReq>
 800ba92:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800ba96:	f000 0307 	and.w	r3, r0, #7
 800ba9a:	2b07      	cmp	r3, #7
 800ba9c:	d007      	beq.n	800baae <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800ba9e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800baa2:	2201      	movs	r2, #1
 800baa4:	a90b      	add	r1, sp, #44	; 0x2c
 800baa6:	2005      	movs	r0, #5
 800baa8:	f003 f9c2 	bl	800ee30 <LoRaMacCommandsAddCmd>
                break;
 800baac:	e6f5      	b.n	800b89a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800baae:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800bab2:	4b3b      	ldr	r3, [pc, #236]	; (800bba0 <ProcessMacCommands+0x32c>)
 800bab4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800bab8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800babc:	9a08      	ldr	r2, [sp, #32]
 800babe:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800bac0:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800bac2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800bac6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800baca:	e7e8      	b.n	800ba9e <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800bacc:	4b33      	ldr	r3, [pc, #204]	; (800bb9c <ProcessMacCommands+0x328>)
 800bace:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800bad2:	b17b      	cbz	r3, 800baf4 <ProcessMacCommands+0x280>
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	b17b      	cbz	r3, 800baf8 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800bad8:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800bada:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800bade:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800bae2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800bae6:	2202      	movs	r2, #2
 800bae8:	a90b      	add	r1, sp, #44	; 0x2c
 800baea:	2006      	movs	r0, #6
 800baec:	f003 f9a0 	bl	800ee30 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800baf0:	4634      	mov	r4, r6
                break;
 800baf2:	e6d2      	b.n	800b89a <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800baf4:	20ff      	movs	r0, #255	; 0xff
 800baf6:	e7f0      	b.n	800bada <ProcessMacCommands+0x266>
 800baf8:	20ff      	movs	r0, #255	; 0xff
 800bafa:	e7ee      	b.n	800bada <ProcessMacCommands+0x266>
                status = 0x03;
 800bafc:	2303      	movs	r3, #3
 800bafe:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800bb02:	1ca3      	adds	r3, r4, #2
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	57aa      	ldrsb	r2, [r5, r6]
 800bb08:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800bb0c:	aa07      	add	r2, sp, #28
 800bb0e:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800bb10:	1ce2      	adds	r2, r4, #3
 800bb12:	b2d2      	uxtb	r2, r2
 800bb14:	5ceb      	ldrb	r3, [r5, r3]
 800bb16:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800bb18:	1d21      	adds	r1, r4, #4
 800bb1a:	b2c9      	uxtb	r1, r1
 800bb1c:	5caa      	ldrb	r2, [r5, r2]
 800bb1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb22:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bb24:	1d62      	adds	r2, r4, #5
 800bb26:	b2d2      	uxtb	r2, r2
 800bb28:	5c69      	ldrb	r1, [r5, r1]
 800bb2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bb2e:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800bb30:	2164      	movs	r1, #100	; 0x64
 800bb32:	fb01 f303 	mul.w	r3, r1, r3
 800bb36:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800bb3c:	3406      	adds	r4, #6
 800bb3e:	b2e4      	uxtb	r4, r4
 800bb40:	56ab      	ldrsb	r3, [r5, r2]
 800bb42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800bb46:	a905      	add	r1, sp, #20
 800bb48:	4b15      	ldr	r3, [pc, #84]	; (800bba0 <ProcessMacCommands+0x32c>)
 800bb4a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bb4e:	f004 f9c4 	bl	800feda <RegionNewChannelReq>
 800bb52:	b2c3      	uxtb	r3, r0
 800bb54:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	f6ff ae9e 	blt.w	800b89a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800bb5e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800bb62:	2201      	movs	r2, #1
 800bb64:	a90b      	add	r1, sp, #44	; 0x2c
 800bb66:	2007      	movs	r0, #7
 800bb68:	f003 f962 	bl	800ee30 <LoRaMacCommandsAddCmd>
                break;
 800bb6c:	e695      	b.n	800b89a <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800bb6e:	3402      	adds	r4, #2
 800bb70:	b2e4      	uxtb	r4, r4
 800bb72:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800bb74:	f013 030f 	ands.w	r3, r3, #15
 800bb78:	d100      	bne.n	800bb7c <ProcessMacCommands+0x308>
                    delay++;
 800bb7a:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800bb7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb80:	fb02 f303 	mul.w	r3, r2, r3
 800bb84:	4a06      	ldr	r2, [pc, #24]	; (800bba0 <ProcessMacCommands+0x32c>)
 800bb86:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800bb88:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800bb8c:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800bb8e:	2200      	movs	r2, #0
 800bb90:	a90b      	add	r1, sp, #44	; 0x2c
 800bb92:	2008      	movs	r0, #8
 800bb94:	f003 f94c 	bl	800ee30 <LoRaMacCommandsAddCmd>
                break;
 800bb98:	e67f      	b.n	800b89a <ProcessMacCommands+0x26>
 800bb9a:	bf00      	nop
 800bb9c:	20000d80 	.word	0x20000d80
 800bba0:	20008000 	.word	0x20008000
 800bba4:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800bba8:	3402      	adds	r4, #2
 800bbaa:	b2e4      	uxtb	r4, r4
 800bbac:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800bbb4:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800bbb8:	f013 0f20 	tst.w	r3, #32
 800bbbc:	d002      	beq.n	800bbc4 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800bbc4:	f013 0f10 	tst.w	r3, #16
 800bbc8:	d002      	beq.n	800bbd0 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800bbd0:	f003 030f 	and.w	r3, r3, #15
 800bbd4:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800bbd8:	a903      	add	r1, sp, #12
 800bbda:	4b9c      	ldr	r3, [pc, #624]	; (800be4c <ProcessMacCommands+0x5d8>)
 800bbdc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bbe0:	f004 f984 	bl	800feec <RegionTxParamSetupReq>
 800bbe4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bbe8:	f43f ae57 	beq.w	800b89a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800bbec:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800bbf0:	4e96      	ldr	r6, [pc, #600]	; (800be4c <ProcessMacCommands+0x5d8>)
 800bbf2:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800bbf6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800bbfa:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800bbfe:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800bc02:	4a93      	ldr	r2, [pc, #588]	; (800be50 <ProcessMacCommands+0x5dc>)
 800bc04:	5cd0      	ldrb	r0, [r2, r3]
 800bc06:	f7f5 f8cd 	bl	8000da4 <__aeabi_ui2f>
 800bc0a:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800bc0e:	2302      	movs	r3, #2
 800bc10:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bc14:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bc18:	a907      	add	r1, sp, #28
 800bc1a:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800bc1e:	f004 f8e1 	bl	800fde4 <RegionGetPhyParam>
 800bc22:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800bc24:	b240      	sxtb	r0, r0
 800bc26:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800bc2a:	4298      	cmp	r0, r3
 800bc2c:	bfb8      	it	lt
 800bc2e:	4618      	movlt	r0, r3
 800bc30:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800bc34:	2200      	movs	r2, #0
 800bc36:	a90b      	add	r1, sp, #44	; 0x2c
 800bc38:	2009      	movs	r0, #9
 800bc3a:	f003 f8f9 	bl	800ee30 <LoRaMacCommandsAddCmd>
                break;
 800bc3e:	e62c      	b.n	800b89a <ProcessMacCommands+0x26>
                status = 0x03;
 800bc40:	2303      	movs	r3, #3
 800bc42:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800bc46:	1ca3      	adds	r3, r4, #2
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	5daa      	ldrb	r2, [r5, r6]
 800bc4c:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800bc50:	1ce1      	adds	r1, r4, #3
 800bc52:	b2c9      	uxtb	r1, r1
 800bc54:	5ceb      	ldrb	r3, [r5, r3]
 800bc56:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800bc58:	1d22      	adds	r2, r4, #4
 800bc5a:	b2d2      	uxtb	r2, r2
 800bc5c:	5c69      	ldrb	r1, [r5, r1]
 800bc5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bc62:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bc64:	3405      	adds	r4, #5
 800bc66:	b2e4      	uxtb	r4, r4
 800bc68:	5caa      	ldrb	r2, [r5, r2]
 800bc6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc6e:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800bc70:	2264      	movs	r2, #100	; 0x64
 800bc72:	fb02 f303 	mul.w	r3, r2, r3
 800bc76:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800bc78:	a907      	add	r1, sp, #28
 800bc7a:	4b74      	ldr	r3, [pc, #464]	; (800be4c <ProcessMacCommands+0x5d8>)
 800bc7c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bc80:	f004 f93d 	bl	800fefe <RegionDlChannelReq>
 800bc84:	b2c3      	uxtb	r3, r0
 800bc86:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	f6ff ae05 	blt.w	800b89a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800bc90:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800bc94:	2201      	movs	r2, #1
 800bc96:	a90b      	add	r1, sp, #44	; 0x2c
 800bc98:	200a      	movs	r0, #10
 800bc9a:	f003 f8c9 	bl	800ee30 <LoRaMacCommandsAddCmd>
                break;
 800bc9e:	e5fc      	b.n	800b89a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800bca0:	2009      	movs	r0, #9
 800bca2:	f003 fa8d 	bl	800f1c0 <LoRaMacConfirmQueueIsCmdActive>
 800bca6:	b928      	cbnz	r0, 800bcb4 <ProcessMacCommands+0x440>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800bca8:	4b6a      	ldr	r3, [pc, #424]	; (800be54 <ProcessMacCommands+0x5e0>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 800bcb0:	4634      	mov	r4, r6
 800bcb2:	e5f2      	b.n	800b89a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800bcb4:	2109      	movs	r1, #9
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	f003 fa36 	bl	800f128 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800bcbc:	a903      	add	r1, sp, #12
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9303      	str	r3, [sp, #12]
 800bcc2:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800bcc4:	f10d 0a14 	add.w	sl, sp, #20
 800bcc8:	9305      	str	r3, [sp, #20]
 800bcca:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800bccc:	f10d 0b1c 	add.w	fp, sp, #28
 800bcd0:	9307      	str	r3, [sp, #28]
 800bcd2:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800bcd4:	1ca0      	adds	r0, r4, #2
 800bcd6:	b2c0      	uxtb	r0, r0
 800bcd8:	5dab      	ldrb	r3, [r5, r6]
 800bcda:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800bcdc:	1ce2      	adds	r2, r4, #3
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	5c28      	ldrb	r0, [r5, r0]
 800bce2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800bce6:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800bce8:	1d20      	adds	r0, r4, #4
 800bcea:	b2c0      	uxtb	r0, r0
 800bcec:	5caa      	ldrb	r2, [r5, r2]
 800bcee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcf2:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800bcf4:	1d62      	adds	r2, r4, #5
 800bcf6:	b2d2      	uxtb	r2, r2
 800bcf8:	5c28      	ldrb	r0, [r5, r0]
 800bcfa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800bcfe:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800bd00:	3406      	adds	r4, #6
 800bd02:	b2e4      	uxtb	r4, r4
 800bd04:	5caa      	ldrb	r2, [r5, r2]
 800bd06:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800bd0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bd0e:	fb00 f202 	mul.w	r2, r0, r2
 800bd12:	0a12      	lsrs	r2, r2, #8
 800bd14:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800bd18:	c903      	ldmia	r1, {r0, r1}
 800bd1a:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800bd1e:	4a4e      	ldr	r2, [pc, #312]	; (800be58 <ProcessMacCommands+0x5e4>)
 800bd20:	441a      	add	r2, r3
 800bd22:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800bd24:	4658      	mov	r0, fp
 800bd26:	f008 fb2f 	bl	8014388 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800bd2a:	4e4a      	ldr	r6, [pc, #296]	; (800be54 <ProcessMacCommands+0x5e0>)
 800bd2c:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800bd36:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800bd3a:	a80c      	add	r0, sp, #48	; 0x30
 800bd3c:	f008 fae3 	bl	8014306 <SysTimeSub>
 800bd40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd46:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800bd4a:	4650      	mov	r0, sl
 800bd4c:	f008 fabc 	bl	80142c8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800bd50:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bd54:	f008 faf6 	bl	8014344 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800bd58:	f002 ffce 	bl	800ecf8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 800bd62:	e59a      	b.n	800b89a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800bd64:	200c      	movs	r0, #12
 800bd66:	f003 fa2b 	bl	800f1c0 <LoRaMacConfirmQueueIsCmdActive>
 800bd6a:	b908      	cbnz	r0, 800bd70 <ProcessMacCommands+0x4fc>
        switch( payload[macIndex++] )
 800bd6c:	4634      	mov	r4, r6
 800bd6e:	e594      	b.n	800b89a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800bd70:	210c      	movs	r1, #12
 800bd72:	2000      	movs	r0, #0
 800bd74:	f003 f9d8 	bl	800f128 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800bd78:	4b36      	ldr	r3, [pc, #216]	; (800be54 <ProcessMacCommands+0x5e0>)
 800bd7a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800bd7e:	3b04      	subs	r3, #4
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d801      	bhi.n	800bd8a <ProcessMacCommands+0x516>
        switch( payload[macIndex++] )
 800bd86:	4634      	mov	r4, r6
 800bd88:	e587      	b.n	800b89a <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800bd8a:	f002 ffb1 	bl	800ecf0 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800bd8e:	4634      	mov	r4, r6
 800bd90:	e583      	b.n	800b89a <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800bd92:	1ca2      	adds	r2, r4, #2
 800bd94:	b2d2      	uxtb	r2, r2
 800bd96:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800bd98:	1ce1      	adds	r1, r4, #3
 800bd9a:	b2c9      	uxtb	r1, r1
 800bd9c:	5caa      	ldrb	r2, [r5, r2]
 800bd9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800bda2:	1d22      	adds	r2, r4, #4
 800bda4:	b2d2      	uxtb	r2, r2
 800bda6:	5c69      	ldrb	r1, [r5, r1]
 800bda8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800bdac:	3405      	adds	r4, #5
 800bdae:	b2e4      	uxtb	r4, r4
 800bdb0:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800bdb2:	2164      	movs	r1, #100	; 0x64
 800bdb4:	fb03 f101 	mul.w	r1, r3, r1
 800bdb8:	f000 000f 	and.w	r0, r0, #15
 800bdbc:	f002 ff99 	bl	800ecf2 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800bdc0:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	a90b      	add	r1, sp, #44	; 0x2c
 800bdc8:	2011      	movs	r0, #17
 800bdca:	f003 f831 	bl	800ee30 <LoRaMacCommandsAddCmd>
                break;
 800bdce:	e564      	b.n	800b89a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800bdd0:	200d      	movs	r0, #13
 800bdd2:	f003 f9f5 	bl	800f1c0 <LoRaMacConfirmQueueIsCmdActive>
 800bdd6:	b908      	cbnz	r0, 800bddc <ProcessMacCommands+0x568>
        switch( payload[macIndex++] )
 800bdd8:	4634      	mov	r4, r6
 800bdda:	e55e      	b.n	800b89a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800bddc:	210d      	movs	r1, #13
 800bdde:	2000      	movs	r0, #0
 800bde0:	f003 f9a2 	bl	800f128 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800bde4:	1ca2      	adds	r2, r4, #2
 800bde6:	b2d2      	uxtb	r2, r2
 800bde8:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800bdea:	1ce3      	adds	r3, r4, #3
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800bdf0:	3404      	adds	r4, #4
 800bdf2:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800bdf4:	4a19      	ldr	r2, [pc, #100]	; (800be5c <ProcessMacCommands+0x5e8>)
 800bdf6:	6812      	ldr	r2, [r2, #0]
 800bdf8:	5ce9      	ldrb	r1, [r5, r3]
 800bdfa:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800bdfe:	f002 ff7a 	bl	800ecf6 <LoRaMacClassBBeaconTimingAns>
 800be02:	e54a      	b.n	800b89a <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800be04:	1ca1      	adds	r1, r4, #2
 800be06:	b2c9      	uxtb	r1, r1
 800be08:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800be0a:	1ce2      	adds	r2, r4, #3
 800be0c:	b2d2      	uxtb	r2, r2
 800be0e:	5c69      	ldrb	r1, [r5, r1]
 800be10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800be14:	3404      	adds	r4, #4
 800be16:	b2e4      	uxtb	r4, r4
 800be18:	5caa      	ldrb	r2, [r5, r2]
 800be1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800be1e:	2064      	movs	r0, #100	; 0x64
 800be20:	fb03 f000 	mul.w	r0, r3, r0
 800be24:	f002 ff69 	bl	800ecfa <LoRaMacClassBBeaconFreqReq>
 800be28:	b140      	cbz	r0, 800be3c <ProcessMacCommands+0x5c8>
                        macCmdPayload[0] = 1;
 800be2a:	2301      	movs	r3, #1
 800be2c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800be30:	2201      	movs	r2, #1
 800be32:	a90b      	add	r1, sp, #44	; 0x2c
 800be34:	2013      	movs	r0, #19
 800be36:	f002 fffb 	bl	800ee30 <LoRaMacCommandsAddCmd>
                break;
 800be3a:	e52e      	b.n	800b89a <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800be42:	e7f5      	b.n	800be30 <ProcessMacCommands+0x5bc>
}
 800be44:	b00f      	add	sp, #60	; 0x3c
 800be46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4a:	bf00      	nop
 800be4c:	20008000 	.word	0x20008000
 800be50:	08019b8c 	.word	0x08019b8c
 800be54:	20000d80 	.word	0x20000d80
 800be58:	12d53d80 	.word	0x12d53d80
 800be5c:	2000132c 	.word	0x2000132c

0800be60 <ProcessRadioRxDone>:
{
 800be60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be64:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800be66:	4ba5      	ldr	r3, [pc, #660]	; (800c0fc <ProcessRadioRxDone+0x29c>)
 800be68:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800be6a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800be6c:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800be70:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800be74:	2300      	movs	r3, #0
 800be76:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800be78:	4aa1      	ldr	r2, [pc, #644]	; (800c100 <ProcessRadioRxDone+0x2a0>)
 800be7a:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800be7e:	4aa1      	ldr	r2, [pc, #644]	; (800c104 <ProcessRadioRxDone+0x2a4>)
 800be80:	7811      	ldrb	r1, [r2, #0]
 800be82:	f363 0100 	bfi	r1, r3, #0, #1
 800be86:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800be88:	4c9f      	ldr	r4, [pc, #636]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800be8a:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800be8e:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800be92:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800be96:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 800be9a:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800be9e:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800bea2:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800bea6:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800beaa:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800beae:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800beb2:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800beb6:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800beba:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bebe:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800bec2:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800bec6:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800beca:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 800bece:	4b8f      	ldr	r3, [pc, #572]	; (800c10c <ProcessRadioRxDone+0x2ac>)
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800bed4:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800bed8:	b1d3      	cbz	r3, 800bf10 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800beda:	4629      	mov	r1, r5
 800bedc:	4630      	mov	r0, r6
 800bede:	f002 fef4 	bl	800ecca <LoRaMacClassBRxBeacon>
 800bee2:	b9d0      	cbnz	r0, 800bf1a <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bee4:	4b86      	ldr	r3, [pc, #536]	; (800c100 <ProcessRadioRxDone+0x2a0>)
 800bee6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800beea:	2b01      	cmp	r3, #1
 800beec:	d01d      	beq.n	800bf2a <ProcessRadioRxDone+0xca>
    if( size == 0 )
 800beee:	2d00      	cmp	r5, #0
 800bef0:	d038      	beq.n	800bf64 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800bef2:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800bef4:	0963      	lsrs	r3, r4, #5
 800bef6:	3b01      	subs	r3, #1
 800bef8:	2b06      	cmp	r3, #6
 800befa:	f200 82fd 	bhi.w	800c4f8 <ProcessRadioRxDone+0x698>
 800befe:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bf02:	0038      	.short	0x0038
 800bf04:	00d102fb 	.word	0x00d102fb
 800bf08:	00cd02fb 	.word	0x00cd02fb
 800bf0c:	02cd02fb 	.word	0x02cd02fb
        TimerStop( &MacCtx.RxWindowTimer2 );
 800bf10:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800bf14:	f008 fb26 	bl	8014564 <UTIL_TIMER_Stop>
 800bf18:	e7df      	b.n	800beda <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800bf1a:	4b7b      	ldr	r3, [pc, #492]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800bf1c:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800bf20:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 800bf24:	b025      	add	sp, #148	; 0x94
 800bf26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800bf2a:	f002 fed2 	bl	800ecd2 <LoRaMacClassBIsPingExpected>
 800bf2e:	b150      	cbz	r0, 800bf46 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bf30:	2000      	movs	r0, #0
 800bf32:	f002 fec3 	bl	800ecbc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800bf36:	2000      	movs	r0, #0
 800bf38:	f002 fec5 	bl	800ecc6 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bf3c:	4b72      	ldr	r3, [pc, #456]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800bf3e:	2204      	movs	r2, #4
 800bf40:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800bf44:	e7d3      	b.n	800beee <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bf46:	f002 fec6 	bl	800ecd6 <LoRaMacClassBIsMulticastExpected>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d0cf      	beq.n	800beee <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bf4e:	2000      	movs	r0, #0
 800bf50:	f002 feb5 	bl	800ecbe <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bf54:	2000      	movs	r0, #0
 800bf56:	f002 feb7 	bl	800ecc8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bf5a:	4b6b      	ldr	r3, [pc, #428]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800bf5c:	2205      	movs	r2, #5
 800bf5e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800bf62:	e7c4      	b.n	800beee <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bf64:	4b68      	ldr	r3, [pc, #416]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800bf6c:	f7ff fc0a 	bl	800b784 <PrepareRxDoneAbort>
        return;
 800bf70:	e7d8      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800bf72:	2d10      	cmp	r5, #16
 800bf74:	d92e      	bls.n	800bfd4 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 800bf76:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 800bf78:	b2ed      	uxtb	r5, r5
 800bf7a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800bf7e:	4b60      	ldr	r3, [pc, #384]	; (800c100 <ProcessRadioRxDone+0x2a0>)
 800bf80:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bf84:	bb6b      	cbnz	r3, 800bfe2 <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 800bf86:	a804      	add	r0, sp, #16
 800bf88:	f006 f85c 	bl	8012044 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800bf8c:	aa08      	add	r2, sp, #32
 800bf8e:	a904      	add	r1, sp, #16
 800bf90:	20ff      	movs	r0, #255	; 0xff
 800bf92:	f003 fce9 	bl	800f968 <LoRaMacCryptoHandleJoinAccept>
 800bf96:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bf98:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800bf9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bfa0:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bfa4:	4b56      	ldr	r3, [pc, #344]	; (800c100 <ProcessRadioRxDone+0x2a0>)
 800bfa6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800bfaa:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800bfae:	2207      	movs	r2, #7
 800bfb0:	a903      	add	r1, sp, #12
 800bfb2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bfb6:	f003 ff36 	bl	800fe26 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800bfba:	b904      	cbnz	r4, 800bfbe <ProcessRadioRxDone+0x15e>
 800bfbc:	b9c0      	cbnz	r0, 800bff0 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	f003 f8fe 	bl	800f1c0 <LoRaMacConfirmQueueIsCmdActive>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	f000 8283 	beq.w	800c4d0 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800bfca:	2101      	movs	r1, #1
 800bfcc:	2007      	movs	r0, #7
 800bfce:	f003 f8ab 	bl	800f128 <LoRaMacConfirmQueueSetStatus>
 800bfd2:	e27d      	b.n	800c4d0 <ProcessRadioRxDone+0x670>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bfd4:	4b4c      	ldr	r3, [pc, #304]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800bfdc:	f7ff fbd2 	bl	800b784 <PrepareRxDoneAbort>
                return;
 800bfe0:	e7a0      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bfe2:	4b49      	ldr	r3, [pc, #292]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800bfea:	f7ff fbcb 	bl	800b784 <PrepareRxDoneAbort>
                return;
 800bfee:	e799      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800bff0:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800bff4:	4c42      	ldr	r4, [pc, #264]	; (800c100 <ProcessRadioRxDone+0x2a0>)
 800bff6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800bffa:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 800bffe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c002:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800c006:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800c00a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c00e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800c012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c014:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800c018:	2002      	movs	r0, #2
 800c01a:	f006 f821 	bl	8012060 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800c01e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c022:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800c026:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c02a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c02e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c032:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800c036:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800c03a:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800c03c:	b90b      	cbnz	r3, 800c042 <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800c03e:	2201      	movs	r2, #1
 800c040:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800c042:	4c2f      	ldr	r4, [pc, #188]	; (800c100 <ProcessRadioRxDone+0x2a0>)
 800c044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c04a:	fb02 f303 	mul.w	r3, r2, r3
 800c04e:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c050:	4413      	add	r3, r2
 800c052:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800c054:	2601      	movs	r6, #1
 800c056:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800c05a:	2300      	movs	r3, #0
 800c05c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800c060:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800c064:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 800c066:	3d11      	subs	r5, #17
 800c068:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 800c06c:	4b26      	ldr	r3, [pc, #152]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800c06e:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800c072:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800c076:	a921      	add	r1, sp, #132	; 0x84
 800c078:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c07c:	f003 fede 	bl	800fe3c <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c080:	2302      	movs	r3, #2
 800c082:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800c086:	4630      	mov	r0, r6
 800c088:	f003 f89a 	bl	800f1c0 <LoRaMacConfirmQueueIsCmdActive>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	f000 821f 	beq.w	800c4d0 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800c092:	4631      	mov	r1, r6
 800c094:	2000      	movs	r0, #0
 800c096:	f003 f847 	bl	800f128 <LoRaMacConfirmQueueSetStatus>
 800c09a:	e219      	b.n	800c4d0 <ProcessRadioRxDone+0x670>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c09c:	4b1a      	ldr	r3, [pc, #104]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c0a4:	4b16      	ldr	r3, [pc, #88]	; (800c100 <ProcessRadioRxDone+0x2a0>)
 800c0a6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c0aa:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800c0ae:	4a16      	ldr	r2, [pc, #88]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800c0b0:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 800c0b4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c0b8:	220d      	movs	r2, #13
 800c0ba:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c0be:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c0c2:	b113      	cbz	r3, 800c0ca <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c0c4:	230e      	movs	r3, #14
 800c0c6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c0ca:	a91f      	add	r1, sp, #124	; 0x7c
 800c0cc:	4b0c      	ldr	r3, [pc, #48]	; (800c100 <ProcessRadioRxDone+0x2a0>)
 800c0ce:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c0d2:	f003 fe87 	bl	800fde4 <RegionGetPhyParam>
 800c0d6:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800c0d8:	f1a5 030d 	sub.w	r3, r5, #13
 800c0dc:	b21b      	sxth	r3, r3
 800c0de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c0e2:	b200      	sxth	r0, r0
 800c0e4:	4283      	cmp	r3, r0
 800c0e6:	dc01      	bgt.n	800c0ec <ProcessRadioRxDone+0x28c>
 800c0e8:	2d0b      	cmp	r5, #11
 800c0ea:	d811      	bhi.n	800c110 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c0ec:	4b06      	ldr	r3, [pc, #24]	; (800c108 <ProcessRadioRxDone+0x2a8>)
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c0f4:	f7ff fb46 	bl	800b784 <PrepareRxDoneAbort>
                return;
 800c0f8:	e714      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
 800c0fa:	bf00      	nop
 800c0fc:	2000132c 	.word	0x2000132c
 800c100:	20008000 	.word	0x20008000
 800c104:	20000d7c 	.word	0x20000d7c
 800c108:	20000d80 	.word	0x20000d80
 800c10c:	0801a22c 	.word	0x0801a22c
            macMsgData.Buffer = payload;
 800c110:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800c112:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800c116:	4ba5      	ldr	r3, [pc, #660]	; (800c3ac <ProcessRadioRxDone+0x54c>)
 800c118:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800c11a:	23ff      	movs	r3, #255	; 0xff
 800c11c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800c120:	a812      	add	r0, sp, #72	; 0x48
 800c122:	f003 fd33 	bl	800fb8c <LoRaMacParserData>
 800c126:	2800      	cmp	r0, #0
 800c128:	d142      	bne.n	800c1b0 <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c12a:	4ba1      	ldr	r3, [pc, #644]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c12c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c130:	2b01      	cmp	r3, #1
 800c132:	d044      	beq.n	800c1be <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800c134:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c136:	4b9f      	ldr	r3, [pc, #636]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c138:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800c13c:	a904      	add	r1, sp, #16
 800c13e:	a812      	add	r0, sp, #72	; 0x48
 800c140:	f7ff f996 	bl	800b470 <DetermineFrameType>
 800c144:	4605      	mov	r5, r0
 800c146:	2800      	cmp	r0, #0
 800c148:	d164      	bne.n	800c214 <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d066      	beq.n	800c222 <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800c154:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800c156:	2d01      	cmp	r5, #1
 800c158:	d10a      	bne.n	800c170 <ProcessRadioRxDone+0x310>
 800c15a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c15e:	2b03      	cmp	r3, #3
 800c160:	f040 808e 	bne.w	800c280 <ProcessRadioRxDone+0x420>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800c164:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800c168:	f013 0f60 	tst.w	r3, #96	; 0x60
 800c16c:	f040 8088 	bne.w	800c280 <ProcessRadioRxDone+0x420>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800c170:	ab07      	add	r3, sp, #28
 800c172:	9301      	str	r3, [sp, #4]
 800c174:	f10d 031b 	add.w	r3, sp, #27
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	4b8d      	ldr	r3, [pc, #564]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c17c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c180:	aa12      	add	r2, sp, #72	; 0x48
 800c182:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800c186:	4630      	mov	r0, r6
 800c188:	f7ff fb3a 	bl	800b800 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f000 8083 	beq.w	800c298 <ProcessRadioRxDone+0x438>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800c192:	2807      	cmp	r0, #7
 800c194:	d07b      	beq.n	800c28e <ProcessRadioRxDone+0x42e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c196:	4b87      	ldr	r3, [pc, #540]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c19e:	9a07      	ldr	r2, [sp, #28]
 800c1a0:	4b84      	ldr	r3, [pc, #528]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c1a2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800c1a6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800c1aa:	f7ff faeb 	bl	800b784 <PrepareRxDoneAbort>
                return;
 800c1ae:	e6b9      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c1b0:	4b80      	ldr	r3, [pc, #512]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c1b8:	f7ff fae4 	bl	800b784 <PrepareRxDoneAbort>
                return;
 800c1bc:	e6b2      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800c1be:	f002 fd88 	bl	800ecd2 <LoRaMacClassBIsPingExpected>
 800c1c2:	b188      	cbz	r0, 800c1e8 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	f002 fd79 	bl	800ecbc <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	f002 fd7b 	bl	800ecc6 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800c1d0:	4b78      	ldr	r3, [pc, #480]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c1d2:	2204      	movs	r2, #4
 800c1d4:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800c1d8:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800c1dc:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800c1e0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c1e2:	f002 fd90 	bl	800ed06 <LoRaMacClassBSetFPendingBit>
 800c1e6:	e7a5      	b.n	800c134 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c1e8:	f002 fd75 	bl	800ecd6 <LoRaMacClassBIsMulticastExpected>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d0a1      	beq.n	800c134 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	f002 fd64 	bl	800ecbe <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	f002 fd66 	bl	800ecc8 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800c1fc:	4b6d      	ldr	r3, [pc, #436]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c1fe:	2205      	movs	r2, #5
 800c200:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800c204:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800c208:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800c20c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c20e:	f002 fd7a 	bl	800ed06 <LoRaMacClassBSetFPendingBit>
 800c212:	e78f      	b.n	800c134 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c214:	4b67      	ldr	r3, [pc, #412]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c216:	2201      	movs	r2, #1
 800c218:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c21c:	f7ff fab2 	bl	800b784 <PrepareRxDoneAbort>
                return;
 800c220:	e680      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c222:	4618      	mov	r0, r3
 800c224:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c228:	4a61      	ldr	r2, [pc, #388]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c22a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c22e:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800c232:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c234:	428a      	cmp	r2, r1
 800c236:	d002      	beq.n	800c23e <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c238:	3301      	adds	r3, #1
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	e788      	b.n	800c150 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800c23e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800c242:	495b      	ldr	r1, [pc, #364]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c244:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800c248:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c24c:	2900      	cmp	r1, #0
 800c24e:	d0f3      	beq.n	800c238 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800c250:	4b57      	ldr	r3, [pc, #348]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c252:	2130      	movs	r1, #48	; 0x30
 800c254:	fb01 3000 	mla	r0, r1, r0, r3
 800c258:	f890 60ea 	ldrb.w	r6, [r0, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800c25c:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800c260:	6809      	ldr	r1, [r1, #0]
 800c262:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c264:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d002      	beq.n	800c272 <ProcessRadioRxDone+0x412>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800c26c:	4691      	mov	r9, r2
                    multicast = 1;
 800c26e:	2501      	movs	r5, #1
 800c270:	e771      	b.n	800c156 <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800c272:	4b50      	ldr	r3, [pc, #320]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c274:	2103      	movs	r1, #3
 800c276:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800c27a:	4691      	mov	r9, r2
                    multicast = 1;
 800c27c:	2501      	movs	r5, #1
 800c27e:	e76a      	b.n	800c156 <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c280:	4b4c      	ldr	r3, [pc, #304]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c288:	f7ff fa7c 	bl	800b784 <PrepareRxDoneAbort>
                return;
 800c28c:	e64a      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800c28e:	4b49      	ldr	r3, [pc, #292]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c290:	2208      	movs	r2, #8
 800c292:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800c296:	e782      	b.n	800c19e <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800c298:	ab12      	add	r3, sp, #72	; 0x48
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	9b07      	ldr	r3, [sp, #28]
 800c29e:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f003 faa5 	bl	800f7f4 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d14a      	bne.n	800c344 <ProcessRadioRxDone+0x4e4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c2ae:	4b41      	ldr	r3, [pc, #260]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800c2b6:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800c2ba:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800c2be:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c2c2:	9a07      	ldr	r2, [sp, #28]
 800c2c4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800c2c8:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c2cc:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800c2d0:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800c2d4:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c2d8:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c2dc:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c2e0:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 800c2e4:	2801      	cmp	r0, #1
 800c2e6:	d93b      	bls.n	800c360 <ProcessRadioRxDone+0x500>
            if( multicast == 1 )
 800c2e8:	2d01      	cmp	r5, #1
 800c2ea:	d03f      	beq.n	800c36c <ProcessRadioRxDone+0x50c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800c2ec:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800c2f0:	2ca0      	cmp	r4, #160	; 0xa0
 800c2f2:	d040      	beq.n	800c376 <ProcessRadioRxDone+0x516>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4a2e      	ldr	r2, [pc, #184]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c2f8:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c2fc:	4a2d      	ldr	r2, [pc, #180]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c2fe:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800c302:	4b2b      	ldr	r3, [pc, #172]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c304:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c308:	b923      	cbnz	r3, 800c314 <ProcessRadioRxDone+0x4b4>
 800c30a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800c30e:	f013 0f10 	tst.w	r3, #16
 800c312:	d007      	beq.n	800c324 <ProcessRadioRxDone+0x4c4>
 800c314:	4b26      	ldr	r3, [pc, #152]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c316:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c31a:	b91b      	cbnz	r3, 800c324 <ProcessRadioRxDone+0x4c4>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800c31c:	4b25      	ldr	r3, [pc, #148]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800c324:	4b23      	ldr	r3, [pc, #140]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c326:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 800c32a:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800c32e:	f7ff fa92 	bl	800b856 <RemoveMacCommands>
            switch( fType )
 800c332:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c336:	2b03      	cmp	r3, #3
 800c338:	f200 8099 	bhi.w	800c46e <ProcessRadioRxDone+0x60e>
 800c33c:	e8df f003 	tbb	[pc, r3]
 800c340:	8777653e 	.word	0x8777653e
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800c344:	2802      	cmp	r0, #2
 800c346:	d006      	beq.n	800c356 <ProcessRadioRxDone+0x4f6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800c348:	4b1a      	ldr	r3, [pc, #104]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c34a:	220b      	movs	r2, #11
 800c34c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c350:	f7ff fa18 	bl	800b784 <PrepareRxDoneAbort>
                return;
 800c354:	e5e6      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800c356:	4b17      	ldr	r3, [pc, #92]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c358:	220a      	movs	r2, #10
 800c35a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800c35e:	e7f7      	b.n	800c350 <ProcessRadioRxDone+0x4f0>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800c360:	4b13      	ldr	r3, [pc, #76]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c362:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800c364:	2201      	movs	r2, #1
 800c366:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 800c36a:	e7bd      	b.n	800c2e8 <ProcessRadioRxDone+0x488>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800c36c:	4b11      	ldr	r3, [pc, #68]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800c374:	e7c5      	b.n	800c302 <ProcessRadioRxDone+0x4a2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800c376:	4b0e      	ldr	r3, [pc, #56]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800c37e:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800c382:	b913      	cbnz	r3, 800c38a <ProcessRadioRxDone+0x52a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800c384:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c386:	4b0a      	ldr	r3, [pc, #40]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c388:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c38a:	4b0a      	ldr	r3, [pc, #40]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c38c:	2201      	movs	r2, #1
 800c38e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800c392:	4290      	cmp	r0, r2
 800c394:	d9b5      	bls.n	800c302 <ProcessRadioRxDone+0x4a2>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800c396:	4b06      	ldr	r3, [pc, #24]	; (800c3b0 <ProcessRadioRxDone+0x550>)
 800c398:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c39c:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <ProcessRadioRxDone+0x554>)
 800c39e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800c3a2:	4a05      	ldr	r2, [pc, #20]	; (800c3b8 <ProcessRadioRxDone+0x558>)
 800c3a4:	6812      	ldr	r2, [r2, #0]
 800c3a6:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 800c3aa:	e7aa      	b.n	800c302 <ProcessRadioRxDone+0x4a2>
 800c3ac:	20000fb8 	.word	0x20000fb8
 800c3b0:	20008000 	.word	0x20008000
 800c3b4:	20000d80 	.word	0x20000d80
 800c3b8:	2000132c 	.word	0x2000132c
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c3bc:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800c3c0:	4c58      	ldr	r4, [pc, #352]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c3c2:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	463b      	mov	r3, r7
 800c3ca:	f002 020f 	and.w	r2, r2, #15
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	a816      	add	r0, sp, #88	; 0x58
 800c3d2:	f7ff fa4f 	bl	800b874 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c3d6:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c3da:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c3de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3e0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c3e4:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800c3e8:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800c3f2:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c3f6:	2be0      	cmp	r3, #224	; 0xe0
 800c3f8:	d040      	beq.n	800c47c <ProcessRadioRxDone+0x61c>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c3fa:	4a4a      	ldr	r2, [pc, #296]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c3fc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c400:	f043 0302 	orr.w	r3, r3, #2
 800c404:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800c408:	e062      	b.n	800c4d0 <ProcessRadioRxDone+0x670>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c40a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800c40e:	4c45      	ldr	r4, [pc, #276]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c410:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	463b      	mov	r3, r7
 800c418:	f002 020f 	and.w	r2, r2, #15
 800c41c:	2100      	movs	r1, #0
 800c41e:	a816      	add	r0, sp, #88	; 0x58
 800c420:	f7ff fa28 	bl	800b874 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c424:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c428:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800c42c:	e7e1      	b.n	800c3f2 <ProcessRadioRxDone+0x592>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800c42e:	4c3d      	ldr	r4, [pc, #244]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c430:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	463b      	mov	r3, r7
 800c438:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800c43c:	2100      	movs	r1, #0
 800c43e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c440:	f7ff fa18 	bl	800b874 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c444:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c448:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800c44c:	e7d1      	b.n	800c3f2 <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c44e:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800c452:	4b34      	ldr	r3, [pc, #208]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c454:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c458:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c45a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c45e:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800c462:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800c466:	2201      	movs	r2, #1
 800c468:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800c46c:	e7c1      	b.n	800c3f2 <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c46e:	4b2d      	ldr	r3, [pc, #180]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c470:	2201      	movs	r2, #1
 800c472:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800c476:	f7ff f985 	bl	800b784 <PrepareRxDoneAbort>
                    break;
 800c47a:	e7ba      	b.n	800c3f2 <ProcessRadioRxDone+0x592>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800c47c:	4a2a      	ldr	r2, [pc, #168]	; (800c528 <ProcessRadioRxDone+0x6c8>)
 800c47e:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 800c482:	2a00      	cmp	r2, #0
 800c484:	d1b9      	bne.n	800c3fa <ProcessRadioRxDone+0x59a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c486:	4a27      	ldr	r2, [pc, #156]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c488:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800c48c:	2300      	movs	r3, #0
 800c48e:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800c492:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800c496:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 800c49a:	e7ae      	b.n	800c3fa <ProcessRadioRxDone+0x59a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800c49c:	1e6a      	subs	r2, r5, #1
 800c49e:	4c21      	ldr	r4, [pc, #132]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c4a0:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800c4a4:	b292      	uxth	r2, r2
 800c4a6:	1c71      	adds	r1, r6, #1
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f005 fee8 	bl	801227e <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800c4ba:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800c4be:	3d01      	subs	r5, #1
 800c4c0:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c4c4:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800c4c8:	f043 0302 	orr.w	r3, r3, #2
 800c4cc:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c4d0:	4b14      	ldr	r3, [pc, #80]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c4d2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d915      	bls.n	800c506 <ProcessRadioRxDone+0x6a6>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800c4da:	4b12      	ldr	r3, [pc, #72]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c4dc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d006      	beq.n	800c4f2 <ProcessRadioRxDone+0x692>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800c4e4:	4a0f      	ldr	r2, [pc, #60]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c4e6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c4ea:	f043 0310 	orr.w	r3, r3, #16
 800c4ee:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800c4f2:	f7fe ff31 	bl	800b358 <UpdateRxSlotIdleState>
 800c4f6:	e515      	b.n	800bf24 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c4f8:	4b0a      	ldr	r3, [pc, #40]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800c500:	f7ff f940 	bl	800b784 <PrepareRxDoneAbort>
            break;
 800c504:	e7e4      	b.n	800c4d0 <ProcessRadioRxDone+0x670>
        if( MacCtx.NodeAckRequested == true )
 800c506:	4b07      	ldr	r3, [pc, #28]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c508:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d0e4      	beq.n	800c4da <ProcessRadioRxDone+0x67a>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800c510:	4b04      	ldr	r3, [pc, #16]	; (800c524 <ProcessRadioRxDone+0x6c4>)
 800c512:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800c516:	2b00      	cmp	r3, #0
 800c518:	d0df      	beq.n	800c4da <ProcessRadioRxDone+0x67a>
                OnRetransmitTimeoutTimerEvent( NULL );
 800c51a:	2000      	movs	r0, #0
 800c51c:	f7ff f920 	bl	800b760 <OnRetransmitTimeoutTimerEvent>
 800c520:	e7db      	b.n	800c4da <ProcessRadioRxDone+0x67a>
 800c522:	bf00      	nop
 800c524:	20000d80 	.word	0x20000d80
 800c528:	20008000 	.word	0x20008000

0800c52c <ProcessRadioTxTimeout>:
{
 800c52c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c52e:	4b0f      	ldr	r3, [pc, #60]	; (800c56c <ProcessRadioTxTimeout+0x40>)
 800c530:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c534:	2b02      	cmp	r3, #2
 800c536:	d002      	beq.n	800c53e <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800c538:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <ProcessRadioTxTimeout+0x44>)
 800c53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800c53e:	f7fe ff0b 	bl	800b358 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800c542:	4c0c      	ldr	r4, [pc, #48]	; (800c574 <ProcessRadioTxTimeout+0x48>)
 800c544:	2002      	movs	r0, #2
 800c546:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800c54a:	f002 fe1b 	bl	800f184 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800c54e:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800c552:	b113      	cbz	r3, 800c55a <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800c554:	2201      	movs	r2, #1
 800c556:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c55a:	4a06      	ldr	r2, [pc, #24]	; (800c574 <ProcessRadioTxTimeout+0x48>)
 800c55c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c560:	f043 0310 	orr.w	r3, r3, #16
 800c564:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800c568:	bd10      	pop	{r4, pc}
 800c56a:	bf00      	nop
 800c56c:	20008000 	.word	0x20008000
 800c570:	0801a22c 	.word	0x0801a22c
 800c574:	20000d80 	.word	0x20000d80

0800c578 <CheckForClassBCollision>:
{
 800c578:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c57a:	f002 fba8 	bl	800ecce <LoRaMacClassBIsBeaconExpected>
 800c57e:	b978      	cbnz	r0, 800c5a0 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c580:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <CheckForClassBCollision+0x30>)
 800c582:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c586:	2b01      	cmp	r3, #1
 800c588:	d001      	beq.n	800c58e <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800c58a:	2000      	movs	r0, #0
}
 800c58c:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c58e:	f002 fba0 	bl	800ecd2 <LoRaMacClassBIsPingExpected>
 800c592:	b938      	cbnz	r0, 800c5a4 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c594:	f002 fb9f 	bl	800ecd6 <LoRaMacClassBIsMulticastExpected>
 800c598:	2800      	cmp	r0, #0
 800c59a:	d0f7      	beq.n	800c58c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800c59c:	200f      	movs	r0, #15
 800c59e:	e7f5      	b.n	800c58c <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800c5a0:	200e      	movs	r0, #14
 800c5a2:	e7f3      	b.n	800c58c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800c5a4:	200f      	movs	r0, #15
 800c5a6:	e7f1      	b.n	800c58c <CheckForClassBCollision+0x14>
 800c5a8:	20008000 	.word	0x20008000

0800c5ac <HandleRadioRxErrorTimeout>:
{
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c5b2:	4b34      	ldr	r3, [pc, #208]	; (800c684 <HandleRadioRxErrorTimeout+0xd8>)
 800c5b4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d002      	beq.n	800c5c2 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800c5bc:	4b32      	ldr	r3, [pc, #200]	; (800c688 <HandleRadioRxErrorTimeout+0xdc>)
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c5c2:	f002 fb84 	bl	800ecce <LoRaMacClassBIsBeaconExpected>
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	bb50      	cbnz	r0, 800c620 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c5ca:	4b2e      	ldr	r3, [pc, #184]	; (800c684 <HandleRadioRxErrorTimeout+0xd8>)
 800c5cc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d02c      	beq.n	800c62e <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800c5d4:	2e00      	cmp	r6, #0
 800c5d6:	d152      	bne.n	800c67e <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c5d8:	4b2c      	ldr	r3, [pc, #176]	; (800c68c <HandleRadioRxErrorTimeout+0xe0>)
 800c5da:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d13c      	bne.n	800c65c <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800c5e2:	4b2a      	ldr	r3, [pc, #168]	; (800c68c <HandleRadioRxErrorTimeout+0xe0>)
 800c5e4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800c5e8:	b113      	cbz	r3, 800c5f0 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800c5ea:	4b28      	ldr	r3, [pc, #160]	; (800c68c <HandleRadioRxErrorTimeout+0xe0>)
 800c5ec:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f002 fdc7 	bl	800f184 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800c5f6:	4b23      	ldr	r3, [pc, #140]	; (800c684 <HandleRadioRxErrorTimeout+0xd8>)
 800c5f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c5fa:	f007 ff7d 	bl	80144f8 <UTIL_TIMER_GetElapsedTime>
 800c5fe:	4b23      	ldr	r3, [pc, #140]	; (800c68c <HandleRadioRxErrorTimeout+0xe0>)
 800c600:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800c604:	4298      	cmp	r0, r3
 800c606:	d33a      	bcc.n	800c67e <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800c608:	4c20      	ldr	r4, [pc, #128]	; (800c68c <HandleRadioRxErrorTimeout+0xe0>)
 800c60a:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800c60e:	f007 ffa9 	bl	8014564 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c612:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800c616:	f043 0310 	orr.w	r3, r3, #16
 800c61a:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 800c61e:	e02e      	b.n	800c67e <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800c620:	2002      	movs	r0, #2
 800c622:	f002 fb4a 	bl	800ecba <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c626:	2000      	movs	r0, #0
 800c628:	f002 fb4c 	bl	800ecc4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800c62c:	e7cd      	b.n	800c5ca <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c62e:	f002 fb50 	bl	800ecd2 <LoRaMacClassBIsPingExpected>
 800c632:	4607      	mov	r7, r0
 800c634:	b950      	cbnz	r0, 800c64c <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c636:	f002 fb4e 	bl	800ecd6 <LoRaMacClassBIsMulticastExpected>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	d0ca      	beq.n	800c5d4 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c63e:	2000      	movs	r0, #0
 800c640:	f002 fb3d 	bl	800ecbe <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c644:	2000      	movs	r0, #0
 800c646:	f002 fb3f 	bl	800ecc8 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800c64a:	e018      	b.n	800c67e <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c64c:	2000      	movs	r0, #0
 800c64e:	f002 fb35 	bl	800ecbc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c652:	2000      	movs	r0, #0
 800c654:	f002 fb37 	bl	800ecc6 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800c658:	463e      	mov	r6, r7
 800c65a:	e7ec      	b.n	800c636 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800c65c:	4b0b      	ldr	r3, [pc, #44]	; (800c68c <HandleRadioRxErrorTimeout+0xe0>)
 800c65e:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800c662:	b113      	cbz	r3, 800c66a <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800c664:	4b09      	ldr	r3, [pc, #36]	; (800c68c <HandleRadioRxErrorTimeout+0xe0>)
 800c666:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800c66a:	4620      	mov	r0, r4
 800c66c:	f002 fd8a 	bl	800f184 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800c670:	4a06      	ldr	r2, [pc, #24]	; (800c68c <HandleRadioRxErrorTimeout+0xe0>)
 800c672:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c676:	f043 0310 	orr.w	r3, r3, #16
 800c67a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800c67e:	f7fe fe6b 	bl	800b358 <UpdateRxSlotIdleState>
}
 800c682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c684:	20008000 	.word	0x20008000
 800c688:	0801a22c 	.word	0x0801a22c
 800c68c:	20000d80 	.word	0x20000d80

0800c690 <ProcessRadioRxError>:
{
 800c690:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800c692:	2106      	movs	r1, #6
 800c694:	2005      	movs	r0, #5
 800c696:	f7ff ff89 	bl	800c5ac <HandleRadioRxErrorTimeout>
}
 800c69a:	bd08      	pop	{r3, pc}

0800c69c <ProcessRadioRxTimeout>:
{
 800c69c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800c69e:	2104      	movs	r1, #4
 800c6a0:	2003      	movs	r0, #3
 800c6a2:	f7ff ff83 	bl	800c5ac <HandleRadioRxErrorTimeout>
}
 800c6a6:	bd08      	pop	{r3, pc}

0800c6a8 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c6ac:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800c6ae:	4a14      	ldr	r2, [pc, #80]	; (800c700 <LoRaMacHandleIrqEvents+0x58>)
 800c6b0:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6b6:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800c6ba:	b303      	cbz	r3, 800c6fe <LoRaMacHandleIrqEvents+0x56>
{
 800c6bc:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800c6be:	b2dc      	uxtb	r4, r3
 800c6c0:	f013 0f20 	tst.w	r3, #32
 800c6c4:	d10c      	bne.n	800c6e0 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800c6c6:	f014 0f10 	tst.w	r4, #16
 800c6ca:	d10c      	bne.n	800c6e6 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800c6cc:	f014 0f08 	tst.w	r4, #8
 800c6d0:	d10c      	bne.n	800c6ec <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800c6d2:	f014 0f04 	tst.w	r4, #4
 800c6d6:	d10c      	bne.n	800c6f2 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800c6d8:	f014 0f02 	tst.w	r4, #2
 800c6dc:	d10c      	bne.n	800c6f8 <LoRaMacHandleIrqEvents+0x50>
}
 800c6de:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800c6e0:	f7fe ffbc 	bl	800b65c <ProcessRadioTxDone>
 800c6e4:	e7ef      	b.n	800c6c6 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800c6e6:	f7ff fbbb 	bl	800be60 <ProcessRadioRxDone>
 800c6ea:	e7ef      	b.n	800c6cc <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800c6ec:	f7ff ff1e 	bl	800c52c <ProcessRadioTxTimeout>
 800c6f0:	e7ef      	b.n	800c6d2 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800c6f2:	f7ff ffcd 	bl	800c690 <ProcessRadioRxError>
 800c6f6:	e7ef      	b.n	800c6d8 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800c6f8:	f7ff ffd0 	bl	800c69c <ProcessRadioRxTimeout>
}
 800c6fc:	e7ef      	b.n	800c6de <LoRaMacHandleIrqEvents+0x36>
 800c6fe:	4770      	bx	lr
 800c700:	20000d7c 	.word	0x20000d7c

0800c704 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800c704:	b909      	cbnz	r1, 800c70a <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800c706:	2000      	movs	r0, #0
}
 800c708:	4770      	bx	lr
{
 800c70a:	b510      	push	{r4, lr}
 800c70c:	4604      	mov	r4, r0
 800c70e:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800c710:	f007 fef2 	bl	80144f8 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800c714:	42a0      	cmp	r0, r4
 800c716:	d801      	bhi.n	800c71c <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800c718:	2000      	movs	r0, #0
}
 800c71a:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800c71c:	4b02      	ldr	r3, [pc, #8]	; (800c728 <LoRaMacHandleResponseTimeout+0x24>)
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800c724:	2001      	movs	r0, #1
 800c726:	e7f8      	b.n	800c71a <LoRaMacHandleResponseTimeout+0x16>
 800c728:	20008000 	.word	0x20008000

0800c72c <LoRaMacHandleMlmeRequest>:
{
 800c72c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c72e:	4b14      	ldr	r3, [pc, #80]	; (800c780 <LoRaMacHandleMlmeRequest+0x54>)
 800c730:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800c734:	f013 0f04 	tst.w	r3, #4
 800c738:	d100      	bne.n	800c73c <LoRaMacHandleMlmeRequest+0x10>
}
 800c73a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c73c:	2001      	movs	r0, #1
 800c73e:	f002 fd3f 	bl	800f1c0 <LoRaMacConfirmQueueIsCmdActive>
 800c742:	b178      	cbz	r0, 800c764 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800c744:	2001      	movs	r0, #1
 800c746:	f002 fd05 	bl	800f154 <LoRaMacConfirmQueueGetStatus>
 800c74a:	b918      	cbnz	r0, 800c754 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800c74c:	4b0c      	ldr	r3, [pc, #48]	; (800c780 <LoRaMacHandleMlmeRequest+0x54>)
 800c74e:	2200      	movs	r2, #0
 800c750:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c754:	4a0a      	ldr	r2, [pc, #40]	; (800c780 <LoRaMacHandleMlmeRequest+0x54>)
 800c756:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c75a:	f023 0302 	bic.w	r3, r3, #2
 800c75e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800c762:	e7ea      	b.n	800c73a <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800c764:	2006      	movs	r0, #6
 800c766:	f002 fd2b 	bl	800f1c0 <LoRaMacConfirmQueueIsCmdActive>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d0e5      	beq.n	800c73a <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c76e:	4a04      	ldr	r2, [pc, #16]	; (800c780 <LoRaMacHandleMlmeRequest+0x54>)
 800c770:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c774:	f023 0302 	bic.w	r3, r3, #2
 800c778:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800c77c:	e7dd      	b.n	800c73a <LoRaMacHandleMlmeRequest+0xe>
 800c77e:	bf00      	nop
 800c780:	20000d80 	.word	0x20000d80

0800c784 <SerializeTxFrame>:
{
 800c784:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800c786:	4b0f      	ldr	r3, [pc, #60]	; (800c7c4 <SerializeTxFrame+0x40>)
 800c788:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c78c:	b11b      	cbz	r3, 800c796 <SerializeTxFrame+0x12>
 800c78e:	2b04      	cmp	r3, #4
 800c790:	d00a      	beq.n	800c7a8 <SerializeTxFrame+0x24>
 800c792:	2003      	movs	r0, #3
}
 800c794:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c796:	480c      	ldr	r0, [pc, #48]	; (800c7c8 <SerializeTxFrame+0x44>)
 800c798:	f003 fa57 	bl	800fc4a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c79c:	b968      	cbnz	r0, 800c7ba <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c79e:	4b09      	ldr	r3, [pc, #36]	; (800c7c4 <SerializeTxFrame+0x40>)
 800c7a0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c7a4:	801a      	strh	r2, [r3, #0]
            break;
 800c7a6:	e7f5      	b.n	800c794 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800c7a8:	4807      	ldr	r0, [pc, #28]	; (800c7c8 <SerializeTxFrame+0x44>)
 800c7aa:	f003 fa84 	bl	800fcb6 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c7ae:	b930      	cbnz	r0, 800c7be <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c7b0:	4b04      	ldr	r3, [pc, #16]	; (800c7c4 <SerializeTxFrame+0x40>)
 800c7b2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c7b6:	801a      	strh	r2, [r3, #0]
            break;
 800c7b8:	e7ec      	b.n	800c794 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c7ba:	2011      	movs	r0, #17
 800c7bc:	e7ea      	b.n	800c794 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c7be:	2011      	movs	r0, #17
 800c7c0:	e7e8      	b.n	800c794 <SerializeTxFrame+0x10>
 800c7c2:	bf00      	nop
 800c7c4:	20000d80 	.word	0x20000d80
 800c7c8:	20000e88 	.word	0x20000e88

0800c7cc <ComputeRxWindowParameters>:
{
 800c7cc:	b570      	push	{r4, r5, r6, lr}
 800c7ce:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c7d0:	4c1e      	ldr	r4, [pc, #120]	; (800c84c <ComputeRxWindowParameters+0x80>)
 800c7d2:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800c7d6:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800c7da:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800c7de:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f003 fbac 	bl	800ff40 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c7e8:	4d19      	ldr	r5, [pc, #100]	; (800c850 <ComputeRxWindowParameters+0x84>)
 800c7ea:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c7f2:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800c7f6:	b241      	sxtb	r1, r0
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f003 fb30 	bl	800fe5e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c7fe:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c806:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800c80a:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800c80e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c812:	f003 fb24 	bl	800fe5e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c816:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c818:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800c81c:	440b      	add	r3, r1
 800c81e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c822:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c824:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800c828:	4413      	add	r3, r2
 800c82a:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800c82e:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800c832:	2b04      	cmp	r3, #4
 800c834:	d007      	beq.n	800c846 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c836:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c838:	4419      	add	r1, r3
 800c83a:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c83e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c840:	440a      	add	r2, r1
 800c842:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800c846:	b002      	add	sp, #8
 800c848:	bd70      	pop	{r4, r5, r6, pc}
 800c84a:	bf00      	nop
 800c84c:	20008000 	.word	0x20008000
 800c850:	20000d80 	.word	0x20000d80

0800c854 <VerifyTxFrame>:
{
 800c854:	b510      	push	{r4, lr}
 800c856:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800c858:	2300      	movs	r3, #0
 800c85a:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c85c:	4b0d      	ldr	r3, [pc, #52]	; (800c894 <VerifyTxFrame+0x40>)
 800c85e:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 800c862:	b914      	cbnz	r4, 800c86a <VerifyTxFrame+0x16>
}
 800c864:	4620      	mov	r0, r4
 800c866:	b002      	add	sp, #8
 800c868:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c86a:	a801      	add	r0, sp, #4
 800c86c:	f002 fb6e 	bl	800ef4c <LoRaMacCommandsGetSizeSerializedCmds>
 800c870:	4604      	mov	r4, r0
 800c872:	b968      	cbnz	r0, 800c890 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800c874:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c878:	4b06      	ldr	r3, [pc, #24]	; (800c894 <VerifyTxFrame+0x40>)
 800c87a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800c87e:	4b06      	ldr	r3, [pc, #24]	; (800c898 <VerifyTxFrame+0x44>)
 800c880:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800c884:	f7fe fed8 	bl	800b638 <ValidatePayloadLength>
 800c888:	2800      	cmp	r0, #0
 800c88a:	d1eb      	bne.n	800c864 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800c88c:	2408      	movs	r4, #8
 800c88e:	e7e9      	b.n	800c864 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c890:	2413      	movs	r4, #19
 800c892:	e7e7      	b.n	800c864 <VerifyTxFrame+0x10>
 800c894:	20008000 	.word	0x20008000
 800c898:	20000d80 	.word	0x20000d80

0800c89c <SecureFrame>:
{
 800c89c:	b530      	push	{r4, r5, lr}
 800c89e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800c8a4:	4b18      	ldr	r3, [pc, #96]	; (800c908 <SecureFrame+0x6c>)
 800c8a6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c8aa:	b133      	cbz	r3, 800c8ba <SecureFrame+0x1e>
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	2b04      	cmp	r3, #4
 800c8b2:	d00b      	beq.n	800c8cc <SecureFrame+0x30>
 800c8b4:	2003      	movs	r0, #3
}
 800c8b6:	b003      	add	sp, #12
 800c8b8:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c8ba:	4814      	ldr	r0, [pc, #80]	; (800c90c <SecureFrame+0x70>)
 800c8bc:	f002 ff30 	bl	800f720 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c8c0:	b9d8      	cbnz	r0, 800c8fa <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c8c2:	4b11      	ldr	r3, [pc, #68]	; (800c908 <SecureFrame+0x6c>)
 800c8c4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c8c8:	801a      	strh	r2, [r3, #0]
            break;
 800c8ca:	e7f4      	b.n	800c8b6 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800c8cc:	a801      	add	r0, sp, #4
 800c8ce:	f002 fedb 	bl	800f688 <LoRaMacCryptoGetFCntUp>
 800c8d2:	b9a0      	cbnz	r0, 800c8fe <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800c8d4:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <SecureFrame+0x6c>)
 800c8d6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c8da:	b113      	cbz	r3, 800c8e2 <SecureFrame+0x46>
                fCntUp -= 1;
 800c8dc:	9b01      	ldr	r3, [sp, #4]
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800c8e2:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <SecureFrame+0x70>)
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	9801      	ldr	r0, [sp, #4]
 800c8ea:	f002 ff3f 	bl	800f76c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c8ee:	b940      	cbnz	r0, 800c902 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c8f0:	4b05      	ldr	r3, [pc, #20]	; (800c908 <SecureFrame+0x6c>)
 800c8f2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c8f6:	801a      	strh	r2, [r3, #0]
            break;
 800c8f8:	e7dd      	b.n	800c8b6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c8fa:	2011      	movs	r0, #17
 800c8fc:	e7db      	b.n	800c8b6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800c8fe:	2012      	movs	r0, #18
 800c900:	e7d9      	b.n	800c8b6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c902:	2011      	movs	r0, #17
 800c904:	e7d7      	b.n	800c8b6 <SecureFrame+0x1a>
 800c906:	bf00      	nop
 800c908:	20000d80 	.word	0x20000d80
 800c90c:	20000e88 	.word	0x20000e88

0800c910 <SendFrameOnChannel>:
{
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800c91c:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c920:	4d36      	ldr	r5, [pc, #216]	; (800c9fc <SendFrameOnChannel+0xec>)
 800c922:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800c926:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c92a:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800c92e:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800c932:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800c936:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c938:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800c93c:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800c93e:	4c30      	ldr	r4, [pc, #192]	; (800ca00 <SendFrameOnChannel+0xf0>)
 800c940:	8823      	ldrh	r3, [r4, #0]
 800c942:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c946:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 800c94a:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800c94e:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800c952:	f10d 0207 	add.w	r2, sp, #7
 800c956:	a902      	add	r1, sp, #8
 800c958:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800c95c:	f003 fa96 	bl	800fe8c <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c966:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800c96a:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800c96e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c972:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800c976:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800c97a:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 800c97e:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800c982:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800c986:	f002 f9a8 	bl	800ecda <LoRaMacClassBIsBeaconModeActive>
 800c98a:	bb60      	cbnz	r0, 800c9e6 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c98c:	4b1b      	ldr	r3, [pc, #108]	; (800c9fc <SendFrameOnChannel+0xec>)
 800c98e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c992:	2b01      	cmp	r3, #1
 800c994:	d02f      	beq.n	800c9f6 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800c996:	f002 f9a3 	bl	800ece0 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800c99a:	4b18      	ldr	r3, [pc, #96]	; (800c9fc <SendFrameOnChannel+0xec>)
 800c99c:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800c9a0:	4b17      	ldr	r3, [pc, #92]	; (800ca00 <SendFrameOnChannel+0xf0>)
 800c9a2:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800c9a6:	b2c0      	uxtb	r0, r0
 800c9a8:	f7ff ff78 	bl	800c89c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	b9b8      	cbnz	r0, 800c9e0 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800c9b0:	4813      	ldr	r0, [pc, #76]	; (800ca00 <SendFrameOnChannel+0xf0>)
 800c9b2:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800c9b6:	f043 0302 	orr.w	r3, r3, #2
 800c9ba:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800c9be:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800c9ca:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800c9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <SendFrameOnChannel+0xf4>)
 800c9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d8:	f830 1b02 	ldrh.w	r1, [r0], #2
 800c9dc:	b2c9      	uxtb	r1, r1
 800c9de:	4798      	blx	r3
}
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	b006      	add	sp, #24
 800c9e4:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800c9e6:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 800c9ea:	f002 f988 	bl	800ecfe <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d0cc      	beq.n	800c98c <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800c9f2:	2410      	movs	r4, #16
 800c9f4:	e7f4      	b.n	800c9e0 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800c9f6:	f002 f984 	bl	800ed02 <LoRaMacClassBStopRxSlots>
 800c9fa:	e7cc      	b.n	800c996 <SendFrameOnChannel+0x86>
 800c9fc:	20008000 	.word	0x20008000
 800ca00:	20000d80 	.word	0x20000d80
 800ca04:	0801a22c 	.word	0x0801a22c

0800ca08 <ScheduleTx>:
{
 800ca08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca0c:	b08c      	sub	sp, #48	; 0x30
 800ca0e:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800ca10:	f7ff fdb2 	bl	800c578 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800ca14:	4604      	mov	r4, r0
 800ca16:	b118      	cbz	r0, 800ca20 <ScheduleTx+0x18>
}
 800ca18:	4620      	mov	r0, r4
 800ca1a:	b00c      	add	sp, #48	; 0x30
 800ca1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800ca20:	f7fe fcfe 	bl	800b420 <CalculateBackOff>
    status = SerializeTxFrame( );
 800ca24:	f7ff feae 	bl	800c784 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800ca28:	4604      	mov	r4, r0
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d1f4      	bne.n	800ca18 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800ca2e:	4e36      	ldr	r6, [pc, #216]	; (800cb08 <ScheduleTx+0x100>)
 800ca30:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800ca32:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ca34:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800ca38:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800ca3c:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800ca40:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ca44:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ca48:	4640      	mov	r0, r8
 800ca4a:	f007 fcbf 	bl	80143cc <SysTimeGetMcuTime>
 800ca4e:	af02      	add	r7, sp, #8
 800ca50:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800ca5a:	e898 0006 	ldmia.w	r8, {r1, r2}
 800ca5e:	4638      	mov	r0, r7
 800ca60:	f007 fc51 	bl	8014306 <SysTimeSub>
 800ca64:	ab07      	add	r3, sp, #28
 800ca66:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ca6a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800ca6e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ca70:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800ca72:	2300      	movs	r3, #0
 800ca74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800ca7e:	4b23      	ldr	r3, [pc, #140]	; (800cb0c <ScheduleTx+0x104>)
 800ca80:	881b      	ldrh	r3, [r3, #0]
 800ca82:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ca86:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800ca8a:	b92b      	cbnz	r3, 800ca98 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800ca92:	2300      	movs	r3, #0
 800ca94:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800ca98:	4a1c      	ldr	r2, [pc, #112]	; (800cb0c <ScheduleTx+0x104>)
 800ca9a:	481b      	ldr	r0, [pc, #108]	; (800cb08 <ScheduleTx+0x100>)
 800ca9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800caa0:	9300      	str	r3, [sp, #0]
 800caa2:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800caa6:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 800caaa:	a904      	add	r1, sp, #16
 800caac:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800cab0:	f003 fa39 	bl	800ff26 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800cab4:	b1c0      	cbz	r0, 800cae8 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800cab6:	280b      	cmp	r0, #11
 800cab8:	d124      	bne.n	800cb04 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800caba:	4a14      	ldr	r2, [pc, #80]	; (800cb0c <ScheduleTx+0x104>)
 800cabc:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 800cac0:	b191      	cbz	r1, 800cae8 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800cac2:	b90d      	cbnz	r5, 800cac8 <ScheduleTx+0xc0>
                return status;
 800cac4:	4604      	mov	r4, r0
 800cac6:	e7a7      	b.n	800ca18 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800cac8:	4615      	mov	r5, r2
 800caca:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800cace:	f042 0220 	orr.w	r2, r2, #32
 800cad2:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800cad6:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800cada:	4628      	mov	r0, r5
 800cadc:	f007 fde2 	bl	80146a4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800cae0:	4628      	mov	r0, r5
 800cae2:	f007 fd99 	bl	8014618 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800cae6:	e797      	b.n	800ca18 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800cae8:	f7ff fe70 	bl	800c7cc <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800caec:	f7ff feb2 	bl	800c854 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800caf0:	4604      	mov	r4, r0
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d190      	bne.n	800ca18 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800caf6:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <ScheduleTx+0x104>)
 800caf8:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800cafc:	f7ff ff08 	bl	800c910 <SendFrameOnChannel>
 800cb00:	4604      	mov	r4, r0
 800cb02:	e789      	b.n	800ca18 <ScheduleTx+0x10>
            return status;
 800cb04:	4604      	mov	r4, r0
 800cb06:	e787      	b.n	800ca18 <ScheduleTx+0x10>
 800cb08:	20008000 	.word	0x20008000
 800cb0c:	20000d80 	.word	0x20000d80

0800cb10 <OnTxDelayedTimerEvent>:
{
 800cb10:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800cb12:	4c16      	ldr	r4, [pc, #88]	; (800cb6c <OnTxDelayedTimerEvent+0x5c>)
 800cb14:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800cb18:	f007 fd24 	bl	8014564 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800cb1c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800cb20:	f023 0320 	bic.w	r3, r3, #32
 800cb24:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800cb28:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800cb2c:	4b10      	ldr	r3, [pc, #64]	; (800cb70 <OnTxDelayedTimerEvent+0x60>)
 800cb2e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800cb32:	f7ff fde7 	bl	800c704 <LoRaMacHandleResponseTimeout>
 800cb36:	b100      	cbz	r0, 800cb3a <OnTxDelayedTimerEvent+0x2a>
}
 800cb38:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800cb3a:	2001      	movs	r0, #1
 800cb3c:	f7ff ff64 	bl	800ca08 <ScheduleTx>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d0f9      	beq.n	800cb38 <OnTxDelayedTimerEvent+0x28>
 800cb44:	280b      	cmp	r0, #11
 800cb46:	d0f7      	beq.n	800cb38 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800cb48:	4b09      	ldr	r3, [pc, #36]	; (800cb70 <OnTxDelayedTimerEvent+0x60>)
 800cb4a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800cb4e:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800cb52:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800cb56:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800cb5a:	2009      	movs	r0, #9
 800cb5c:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800cb60:	f002 fb10 	bl	800f184 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800cb64:	f7fe fcee 	bl	800b544 <StopRetransmission>
            break;
 800cb68:	e7e6      	b.n	800cb38 <OnTxDelayedTimerEvent+0x28>
 800cb6a:	bf00      	nop
 800cb6c:	20000d80 	.word	0x20000d80
 800cb70:	20008000 	.word	0x20008000

0800cb74 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800cb74:	4b1c      	ldr	r3, [pc, #112]	; (800cbe8 <LoRaMacHandleMcpsRequest+0x74>)
 800cb76:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800cb7a:	f013 0f01 	tst.w	r3, #1
 800cb7e:	d032      	beq.n	800cbe6 <LoRaMacHandleMcpsRequest+0x72>
{
 800cb80:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800cb82:	4b19      	ldr	r3, [pc, #100]	; (800cbe8 <LoRaMacHandleMcpsRequest+0x74>)
 800cb84:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800cb88:	b12b      	cbz	r3, 800cb96 <LoRaMacHandleMcpsRequest+0x22>
 800cb8a:	2b03      	cmp	r3, #3
 800cb8c:	d003      	beq.n	800cb96 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d006      	beq.n	800cba0 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800cb92:	2000      	movs	r0, #0
 800cb94:	e002      	b.n	800cb9c <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800cb96:	f7fe fc9b 	bl	800b4d0 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800cb9a:	b940      	cbnz	r0, 800cbae <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800cb9c:	b1b8      	cbz	r0, 800cbce <LoRaMacHandleMcpsRequest+0x5a>
}
 800cb9e:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800cba0:	4b11      	ldr	r3, [pc, #68]	; (800cbe8 <LoRaMacHandleMcpsRequest+0x74>)
 800cba2:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800cba6:	b183      	cbz	r3, 800cbca <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800cba8:	f7fe fcae 	bl	800b508 <CheckRetransConfirmedUplink>
 800cbac:	e7f5      	b.n	800cb9a <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800cbae:	4c0e      	ldr	r4, [pc, #56]	; (800cbe8 <LoRaMacHandleMcpsRequest+0x74>)
 800cbb0:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800cbb4:	f007 fcd6 	bl	8014564 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800cbb8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800cbbc:	f023 0320 	bic.w	r3, r3, #32
 800cbc0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800cbc4:	f7fe fcbe 	bl	800b544 <StopRetransmission>
 800cbc8:	e7e9      	b.n	800cb9e <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800cbca:	2001      	movs	r0, #1
 800cbcc:	e7e6      	b.n	800cb9c <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800cbce:	4b06      	ldr	r3, [pc, #24]	; (800cbe8 <LoRaMacHandleMcpsRequest+0x74>)
 800cbd0:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800cbd4:	f36f 1204 	bfc	r2, #4, #1
 800cbd8:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800cbdc:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800cbe0:	f7ff ff96 	bl	800cb10 <OnTxDelayedTimerEvent>
}
 800cbe4:	e7db      	b.n	800cb9e <LoRaMacHandleMcpsRequest+0x2a>
 800cbe6:	4770      	bx	lr
 800cbe8:	20000d80 	.word	0x20000d80

0800cbec <LoRaMacHandleRequestEvents>:
{
 800cbec:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800cbee:	4b22      	ldr	r3, [pc, #136]	; (800cc78 <LoRaMacHandleRequestEvents+0x8c>)
 800cbf0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cbf4:	bb7b      	cbnz	r3, 800cc56 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800cbf6:	4b20      	ldr	r3, [pc, #128]	; (800cc78 <LoRaMacHandleRequestEvents+0x8c>)
 800cbf8:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 800cbfc:	f014 0501 	ands.w	r5, r4, #1
 800cc00:	d005      	beq.n	800cc0e <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800cc02:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800cc06:	f36f 0200 	bfc	r2, #0, #1
 800cc0a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800cc0e:	4b1a      	ldr	r3, [pc, #104]	; (800cc78 <LoRaMacHandleRequestEvents+0x8c>)
 800cc10:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800cc14:	f013 0f04 	tst.w	r3, #4
 800cc18:	d006      	beq.n	800cc28 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800cc1a:	4b17      	ldr	r3, [pc, #92]	; (800cc78 <LoRaMacHandleRequestEvents+0x8c>)
 800cc1c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800cc20:	f36f 0282 	bfc	r2, #2, #1
 800cc24:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800cc28:	2001      	movs	r0, #1
 800cc2a:	f7fe fba9 	bl	800b380 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800cc2e:	b135      	cbz	r5, 800cc3e <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800cc30:	4811      	ldr	r0, [pc, #68]	; (800cc78 <LoRaMacHandleRequestEvents+0x8c>)
 800cc32:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 800cc3c:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800cc3e:	f014 0f04 	tst.w	r4, #4
 800cc42:	d109      	bne.n	800cc58 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800cc44:	f002 f84d 	bl	800ece2 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800cc48:	4b0b      	ldr	r3, [pc, #44]	; (800cc78 <LoRaMacHandleRequestEvents+0x8c>)
 800cc4a:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800cc4e:	f36f 1204 	bfc	r2, #4, #1
 800cc52:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800cc56:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800cc58:	4808      	ldr	r0, [pc, #32]	; (800cc7c <LoRaMacHandleRequestEvents+0x90>)
 800cc5a:	f002 fabd 	bl	800f1d8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800cc5e:	f002 faf3 	bl	800f248 <LoRaMacConfirmQueueGetCnt>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	d0ee      	beq.n	800cc44 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800cc66:	4a04      	ldr	r2, [pc, #16]	; (800cc78 <LoRaMacHandleRequestEvents+0x8c>)
 800cc68:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800cc6c:	f043 0304 	orr.w	r3, r3, #4
 800cc70:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800cc74:	e7e6      	b.n	800cc44 <LoRaMacHandleRequestEvents+0x58>
 800cc76:	bf00      	nop
 800cc78:	20000d80 	.word	0x20000d80
 800cc7c:	200011d4 	.word	0x200011d4

0800cc80 <OpenContinuousRxCWindow>:
{
 800cc80:	b570      	push	{r4, r5, r6, lr}
 800cc82:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800cc84:	4c16      	ldr	r4, [pc, #88]	; (800cce0 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cc86:	4d17      	ldr	r5, [pc, #92]	; (800cce4 <OpenContinuousRxCWindow+0x64>)
 800cc88:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800cc8c:	9600      	str	r6, [sp, #0]
 800cc8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cc90:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800cc94:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800cc98:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800cc9c:	f003 f8df 	bl	800fe5e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cca0:	2302      	movs	r3, #2
 800cca2:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cca6:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800ccaa:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ccb4:	f205 4224 	addw	r2, r5, #1060	; 0x424
 800ccb8:	4631      	mov	r1, r6
 800ccba:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ccbe:	f003 f8da 	bl	800fe76 <RegionRxConfig>
 800ccc2:	b158      	cbz	r0, 800ccdc <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800ccc4:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800ccc8:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800cccc:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <OpenContinuousRxCWindow+0x68>)
 800ccce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800ccd4:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800ccd8:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800ccdc:	b002      	add	sp, #8
 800ccde:	bd70      	pop	{r4, r5, r6, pc}
 800cce0:	20008000 	.word	0x20008000
 800cce4:	20000d80 	.word	0x20000d80
 800cce8:	0801a22c 	.word	0x0801a22c

0800ccec <RxWindowSetup>:
{
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800ccf0:	f007 fc38 	bl	8014564 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800ccf4:	4b0c      	ldr	r3, [pc, #48]	; (800cd28 <RxWindowSetup+0x3c>)
 800ccf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf8:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ccfa:	4a0c      	ldr	r2, [pc, #48]	; (800cd2c <RxWindowSetup+0x40>)
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	4b0c      	ldr	r3, [pc, #48]	; (800cd30 <RxWindowSetup+0x44>)
 800cd00:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cd04:	f003 f8b7 	bl	800fe76 <RegionRxConfig>
 800cd08:	b160      	cbz	r0, 800cd24 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800cd0a:	4d0a      	ldr	r5, [pc, #40]	; (800cd34 <RxWindowSetup+0x48>)
 800cd0c:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800cd10:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <RxWindowSetup+0x3c>)
 800cd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd18:	4a05      	ldr	r2, [pc, #20]	; (800cd30 <RxWindowSetup+0x44>)
 800cd1a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800cd1c:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800cd1e:	7ce3      	ldrb	r3, [r4, #19]
 800cd20:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800cd24:	bd38      	pop	{r3, r4, r5, pc}
 800cd26:	bf00      	nop
 800cd28:	0801a22c 	.word	0x0801a22c
 800cd2c:	200011a4 	.word	0x200011a4
 800cd30:	20008000 	.word	0x20008000
 800cd34:	20000d80 	.word	0x20000d80

0800cd38 <OnRxWindow2TimerEvent>:
{
 800cd38:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800cd3a:	4b13      	ldr	r3, [pc, #76]	; (800cd88 <OnRxWindow2TimerEvent+0x50>)
 800cd3c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800cd40:	b903      	cbnz	r3, 800cd44 <OnRxWindow2TimerEvent+0xc>
}
 800cd42:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800cd44:	4810      	ldr	r0, [pc, #64]	; (800cd88 <OnRxWindow2TimerEvent+0x50>)
 800cd46:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800cd4a:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800cd4e:	4b0f      	ldr	r3, [pc, #60]	; (800cd8c <OnRxWindow2TimerEvent+0x54>)
 800cd50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cd52:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cd56:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cd5a:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cd5e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800cd62:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800cd66:	2200      	movs	r2, #0
 800cd68:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cd72:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800cd76:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800cd7a:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800cd7e:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800cd82:	f7ff ffb3 	bl	800ccec <RxWindowSetup>
 800cd86:	e7dc      	b.n	800cd42 <OnRxWindow2TimerEvent+0xa>
 800cd88:	20000d80 	.word	0x20000d80
 800cd8c:	20008000 	.word	0x20008000

0800cd90 <OnRxWindow1TimerEvent>:
{
 800cd90:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800cd92:	4811      	ldr	r0, [pc, #68]	; (800cdd8 <OnRxWindow1TimerEvent+0x48>)
 800cd94:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800cd98:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800cd9c:	4b0f      	ldr	r3, [pc, #60]	; (800cddc <OnRxWindow1TimerEvent+0x4c>)
 800cd9e:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800cda2:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cda6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cdaa:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cdae:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800cdb2:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800cdbc:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cdc0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800cdc4:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800cdc8:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800cdcc:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800cdd0:	f7ff ff8c 	bl	800ccec <RxWindowSetup>
}
 800cdd4:	bd08      	pop	{r3, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20000d80 	.word	0x20000d80
 800cddc:	20008000 	.word	0x20008000

0800cde0 <LoRaMacHandleNvm>:
{
 800cde0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800cde2:	4b31      	ldr	r3, [pc, #196]	; (800cea8 <LoRaMacHandleNvm+0xc8>)
 800cde4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cde8:	b103      	cbz	r3, 800cdec <LoRaMacHandleNvm+0xc>
}
 800cdea:	bd38      	pop	{r3, r4, r5, pc}
 800cdec:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800cdee:	2124      	movs	r1, #36	; 0x24
 800cdf0:	f005 fa66 	bl	80122c0 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800cdf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdf6:	4283      	cmp	r3, r0
 800cdf8:	d053      	beq.n	800cea2 <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800cdfa:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800cdfc:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800cdfe:	211c      	movs	r1, #28
 800ce00:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ce04:	f005 fa5c 	bl	80122c0 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800ce08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ce0a:	4283      	cmp	r3, r0
 800ce0c:	d002      	beq.n	800ce14 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800ce0e:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ce10:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ce14:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ce18:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800ce1c:	f005 fa50 	bl	80122c0 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800ce20:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800ce24:	4283      	cmp	r3, r0
 800ce26:	d003      	beq.n	800ce30 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800ce28:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ce2c:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ce30:	21d4      	movs	r1, #212	; 0xd4
 800ce32:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800ce36:	f005 fa43 	bl	80122c0 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800ce3a:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800ce3e:	4283      	cmp	r3, r0
 800ce40:	d003      	beq.n	800ce4a <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800ce42:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ce46:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ce4a:	2110      	movs	r1, #16
 800ce4c:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800ce50:	f005 fa36 	bl	80122c0 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ce54:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800ce58:	4283      	cmp	r3, r0
 800ce5a:	d003      	beq.n	800ce64 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800ce5c:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ce60:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ce64:	f44f 715e 	mov.w	r1, #888	; 0x378
 800ce68:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800ce6c:	f005 fa28 	bl	80122c0 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ce70:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800ce74:	4283      	cmp	r3, r0
 800ce76:	d003      	beq.n	800ce80 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800ce78:	f8c4 05b0 	str.w	r0, [r4, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ce7c:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ce80:	2114      	movs	r1, #20
 800ce82:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800ce86:	f005 fa1b 	bl	80122c0 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800ce8a:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800ce8e:	4283      	cmp	r3, r0
 800ce90:	d003      	beq.n	800ce9a <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800ce92:	f8c4 05c8 	str.w	r0, [r4, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800ce96:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f7fe fb94 	bl	800b5c8 <CallNvmDataChangeCallback>
 800cea0:	e7a3      	b.n	800cdea <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800cea2:	2500      	movs	r5, #0
 800cea4:	e7ab      	b.n	800cdfe <LoRaMacHandleNvm+0x1e>
 800cea6:	bf00      	nop
 800cea8:	20000d80 	.word	0x20000d80

0800ceac <RestoreNvmData>:
{
 800ceac:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800ceae:	4b3d      	ldr	r3, [pc, #244]	; (800cfa4 <RestoreNvmData+0xf8>)
 800ceb0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d001      	beq.n	800cebc <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800ceb8:	2001      	movs	r0, #1
}
 800ceba:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800cebc:	4c3a      	ldr	r4, [pc, #232]	; (800cfa8 <RestoreNvmData+0xfc>)
 800cebe:	2124      	movs	r1, #36	; 0x24
 800cec0:	4620      	mov	r0, r4
 800cec2:	f005 f9fd 	bl	80122c0 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800cec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cec8:	4283      	cmp	r3, r0
 800ceca:	d001      	beq.n	800ced0 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cecc:	2017      	movs	r0, #23
 800cece:	e7f4      	b.n	800ceba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800ced0:	211c      	movs	r1, #28
 800ced2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ced6:	f005 f9f3 	bl	80122c0 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800ceda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cedc:	4283      	cmp	r3, r0
 800cede:	d001      	beq.n	800cee4 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cee0:	2017      	movs	r0, #23
 800cee2:	e7ea      	b.n	800ceba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800cee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cee8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800ceec:	f005 f9e8 	bl	80122c0 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800cef0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800cef4:	4283      	cmp	r3, r0
 800cef6:	d001      	beq.n	800cefc <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cef8:	2017      	movs	r0, #23
 800cefa:	e7de      	b.n	800ceba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800cefc:	21d4      	movs	r1, #212	; 0xd4
 800cefe:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800cf02:	f005 f9dd 	bl	80122c0 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800cf06:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800cf0a:	4283      	cmp	r3, r0
 800cf0c:	d001      	beq.n	800cf12 <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cf0e:	2017      	movs	r0, #23
 800cf10:	e7d3      	b.n	800ceba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800cf12:	2110      	movs	r1, #16
 800cf14:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800cf18:	f005 f9d2 	bl	80122c0 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800cf1c:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800cf20:	4283      	cmp	r3, r0
 800cf22:	d001      	beq.n	800cf28 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cf24:	2017      	movs	r0, #23
 800cf26:	e7c8      	b.n	800ceba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800cf28:	f44f 715e 	mov.w	r1, #888	; 0x378
 800cf2c:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800cf30:	f005 f9c6 	bl	80122c0 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800cf34:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800cf38:	4283      	cmp	r3, r0
 800cf3a:	d001      	beq.n	800cf40 <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cf3c:	2017      	movs	r0, #23
 800cf3e:	e7bc      	b.n	800ceba <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800cf40:	2114      	movs	r1, #20
 800cf42:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800cf46:	f005 f9bb 	bl	80122c0 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800cf4a:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800cf4e:	4283      	cmp	r3, r0
 800cf50:	d001      	beq.n	800cf56 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cf52:	2017      	movs	r0, #23
 800cf54:	e7b1      	b.n	800ceba <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800cf56:	4625      	mov	r5, r4
 800cf58:	4c14      	ldr	r4, [pc, #80]	; (800cfac <RestoreNvmData+0x100>)
 800cf5a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800cf5e:	4629      	mov	r1, r5
 800cf60:	4620      	mov	r0, r4
 800cf62:	f005 f98c 	bl	801227e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800cf66:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	f005 f99e 	bl	80122ae <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800cf72:	4b0c      	ldr	r3, [pc, #48]	; (800cfa4 <RestoreNvmData+0xf8>)
 800cf74:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800cf78:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800cf7c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800cf7e:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cf82:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800cf86:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cf90:	2202      	movs	r2, #2
 800cf92:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800cf96:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <RestoreNvmData+0x104>)
 800cf98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf9a:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800cf9e:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	e78a      	b.n	800ceba <RestoreNvmData+0xe>
 800cfa4:	20000d80 	.word	0x20000d80
 800cfa8:	200085cc 	.word	0x200085cc
 800cfac:	20008000 	.word	0x20008000
 800cfb0:	0801a22c 	.word	0x0801a22c

0800cfb4 <OnRadioRxTimeout>:
{
 800cfb4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800cfb6:	4a07      	ldr	r2, [pc, #28]	; (800cfd4 <OnRadioRxTimeout+0x20>)
 800cfb8:	7813      	ldrb	r3, [r2, #0]
 800cfba:	f043 0302 	orr.w	r3, r3, #2
 800cfbe:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800cfc0:	f7fe faea 	bl	800b598 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <OnRadioRxTimeout+0x24>)
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	2100      	movs	r1, #0
 800cfca:	2002      	movs	r0, #2
 800cfcc:	f007 f834 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 800cfd0:	bd08      	pop	{r3, pc}
 800cfd2:	bf00      	nop
 800cfd4:	20000d7c 	.word	0x20000d7c
 800cfd8:	08019b4c 	.word	0x08019b4c

0800cfdc <OnRadioTxTimeout>:
{
 800cfdc:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800cfde:	4a07      	ldr	r2, [pc, #28]	; (800cffc <OnRadioTxTimeout+0x20>)
 800cfe0:	7813      	ldrb	r3, [r2, #0]
 800cfe2:	f043 0308 	orr.w	r3, r3, #8
 800cfe6:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800cfe8:	f7fe fad6 	bl	800b598 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800cfec:	4b04      	ldr	r3, [pc, #16]	; (800d000 <OnRadioTxTimeout+0x24>)
 800cfee:	2201      	movs	r2, #1
 800cff0:	2100      	movs	r1, #0
 800cff2:	2002      	movs	r0, #2
 800cff4:	f007 f820 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 800cff8:	bd08      	pop	{r3, pc}
 800cffa:	bf00      	nop
 800cffc:	20000d7c 	.word	0x20000d7c
 800d000:	08019b5c 	.word	0x08019b5c

0800d004 <OnRadioRxDone>:
{
 800d004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d008:	4680      	mov	r8, r0
 800d00a:	460f      	mov	r7, r1
 800d00c:	4616      	mov	r6, r2
 800d00e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d010:	f007 fa68 	bl	80144e4 <UTIL_TIMER_GetCurrentTime>
 800d014:	4c0c      	ldr	r4, [pc, #48]	; (800d048 <OnRadioRxDone+0x44>)
 800d016:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800d018:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800d01c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800d01e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800d020:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800d022:	4b0a      	ldr	r3, [pc, #40]	; (800d04c <OnRadioRxDone+0x48>)
 800d024:	781a      	ldrb	r2, [r3, #0]
 800d026:	f042 0210 	orr.w	r2, r2, #16
 800d02a:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800d02c:	b2d2      	uxtb	r2, r2
 800d02e:	f042 0201 	orr.w	r2, r2, #1
 800d032:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800d034:	f7fe fab0 	bl	800b598 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d038:	4b05      	ldr	r3, [pc, #20]	; (800d050 <OnRadioRxDone+0x4c>)
 800d03a:	2201      	movs	r2, #1
 800d03c:	2100      	movs	r1, #0
 800d03e:	2002      	movs	r0, #2
 800d040:	f006 fffa 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 800d044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d048:	2000132c 	.word	0x2000132c
 800d04c:	20000d7c 	.word	0x20000d7c
 800d050:	08019b6c 	.word	0x08019b6c

0800d054 <OnRadioTxDone>:
{
 800d054:	b510      	push	{r4, lr}
 800d056:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d058:	f007 fa44 	bl	80144e4 <UTIL_TIMER_GetCurrentTime>
 800d05c:	4b0c      	ldr	r3, [pc, #48]	; (800d090 <OnRadioTxDone+0x3c>)
 800d05e:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d060:	466c      	mov	r4, sp
 800d062:	4620      	mov	r0, r4
 800d064:	f007 f990 	bl	8014388 <SysTimeGet>
 800d068:	4b0a      	ldr	r3, [pc, #40]	; (800d094 <OnRadioTxDone+0x40>)
 800d06a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d06e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800d072:	4a09      	ldr	r2, [pc, #36]	; (800d098 <OnRadioTxDone+0x44>)
 800d074:	7813      	ldrb	r3, [r2, #0]
 800d076:	f043 0320 	orr.w	r3, r3, #32
 800d07a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800d07c:	f7fe fa8c 	bl	800b598 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d080:	4b06      	ldr	r3, [pc, #24]	; (800d09c <OnRadioTxDone+0x48>)
 800d082:	2201      	movs	r2, #1
 800d084:	2100      	movs	r1, #0
 800d086:	2002      	movs	r0, #2
 800d088:	f006 ffd6 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 800d08c:	b002      	add	sp, #8
 800d08e:	bd10      	pop	{r4, pc}
 800d090:	2000133c 	.word	0x2000133c
 800d094:	200010b8 	.word	0x200010b8
 800d098:	20000d7c 	.word	0x20000d7c
 800d09c:	08019b7c 	.word	0x08019b7c

0800d0a0 <ResetMacParameters>:
{
 800d0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0a2:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 800d0a4:	b918      	cbnz	r0, 800d0ae <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800d0a6:	4b61      	ldr	r3, [pc, #388]	; (800d22c <ResetMacParameters+0x18c>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800d0ae:	4c5f      	ldr	r4, [pc, #380]	; (800d22c <ResetMacParameters+0x18c>)
 800d0b0:	2500      	movs	r5, #0
 800d0b2:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800d0b4:	4e5e      	ldr	r6, [pc, #376]	; (800d230 <ResetMacParameters+0x190>)
 800d0b6:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800d0ba:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800d0be:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800d0c2:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800d0c6:	2701      	movs	r7, #1
 800d0c8:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d0cc:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800d0d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d0d4:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800d0d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800d0dc:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800d0e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800d0e4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800d0e8:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800d0ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0f0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800d0f4:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800d0f8:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800d0fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d100:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800d104:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800d108:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800d10c:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800d110:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800d114:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800d118:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800d11c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800d120:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800d124:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800d128:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800d12c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800d130:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800d134:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800d138:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800d13c:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800d140:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800d144:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800d148:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800d14c:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800d150:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800d154:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800d158:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800d15c:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800d160:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800d164:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d168:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800d16c:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d16e:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800d172:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800d174:	4b2f      	ldr	r3, [pc, #188]	; (800d234 <ResetMacParameters+0x194>)
 800d176:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d178:	a901      	add	r1, sp, #4
 800d17a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d17e:	f002 fe4a 	bl	800fe16 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800d182:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800d186:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800d18a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d18c:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d190:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800d194:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d198:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800d19c:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800d1a0:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800d1a4:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d1a8:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800d1ac:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800d1b0:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800d1b4:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800d1b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d1bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1be:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800d1c2:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d1c6:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800d1d0:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800d1d2:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800d1d4:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800d1d8:	b11b      	cbz	r3, 800d1e2 <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800d1de:	695b      	ldr	r3, [r3, #20]
 800d1e0:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800d1e2:	4b13      	ldr	r3, [pc, #76]	; (800d230 <ResetMacParameters+0x190>)
 800d1e4:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 800d1e8:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800d1ea:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800d1ee:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800d1f0:	f203 4254 	addw	r2, r3, #1108	; 0x454
 800d1f4:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800d1f6:	f203 4391 	addw	r3, r3, #1169	; 0x491
 800d1fa:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800d1fc:	4a0b      	ldr	r2, [pc, #44]	; (800d22c <ResetMacParameters+0x18c>)
 800d1fe:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800d202:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800d204:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800d208:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800d20a:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800d20e:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800d210:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800d214:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800d216:	f502 7398 	add.w	r3, r2, #304	; 0x130
 800d21a:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800d21c:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800d220:	a90e      	add	r1, sp, #56	; 0x38
 800d222:	a805      	add	r0, sp, #20
 800d224:	f001 fd48 	bl	800ecb8 <LoRaMacClassBInit>
}
 800d228:	b011      	add	sp, #68	; 0x44
 800d22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d22c:	20008000 	.word	0x20008000
 800d230:	20000d80 	.word	0x20000d80
 800d234:	2000129c 	.word	0x2000129c

0800d238 <SwitchClass>:
{
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800d23c:	4b45      	ldr	r3, [pc, #276]	; (800d354 <SwitchClass+0x11c>)
 800d23e:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800d242:	2d01      	cmp	r5, #1
 800d244:	d06e      	beq.n	800d324 <SwitchClass+0xec>
 800d246:	2d02      	cmp	r5, #2
 800d248:	d074      	beq.n	800d334 <SwitchClass+0xfc>
 800d24a:	b10d      	cbz	r5, 800d250 <SwitchClass+0x18>
 800d24c:	2003      	movs	r0, #3
}
 800d24e:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800d250:	bb58      	cbnz	r0, 800d2aa <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800d252:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800d256:	336c      	adds	r3, #108	; 0x6c
 800d258:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d25c:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800d260:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800d262:	2c01      	cmp	r4, #1
 800d264:	d023      	beq.n	800d2ae <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800d266:	2c02      	cmp	r4, #2
 800d268:	d1f1      	bne.n	800d24e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d26a:	4b3a      	ldr	r3, [pc, #232]	; (800d354 <SwitchClass+0x11c>)
 800d26c:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800d270:	4e39      	ldr	r6, [pc, #228]	; (800d358 <SwitchClass+0x120>)
 800d272:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800d276:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800d27a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d27e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d280:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800d284:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d288:	2302      	movs	r3, #2
 800d28a:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d28e:	2300      	movs	r3, #0
 800d290:	2b00      	cmp	r3, #0
 800d292:	dd15      	ble.n	800d2c0 <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800d294:	4b30      	ldr	r3, [pc, #192]	; (800d358 <SwitchClass+0x120>)
 800d296:	2200      	movs	r2, #0
 800d298:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 800d29c:	4b2f      	ldr	r3, [pc, #188]	; (800d35c <SwitchClass+0x124>)
 800d29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a0:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800d2a2:	f7ff fced 	bl	800cc80 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	e7d1      	b.n	800d24e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d2aa:	2003      	movs	r0, #3
 800d2ac:	e7d9      	b.n	800d262 <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f001 fd18 	bl	800ece4 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d1d6      	bne.n	800d266 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800d2b8:	4b26      	ldr	r3, [pc, #152]	; (800d354 <SwitchClass+0x11c>)
 800d2ba:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800d2be:	e7d2      	b.n	800d266 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800d2c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d2c4:	4a23      	ldr	r2, [pc, #140]	; (800d354 <SwitchClass+0x11c>)
 800d2c6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d2ca:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800d2ce:	b132      	cbz	r2, 800d2de <SwitchClass+0xa6>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800d2d0:	4a20      	ldr	r2, [pc, #128]	; (800d354 <SwitchClass+0x11c>)
 800d2d2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d2d6:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800d2da:	2a02      	cmp	r2, #2
 800d2dc:	d002      	beq.n	800d2e4 <SwitchClass+0xac>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d2de:	3301      	adds	r3, #1
 800d2e0:	b25b      	sxtb	r3, r3
 800d2e2:	e7d5      	b.n	800d290 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800d2e4:	4a1b      	ldr	r2, [pc, #108]	; (800d354 <SwitchClass+0x11c>)
 800d2e6:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800d2ea:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800d2ee:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800d2f0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d2f4:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800d2f8:	4b17      	ldr	r3, [pc, #92]	; (800d358 <SwitchClass+0x120>)
 800d2fa:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800d2fe:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800d302:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d306:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800d30a:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d30e:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800d312:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d316:	2203      	movs	r2, #3
 800d318:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800d31c:	2201      	movs	r2, #1
 800d31e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800d322:	e7b7      	b.n	800d294 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800d324:	f001 fcde 	bl	800ece4 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800d328:	2800      	cmp	r0, #0
 800d32a:	d190      	bne.n	800d24e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d32c:	4b09      	ldr	r3, [pc, #36]	; (800d354 <SwitchClass+0x11c>)
 800d32e:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800d332:	e78c      	b.n	800d24e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800d334:	b958      	cbnz	r0, 800d34e <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800d336:	4b08      	ldr	r3, [pc, #32]	; (800d358 <SwitchClass+0x120>)
 800d338:	2206      	movs	r2, #6
 800d33a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d33e:	4b05      	ldr	r3, [pc, #20]	; (800d354 <SwitchClass+0x11c>)
 800d340:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800d344:	4b05      	ldr	r3, [pc, #20]	; (800d35c <SwitchClass+0x124>)
 800d346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d348:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800d34a:	4620      	mov	r0, r4
 800d34c:	e77f      	b.n	800d24e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d34e:	2003      	movs	r0, #3
 800d350:	e77d      	b.n	800d24e <SwitchClass+0x16>
 800d352:	bf00      	nop
 800d354:	20008000 	.word	0x20008000
 800d358:	20000d80 	.word	0x20000d80
 800d35c:	0801a22c 	.word	0x0801a22c

0800d360 <SendReJoinReq>:
{
 800d360:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800d362:	28ff      	cmp	r0, #255	; 0xff
 800d364:	d003      	beq.n	800d36e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800d366:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800d368:	f7ff fb4e 	bl	800ca08 <ScheduleTx>
}
 800d36c:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800d36e:	2000      	movs	r0, #0
 800d370:	f7ff ff62 	bl	800d238 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800d374:	4d0a      	ldr	r5, [pc, #40]	; (800d3a0 <SendReJoinReq+0x40>)
 800d376:	2400      	movs	r4, #0
 800d378:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800d37c:	1cab      	adds	r3, r5, #2
 800d37e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d382:	23ff      	movs	r3, #255	; 0xff
 800d384:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800d388:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800d38c:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800d390:	f004 fe58 	bl	8012044 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800d394:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800d398:	f004 fe36 	bl	8012008 <SecureElementGetDevEui>
            allowDelayedTx = false;
 800d39c:	4620      	mov	r0, r4
            break;
 800d39e:	e7e3      	b.n	800d368 <SendReJoinReq+0x8>
 800d3a0:	20000d80 	.word	0x20000d80

0800d3a4 <PrepareFrame>:
{
 800d3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3a8:	b083      	sub	sp, #12
 800d3aa:	4605      	mov	r5, r0
 800d3ac:	460e      	mov	r6, r1
 800d3ae:	4617      	mov	r7, r2
 800d3b0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800d3b4:	4959      	ldr	r1, [pc, #356]	; (800d51c <PrepareFrame+0x178>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800d3ba:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 800d3be:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800d3c0:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800d3c2:	4698      	mov	r8, r3
 800d3c4:	b1cb      	cbz	r3, 800d3fa <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d3c6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800d51c <PrepareFrame+0x178>
 800d3ca:	4622      	mov	r2, r4
 800d3cc:	4641      	mov	r1, r8
 800d3ce:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800d3d2:	f004 ff54 	bl	801227e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d3d6:	b2e0      	uxtb	r0, r4
 800d3d8:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d3dc:	782b      	ldrb	r3, [r5, #0]
 800d3de:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800d3e2:	782b      	ldrb	r3, [r5, #0]
 800d3e4:	095b      	lsrs	r3, r3, #5
 800d3e6:	2b04      	cmp	r3, #4
 800d3e8:	d009      	beq.n	800d3fe <PrepareFrame+0x5a>
 800d3ea:	2b07      	cmp	r3, #7
 800d3ec:	d079      	beq.n	800d4e2 <PrepareFrame+0x13e>
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	d009      	beq.n	800d406 <PrepareFrame+0x62>
 800d3f2:	2002      	movs	r0, #2
}
 800d3f4:	b003      	add	sp, #12
 800d3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800d3fa:	4614      	mov	r4, r2
 800d3fc:	e7e3      	b.n	800d3c6 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800d3fe:	4b47      	ldr	r3, [pc, #284]	; (800d51c <PrepareFrame+0x178>)
 800d400:	2201      	movs	r2, #1
 800d402:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d406:	4b45      	ldr	r3, [pc, #276]	; (800d51c <PrepareFrame+0x178>)
 800d408:	2204      	movs	r2, #4
 800d40a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d40e:	1c9a      	adds	r2, r3, #2
 800d410:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d414:	22ff      	movs	r2, #255	; 0xff
 800d416:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d41a:	782a      	ldrb	r2, [r5, #0]
 800d41c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d420:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800d424:	4a3e      	ldr	r2, [pc, #248]	; (800d520 <PrepareFrame+0x17c>)
 800d426:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800d42a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d42e:	7832      	ldrb	r2, [r6, #0]
 800d430:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d434:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d438:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800d43c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d440:	a801      	add	r0, sp, #4
 800d442:	f002 f921 	bl	800f688 <LoRaMacCryptoGetFCntUp>
 800d446:	2800      	cmp	r0, #0
 800d448:	d15c      	bne.n	800d504 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800d44a:	9a01      	ldr	r2, [sp, #4]
 800d44c:	4b33      	ldr	r3, [pc, #204]	; (800d51c <PrepareFrame+0x178>)
 800d44e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800d452:	2100      	movs	r1, #0
 800d454:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800d458:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d45c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d460:	4668      	mov	r0, sp
 800d462:	f001 fd73 	bl	800ef4c <LoRaMacCommandsGetSizeSerializedCmds>
 800d466:	2800      	cmp	r0, #0
 800d468:	d14e      	bne.n	800d508 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800d46a:	9b00      	ldr	r3, [sp, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d0c1      	beq.n	800d3f4 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800d470:	4b2b      	ldr	r3, [pc, #172]	; (800d520 <PrepareFrame+0x17c>)
 800d472:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800d476:	f7fe f8bf 	bl	800b5f8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d47a:	4b28      	ldr	r3, [pc, #160]	; (800d51c <PrepareFrame+0x178>)
 800d47c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800d480:	b113      	cbz	r3, 800d488 <PrepareFrame+0xe4>
 800d482:	9a00      	ldr	r2, [sp, #0]
 800d484:	2a0f      	cmp	r2, #15
 800d486:	d915      	bls.n	800d4b4 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d488:	b113      	cbz	r3, 800d490 <PrepareFrame+0xec>
 800d48a:	9b00      	ldr	r3, [sp, #0]
 800d48c:	2b0f      	cmp	r3, #15
 800d48e:	d821      	bhi.n	800d4d4 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d490:	4a24      	ldr	r2, [pc, #144]	; (800d524 <PrepareFrame+0x180>)
 800d492:	4669      	mov	r1, sp
 800d494:	f001 fd66 	bl	800ef64 <LoRaMacCommandsSerializeCmds>
 800d498:	2800      	cmp	r0, #0
 800d49a:	d13b      	bne.n	800d514 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d49c:	4b1f      	ldr	r3, [pc, #124]	; (800d51c <PrepareFrame+0x178>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800d4a4:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800d4a8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d4ac:	9a00      	ldr	r2, [sp, #0]
 800d4ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800d4b2:	e79f      	b.n	800d3f4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d4b4:	4a1c      	ldr	r2, [pc, #112]	; (800d528 <PrepareFrame+0x184>)
 800d4b6:	4669      	mov	r1, sp
 800d4b8:	200f      	movs	r0, #15
 800d4ba:	f001 fd53 	bl	800ef64 <LoRaMacCommandsSerializeCmds>
 800d4be:	bb28      	cbnz	r0, 800d50c <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d4c0:	7833      	ldrb	r3, [r6, #0]
 800d4c2:	9a00      	ldr	r2, [sp, #0]
 800d4c4:	f362 0303 	bfi	r3, r2, #0, #4
 800d4c8:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	4b13      	ldr	r3, [pc, #76]	; (800d51c <PrepareFrame+0x178>)
 800d4ce:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800d4d2:	e78f      	b.n	800d3f4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d4d4:	4a13      	ldr	r2, [pc, #76]	; (800d524 <PrepareFrame+0x180>)
 800d4d6:	4669      	mov	r1, sp
 800d4d8:	f001 fd44 	bl	800ef64 <LoRaMacCommandsSerializeCmds>
 800d4dc:	b1c0      	cbz	r0, 800d510 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d4de:	2013      	movs	r0, #19
 800d4e0:	e788      	b.n	800d3f4 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d4e2:	f1b8 0f00 	cmp.w	r8, #0
 800d4e6:	d017      	beq.n	800d518 <PrepareFrame+0x174>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d083      	beq.n	800d3f4 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d4ec:	4c0b      	ldr	r4, [pc, #44]	; (800d51c <PrepareFrame+0x178>)
 800d4ee:	b282      	uxth	r2, r0
 800d4f0:	4641      	mov	r1, r8
 800d4f2:	1ce0      	adds	r0, r4, #3
 800d4f4:	f004 fec3 	bl	801227e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d4f8:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800d500:	2000      	movs	r0, #0
 800d502:	e777      	b.n	800d3f4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d504:	2012      	movs	r0, #18
 800d506:	e775      	b.n	800d3f4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d508:	2013      	movs	r0, #19
 800d50a:	e773      	b.n	800d3f4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d50c:	2013      	movs	r0, #19
 800d50e:	e771      	b.n	800d3f4 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d510:	200a      	movs	r0, #10
 800d512:	e76f      	b.n	800d3f4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d514:	2013      	movs	r0, #19
 800d516:	e76d      	b.n	800d3f4 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800d518:	2000      	movs	r0, #0
 800d51a:	e76b      	b.n	800d3f4 <PrepareFrame+0x50>
 800d51c:	20000d80 	.word	0x20000d80
 800d520:	20008000 	.word	0x20008000
 800d524:	2000121c 	.word	0x2000121c
 800d528:	20000e98 	.word	0x20000e98

0800d52c <Send>:
{
 800d52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d530:	b08a      	sub	sp, #40	; 0x28
 800d532:	4617      	mov	r7, r2
 800d534:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d536:	4c44      	ldr	r4, [pc, #272]	; (800d648 <Send+0x11c>)
 800d538:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800d53c:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d540:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d542:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d544:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d07a      	beq.n	800d642 <Send+0x116>
 800d54c:	4605      	mov	r5, r0
 800d54e:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800d550:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800d554:	b90b      	cbnz	r3, 800d55a <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d556:	2100      	movs	r1, #0
 800d558:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800d560:	4839      	ldr	r0, [pc, #228]	; (800d648 <Send+0x11c>)
 800d562:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800d566:	f361 13c7 	bfi	r3, r1, #7, #1
 800d56a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d56e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800d572:	2b01      	cmp	r3, #1
 800d574:	d052      	beq.n	800d61c <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800d576:	4b34      	ldr	r3, [pc, #208]	; (800d648 <Send+0x11c>)
 800d578:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d57c:	b12b      	cbz	r3, 800d58a <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800d57e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d582:	f043 0320 	orr.w	r3, r3, #32
 800d586:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800d58a:	2301      	movs	r3, #1
 800d58c:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800d590:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d594:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800d596:	492c      	ldr	r1, [pc, #176]	; (800d648 <Send+0x11c>)
 800d598:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800d59c:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800d5a0:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800d5a4:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d5a8:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d5ac:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d5b0:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800d5b4:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800d5b8:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800d5bc:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800d5c6:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800d5ca:	aa08      	add	r2, sp, #32
 800d5cc:	9200      	str	r2, [sp, #0]
 800d5ce:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800d5d2:	3139      	adds	r1, #57	; 0x39
 800d5d4:	a803      	add	r0, sp, #12
 800d5d6:	f001 faf5 	bl	800ebc4 <LoRaMacAdrCalcNext>
 800d5da:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d5de:	f360 1386 	bfi	r3, r0, #6, #1
 800d5e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800d5e6:	f8cd 8000 	str.w	r8, [sp]
 800d5ea:	463b      	mov	r3, r7
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	a909      	add	r1, sp, #36	; 0x24
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	f7ff fed7 	bl	800d3a4 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	b108      	cbz	r0, 800d5fe <Send+0xd2>
 800d5fa:	280a      	cmp	r0, #10
 800d5fc:	d104      	bne.n	800d608 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800d5fe:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800d602:	f7ff fa01 	bl	800ca08 <ScheduleTx>
 800d606:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800d608:	b17c      	cbz	r4, 800d62a <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800d60a:	4b0f      	ldr	r3, [pc, #60]	; (800d648 <Send+0x11c>)
 800d60c:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800d610:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800d614:	4620      	mov	r0, r4
 800d616:	b00a      	add	sp, #40	; 0x28
 800d618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800d61c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d620:	f043 0310 	orr.w	r3, r3, #16
 800d624:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d628:	e7a5      	b.n	800d576 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800d62a:	4b07      	ldr	r3, [pc, #28]	; (800d648 <Send+0x11c>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800d632:	9a08      	ldr	r2, [sp, #32]
 800d634:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800d636:	f001 fc57 	bl	800eee8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d0ea      	beq.n	800d614 <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d63e:	2413      	movs	r4, #19
 800d640:	e7e8      	b.n	800d614 <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800d642:	2407      	movs	r4, #7
 800d644:	e7e6      	b.n	800d614 <Send+0xe8>
 800d646:	bf00      	nop
 800d648:	20008000 	.word	0x20008000

0800d64c <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800d64c:	4b0c      	ldr	r3, [pc, #48]	; (800d680 <LoRaMacIsBusy+0x34>)
 800d64e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d652:	2b01      	cmp	r3, #1
 800d654:	d00c      	beq.n	800d670 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800d656:	4a0b      	ldr	r2, [pc, #44]	; (800d684 <LoRaMacIsBusy+0x38>)
 800d658:	7812      	ldrb	r2, [r2, #0]
 800d65a:	f012 0f01 	tst.w	r2, #1
 800d65e:	d109      	bne.n	800d674 <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d660:	b953      	cbnz	r3, 800d678 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800d662:	4b07      	ldr	r3, [pc, #28]	; (800d680 <LoRaMacIsBusy+0x34>)
 800d664:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d007      	beq.n	800d67c <LoRaMacIsBusy+0x30>
    return true;
 800d66c:	2001      	movs	r0, #1
 800d66e:	4770      	bx	lr
        return false;
 800d670:	2000      	movs	r0, #0
 800d672:	4770      	bx	lr
        return true;
 800d674:	2001      	movs	r0, #1
 800d676:	4770      	bx	lr
    return true;
 800d678:	2001      	movs	r0, #1
 800d67a:	4770      	bx	lr
        return false;
 800d67c:	2000      	movs	r0, #0
}
 800d67e:	4770      	bx	lr
 800d680:	20000d80 	.word	0x20000d80
 800d684:	20000d7c 	.word	0x20000d7c

0800d688 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800d688:	4b04      	ldr	r3, [pc, #16]	; (800d69c <LoRaMacIsStopped+0x14>)
 800d68a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d001      	beq.n	800d696 <LoRaMacIsStopped+0xe>
    return false;
 800d692:	2000      	movs	r0, #0
 800d694:	4770      	bx	lr
        return true;
 800d696:	2001      	movs	r0, #1
}
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	20000d80 	.word	0x20000d80

0800d6a0 <LoRaMacProcess>:
{
 800d6a0:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800d6a2:	f7ff f801 	bl	800c6a8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800d6a6:	f001 fb2f 	bl	800ed08 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800d6aa:	4b1f      	ldr	r3, [pc, #124]	; (800d728 <LoRaMacProcess+0x88>)
 800d6ac:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800d6b0:	f013 0f10 	tst.w	r3, #16
 800d6b4:	d10d      	bne.n	800d6d2 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800d6b6:	f7fd fe69 	bl	800b38c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800d6ba:	4b1b      	ldr	r3, [pc, #108]	; (800d728 <LoRaMacProcess+0x88>)
 800d6bc:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d022      	beq.n	800d70a <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800d6c4:	4b18      	ldr	r3, [pc, #96]	; (800d728 <LoRaMacProcess+0x88>)
 800d6c6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800d6ca:	f013 0f20 	tst.w	r3, #32
 800d6ce:	d11f      	bne.n	800d710 <LoRaMacProcess+0x70>
}
 800d6d0:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	f7fd fe54 	bl	800b380 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800d6d8:	f7fd fe90 	bl	800b3fc <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800d6dc:	f7fd ff80 	bl	800b5e0 <IsRequestPending>
 800d6e0:	b110      	cbz	r0, 800d6e8 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800d6e2:	f7fe f86f 	bl	800b7c4 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800d6e6:	b918      	cbnz	r0, 800d6f0 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800d6e8:	f7ff f820 	bl	800c72c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800d6ec:	f7ff fa42 	bl	800cb74 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800d6f0:	f7ff fa7c 	bl	800cbec <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d6f4:	2001      	movs	r0, #1
 800d6f6:	f7fd fe43 	bl	800b380 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800d6fa:	4a0b      	ldr	r2, [pc, #44]	; (800d728 <LoRaMacProcess+0x88>)
 800d6fc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d700:	f043 0320 	orr.w	r3, r3, #32
 800d704:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800d708:	e7d5      	b.n	800d6b6 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800d70a:	f7ff fab9 	bl	800cc80 <OpenContinuousRxCWindow>
 800d70e:	e7d9      	b.n	800d6c4 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800d710:	4b05      	ldr	r3, [pc, #20]	; (800d728 <LoRaMacProcess+0x88>)
 800d712:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800d716:	f36f 1245 	bfc	r2, #5, #1
 800d71a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800d71e:	4803      	ldr	r0, [pc, #12]	; (800d72c <LoRaMacProcess+0x8c>)
 800d720:	f7ff fb5e 	bl	800cde0 <LoRaMacHandleNvm>
}
 800d724:	e7d4      	b.n	800d6d0 <LoRaMacProcess+0x30>
 800d726:	bf00      	nop
 800d728:	20000d80 	.word	0x20000d80
 800d72c:	20008000 	.word	0x20008000

0800d730 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800d736:	2800      	cmp	r0, #0
 800d738:	f000 81a3 	beq.w	800da82 <LoRaMacInitialization+0x352>
 800d73c:	4688      	mov	r8, r1
 800d73e:	4691      	mov	r9, r2
 800d740:	4607      	mov	r7, r0
 800d742:	2900      	cmp	r1, #0
 800d744:	f000 819f 	beq.w	800da86 <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d748:	6803      	ldr	r3, [r0, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f000 819d 	beq.w	800da8a <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800d750:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 819b 	beq.w	800da8e <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d758:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f000 8199 	beq.w	800da92 <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800d760:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d762:	2b00      	cmp	r3, #0
 800d764:	f000 8197 	beq.w	800da96 <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800d768:	4610      	mov	r0, r2
 800d76a:	f002 fb35 	bl	800fdd8 <RegionIsActive>
 800d76e:	2800      	cmp	r0, #0
 800d770:	f000 8193 	beq.w	800da9a <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800d774:	4638      	mov	r0, r7
 800d776:	f001 fc89 	bl	800f08c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800d77a:	4ccb      	ldr	r4, [pc, #812]	; (800daa8 <LoRaMacInitialization+0x378>)
 800d77c:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800d780:	2100      	movs	r1, #0
 800d782:	4620      	mov	r0, r4
 800d784:	f004 fd93 	bl	80122ae <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800d788:	4ec8      	ldr	r6, [pc, #800]	; (800daac <LoRaMacInitialization+0x37c>)
 800d78a:	f240 521c 	movw	r2, #1308	; 0x51c
 800d78e:	2100      	movs	r1, #0
 800d790:	4630      	mov	r0, r6
 800d792:	f004 fd8c 	bl	80122ae <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800d796:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800d79a:	2500      	movs	r5, #0
 800d79c:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800d7a0:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800d7a4:	4bc2      	ldr	r3, [pc, #776]	; (800dab0 <LoRaMacInitialization+0x380>)
 800d7a6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800d7aa:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d7ae:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800d7b2:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d7b4:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800d7b8:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800d7ba:	4bbe      	ldr	r3, [pc, #760]	; (800dab4 <LoRaMacInitialization+0x384>)
 800d7bc:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d7be:	a905      	add	r1, sp, #20
 800d7c0:	4648      	mov	r0, r9
 800d7c2:	f002 fb28 	bl	800fe16 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d7c6:	230f      	movs	r3, #15
 800d7c8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d7cc:	a90a      	add	r1, sp, #40	; 0x28
 800d7ce:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d7d2:	f002 fb07 	bl	800fde4 <RegionGetPhyParam>
 800d7d6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800d7d8:	1b40      	subs	r0, r0, r5
 800d7da:	bf18      	it	ne
 800d7dc:	2001      	movne	r0, #1
 800d7de:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800d7e2:	f04f 0a0a 	mov.w	sl, #10
 800d7e6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d7ea:	a90a      	add	r1, sp, #40	; 0x28
 800d7ec:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d7f0:	f002 faf8 	bl	800fde4 <RegionGetPhyParam>
 800d7f4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800d7f6:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800d7fa:	f04f 0906 	mov.w	r9, #6
 800d7fe:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d802:	a90a      	add	r1, sp, #40	; 0x28
 800d804:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d808:	f002 faec 	bl	800fde4 <RegionGetPhyParam>
 800d80c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800d80e:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800d812:	2310      	movs	r3, #16
 800d814:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d818:	a90a      	add	r1, sp, #40	; 0x28
 800d81a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d81e:	f002 fae1 	bl	800fde4 <RegionGetPhyParam>
 800d822:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800d824:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800d828:	2311      	movs	r3, #17
 800d82a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d82e:	a90a      	add	r1, sp, #40	; 0x28
 800d830:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d834:	f002 fad6 	bl	800fde4 <RegionGetPhyParam>
 800d838:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800d83a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800d83e:	2312      	movs	r3, #18
 800d840:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d844:	a90a      	add	r1, sp, #40	; 0x28
 800d846:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d84a:	f002 facb 	bl	800fde4 <RegionGetPhyParam>
 800d84e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800d850:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800d854:	2313      	movs	r3, #19
 800d856:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d85a:	a90a      	add	r1, sp, #40	; 0x28
 800d85c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d860:	f002 fac0 	bl	800fde4 <RegionGetPhyParam>
 800d864:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800d866:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800d86a:	2314      	movs	r3, #20
 800d86c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d870:	a90a      	add	r1, sp, #40	; 0x28
 800d872:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d876:	f002 fab5 	bl	800fde4 <RegionGetPhyParam>
 800d87a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800d87c:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800d880:	2316      	movs	r3, #22
 800d882:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d886:	a90a      	add	r1, sp, #40	; 0x28
 800d888:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d88c:	f002 faaa 	bl	800fde4 <RegionGetPhyParam>
 800d890:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800d892:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800d896:	2317      	movs	r3, #23
 800d898:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d89c:	a90a      	add	r1, sp, #40	; 0x28
 800d89e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d8a2:	f002 fa9f 	bl	800fde4 <RegionGetPhyParam>
 800d8a6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800d8a8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800d8ac:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800d8b0:	2318      	movs	r3, #24
 800d8b2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d8b6:	a90a      	add	r1, sp, #40	; 0x28
 800d8b8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d8bc:	f002 fa92 	bl	800fde4 <RegionGetPhyParam>
 800d8c0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800d8c2:	b2c0      	uxtb	r0, r0
 800d8c4:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800d8c8:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800d8cc:	231d      	movs	r3, #29
 800d8ce:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d8d2:	a90a      	add	r1, sp, #40	; 0x28
 800d8d4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d8d8:	f002 fa84 	bl	800fde4 <RegionGetPhyParam>
 800d8dc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800d8de:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800d8e2:	231e      	movs	r3, #30
 800d8e4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d8e8:	a90a      	add	r1, sp, #40	; 0x28
 800d8ea:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d8ee:	f002 fa79 	bl	800fde4 <RegionGetPhyParam>
 800d8f2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800d8f4:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800d8f8:	231f      	movs	r3, #31
 800d8fa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d8fe:	a90a      	add	r1, sp, #40	; 0x28
 800d900:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d904:	f002 fa6e 	bl	800fde4 <RegionGetPhyParam>
 800d908:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800d90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d90c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800d910:	2320      	movs	r3, #32
 800d912:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d916:	a90a      	add	r1, sp, #40	; 0x28
 800d918:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d91c:	f002 fa62 	bl	800fde4 <RegionGetPhyParam>
 800d920:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800d922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d924:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800d928:	230b      	movs	r3, #11
 800d92a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d92e:	a90a      	add	r1, sp, #40	; 0x28
 800d930:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d934:	f002 fa56 	bl	800fde4 <RegionGetPhyParam>
 800d938:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800d93a:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800d93e:	230c      	movs	r3, #12
 800d940:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d944:	a90a      	add	r1, sp, #40	; 0x28
 800d946:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d94a:	f002 fa4b 	bl	800fde4 <RegionGetPhyParam>
 800d94e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800d950:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800d954:	f04f 0b01 	mov.w	fp, #1
 800d958:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800d95c:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800d960:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800d964:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800d968:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800d96c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800d970:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800d972:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800d976:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800d978:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800d97c:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800d97e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800d982:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800d984:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800d988:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800d98a:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800d98e:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800d992:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 800d996:	4628      	mov	r0, r5
 800d998:	f7ff fb82 	bl	800d0a0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800d99c:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800d9a0:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800d9a4:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800d9a8:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800d9ac:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d9ae:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800d9b0:	9500      	str	r5, [sp, #0]
 800d9b2:	4b41      	ldr	r3, [pc, #260]	; (800dab8 <LoRaMacInitialization+0x388>)
 800d9b4:	462a      	mov	r2, r5
 800d9b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d9ba:	f506 705a 	add.w	r0, r6, #872	; 0x368
 800d9be:	f006 fd73 	bl	80144a8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800d9c2:	9500      	str	r5, [sp, #0]
 800d9c4:	4b3d      	ldr	r3, [pc, #244]	; (800dabc <LoRaMacInitialization+0x38c>)
 800d9c6:	462a      	mov	r2, r5
 800d9c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d9cc:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800d9d0:	f006 fd6a 	bl	80144a8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800d9d4:	9500      	str	r5, [sp, #0]
 800d9d6:	4b3a      	ldr	r3, [pc, #232]	; (800dac0 <LoRaMacInitialization+0x390>)
 800d9d8:	462a      	mov	r2, r5
 800d9da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d9de:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800d9e2:	f006 fd61 	bl	80144a8 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800d9e6:	9500      	str	r5, [sp, #0]
 800d9e8:	4b36      	ldr	r3, [pc, #216]	; (800dac4 <LoRaMacInitialization+0x394>)
 800d9ea:	462a      	mov	r2, r5
 800d9ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d9f0:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800d9f4:	f006 fd58 	bl	80144a8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800d9f8:	af02      	add	r7, sp, #8
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	f006 fce6 	bl	80143cc <SysTimeGetMcuTime>
 800da00:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800da04:	e897 0003 	ldmia.w	r7, {r0, r1}
 800da08:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800da0c:	4b2e      	ldr	r3, [pc, #184]	; (800dac8 <LoRaMacInitialization+0x398>)
 800da0e:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800da10:	4b2e      	ldr	r3, [pc, #184]	; (800dacc <LoRaMacInitialization+0x39c>)
 800da12:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800da16:	4b2e      	ldr	r3, [pc, #184]	; (800dad0 <LoRaMacInitialization+0x3a0>)
 800da18:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800da1c:	4b2d      	ldr	r3, [pc, #180]	; (800dad4 <LoRaMacInitialization+0x3a4>)
 800da1e:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800da22:	4b2d      	ldr	r3, [pc, #180]	; (800dad8 <LoRaMacInitialization+0x3a8>)
 800da24:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800da28:	4b2c      	ldr	r3, [pc, #176]	; (800dadc <LoRaMacInitialization+0x3ac>)
 800da2a:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800da2e:	4b2c      	ldr	r3, [pc, #176]	; (800dae0 <LoRaMacInitialization+0x3b0>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 800da36:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800da38:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800da3c:	f004 f94c 	bl	8011cd8 <SecureElementInit>
 800da40:	bb80      	cbnz	r0, 800daa4 <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800da42:	4620      	mov	r0, r4
 800da44:	f001 fe00 	bl	800f648 <LoRaMacCryptoInit>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d14b      	bne.n	800dae4 <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800da4c:	f001 f9e0 	bl	800ee10 <LoRaMacCommandsInit>
 800da50:	2800      	cmp	r0, #0
 800da52:	d149      	bne.n	800dae8 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800da54:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800da58:	f001 fe48 	bl	800f6ec <LoRaMacCryptoSetMulticastReference>
 800da5c:	4604      	mov	r4, r0
 800da5e:	2800      	cmp	r0, #0
 800da60:	d144      	bne.n	800daec <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800da62:	4d1f      	ldr	r5, [pc, #124]	; (800dae0 <LoRaMacInitialization+0x3b0>)
 800da64:	696b      	ldr	r3, [r5, #20]
 800da66:	4798      	blx	r3
 800da68:	f004 fbf6 	bl	8012258 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800da6c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800da6e:	4a0e      	ldr	r2, [pc, #56]	; (800daa8 <LoRaMacInitialization+0x378>)
 800da70:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800da74:	4798      	blx	r3
    Radio.Sleep( );
 800da76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800da78:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800da7a:	4658      	mov	r0, fp
 800da7c:	f7fd fc80 	bl	800b380 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800da80:	e00c      	b.n	800da9c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800da82:	2403      	movs	r4, #3
 800da84:	e00a      	b.n	800da9c <LoRaMacInitialization+0x36c>
 800da86:	2403      	movs	r4, #3
 800da88:	e008      	b.n	800da9c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800da8a:	2403      	movs	r4, #3
 800da8c:	e006      	b.n	800da9c <LoRaMacInitialization+0x36c>
 800da8e:	2403      	movs	r4, #3
 800da90:	e004      	b.n	800da9c <LoRaMacInitialization+0x36c>
 800da92:	2403      	movs	r4, #3
 800da94:	e002      	b.n	800da9c <LoRaMacInitialization+0x36c>
 800da96:	2403      	movs	r4, #3
 800da98:	e000      	b.n	800da9c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800da9a:	2409      	movs	r4, #9
}
 800da9c:	4620      	mov	r0, r4
 800da9e:	b00d      	add	sp, #52	; 0x34
 800daa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800daa4:	2411      	movs	r4, #17
 800daa6:	e7f9      	b.n	800da9c <LoRaMacInitialization+0x36c>
 800daa8:	20008000 	.word	0x20008000
 800daac:	20000d80 	.word	0x20000d80
 800dab0:	01000400 	.word	0x01000400
 800dab4:	2000129c 	.word	0x2000129c
 800dab8:	0800cb11 	.word	0x0800cb11
 800dabc:	0800cd91 	.word	0x0800cd91
 800dac0:	0800cd39 	.word	0x0800cd39
 800dac4:	0800b761 	.word	0x0800b761
 800dac8:	20000d7c 	.word	0x20000d7c
 800dacc:	0800d055 	.word	0x0800d055
 800dad0:	0800d005 	.word	0x0800d005
 800dad4:	0800b5b1 	.word	0x0800b5b1
 800dad8:	0800cfdd 	.word	0x0800cfdd
 800dadc:	0800cfb5 	.word	0x0800cfb5
 800dae0:	0801a22c 	.word	0x0801a22c
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dae4:	2411      	movs	r4, #17
 800dae6:	e7d9      	b.n	800da9c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dae8:	2413      	movs	r4, #19
 800daea:	e7d7      	b.n	800da9c <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800daec:	2411      	movs	r4, #17
 800daee:	e7d5      	b.n	800da9c <LoRaMacInitialization+0x36c>

0800daf0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800daf0:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800daf2:	2400      	movs	r4, #0
 800daf4:	4b03      	ldr	r3, [pc, #12]	; (800db04 <LoRaMacStart+0x14>)
 800daf6:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800dafa:	f7fd fc2d 	bl	800b358 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800dafe:	4620      	mov	r0, r4
 800db00:	bd10      	pop	{r4, pc}
 800db02:	bf00      	nop
 800db04:	20000d80 	.word	0x20000d80

0800db08 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800db08:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800db0a:	f7ff fd9f 	bl	800d64c <LoRaMacIsBusy>
 800db0e:	b130      	cbz	r0, 800db1e <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800db10:	4b0b      	ldr	r3, [pc, #44]	; (800db40 <LoRaMacStop+0x38>)
 800db12:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800db16:	2b01      	cmp	r3, #1
 800db18:	d010      	beq.n	800db3c <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800db1a:	2001      	movs	r0, #1
}
 800db1c:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800db1e:	4b09      	ldr	r3, [pc, #36]	; (800db44 <LoRaMacStop+0x3c>)
 800db20:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800db24:	2b02      	cmp	r3, #2
 800db26:	d005      	beq.n	800db34 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800db28:	4b05      	ldr	r3, [pc, #20]	; (800db40 <LoRaMacStop+0x38>)
 800db2a:	2201      	movs	r2, #1
 800db2c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800db30:	2000      	movs	r0, #0
 800db32:	e7f3      	b.n	800db1c <LoRaMacStop+0x14>
            Radio.Sleep( );
 800db34:	4b04      	ldr	r3, [pc, #16]	; (800db48 <LoRaMacStop+0x40>)
 800db36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db38:	4798      	blx	r3
 800db3a:	e7f5      	b.n	800db28 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800db3c:	2000      	movs	r0, #0
 800db3e:	e7ed      	b.n	800db1c <LoRaMacStop+0x14>
 800db40:	20000d80 	.word	0x20000d80
 800db44:	20008000 	.word	0x20008000
 800db48:	0801a22c 	.word	0x0801a22c

0800db4c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800db4c:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800db4e:	4c14      	ldr	r4, [pc, #80]	; (800dba0 <LoRaMacHalt+0x54>)
 800db50:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800db54:	f006 fd06 	bl	8014564 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800db58:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800db5c:	f006 fd02 	bl	8014564 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800db60:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800db64:	f006 fcfe 	bl	8014564 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800db68:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800db6c:	f006 fcfa 	bl	8014564 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800db70:	f001 f8b6 	bl	800ece0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800db74:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <LoRaMacHalt+0x58>)
 800db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db78:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800db7a:	2500      	movs	r5, #0
 800db7c:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800db80:	4e09      	ldr	r6, [pc, #36]	; (800dba8 <LoRaMacHalt+0x5c>)
 800db82:	4630      	mov	r0, r6
 800db84:	f7ff f92c 	bl	800cde0 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800db88:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800db8c:	4631      	mov	r1, r6
 800db8e:	4807      	ldr	r0, [pc, #28]	; (800dbac <LoRaMacHalt+0x60>)
 800db90:	f004 fb75 	bl	801227e <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800db94:	2301      	movs	r3, #1
 800db96:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800db9a:	4628      	mov	r0, r5
 800db9c:	bd70      	pop	{r4, r5, r6, pc}
 800db9e:	bf00      	nop
 800dba0:	20000d80 	.word	0x20000d80
 800dba4:	0801a22c 	.word	0x0801a22c
 800dba8:	20008000 	.word	0x20008000
 800dbac:	200085cc 	.word	0x200085cc

0800dbb0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800dbb0:	b530      	push	{r4, r5, lr}
 800dbb2:	b08b      	sub	sp, #44	; 0x2c
 800dbb4:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800dbb6:	4b31      	ldr	r3, [pc, #196]	; (800dc7c <LoRaMacQueryTxPossible+0xcc>)
 800dbb8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800dbba:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800dbbc:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800dbc0:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800dbc4:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800dbc8:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800dbcc:	4b2c      	ldr	r3, [pc, #176]	; (800dc80 <LoRaMacQueryTxPossible+0xd0>)
 800dbce:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800dbd2:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800dbda:	2900      	cmp	r1, #0
 800dbdc:	d048      	beq.n	800dc70 <LoRaMacQueryTxPossible+0xc0>
 800dbde:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800dbe0:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800dbe4:	4b25      	ldr	r3, [pc, #148]	; (800dc7c <LoRaMacQueryTxPossible+0xcc>)
 800dbe6:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800dbea:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800dbee:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800dbf0:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 800dbf4:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800dbf8:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 800dbfc:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dc00:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800dc04:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800dc08:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800dc0c:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800dc10:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800dc14:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800dc18:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800dc1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800dc20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800dc24:	ab04      	add	r3, sp, #16
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	f10d 030d 	add.w	r3, sp, #13
 800dc2c:	f10d 020e 	add.w	r2, sp, #14
 800dc30:	f10d 010f 	add.w	r1, sp, #15
 800dc34:	a805      	add	r0, sp, #20
 800dc36:	f000 ffc5 	bl	800ebc4 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800dc3a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800dc3e:	f7fd fcdb 	bl	800b5f8 <GetMaxAppPayloadWithoutFOptsLength>
 800dc42:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800dc44:	a802      	add	r0, sp, #8
 800dc46:	f001 f981 	bl	800ef4c <LoRaMacCommandsGetSizeSerializedCmds>
 800dc4a:	b998      	cbnz	r0, 800dc74 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800dc4c:	9b02      	ldr	r3, [sp, #8]
 800dc4e:	2b0f      	cmp	r3, #15
 800dc50:	d80a      	bhi.n	800dc68 <LoRaMacQueryTxPossible+0xb8>
 800dc52:	786a      	ldrb	r2, [r5, #1]
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d807      	bhi.n	800dc68 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800dc5c:	9b02      	ldr	r3, [sp, #8]
 800dc5e:	441c      	add	r4, r3
 800dc60:	42a2      	cmp	r2, r4
 800dc62:	d309      	bcc.n	800dc78 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800dc64:	b00b      	add	sp, #44	; 0x2c
 800dc66:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800dc6c:	2008      	movs	r0, #8
 800dc6e:	e7f9      	b.n	800dc64 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc70:	2003      	movs	r0, #3
 800dc72:	e7f7      	b.n	800dc64 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dc74:	2013      	movs	r0, #19
 800dc76:	e7f5      	b.n	800dc64 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800dc78:	2008      	movs	r0, #8
 800dc7a:	e7f3      	b.n	800dc64 <LoRaMacQueryTxPossible+0xb4>
 800dc7c:	20008000 	.word	0x20008000
 800dc80:	20000d80 	.word	0x20000d80

0800dc84 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800dc84:	2800      	cmp	r0, #0
 800dc86:	f000 815f 	beq.w	800df48 <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800dc8a:	b510      	push	{r4, lr}
 800dc8c:	b084      	sub	sp, #16
 800dc8e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800dc90:	7800      	ldrb	r0, [r0, #0]
 800dc92:	2841      	cmp	r0, #65	; 0x41
 800dc94:	f200 8154 	bhi.w	800df40 <LoRaMacMibGetRequestConfirm+0x2bc>
 800dc98:	e8df f010 	tbh	[pc, r0, lsl #1]
 800dc9c:	00470042 	.word	0x00470042
 800dca0:	0052004d 	.word	0x0052004d
 800dca4:	005d0057 	.word	0x005d0057
 800dca8:	01520063 	.word	0x01520063
 800dcac:	01520152 	.word	0x01520152
 800dcb0:	01520152 	.word	0x01520152
 800dcb4:	01520152 	.word	0x01520152
 800dcb8:	006b0152 	.word	0x006b0152
 800dcbc:	00770071 	.word	0x00770071
 800dcc0:	008c0084 	.word	0x008c0084
 800dcc4:	009c0094 	.word	0x009c0094
 800dcc8:	00a400b1 	.word	0x00a400b1
 800dccc:	00c400be 	.word	0x00c400be
 800dcd0:	00ce00c9 	.word	0x00ce00c9
 800dcd4:	00d800d3 	.word	0x00d800d3
 800dcd8:	00ee00dd 	.word	0x00ee00dd
 800dcdc:	010000f4 	.word	0x010000f4
 800dce0:	010600fa 	.word	0x010600fa
 800dce4:	0111010b 	.word	0x0111010b
 800dce8:	0117011f 	.word	0x0117011f
 800dcec:	0152011b 	.word	0x0152011b
 800dcf0:	01520125 	.word	0x01520125
 800dcf4:	01520152 	.word	0x01520152
 800dcf8:	01520152 	.word	0x01520152
 800dcfc:	01520152 	.word	0x01520152
 800dd00:	01520152 	.word	0x01520152
 800dd04:	01520152 	.word	0x01520152
 800dd08:	01520152 	.word	0x01520152
 800dd0c:	01520152 	.word	0x01520152
 800dd10:	0134012e 	.word	0x0134012e
 800dd14:	0140013a 	.word	0x0140013a
 800dd18:	014c0146 	.word	0x014c0146
 800dd1c:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800dd20:	4b8c      	ldr	r3, [pc, #560]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dd22:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800dd26:	7123      	strb	r3, [r4, #4]
            break;
 800dd28:	e111      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800dd2a:	4b8a      	ldr	r3, [pc, #552]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dd2c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800dd30:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd32:	2000      	movs	r0, #0
            break;
 800dd34:	e10b      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800dd36:	6860      	ldr	r0, [r4, #4]
 800dd38:	f004 f966 	bl	8012008 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd3c:	2000      	movs	r0, #0
            break;
 800dd3e:	e106      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800dd40:	6860      	ldr	r0, [r4, #4]
 800dd42:	f004 f97f 	bl	8012044 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd46:	2000      	movs	r0, #0
            break;
 800dd48:	e101      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800dd4a:	4b82      	ldr	r3, [pc, #520]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dd4c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800dd50:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd52:	2000      	movs	r0, #0
            break;
 800dd54:	e0fb      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800dd56:	4b7f      	ldr	r3, [pc, #508]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dd58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dd5c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd5e:	2000      	movs	r0, #0
            break;
 800dd60:	e0f5      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800dd62:	1d21      	adds	r1, r4, #4
 800dd64:	4b7b      	ldr	r3, [pc, #492]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dd66:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800dd6a:	f004 f987 	bl	801207c <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd6e:	2000      	movs	r0, #0
            break;
 800dd70:	e0ed      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800dd72:	4b78      	ldr	r3, [pc, #480]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dd74:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800dd78:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd7a:	2000      	movs	r0, #0
            break;
 800dd7c:	e0e7      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800dd7e:	4b75      	ldr	r3, [pc, #468]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dd80:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800dd84:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd86:	2000      	movs	r0, #0
            break;
 800dd88:	e0e1      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800dd8a:	231c      	movs	r3, #28
 800dd8c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd90:	a902      	add	r1, sp, #8
 800dd92:	4b70      	ldr	r3, [pc, #448]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dd94:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dd98:	f002 f824 	bl	800fde4 <RegionGetPhyParam>
 800dd9c:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800dd9e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dda0:	2000      	movs	r0, #0
            break;
 800dda2:	e0d4      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800dda4:	3404      	adds	r4, #4
 800dda6:	4b6c      	ldr	r3, [pc, #432]	; (800df58 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800dda8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ddac:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddb0:	2000      	movs	r0, #0
            break;
 800ddb2:	e0cc      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800ddb4:	3404      	adds	r4, #4
 800ddb6:	4b69      	ldr	r3, [pc, #420]	; (800df5c <LoRaMacMibGetRequestConfirm+0x2d8>)
 800ddb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ddbc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddc0:	2000      	movs	r0, #0
            break;
 800ddc2:	e0c4      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800ddc4:	3404      	adds	r4, #4
 800ddc6:	4b66      	ldr	r3, [pc, #408]	; (800df60 <LoRaMacMibGetRequestConfirm+0x2dc>)
 800ddc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ddcc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddd0:	2000      	movs	r0, #0
            break;
 800ddd2:	e0bc      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800ddd4:	3404      	adds	r4, #4
 800ddd6:	4b63      	ldr	r3, [pc, #396]	; (800df64 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800ddd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dddc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dde0:	2000      	movs	r0, #0
            break;
 800dde2:	e0b4      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800dde4:	231a      	movs	r3, #26
 800dde6:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ddea:	a902      	add	r1, sp, #8
 800ddec:	4b59      	ldr	r3, [pc, #356]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ddee:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ddf2:	f001 fff7 	bl	800fde4 <RegionGetPhyParam>
 800ddf6:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800ddf8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddfa:	2000      	movs	r0, #0
            break;
 800ddfc:	e0a7      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800ddfe:	2319      	movs	r3, #25
 800de00:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de04:	a902      	add	r1, sp, #8
 800de06:	4b53      	ldr	r3, [pc, #332]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de08:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800de0c:	f001 ffea 	bl	800fde4 <RegionGetPhyParam>
 800de10:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800de12:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de14:	2000      	movs	r0, #0
            break;
 800de16:	e09a      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800de18:	4b4e      	ldr	r3, [pc, #312]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de1a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800de1e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de20:	2000      	movs	r0, #0
            break;
 800de22:	e094      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800de24:	4b4b      	ldr	r3, [pc, #300]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de28:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de2a:	2000      	movs	r0, #0
            break;
 800de2c:	e08f      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800de2e:	4b49      	ldr	r3, [pc, #292]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de32:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de34:	2000      	movs	r0, #0
            break;
 800de36:	e08a      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800de38:	4b46      	ldr	r3, [pc, #280]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de3c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de3e:	2000      	movs	r0, #0
            break;
 800de40:	e085      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800de42:	4b44      	ldr	r3, [pc, #272]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de46:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de48:	2000      	movs	r0, #0
            break;
 800de4a:	e080      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800de4c:	4b41      	ldr	r3, [pc, #260]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de50:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de52:	2000      	movs	r0, #0
            break;
 800de54:	e07b      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800de56:	2302      	movs	r3, #2
 800de58:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800de5c:	4b3d      	ldr	r3, [pc, #244]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de5e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800de62:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de66:	a902      	add	r1, sp, #8
 800de68:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800de6c:	f001 ffba 	bl	800fde4 <RegionGetPhyParam>
 800de70:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800de72:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de74:	2000      	movs	r0, #0
            break;
 800de76:	e06a      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800de78:	4b36      	ldr	r3, [pc, #216]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de7a:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800de7e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de80:	2000      	movs	r0, #0
            break;
 800de82:	e064      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800de84:	4b33      	ldr	r3, [pc, #204]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de86:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800de8a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de8c:	2000      	movs	r0, #0
            break;
 800de8e:	e05e      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800de90:	4b30      	ldr	r3, [pc, #192]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de92:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800de96:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de98:	2000      	movs	r0, #0
            break;
 800de9a:	e058      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800de9c:	4b2d      	ldr	r3, [pc, #180]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800de9e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800dea2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dea4:	2000      	movs	r0, #0
            break;
 800dea6:	e052      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800dea8:	4b2a      	ldr	r3, [pc, #168]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800deaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deac:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800deae:	2000      	movs	r0, #0
            break;
 800deb0:	e04d      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800deb2:	4b28      	ldr	r3, [pc, #160]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800deb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800deb8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800deba:	2000      	movs	r0, #0
            break;
 800debc:	e047      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800debe:	4b25      	ldr	r3, [pc, #148]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dec4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dec6:	2000      	movs	r0, #0
            break;
 800dec8:	e041      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800deca:	4b22      	ldr	r3, [pc, #136]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800decc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dece:	2000      	movs	r0, #0
            break;
 800ded0:	e03d      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800ded2:	4b25      	ldr	r3, [pc, #148]	; (800df68 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800ded4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ded6:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800ded8:	e039      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800deda:	4b1e      	ldr	r3, [pc, #120]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dedc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dee0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dee2:	2000      	movs	r0, #0
            break;
 800dee4:	e033      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800dee6:	4b1b      	ldr	r3, [pc, #108]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800dee8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800deec:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800deee:	f002 f833 	bl	800ff58 <RegionGetVersion>
 800def2:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800def4:	2000      	movs	r0, #0
            break;
 800def6:	e02a      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800def8:	4b16      	ldr	r3, [pc, #88]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800defa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800defe:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df00:	2000      	movs	r0, #0
            break;
 800df02:	e024      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800df04:	4b13      	ldr	r3, [pc, #76]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800df06:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800df0a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df0c:	2000      	movs	r0, #0
            break;
 800df0e:	e01e      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800df10:	4b10      	ldr	r3, [pc, #64]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800df12:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800df16:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df18:	2000      	movs	r0, #0
            break;
 800df1a:	e018      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800df1c:	4b0d      	ldr	r3, [pc, #52]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800df1e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800df22:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df24:	2000      	movs	r0, #0
            break;
 800df26:	e012      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800df2a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800df2e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df30:	2000      	movs	r0, #0
            break;
 800df32:	e00c      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800df34:	4b07      	ldr	r3, [pc, #28]	; (800df54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800df36:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800df3a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df3c:	2000      	movs	r0, #0
            break;
 800df3e:	e006      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800df40:	4620      	mov	r0, r4
 800df42:	f000 fed1 	bl	800ece8 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800df46:	e002      	b.n	800df4e <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800df48:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800df4a:	4770      	bx	lr
    switch( mibGet->Type )
 800df4c:	2018      	movs	r0, #24
}
 800df4e:	b004      	add	sp, #16
 800df50:	bd10      	pop	{r4, pc}
 800df52:	bf00      	nop
 800df54:	20008000 	.word	0x20008000
 800df58:	2000806c 	.word	0x2000806c
 800df5c:	200080b4 	.word	0x200080b4
 800df60:	20008074 	.word	0x20008074
 800df64:	200080bc 	.word	0x200080bc
 800df68:	200085cc 	.word	0x200085cc

0800df6c <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800df6c:	2800      	cmp	r0, #0
 800df6e:	f000 827f 	beq.w	800e470 <LoRaMacMibSetRequestConfirm+0x504>
{
 800df72:	b530      	push	{r4, r5, lr}
 800df74:	b085      	sub	sp, #20
 800df76:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800df78:	4b9b      	ldr	r3, [pc, #620]	; (800e1e8 <LoRaMacMibSetRequestConfirm+0x27c>)
 800df7a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800df7e:	f013 0f02 	tst.w	r3, #2
 800df82:	f040 8277 	bne.w	800e474 <LoRaMacMibSetRequestConfirm+0x508>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800df86:	7805      	ldrb	r5, [r0, #0]
 800df88:	2d41      	cmp	r5, #65	; 0x41
 800df8a:	f200 826e 	bhi.w	800e46a <LoRaMacMibSetRequestConfirm+0x4fe>
 800df8e:	e8df f015 	tbh	[pc, r5, lsl #1]
 800df92:	0042      	.short	0x0042
 800df94:	0058004f 	.word	0x0058004f
 800df98:	0066005f 	.word	0x0066005f
 800df9c:	0072006c 	.word	0x0072006c
 800dfa0:	008b0080 	.word	0x008b0080
 800dfa4:	00a10096 	.word	0x00a10096
 800dfa8:	00b700ac 	.word	0x00b700ac
 800dfac:	00ce00c2 	.word	0x00ce00c2
 800dfb0:	00e500da 	.word	0x00e500da
 800dfb4:	00eb026c 	.word	0x00eb026c
 800dfb8:	01350111 	.word	0x01350111
 800dfbc:	018d0163 	.word	0x018d0163
 800dfc0:	019d017d 	.word	0x019d017d
 800dfc4:	01ad01a8 	.word	0x01ad01a8
 800dfc8:	01b701b2 	.word	0x01b701b2
 800dfcc:	026c01bc 	.word	0x026c01bc
 800dfd0:	01d601c1 	.word	0x01d601c1
 800dfd4:	01ef0204 	.word	0x01ef0204
 800dfd8:	02200219 	.word	0x02200219
 800dfdc:	022e0228 	.word	0x022e0228
 800dfe0:	026c0234 	.word	0x026c0234
 800dfe4:	026c0237 	.word	0x026c0237
 800dfe8:	026c026c 	.word	0x026c026c
 800dfec:	026c026c 	.word	0x026c026c
 800dff0:	026c026c 	.word	0x026c026c
 800dff4:	026c026c 	.word	0x026c026c
 800dff8:	026c026c 	.word	0x026c026c
 800dffc:	026c026c 	.word	0x026c026c
 800e000:	026c026c 	.word	0x026c026c
 800e004:	0248026c 	.word	0x0248026c
 800e008:	0254024e 	.word	0x0254024e
 800e00c:	0260025a 	.word	0x0260025a
 800e010:	02730266 	.word	0x02730266
 800e014:	0273      	.short	0x0273
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800e016:	7900      	ldrb	r0, [r0, #4]
 800e018:	f7ff f90e 	bl	800d238 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800e01c:	b930      	cbnz	r0, 800e02c <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e01e:	4a72      	ldr	r2, [pc, #456]	; (800e1e8 <LoRaMacMibSetRequestConfirm+0x27c>)
 800e020:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e024:	f043 0320 	orr.w	r3, r3, #32
 800e028:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800e02c:	b005      	add	sp, #20
 800e02e:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800e030:	7903      	ldrb	r3, [r0, #4]
 800e032:	2b02      	cmp	r3, #2
 800e034:	f000 8222 	beq.w	800e47c <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800e038:	4a6c      	ldr	r2, [pc, #432]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e03a:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e03e:	2000      	movs	r0, #0
 800e040:	e7ed      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800e042:	6840      	ldr	r0, [r0, #4]
 800e044:	f003 ffd2 	bl	8011fec <SecureElementSetDevEui>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d0e8      	beq.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e04c:	2003      	movs	r0, #3
 800e04e:	e7ed      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800e050:	6840      	ldr	r0, [r0, #4]
 800e052:	f003 ffe7 	bl	8012024 <SecureElementSetJoinEui>
 800e056:	2800      	cmp	r0, #0
 800e058:	d0e1      	beq.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e05a:	4628      	mov	r0, r5
 800e05c:	e7e6      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800e05e:	7902      	ldrb	r2, [r0, #4]
 800e060:	4b62      	ldr	r3, [pc, #392]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e062:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e066:	2000      	movs	r0, #0
 800e068:	e7d9      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800e06a:	6842      	ldr	r2, [r0, #4]
 800e06c:	4b5f      	ldr	r3, [pc, #380]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e06e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e072:	2000      	movs	r0, #0
 800e074:	e7d3      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800e076:	6841      	ldr	r1, [r0, #4]
 800e078:	4b5c      	ldr	r3, [pc, #368]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e07a:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800e07e:	f003 ffef 	bl	8012060 <SecureElementSetDevAddr>
 800e082:	2800      	cmp	r0, #0
 800e084:	f040 81fc 	bne.w	800e480 <LoRaMacMibSetRequestConfirm+0x514>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800e088:	6862      	ldr	r2, [r4, #4]
 800e08a:	4b58      	ldr	r3, [pc, #352]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e08c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 800e090:	e7c5      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800e092:	6841      	ldr	r1, [r0, #4]
 800e094:	2900      	cmp	r1, #0
 800e096:	f000 81f5 	beq.w	800e484 <LoRaMacMibSetRequestConfirm+0x518>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800e09a:	2000      	movs	r0, #0
 800e09c:	f001 fc42 	bl	800f924 <LoRaMacCryptoSetKey>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d0bc      	beq.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0a4:	2011      	movs	r0, #17
 800e0a6:	e7c1      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800e0a8:	6841      	ldr	r1, [r0, #4]
 800e0aa:	2900      	cmp	r1, #0
 800e0ac:	f000 81ec 	beq.w	800e488 <LoRaMacMibSetRequestConfirm+0x51c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800e0b0:	2001      	movs	r0, #1
 800e0b2:	f001 fc37 	bl	800f924 <LoRaMacCryptoSetKey>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d0b0      	beq.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0ba:	2011      	movs	r0, #17
 800e0bc:	e7b6      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800e0be:	6841      	ldr	r1, [r0, #4]
 800e0c0:	2900      	cmp	r1, #0
 800e0c2:	f000 81e3 	beq.w	800e48c <LoRaMacMibSetRequestConfirm+0x520>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800e0c6:	2008      	movs	r0, #8
 800e0c8:	f001 fc2c 	bl	800f924 <LoRaMacCryptoSetKey>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d0a5      	beq.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0d0:	2011      	movs	r0, #17
 800e0d2:	e7ab      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800e0d4:	6841      	ldr	r1, [r0, #4]
 800e0d6:	2900      	cmp	r1, #0
 800e0d8:	f000 81da 	beq.w	800e490 <LoRaMacMibSetRequestConfirm+0x524>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800e0dc:	2009      	movs	r0, #9
 800e0de:	f001 fc21 	bl	800f924 <LoRaMacCryptoSetKey>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	d09a      	beq.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0e6:	2011      	movs	r0, #17
 800e0e8:	e7a0      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800e0ea:	6841      	ldr	r1, [r0, #4]
 800e0ec:	2900      	cmp	r1, #0
 800e0ee:	f000 81d1 	beq.w	800e494 <LoRaMacMibSetRequestConfirm+0x528>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800e0f2:	200c      	movs	r0, #12
 800e0f4:	f001 fc16 	bl	800f924 <LoRaMacCryptoSetKey>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d08f      	beq.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e0fc:	2011      	movs	r0, #17
 800e0fe:	e795      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800e100:	6841      	ldr	r1, [r0, #4]
 800e102:	2900      	cmp	r1, #0
 800e104:	f000 81c8 	beq.w	800e498 <LoRaMacMibSetRequestConfirm+0x52c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800e108:	200d      	movs	r0, #13
 800e10a:	f001 fc0b 	bl	800f924 <LoRaMacCryptoSetKey>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d084      	beq.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e112:	2011      	movs	r0, #17
 800e114:	e78a      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800e116:	6841      	ldr	r1, [r0, #4]
 800e118:	2900      	cmp	r1, #0
 800e11a:	f000 81bf 	beq.w	800e49c <LoRaMacMibSetRequestConfirm+0x530>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800e11e:	200e      	movs	r0, #14
 800e120:	f001 fc00 	bl	800f924 <LoRaMacCryptoSetKey>
 800e124:	2800      	cmp	r0, #0
 800e126:	f43f af79 	beq.w	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e12a:	2011      	movs	r0, #17
 800e12c:	e77e      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800e12e:	6841      	ldr	r1, [r0, #4]
 800e130:	2900      	cmp	r1, #0
 800e132:	f000 81b5 	beq.w	800e4a0 <LoRaMacMibSetRequestConfirm+0x534>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800e136:	200f      	movs	r0, #15
 800e138:	f001 fbf4 	bl	800f924 <LoRaMacCryptoSetKey>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	f43f af6d 	beq.w	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e142:	2011      	movs	r0, #17
 800e144:	e772      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800e146:	7900      	ldrb	r0, [r0, #4]
 800e148:	4b28      	ldr	r3, [pc, #160]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e14a:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e14e:	4c28      	ldr	r4, [pc, #160]	; (800e1f0 <LoRaMacMibSetRequestConfirm+0x284>)
 800e150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e152:	4798      	blx	r3
            Radio.Sleep( );
 800e154:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e156:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e158:	2000      	movs	r0, #0
 800e15a:	e760      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800e15c:	7902      	ldrb	r2, [r0, #4]
 800e15e:	4b23      	ldr	r3, [pc, #140]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e160:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e164:	2000      	movs	r0, #0
 800e166:	e75a      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e168:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e16c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e170:	4b1e      	ldr	r3, [pc, #120]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e172:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e176:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800e17a:	2207      	movs	r2, #7
 800e17c:	a901      	add	r1, sp, #4
 800e17e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e182:	f001 fe50 	bl	800fe26 <RegionVerify>
 800e186:	b908      	cbnz	r0, 800e18c <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e188:	2003      	movs	r0, #3
 800e18a:	e747      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800e18c:	6863      	ldr	r3, [r4, #4]
 800e18e:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800e190:	2200      	movs	r2, #0
 800e192:	a901      	add	r1, sp, #4
 800e194:	4b15      	ldr	r3, [pc, #84]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e196:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e19a:	f001 fe44 	bl	800fe26 <RegionVerify>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	f000 8180 	beq.w	800e4a4 <LoRaMacMibSetRequestConfirm+0x538>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800e1a4:	4b13      	ldr	r3, [pc, #76]	; (800e1f4 <LoRaMacMibSetRequestConfirm+0x288>)
 800e1a6:	3404      	adds	r4, #4
 800e1a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e1ac:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	e733      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e1b4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e1b8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e1bc:	4b0b      	ldr	r3, [pc, #44]	; (800e1ec <LoRaMacMibSetRequestConfirm+0x280>)
 800e1be:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e1c2:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e1c6:	2207      	movs	r2, #7
 800e1c8:	a901      	add	r1, sp, #4
 800e1ca:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e1ce:	f001 fe2a 	bl	800fe26 <RegionVerify>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	f000 8168 	beq.w	800e4a8 <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800e1d8:	4b07      	ldr	r3, [pc, #28]	; (800e1f8 <LoRaMacMibSetRequestConfirm+0x28c>)
 800e1da:	3404      	adds	r4, #4
 800e1dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e1e0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	e719      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
 800e1e8:	20000d80 	.word	0x20000d80
 800e1ec:	20008000 	.word	0x20008000
 800e1f0:	0801a22c 	.word	0x0801a22c
 800e1f4:	2000806c 	.word	0x2000806c
 800e1f8:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e1fc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e200:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e204:	4bb0      	ldr	r3, [pc, #704]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e206:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e20a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e20e:	2207      	movs	r2, #7
 800e210:	a901      	add	r1, sp, #4
 800e212:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e216:	f001 fe06 	bl	800fe26 <RegionVerify>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f000 8146 	beq.w	800e4ac <LoRaMacMibSetRequestConfirm+0x540>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800e220:	4ba9      	ldr	r3, [pc, #676]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e222:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800e226:	3404      	adds	r4, #4
 800e228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e22c:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800e230:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e234:	2b02      	cmp	r3, #2
 800e236:	d001      	beq.n	800e23c <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e238:	2000      	movs	r0, #0
 800e23a:	e6ef      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800e23c:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800e240:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800e244:	2800      	cmp	r0, #0
 800e246:	f43f aee9 	beq.w	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 800e24a:	4ba0      	ldr	r3, [pc, #640]	; (800e4cc <LoRaMacMibSetRequestConfirm+0x560>)
 800e24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e24e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800e250:	f7fe fd16 	bl	800cc80 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e254:	2000      	movs	r0, #0
 800e256:	e6e1      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e258:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e25c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e260:	4b99      	ldr	r3, [pc, #612]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e262:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e266:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e26a:	2207      	movs	r2, #7
 800e26c:	a901      	add	r1, sp, #4
 800e26e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e272:	f001 fdd8 	bl	800fe26 <RegionVerify>
 800e276:	2800      	cmp	r0, #0
 800e278:	f000 811a 	beq.w	800e4b0 <LoRaMacMibSetRequestConfirm+0x544>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800e27c:	4b94      	ldr	r3, [pc, #592]	; (800e4d0 <LoRaMacMibSetRequestConfirm+0x564>)
 800e27e:	3404      	adds	r4, #4
 800e280:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e284:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e288:	2000      	movs	r0, #0
 800e28a:	e6c7      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800e28c:	6843      	ldr	r3, [r0, #4]
 800e28e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800e290:	2301      	movs	r3, #1
 800e292:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800e296:	a902      	add	r1, sp, #8
 800e298:	4b8b      	ldr	r3, [pc, #556]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e29a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e29e:	f001 fdd5 	bl	800fe4c <RegionChanMaskSet>
 800e2a2:	b108      	cbz	r0, 800e2a8 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	e6b9      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e2a8:	2003      	movs	r0, #3
 800e2aa:	e6bf      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800e2ac:	6843      	ldr	r3, [r0, #4]
 800e2ae:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800e2b6:	a902      	add	r1, sp, #8
 800e2b8:	4b83      	ldr	r3, [pc, #524]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e2ba:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e2be:	f001 fdc5 	bl	800fe4c <RegionChanMaskSet>
 800e2c2:	b108      	cbz	r0, 800e2c8 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	e6a9      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e2c8:	2003      	movs	r0, #3
 800e2ca:	e6af      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800e2cc:	7902      	ldrb	r2, [r0, #4]
 800e2ce:	1e53      	subs	r3, r2, #1
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	2b0e      	cmp	r3, #14
 800e2d4:	f200 80ee 	bhi.w	800e4b4 <LoRaMacMibSetRequestConfirm+0x548>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800e2d8:	4b7b      	ldr	r3, [pc, #492]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e2da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2de:	2000      	movs	r0, #0
 800e2e0:	e69c      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800e2e2:	6842      	ldr	r2, [r0, #4]
 800e2e4:	4b78      	ldr	r3, [pc, #480]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e2e6:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	e698      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800e2ec:	6842      	ldr	r2, [r0, #4]
 800e2ee:	4b76      	ldr	r3, [pc, #472]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e2f0:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	e693      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800e2f6:	6842      	ldr	r2, [r0, #4]
 800e2f8:	4b73      	ldr	r3, [pc, #460]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e2fa:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	e68e      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800e300:	6842      	ldr	r2, [r0, #4]
 800e302:	4b71      	ldr	r3, [pc, #452]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e304:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e306:	2000      	movs	r0, #0
 800e308:	e689      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800e30a:	6842      	ldr	r2, [r0, #4]
 800e30c:	4b6e      	ldr	r3, [pc, #440]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e30e:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e310:	2000      	movs	r0, #0
 800e312:	e684      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800e314:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e318:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800e31c:	2206      	movs	r2, #6
 800e31e:	a901      	add	r1, sp, #4
 800e320:	4b69      	ldr	r3, [pc, #420]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e322:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e326:	f001 fd7e 	bl	800fe26 <RegionVerify>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	f000 80c4 	beq.w	800e4b8 <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800e330:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e334:	4b64      	ldr	r3, [pc, #400]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e336:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e33a:	2000      	movs	r0, #0
 800e33c:	e66e      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800e33e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e342:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e346:	4b60      	ldr	r3, [pc, #384]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e348:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e34c:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800e350:	2205      	movs	r2, #5
 800e352:	a901      	add	r1, sp, #4
 800e354:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e358:	f001 fd65 	bl	800fe26 <RegionVerify>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	f000 80ad 	beq.w	800e4bc <LoRaMacMibSetRequestConfirm+0x550>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e362:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e366:	4b58      	ldr	r3, [pc, #352]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e36c:	2000      	movs	r0, #0
 800e36e:	e655      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800e370:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e374:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800e378:	220a      	movs	r2, #10
 800e37a:	a901      	add	r1, sp, #4
 800e37c:	4b52      	ldr	r3, [pc, #328]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e37e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e382:	f001 fd50 	bl	800fe26 <RegionVerify>
 800e386:	2800      	cmp	r0, #0
 800e388:	f000 809a 	beq.w	800e4c0 <LoRaMacMibSetRequestConfirm+0x554>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800e38c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e390:	4b4d      	ldr	r3, [pc, #308]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e392:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e396:	2000      	movs	r0, #0
 800e398:	e640      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800e39a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e39e:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800e3a2:	2209      	movs	r2, #9
 800e3a4:	a901      	add	r1, sp, #4
 800e3a6:	4b48      	ldr	r3, [pc, #288]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e3a8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e3ac:	f001 fd3b 	bl	800fe26 <RegionVerify>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	f000 8087 	beq.w	800e4c4 <LoRaMacMibSetRequestConfirm+0x558>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800e3b6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e3ba:	4b43      	ldr	r3, [pc, #268]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e3bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	e62b      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800e3c4:	6842      	ldr	r2, [r0, #4]
 800e3c6:	4b40      	ldr	r3, [pc, #256]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e3c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800e3cc:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	e625      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800e3d2:	7902      	ldrb	r2, [r0, #4]
 800e3d4:	4b3c      	ldr	r3, [pc, #240]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e3d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800e3da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e3de:	2000      	movs	r0, #0
 800e3e0:	e61d      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800e3e2:	6842      	ldr	r2, [r0, #4]
 800e3e4:	4b38      	ldr	r3, [pc, #224]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e3e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	e617      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800e3ee:	6842      	ldr	r2, [r0, #4]
 800e3f0:	4b35      	ldr	r3, [pc, #212]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e3f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	e611      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800e3fa:	f7fe fd57 	bl	800ceac <RestoreNvmData>
            break;
 800e3fe:	e60d      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800e400:	7983      	ldrb	r3, [r0, #6]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d901      	bls.n	800e40a <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e406:	2003      	movs	r0, #3
 800e408:	e610      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800e40a:	6842      	ldr	r2, [r0, #4]
 800e40c:	4b2e      	ldr	r3, [pc, #184]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e40e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800e412:	6840      	ldr	r0, [r0, #4]
 800e414:	f001 f930 	bl	800f678 <LoRaMacCryptoSetLrWanVersion>
 800e418:	2800      	cmp	r0, #0
 800e41a:	f43f ae00 	beq.w	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e41e:	2011      	movs	r0, #17
 800e420:	e604      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800e422:	6842      	ldr	r2, [r0, #4]
 800e424:	4b28      	ldr	r3, [pc, #160]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e42a:	2000      	movs	r0, #0
 800e42c:	e5f7      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800e42e:	7902      	ldrb	r2, [r0, #4]
 800e430:	4b25      	ldr	r3, [pc, #148]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e432:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e436:	2000      	movs	r0, #0
 800e438:	e5f1      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800e43a:	8882      	ldrh	r2, [r0, #4]
 800e43c:	4b22      	ldr	r3, [pc, #136]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e43e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e442:	2000      	movs	r0, #0
 800e444:	e5eb      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800e446:	8882      	ldrh	r2, [r0, #4]
 800e448:	4b1f      	ldr	r3, [pc, #124]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e44a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e44e:	2000      	movs	r0, #0
 800e450:	e5e5      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800e452:	8882      	ldrh	r2, [r0, #4]
 800e454:	4b1c      	ldr	r3, [pc, #112]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e456:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e45a:	2000      	movs	r0, #0
 800e45c:	e5df      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800e45e:	8882      	ldrh	r2, [r0, #4]
 800e460:	4b19      	ldr	r3, [pc, #100]	; (800e4c8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e462:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e466:	2000      	movs	r0, #0
 800e468:	e5d9      	b.n	800e01e <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800e46a:	f000 fc3f 	bl	800ecec <LoRaMacMibClassBSetRequestConfirm>
            break;
 800e46e:	e5d5      	b.n	800e01c <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e470:	2003      	movs	r0, #3
}
 800e472:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800e474:	2001      	movs	r0, #1
 800e476:	e5d9      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
    switch( mibSet->Type )
 800e478:	2018      	movs	r0, #24
 800e47a:	e5d7      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e47c:	2003      	movs	r0, #3
 800e47e:	e5d5      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e480:	2003      	movs	r0, #3
 800e482:	e5d3      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e484:	2003      	movs	r0, #3
 800e486:	e5d1      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e488:	2003      	movs	r0, #3
 800e48a:	e5cf      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e48c:	2003      	movs	r0, #3
 800e48e:	e5cd      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e490:	2003      	movs	r0, #3
 800e492:	e5cb      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e494:	2003      	movs	r0, #3
 800e496:	e5c9      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e498:	2003      	movs	r0, #3
 800e49a:	e5c7      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e49c:	2003      	movs	r0, #3
 800e49e:	e5c5      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4a0:	2003      	movs	r0, #3
 800e4a2:	e5c3      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4a4:	2003      	movs	r0, #3
 800e4a6:	e5c1      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4a8:	2003      	movs	r0, #3
 800e4aa:	e5bf      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4ac:	2003      	movs	r0, #3
 800e4ae:	e5bd      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4b0:	2003      	movs	r0, #3
 800e4b2:	e5bb      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4b4:	2003      	movs	r0, #3
 800e4b6:	e5b9      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4b8:	2003      	movs	r0, #3
 800e4ba:	e5b7      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4bc:	2003      	movs	r0, #3
 800e4be:	e5b5      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4c0:	2003      	movs	r0, #3
 800e4c2:	e5b3      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4c4:	2003      	movs	r0, #3
 800e4c6:	e5b1      	b.n	800e02c <LoRaMacMibSetRequestConfirm+0xc0>
 800e4c8:	20008000 	.word	0x20008000
 800e4cc:	0801a22c 	.word	0x0801a22c
 800e4d0:	200080bc 	.word	0x200080bc

0800e4d4 <LoRaMacMcChannelSetup>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMcChannelSetup( McChannelParams_t *channel )
{
 800e4d4:	b538      	push	{r3, r4, r5, lr}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800e4d6:	4b2a      	ldr	r3, [pc, #168]	; (800e580 <LoRaMacMcChannelSetup+0xac>)
 800e4d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e4dc:	f013 0f02 	tst.w	r3, #2
 800e4e0:	d143      	bne.n	800e56a <LoRaMacMcChannelSetup+0x96>
 800e4e2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_BUSY;
    }

    if( channel->GroupID >= LORAMAC_MAX_MC_CTX )
 800e4e4:	7885      	ldrb	r5, [r0, #2]
 800e4e6:	2d00      	cmp	r5, #0
 800e4e8:	d142      	bne.n	800e570 <LoRaMacMcChannelSetup+0x9c>
    {
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
    }

    Nvm.MacGroup2.MulticastChannelList[channel->GroupID].ChannelParams = *channel;
 800e4ea:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800e4ee:	4b25      	ldr	r3, [pc, #148]	; (800e584 <LoRaMacMcChannelSetup+0xb0>)
 800e4f0:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 800e4f4:	f10c 0ce8 	add.w	ip, ip, #232	; 0xe8
 800e4f8:	4686      	mov	lr, r0
 800e4fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e4fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e502:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e506:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e50a:	f8de 3000 	ldr.w	r3, [lr]
 800e50e:	f8cc 3000 	str.w	r3, [ip]
    MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e512:	4a1b      	ldr	r2, [pc, #108]	; (800e580 <LoRaMacMcChannelSetup+0xac>)
 800e514:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e518:	f043 0320 	orr.w	r3, r3, #32
 800e51c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    if( channel->IsRemotelySetup == true )
 800e520:	7823      	ldrb	r3, [r4, #0]
 800e522:	b1ab      	cbz	r3, 800e550 <LoRaMacMcChannelSetup+0x7c>
    {
        if( LoRaMacCryptoSetKey( MCKeys[channel->GroupID], channel->McKeys.McKeyE ) != LORAMAC_CRYPTO_SUCCESS )
 800e524:	68a1      	ldr	r1, [r4, #8]
 800e526:	200d      	movs	r0, #13
 800e528:	f001 f9fc 	bl	800f924 <LoRaMacCryptoSetKey>
 800e52c:	bb10      	cbnz	r0, 800e574 <LoRaMacMcChannelSetup+0xa0>
        {
            return LORAMAC_STATUS_CRYPTO_ERROR;
        }

        if( LoRaMacCryptoDeriveMcSessionKeyPair( channel->GroupID, channel->Address ) != LORAMAC_CRYPTO_SUCCESS )
 800e52e:	6861      	ldr	r1, [r4, #4]
 800e530:	78a0      	ldrb	r0, [r4, #2]
 800e532:	f001 fa95 	bl	800fa60 <LoRaMacCryptoDeriveMcSessionKeyPair>
 800e536:	b9f8      	cbnz	r0, 800e578 <LoRaMacMcChannelSetup+0xa4>
            return LORAMAC_STATUS_CRYPTO_ERROR;
        }
    }

    // Reset multicast channel downlink counter to initial value.
    *Nvm.MacGroup2.MulticastChannelList[channel->GroupID].DownLinkCounter = FCNT_DOWN_INITIAL_VALUE;
 800e538:	78a3      	ldrb	r3, [r4, #2]
 800e53a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e53e:	4a11      	ldr	r2, [pc, #68]	; (800e584 <LoRaMacMcChannelSetup+0xb0>)
 800e540:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800e544:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800e548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e54c:	601a      	str	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800e54e:	e00d      	b.n	800e56c <LoRaMacMcChannelSetup+0x98>
        if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MCAppSKeys[channel->GroupID], channel->McKeys.Session.McAppSKey ) )
 800e550:	68a1      	ldr	r1, [r4, #8]
 800e552:	200e      	movs	r0, #14
 800e554:	f001 f9e6 	bl	800f924 <LoRaMacCryptoSetKey>
 800e558:	b980      	cbnz	r0, 800e57c <LoRaMacMcChannelSetup+0xa8>
        if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MCNwkSKeys[channel->GroupID], channel->McKeys.Session.McNwkSKey ) )
 800e55a:	68e1      	ldr	r1, [r4, #12]
 800e55c:	200f      	movs	r0, #15
 800e55e:	f001 f9e1 	bl	800f924 <LoRaMacCryptoSetKey>
 800e562:	2800      	cmp	r0, #0
 800e564:	d0e8      	beq.n	800e538 <LoRaMacMcChannelSetup+0x64>
            return LORAMAC_STATUS_CRYPTO_ERROR;
 800e566:	2511      	movs	r5, #17
 800e568:	e000      	b.n	800e56c <LoRaMacMcChannelSetup+0x98>
        return LORAMAC_STATUS_BUSY;
 800e56a:	2501      	movs	r5, #1
}
 800e56c:	4628      	mov	r0, r5
 800e56e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 800e570:	2516      	movs	r5, #22
 800e572:	e7fb      	b.n	800e56c <LoRaMacMcChannelSetup+0x98>
            return LORAMAC_STATUS_CRYPTO_ERROR;
 800e574:	2511      	movs	r5, #17
 800e576:	e7f9      	b.n	800e56c <LoRaMacMcChannelSetup+0x98>
            return LORAMAC_STATUS_CRYPTO_ERROR;
 800e578:	2511      	movs	r5, #17
 800e57a:	e7f7      	b.n	800e56c <LoRaMacMcChannelSetup+0x98>
            return LORAMAC_STATUS_CRYPTO_ERROR;
 800e57c:	2511      	movs	r5, #17
 800e57e:	e7f5      	b.n	800e56c <LoRaMacMcChannelSetup+0x98>
 800e580:	20000d80 	.word	0x20000d80
 800e584:	20008000 	.word	0x20008000

0800e588 <LoRaMacMcChannelDelete>:

LoRaMacStatus_t LoRaMacMcChannelDelete( AddressIdentifier_t groupID )
{
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800e588:	4b1d      	ldr	r3, [pc, #116]	; (800e600 <LoRaMacMcChannelDelete+0x78>)
 800e58a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e58e:	f013 0f02 	tst.w	r3, #2
 800e592:	d12f      	bne.n	800e5f4 <LoRaMacMcChannelDelete+0x6c>
{
 800e594:	b510      	push	{r4, lr}
 800e596:	b08a      	sub	sp, #40	; 0x28
 800e598:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_BUSY;
    }

    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 800e59a:	bb68      	cbnz	r0, 800e5f8 <LoRaMacMcChannelDelete+0x70>
        ( Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
 800e59c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800e5a0:	4b18      	ldr	r3, [pc, #96]	; (800e604 <LoRaMacMcChannelDelete+0x7c>)
 800e5a2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800e5a6:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 800e5aa:	b33b      	cbz	r3, 800e5fc <LoRaMacMcChannelDelete+0x74>
    }

    McChannelParams_t channel;

    // Set all channel fields with 0
    memset1( ( uint8_t* )&channel, 0, sizeof( McChannelParams_t ) );
 800e5ac:	2224      	movs	r2, #36	; 0x24
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	a801      	add	r0, sp, #4
 800e5b2:	f003 fe7c 	bl	80122ae <memset1>

    Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams = channel;
 800e5b6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800e5ba:	4b12      	ldr	r3, [pc, #72]	; (800e604 <LoRaMacMcChannelDelete+0x7c>)
 800e5bc:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 800e5c0:	f10c 0ce8 	add.w	ip, ip, #232	; 0xe8
 800e5c4:	f10d 0e04 	add.w	lr, sp, #4
 800e5c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5d8:	f8de 3000 	ldr.w	r3, [lr]
 800e5dc:	f8cc 3000 	str.w	r3, [ip]
    MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e5e0:	4a07      	ldr	r2, [pc, #28]	; (800e600 <LoRaMacMcChannelDelete+0x78>)
 800e5e2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e5e6:	f043 0320 	orr.w	r3, r3, #32
 800e5ea:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    return LORAMAC_STATUS_OK;
 800e5ee:	4620      	mov	r0, r4
}
 800e5f0:	b00a      	add	sp, #40	; 0x28
 800e5f2:	bd10      	pop	{r4, pc}
        return LORAMAC_STATUS_BUSY;
 800e5f4:	2001      	movs	r0, #1
}
 800e5f6:	4770      	bx	lr
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 800e5f8:	2016      	movs	r0, #22
 800e5fa:	e7f9      	b.n	800e5f0 <LoRaMacMcChannelDelete+0x68>
 800e5fc:	2016      	movs	r0, #22
 800e5fe:	e7f7      	b.n	800e5f0 <LoRaMacMcChannelDelete+0x68>
 800e600:	20000d80 	.word	0x20000d80
 800e604:	20008000 	.word	0x20008000

0800e608 <LoRaMacMcChannelGetGroupId>:

uint8_t LoRaMacMcChannelGetGroupId( uint32_t mcAddress )
{
 800e608:	4602      	mov	r2, r0
    for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e60a:	2000      	movs	r0, #0
 800e60c:	b108      	cbz	r0, 800e612 <LoRaMacMcChannelGetGroupId+0xa>
        if( mcAddress == Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address )
        {
            return i;
        }
    }
    return 0xFF;
 800e60e:	20ff      	movs	r0, #255	; 0xff
}
 800e610:	4770      	bx	lr
        if( mcAddress == Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address )
 800e612:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800e616:	4b05      	ldr	r3, [pc, #20]	; (800e62c <LoRaMacMcChannelGetGroupId+0x24>)
 800e618:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e61c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e620:	4293      	cmp	r3, r2
 800e622:	d0f5      	beq.n	800e610 <LoRaMacMcChannelGetGroupId+0x8>
    for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e624:	1c43      	adds	r3, r0, #1
 800e626:	b2d8      	uxtb	r0, r3
 800e628:	e7f0      	b.n	800e60c <LoRaMacMcChannelGetGroupId+0x4>
 800e62a:	bf00      	nop
 800e62c:	20008000 	.word	0x20008000

0800e630 <LoRaMacMcChannelSetupRxParams>:

LoRaMacStatus_t LoRaMacMcChannelSetupRxParams( AddressIdentifier_t groupID, McRxParams_t *rxParams, uint8_t *status )
{
 800e630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e632:	b083      	sub	sp, #12
 800e634:	4616      	mov	r6, r2
   *status = 0x1C + ( groupID & 0x03 );
 800e636:	f000 0703 	and.w	r7, r0, #3
 800e63a:	f107 021c 	add.w	r2, r7, #28
 800e63e:	7032      	strb	r2, [r6, #0]

    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800e640:	4b3c      	ldr	r3, [pc, #240]	; (800e734 <LoRaMacMcChannelSetupRxParams+0x104>)
 800e642:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e646:	f013 0f02 	tst.w	r3, #2
 800e64a:	d168      	bne.n	800e71e <LoRaMacMcChannelSetupRxParams+0xee>
 800e64c:	4604      	mov	r4, r0
 800e64e:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_BUSY;
    }

    if( ( rxParams->Class == CLASS_A ) || ( rxParams->Class > CLASS_C ) )
 800e650:	780b      	ldrb	r3, [r1, #0]
 800e652:	3b01      	subs	r3, #1
 800e654:	b2db      	uxtb	r3, r3
 800e656:	2b01      	cmp	r3, #1
 800e658:	d864      	bhi.n	800e724 <LoRaMacMcChannelSetupRxParams+0xf4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d164      	bne.n	800e728 <LoRaMacMcChannelSetupRxParams+0xf8>
        ( Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
 800e65e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800e662:	4b35      	ldr	r3, [pc, #212]	; (800e738 <LoRaMacMcChannelSetupRxParams+0x108>)
 800e664:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e668:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d05d      	beq.n	800e72c <LoRaMacMcChannelSetupRxParams+0xfc>
    {
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
    }
    *status &= 0x0F; // groupID OK
 800e670:	f002 020f 	and.w	r2, r2, #15
 800e674:	7032      	strb	r2, [r6, #0]

    VerifyParams_t verify;
    // Check datarate
    if( rxParams->Class == CLASS_B )
 800e676:	782b      	ldrb	r3, [r5, #0]
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d03e      	beq.n	800e6fa <LoRaMacMcChannelSetupRxParams+0xca>
    {
        verify.DatarateParams.Datarate = rxParams->Params.ClassB.Datarate;
    }
    else
    {
        verify.DatarateParams.Datarate = rxParams->Params.ClassC.Datarate;
 800e67c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e680:	f88d 3004 	strb.w	r3, [sp, #4]
    }
    verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e684:	4b2c      	ldr	r3, [pc, #176]	; (800e738 <LoRaMacMcChannelSetupRxParams+0x108>)
 800e686:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e68a:	f88d 2005 	strb.w	r2, [sp, #5]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e68e:	2207      	movs	r2, #7
 800e690:	a901      	add	r1, sp, #4
 800e692:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e696:	f001 fbc6 	bl	800fe26 <RegionVerify>
 800e69a:	b118      	cbz	r0, 800e6a4 <LoRaMacMcChannelSetupRxParams+0x74>
    {
        *status &= 0xFB; // datarate OK
 800e69c:	7833      	ldrb	r3, [r6, #0]
 800e69e:	f023 0304 	bic.w	r3, r3, #4
 800e6a2:	7033      	strb	r3, [r6, #0]
    }

    // Check frequency
    if( rxParams->Class == CLASS_B )
 800e6a4:	782b      	ldrb	r3, [r5, #0]
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d02c      	beq.n	800e704 <LoRaMacMcChannelSetupRxParams+0xd4>
    {
        verify.Frequency = rxParams->Params.ClassB.Frequency;
    }
    else
    {
        verify.Frequency = rxParams->Params.ClassC.Frequency;
 800e6aa:	686b      	ldr	r3, [r5, #4]
 800e6ac:	9301      	str	r3, [sp, #4]
    }
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) == true )
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	a901      	add	r1, sp, #4
 800e6b2:	4b21      	ldr	r3, [pc, #132]	; (800e738 <LoRaMacMcChannelSetupRxParams+0x108>)
 800e6b4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e6b8:	f001 fbb5 	bl	800fe26 <RegionVerify>
 800e6bc:	b118      	cbz	r0, 800e6c6 <LoRaMacMcChannelSetupRxParams+0x96>
    {
        *status &= 0xF7; // frequency OK
 800e6be:	7833      	ldrb	r3, [r6, #0]
 800e6c0:	f023 0308 	bic.w	r3, r3, #8
 800e6c4:	7033      	strb	r3, [r6, #0]
    }

    if( *status == ( groupID & 0x03 ) )
 800e6c6:	7833      	ldrb	r3, [r6, #0]
 800e6c8:	429f      	cmp	r7, r3
 800e6ca:	d131      	bne.n	800e730 <LoRaMacMcChannelSetupRxParams+0x100>
    {
        // Apply parameters
        Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.RxParams = *rxParams;
 800e6cc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800e6d0:	4b19      	ldr	r3, [pc, #100]	; (800e738 <LoRaMacMcChannelSetupRxParams+0x108>)
 800e6d2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800e6d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e6da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e6de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e6e2:	4a14      	ldr	r2, [pc, #80]	; (800e734 <LoRaMacMcChannelSetupRxParams+0x104>)
 800e6e4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e6e8:	f043 0320 	orr.w	r3, r3, #32
 800e6ec:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    else
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( rxParams->Class == CLASS_B )
 800e6f0:	782b      	ldrb	r3, [r5, #0]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d009      	beq.n	800e70a <LoRaMacMcChannelSetupRxParams+0xda>
    {
        // Calculate class b parameters
        LoRaMacClassBSetMulticastPeriodicity( &Nvm.MacGroup2.MulticastChannelList[groupID] );
    }
    return LORAMAC_STATUS_OK;
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	e012      	b.n	800e720 <LoRaMacMcChannelSetupRxParams+0xf0>
        verify.DatarateParams.Datarate = rxParams->Params.ClassB.Datarate;
 800e6fa:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e6fe:	f88d 3004 	strb.w	r3, [sp, #4]
 800e702:	e7bf      	b.n	800e684 <LoRaMacMcChannelSetupRxParams+0x54>
        verify.Frequency = rxParams->Params.ClassB.Frequency;
 800e704:	686b      	ldr	r3, [r5, #4]
 800e706:	9301      	str	r3, [sp, #4]
 800e708:	e7d1      	b.n	800e6ae <LoRaMacMcChannelSetupRxParams+0x7e>
        LoRaMacClassBSetMulticastPeriodicity( &Nvm.MacGroup2.MulticastChannelList[groupID] );
 800e70a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e70e:	011b      	lsls	r3, r3, #4
 800e710:	33e8      	adds	r3, #232	; 0xe8
 800e712:	4809      	ldr	r0, [pc, #36]	; (800e738 <LoRaMacMcChannelSetupRxParams+0x108>)
 800e714:	4418      	add	r0, r3
 800e716:	f000 faf5 	bl	800ed04 <LoRaMacClassBSetMulticastPeriodicity>
    return LORAMAC_STATUS_OK;
 800e71a:	4620      	mov	r0, r4
 800e71c:	e000      	b.n	800e720 <LoRaMacMcChannelSetupRxParams+0xf0>
        return LORAMAC_STATUS_BUSY;
 800e71e:	2001      	movs	r0, #1
}
 800e720:	b003      	add	sp, #12
 800e722:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e724:	2003      	movs	r0, #3
 800e726:	e7fb      	b.n	800e720 <LoRaMacMcChannelSetupRxParams+0xf0>
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 800e728:	2016      	movs	r0, #22
 800e72a:	e7f9      	b.n	800e720 <LoRaMacMcChannelSetupRxParams+0xf0>
 800e72c:	2016      	movs	r0, #22
 800e72e:	e7f7      	b.n	800e720 <LoRaMacMcChannelSetupRxParams+0xf0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e730:	2003      	movs	r0, #3
 800e732:	e7f5      	b.n	800e720 <LoRaMacMcChannelSetupRxParams+0xf0>
 800e734:	20000d80 	.word	0x20000d80
 800e738:	20008000 	.word	0x20008000

0800e73c <LoRaMacProcessMicForDatablock>:

LoRaMacStatus_t LoRaMacProcessMicForDatablock( uint8_t *buffer, uint32_t size, uint16_t sessionCnt, uint8_t fragIndex, uint32_t descriptor, uint32_t *mic )
{
 800e73c:	b500      	push	{lr}
 800e73e:	b083      	sub	sp, #12
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;

    macCryptoStatus = LoRaMacCryptoComputeDataBlock( buffer, size, sessionCnt, fragIndex, descriptor, mic );
 800e740:	f8dd c014 	ldr.w	ip, [sp, #20]
 800e744:	f8cd c004 	str.w	ip, [sp, #4]
 800e748:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e74c:	f8cd c000 	str.w	ip, [sp]
 800e750:	f001 f8ae 	bl	800f8b0 <LoRaMacCryptoComputeDataBlock>
    if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800e754:	b910      	cbnz	r0, 800e75c <LoRaMacProcessMicForDatablock+0x20>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    return LORAMAC_STATUS_OK;
}
 800e756:	b003      	add	sp, #12
 800e758:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e75c:	2011      	movs	r0, #17
 800e75e:	e7fa      	b.n	800e756 <LoRaMacProcessMicForDatablock+0x1a>

0800e760 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800e760:	b570      	push	{r4, r5, r6, lr}
 800e762:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e764:	2300      	movs	r3, #0
 800e766:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800e76a:	2800      	cmp	r0, #0
 800e76c:	f000 80f3 	beq.w	800e956 <LoRaMacMlmeRequest+0x1f6>
 800e770:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800e772:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800e774:	f7fe ff6a 	bl	800d64c <LoRaMacIsBusy>
 800e778:	b118      	cbz	r0, 800e782 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800e77a:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800e77c:	4620      	mov	r0, r4
 800e77e:	b006      	add	sp, #24
 800e780:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800e782:	f000 fd67 	bl	800f254 <LoRaMacConfirmQueueIsFull>
 800e786:	b108      	cbz	r0, 800e78c <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800e788:	2401      	movs	r4, #1
 800e78a:	e7f7      	b.n	800e77c <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e78c:	f000 fd5c 	bl	800f248 <LoRaMacConfirmQueueGetCnt>
 800e790:	b308      	cbz	r0, 800e7d6 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e792:	4b72      	ldr	r3, [pc, #456]	; (800e95c <LoRaMacMlmeRequest+0x1fc>)
 800e794:	2101      	movs	r1, #1
 800e796:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e79a:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800e79e:	f042 0204 	orr.w	r2, r2, #4
 800e7a2:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 800e7a6:	782b      	ldrb	r3, [r5, #0]
 800e7a8:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e7ac:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800e7b6:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800e7ba:	461c      	mov	r4, r3
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	2b0c      	cmp	r3, #12
 800e7c0:	f200 80af 	bhi.w	800e922 <LoRaMacMlmeRequest+0x1c2>
 800e7c4:	e8df f003 	tbb	[pc, r3]
 800e7c8:	adadad0d 	.word	0xadadad0d
 800e7cc:	adad675d 	.word	0xadad675d
 800e7d0:	7f9ead70 	.word	0x7f9ead70
 800e7d4:	95          	.byte	0x95
 800e7d5:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800e7d6:	2214      	movs	r2, #20
 800e7d8:	2100      	movs	r1, #0
 800e7da:	4861      	ldr	r0, [pc, #388]	; (800e960 <LoRaMacMlmeRequest+0x200>)
 800e7dc:	f003 fd67 	bl	80122ae <memset1>
 800e7e0:	e7d7      	b.n	800e792 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800e7e2:	4b5e      	ldr	r3, [pc, #376]	; (800e95c <LoRaMacMlmeRequest+0x1fc>)
 800e7e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e7e8:	f013 0f20 	tst.w	r3, #32
 800e7ec:	d1c6      	bne.n	800e77c <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800e7ee:	792b      	ldrb	r3, [r5, #4]
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d003      	beq.n	800e7fc <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d026      	beq.n	800e846 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e7f8:	2402      	movs	r4, #2
 800e7fa:	e093      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	f7fe fc4f 	bl	800d0a0 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800e802:	4c58      	ldr	r4, [pc, #352]	; (800e964 <LoRaMacMlmeRequest+0x204>)
 800e804:	2200      	movs	r2, #0
 800e806:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800e80a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e80e:	f001 fb7f 	bl	800ff10 <RegionAlternateDr>
 800e812:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800e816:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800e81a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800e81e:	2307      	movs	r3, #7
 800e820:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800e824:	20ff      	movs	r0, #255	; 0xff
 800e826:	f7fe fd9b 	bl	800d360 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800e82a:	4604      	mov	r4, r0
 800e82c:	2800      	cmp	r0, #0
 800e82e:	d079      	beq.n	800e924 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800e830:	4e4c      	ldr	r6, [pc, #304]	; (800e964 <LoRaMacMlmeRequest+0x204>)
 800e832:	2201      	movs	r2, #1
 800e834:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800e838:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800e83c:	f001 fb68 	bl	800ff10 <RegionAlternateDr>
 800e840:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800e844:	e06e      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800e846:	4e47      	ldr	r6, [pc, #284]	; (800e964 <LoRaMacMlmeRequest+0x204>)
 800e848:	2400      	movs	r4, #0
 800e84a:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800e84e:	2302      	movs	r3, #2
 800e850:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e854:	4669      	mov	r1, sp
 800e856:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800e85a:	f001 fadc 	bl	800fe16 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800e85e:	792b      	ldrb	r3, [r5, #4]
 800e860:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e864:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800e868:	2301      	movs	r3, #1
 800e86a:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800e86e:	f7fc fe93 	bl	800b598 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e872:	4a3a      	ldr	r2, [pc, #232]	; (800e95c <LoRaMacMlmeRequest+0x1fc>)
 800e874:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e878:	f043 0310 	orr.w	r3, r3, #16
 800e87c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 800e880:	e050      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e882:	2200      	movs	r2, #0
 800e884:	a904      	add	r1, sp, #16
 800e886:	2002      	movs	r0, #2
 800e888:	f000 fad2 	bl	800ee30 <LoRaMacCommandsAddCmd>
 800e88c:	4604      	mov	r4, r0
 800e88e:	2800      	cmp	r0, #0
 800e890:	d048      	beq.n	800e924 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e892:	2413      	movs	r4, #19
 800e894:	e046      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800e896:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800e89a:	b2d2      	uxtb	r2, r2
 800e89c:	68a9      	ldr	r1, [r5, #8]
 800e89e:	88a8      	ldrh	r0, [r5, #4]
 800e8a0:	f7fc fdd0 	bl	800b444 <SetTxContinuousWave>
 800e8a4:	4604      	mov	r4, r0
            break;
 800e8a6:	e03d      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800e8a8:	4669      	mov	r1, sp
 800e8aa:	200d      	movs	r0, #13
 800e8ac:	f000 fb0c 	bl	800eec8 <LoRaMacCommandsGetCmd>
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	b3b8      	cbz	r0, 800e924 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	a904      	add	r1, sp, #16
 800e8b8:	200d      	movs	r0, #13
 800e8ba:	f000 fab9 	bl	800ee30 <LoRaMacCommandsAddCmd>
 800e8be:	4604      	mov	r4, r0
 800e8c0:	b380      	cbz	r0, 800e924 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e8c2:	2413      	movs	r4, #19
            break;
 800e8c4:	e02e      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800e8c6:	4b27      	ldr	r3, [pc, #156]	; (800e964 <LoRaMacMlmeRequest+0x204>)
 800e8c8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e8cc:	b10b      	cbz	r3, 800e8d2 <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e8ce:	2402      	movs	r4, #2
 800e8d0:	e028      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800e8d2:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800e8d4:	f004 0007 	and.w	r0, r4, #7
 800e8d8:	f000 fa01 	bl	800ecde <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800e8dc:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	a904      	add	r1, sp, #16
 800e8e4:	2010      	movs	r0, #16
 800e8e6:	f000 faa3 	bl	800ee30 <LoRaMacCommandsAddCmd>
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	b1d0      	cbz	r0, 800e924 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e8ee:	2413      	movs	r4, #19
 800e8f0:	e018      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	a904      	add	r1, sp, #16
 800e8f6:	2012      	movs	r0, #18
 800e8f8:	f000 fa9a 	bl	800ee30 <LoRaMacCommandsAddCmd>
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	b188      	cbz	r0, 800e924 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e900:	2413      	movs	r4, #19
 800e902:	e00f      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800e904:	2301      	movs	r3, #1
 800e906:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800e90a:	f000 f9d9 	bl	800ecc0 <LoRaMacClassBIsAcquisitionInProgress>
 800e90e:	b108      	cbz	r0, 800e914 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800e910:	2401      	movs	r4, #1
 800e912:	e007      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800e914:	f000 f9d1 	bl	800ecba <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800e918:	2000      	movs	r0, #0
 800e91a:	f000 f9d3 	bl	800ecc4 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800e91e:	2400      	movs	r4, #0
 800e920:	e000      	b.n	800e924 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800e922:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e924:	4b0d      	ldr	r3, [pc, #52]	; (800e95c <LoRaMacMlmeRequest+0x1fc>)
 800e926:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800e92a:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800e92c:	b17c      	cbz	r4, 800e94e <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e92e:	f000 fc8b 	bl	800f248 <LoRaMacConfirmQueueGetCnt>
 800e932:	2800      	cmp	r0, #0
 800e934:	f47f af22 	bne.w	800e77c <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800e938:	4b08      	ldr	r3, [pc, #32]	; (800e95c <LoRaMacMlmeRequest+0x1fc>)
 800e93a:	2100      	movs	r1, #0
 800e93c:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e940:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800e944:	f361 0282 	bfi	r2, r1, #2, #1
 800e948:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800e94c:	e716      	b.n	800e77c <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800e94e:	a805      	add	r0, sp, #20
 800e950:	f000 fbb0 	bl	800f0b4 <LoRaMacConfirmQueueAdd>
 800e954:	e712      	b.n	800e77c <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e956:	2403      	movs	r4, #3
 800e958:	e710      	b.n	800e77c <LoRaMacMlmeRequest+0x1c>
 800e95a:	bf00      	nop
 800e95c:	20000d80 	.word	0x20000d80
 800e960:	200011d4 	.word	0x200011d4
 800e964:	20008000 	.word	0x20008000

0800e968 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96c:	b091      	sub	sp, #68	; 0x44
 800e96e:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800e970:	2800      	cmp	r0, #0
 800e972:	f000 80de 	beq.w	800eb32 <LoRaMacMcpsRequest+0x1ca>
 800e976:	f04f 0a00 	mov.w	sl, #0
 800e97a:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800e97c:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800e980:	f7fe fe64 	bl	800d64c <LoRaMacIsBusy>
 800e984:	4680      	mov	r8, r0
 800e986:	b118      	cbz	r0, 800e990 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800e988:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800e98a:	b011      	add	sp, #68	; 0x44
 800e98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800e990:	ac06      	add	r4, sp, #24
 800e992:	462e      	mov	r6, r5
 800e994:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e998:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800e99c:	4651      	mov	r1, sl
 800e99e:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800e9a2:	4c66      	ldr	r4, [pc, #408]	; (800eb3c <LoRaMacMcpsRequest+0x1d4>)
 800e9a4:	2214      	movs	r2, #20
 800e9a6:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 800e9aa:	f003 fc80 	bl	80122ae <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800e9b4:	4b62      	ldr	r3, [pc, #392]	; (800eb40 <LoRaMacMcpsRequest+0x1d8>)
 800e9b6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e9ba:	2b02      	cmp	r3, #2
 800e9bc:	d065      	beq.n	800ea8a <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800e9be:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e9c2:	2f01      	cmp	r7, #1
 800e9c4:	f000 8086 	beq.w	800ead4 <LoRaMacMcpsRequest+0x16c>
 800e9c8:	2f03      	cmp	r7, #3
 800e9ca:	f000 8096 	beq.w	800eafa <LoRaMacMcpsRequest+0x192>
 800e9ce:	2f00      	cmp	r7, #0
 800e9d0:	d06d      	beq.n	800eaae <LoRaMacMcpsRequest+0x146>
 800e9d2:	f04f 0b00 	mov.w	fp, #0
 800e9d6:	f8cd b014 	str.w	fp, [sp, #20]
 800e9da:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e9de:	2302      	movs	r3, #2
 800e9e0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e9e4:	4e56      	ldr	r6, [pc, #344]	; (800eb40 <LoRaMacMcpsRequest+0x1d8>)
 800e9e6:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800e9ea:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e9ee:	a90e      	add	r1, sp, #56	; 0x38
 800e9f0:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800e9f4:	f001 f9f6 	bl	800fde4 <RegionGetPhyParam>
 800e9f8:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800e9fa:	b244      	sxtb	r4, r0
 800e9fc:	45a3      	cmp	fp, r4
 800e9fe:	bfb8      	it	lt
 800ea00:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800ea02:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 800ea06:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 800ea0a:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 800ea0e:	4648      	mov	r0, r9
 800ea10:	f7fc fcea 	bl	800b3e8 <CheckForMinimumAbpDatarate>
 800ea14:	4603      	mov	r3, r0
 800ea16:	b900      	cbnz	r0, 800ea1a <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ea18:	465c      	mov	r4, fp
    if( readyToSend == true )
 800ea1a:	f1b8 0f00 	cmp.w	r8, #0
 800ea1e:	f000 8082 	beq.w	800eb26 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800ea22:	f1b9 0f00 	cmp.w	r9, #0
 800ea26:	d000      	beq.n	800ea2a <LoRaMacMcpsRequest+0xc2>
 800ea28:	b19b      	cbz	r3, 800ea52 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800ea2a:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ea2e:	4b44      	ldr	r3, [pc, #272]	; (800eb40 <LoRaMacMcpsRequest+0x1d8>)
 800ea30:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ea34:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ea38:	2205      	movs	r2, #5
 800ea3a:	a90b      	add	r1, sp, #44	; 0x2c
 800ea3c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ea40:	f001 f9f1 	bl	800fe26 <RegionVerify>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d076      	beq.n	800eb36 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ea48:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800ea4c:	4b3c      	ldr	r3, [pc, #240]	; (800eb40 <LoRaMacMcpsRequest+0x1d8>)
 800ea4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ea52:	4b3a      	ldr	r3, [pc, #232]	; (800eb3c <LoRaMacMcpsRequest+0x1d4>)
 800ea54:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800ea58:	4b39      	ldr	r3, [pc, #228]	; (800eb40 <LoRaMacMcpsRequest+0x1d8>)
 800ea5a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800ea5e:	f7fd fe51 	bl	800c704 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800ea62:	9b03      	ldr	r3, [sp, #12]
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	4653      	mov	r3, sl
 800ea68:	9a05      	ldr	r2, [sp, #20]
 800ea6a:	9904      	ldr	r1, [sp, #16]
 800ea6c:	a80c      	add	r0, sp, #48	; 0x30
 800ea6e:	f7fe fd5d 	bl	800d52c <Send>
        if( status == LORAMAC_STATUS_OK )
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d152      	bne.n	800eb1c <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800ea76:	4b31      	ldr	r3, [pc, #196]	; (800eb3c <LoRaMacMcpsRequest+0x1d4>)
 800ea78:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ea7c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800ea80:	f042 0201 	orr.w	r2, r2, #1
 800ea84:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800ea88:	e04e      	b.n	800eb28 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ea8a:	4b2d      	ldr	r3, [pc, #180]	; (800eb40 <LoRaMacMcpsRequest+0x1d8>)
 800ea8c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ea90:	2b02      	cmp	r3, #2
 800ea92:	d194      	bne.n	800e9be <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ea94:	4b2a      	ldr	r3, [pc, #168]	; (800eb40 <LoRaMacMcpsRequest+0x1d8>)
 800ea96:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d18f      	bne.n	800e9be <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800ea9e:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d18b      	bne.n	800e9be <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	f88d 3018 	strb.w	r3, [sp, #24]
 800eaac:	e787      	b.n	800e9be <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800eaae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800eab2:	2202      	movs	r2, #2
 800eab4:	f362 1347 	bfi	r3, r2, #5, #3
 800eab8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800eabc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800eac0:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800eac2:	9b08      	ldr	r3, [sp, #32]
 800eac4:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800eac6:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800eaca:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800eace:	f04f 0801 	mov.w	r8, #1
            break;
 800ead2:	e784      	b.n	800e9de <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ead4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ead8:	2204      	movs	r2, #4
 800eada:	f362 1347 	bfi	r3, r2, #5, #3
 800eade:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800eae2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800eae6:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800eae8:	9b08      	ldr	r3, [sp, #32]
 800eaea:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800eaec:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800eaf0:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800eaf4:	f04f 0801 	mov.w	r8, #1
            break;
 800eaf8:	e771      	b.n	800e9de <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800eafa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800eafe:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800eb02:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800eb06:	9b07      	ldr	r3, [sp, #28]
 800eb08:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800eb0a:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800eb0e:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800eb12:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	9304      	str	r3, [sp, #16]
            break;
 800eb1a:	e760      	b.n	800e9de <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800eb1c:	4b07      	ldr	r3, [pc, #28]	; (800eb3c <LoRaMacMcpsRequest+0x1d4>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800eb24:	e000      	b.n	800eb28 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800eb26:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800eb28:	4b04      	ldr	r3, [pc, #16]	; (800eb3c <LoRaMacMcpsRequest+0x1d4>)
 800eb2a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800eb2e:	612b      	str	r3, [r5, #16]
    return status;
 800eb30:	e72b      	b.n	800e98a <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800eb32:	2003      	movs	r0, #3
 800eb34:	e729      	b.n	800e98a <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800eb36:	2003      	movs	r0, #3
 800eb38:	e727      	b.n	800e98a <LoRaMacMcpsRequest+0x22>
 800eb3a:	bf00      	nop
 800eb3c:	20000d80 	.word	0x20000d80
 800eb40:	20008000 	.word	0x20008000

0800eb44 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800eb44:	b510      	push	{r4, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800eb4a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800eb4e:	220f      	movs	r2, #15
 800eb50:	a901      	add	r1, sp, #4
 800eb52:	4b09      	ldr	r3, [pc, #36]	; (800eb78 <LoRaMacTestSetDutyCycleOn+0x34>)
 800eb54:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800eb58:	f001 f965 	bl	800fe26 <RegionVerify>
 800eb5c:	b148      	cbz	r0, 800eb72 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800eb5e:	4b06      	ldr	r3, [pc, #24]	; (800eb78 <LoRaMacTestSetDutyCycleOn+0x34>)
 800eb60:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800eb64:	4a05      	ldr	r2, [pc, #20]	; (800eb7c <LoRaMacTestSetDutyCycleOn+0x38>)
 800eb66:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800eb6a:	f043 0320 	orr.w	r3, r3, #32
 800eb6e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800eb72:	b002      	add	sp, #8
 800eb74:	bd10      	pop	{r4, pc}
 800eb76:	bf00      	nop
 800eb78:	20008000 	.word	0x20008000
 800eb7c:	20000d80 	.word	0x20000d80

0800eb80 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800eb80:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800eb82:	f7fe ffc1 	bl	800db08 <LoRaMacStop>
 800eb86:	b110      	cbz	r0, 800eb8e <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800eb88:	2401      	movs	r4, #1
    }
}
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	bd38      	pop	{r3, r4, r5, pc}
 800eb8e:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800eb90:	4d0a      	ldr	r5, [pc, #40]	; (800ebbc <LoRaMacDeInitialization+0x3c>)
 800eb92:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800eb96:	f005 fce5 	bl	8014564 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800eb9a:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800eb9e:	f005 fce1 	bl	8014564 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800eba2:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800eba6:	f005 fcdd 	bl	8014564 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800ebaa:	f000 f899 	bl	800ece0 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800ebae:	2000      	movs	r0, #0
 800ebb0:	f7fe fa76 	bl	800d0a0 <ResetMacParameters>
        Radio.Sleep( );
 800ebb4:	4b02      	ldr	r3, [pc, #8]	; (800ebc0 <LoRaMacDeInitialization+0x40>)
 800ebb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb8:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800ebba:	e7e6      	b.n	800eb8a <LoRaMacDeInitialization+0xa>
 800ebbc:	20000d80 	.word	0x20000d80
 800ebc0:	0801a22c 	.word	0x0801a22c

0800ebc4 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800ebc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc8:	b08b      	sub	sp, #44	; 0x2c
 800ebca:	460f      	mov	r7, r1
 800ebcc:	4616      	mov	r6, r2
 800ebce:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800ebd0:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800ebd4:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800ebd8:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800ebdc:	6842      	ldr	r2, [r0, #4]
 800ebde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ebe0:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800ebe2:	f890 8001 	ldrb.w	r8, [r0, #1]
 800ebe6:	f1b8 0f00 	cmp.w	r8, #0
 800ebea:	d109      	bne.n	800ec00 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800ebec:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800ebf0:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800ebf4:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	b00b      	add	sp, #44	; 0x2c
 800ebfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec00:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800ec02:	2302      	movs	r3, #2
 800ec04:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ec08:	7bc3      	ldrb	r3, [r0, #15]
 800ec0a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ec0e:	a908      	add	r1, sp, #32
 800ec10:	7c00      	ldrb	r0, [r0, #16]
 800ec12:	f001 f8e7 	bl	800fde4 <RegionGetPhyParam>
 800ec16:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800ec18:	b243      	sxtb	r3, r0
 800ec1a:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800ec1c:	454b      	cmp	r3, r9
 800ec1e:	bfb8      	it	lt
 800ec20:	464b      	movlt	r3, r9
 800ec22:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800ec24:	6862      	ldr	r2, [r4, #4]
 800ec26:	8923      	ldrh	r3, [r4, #8]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d201      	bcs.n	800ec30 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800ec2c:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800ec30:	8961      	ldrh	r1, [r4, #10]
 800ec32:	440b      	add	r3, r1
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d224      	bcs.n	800ec82 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800ec38:	6863      	ldr	r3, [r4, #4]
 800ec3a:	8921      	ldrh	r1, [r4, #8]
 800ec3c:	8962      	ldrh	r2, [r4, #10]
 800ec3e:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800ec42:	4283      	cmp	r3, r0
 800ec44:	d332      	bcc.n	800ecac <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800ec46:	1a5b      	subs	r3, r3, r1
 800ec48:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec4c:	fb02 3311 	mls	r3, r2, r1, r3
 800ec50:	bb7b      	cbnz	r3, 800ecb2 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800ec52:	9b01      	ldr	r3, [sp, #4]
 800ec54:	4599      	cmp	r9, r3
 800ec56:	dc03      	bgt.n	800ec60 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800ec58:	7823      	ldrb	r3, [r4, #0]
 800ec5a:	b9eb      	cbnz	r3, 800ec98 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800ec5c:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ec60:	2321      	movs	r3, #33	; 0x21
 800ec62:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800ec66:	9b00      	ldr	r3, [sp, #0]
 800ec68:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ec6c:	7be3      	ldrb	r3, [r4, #15]
 800ec6e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ec72:	a908      	add	r1, sp, #32
 800ec74:	7c20      	ldrb	r0, [r4, #16]
 800ec76:	f001 f8b5 	bl	800fde4 <RegionGetPhyParam>
 800ec7a:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800ec7c:	fa4f f980 	sxtb.w	r9, r0
 800ec80:	e7b4      	b.n	800ebec <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800ec82:	230a      	movs	r3, #10
 800ec84:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ec88:	a908      	add	r1, sp, #32
 800ec8a:	7c20      	ldrb	r0, [r4, #16]
 800ec8c:	f001 f8aa 	bl	800fde4 <RegionGetPhyParam>
 800ec90:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800ec92:	fa4f fa80 	sxtb.w	sl, r0
 800ec96:	e7cf      	b.n	800ec38 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ec98:	2302      	movs	r3, #2
 800ec9a:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800ec9e:	a903      	add	r1, sp, #12
 800eca0:	7c20      	ldrb	r0, [r4, #16]
 800eca2:	f001 f8b8 	bl	800fe16 <RegionInitDefaults>
                    nbTrans = 1;
 800eca6:	f04f 0b01 	mov.w	fp, #1
 800ecaa:	e7d9      	b.n	800ec60 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800ecac:	f8dd 9000 	ldr.w	r9, [sp]
 800ecb0:	e79c      	b.n	800ebec <LoRaMacAdrCalcNext+0x28>
 800ecb2:	f8dd 9000 	ldr.w	r9, [sp]
 800ecb6:	e799      	b.n	800ebec <LoRaMacAdrCalcNext+0x28>

0800ecb8 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecb8:	4770      	bx	lr

0800ecba <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecba:	4770      	bx	lr

0800ecbc <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecbc:	4770      	bx	lr

0800ecbe <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecbe:	4770      	bx	lr

0800ecc0 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	4770      	bx	lr

0800ecc4 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecc4:	4770      	bx	lr

0800ecc6 <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecc6:	4770      	bx	lr

0800ecc8 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecc8:	4770      	bx	lr

0800ecca <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecca:	2000      	movs	r0, #0
 800eccc:	4770      	bx	lr

0800ecce <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecce:	2000      	movs	r0, #0
 800ecd0:	4770      	bx	lr

0800ecd2 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	4770      	bx	lr

0800ecd6 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	4770      	bx	lr

0800ecda <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecda:	2000      	movs	r0, #0
 800ecdc:	4770      	bx	lr

0800ecde <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecde:	4770      	bx	lr

0800ece0 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ece0:	4770      	bx	lr

0800ece2 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ece2:	4770      	bx	lr

0800ece4 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ece4:	2002      	movs	r0, #2
 800ece6:	4770      	bx	lr

0800ece8 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ece8:	2002      	movs	r0, #2
 800ecea:	4770      	bx	lr

0800ecec <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecec:	2002      	movs	r0, #2
 800ecee:	4770      	bx	lr

0800ecf0 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecf0:	4770      	bx	lr

0800ecf2 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	4770      	bx	lr

0800ecf6 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecf6:	4770      	bx	lr

0800ecf8 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecf8:	4770      	bx	lr

0800ecfa <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	4770      	bx	lr

0800ecfe <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ecfe:	2000      	movs	r0, #0
 800ed00:	4770      	bx	lr

0800ed02 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ed02:	4770      	bx	lr

0800ed04 <LoRaMacClassBSetMulticastPeriodicity>:
    {
        multicastChannel->PingNb = CalcPingNb( multicastChannel->ChannelParams.RxParams.Params.ClassB.Periodicity );
        multicastChannel->PingPeriod = CalcPingPeriod( multicastChannel->PingNb );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ed04:	4770      	bx	lr

0800ed06 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ed06:	4770      	bx	lr

0800ed08 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ed08:	4770      	bx	lr

0800ed0a <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	2b0f      	cmp	r3, #15
 800ed0e:	d804      	bhi.n	800ed1a <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800ed10:	5cc2      	ldrb	r2, [r0, r3]
 800ed12:	b922      	cbnz	r2, 800ed1e <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ed14:	3301      	adds	r3, #1
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	e7f8      	b.n	800ed0c <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800ed1a:	2001      	movs	r0, #1
 800ed1c:	4770      	bx	lr
            return false;
 800ed1e:	2000      	movs	r0, #0
}
 800ed20:	4770      	bx	lr
	...

0800ed24 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800ed24:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800ed26:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800ed28:	0123      	lsls	r3, r4, #4
 800ed2a:	3308      	adds	r3, #8
 800ed2c:	4d06      	ldr	r5, [pc, #24]	; (800ed48 <MallocNewMacCommandSlot+0x24>)
 800ed2e:	441d      	add	r5, r3
 800ed30:	4628      	mov	r0, r5
 800ed32:	f7ff ffea 	bl	800ed0a <IsSlotFree>
 800ed36:	b920      	cbnz	r0, 800ed42 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800ed38:	3401      	adds	r4, #1
 800ed3a:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800ed3c:	2c20      	cmp	r4, #32
 800ed3e:	d1f3      	bne.n	800ed28 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800ed40:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800ed42:	4628      	mov	r0, r5
 800ed44:	bd38      	pop	{r3, r4, r5, pc}
 800ed46:	bf00      	nop
 800ed48:	20001340 	.word	0x20001340

0800ed4c <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800ed4c:	b120      	cbz	r0, 800ed58 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800ed4e:	2200      	movs	r2, #0
 800ed50:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800ed52:	6042      	str	r2, [r0, #4]

    return true;
 800ed54:	2001      	movs	r0, #1
 800ed56:	4770      	bx	lr
        return false;
 800ed58:	2000      	movs	r0, #0
}
 800ed5a:	4770      	bx	lr

0800ed5c <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	b160      	cbz	r0, 800ed7a <LinkedListAdd+0x1e>
 800ed60:	b169      	cbz	r1, 800ed7e <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800ed62:	6802      	ldr	r2, [r0, #0]
 800ed64:	b13a      	cbz	r2, 800ed76 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800ed66:	685a      	ldr	r2, [r3, #4]
 800ed68:	b102      	cbz	r2, 800ed6c <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800ed6a:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800ed70:	6059      	str	r1, [r3, #4]

    return true;
 800ed72:	2001      	movs	r0, #1
 800ed74:	4770      	bx	lr
        list->First = element;
 800ed76:	6001      	str	r1, [r0, #0]
 800ed78:	e7f5      	b.n	800ed66 <LinkedListAdd+0xa>
        return false;
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	4770      	bx	lr
 800ed7e:	2000      	movs	r0, #0
}
 800ed80:	4770      	bx	lr

0800ed82 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ed82:	b160      	cbz	r0, 800ed9e <LinkedListGetPrevious+0x1c>
 800ed84:	b161      	cbz	r1, 800eda0 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800ed86:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800ed88:	4281      	cmp	r1, r0
 800ed8a:	d102      	bne.n	800ed92 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800ed8c:	2000      	movs	r0, #0
    }

    return curElement;
}
 800ed8e:	4770      	bx	lr
            curElement = curElement->Next;
 800ed90:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d0fb      	beq.n	800ed8e <LinkedListGetPrevious+0xc>
 800ed96:	6803      	ldr	r3, [r0, #0]
 800ed98:	428b      	cmp	r3, r1
 800ed9a:	d1f9      	bne.n	800ed90 <LinkedListGetPrevious+0xe>
 800ed9c:	4770      	bx	lr
 800ed9e:	4770      	bx	lr
        return NULL;
 800eda0:	4608      	mov	r0, r1
 800eda2:	4770      	bx	lr

0800eda4 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800eda4:	b1b8      	cbz	r0, 800edd6 <LinkedListRemove+0x32>
{
 800eda6:	b538      	push	{r3, r4, r5, lr}
 800eda8:	460c      	mov	r4, r1
 800edaa:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800edac:	b1a9      	cbz	r1, 800edda <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800edae:	f7ff ffe8 	bl	800ed82 <LinkedListGetPrevious>

    if( list->First == element )
 800edb2:	682b      	ldr	r3, [r5, #0]
 800edb4:	42a3      	cmp	r3, r4
 800edb6:	d009      	beq.n	800edcc <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800edb8:	686b      	ldr	r3, [r5, #4]
 800edba:	42a3      	cmp	r3, r4
 800edbc:	d009      	beq.n	800edd2 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800edbe:	b108      	cbz	r0, 800edc4 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800edc0:	6823      	ldr	r3, [r4, #0]
 800edc2:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800edc4:	2300      	movs	r3, #0
 800edc6:	6023      	str	r3, [r4, #0]

    return true;
 800edc8:	2001      	movs	r0, #1
}
 800edca:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800edcc:	6823      	ldr	r3, [r4, #0]
 800edce:	602b      	str	r3, [r5, #0]
 800edd0:	e7f2      	b.n	800edb8 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800edd2:	6068      	str	r0, [r5, #4]
 800edd4:	e7f3      	b.n	800edbe <LinkedListRemove+0x1a>
        return false;
 800edd6:	2000      	movs	r0, #0
}
 800edd8:	4770      	bx	lr
        return false;
 800edda:	2000      	movs	r0, #0
 800eddc:	e7f5      	b.n	800edca <LinkedListRemove+0x26>
	...

0800ede0 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800ede0:	2811      	cmp	r0, #17
 800ede2:	d805      	bhi.n	800edf0 <IsSticky+0x10>
 800ede4:	4b03      	ldr	r3, [pc, #12]	; (800edf4 <IsSticky+0x14>)
 800ede6:	fa23 f000 	lsr.w	r0, r3, r0
 800edea:	f000 0001 	and.w	r0, r0, #1
 800edee:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800edf0:	2000      	movs	r0, #0
    }
}
 800edf2:	4770      	bx	lr
 800edf4:	00020720 	.word	0x00020720

0800edf8 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800edf8:	2000      	movs	r0, #0
 800edfa:	4770      	bx	lr

0800edfc <FreeMacCommandSlot>:
    if( slot == NULL )
 800edfc:	b130      	cbz	r0, 800ee0c <FreeMacCommandSlot+0x10>
{
 800edfe:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ee00:	2210      	movs	r2, #16
 800ee02:	2100      	movs	r1, #0
 800ee04:	f003 fa53 	bl	80122ae <memset1>
    return true;
 800ee08:	2001      	movs	r0, #1
}
 800ee0a:	bd08      	pop	{r3, pc}
        return false;
 800ee0c:	2000      	movs	r0, #0
}
 800ee0e:	4770      	bx	lr

0800ee10 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800ee10:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800ee12:	4c06      	ldr	r4, [pc, #24]	; (800ee2c <LoRaMacCommandsInit+0x1c>)
 800ee14:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800ee18:	2100      	movs	r1, #0
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f003 fa47 	bl	80122ae <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800ee20:	4620      	mov	r0, r4
 800ee22:	f7ff ff93 	bl	800ed4c <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ee26:	2000      	movs	r0, #0
 800ee28:	bd10      	pop	{r4, pc}
 800ee2a:	bf00      	nop
 800ee2c:	20001340 	.word	0x20001340

0800ee30 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800ee30:	b321      	cbz	r1, 800ee7c <LoRaMacCommandsAddCmd+0x4c>
{
 800ee32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee34:	4605      	mov	r5, r0
 800ee36:	4614      	mov	r4, r2
 800ee38:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800ee3a:	f7ff ff73 	bl	800ed24 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800ee3e:	4606      	mov	r6, r0
 800ee40:	b1f0      	cbz	r0, 800ee80 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800ee42:	4601      	mov	r1, r0
 800ee44:	4810      	ldr	r0, [pc, #64]	; (800ee88 <LoRaMacCommandsAddCmd+0x58>)
 800ee46:	f7ff ff89 	bl	800ed5c <LinkedListAdd>
 800ee4a:	b1d8      	cbz	r0, 800ee84 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800ee4c:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800ee4e:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ee50:	b2a2      	uxth	r2, r4
 800ee52:	4639      	mov	r1, r7
 800ee54:	1d70      	adds	r0, r6, #5
 800ee56:	f003 fa12 	bl	801227e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	f7ff ffc0 	bl	800ede0 <IsSticky>
 800ee60:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800ee62:	4628      	mov	r0, r5
 800ee64:	f7ff ffc8 	bl	800edf8 <IsConfirmationRequired>
 800ee68:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800ee6a:	4b07      	ldr	r3, [pc, #28]	; (800ee88 <LoRaMacCommandsAddCmd+0x58>)
 800ee6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ee70:	4414      	add	r4, r2
 800ee72:	3401      	adds	r4, #1
 800ee74:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800ee78:	2000      	movs	r0, #0
}
 800ee7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ee7c:	2001      	movs	r0, #1
}
 800ee7e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800ee80:	2002      	movs	r0, #2
 800ee82:	e7fa      	b.n	800ee7a <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800ee84:	2005      	movs	r0, #5
 800ee86:	e7f8      	b.n	800ee7a <LoRaMacCommandsAddCmd+0x4a>
 800ee88:	20001340 	.word	0x20001340

0800ee8c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800ee8c:	b1a0      	cbz	r0, 800eeb8 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800ee8e:	b510      	push	{r4, lr}
 800ee90:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800ee92:	4601      	mov	r1, r0
 800ee94:	480b      	ldr	r0, [pc, #44]	; (800eec4 <LoRaMacCommandsRemoveCmd+0x38>)
 800ee96:	f7ff ff85 	bl	800eda4 <LinkedListRemove>
 800ee9a:	b178      	cbz	r0, 800eebc <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800ee9c:	68a1      	ldr	r1, [r4, #8]
 800ee9e:	4a09      	ldr	r2, [pc, #36]	; (800eec4 <LoRaMacCommandsRemoveCmd+0x38>)
 800eea0:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800eea4:	1a5b      	subs	r3, r3, r1
 800eea6:	3b01      	subs	r3, #1
 800eea8:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800eeac:	4620      	mov	r0, r4
 800eeae:	f7ff ffa5 	bl	800edfc <FreeMacCommandSlot>
 800eeb2:	b128      	cbz	r0, 800eec0 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800eeb4:	2000      	movs	r0, #0
}
 800eeb6:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800eeb8:	2001      	movs	r0, #1
}
 800eeba:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800eebc:	2003      	movs	r0, #3
 800eebe:	e7fa      	b.n	800eeb6 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800eec0:	2005      	movs	r0, #5
 800eec2:	e7f8      	b.n	800eeb6 <LoRaMacCommandsRemoveCmd+0x2a>
 800eec4:	20001340 	.word	0x20001340

0800eec8 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800eec8:	4b06      	ldr	r3, [pc, #24]	; (800eee4 <LoRaMacCommandsGetCmd+0x1c>)
 800eeca:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800eecc:	e000      	b.n	800eed0 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800eece:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800eed0:	b113      	cbz	r3, 800eed8 <LoRaMacCommandsGetCmd+0x10>
 800eed2:	791a      	ldrb	r2, [r3, #4]
 800eed4:	4282      	cmp	r2, r0
 800eed6:	d1fa      	bne.n	800eece <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800eed8:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800eeda:	b10b      	cbz	r3, 800eee0 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800eedc:	2000      	movs	r0, #0
 800eede:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800eee0:	2003      	movs	r0, #3
}
 800eee2:	4770      	bx	lr
 800eee4:	20001340 	.word	0x20001340

0800eee8 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800eee8:	4b0a      	ldr	r3, [pc, #40]	; (800ef14 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800eeea:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800eeec:	b120      	cbz	r0, 800eef8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800eeee:	7b03      	ldrb	r3, [r0, #12]
 800eef0:	b11b      	cbz	r3, 800eefa <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800eef2:	6800      	ldr	r0, [r0, #0]
 800eef4:	e7fa      	b.n	800eeec <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800eef6:	bd10      	pop	{r4, pc}
 800eef8:	4770      	bx	lr
{
 800eefa:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800eefc:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800eefe:	f7ff ffc5 	bl	800ee8c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800ef02:	4620      	mov	r0, r4
    while( curElement != NULL )
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d0f6      	beq.n	800eef6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800ef08:	7b03      	ldrb	r3, [r0, #12]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d0f6      	beq.n	800eefc <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800ef0e:	6800      	ldr	r0, [r0, #0]
 800ef10:	e7f8      	b.n	800ef04 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800ef12:	bf00      	nop
 800ef14:	20001340 	.word	0x20001340

0800ef18 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800ef18:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ef1a:	4b0b      	ldr	r3, [pc, #44]	; (800ef48 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800ef1c:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800ef1e:	e000      	b.n	800ef22 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800ef20:	4634      	mov	r4, r6
    while( curElement != NULL )
 800ef22:	b17c      	cbz	r4, 800ef44 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800ef24:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800ef26:	7925      	ldrb	r5, [r4, #4]
 800ef28:	4628      	mov	r0, r5
 800ef2a:	f7ff ff59 	bl	800ede0 <IsSticky>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d0f6      	beq.n	800ef20 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800ef32:	4628      	mov	r0, r5
 800ef34:	f7ff ff60 	bl	800edf8 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d1f1      	bne.n	800ef20 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	f7ff ffa5 	bl	800ee8c <LoRaMacCommandsRemoveCmd>
 800ef42:	e7ed      	b.n	800ef20 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ef44:	2000      	movs	r0, #0
 800ef46:	bd70      	pop	{r4, r5, r6, pc}
 800ef48:	20001340 	.word	0x20001340

0800ef4c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800ef4c:	b128      	cbz	r0, 800ef5a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800ef4e:	4a04      	ldr	r2, [pc, #16]	; (800ef60 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800ef50:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800ef54:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800ef56:	2000      	movs	r0, #0
 800ef58:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ef5a:	2001      	movs	r0, #1
}
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	20001340 	.word	0x20001340

0800ef64 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800ef64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800ef68:	4b16      	ldr	r3, [pc, #88]	; (800efc4 <LoRaMacCommandsSerializeCmds+0x60>)
 800ef6a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ef6c:	b32a      	cbz	r2, 800efba <LoRaMacCommandsSerializeCmds+0x56>
 800ef6e:	4607      	mov	r7, r0
 800ef70:	4688      	mov	r8, r1
 800ef72:	4616      	mov	r6, r2
 800ef74:	b319      	cbz	r1, 800efbe <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800ef76:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800ef78:	b194      	cbz	r4, 800efa0 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ef7a:	1a7a      	subs	r2, r7, r1
 800ef7c:	68a3      	ldr	r3, [r4, #8]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d30d      	bcc.n	800efa0 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800ef84:	1c4d      	adds	r5, r1, #1
 800ef86:	b2ed      	uxtb	r5, r5
 800ef88:	7923      	ldrb	r3, [r4, #4]
 800ef8a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ef8c:	8922      	ldrh	r2, [r4, #8]
 800ef8e:	1d61      	adds	r1, r4, #5
 800ef90:	1970      	adds	r0, r6, r5
 800ef92:	f003 f974 	bl	801227e <memcpy1>
            itr += curElement->PayloadSize;
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	441d      	add	r5, r3
 800ef9a:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800ef9c:	6824      	ldr	r4, [r4, #0]
 800ef9e:	e7eb      	b.n	800ef78 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800efa0:	b12c      	cbz	r4, 800efae <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800efa2:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800efa4:	4620      	mov	r0, r4
 800efa6:	f7ff ff71 	bl	800ee8c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800efaa:	462c      	mov	r4, r5
 800efac:	e7f8      	b.n	800efa0 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800efae:	4640      	mov	r0, r8
 800efb0:	f7ff ffcc 	bl	800ef4c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800efb4:	2000      	movs	r0, #0
}
 800efb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800efba:	2001      	movs	r0, #1
 800efbc:	e7fb      	b.n	800efb6 <LoRaMacCommandsSerializeCmds+0x52>
 800efbe:	2001      	movs	r0, #1
 800efc0:	e7f9      	b.n	800efb6 <LoRaMacCommandsSerializeCmds+0x52>
 800efc2:	bf00      	nop
 800efc4:	20001340 	.word	0x20001340

0800efc8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800efc8:	1e83      	subs	r3, r0, #2
 800efca:	2b11      	cmp	r3, #17
 800efcc:	d80a      	bhi.n	800efe4 <LoRaMacCommandsGetCmdSize+0x1c>
 800efce:	e8df f003 	tbb	[pc, r3]
 800efd2:	0b23      	.short	0x0b23
 800efd4:	110f240d 	.word	0x110f240d
 800efd8:	09171513 	.word	0x09171513
 800efdc:	09091909 	.word	0x09091909
 800efe0:	211f1d1b 	.word	0x211f1d1b
 800efe4:	2000      	movs	r0, #0
 800efe6:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800efe8:	2005      	movs	r0, #5
            break;
 800efea:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800efec:	2002      	movs	r0, #2
            break;
 800efee:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800eff0:	2001      	movs	r0, #1
            break;
 800eff2:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800eff4:	2006      	movs	r0, #6
            break;
 800eff6:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800eff8:	2002      	movs	r0, #2
            break;
 800effa:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800effc:	2002      	movs	r0, #2
            break;
 800effe:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800f000:	2005      	movs	r0, #5
            break;
 800f002:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800f004:	2006      	movs	r0, #6
            break;
 800f006:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800f008:	2001      	movs	r0, #1
            break;
 800f00a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800f00c:	2005      	movs	r0, #5
            break;
 800f00e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800f010:	2004      	movs	r0, #4
            break;
 800f012:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800f014:	2004      	movs	r0, #4
            break;
 800f016:	4770      	bx	lr
            cidSize = 3;
 800f018:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800f01a:	4770      	bx	lr

0800f01c <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800f01c:	4b03      	ldr	r3, [pc, #12]	; (800f02c <IncreaseBufferPointer+0x10>)
 800f01e:	4298      	cmp	r0, r3
 800f020:	d001      	beq.n	800f026 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800f022:	3004      	adds	r0, #4
 800f024:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f026:	4802      	ldr	r0, [pc, #8]	; (800f030 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop
 800f02c:	20001568 	.word	0x20001568
 800f030:	20001558 	.word	0x20001558

0800f034 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800f034:	b108      	cbz	r0, 800f03a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800f036:	2000      	movs	r0, #0
 800f038:	4770      	bx	lr
        return true;
 800f03a:	2001      	movs	r0, #1
}
 800f03c:	4770      	bx	lr

0800f03e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800f03e:	2804      	cmp	r0, #4
 800f040:	d801      	bhi.n	800f046 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800f042:	2000      	movs	r0, #0
 800f044:	4770      	bx	lr
        return true;
 800f046:	2001      	movs	r0, #1
}
 800f048:	4770      	bx	lr
	...

0800f04c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800f04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04e:	4606      	mov	r6, r0
 800f050:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f052:	4b0d      	ldr	r3, [pc, #52]	; (800f088 <GetElement+0x3c>)
 800f054:	f893 7020 	ldrb.w	r7, [r3, #32]
 800f058:	4638      	mov	r0, r7
 800f05a:	f7ff ffeb 	bl	800f034 <IsListEmpty>
 800f05e:	b970      	cbnz	r0, 800f07e <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f060:	2500      	movs	r5, #0
 800f062:	42af      	cmp	r7, r5
 800f064:	d909      	bls.n	800f07a <GetElement+0x2e>
    {
        if( element->Request == request )
 800f066:	7823      	ldrb	r3, [r4, #0]
 800f068:	42b3      	cmp	r3, r6
 800f06a:	d00a      	beq.n	800f082 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800f06c:	4620      	mov	r0, r4
 800f06e:	f7ff ffd5 	bl	800f01c <IncreaseBufferPointer>
 800f072:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f074:	3501      	adds	r5, #1
 800f076:	b2ed      	uxtb	r5, r5
 800f078:	e7f3      	b.n	800f062 <GetElement+0x16>
    }

    return NULL;
 800f07a:	2000      	movs	r0, #0
}
 800f07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800f07e:	2000      	movs	r0, #0
 800f080:	e7fc      	b.n	800f07c <GetElement+0x30>
            return element;
 800f082:	4620      	mov	r0, r4
 800f084:	e7fa      	b.n	800f07c <GetElement+0x30>
 800f086:	bf00      	nop
 800f088:	2000154c 	.word	0x2000154c

0800f08c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800f08c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800f08e:	4c08      	ldr	r4, [pc, #32]	; (800f0b0 <LoRaMacConfirmQueueInit+0x24>)
 800f090:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800f092:	2300      	movs	r3, #0
 800f094:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f098:	f104 000c 	add.w	r0, r4, #12
 800f09c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f09e:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800f0a0:	2214      	movs	r2, #20
 800f0a2:	21ff      	movs	r1, #255	; 0xff
 800f0a4:	f003 f903 	bl	80122ae <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800f0ae:	bd10      	pop	{r4, pc}
 800f0b0:	2000154c 	.word	0x2000154c

0800f0b4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f0b8:	4b0f      	ldr	r3, [pc, #60]	; (800f0f8 <LoRaMacConfirmQueueAdd+0x44>)
 800f0ba:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f0be:	f7ff ffbe 	bl	800f03e <IsListFull>
 800f0c2:	b9b8      	cbnz	r0, 800f0f4 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800f0c4:	4c0c      	ldr	r4, [pc, #48]	; (800f0f8 <LoRaMacConfirmQueueAdd+0x44>)
 800f0c6:	68a3      	ldr	r3, [r4, #8]
 800f0c8:	782a      	ldrb	r2, [r5, #0]
 800f0ca:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800f0cc:	68a3      	ldr	r3, [r4, #8]
 800f0ce:	786a      	ldrb	r2, [r5, #1]
 800f0d0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800f0d2:	68a3      	ldr	r3, [r4, #8]
 800f0d4:	78ea      	ldrb	r2, [r5, #3]
 800f0d6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800f0d8:	68a3      	ldr	r3, [r4, #8]
 800f0da:	78aa      	ldrb	r2, [r5, #2]
 800f0dc:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800f0de:	f894 3020 	ldrb.w	r3, [r4, #32]
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800f0e8:	68a0      	ldr	r0, [r4, #8]
 800f0ea:	f7ff ff97 	bl	800f01c <IncreaseBufferPointer>
 800f0ee:	60a0      	str	r0, [r4, #8]

    return true;
 800f0f0:	2001      	movs	r0, #1
}
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	e7fc      	b.n	800f0f2 <LoRaMacConfirmQueueAdd+0x3e>
 800f0f8:	2000154c 	.word	0x2000154c

0800f0fc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800f0fc:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f0fe:	4b09      	ldr	r3, [pc, #36]	; (800f124 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800f100:	f893 4020 	ldrb.w	r4, [r3, #32]
 800f104:	4620      	mov	r0, r4
 800f106:	f7ff ff95 	bl	800f034 <IsListEmpty>
 800f10a:	b948      	cbnz	r0, 800f120 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800f10c:	4d05      	ldr	r5, [pc, #20]	; (800f124 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800f10e:	3c01      	subs	r4, #1
 800f110:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800f114:	6868      	ldr	r0, [r5, #4]
 800f116:	f7ff ff81 	bl	800f01c <IncreaseBufferPointer>
 800f11a:	6068      	str	r0, [r5, #4]

    return true;
 800f11c:	2001      	movs	r0, #1
}
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800f120:	2000      	movs	r0, #0
 800f122:	e7fc      	b.n	800f11e <LoRaMacConfirmQueueRemoveFirst+0x22>
 800f124:	2000154c 	.word	0x2000154c

0800f128 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800f128:	b538      	push	{r3, r4, r5, lr}
 800f12a:	4605      	mov	r5, r0
 800f12c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800f12e:	4b08      	ldr	r3, [pc, #32]	; (800f150 <LoRaMacConfirmQueueSetStatus+0x28>)
 800f130:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f134:	f7ff ff7e 	bl	800f034 <IsListEmpty>
 800f138:	b948      	cbnz	r0, 800f14e <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800f13a:	4b05      	ldr	r3, [pc, #20]	; (800f150 <LoRaMacConfirmQueueSetStatus+0x28>)
 800f13c:	689a      	ldr	r2, [r3, #8]
 800f13e:	6859      	ldr	r1, [r3, #4]
 800f140:	4620      	mov	r0, r4
 800f142:	f7ff ff83 	bl	800f04c <GetElement>
        if( element != NULL )
 800f146:	b110      	cbz	r0, 800f14e <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800f148:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800f14a:	2201      	movs	r2, #1
 800f14c:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800f14e:	bd38      	pop	{r3, r4, r5, pc}
 800f150:	2000154c 	.word	0x2000154c

0800f154 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800f154:	b510      	push	{r4, lr}
 800f156:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800f158:	4b09      	ldr	r3, [pc, #36]	; (800f180 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800f15a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f15e:	f7ff ff69 	bl	800f034 <IsListEmpty>
 800f162:	b940      	cbnz	r0, 800f176 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800f164:	4b06      	ldr	r3, [pc, #24]	; (800f180 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800f166:	689a      	ldr	r2, [r3, #8]
 800f168:	6859      	ldr	r1, [r3, #4]
 800f16a:	4620      	mov	r0, r4
 800f16c:	f7ff ff6e 	bl	800f04c <GetElement>
        if( element != NULL )
 800f170:	b118      	cbz	r0, 800f17a <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800f172:	7840      	ldrb	r0, [r0, #1]
 800f174:	e000      	b.n	800f178 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f176:	2001      	movs	r0, #1
}
 800f178:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f17a:	2001      	movs	r0, #1
 800f17c:	e7fc      	b.n	800f178 <LoRaMacConfirmQueueGetStatus+0x24>
 800f17e:	bf00      	nop
 800f180:	2000154c 	.word	0x2000154c

0800f184 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800f188:	4b0c      	ldr	r3, [pc, #48]	; (800f1bc <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800f18a:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800f18c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800f190:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f194:	f7ff ff4e 	bl	800f034 <IsListEmpty>
 800f198:	b150      	cbz	r0, 800f1b0 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800f19a:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800f19c:	2301      	movs	r3, #1
 800f19e:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f7ff ff3b 	bl	800f01c <IncreaseBufferPointer>
 800f1a6:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800f1a8:	4b04      	ldr	r3, [pc, #16]	; (800f1bc <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	4283      	cmp	r3, r0
 800f1ae:	d0f4      	beq.n	800f19a <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800f1b0:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800f1b2:	78e3      	ldrb	r3, [r4, #3]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1f3      	bne.n	800f1a0 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800f1b8:	e7f0      	b.n	800f19c <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800f1ba:	bf00      	nop
 800f1bc:	2000154c 	.word	0x2000154c

0800f1c0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800f1c0:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800f1c2:	4b04      	ldr	r3, [pc, #16]	; (800f1d4 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800f1c4:	689a      	ldr	r2, [r3, #8]
 800f1c6:	6859      	ldr	r1, [r3, #4]
 800f1c8:	f7ff ff40 	bl	800f04c <GetElement>
 800f1cc:	b100      	cbz	r0, 800f1d0 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800f1ce:	2001      	movs	r0, #1
    }
    return false;
}
 800f1d0:	bd08      	pop	{r3, pc}
 800f1d2:	bf00      	nop
 800f1d4:	2000154c 	.word	0x2000154c

0800f1d8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800f1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800f1de:	4b19      	ldr	r3, [pc, #100]	; (800f244 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800f1e0:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800f1e4:	2204      	movs	r2, #4
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	eb0d 0002 	add.w	r0, sp, r2
 800f1ec:	f003 f85f 	bl	80122ae <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800f1f0:	2400      	movs	r4, #0
 800f1f2:	e00d      	b.n	800f210 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800f1f4:	781a      	ldrb	r2, [r3, #0]
 800f1f6:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800f1fa:	785a      	ldrb	r2, [r3, #1]
 800f1fc:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800f200:	78db      	ldrb	r3, [r3, #3]
 800f202:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800f206:	f7ff ff79 	bl	800f0fc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800f20a:	b1a5      	cbz	r5, 800f236 <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800f20c:	3401      	adds	r4, #1
 800f20e:	b2e4      	uxtb	r4, r4
 800f210:	42bc      	cmp	r4, r7
 800f212:	d214      	bcs.n	800f23e <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800f214:	4b0b      	ldr	r3, [pc, #44]	; (800f244 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800f216:	685a      	ldr	r2, [r3, #4]
 800f218:	7812      	ldrb	r2, [r2, #0]
 800f21a:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	7852      	ldrb	r2, [r2, #1]
 800f220:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800f226:	2d00      	cmp	r5, #0
 800f228:	d0e4      	beq.n	800f1f4 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800f22a:	4b06      	ldr	r3, [pc, #24]	; (800f244 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	4630      	mov	r0, r6
 800f232:	4798      	blx	r3
 800f234:	e7e7      	b.n	800f206 <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800f236:	a801      	add	r0, sp, #4
 800f238:	f7ff ff3c 	bl	800f0b4 <LoRaMacConfirmQueueAdd>
 800f23c:	e7e6      	b.n	800f20c <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800f23e:	b003      	add	sp, #12
 800f240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f242:	bf00      	nop
 800f244:	2000154c 	.word	0x2000154c

0800f248 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800f248:	4b01      	ldr	r3, [pc, #4]	; (800f250 <LoRaMacConfirmQueueGetCnt+0x8>)
 800f24a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f24e:	4770      	bx	lr
 800f250:	2000154c 	.word	0x2000154c

0800f254 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800f254:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f256:	4b03      	ldr	r3, [pc, #12]	; (800f264 <LoRaMacConfirmQueueIsFull+0x10>)
 800f258:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f25c:	f7ff feef 	bl	800f03e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800f260:	bd08      	pop	{r3, pc}
 800f262:	bf00      	nop
 800f264:	2000154c 	.word	0x2000154c

0800f268 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800f268:	b410      	push	{r4}
 800f26a:	9c01      	ldr	r4, [sp, #4]
 800f26c:	9902      	ldr	r1, [sp, #8]
 800f26e:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800f270:	b1da      	cbz	r2, 800f2aa <PrepareB0+0x42>
 800f272:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800f274:	2049      	movs	r0, #73	; 0x49
 800f276:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800f278:	2000      	movs	r0, #0
 800f27a:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800f27c:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800f27e:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800f280:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800f282:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800f284:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800f286:	0a23      	lsrs	r3, r4, #8
 800f288:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800f28a:	0c23      	lsrs	r3, r4, #16
 800f28c:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800f28e:	0e24      	lsrs	r4, r4, #24
 800f290:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800f292:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800f294:	0a0b      	lsrs	r3, r1, #8
 800f296:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800f298:	0c0b      	lsrs	r3, r1, #16
 800f29a:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800f29c:	0e09      	lsrs	r1, r1, #24
 800f29e:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800f2a0:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800f2a2:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f2a6:	bc10      	pop	{r4}
 800f2a8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f2aa:	2009      	movs	r0, #9
 800f2ac:	e7fb      	b.n	800f2a6 <PrepareB0+0x3e>

0800f2ae <PrepareB0ForDataBlock>:
 * \param [in] msgLen         - Length of message
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0ForDataBlock( uint16_t sessionCnt, uint8_t fragIndex, uint32_t descriptor, uint32_t msgLen, uint8_t* b0 )
{
 800f2ae:	b410      	push	{r4}
 800f2b0:	9c01      	ldr	r4, [sp, #4]
    if( b0 == 0 )
 800f2b2:	b1e4      	cbz	r4, 800f2ee <PrepareB0ForDataBlock+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800f2b4:	f04f 0c49 	mov.w	ip, #73	; 0x49
 800f2b8:	f884 c000 	strb.w	ip, [r4]

    b0[1] = sessionCnt & 0xFF;
 800f2bc:	7060      	strb	r0, [r4, #1]
    b0[2] = ( sessionCnt >> 8 ) & 0xFF;
 800f2be:	0a00      	lsrs	r0, r0, #8
 800f2c0:	70a0      	strb	r0, [r4, #2]
 
    b0[3] = fragIndex;
 800f2c2:	70e1      	strb	r1, [r4, #3]
    
    b0[4] = descriptor & 0xFF;
 800f2c4:	7122      	strb	r2, [r4, #4]
    b0[5] = ( descriptor >> 8 ) & 0xFF;
 800f2c6:	0a11      	lsrs	r1, r2, #8
 800f2c8:	7161      	strb	r1, [r4, #5]
    b0[6] = ( descriptor >> 16 ) & 0xFF;
 800f2ca:	0c11      	lsrs	r1, r2, #16
 800f2cc:	71a1      	strb	r1, [r4, #6]
    b0[7] = ( descriptor >> 24 ) & 0xFF;
 800f2ce:	0e12      	lsrs	r2, r2, #24
 800f2d0:	71e2      	strb	r2, [r4, #7]
    
    b0[8] = 0x00;
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	7220      	strb	r0, [r4, #8]
    b0[9] = 0x00;
 800f2d6:	7260      	strb	r0, [r4, #9]
    b0[10] = 0x00;
 800f2d8:	72a0      	strb	r0, [r4, #10]
    b0[11] = 0x00;
 800f2da:	72e0      	strb	r0, [r4, #11]

    b0[12] = msgLen & 0xFF;
 800f2dc:	7323      	strb	r3, [r4, #12]
    b0[13] = (msgLen >> 8) & 0xFF;
 800f2de:	0a1a      	lsrs	r2, r3, #8
 800f2e0:	7362      	strb	r2, [r4, #13]
    b0[14] = (msgLen >> 16) & 0xFF;
 800f2e2:	0c1a      	lsrs	r2, r3, #16
 800f2e4:	73a2      	strb	r2, [r4, #14]
    b0[15] = (msgLen >> 24) & 0xFF;
 800f2e6:	0e1b      	lsrs	r3, r3, #24
 800f2e8:	73e3      	strb	r3, [r4, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f2ea:	bc10      	pop	{r4}
 800f2ec:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f2ee:	2009      	movs	r0, #9
 800f2f0:	e7fb      	b.n	800f2ea <PrepareB0ForDataBlock+0x3c>
	...

0800f2f4 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d80e      	bhi.n	800f318 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800f2fa:	469c      	mov	ip, r3
 800f2fc:	4a07      	ldr	r2, [pc, #28]	; (800f31c <GetKeyAddrItem+0x28>)
 800f2fe:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800f302:	4282      	cmp	r2, r0
 800f304:	d002      	beq.n	800f30c <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800f306:	3301      	adds	r3, #1
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	e7f4      	b.n	800f2f6 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800f30c:	4b03      	ldr	r3, [pc, #12]	; (800f31c <GetKeyAddrItem+0x28>)
 800f30e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800f312:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800f314:	2000      	movs	r0, #0
 800f316:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800f318:	200b      	movs	r0, #11
}
 800f31a:	4770      	bx	lr
 800f31c:	20000210 	.word	0x20000210

0800f320 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800f320:	b1f1      	cbz	r1, 800f360 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800f322:	3801      	subs	r0, #1
 800f324:	2803      	cmp	r0, #3
 800f326:	d81d      	bhi.n	800f364 <GetLastFcntDown+0x44>
 800f328:	e8df f000 	tbb	[pc, r0]
 800f32c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800f330:	4a0d      	ldr	r2, [pc, #52]	; (800f368 <GetLastFcntDown+0x48>)
 800f332:	6812      	ldr	r2, [r2, #0]
 800f334:	6912      	ldr	r2, [r2, #16]
 800f336:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800f338:	2000      	movs	r0, #0
            break;
 800f33a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800f33c:	4a0a      	ldr	r2, [pc, #40]	; (800f368 <GetLastFcntDown+0x48>)
 800f33e:	6812      	ldr	r2, [r2, #0]
 800f340:	6952      	ldr	r2, [r2, #20]
 800f342:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800f344:	2000      	movs	r0, #0
            break;
 800f346:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800f348:	4a07      	ldr	r2, [pc, #28]	; (800f368 <GetLastFcntDown+0x48>)
 800f34a:	6812      	ldr	r2, [r2, #0]
 800f34c:	6992      	ldr	r2, [r2, #24]
 800f34e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800f350:	2000      	movs	r0, #0
            break;
 800f352:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800f354:	4a04      	ldr	r2, [pc, #16]	; (800f368 <GetLastFcntDown+0x48>)
 800f356:	6812      	ldr	r2, [r2, #0]
 800f358:	69d2      	ldr	r2, [r2, #28]
 800f35a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800f35c:	2000      	movs	r0, #0
            break;
 800f35e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f360:	2009      	movs	r0, #9
 800f362:	4770      	bx	lr
    switch( fCntID )
 800f364:	2005      	movs	r0, #5
}
 800f366:	4770      	bx	lr
 800f368:	20001570 	.word	0x20001570

0800f36c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800f36c:	b510      	push	{r4, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800f372:	2300      	movs	r3, #0
 800f374:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800f376:	a901      	add	r1, sp, #4
 800f378:	f7ff ffd2 	bl	800f320 <GetLastFcntDown>
 800f37c:	b948      	cbnz	r0, 800f392 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800f37e:	9b01      	ldr	r3, [sp, #4]
 800f380:	42a3      	cmp	r3, r4
 800f382:	d309      	bcc.n	800f398 <CheckFCntDown+0x2c>
 800f384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f388:	d001      	beq.n	800f38e <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800f38a:	2000      	movs	r0, #0
 800f38c:	e002      	b.n	800f394 <CheckFCntDown+0x28>
        return true;
 800f38e:	2001      	movs	r0, #1
 800f390:	e000      	b.n	800f394 <CheckFCntDown+0x28>
        return false;
 800f392:	2000      	movs	r0, #0
    }
}
 800f394:	b002      	add	sp, #8
 800f396:	bd10      	pop	{r4, pc}
        return true;
 800f398:	2001      	movs	r0, #1
 800f39a:	e7fb      	b.n	800f394 <CheckFCntDown+0x28>

0800f39c <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800f39c:	3801      	subs	r0, #1
 800f39e:	2803      	cmp	r0, #3
 800f3a0:	d815      	bhi.n	800f3ce <UpdateFCntDown+0x32>
 800f3a2:	e8df f000 	tbb	[pc, r0]
 800f3a6:	0702      	.short	0x0702
 800f3a8:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800f3aa:	4b09      	ldr	r3, [pc, #36]	; (800f3d0 <UpdateFCntDown+0x34>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800f3b0:	6219      	str	r1, [r3, #32]
            break;
 800f3b2:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800f3b4:	4b06      	ldr	r3, [pc, #24]	; (800f3d0 <UpdateFCntDown+0x34>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800f3ba:	6219      	str	r1, [r3, #32]
            break;
 800f3bc:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800f3be:	4b04      	ldr	r3, [pc, #16]	; (800f3d0 <UpdateFCntDown+0x34>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800f3c4:	6219      	str	r1, [r3, #32]
            break;
 800f3c6:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800f3c8:	4b01      	ldr	r3, [pc, #4]	; (800f3d0 <UpdateFCntDown+0x34>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800f3ce:	4770      	bx	lr
 800f3d0:	20001570 	.word	0x20001570

0800f3d4 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800f3d4:	4b0a      	ldr	r3, [pc, #40]	; (800f400 <ResetFCnts+0x2c>)
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	2300      	movs	r3, #0
 800f3da:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f3dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f3e0:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f3e2:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f3e4:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800f3e6:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	dd00      	ble.n	800f3ee <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800f3ec:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800f3ee:	1d99      	adds	r1, r3, #6
 800f3f0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3f8:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	e7f4      	b.n	800f3e8 <ResetFCnts+0x14>
 800f3fe:	bf00      	nop
 800f400:	20001570 	.word	0x20001570

0800f404 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800f404:	4b03      	ldr	r3, [pc, #12]	; (800f414 <IsJoinNonce10xOk+0x10>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800f40a:	4283      	cmp	r3, r0
 800f40c:	bf2c      	ite	cs
 800f40e:	2000      	movcs	r0, #0
 800f410:	2001      	movcc	r0, #1
 800f412:	4770      	bx	lr
 800f414:	20001570 	.word	0x20001570

0800f418 <ComputeCmacB0>:
{
 800f418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41c:	b088      	sub	sp, #32
 800f41e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800f420:	b1f0      	cbz	r0, 800f460 <ComputeCmacB0+0x48>
 800f422:	460c      	mov	r4, r1
 800f424:	4615      	mov	r5, r2
 800f426:	461a      	mov	r2, r3
 800f428:	4680      	mov	r8, r0
 800f42a:	b1de      	cbz	r6, 800f464 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800f42c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f430:	d81a      	bhi.n	800f468 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800f432:	af04      	add	r7, sp, #16
 800f434:	9702      	str	r7, [sp, #8]
 800f436:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f438:	9301      	str	r3, [sp, #4]
 800f43a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800f442:	4629      	mov	r1, r5
 800f444:	4620      	mov	r0, r4
 800f446:	f7ff ff0f 	bl	800f268 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800f44a:	9600      	str	r6, [sp, #0]
 800f44c:	462b      	mov	r3, r5
 800f44e:	4622      	mov	r2, r4
 800f450:	4641      	mov	r1, r8
 800f452:	4638      	mov	r0, r7
 800f454:	f002 fcce 	bl	8011df4 <SecureElementComputeAesCmac>
 800f458:	b940      	cbnz	r0, 800f46c <ComputeCmacB0+0x54>
}
 800f45a:	b008      	add	sp, #32
 800f45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f460:	2009      	movs	r0, #9
 800f462:	e7fa      	b.n	800f45a <ComputeCmacB0+0x42>
 800f464:	2009      	movs	r0, #9
 800f466:	e7f8      	b.n	800f45a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800f468:	200d      	movs	r0, #13
 800f46a:	e7f6      	b.n	800f45a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f46c:	200e      	movs	r0, #14
 800f46e:	e7f4      	b.n	800f45a <ComputeCmacB0+0x42>

0800f470 <ComputeCmacB0ForDataBlock>:
{
 800f470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f474:	b086      	sub	sp, #24
 800f476:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800f478:	b1c0      	cbz	r0, 800f4ac <ComputeCmacB0ForDataBlock+0x3c>
 800f47a:	460c      	mov	r4, r1
 800f47c:	4615      	mov	r5, r2
 800f47e:	469c      	mov	ip, r3
 800f480:	4680      	mov	r8, r0
 800f482:	b1ae      	cbz	r6, 800f4b0 <ComputeCmacB0ForDataBlock+0x40>
    PrepareB0ForDataBlock( sessionCnt, fragIndex, descriptor, len, micBuff );
 800f484:	af02      	add	r7, sp, #8
 800f486:	9700      	str	r7, [sp, #0]
 800f488:	460b      	mov	r3, r1
 800f48a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f48c:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 800f490:	4660      	mov	r0, ip
 800f492:	f7ff ff0c 	bl	800f2ae <PrepareB0ForDataBlock>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800f496:	9600      	str	r6, [sp, #0]
 800f498:	462b      	mov	r3, r5
 800f49a:	4622      	mov	r2, r4
 800f49c:	4641      	mov	r1, r8
 800f49e:	4638      	mov	r0, r7
 800f4a0:	f002 fca8 	bl	8011df4 <SecureElementComputeAesCmac>
 800f4a4:	b930      	cbnz	r0, 800f4b4 <ComputeCmacB0ForDataBlock+0x44>
}
 800f4a6:	b006      	add	sp, #24
 800f4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f4ac:	2009      	movs	r0, #9
 800f4ae:	e7fa      	b.n	800f4a6 <ComputeCmacB0ForDataBlock+0x36>
 800f4b0:	2009      	movs	r0, #9
 800f4b2:	e7f8      	b.n	800f4a6 <ComputeCmacB0ForDataBlock+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f4b4:	200e      	movs	r0, #14
 800f4b6:	e7f6      	b.n	800f4a6 <ComputeCmacB0ForDataBlock+0x36>

0800f4b8 <DeriveSessionKey10x>:
{
 800f4b8:	b510      	push	{r4, lr}
 800f4ba:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800f4bc:	2400      	movs	r4, #0
 800f4be:	9400      	str	r4, [sp, #0]
 800f4c0:	9401      	str	r4, [sp, #4]
 800f4c2:	9402      	str	r4, [sp, #8]
 800f4c4:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800f4c6:	2808      	cmp	r0, #8
 800f4c8:	d003      	beq.n	800f4d2 <DeriveSessionKey10x+0x1a>
 800f4ca:	2809      	cmp	r0, #9
 800f4cc:	d025      	beq.n	800f51a <DeriveSessionKey10x+0x62>
 800f4ce:	200a      	movs	r0, #10
 800f4d0:	e021      	b.n	800f516 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800f4d2:	2401      	movs	r4, #1
 800f4d4:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800f4d8:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800f4dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f4e0:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800f4e4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800f4e8:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800f4ec:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800f4f0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800f4f4:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800f4f8:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800f4fc:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800f500:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800f504:	0a1b      	lsrs	r3, r3, #8
 800f506:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800f50a:	4602      	mov	r2, r0
 800f50c:	2101      	movs	r1, #1
 800f50e:	4668      	mov	r0, sp
 800f510:	f002 fd0e 	bl	8011f30 <SecureElementDeriveAndStoreKey>
 800f514:	b928      	cbnz	r0, 800f522 <DeriveSessionKey10x+0x6a>
}
 800f516:	b004      	add	sp, #16
 800f518:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800f51a:	2402      	movs	r4, #2
 800f51c:	f88d 4000 	strb.w	r4, [sp]
            break;
 800f520:	e7da      	b.n	800f4d8 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f522:	200e      	movs	r0, #14
 800f524:	e7f7      	b.n	800f516 <DeriveSessionKey10x+0x5e>

0800f526 <PayloadEncrypt>:
{
 800f526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52a:	b088      	sub	sp, #32
 800f52c:	4690      	mov	r8, r2
 800f52e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800f530:	2800      	cmp	r0, #0
 800f532:	d052      	beq.n	800f5da <PayloadEncrypt+0xb4>
 800f534:	460d      	mov	r5, r1
 800f536:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800f538:	2600      	movs	r6, #0
 800f53a:	9604      	str	r6, [sp, #16]
 800f53c:	9605      	str	r6, [sp, #20]
 800f53e:	9606      	str	r6, [sp, #24]
 800f540:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800f542:	9600      	str	r6, [sp, #0]
 800f544:	9601      	str	r6, [sp, #4]
 800f546:	9602      	str	r6, [sp, #8]
 800f548:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800f54a:	2701      	movs	r7, #1
 800f54c:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800f550:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800f554:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800f558:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800f55c:	0a19      	lsrs	r1, r3, #8
 800f55e:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800f562:	0c19      	lsrs	r1, r3, #16
 800f564:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800f568:	0e1b      	lsrs	r3, r3, #24
 800f56a:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800f56e:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800f572:	0a13      	lsrs	r3, r2, #8
 800f574:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800f578:	0c13      	lsrs	r3, r2, #16
 800f57a:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800f57e:	0e12      	lsrs	r2, r2, #24
 800f580:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800f584:	e014      	b.n	800f5b0 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800f586:	18f2      	adds	r2, r6, r3
 800f588:	5ca0      	ldrb	r0, [r4, r2]
 800f58a:	f103 0120 	add.w	r1, r3, #32
 800f58e:	4469      	add	r1, sp
 800f590:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800f594:	4048      	eors	r0, r1
 800f596:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800f598:	3301      	adds	r3, #1
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	462a      	mov	r2, r5
 800f59e:	2d10      	cmp	r5, #16
 800f5a0:	bfa8      	it	ge
 800f5a2:	2210      	movge	r2, #16
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	dbee      	blt.n	800f586 <PayloadEncrypt+0x60>
        size -= 16;
 800f5a8:	3d10      	subs	r5, #16
 800f5aa:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800f5ac:	3610      	adds	r6, #16
 800f5ae:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800f5b0:	2d00      	cmp	r5, #0
 800f5b2:	dd0e      	ble.n	800f5d2 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800f5b4:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800f5b8:	3701      	adds	r7, #1
 800f5ba:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800f5bc:	ab04      	add	r3, sp, #16
 800f5be:	4642      	mov	r2, r8
 800f5c0:	2110      	movs	r1, #16
 800f5c2:	4668      	mov	r0, sp
 800f5c4:	f002 fc3b 	bl	8011e3e <SecureElementAesEncrypt>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	d0e6      	beq.n	800f59c <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f5ce:	200e      	movs	r0, #14
 800f5d0:	e000      	b.n	800f5d4 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800f5d2:	2000      	movs	r0, #0
}
 800f5d4:	b008      	add	sp, #32
 800f5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f5da:	2009      	movs	r0, #9
 800f5dc:	e7fa      	b.n	800f5d4 <PayloadEncrypt+0xae>

0800f5de <VerifyCmacB0>:
    if( msg == 0 )
 800f5de:	b368      	cbz	r0, 800f63c <VerifyCmacB0+0x5e>
{
 800f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e4:	b0c8      	sub	sp, #288	; 0x120
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	4615      	mov	r5, r2
 800f5ea:	461e      	mov	r6, r3
 800f5ec:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800f5ee:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f5f2:	d825      	bhi.n	800f640 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800f5f4:	af04      	add	r7, sp, #16
 800f5f6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	4638      	mov	r0, r7
 800f5fe:	f002 fe56 	bl	80122ae <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800f602:	9702      	str	r7, [sp, #8]
 800f604:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800f606:	9301      	str	r3, [sp, #4]
 800f608:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800f610:	4632      	mov	r2, r6
 800f612:	4629      	mov	r1, r5
 800f614:	4620      	mov	r0, r4
 800f616:	f7ff fe27 	bl	800f268 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800f61a:	4622      	mov	r2, r4
 800f61c:	4641      	mov	r1, r8
 800f61e:	a808      	add	r0, sp, #32
 800f620:	f002 fe2d 	bl	801227e <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800f624:	462b      	mov	r3, r5
 800f626:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800f628:	f104 0110 	add.w	r1, r4, #16
 800f62c:	4638      	mov	r0, r7
 800f62e:	f002 fbf0 	bl	8011e12 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800f632:	b130      	cbz	r0, 800f642 <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800f634:	2801      	cmp	r0, #1
 800f636:	d004      	beq.n	800f642 <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f638:	200e      	movs	r0, #14
 800f63a:	e002      	b.n	800f642 <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f63c:	2009      	movs	r0, #9
}
 800f63e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800f640:	200d      	movs	r0, #13
}
 800f642:	b048      	add	sp, #288	; 0x120
 800f644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f648 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800f648:	b188      	cbz	r0, 800f66e <LoRaMacCryptoInit+0x26>
{
 800f64a:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800f64c:	4c09      	ldr	r4, [pc, #36]	; (800f674 <LoRaMacCryptoInit+0x2c>)
 800f64e:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800f650:	2228      	movs	r2, #40	; 0x28
 800f652:	2100      	movs	r1, #0
 800f654:	f002 fe2b 	bl	80122ae <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800f658:	6823      	ldr	r3, [r4, #0]
 800f65a:	2201      	movs	r2, #1
 800f65c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800f65e:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800f660:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800f662:	2400      	movs	r4, #0
 800f664:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800f666:	f7ff feb5 	bl	800f3d4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800f66a:	4620      	mov	r0, r4
}
 800f66c:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800f66e:	2008      	movs	r0, #8
}
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	20001570 	.word	0x20001570

0800f678 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800f678:	4b02      	ldr	r3, [pc, #8]	; (800f684 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800f67e:	2000      	movs	r0, #0
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	20001570 	.word	0x20001570

0800f688 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800f688:	b130      	cbz	r0, 800f698 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800f68a:	4b04      	ldr	r3, [pc, #16]	; (800f69c <LoRaMacCryptoGetFCntUp+0x14>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	3301      	adds	r3, #1
 800f692:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800f694:	2000      	movs	r0, #0
 800f696:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f698:	2009      	movs	r0, #9
}
 800f69a:	4770      	bx	lr
 800f69c:	20001570 	.word	0x20001570

0800f6a0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800f6a0:	b530      	push	{r4, r5, lr}
 800f6a2:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800f6a8:	b1f2      	cbz	r2, 800f6e8 <LoRaMacCryptoGetFCntDown+0x48>
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800f6ae:	a901      	add	r1, sp, #4
 800f6b0:	f7ff fe36 	bl	800f320 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f6b4:	b948      	cbnz	r0, 800f6ca <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800f6b6:	9b01      	ldr	r3, [sp, #4]
 800f6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6bc:	d007      	beq.n	800f6ce <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800f6c2:	2a00      	cmp	r2, #0
 800f6c4:	dd05      	ble.n	800f6d2 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800f6c6:	4413      	add	r3, r2
 800f6c8:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f6ca:	b003      	add	sp, #12
 800f6cc:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800f6ce:	602c      	str	r4, [r5, #0]
 800f6d0:	e7fb      	b.n	800f6ca <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800f6d2:	b132      	cbz	r2, 800f6e2 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800f6d4:	0c1b      	lsrs	r3, r3, #16
 800f6d6:	041b      	lsls	r3, r3, #16
 800f6d8:	4423      	add	r3, r4
 800f6da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f6de:	602b      	str	r3, [r5, #0]
 800f6e0:	e7f3      	b.n	800f6ca <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800f6e2:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800f6e4:	2007      	movs	r0, #7
 800f6e6:	e7f0      	b.n	800f6ca <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f6e8:	2009      	movs	r0, #9
 800f6ea:	e7ee      	b.n	800f6ca <LoRaMacCryptoGetFCntDown+0x2a>

0800f6ec <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800f6ec:	4601      	mov	r1, r0
 800f6ee:	b908      	cbnz	r0, 800f6f4 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f6f0:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f6f2:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	dd01      	ble.n	800f6fe <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800f6fe:	4a07      	ldr	r2, [pc, #28]	; (800f71c <LoRaMacCryptoSetMulticastReference+0x30>)
 800f700:	6812      	ldr	r2, [r2, #0]
 800f702:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800f706:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800f70a:	f103 0c06 	add.w	ip, r3, #6
 800f70e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800f712:	3204      	adds	r2, #4
 800f714:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f716:	3301      	adds	r3, #1
 800f718:	e7ed      	b.n	800f6f6 <LoRaMacCryptoSetMulticastReference+0xa>
 800f71a:	bf00      	nop
 800f71c:	20001570 	.word	0x20001570

0800f720 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800f720:	b1d8      	cbz	r0, 800f75a <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800f722:	b510      	push	{r4, lr}
 800f724:	b082      	sub	sp, #8
 800f726:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800f728:	4b0f      	ldr	r3, [pc, #60]	; (800f768 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	8893      	ldrh	r3, [r2, #4]
 800f72e:	3301      	adds	r3, #1
 800f730:	b29b      	uxth	r3, r3
 800f732:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800f734:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f736:	f000 fa88 	bl	800fc4a <LoRaMacSerializerJoinRequest>
 800f73a:	b980      	cbnz	r0, 800f75e <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800f73c:	4623      	mov	r3, r4
 800f73e:	f853 1b18 	ldr.w	r1, [r3], #24
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	2301      	movs	r3, #1
 800f746:	2213      	movs	r2, #19
 800f748:	f002 fb54 	bl	8011df4 <SecureElementComputeAesCmac>
 800f74c:	b950      	cbnz	r0, 800f764 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f74e:	4620      	mov	r0, r4
 800f750:	f000 fa7b 	bl	800fc4a <LoRaMacSerializerJoinRequest>
 800f754:	b120      	cbz	r0, 800f760 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f756:	2010      	movs	r0, #16
 800f758:	e002      	b.n	800f760 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f75a:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f75c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f75e:	2010      	movs	r0, #16
}
 800f760:	b002      	add	sp, #8
 800f762:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f764:	200e      	movs	r0, #14
 800f766:	e7fb      	b.n	800f760 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800f768:	20001570 	.word	0x20001570

0800f76c <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d036      	beq.n	800f7de <LoRaMacCryptoSecureMessage+0x72>
{
 800f770:	b530      	push	{r4, r5, lr}
 800f772:	b085      	sub	sp, #20
 800f774:	4604      	mov	r4, r0
 800f776:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800f778:	4b1d      	ldr	r3, [pc, #116]	; (800f7f0 <LoRaMacCryptoSecureMessage+0x84>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	4283      	cmp	r3, r0
 800f780:	d82f      	bhi.n	800f7e2 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800f782:	f895 2020 	ldrb.w	r2, [r5, #32]
 800f786:	b342      	cbz	r2, 800f7da <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800f788:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800f78a:	42a3      	cmp	r3, r4
 800f78c:	d209      	bcs.n	800f7a2 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800f78e:	9401      	str	r4, [sp, #4]
 800f790:	2300      	movs	r3, #0
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	68ab      	ldr	r3, [r5, #8]
 800f796:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800f79a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f79c:	f7ff fec3 	bl	800f526 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f7a0:	bb10      	cbnz	r0, 800f7e8 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	f000 fa87 	bl	800fcb6 <LoRaMacSerializerData>
 800f7a8:	b9e8      	cbnz	r0, 800f7e6 <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800f7aa:	7929      	ldrb	r1, [r5, #4]
 800f7ac:	3904      	subs	r1, #4
 800f7ae:	462b      	mov	r3, r5
 800f7b0:	f853 0b2c 	ldr.w	r0, [r3], #44
 800f7b4:	9303      	str	r3, [sp, #12]
 800f7b6:	9402      	str	r4, [sp, #8]
 800f7b8:	68ab      	ldr	r3, [r5, #8]
 800f7ba:	9301      	str	r3, [sp, #4]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	2208      	movs	r2, #8
 800f7c2:	b289      	uxth	r1, r1
 800f7c4:	f7ff fe28 	bl	800f418 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f7c8:	b970      	cbnz	r0, 800f7e8 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	f000 fa73 	bl	800fcb6 <LoRaMacSerializerData>
 800f7d0:	b960      	cbnz	r0, 800f7ec <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800f7d2:	4b07      	ldr	r3, [pc, #28]	; (800f7f0 <LoRaMacCryptoSecureMessage+0x84>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800f7d8:	e006      	b.n	800f7e8 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800f7da:	2208      	movs	r2, #8
 800f7dc:	e7d5      	b.n	800f78a <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f7de:	2009      	movs	r0, #9
}
 800f7e0:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f7e2:	2006      	movs	r0, #6
 800f7e4:	e000      	b.n	800f7e8 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f7e6:	2010      	movs	r0, #16
}
 800f7e8:	b005      	add	sp, #20
 800f7ea:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f7ec:	2010      	movs	r0, #16
 800f7ee:	e7fb      	b.n	800f7e8 <LoRaMacCryptoSecureMessage+0x7c>
 800f7f0:	20001570 	.word	0x20001570

0800f7f4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800f7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7f8:	b087      	sub	sp, #28
 800f7fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800f7fc:	2e00      	cmp	r6, #0
 800f7fe:	d049      	beq.n	800f894 <LoRaMacCryptoUnsecureMessage+0xa0>
 800f800:	4605      	mov	r5, r0
 800f802:	4688      	mov	r8, r1
 800f804:	4617      	mov	r7, r2
 800f806:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800f808:	4619      	mov	r1, r3
 800f80a:	4610      	mov	r0, r2
 800f80c:	f7ff fdae 	bl	800f36c <CheckFCntDown>
 800f810:	2800      	cmp	r0, #0
 800f812:	d041      	beq.n	800f898 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800f814:	4630      	mov	r0, r6
 800f816:	f000 f9b9 	bl	800fb8c <LoRaMacParserData>
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d141      	bne.n	800f8a2 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800f81e:	a905      	add	r1, sp, #20
 800f820:	4628      	mov	r0, r5
 800f822:	f7ff fd67 	bl	800f2f4 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f826:	4605      	mov	r5, r0
 800f828:	2800      	cmp	r0, #0
 800f82a:	d136      	bne.n	800f89a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800f82c:	9b05      	ldr	r3, [sp, #20]
 800f82e:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800f832:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800f834:	68b3      	ldr	r3, [r6, #8]
 800f836:	4543      	cmp	r3, r8
 800f838:	d135      	bne.n	800f8a6 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800f83a:	7b33      	ldrb	r3, [r6, #12]
 800f83c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800f840:	491a      	ldr	r1, [pc, #104]	; (800f8ac <LoRaMacCryptoUnsecureMessage+0xb8>)
 800f842:	6809      	ldr	r1, [r1, #0]
 800f844:	7889      	ldrb	r1, [r1, #2]
 800f846:	b901      	cbnz	r1, 800f84a <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800f848:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800f84a:	7931      	ldrb	r1, [r6, #4]
 800f84c:	3904      	subs	r1, #4
 800f84e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f850:	9003      	str	r0, [sp, #12]
 800f852:	9402      	str	r4, [sp, #8]
 800f854:	f8cd 8004 	str.w	r8, [sp, #4]
 800f858:	2001      	movs	r0, #1
 800f85a:	9000      	str	r0, [sp, #0]
 800f85c:	b289      	uxth	r1, r1
 800f85e:	6830      	ldr	r0, [r6, #0]
 800f860:	f7ff febd 	bl	800f5de <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f864:	4605      	mov	r5, r0
 800f866:	b9c0      	cbnz	r0, 800f89a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800f868:	f896 3020 	ldrb.w	r3, [r6, #32]
 800f86c:	b90b      	cbnz	r3, 800f872 <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800f86e:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800f872:	9401      	str	r4, [sp, #4]
 800f874:	2301      	movs	r3, #1
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	4643      	mov	r3, r8
 800f87a:	464a      	mov	r2, r9
 800f87c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800f880:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800f882:	f7ff fe50 	bl	800f526 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f886:	4605      	mov	r5, r0
 800f888:	b938      	cbnz	r0, 800f89a <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800f88a:	4621      	mov	r1, r4
 800f88c:	4638      	mov	r0, r7
 800f88e:	f7ff fd85 	bl	800f39c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800f892:	e002      	b.n	800f89a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f894:	2509      	movs	r5, #9
 800f896:	e000      	b.n	800f89a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f898:	2506      	movs	r5, #6
}
 800f89a:	4628      	mov	r0, r5
 800f89c:	b007      	add	sp, #28
 800f89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800f8a2:	250f      	movs	r5, #15
 800f8a4:	e7f9      	b.n	800f89a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800f8a6:	2502      	movs	r5, #2
 800f8a8:	e7f7      	b.n	800f89a <LoRaMacCryptoUnsecureMessage+0xa6>
 800f8aa:	bf00      	nop
 800f8ac:	20001570 	.word	0x20001570

0800f8b0 <LoRaMacCryptoComputeDataBlock>:

LoRaMacCryptoStatus_t LoRaMacCryptoComputeDataBlock( uint8_t *buffer, uint32_t size, uint16_t sessionCnt, uint8_t fragIndex, uint32_t descriptor, uint32_t *cmac )
{
 800f8b0:	b500      	push	{lr}
 800f8b2:	b085      	sub	sp, #20
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;

    // Compute mic
    retval = ComputeCmacB0ForDataBlock( buffer, size, DATABLOCK_INT_KEY, sessionCnt, fragIndex, descriptor, cmac );
 800f8b4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f8b8:	f8cd c008 	str.w	ip, [sp, #8]
 800f8bc:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f8c0:	f8cd c004 	str.w	ip, [sp, #4]
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	4613      	mov	r3, r2
 800f8c8:	220a      	movs	r2, #10
 800f8ca:	f7ff fdd1 	bl	800f470 <ComputeCmacB0ForDataBlock>
    {
        return retval;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f8ce:	b005      	add	sp, #20
 800f8d0:	f85d fb04 	ldr.w	pc, [sp], #4

0800f8d4 <LoRaMacCryptoDeriveLifeTimeKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800f8d4:	b500      	push	{lr}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800f8da:	2300      	movs	r3, #0
 800f8dc:	9300      	str	r3, [sp, #0]
 800f8de:	9301      	str	r3, [sp, #4]
 800f8e0:	9302      	str	r3, [sp, #8]
 800f8e2:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800f8e4:	290b      	cmp	r1, #11
 800f8e6:	d007      	beq.n	800f8f8 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800f8e8:	290c      	cmp	r1, #12
 800f8ea:	d013      	beq.n	800f914 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800f8ec:	290a      	cmp	r1, #10
 800f8ee:	d00c      	beq.n	800f90a <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800f8f0:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f8f2:	b005      	add	sp, #20
 800f8f4:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800f8f8:	2801      	cmp	r0, #1
 800f8fa:	d001      	beq.n	800f900 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	e00a      	b.n	800f916 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800f900:	2320      	movs	r3, #32
 800f902:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800f906:	2100      	movs	r1, #0
 800f908:	e005      	b.n	800f916 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800f90a:	2330      	movs	r3, #48	; 0x30
 800f90c:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800f910:	2100      	movs	r1, #0
            break;
 800f912:	e000      	b.n	800f916 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800f914:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800f916:	4668      	mov	r0, sp
 800f918:	f002 fb0a 	bl	8011f30 <SecureElementDeriveAndStoreKey>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d0e8      	beq.n	800f8f2 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f920:	200e      	movs	r0, #14
 800f922:	e7e6      	b.n	800f8f2 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800f924 <LoRaMacCryptoSetKey>:
{
 800f924:	b510      	push	{r4, lr}
 800f926:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800f928:	f002 fac0 	bl	8011eac <SecureElementSetKey>
 800f92c:	b998      	cbnz	r0, 800f956 <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800f92e:	b104      	cbz	r4, 800f932 <LoRaMacCryptoSetKey+0xe>
}
 800f930:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f932:	4b0c      	ldr	r3, [pc, #48]	; (800f964 <LoRaMacCryptoSetKey+0x40>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	210b      	movs	r1, #11
 800f938:	7898      	ldrb	r0, [r3, #2]
 800f93a:	f7ff ffcb 	bl	800f8d4 <LoRaMacCryptoDeriveLifeTimeKey>
 800f93e:	b960      	cbnz	r0, 800f95a <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f940:	210c      	movs	r1, #12
 800f942:	f7ff ffc7 	bl	800f8d4 <LoRaMacCryptoDeriveLifeTimeKey>
 800f946:	b950      	cbnz	r0, 800f95e <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f948:	210a      	movs	r1, #10
 800f94a:	f7ff ffc3 	bl	800f8d4 <LoRaMacCryptoDeriveLifeTimeKey>
 800f94e:	2800      	cmp	r0, #0
 800f950:	d0ee      	beq.n	800f930 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f952:	200e      	movs	r0, #14
 800f954:	e7ec      	b.n	800f930 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f956:	200e      	movs	r0, #14
 800f958:	e7ea      	b.n	800f930 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f95a:	200e      	movs	r0, #14
 800f95c:	e7e8      	b.n	800f930 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f95e:	200e      	movs	r0, #14
 800f960:	e7e6      	b.n	800f930 <LoRaMacCryptoSetKey+0xc>
 800f962:	bf00      	nop
 800f964:	20001570 	.word	0x20001570

0800f968 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800f968:	2a00      	cmp	r2, #0
 800f96a:	d06c      	beq.n	800fa46 <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800f96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f96e:	b08f      	sub	sp, #60	; 0x3c
 800f970:	4607      	mov	r7, r0
 800f972:	460d      	mov	r5, r1
 800f974:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800f976:	2900      	cmp	r1, #0
 800f978:	d067      	beq.n	800fa4a <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800f97a:	2600      	movs	r6, #0
 800f97c:	9605      	str	r6, [sp, #20]
 800f97e:	221d      	movs	r2, #29
 800f980:	4631      	mov	r1, r6
 800f982:	a806      	add	r0, sp, #24
 800f984:	f006 fe9e 	bl	80166c4 <memset>
    uint8_t versionMinor         = 0;
 800f988:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800f98c:	4b33      	ldr	r3, [pc, #204]	; (800fa5c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800f992:	f10d 0313 	add.w	r3, sp, #19
 800f996:	9302      	str	r3, [sp, #8]
 800f998:	ab05      	add	r3, sp, #20
 800f99a:	9301      	str	r3, [sp, #4]
 800f99c:	7923      	ldrb	r3, [r4, #4]
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	6823      	ldr	r3, [r4, #0]
 800f9a2:	4632      	mov	r2, r6
 800f9a4:	4629      	mov	r1, r5
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	f002 fae2 	bl	8011f70 <SecureElementProcessJoinAccept>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d14e      	bne.n	800fa4e <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800f9b0:	7922      	ldrb	r2, [r4, #4]
 800f9b2:	a905      	add	r1, sp, #20
 800f9b4:	6820      	ldr	r0, [r4, #0]
 800f9b6:	f002 fc62 	bl	801227e <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	f000 f894 	bl	800fae8 <LoRaMacParserJoinAccept>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d147      	bne.n	800fa54 <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800f9c4:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800f9c6:	79e3      	ldrb	r3, [r4, #7]
 800f9c8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800f9cc:	7a23      	ldrb	r3, [r4, #8]
 800f9ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	f7ff fd16 	bl	800f404 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	d03d      	beq.n	800fa58 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800f9dc:	4b1f      	ldr	r3, [pc, #124]	; (800fa5c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800f9e2:	210b      	movs	r1, #11
 800f9e4:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800f9e8:	f7ff ff74 	bl	800f8d4 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f9ec:	bb80      	cbnz	r0, 800fa50 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800f9ee:	210c      	movs	r1, #12
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	f7ff ff6f 	bl	800f8d4 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f9f6:	bb58      	cbnz	r0, 800fa50 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800f9f8:	210a      	movs	r1, #10
 800f9fa:	2000      	movs	r0, #0
 800f9fc:	f7ff ff6a 	bl	800f8d4 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800fa00:	bb30      	cbnz	r0, 800fa50 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800fa02:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800fa04:	7aa2      	ldrb	r2, [r4, #10]
 800fa06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800fa0a:	7ae2      	ldrb	r2, [r4, #11]
 800fa0c:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800fa10:	4633      	mov	r3, r6
 800fa12:	4622      	mov	r2, r4
 800fa14:	4629      	mov	r1, r5
 800fa16:	2009      	movs	r0, #9
 800fa18:	f7ff fd4e 	bl	800f4b8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800fa1c:	b9c0      	cbnz	r0, 800fa50 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800fa1e:	4633      	mov	r3, r6
 800fa20:	4622      	mov	r2, r4
 800fa22:	4629      	mov	r1, r5
 800fa24:	2008      	movs	r0, #8
 800fa26:	f7ff fd47 	bl	800f4b8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800fa2a:	b988      	cbnz	r0, 800fa50 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800fa2c:	4b0b      	ldr	r3, [pc, #44]	; (800fa5c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fa34:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800fa36:	2200      	movs	r2, #0
 800fa38:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fa3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa3e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fa40:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fa42:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800fa44:	e004      	b.n	800fa50 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fa46:	2009      	movs	r0, #9
}
 800fa48:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fa4a:	2009      	movs	r0, #9
 800fa4c:	e000      	b.n	800fa50 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fa4e:	200e      	movs	r0, #14
}
 800fa50:	b00f      	add	sp, #60	; 0x3c
 800fa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800fa54:	200f      	movs	r0, #15
 800fa56:	e7fb      	b.n	800fa50 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800fa58:	2003      	movs	r0, #3
 800fa5a:	e7f9      	b.n	800fa50 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800fa5c:	20001570 	.word	0x20001570

0800fa60 <LoRaMacCryptoDeriveMcSessionKeyPair>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcSessionKeyPair( AddressIdentifier_t addrID, uint32_t mcAddr )
{
    if( mcAddr == 0 )
 800fa60:	2900      	cmp	r1, #0
 800fa62:	d03d      	beq.n	800fae0 <LoRaMacCryptoDeriveMcSessionKeyPair+0x80>
{
 800fa64:	b510      	push	{r4, lr}
 800fa66:	b08a      	sub	sp, #40	; 0x28
 800fa68:	460c      	mov	r4, r1

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;

    // Determine current security context
    KeyAddr_t* curItem;
    retval = GetKeyAddrItem( addrID, &curItem );
 800fa6a:	a909      	add	r1, sp, #36	; 0x24
 800fa6c:	f7ff fc42 	bl	800f2f4 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800fa70:	b108      	cbz	r0, 800fa76 <LoRaMacCryptoDeriveMcSessionKeyPair+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800fa72:	b00a      	add	sp, #40	; 0x28
 800fa74:	bd10      	pop	{r4, pc}
    uint8_t compBaseAppS[16] = { 0 };
 800fa76:	9005      	str	r0, [sp, #20]
 800fa78:	9006      	str	r0, [sp, #24]
 800fa7a:	9007      	str	r0, [sp, #28]
 800fa7c:	9008      	str	r0, [sp, #32]
    uint8_t compBaseNwkS[16] = { 0 };
 800fa7e:	9001      	str	r0, [sp, #4]
 800fa80:	9002      	str	r0, [sp, #8]
 800fa82:	9003      	str	r0, [sp, #12]
 800fa84:	9004      	str	r0, [sp, #16]
    compBaseAppS[0] = 0x01;
 800fa86:	2301      	movs	r3, #1
 800fa88:	f88d 3014 	strb.w	r3, [sp, #20]
    compBaseAppS[1] = mcAddr & 0xFF;
 800fa8c:	b2e1      	uxtb	r1, r4
 800fa8e:	f88d 1015 	strb.w	r1, [sp, #21]
    compBaseAppS[2] = ( mcAddr >> 8 ) & 0xFF;
 800fa92:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800fa96:	f88d 2016 	strb.w	r2, [sp, #22]
    compBaseAppS[3] = ( mcAddr >> 16 ) & 0xFF;
 800fa9a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800fa9e:	f88d 3017 	strb.w	r3, [sp, #23]
    compBaseAppS[4] = ( mcAddr >> 24 ) & 0xFF;
 800faa2:	0e24      	lsrs	r4, r4, #24
 800faa4:	f88d 4018 	strb.w	r4, [sp, #24]
    compBaseNwkS[0] = 0x02;
 800faa8:	2002      	movs	r0, #2
 800faaa:	f88d 0004 	strb.w	r0, [sp, #4]
    compBaseNwkS[1] = mcAddr & 0xFF;
 800faae:	f88d 1005 	strb.w	r1, [sp, #5]
    compBaseNwkS[2] = ( mcAddr >> 8 ) & 0xFF;
 800fab2:	f88d 2006 	strb.w	r2, [sp, #6]
    compBaseNwkS[3] = ( mcAddr >> 16 ) & 0xFF;
 800fab6:	f88d 3007 	strb.w	r3, [sp, #7]
    compBaseNwkS[4] = ( mcAddr >> 24 ) & 0xFF;
 800faba:	f88d 4008 	strb.w	r4, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBaseAppS, curItem->RootKey, curItem->AppSkey ) != SECURE_ELEMENT_SUCCESS )
 800fabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fac0:	785a      	ldrb	r2, [r3, #1]
 800fac2:	78d9      	ldrb	r1, [r3, #3]
 800fac4:	a805      	add	r0, sp, #20
 800fac6:	f002 fa33 	bl	8011f30 <SecureElementDeriveAndStoreKey>
 800faca:	b958      	cbnz	r0, 800fae4 <LoRaMacCryptoDeriveMcSessionKeyPair+0x84>
    if( SecureElementDeriveAndStoreKey( compBaseNwkS, curItem->RootKey, curItem->NwkSkey ) != SECURE_ELEMENT_SUCCESS )
 800facc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800face:	789a      	ldrb	r2, [r3, #2]
 800fad0:	78d9      	ldrb	r1, [r3, #3]
 800fad2:	a801      	add	r0, sp, #4
 800fad4:	f002 fa2c 	bl	8011f30 <SecureElementDeriveAndStoreKey>
 800fad8:	2800      	cmp	r0, #0
 800fada:	d0ca      	beq.n	800fa72 <LoRaMacCryptoDeriveMcSessionKeyPair+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fadc:	200e      	movs	r0, #14
 800fade:	e7c8      	b.n	800fa72 <LoRaMacCryptoDeriveMcSessionKeyPair+0x12>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fae0:	2009      	movs	r0, #9
}
 800fae2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fae4:	200e      	movs	r0, #14
 800fae6:	e7c4      	b.n	800fa72 <LoRaMacCryptoDeriveMcSessionKeyPair+0x12>

0800fae8 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fae8:	2800      	cmp	r0, #0
 800faea:	d049      	beq.n	800fb80 <LoRaMacParserJoinAccept+0x98>
{
 800faec:	b510      	push	{r4, lr}
 800faee:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800faf0:	6801      	ldr	r1, [r0, #0]
 800faf2:	2900      	cmp	r1, #0
 800faf4:	d046      	beq.n	800fb84 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800faf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fafa:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800fafc:	2203      	movs	r2, #3
 800fafe:	3006      	adds	r0, #6
 800fb00:	f002 fbbd 	bl	801227e <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800fb04:	4620      	mov	r0, r4
 800fb06:	f850 1b09 	ldr.w	r1, [r0], #9
 800fb0a:	2203      	movs	r2, #3
 800fb0c:	3104      	adds	r1, #4
 800fb0e:	f002 fbb6 	bl	801227e <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800fb12:	6821      	ldr	r1, [r4, #0]
 800fb14:	79cb      	ldrb	r3, [r1, #7]
 800fb16:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800fb18:	7a0a      	ldrb	r2, [r1, #8]
 800fb1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fb1e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800fb20:	7a4a      	ldrb	r2, [r1, #9]
 800fb22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb26:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800fb28:	7a8a      	ldrb	r2, [r1, #10]
 800fb2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fb2e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800fb30:	7acb      	ldrb	r3, [r1, #11]
 800fb32:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800fb34:	7b0b      	ldrb	r3, [r1, #12]
 800fb36:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800fb38:	7923      	ldrb	r3, [r4, #4]
 800fb3a:	2b21      	cmp	r3, #33	; 0x21
 800fb3c:	d018      	beq.n	800fb70 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800fb3e:	2b11      	cmp	r3, #17
 800fb40:	dc22      	bgt.n	800fb88 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800fb42:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800fb44:	6821      	ldr	r1, [r4, #0]
 800fb46:	f102 0c01 	add.w	ip, r2, #1
 800fb4a:	5c8b      	ldrb	r3, [r1, r2]
 800fb4c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800fb4e:	1c90      	adds	r0, r2, #2
 800fb50:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800fb54:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800fb58:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800fb5a:	3203      	adds	r2, #3
 800fb5c:	5c08      	ldrb	r0, [r1, r0]
 800fb5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fb62:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800fb64:	5c8a      	ldrb	r2, [r1, r2]
 800fb66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fb6a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800fb6c:	2000      	movs	r0, #0
}
 800fb6e:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800fb70:	2210      	movs	r2, #16
 800fb72:	310d      	adds	r1, #13
 800fb74:	f104 0012 	add.w	r0, r4, #18
 800fb78:	f002 fb81 	bl	801227e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800fb7c:	221d      	movs	r2, #29
 800fb7e:	e7e1      	b.n	800fb44 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800fb80:	2002      	movs	r0, #2
}
 800fb82:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800fb84:	2002      	movs	r0, #2
 800fb86:	e7f2      	b.n	800fb6e <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800fb88:	2001      	movs	r0, #1
 800fb8a:	e7f0      	b.n	800fb6e <LoRaMacParserJoinAccept+0x86>

0800fb8c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	d058      	beq.n	800fc42 <LoRaMacParserData+0xb6>
{
 800fb90:	b510      	push	{r4, lr}
 800fb92:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fb94:	6801      	ldr	r1, [r0, #0]
 800fb96:	2900      	cmp	r1, #0
 800fb98:	d055      	beq.n	800fc46 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800fb9a:	780b      	ldrb	r3, [r1, #0]
 800fb9c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800fb9e:	784b      	ldrb	r3, [r1, #1]
 800fba0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800fba2:	788a      	ldrb	r2, [r1, #2]
 800fba4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fba8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800fbaa:	78ca      	ldrb	r2, [r1, #3]
 800fbac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbb0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800fbb2:	790a      	ldrb	r2, [r1, #4]
 800fbb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fbb8:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800fbba:	794b      	ldrb	r3, [r1, #5]
 800fbbc:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800fbbe:	798b      	ldrb	r3, [r1, #6]
 800fbc0:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800fbc2:	79ca      	ldrb	r2, [r1, #7]
 800fbc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fbc8:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800fbca:	7b02      	ldrb	r2, [r0, #12]
 800fbcc:	f002 020f 	and.w	r2, r2, #15
 800fbd0:	3108      	adds	r1, #8
 800fbd2:	3010      	adds	r0, #16
 800fbd4:	f002 fb53 	bl	801227e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800fbd8:	7b23      	ldrb	r3, [r4, #12]
 800fbda:	f003 030f 	and.w	r3, r3, #15
 800fbde:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800fbe8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800fbec:	7922      	ldrb	r2, [r4, #4]
 800fbee:	1a11      	subs	r1, r2, r0
 800fbf0:	2904      	cmp	r1, #4
 800fbf2:	dc16      	bgt.n	800fc22 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800fbf4:	6822      	ldr	r2, [r4, #0]
 800fbf6:	7923      	ldrb	r3, [r4, #4]
 800fbf8:	441a      	add	r2, r3
 800fbfa:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800fbfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800fc00:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fc04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800fc08:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800fc0a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800fc0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800fc12:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800fc14:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800fc18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fc1c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800fc1e:	2000      	movs	r0, #0
}
 800fc20:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800fc22:	6821      	ldr	r1, [r4, #0]
 800fc24:	3309      	adds	r3, #9
 800fc26:	5c08      	ldrb	r0, [r1, r0]
 800fc28:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800fc2c:	1ad2      	subs	r2, r2, r3
 800fc2e:	b2d2      	uxtb	r2, r2
 800fc30:	3a04      	subs	r2, #4
 800fc32:	b2d2      	uxtb	r2, r2
 800fc34:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800fc38:	4419      	add	r1, r3
 800fc3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fc3c:	f002 fb1f 	bl	801227e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800fc40:	e7d8      	b.n	800fbf4 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800fc42:	2002      	movs	r0, #2
}
 800fc44:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800fc46:	2002      	movs	r0, #2
 800fc48:	e7ea      	b.n	800fc20 <LoRaMacParserData+0x94>

0800fc4a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fc4a:	b370      	cbz	r0, 800fcaa <LoRaMacSerializerJoinRequest+0x60>
{
 800fc4c:	b510      	push	{r4, lr}
 800fc4e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fc50:	6803      	ldr	r3, [r0, #0]
 800fc52:	b363      	cbz	r3, 800fcae <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800fc54:	7902      	ldrb	r2, [r0, #4]
 800fc56:	2a16      	cmp	r2, #22
 800fc58:	d92b      	bls.n	800fcb2 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800fc5a:	7942      	ldrb	r2, [r0, #5]
 800fc5c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fc5e:	4601      	mov	r1, r0
 800fc60:	f851 0b06 	ldr.w	r0, [r1], #6
 800fc64:	2208      	movs	r2, #8
 800fc66:	3001      	adds	r0, #1
 800fc68:	f002 fb14 	bl	8012294 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800fc6c:	4621      	mov	r1, r4
 800fc6e:	f851 0b0e 	ldr.w	r0, [r1], #14
 800fc72:	2208      	movs	r2, #8
 800fc74:	3009      	adds	r0, #9
 800fc76:	f002 fb0d 	bl	8012294 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800fc7a:	8ae2      	ldrh	r2, [r4, #22]
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800fc80:	8ae3      	ldrh	r3, [r4, #22]
 800fc82:	6822      	ldr	r2, [r4, #0]
 800fc84:	0a1b      	lsrs	r3, r3, #8
 800fc86:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800fc88:	69a2      	ldr	r2, [r4, #24]
 800fc8a:	6823      	ldr	r3, [r4, #0]
 800fc8c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800fc8e:	69a3      	ldr	r3, [r4, #24]
 800fc90:	0a1b      	lsrs	r3, r3, #8
 800fc92:	6822      	ldr	r2, [r4, #0]
 800fc94:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800fc96:	8b62      	ldrh	r2, [r4, #26]
 800fc98:	6823      	ldr	r3, [r4, #0]
 800fc9a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800fc9c:	7ee2      	ldrb	r2, [r4, #27]
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800fca2:	2317      	movs	r3, #23
 800fca4:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800fca6:	2000      	movs	r0, #0
}
 800fca8:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800fcaa:	2001      	movs	r0, #1
}
 800fcac:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800fcae:	2001      	movs	r0, #1
 800fcb0:	e7fa      	b.n	800fca8 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800fcb2:	2002      	movs	r0, #2
 800fcb4:	e7f8      	b.n	800fca8 <LoRaMacSerializerJoinRequest+0x5e>

0800fcb6 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d066      	beq.n	800fd88 <LoRaMacSerializerData+0xd2>
{
 800fcba:	b538      	push	{r3, r4, r5, lr}
 800fcbc:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fcbe:	6801      	ldr	r1, [r0, #0]
 800fcc0:	2900      	cmp	r1, #0
 800fcc2:	d063      	beq.n	800fd8c <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800fcc4:	7b02      	ldrb	r2, [r0, #12]
 800fcc6:	f002 020f 	and.w	r2, r2, #15
 800fcca:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800fcce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fcd2:	b10b      	cbz	r3, 800fcd8 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800fcd4:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800fcd8:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800fcda:	3304      	adds	r3, #4
 800fcdc:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800fcde:	7922      	ldrb	r2, [r4, #4]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d355      	bcc.n	800fd90 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800fce4:	7963      	ldrb	r3, [r4, #5]
 800fce6:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800fce8:	68a2      	ldr	r2, [r4, #8]
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800fcee:	68a3      	ldr	r3, [r4, #8]
 800fcf0:	0a1b      	lsrs	r3, r3, #8
 800fcf2:	6822      	ldr	r2, [r4, #0]
 800fcf4:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800fcf6:	8962      	ldrh	r2, [r4, #10]
 800fcf8:	6823      	ldr	r3, [r4, #0]
 800fcfa:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800fcfc:	7ae2      	ldrb	r2, [r4, #11]
 800fcfe:	6823      	ldr	r3, [r4, #0]
 800fd00:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	7b22      	ldrb	r2, [r4, #12]
 800fd06:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800fd08:	89e2      	ldrh	r2, [r4, #14]
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800fd0e:	89e3      	ldrh	r3, [r4, #14]
 800fd10:	6822      	ldr	r2, [r4, #0]
 800fd12:	0a1b      	lsrs	r3, r3, #8
 800fd14:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800fd16:	4621      	mov	r1, r4
 800fd18:	f851 0b10 	ldr.w	r0, [r1], #16
 800fd1c:	7b22      	ldrb	r2, [r4, #12]
 800fd1e:	f002 020f 	and.w	r2, r2, #15
 800fd22:	3008      	adds	r0, #8
 800fd24:	f002 faab 	bl	801227e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800fd28:	7b23      	ldrb	r3, [r4, #12]
 800fd2a:	f003 030f 	and.w	r3, r3, #15
 800fd2e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800fd32:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800fd36:	b12a      	cbz	r2, 800fd44 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800fd38:	6822      	ldr	r2, [r4, #0]
 800fd3a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800fd3e:	5551      	strb	r1, [r2, r5]
 800fd40:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800fd44:	6820      	ldr	r0, [r4, #0]
 800fd46:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800fd4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fd4c:	4428      	add	r0, r5
 800fd4e:	f002 fa96 	bl	801227e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800fd52:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fd56:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800fd58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fd5a:	6821      	ldr	r1, [r4, #0]
 800fd5c:	1c5a      	adds	r2, r3, #1
 800fd5e:	b292      	uxth	r2, r2
 800fd60:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800fd62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fd64:	0a08      	lsrs	r0, r1, #8
 800fd66:	6825      	ldr	r5, [r4, #0]
 800fd68:	1c99      	adds	r1, r3, #2
 800fd6a:	b289      	uxth	r1, r1
 800fd6c:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800fd6e:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800fd70:	6820      	ldr	r0, [r4, #0]
 800fd72:	1cda      	adds	r2, r3, #3
 800fd74:	b292      	uxth	r2, r2
 800fd76:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800fd78:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800fd7c:	6821      	ldr	r1, [r4, #0]
 800fd7e:	3304      	adds	r3, #4
 800fd80:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800fd82:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800fd84:	2000      	movs	r0, #0
}
 800fd86:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800fd88:	2001      	movs	r0, #1
}
 800fd8a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	e7fa      	b.n	800fd86 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800fd90:	2002      	movs	r0, #2
 800fd92:	e7f8      	b.n	800fd86 <LoRaMacSerializerData+0xd0>

0800fd94 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800fd94:	4b02      	ldr	r3, [pc, #8]	; (800fda0 <NvmDataMgmtEvent+0xc>)
 800fd96:	881a      	ldrh	r2, [r3, #0]
 800fd98:	4310      	orrs	r0, r2
 800fd9a:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	20001574 	.word	0x20001574

0800fda4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800fda4:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800fda6:	4b06      	ldr	r3, [pc, #24]	; (800fdc0 <NvmDataMgmtStoreBegin+0x1c>)
 800fda8:	881b      	ldrh	r3, [r3, #0]
 800fdaa:	b11b      	cbz	r3, 800fdb4 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800fdac:	f7fd feac 	bl	800db08 <LoRaMacStop>
 800fdb0:	b918      	cbnz	r0, 800fdba <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fdb2:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800fdb4:	f06f 0001 	mvn.w	r0, #1
 800fdb8:	e7fb      	b.n	800fdb2 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800fdba:	f06f 0002 	mvn.w	r0, #2
 800fdbe:	e7f8      	b.n	800fdb2 <NvmDataMgmtStoreBegin+0xe>
 800fdc0:	20001574 	.word	0x20001574

0800fdc4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800fdc4:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800fdc6:	2400      	movs	r4, #0
 800fdc8:	4b02      	ldr	r3, [pc, #8]	; (800fdd4 <NvmDataMgmtStoreEnd+0x10>)
 800fdca:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800fdcc:	f7fd fe90 	bl	800daf0 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	bd10      	pop	{r4, pc}
 800fdd4:	20001574 	.word	0x20001574

0800fdd8 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800fdd8:	2808      	cmp	r0, #8
 800fdda:	d001      	beq.n	800fde0 <RegionIsActive+0x8>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800fddc:	2000      	movs	r0, #0
        }
    }
}
 800fdde:	4770      	bx	lr
        US915_IS_ACTIVE( );
 800fde0:	2001      	movs	r0, #1
 800fde2:	4770      	bx	lr

0800fde4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800fde4:	b500      	push	{lr}
 800fde6:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800fde8:	2300      	movs	r3, #0
 800fdea:	9300      	str	r3, [sp, #0]
    switch( region )
 800fdec:	2808      	cmp	r0, #8
 800fdee:	d005      	beq.n	800fdfc <RegionGetPhyParam+0x18>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800fdf0:	9b00      	ldr	r3, [sp, #0]
 800fdf2:	9301      	str	r3, [sp, #4]
        }
    }
}
 800fdf4:	9801      	ldr	r0, [sp, #4]
 800fdf6:	b003      	add	sp, #12
 800fdf8:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800fdfc:	4608      	mov	r0, r1
 800fdfe:	f000 fd5d 	bl	80108bc <RegionUS915GetPhyParam>
 800fe02:	9001      	str	r0, [sp, #4]
 800fe04:	e7f6      	b.n	800fdf4 <RegionGetPhyParam+0x10>

0800fe06 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800fe06:	2808      	cmp	r0, #8
 800fe08:	d000      	beq.n	800fe0c <RegionSetBandTxDone+0x6>
 800fe0a:	4770      	bx	lr
{
 800fe0c:	b508      	push	{r3, lr}
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 800fe0e:	4608      	mov	r0, r1
 800fe10:	f000 fe2a 	bl	8010a68 <RegionUS915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800fe14:	bd08      	pop	{r3, pc}

0800fe16 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800fe16:	2808      	cmp	r0, #8
 800fe18:	d000      	beq.n	800fe1c <RegionInitDefaults+0x6>
 800fe1a:	4770      	bx	lr
{
 800fe1c:	b508      	push	{r3, lr}
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 800fe1e:	4608      	mov	r0, r1
 800fe20:	f000 fe40 	bl	8010aa4 <RegionUS915InitDefaults>
        default:
        {
            break;
        }
    }
}
 800fe24:	bd08      	pop	{r3, pc}

0800fe26 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800fe26:	2808      	cmp	r0, #8
 800fe28:	d001      	beq.n	800fe2e <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800fe2a:	2000      	movs	r0, #0
        }
    }
}
 800fe2c:	4770      	bx	lr
{
 800fe2e:	b508      	push	{r3, lr}
 800fe30:	460b      	mov	r3, r1
        US915_VERIFY( );
 800fe32:	4611      	mov	r1, r2
 800fe34:	4618      	mov	r0, r3
 800fe36:	f000 fed9 	bl	8010bec <RegionUS915Verify>
}
 800fe3a:	bd08      	pop	{r3, pc}

0800fe3c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800fe3c:	2808      	cmp	r0, #8
 800fe3e:	d000      	beq.n	800fe42 <RegionApplyCFList+0x6>
 800fe40:	4770      	bx	lr
{
 800fe42:	b508      	push	{r3, lr}
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 800fe44:	4608      	mov	r0, r1
 800fe46:	f000 ff0b 	bl	8010c60 <RegionUS915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800fe4a:	bd08      	pop	{r3, pc}

0800fe4c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800fe4c:	2808      	cmp	r0, #8
 800fe4e:	d001      	beq.n	800fe54 <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800fe50:	2000      	movs	r0, #0
        }
    }
}
 800fe52:	4770      	bx	lr
{
 800fe54:	b508      	push	{r3, lr}
        US915_CHAN_MASK_SET( );
 800fe56:	4608      	mov	r0, r1
 800fe58:	f000 ff40 	bl	8010cdc <RegionUS915ChanMaskSet>
}
 800fe5c:	bd08      	pop	{r3, pc}

0800fe5e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800fe5e:	2808      	cmp	r0, #8
 800fe60:	d000      	beq.n	800fe64 <RegionComputeRxWindowParameters+0x6>
 800fe62:	4770      	bx	lr
{
 800fe64:	b508      	push	{r3, lr}
 800fe66:	468c      	mov	ip, r1
 800fe68:	4611      	mov	r1, r2
 800fe6a:	461a      	mov	r2, r3
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800fe6c:	9b02      	ldr	r3, [sp, #8]
 800fe6e:	4660      	mov	r0, ip
 800fe70:	f000 ff76 	bl	8010d60 <RegionUS915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800fe74:	bd08      	pop	{r3, pc}

0800fe76 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800fe76:	2808      	cmp	r0, #8
 800fe78:	d001      	beq.n	800fe7e <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800fe7a:	2000      	movs	r0, #0
        }
    }
}
 800fe7c:	4770      	bx	lr
{
 800fe7e:	b508      	push	{r3, lr}
 800fe80:	460b      	mov	r3, r1
        US915_RX_CONFIG( );
 800fe82:	4611      	mov	r1, r2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f000 ff99 	bl	8010dbc <RegionUS915RxConfig>
}
 800fe8a:	bd08      	pop	{r3, pc}

0800fe8c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800fe8c:	2808      	cmp	r0, #8
 800fe8e:	d001      	beq.n	800fe94 <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800fe90:	2000      	movs	r0, #0
        }
    }
}
 800fe92:	4770      	bx	lr
{
 800fe94:	b508      	push	{r3, lr}
 800fe96:	468c      	mov	ip, r1
 800fe98:	4611      	mov	r1, r2
        US915_TX_CONFIG( );
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	4660      	mov	r0, ip
 800fe9e:	f000 ffe7 	bl	8010e70 <RegionUS915TxConfig>
}
 800fea2:	bd08      	pop	{r3, pc}

0800fea4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800fea4:	2808      	cmp	r0, #8
 800fea6:	d001      	beq.n	800feac <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800fea8:	2000      	movs	r0, #0
        }
    }
}
 800feaa:	4770      	bx	lr
{
 800feac:	b500      	push	{lr}
 800feae:	b083      	sub	sp, #12
 800feb0:	468c      	mov	ip, r1
 800feb2:	4611      	mov	r1, r2
 800feb4:	461a      	mov	r2, r3
        US915_LINK_ADR_REQ( );
 800feb6:	9b05      	ldr	r3, [sp, #20]
 800feb8:	9300      	str	r3, [sp, #0]
 800feba:	9b04      	ldr	r3, [sp, #16]
 800febc:	4660      	mov	r0, ip
 800febe:	f001 f851 	bl	8010f64 <RegionUS915LinkAdrReq>
}
 800fec2:	b003      	add	sp, #12
 800fec4:	f85d fb04 	ldr.w	pc, [sp], #4

0800fec8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800fec8:	2808      	cmp	r0, #8
 800feca:	d001      	beq.n	800fed0 <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800fecc:	2000      	movs	r0, #0
        }
    }
}
 800fece:	4770      	bx	lr
{
 800fed0:	b508      	push	{r3, lr}
        US915_RX_PARAM_SETUP_REQ( );
 800fed2:	4608      	mov	r0, r1
 800fed4:	f001 f992 	bl	80111fc <RegionUS915RxParamSetupReq>
}
 800fed8:	bd08      	pop	{r3, pc}

0800feda <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800feda:	2808      	cmp	r0, #8
 800fedc:	d001      	beq.n	800fee2 <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800fede:	2000      	movs	r0, #0
        }
    }
}
 800fee0:	4770      	bx	lr
{
 800fee2:	b508      	push	{r3, lr}
        US915_NEW_CHANNEL_REQ( );
 800fee4:	4608      	mov	r0, r1
 800fee6:	f001 f9b4 	bl	8011252 <RegionUS915NewChannelReq>
}
 800feea:	bd08      	pop	{r3, pc}

0800feec <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800feec:	2808      	cmp	r0, #8
 800feee:	d001      	beq.n	800fef4 <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800fef0:	2000      	movs	r0, #0
        }
    }
}
 800fef2:	4770      	bx	lr
{
 800fef4:	b508      	push	{r3, lr}
        US915_TX_PARAM_SETUP_REQ( );
 800fef6:	4608      	mov	r0, r1
 800fef8:	f001 f9ae 	bl	8011258 <RegionUS915TxParamSetupReq>
}
 800fefc:	bd08      	pop	{r3, pc}

0800fefe <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800fefe:	2808      	cmp	r0, #8
 800ff00:	d001      	beq.n	800ff06 <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800ff02:	2000      	movs	r0, #0
        }
    }
}
 800ff04:	4770      	bx	lr
{
 800ff06:	b508      	push	{r3, lr}
        US915_DL_CHANNEL_REQ( );
 800ff08:	4608      	mov	r0, r1
 800ff0a:	f001 f9a8 	bl	801125e <RegionUS915DlChannelReq>
}
 800ff0e:	bd08      	pop	{r3, pc}

0800ff10 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800ff10:	2808      	cmp	r0, #8
 800ff12:	d001      	beq.n	800ff18 <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800ff14:	2000      	movs	r0, #0
        }
    }
}
 800ff16:	4770      	bx	lr
{
 800ff18:	b508      	push	{r3, lr}
 800ff1a:	460b      	mov	r3, r1
        US915_ALTERNATE_DR( );
 800ff1c:	4611      	mov	r1, r2
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f001 f9a0 	bl	8011264 <RegionUS915AlternateDr>
}
 800ff24:	bd08      	pop	{r3, pc}

0800ff26 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800ff26:	2808      	cmp	r0, #8
 800ff28:	d001      	beq.n	800ff2e <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ff2a:	2009      	movs	r0, #9
        }
    }
}
 800ff2c:	4770      	bx	lr
{
 800ff2e:	b508      	push	{r3, lr}
 800ff30:	468c      	mov	ip, r1
 800ff32:	4611      	mov	r1, r2
 800ff34:	461a      	mov	r2, r3
        US915_NEXT_CHANNEL( );
 800ff36:	9b02      	ldr	r3, [sp, #8]
 800ff38:	4660      	mov	r0, ip
 800ff3a:	f001 f9b5 	bl	80112a8 <RegionUS915NextChannel>
}
 800ff3e:	bd08      	pop	{r3, pc}

0800ff40 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800ff40:	468c      	mov	ip, r1
 800ff42:	4611      	mov	r1, r2
    switch( region )
 800ff44:	2808      	cmp	r0, #8
 800ff46:	d001      	beq.n	800ff4c <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800ff48:	b2d0      	uxtb	r0, r2
        }
    }
}
 800ff4a:	4770      	bx	lr
{
 800ff4c:	b508      	push	{r3, lr}
        US915_APPLY_DR_OFFSET( );
 800ff4e:	461a      	mov	r2, r3
 800ff50:	4660      	mov	r0, ip
 800ff52:	f001 fa57 	bl	8011404 <RegionUS915ApplyDrOffset>
}
 800ff56:	bd08      	pop	{r3, pc}

0800ff58 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800ff58:	4800      	ldr	r0, [pc, #0]	; (800ff5c <RegionGetVersion+0x4>)
 800ff5a:	4770      	bx	lr
 800ff5c:	02010001 	.word	0x02010001

0800ff60 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800ff60:	468c      	mov	ip, r1
 800ff62:	b1a9      	cbz	r1, 800ff90 <FindAvailable125kHzChannels+0x30>
 800ff64:	b1b2      	cbz	r2, 800ff94 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800ff66:	2300      	movs	r3, #0
 800ff68:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800ff6a:	e001      	b.n	800ff70 <FindAvailable125kHzChannels+0x10>
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b07      	cmp	r3, #7
 800ff72:	d80b      	bhi.n	800ff8c <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800ff74:	fa40 f103 	asr.w	r1, r0, r3
 800ff78:	f011 0f01 	tst.w	r1, #1
 800ff7c:	d0f6      	beq.n	800ff6c <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800ff7e:	7811      	ldrb	r1, [r2, #0]
 800ff80:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800ff84:	7811      	ldrb	r1, [r2, #0]
 800ff86:	3101      	adds	r1, #1
 800ff88:	7011      	strb	r1, [r2, #0]
 800ff8a:	e7ef      	b.n	800ff6c <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff90:	2003      	movs	r0, #3
 800ff92:	4770      	bx	lr
 800ff94:	2003      	movs	r0, #3
}
 800ff96:	4770      	bx	lr

0800ff98 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800ff98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff9a:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	9302      	str	r3, [sp, #8]
 800ffa0:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800ffa2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d03e      	beq.n	8010028 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800ffaa:	460d      	mov	r5, r1
 800ffac:	4617      	mov	r7, r2
 800ffae:	4606      	mov	r6, r0
 800ffb0:	2900      	cmp	r1, #0
 800ffb2:	d03b      	beq.n	801002c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800ffb4:	2a00      	cmp	r2, #0
 800ffb6:	d03b      	beq.n	8010030 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800ffb8:	780c      	ldrb	r4, [r1, #0]
 800ffba:	e017      	b.n	800ffec <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800ffbc:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800ffc0:	0a00      	lsrs	r0, r0, #8
 800ffc2:	e019      	b.n	800fff8 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800ffc4:	3901      	subs	r1, #1
 800ffc6:	2000      	movs	r0, #0
 800ffc8:	f002 f94c 	bl	8012264 <randr>
 800ffcc:	f100 0310 	add.w	r3, r0, #16
 800ffd0:	eb0d 0003 	add.w	r0, sp, r3
 800ffd4:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800ffd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ffdc:	703b      	strb	r3, [r7, #0]
 800ffde:	e016      	b.n	801000e <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800ffe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ffe4:	b9cb      	cbnz	r3, 801001a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800ffe6:	782a      	ldrb	r2, [r5, #0]
 800ffe8:	42a2      	cmp	r2, r4
 800ffea:	d016      	beq.n	801001a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800ffec:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800ffee:	f014 0f01 	tst.w	r4, #1
 800fff2:	d1e3      	bne.n	800ffbc <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800fff4:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800fff8:	f10d 0207 	add.w	r2, sp, #7
 800fffc:	a902      	add	r1, sp, #8
 800fffe:	f7ff ffaf 	bl	800ff60 <FindAvailable125kHzChannels>
 8010002:	2803      	cmp	r0, #3
 8010004:	d00b      	beq.n	801001e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 8010006:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801000a:	2900      	cmp	r1, #0
 801000c:	d1da      	bne.n	800ffc4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 801000e:	3401      	adds	r4, #1
 8010010:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 8010012:	2c07      	cmp	r4, #7
 8010014:	d9e4      	bls.n	800ffe0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 8010016:	2400      	movs	r4, #0
 8010018:	e7e2      	b.n	800ffe0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 801001a:	b913      	cbnz	r3, 8010022 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 801001c:	2003      	movs	r0, #3
}
 801001e:	b005      	add	sp, #20
 8010020:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 8010022:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 8010024:	2000      	movs	r0, #0
 8010026:	e7fa      	b.n	801001e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010028:	2003      	movs	r0, #3
 801002a:	e7f8      	b.n	801001e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 801002c:	2003      	movs	r0, #3
 801002e:	e7f6      	b.n	801001e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 8010030:	2003      	movs	r0, #3
 8010032:	e7f4      	b.n	801001e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

08010034 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 8010034:	fb02 1000 	mla	r0, r2, r0, r1
 8010038:	4770      	bx	lr

0801003a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801003a:	b082      	sub	sp, #8
 801003c:	f10d 0c08 	add.w	ip, sp, #8
 8010040:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 8010044:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 8010046:	b971      	cbnz	r1, 8010066 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8010048:	4613      	mov	r3, r2
 801004a:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 801004e:	d306      	bcc.n	801005e <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8010050:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8010054:	4293      	cmp	r3, r2
 8010056:	d80a      	bhi.n	801006e <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8010058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801005c:	e000      	b.n	8010060 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801005e:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8010060:	4298      	cmp	r0, r3
 8010062:	bf38      	it	cc
 8010064:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8010066:	b900      	cbnz	r0, 801006a <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 8010068:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 801006a:	b002      	add	sp, #8
 801006c:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801006e:	f242 7310 	movw	r3, #10000	; 0x2710
 8010072:	e7f5      	b.n	8010060 <GetDutyCycle+0x26>

08010074 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8010074:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 8010076:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 8010078:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 801007a:	e001      	b.n	8010080 <CountChannels+0xc>
 801007c:	3301      	adds	r3, #1
 801007e:	b2db      	uxtb	r3, r3
 8010080:	428b      	cmp	r3, r1
 8010082:	d207      	bcs.n	8010094 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8010084:	2201      	movs	r2, #1
 8010086:	409a      	lsls	r2, r3
 8010088:	ea32 020c 	bics.w	r2, r2, ip
 801008c:	d1f6      	bne.n	801007c <CountChannels+0x8>
        {
            nbActiveBits++;
 801008e:	3001      	adds	r0, #1
 8010090:	b2c0      	uxtb	r0, r0
 8010092:	e7f3      	b.n	801007c <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 8010094:	4770      	bx	lr
	...

08010098 <SetMaxTimeCredits>:
{
 8010098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801009c:	b089      	sub	sp, #36	; 0x24
 801009e:	4604      	mov	r4, r0
 80100a0:	460e      	mov	r6, r1
 80100a2:	ad02      	add	r5, sp, #8
 80100a4:	e885 000c 	stmia.w	r5, {r2, r3}
 80100a8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 80100ac:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80100b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80100b4:	f004 f9a0 	bl	80143f8 <SysTimeToMs>
 80100b8:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 80100ba:	2300      	movs	r3, #0
 80100bc:	9304      	str	r3, [sp, #16]
 80100be:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80100c0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80100c4:	4631      	mov	r1, r6
 80100c6:	4620      	mov	r0, r4
 80100c8:	f7ff ffb7 	bl	801003a <GetDutyCycle>
 80100cc:	4605      	mov	r5, r0
    if( joined == false )
 80100ce:	2e00      	cmp	r6, #0
 80100d0:	d14c      	bne.n	801016c <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80100d2:	2864      	cmp	r0, #100	; 0x64
 80100d4:	d025      	beq.n	8010122 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80100d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80100da:	d025      	beq.n	8010128 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80100dc:	4e27      	ldr	r6, [pc, #156]	; (801017c <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80100de:	68a1      	ldr	r1, [r4, #8]
 80100e0:	a806      	add	r0, sp, #24
 80100e2:	f004 f9a9 	bl	8014438 <SysTimeFromMs>
 80100e6:	9b07      	ldr	r3, [sp, #28]
 80100e8:	9300      	str	r3, [sp, #0]
 80100ea:	9b06      	ldr	r3, [sp, #24]
 80100ec:	aa02      	add	r2, sp, #8
 80100ee:	ca06      	ldmia	r2, {r1, r2}
 80100f0:	a804      	add	r0, sp, #16
 80100f2:	f004 f908 	bl	8014306 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80100f6:	f1b8 0f00 	cmp.w	r8, #0
 80100fa:	d102      	bne.n	8010102 <SetMaxTimeCredits+0x6a>
 80100fc:	f1b9 0f00 	cmp.w	r9, #0
 8010100:	d002      	beq.n	8010108 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 8010102:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8010104:	42b3      	cmp	r3, r6
 8010106:	d012      	beq.n	801012e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 8010108:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801010a:	9b02      	ldr	r3, [sp, #8]
 801010c:	4a1c      	ldr	r2, [pc, #112]	; (8010180 <SetMaxTimeCredits+0xe8>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d812      	bhi.n	8010138 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 8010112:	6863      	ldr	r3, [r4, #4]
 8010114:	b903      	cbnz	r3, 8010118 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 8010116:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 8010118:	6126      	str	r6, [r4, #16]
}
 801011a:	4628      	mov	r0, r5
 801011c:	b009      	add	sp, #36	; 0x24
 801011e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 8010122:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8010124:	4e17      	ldr	r6, [pc, #92]	; (8010184 <SetMaxTimeCredits+0xec>)
 8010126:	e7da      	b.n	80100de <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 8010128:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801012a:	4e17      	ldr	r6, [pc, #92]	; (8010188 <SetMaxTimeCredits+0xf0>)
 801012c:	e7d7      	b.n	80100de <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 801012e:	9a04      	ldr	r2, [sp, #16]
 8010130:	4b16      	ldr	r3, [pc, #88]	; (801018c <SetMaxTimeCredits+0xf4>)
 8010132:	429a      	cmp	r2, r3
 8010134:	d9ed      	bls.n	8010112 <SetMaxTimeCredits+0x7a>
 8010136:	e7e7      	b.n	8010108 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8010138:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801013c:	3b30      	subs	r3, #48	; 0x30
 801013e:	4a14      	ldr	r2, [pc, #80]	; (8010190 <SetMaxTimeCredits+0xf8>)
 8010140:	fba2 2303 	umull	r2, r3, r2, r3
 8010144:	0c1b      	lsrs	r3, r3, #16
 8010146:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8010148:	4a12      	ldr	r2, [pc, #72]	; (8010194 <SetMaxTimeCredits+0xfc>)
 801014a:	fb02 f303 	mul.w	r3, r2, r3
 801014e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8010150:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8010154:	3330      	adds	r3, #48	; 0x30
 8010156:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 8010158:	2300      	movs	r3, #0
 801015a:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801015e:	ab04      	add	r3, sp, #16
 8010160:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010164:	f004 f948 	bl	80143f8 <SysTimeToMs>
 8010168:	60a0      	str	r0, [r4, #8]
 801016a:	e7d2      	b.n	8010112 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 801016c:	f1b8 0f00 	cmp.w	r8, #0
 8010170:	d102      	bne.n	8010178 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 8010172:	4e04      	ldr	r6, [pc, #16]	; (8010184 <SetMaxTimeCredits+0xec>)
 8010174:	60e6      	str	r6, [r4, #12]
 8010176:	e7cc      	b.n	8010112 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8010178:	4e02      	ldr	r6, [pc, #8]	; (8010184 <SetMaxTimeCredits+0xec>)
 801017a:	e7ca      	b.n	8010112 <SetMaxTimeCredits+0x7a>
 801017c:	02932e00 	.word	0x02932e00
 8010180:	0001ec2f 	.word	0x0001ec2f
 8010184:	001b7740 	.word	0x001b7740
 8010188:	0112a880 	.word	0x0112a880
 801018c:	0001517f 	.word	0x0001517f
 8010190:	c22e4507 	.word	0xc22e4507
 8010194:	00015180 	.word	0x00015180

08010198 <UpdateTimeCredits>:
{
 8010198:	b570      	push	{r4, r5, r6, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	4604      	mov	r4, r0
 801019e:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80101a0:	9301      	str	r3, [sp, #4]
 80101a2:	9200      	str	r2, [sp, #0]
 80101a4:	ab06      	add	r3, sp, #24
 80101a6:	cb0c      	ldmia	r3, {r2, r3}
 80101a8:	f7ff ff76 	bl	8010098 <SetMaxTimeCredits>
 80101ac:	4605      	mov	r5, r0
    if( joined == true )
 80101ae:	b94e      	cbnz	r6, 80101c4 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 80101b0:	68e2      	ldr	r2, [r4, #12]
 80101b2:	6923      	ldr	r3, [r4, #16]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d900      	bls.n	80101ba <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 80101b8:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 80101ba:	9b08      	ldr	r3, [sp, #32]
 80101bc:	6063      	str	r3, [r4, #4]
}
 80101be:	4628      	mov	r0, r5
 80101c0:	b002      	add	sp, #8
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80101c4:	6860      	ldr	r0, [r4, #4]
 80101c6:	f004 f997 	bl	80144f8 <UTIL_TIMER_GetElapsedTime>
 80101ca:	68e3      	ldr	r3, [r4, #12]
 80101cc:	4403      	add	r3, r0
 80101ce:	60e3      	str	r3, [r4, #12]
 80101d0:	e7ee      	b.n	80101b0 <UpdateTimeCredits+0x18>

080101d2 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 80101d2:	4288      	cmp	r0, r1
 80101d4:	db03      	blt.n	80101de <RegionCommonValueInRange+0xc>
 80101d6:	4290      	cmp	r0, r2
 80101d8:	dd03      	ble.n	80101e2 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 80101da:	2000      	movs	r0, #0
 80101dc:	4770      	bx	lr
 80101de:	2000      	movs	r0, #0
 80101e0:	4770      	bx	lr
        return 1;
 80101e2:	2001      	movs	r0, #1
}
 80101e4:	4770      	bx	lr

080101e6 <RegionCommonChanVerifyDr>:
{
 80101e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101ea:	4682      	mov	sl, r0
 80101ec:	460e      	mov	r6, r1
 80101ee:	4690      	mov	r8, r2
 80101f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80101f4:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 80101f8:	4619      	mov	r1, r3
 80101fa:	4640      	mov	r0, r8
 80101fc:	f7ff ffe9 	bl	80101d2 <RegionCommonValueInRange>
 8010200:	b338      	cbz	r0, 8010252 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8010202:	2500      	movs	r5, #0
 8010204:	462f      	mov	r7, r5
 8010206:	e01e      	b.n	8010246 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 8010208:	3401      	adds	r4, #1
 801020a:	b2e4      	uxtb	r4, r4
 801020c:	2c0f      	cmp	r4, #15
 801020e:	d816      	bhi.n	801023e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8010210:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8010214:	4123      	asrs	r3, r4
 8010216:	f013 0f01 	tst.w	r3, #1
 801021a:	d0f5      	beq.n	8010208 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801021c:	193b      	adds	r3, r7, r4
 801021e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010222:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8010226:	7a19      	ldrb	r1, [r3, #8]
 8010228:	090a      	lsrs	r2, r1, #4
 801022a:	f001 010f 	and.w	r1, r1, #15
 801022e:	4640      	mov	r0, r8
 8010230:	f7ff ffcf 	bl	80101d2 <RegionCommonValueInRange>
 8010234:	2801      	cmp	r0, #1
 8010236:	d1e7      	bne.n	8010208 <RegionCommonChanVerifyDr+0x22>
                    return true;
 8010238:	2001      	movs	r0, #1
}
 801023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801023e:	3710      	adds	r7, #16
 8010240:	b2ff      	uxtb	r7, r7
 8010242:	3501      	adds	r5, #1
 8010244:	b2ed      	uxtb	r5, r5
 8010246:	4557      	cmp	r7, sl
 8010248:	d201      	bcs.n	801024e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 801024a:	2400      	movs	r4, #0
 801024c:	e7de      	b.n	801020c <RegionCommonChanVerifyDr+0x26>
    return false;
 801024e:	2000      	movs	r0, #0
 8010250:	e7f3      	b.n	801023a <RegionCommonChanVerifyDr+0x54>
        return false;
 8010252:	2000      	movs	r0, #0
 8010254:	e7f1      	b.n	801023a <RegionCommonChanVerifyDr+0x54>

08010256 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8010256:	0913      	lsrs	r3, r2, #4
 8010258:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 801025c:	d313      	bcc.n	8010286 <RegionCommonChanDisable+0x30>
{
 801025e:	b500      	push	{lr}
 8010260:	4684      	mov	ip, r0
 8010262:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8010266:	4291      	cmp	r1, r2
 8010268:	d20f      	bcs.n	801028a <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801026a:	f001 030f 	and.w	r3, r1, #15
 801026e:	2001      	movs	r0, #1
 8010270:	fa00 f303 	lsl.w	r3, r0, r3
 8010274:	43db      	mvns	r3, r3
 8010276:	b21b      	sxth	r3, r3
 8010278:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 801027c:	4013      	ands	r3, r2
 801027e:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 8010282:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 8010286:	2000      	movs	r0, #0
}
 8010288:	4770      	bx	lr
        return false;
 801028a:	2000      	movs	r0, #0
 801028c:	e7f9      	b.n	8010282 <RegionCommonChanDisable+0x2c>

0801028e <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801028e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8010290:	b188      	cbz	r0, 80102b6 <RegionCommonCountChannels+0x28>
 8010292:	460c      	mov	r4, r1
 8010294:	4616      	mov	r6, r2
 8010296:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 8010298:	2500      	movs	r5, #0
 801029a:	e008      	b.n	80102ae <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801029c:	2110      	movs	r1, #16
 801029e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 80102a2:	f7ff fee7 	bl	8010074 <CountChannels>
 80102a6:	4405      	add	r5, r0
 80102a8:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80102aa:	3401      	adds	r4, #1
 80102ac:	b2e4      	uxtb	r4, r4
 80102ae:	42b4      	cmp	r4, r6
 80102b0:	d3f4      	bcc.n	801029c <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 80102b2:	4628      	mov	r0, r5
 80102b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 80102b6:	2500      	movs	r5, #0
 80102b8:	e7fb      	b.n	80102b2 <RegionCommonCountChannels+0x24>

080102ba <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80102ba:	4684      	mov	ip, r0
 80102bc:	b158      	cbz	r0, 80102d6 <RegionCommonChanMaskCopy+0x1c>
 80102be:	b109      	cbz	r1, 80102c4 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 80102c0:	2300      	movs	r3, #0
 80102c2:	e006      	b.n	80102d2 <RegionCommonChanMaskCopy+0x18>
 80102c4:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80102c6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80102ca:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 80102ce:	3301      	adds	r3, #1
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d3f7      	bcc.n	80102c6 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 80102d6:	4770      	bx	lr

080102d8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80102d8:	b082      	sub	sp, #8
 80102da:	b538      	push	{r3, r4, r5, lr}
 80102dc:	4604      	mov	r4, r0
 80102de:	460d      	mov	r5, r1
 80102e0:	4611      	mov	r1, r2
 80102e2:	aa04      	add	r2, sp, #16
 80102e4:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80102e8:	ca0c      	ldmia	r2, {r2, r3}
 80102ea:	f7ff fea6 	bl	801003a <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80102ee:	68e3      	ldr	r3, [r4, #12]
 80102f0:	fb05 f100 	mul.w	r1, r5, r0
 80102f4:	428b      	cmp	r3, r1
 80102f6:	d905      	bls.n	8010304 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80102f8:	1a5b      	subs	r3, r3, r1
 80102fa:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80102fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010300:	b002      	add	sp, #8
 8010302:	4770      	bx	lr
        band->TimeCredits = 0;
 8010304:	2300      	movs	r3, #0
 8010306:	60e3      	str	r3, [r4, #12]
}
 8010308:	e7f8      	b.n	80102fc <RegionCommonSetBandTxDone+0x24>
	...

0801030c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010310:	b089      	sub	sp, #36	; 0x24
 8010312:	4607      	mov	r7, r0
 8010314:	468b      	mov	fp, r1
 8010316:	4691      	mov	r9, r2
 8010318:	4698      	mov	r8, r3
 801031a:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801031e:	f004 f8e1 	bl	80144e4 <UTIL_TIMER_GetCurrentTime>
 8010322:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 8010324:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 8010326:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8010328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801032c:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 801032e:	e005      	b.n	801033c <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 8010330:	2301      	movs	r3, #1
 8010332:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8010334:	441e      	add	r6, r3
 8010336:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 8010338:	3401      	adds	r4, #1
 801033a:	b2e4      	uxtb	r4, r4
 801033c:	454c      	cmp	r4, r9
 801033e:	d25d      	bcs.n	80103fc <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8010340:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8010344:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8010348:	9b04      	ldr	r3, [sp, #16]
 801034a:	9302      	str	r3, [sp, #8]
 801034c:	ab13      	add	r3, sp, #76	; 0x4c
 801034e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010352:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010356:	4653      	mov	r3, sl
 8010358:	4642      	mov	r2, r8
 801035a:	4639      	mov	r1, r7
 801035c:	4628      	mov	r0, r5
 801035e:	f7ff ff1b 	bl	8010198 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 8010362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010364:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8010368:	68ea      	ldr	r2, [r5, #12]
 801036a:	429a      	cmp	r2, r3
 801036c:	d2e0      	bcs.n	8010330 <RegionCommonUpdateBandTimeOff+0x24>
 801036e:	f1b8 0f00 	cmp.w	r8, #0
 8010372:	d101      	bne.n	8010378 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8010374:	2f00      	cmp	r7, #0
 8010376:	d1db      	bne.n	8010330 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8010378:	2100      	movs	r1, #0
 801037a:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 801037c:	6929      	ldr	r1, [r5, #16]
 801037e:	4299      	cmp	r1, r3
 8010380:	d307      	bcc.n	8010392 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8010382:	1a9b      	subs	r3, r3, r2
 8010384:	9a05      	ldr	r2, [sp, #20]
 8010386:	429a      	cmp	r2, r3
 8010388:	bf28      	it	cs
 801038a:	461a      	movcs	r2, r3
 801038c:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801038e:	3601      	adds	r6, #1
 8010390:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8010392:	2f00      	cmp	r7, #0
 8010394:	d1d0      	bne.n	8010338 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 8010396:	2300      	movs	r3, #0
 8010398:	9306      	str	r3, [sp, #24]
 801039a:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801039e:	2864      	cmp	r0, #100	; 0x64
 80103a0:	d024      	beq.n	80103ec <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80103a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80103a6:	d025      	beq.n	80103f4 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80103a8:	4b19      	ldr	r3, [pc, #100]	; (8010410 <RegionCommonUpdateBandTimeOff+0x104>)
 80103aa:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80103ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80103ae:	4a18      	ldr	r2, [pc, #96]	; (8010410 <RegionCommonUpdateBandTimeOff+0x104>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d90c      	bls.n	80103ce <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80103b4:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80103b8:	3b30      	subs	r3, #48	; 0x30
 80103ba:	4a16      	ldr	r2, [pc, #88]	; (8010414 <RegionCommonUpdateBandTimeOff+0x108>)
 80103bc:	fba2 2303 	umull	r2, r3, r2, r3
 80103c0:	0c1b      	lsrs	r3, r3, #16
 80103c2:	4a15      	ldr	r2, [pc, #84]	; (8010418 <RegionCommonUpdateBandTimeOff+0x10c>)
 80103c4:	fb03 2202 	mla	r2, r3, r2, r2
 80103c8:	9b06      	ldr	r3, [sp, #24]
 80103ca:	4413      	add	r3, r2
 80103cc:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80103ce:	ad06      	add	r5, sp, #24
 80103d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103d2:	9300      	str	r3, [sp, #0]
 80103d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80103d6:	e895 0006 	ldmia.w	r5, {r1, r2}
 80103da:	4628      	mov	r0, r5
 80103dc:	f003 ff93 	bl	8014306 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80103e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80103e4:	f004 f808 	bl	80143f8 <SysTimeToMs>
 80103e8:	9005      	str	r0, [sp, #20]
 80103ea:	e7a5      	b.n	8010338 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80103ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80103f0:	9306      	str	r3, [sp, #24]
 80103f2:	e7db      	b.n	80103ac <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80103f4:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80103f8:	9306      	str	r3, [sp, #24]
 80103fa:	e7d7      	b.n	80103ac <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 80103fc:	b11e      	cbz	r6, 8010406 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 80103fe:	9805      	ldr	r0, [sp, #20]
 8010400:	b009      	add	sp, #36	; 0x24
 8010402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 8010406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801040a:	9305      	str	r3, [sp, #20]
 801040c:	e7f7      	b.n	80103fe <RegionCommonUpdateBandTimeOff+0xf2>
 801040e:	bf00      	nop
 8010410:	0001ec30 	.word	0x0001ec30
 8010414:	c22e4507 	.word	0xc22e4507
 8010418:	00015180 	.word	0x00015180

0801041c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801041c:	7803      	ldrb	r3, [r0, #0]
 801041e:	2b03      	cmp	r3, #3
 8010420:	d001      	beq.n	8010426 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 8010422:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8010424:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 8010426:	7842      	ldrb	r2, [r0, #1]
 8010428:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801042c:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801042e:	f003 030f 	and.w	r3, r3, #15
 8010432:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8010434:	0913      	lsrs	r3, r2, #4
 8010436:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8010438:	7883      	ldrb	r3, [r0, #2]
 801043a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801043c:	78c2      	ldrb	r2, [r0, #3]
 801043e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010442:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8010444:	7903      	ldrb	r3, [r0, #4]
 8010446:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8010448:	f3c3 1202 	ubfx	r2, r3, #4, #3
 801044c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 801044e:	f003 030f 	and.w	r3, r3, #15
 8010452:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8010454:	2005      	movs	r0, #5
 8010456:	4770      	bx	lr

08010458 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8010458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801045c:	b085      	sub	sp, #20
 801045e:	4604      	mov	r4, r0
 8010460:	4688      	mov	r8, r1
 8010462:	4617      	mov	r7, r2
 8010464:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 8010466:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8010468:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 801046c:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8010470:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8010474:	7943      	ldrb	r3, [r0, #5]
 8010476:	b92b      	cbnz	r3, 8010484 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8010478:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 801047c:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8010480:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 8010484:	b355      	cbz	r5, 80104dc <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8010486:	f1ba 0f0f 	cmp.w	sl, #15
 801048a:	d114      	bne.n	80104b6 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801048c:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8010490:	f1b9 0f0f 	cmp.w	r9, #15
 8010494:	d020      	beq.n	80104d8 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8010496:	f994 301d 	ldrsb.w	r3, [r4, #29]
 801049a:	9303      	str	r3, [sp, #12]
 801049c:	f994 201c 	ldrsb.w	r2, [r4, #28]
 80104a0:	461c      	mov	r4, r3
 80104a2:	4619      	mov	r1, r3
 80104a4:	4648      	mov	r0, r9
 80104a6:	f7ff fe94 	bl	80101d2 <RegionCommonValueInRange>
 80104aa:	b9b8      	cbnz	r0, 80104dc <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80104ac:	454c      	cmp	r4, r9
 80104ae:	dc21      	bgt.n	80104f4 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80104b0:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 80104b4:	e012      	b.n	80104dc <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80104b6:	69a3      	ldr	r3, [r4, #24]
 80104b8:	9301      	str	r3, [sp, #4]
 80104ba:	f994 3015 	ldrsb.w	r3, [r4, #21]
 80104be:	9300      	str	r3, [sp, #0]
 80104c0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80104c4:	4652      	mov	r2, sl
 80104c6:	6921      	ldr	r1, [r4, #16]
 80104c8:	7b20      	ldrb	r0, [r4, #12]
 80104ca:	f7ff fe8c 	bl	80101e6 <RegionCommonChanVerifyDr>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d1de      	bne.n	8010490 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 80104d2:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 80104d6:	e7db      	b.n	8010490 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 80104d8:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80104dc:	2d07      	cmp	r5, #7
 80104de:	d00c      	beq.n	80104fa <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 80104e0:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 80104e4:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 80104e8:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 80104ec:	4628      	mov	r0, r5
 80104ee:	b005      	add	sp, #20
 80104f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 80104f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80104f8:	e7f0      	b.n	80104dc <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 80104fa:	f1bb 0f00 	cmp.w	fp, #0
 80104fe:	d1ef      	bne.n	80104e0 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 8010500:	f04f 0b01 	mov.w	fp, #1
 8010504:	e7ec      	b.n	80104e0 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

08010508 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8010508:	4b02      	ldr	r3, [pc, #8]	; (8010514 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 801050a:	fa03 f000 	lsl.w	r0, r3, r0
}
 801050e:	fbb0 f0f1 	udiv	r0, r0, r1
 8010512:	4770      	bx	lr
 8010514:	000f4240 	.word	0x000f4240

08010518 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8010518:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801051a:	f1a1 0c04 	sub.w	ip, r1, #4
 801051e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8010522:	fb0e f202 	mul.w	r2, lr, r2
 8010526:	fb00 220c 	mla	r2, r0, ip, r2
 801052a:	0052      	lsls	r2, r2, #1
 801052c:	d021      	beq.n	8010572 <RegionCommonComputeRxWindowParameters+0x5a>
 801052e:	4402      	add	r2, r0
 8010530:	3a01      	subs	r2, #1
 8010532:	fbb2 f2f0 	udiv	r2, r2, r0
 8010536:	4291      	cmp	r1, r2
 8010538:	bf38      	it	cc
 801053a:	4611      	movcc	r1, r2
 801053c:	9a01      	ldr	r2, [sp, #4]
 801053e:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8010540:	0082      	lsls	r2, r0, #2
 8010542:	fb01 f000 	mul.w	r0, r1, r0
 8010546:	b1b8      	cbz	r0, 8010578 <RegionCommonComputeRxWindowParameters+0x60>
 8010548:	3001      	adds	r0, #1
 801054a:	0840      	lsrs	r0, r0, #1
 801054c:	1a12      	subs	r2, r2, r0
 801054e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010552:	fb01 2313 	mls	r3, r1, r3, r2
 8010556:	2b00      	cmp	r3, #0
 8010558:	dd10      	ble.n	801057c <RegionCommonComputeRxWindowParameters+0x64>
 801055a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801055e:	4a0b      	ldr	r2, [pc, #44]	; (801058c <RegionCommonComputeRxWindowParameters+0x74>)
 8010560:	fb82 1203 	smull	r1, r2, r2, r3
 8010564:	17db      	asrs	r3, r3, #31
 8010566:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801056a:	9a02      	ldr	r2, [sp, #8]
 801056c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801056e:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8010572:	fbb2 f2f0 	udiv	r2, r2, r0
 8010576:	e7de      	b.n	8010536 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8010578:	0840      	lsrs	r0, r0, #1
 801057a:	e7e7      	b.n	801054c <RegionCommonComputeRxWindowParameters+0x34>
 801057c:	4a03      	ldr	r2, [pc, #12]	; (801058c <RegionCommonComputeRxWindowParameters+0x74>)
 801057e:	fb82 1203 	smull	r1, r2, r2, r3
 8010582:	17db      	asrs	r3, r3, #31
 8010584:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8010588:	e7ef      	b.n	801056a <RegionCommonComputeRxWindowParameters+0x52>
 801058a:	bf00      	nop
 801058c:	10624dd3 	.word	0x10624dd3

08010590 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	460d      	mov	r5, r1
 8010594:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8010596:	0040      	lsls	r0, r0, #1
 8010598:	f7f0 fc04 	bl	8000da4 <__aeabi_ui2f>
 801059c:	4601      	mov	r1, r0
 801059e:	4628      	mov	r0, r5
 80105a0:	f7f0 fb4e 	bl	8000c40 <__aeabi_fsub>
 80105a4:	4621      	mov	r1, r4
 80105a6:	f7f0 fb4b 	bl	8000c40 <__aeabi_fsub>
 80105aa:	f7ef ffa5 	bl	80004f8 <__aeabi_f2d>
 80105ae:	f008 fe2b 	bl	8019208 <floor>
 80105b2:	f7f0 faa9 	bl	8000b08 <__aeabi_d2iz>

    return phyTxPower;
}
 80105b6:	b240      	sxtb	r0, r0
 80105b8:	bd38      	pop	{r3, r4, r5, pc}

080105ba <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80105ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105be:	b083      	sub	sp, #12
 80105c0:	4605      	mov	r5, r0
 80105c2:	468b      	mov	fp, r1
 80105c4:	9200      	str	r2, [sp, #0]
 80105c6:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80105c8:	2600      	movs	r6, #0
 80105ca:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 80105cc:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 80105ce:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80105d0:	e049      	b.n	8010666 <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80105d2:	7a3a      	ldrb	r2, [r7, #8]
 80105d4:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80105d8:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80105dc:	b252      	sxtb	r2, r2
 80105de:	b249      	sxtb	r1, r1
 80105e0:	f995 0001 	ldrsb.w	r0, [r5, #1]
 80105e4:	f7ff fdf5 	bl	80101d2 <RegionCommonValueInRange>
 80105e8:	b178      	cbz	r0, 801060a <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80105ea:	68ea      	ldr	r2, [r5, #12]
 80105ec:	7a7b      	ldrb	r3, [r7, #9]
 80105ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80105f2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80105f6:	7d13      	ldrb	r3, [r2, #20]
 80105f8:	b353      	cbz	r3, 8010650 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 80105fa:	f109 0301 	add.w	r3, r9, #1
 80105fe:	eb08 0204 	add.w	r2, r8, r4
 8010602:	f80b 2009 	strb.w	r2, [fp, r9]
 8010606:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 801060a:	3401      	adds	r4, #1
 801060c:	b2e4      	uxtb	r4, r4
 801060e:	2c0f      	cmp	r4, #15
 8010610:	d823      	bhi.n	801065a <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8010612:	686b      	ldr	r3, [r5, #4]
 8010614:	0072      	lsls	r2, r6, #1
 8010616:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 801061a:	4123      	asrs	r3, r4
 801061c:	f013 0f01 	tst.w	r3, #1
 8010620:	d0f3      	beq.n	801060a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8010622:	68a8      	ldr	r0, [r5, #8]
 8010624:	eb08 0304 	add.w	r3, r8, r4
 8010628:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801062c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8010630:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d0e8      	beq.n	801060a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8010638:	782b      	ldrb	r3, [r5, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1c9      	bne.n	80105d2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801063e:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8010640:	2b00      	cmp	r3, #0
 8010642:	d0c6      	beq.n	80105d2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8010644:	5a9b      	ldrh	r3, [r3, r2]
 8010646:	4123      	asrs	r3, r4
 8010648:	f013 0f01 	tst.w	r3, #1
 801064c:	d1c1      	bne.n	80105d2 <RegionCommonCountNbOfEnabledChannels+0x18>
 801064e:	e7dc      	b.n	801060a <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 8010650:	f10a 0a01 	add.w	sl, sl, #1
 8010654:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 8010658:	e7d7      	b.n	801060a <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801065a:	f108 0810 	add.w	r8, r8, #16
 801065e:	fa5f f888 	uxtb.w	r8, r8
 8010662:	3601      	adds	r6, #1
 8010664:	b2f6      	uxtb	r6, r6
 8010666:	8a2b      	ldrh	r3, [r5, #16]
 8010668:	fa1f f288 	uxth.w	r2, r8
 801066c:	429a      	cmp	r2, r3
 801066e:	d201      	bcs.n	8010674 <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 8010670:	2400      	movs	r4, #0
 8010672:	e7cc      	b.n	801060e <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8010674:	9b00      	ldr	r3, [sp, #0]
 8010676:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801067a:	9b01      	ldr	r3, [sp, #4]
 801067c:	f883 a000 	strb.w	sl, [r3]
}
 8010680:	b003      	add	sp, #12
 8010682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010686 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8010686:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801068a:	b085      	sub	sp, #20
 801068c:	4604      	mov	r4, r0
 801068e:	460f      	mov	r7, r1
 8010690:	4616      	mov	r6, r2
 8010692:	461d      	mov	r5, r3
 8010694:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010698:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801069c:	6840      	ldr	r0, [r0, #4]
 801069e:	f003 ff2b 	bl	80144f8 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80106a2:	6823      	ldr	r3, [r4, #0]
 80106a4:	1a1b      	subs	r3, r3, r0
 80106a6:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 80106aa:	2301      	movs	r3, #1
 80106ac:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 80106b0:	2300      	movs	r3, #0
 80106b2:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80106b4:	6863      	ldr	r3, [r4, #4]
 80106b6:	b113      	cbz	r3, 80106be <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80106b8:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80106ba:	4283      	cmp	r3, r0
 80106bc:	d81e      	bhi.n	80106fc <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80106be:	2300      	movs	r3, #0
 80106c0:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80106c2:	69e3      	ldr	r3, [r4, #28]
 80106c4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80106c8:	781f      	ldrb	r7, [r3, #0]
 80106ca:	69a3      	ldr	r3, [r4, #24]
 80106cc:	9303      	str	r3, [sp, #12]
 80106ce:	ab01      	add	r3, sp, #4
 80106d0:	f104 020c 	add.w	r2, r4, #12
 80106d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80106dc:	7d23      	ldrb	r3, [r4, #20]
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	7a23      	ldrb	r3, [r4, #8]
 80106e2:	7a62      	ldrb	r2, [r4, #9]
 80106e4:	4661      	mov	r1, ip
 80106e6:	4638      	mov	r0, r7
 80106e8:	f7ff fe10 	bl	801030c <RegionCommonUpdateBandTimeOff>
 80106ec:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80106f0:	4643      	mov	r3, r8
 80106f2:	462a      	mov	r2, r5
 80106f4:	4631      	mov	r1, r6
 80106f6:	69e0      	ldr	r0, [r4, #28]
 80106f8:	f7ff ff5f 	bl	80105ba <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80106fc:	782b      	ldrb	r3, [r5, #0]
 80106fe:	b923      	cbnz	r3, 801070a <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 8010700:	f898 3000 	ldrb.w	r3, [r8]
 8010704:	b13b      	cbz	r3, 8010716 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8010706:	200b      	movs	r0, #11
 8010708:	e002      	b.n	8010710 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 801070a:	2000      	movs	r0, #0
 801070c:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8010710:	b005      	add	sp, #20
 8010712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8010716:	200c      	movs	r0, #12
 8010718:	e7fa      	b.n	8010710 <RegionCommonIdentifyChannels+0x8a>

0801071a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801071a:	b570      	push	{r4, r5, r6, lr}
 801071c:	b082      	sub	sp, #8
 801071e:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 8010720:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 8010724:	f990 6002 	ldrsb.w	r6, [r0, #2]
 8010728:	42a6      	cmp	r6, r4
 801072a:	d011      	beq.n	8010750 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801072c:	3c01      	subs	r4, #1
 801072e:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 8010730:	42a6      	cmp	r6, r4
 8010732:	d00e      	beq.n	8010752 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8010734:	68ab      	ldr	r3, [r5, #8]
 8010736:	9301      	str	r3, [sp, #4]
 8010738:	f995 3001 	ldrsb.w	r3, [r5, #1]
 801073c:	9300      	str	r3, [sp, #0]
 801073e:	4633      	mov	r3, r6
 8010740:	4622      	mov	r2, r4
 8010742:	6869      	ldr	r1, [r5, #4]
 8010744:	78e8      	ldrb	r0, [r5, #3]
 8010746:	f7ff fd4e 	bl	80101e6 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 801074a:	2800      	cmp	r0, #0
 801074c:	d0ee      	beq.n	801072c <RegionCommonGetNextLowerTxDr+0x12>
 801074e:	e000      	b.n	8010752 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 8010750:	4634      	mov	r4, r6

        return drLocal;
    }
}
 8010752:	4620      	mov	r0, r4
 8010754:	b002      	add	sp, #8
 8010756:	bd70      	pop	{r4, r5, r6, pc}

08010758 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 8010758:	4288      	cmp	r0, r1
 801075a:	bfb8      	it	lt
 801075c:	4608      	movlt	r0, r1
 801075e:	4770      	bx	lr

08010760 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8010760:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8010764:	4a05      	ldr	r2, [pc, #20]	; (801077c <RegionCommonGetBandwidth+0x1c>)
 8010766:	4293      	cmp	r3, r2
 8010768:	d004      	beq.n	8010774 <RegionCommonGetBandwidth+0x14>
 801076a:	4a05      	ldr	r2, [pc, #20]	; (8010780 <RegionCommonGetBandwidth+0x20>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d103      	bne.n	8010778 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8010770:	2002      	movs	r0, #2
 8010772:	4770      	bx	lr
            return 1;
 8010774:	2001      	movs	r0, #1
 8010776:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 8010778:	2000      	movs	r0, #0
    }
}
 801077a:	4770      	bx	lr
 801077c:	0003d090 	.word	0x0003d090
 8010780:	0007a120 	.word	0x0007a120

08010784 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8010784:	b500      	push	{lr}
 8010786:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 8010788:	2805      	cmp	r0, #5
 801078a:	d80e      	bhi.n	80107aa <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801078c:	9202      	str	r2, [sp, #8]
 801078e:	9101      	str	r1, [sp, #4]
 8010790:	4b0a      	ldr	r3, [pc, #40]	; (80107bc <RegionCommonRxConfigPrint+0x38>)
 8010792:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	4b09      	ldr	r3, [pc, #36]	; (80107c0 <RegionCommonRxConfigPrint+0x3c>)
 801079a:	2201      	movs	r2, #1
 801079c:	2100      	movs	r1, #0
 801079e:	2002      	movs	r0, #2
 80107a0:	f003 fc4a 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80107a4:	b005      	add	sp, #20
 80107a6:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80107aa:	9201      	str	r2, [sp, #4]
 80107ac:	9100      	str	r1, [sp, #0]
 80107ae:	4b05      	ldr	r3, [pc, #20]	; (80107c4 <RegionCommonRxConfigPrint+0x40>)
 80107b0:	2201      	movs	r2, #1
 80107b2:	2100      	movs	r1, #0
 80107b4:	2002      	movs	r0, #2
 80107b6:	f003 fc3f 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 80107ba:	e7f3      	b.n	80107a4 <RegionCommonRxConfigPrint+0x20>
 80107bc:	08019c04 	.word	0x08019c04
 80107c0:	08019b9c 	.word	0x08019b9c
 80107c4:	08019bbc 	.word	0x08019bbc

080107c8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80107c8:	b500      	push	{lr}
 80107ca:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80107cc:	9101      	str	r1, [sp, #4]
 80107ce:	9000      	str	r0, [sp, #0]
 80107d0:	4b04      	ldr	r3, [pc, #16]	; (80107e4 <RegionCommonTxConfigPrint+0x1c>)
 80107d2:	2201      	movs	r2, #1
 80107d4:	2100      	movs	r1, #0
 80107d6:	2002      	movs	r0, #2
 80107d8:	f003 fc2e 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 80107dc:	b003      	add	sp, #12
 80107de:	f85d fb04 	ldr.w	pc, [sp], #4
 80107e2:	bf00      	nop
 80107e4:	08019bd8 	.word	0x08019bd8

080107e8 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 80107e8:	b510      	push	{r4, lr}
 80107ea:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80107ec:	4b10      	ldr	r3, [pc, #64]	; (8010830 <VerifyRfFreq+0x48>)
 80107ee:	6a1b      	ldr	r3, [r3, #32]
 80107f0:	4798      	blx	r3
 80107f2:	b1c8      	cbz	r0, 8010828 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80107f4:	4b0f      	ldr	r3, [pc, #60]	; (8010834 <VerifyRfFreq+0x4c>)
 80107f6:	4423      	add	r3, r4
 80107f8:	4a0f      	ldr	r2, [pc, #60]	; (8010838 <VerifyRfFreq+0x50>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d813      	bhi.n	8010826 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80107fe:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 8010802:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 8010806:	f202 7245 	addw	r2, r2, #1861	; 0x745
 801080a:	fba2 1203 	umull	r1, r2, r2, r3
 801080e:	0c92      	lsrs	r2, r2, #18
 8010810:	490a      	ldr	r1, [pc, #40]	; (801083c <VerifyRfFreq+0x54>)
 8010812:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8010816:	b942      	cbnz	r2, 801082a <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8010818:	4b09      	ldr	r3, [pc, #36]	; (8010840 <VerifyRfFreq+0x58>)
 801081a:	4423      	add	r3, r4
 801081c:	4a09      	ldr	r2, [pc, #36]	; (8010844 <VerifyRfFreq+0x5c>)
 801081e:	4293      	cmp	r3, r2
 8010820:	d902      	bls.n	8010828 <VerifyRfFreq+0x40>
    {
        return false;
 8010822:	2000      	movs	r0, #0
 8010824:	e000      	b.n	8010828 <VerifyRfFreq+0x40>
        return false;
 8010826:	2000      	movs	r0, #0
    }
    return true;
}
 8010828:	bd10      	pop	{r4, pc}
        return false;
 801082a:	2000      	movs	r0, #0
 801082c:	e7fc      	b.n	8010828 <VerifyRfFreq+0x40>
 801082e:	bf00      	nop
 8010830:	0801a22c 	.word	0x0801a22c
 8010834:	c8f78f60 	.word	0xc8f78f60
 8010838:	00401640 	.word	0x00401640
 801083c:	000927c0 	.word	0x000927c0
 8010840:	ca37fea0 	.word	0xca37fea0
 8010844:	01808580 	.word	0x01808580

08010848 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8010848:	b570      	push	{r4, r5, r6, lr}
 801084a:	b084      	sub	sp, #16
 801084c:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 801084e:	4b0a      	ldr	r3, [pc, #40]	; (8010878 <GetTimeOnAir+0x30>)
 8010850:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8010852:	490a      	ldr	r1, [pc, #40]	; (801087c <GetTimeOnAir+0x34>)
 8010854:	f7ff ff84 	bl	8010760 <RegionCommonGetBandwidth>
 8010858:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801085a:	4b09      	ldr	r3, [pc, #36]	; (8010880 <GetTimeOnAir+0x38>)
 801085c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801085e:	2001      	movs	r0, #1
 8010860:	9003      	str	r0, [sp, #12]
 8010862:	b2e4      	uxtb	r4, r4
 8010864:	9402      	str	r4, [sp, #8]
 8010866:	2200      	movs	r2, #0
 8010868:	9201      	str	r2, [sp, #4]
 801086a:	2208      	movs	r2, #8
 801086c:	9200      	str	r2, [sp, #0]
 801086e:	4603      	mov	r3, r0
 8010870:	4632      	mov	r2, r6
 8010872:	47a8      	blx	r5
}
 8010874:	b004      	add	sp, #16
 8010876:	bd70      	pop	{r4, r5, r6, pc}
 8010878:	08019c70 	.word	0x08019c70
 801087c:	08019c1c 	.word	0x08019c1c
 8010880:	0801a22c 	.word	0x0801a22c

08010884 <LimitTxPower>:
{
 8010884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010886:	4606      	mov	r6, r0
 8010888:	4615      	mov	r5, r2
 801088a:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801088c:	f7ff ff64 	bl	8010758 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8010890:	2d04      	cmp	r5, #4
 8010892:	d105      	bne.n	80108a0 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8010894:	4634      	mov	r4, r6
 8010896:	2e02      	cmp	r6, #2
 8010898:	bfb8      	it	lt
 801089a:	2402      	movlt	r4, #2
}
 801089c:	4620      	mov	r0, r4
 801089e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108a0:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80108a2:	2204      	movs	r2, #4
 80108a4:	2100      	movs	r1, #0
 80108a6:	4638      	mov	r0, r7
 80108a8:	f7ff fcf1 	bl	801028e <RegionCommonCountChannels>
 80108ac:	2831      	cmp	r0, #49	; 0x31
 80108ae:	d8f5      	bhi.n	801089c <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 80108b0:	4634      	mov	r4, r6
 80108b2:	2e05      	cmp	r6, #5
 80108b4:	bfb8      	it	lt
 80108b6:	2405      	movlt	r4, #5
 80108b8:	e7f0      	b.n	801089c <LimitTxPower+0x18>
	...

080108bc <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 80108bc:	b500      	push	{lr}
 80108be:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 80108c0:	2300      	movs	r3, #0
 80108c2:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 80108c4:	7803      	ldrb	r3, [r0, #0]
 80108c6:	3b01      	subs	r3, #1
 80108c8:	2b37      	cmp	r3, #55	; 0x37
 80108ca:	d81f      	bhi.n	801090c <RegionUS915GetPhyParam+0x50>
 80108cc:	e8df f003 	tbb	[pc, r3]
 80108d0:	1e1e1e1c 	.word	0x1e1e1e1c
 80108d4:	1e1e1e1e 	.word	0x1e1e1e1e
 80108d8:	3e3b1e1e 	.word	0x3e3b1e1e
 80108dc:	4d1e4741 	.word	0x4d1e4741
 80108e0:	5d595551 	.word	0x5d595551
 80108e4:	6d6a1e61 	.word	0x6d6a1e61
 80108e8:	7f7c7670 	.word	0x7f7c7670
 80108ec:	86831e1e 	.word	0x86831e1e
 80108f0:	1e1e1e23 	.word	0x1e1e1e23
 80108f4:	1e1e1e1e 	.word	0x1e1e1e1e
 80108f8:	1e1e1e1e 	.word	0x1e1e1e1e
 80108fc:	90891e1e 	.word	0x90891e1e
 8010900:	a01e9d9a 	.word	0xa01e9d9a
 8010904:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8010908:	2308      	movs	r3, #8
 801090a:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801090c:	9804      	ldr	r0, [sp, #16]
 801090e:	9005      	str	r0, [sp, #20]
}
 8010910:	b007      	add	sp, #28
 8010912:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8010916:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801091a:	f88d 3004 	strb.w	r3, [sp, #4]
 801091e:	2304      	movs	r3, #4
 8010920:	f88d 3005 	strb.w	r3, [sp, #5]
 8010924:	2300      	movs	r3, #0
 8010926:	f88d 3006 	strb.w	r3, [sp, #6]
 801092a:	2348      	movs	r3, #72	; 0x48
 801092c:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8010930:	4b44      	ldr	r3, [pc, #272]	; (8010a44 <RegionUS915GetPhyParam+0x188>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010938:	9202      	str	r2, [sp, #8]
 801093a:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801093c:	a801      	add	r0, sp, #4
 801093e:	f7ff feec 	bl	801071a <RegionCommonGetNextLowerTxDr>
 8010942:	9004      	str	r0, [sp, #16]
            break;
 8010944:	e7e2      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8010946:	2340      	movs	r3, #64	; 0x40
 8010948:	9304      	str	r3, [sp, #16]
            break;
 801094a:	e7df      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801094c:	2320      	movs	r3, #32
 801094e:	9304      	str	r3, [sp, #16]
            break;
 8010950:	e7dc      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8010952:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010956:	4a3c      	ldr	r2, [pc, #240]	; (8010a48 <RegionUS915GetPhyParam+0x18c>)
 8010958:	5cd3      	ldrb	r3, [r2, r3]
 801095a:	9304      	str	r3, [sp, #16]
            break;
 801095c:	e7d6      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801095e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010962:	4a3a      	ldr	r2, [pc, #232]	; (8010a4c <RegionUS915GetPhyParam+0x190>)
 8010964:	5cd3      	ldrb	r3, [r2, r3]
 8010966:	9304      	str	r3, [sp, #16]
            break;
 8010968:	e7d0      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 801096a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801096e:	9304      	str	r3, [sp, #16]
            break;
 8010970:	e7cc      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8010972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010976:	9304      	str	r3, [sp, #16]
            break;
 8010978:	e7c8      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801097a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801097e:	9304      	str	r3, [sp, #16]
            break;
 8010980:	e7c4      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8010982:	f241 3388 	movw	r3, #5000	; 0x1388
 8010986:	9304      	str	r3, [sp, #16]
            break;
 8010988:	e7c0      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801098a:	f241 7370 	movw	r3, #6000	; 0x1770
 801098e:	9304      	str	r3, [sp, #16]
            break;
 8010990:	e7bc      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8010992:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010996:	482e      	ldr	r0, [pc, #184]	; (8010a50 <RegionUS915GetPhyParam+0x194>)
 8010998:	f001 fc64 	bl	8012264 <randr>
 801099c:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 80109a0:	9004      	str	r0, [sp, #16]
            break;
 80109a2:	e7b3      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 80109a4:	4b2b      	ldr	r3, [pc, #172]	; (8010a54 <RegionUS915GetPhyParam+0x198>)
 80109a6:	9304      	str	r3, [sp, #16]
            break;
 80109a8:	e7b0      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 80109aa:	2308      	movs	r3, #8
 80109ac:	9304      	str	r3, [sp, #16]
            break;
 80109ae:	e7ad      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80109b0:	4b24      	ldr	r3, [pc, #144]	; (8010a44 <RegionUS915GetPhyParam+0x188>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80109b8:	9304      	str	r3, [sp, #16]
            break;
 80109ba:	e7a7      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80109bc:	4b21      	ldr	r3, [pc, #132]	; (8010a44 <RegionUS915GetPhyParam+0x188>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80109c4:	9304      	str	r3, [sp, #16]
            break;
 80109c6:	e7a1      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 80109c8:	2348      	movs	r3, #72	; 0x48
 80109ca:	9304      	str	r3, [sp, #16]
            break;
 80109cc:	e79e      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 80109ce:	4b1d      	ldr	r3, [pc, #116]	; (8010a44 <RegionUS915GetPhyParam+0x188>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	9304      	str	r3, [sp, #16]
            break;
 80109d4:	e79a      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 80109d6:	4b20      	ldr	r3, [pc, #128]	; (8010a58 <RegionUS915GetPhyParam+0x19c>)
 80109d8:	9304      	str	r3, [sp, #16]
            break;
 80109da:	e797      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 80109dc:	2300      	movs	r3, #0
 80109de:	9304      	str	r3, [sp, #16]
            break;
 80109e0:	e794      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80109e2:	4a1e      	ldr	r2, [pc, #120]	; (8010a5c <RegionUS915GetPhyParam+0x1a0>)
 80109e4:	491b      	ldr	r1, [pc, #108]	; (8010a54 <RegionUS915GetPhyParam+0x198>)
 80109e6:	7900      	ldrb	r0, [r0, #4]
 80109e8:	f7ff fb24 	bl	8010034 <RegionBaseUSCalcDownlinkFrequency>
 80109ec:	9004      	str	r0, [sp, #16]
            break;
 80109ee:	e78d      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 80109f0:	2317      	movs	r3, #23
 80109f2:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 80109f6:	2304      	movs	r3, #4
 80109f8:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 80109fc:	2303      	movs	r3, #3
 80109fe:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8010a02:	e783      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8010a04:	2308      	movs	r3, #8
 8010a06:	9304      	str	r3, [sp, #16]
            break;
 8010a08:	e780      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8010a0a:	2308      	movs	r3, #8
 8010a0c:	9304      	str	r3, [sp, #16]
            break;
 8010a0e:	e77d      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8010a10:	4a12      	ldr	r2, [pc, #72]	; (8010a5c <RegionUS915GetPhyParam+0x1a0>)
 8010a12:	4910      	ldr	r1, [pc, #64]	; (8010a54 <RegionUS915GetPhyParam+0x198>)
 8010a14:	7900      	ldrb	r0, [r0, #4]
 8010a16:	f7ff fb0d 	bl	8010034 <RegionBaseUSCalcDownlinkFrequency>
 8010a1a:	9004      	str	r0, [sp, #16]
            break;
 8010a1c:	e776      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8010a1e:	2308      	movs	r3, #8
 8010a20:	9304      	str	r3, [sp, #16]
            break;
 8010a22:	e773      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8010a24:	2308      	movs	r3, #8
 8010a26:	9304      	str	r3, [sp, #16]
            break;
 8010a28:	e770      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8010a2a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010a2e:	4a0c      	ldr	r2, [pc, #48]	; (8010a60 <RegionUS915GetPhyParam+0x1a4>)
 8010a30:	5cd3      	ldrb	r3, [r2, r3]
 8010a32:	9304      	str	r3, [sp, #16]
            break;
 8010a34:	e76a      	b.n	801090c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8010a36:	490b      	ldr	r1, [pc, #44]	; (8010a64 <RegionUS915GetPhyParam+0x1a8>)
 8010a38:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8010a3c:	f7ff fe90 	bl	8010760 <RegionCommonGetBandwidth>
 8010a40:	9004      	str	r0, [sp, #16]
            break;
 8010a42:	e763      	b.n	801090c <RegionUS915GetPhyParam+0x50>
 8010a44:	20001580 	.word	0x20001580
 8010a48:	08019c90 	.word	0x08019c90
 8010a4c:	08019c80 	.word	0x08019c80
 8010a50:	fffffc18 	.word	0xfffffc18
 8010a54:	370870a0 	.word	0x370870a0
 8010a58:	4200999a 	.word	0x4200999a
 8010a5c:	000927c0 	.word	0x000927c0
 8010a60:	08019c70 	.word	0x08019c70
 8010a64:	08019c1c 	.word	0x08019c1c

08010a68 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010a68:	b510      	push	{r4, lr}
 8010a6a:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8010a6c:	4b0b      	ldr	r3, [pc, #44]	; (8010a9c <RegionUS915SetBandTxDone+0x34>)
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	7803      	ldrb	r3, [r0, #0]
 8010a72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010a76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a7a:	7a5b      	ldrb	r3, [r3, #9]
 8010a7c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8010a80:	4b07      	ldr	r3, [pc, #28]	; (8010aa0 <RegionUS915SetBandTxDone+0x38>)
 8010a82:	681c      	ldr	r4, [r3, #0]
 8010a84:	6903      	ldr	r3, [r0, #16]
 8010a86:	9300      	str	r3, [sp, #0]
 8010a88:	68c3      	ldr	r3, [r0, #12]
 8010a8a:	7842      	ldrb	r2, [r0, #1]
 8010a8c:	6881      	ldr	r1, [r0, #8]
 8010a8e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8010a92:	f7ff fc21 	bl	80102d8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8010a96:	b002      	add	sp, #8
 8010a98:	bd10      	pop	{r4, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20001580 	.word	0x20001580
 8010aa0:	20001578 	.word	0x20001578

08010aa4 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8010aa4:	b510      	push	{r4, lr}
 8010aa6:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	f8ad 3000 	strh.w	r3, [sp]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	f88d 3002 	strb.w	r3, [sp, #2]
 8010ab4:	9301      	str	r3, [sp, #4]
 8010ab6:	9302      	str	r3, [sp, #8]
 8010ab8:	9303      	str	r3, [sp, #12]
 8010aba:	9304      	str	r3, [sp, #16]
 8010abc:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8010ac0:	7b04      	ldrb	r4, [r0, #12]
 8010ac2:	b174      	cbz	r4, 8010ae2 <RegionUS915InitDefaults+0x3e>
 8010ac4:	3c01      	subs	r4, #1
 8010ac6:	b2e4      	uxtb	r4, r4
 8010ac8:	2c01      	cmp	r4, #1
 8010aca:	d87e      	bhi.n	8010bca <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010acc:	4b40      	ldr	r3, [pc, #256]	; (8010bd0 <RegionUS915InitDefaults+0x12c>)
 8010ace:	6818      	ldr	r0, [r3, #0]
 8010ad0:	2206      	movs	r2, #6
 8010ad2:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8010ad6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010ada:	f7ff fbee 	bl	80102ba <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8010ade:	2300      	movs	r3, #0
 8010ae0:	e071      	b.n	8010bc6 <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010ae2:	6803      	ldr	r3, [r0, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d070      	beq.n	8010bca <RegionUS915InitDefaults+0x126>
 8010ae8:	6842      	ldr	r2, [r0, #4]
 8010aea:	2a00      	cmp	r2, #0
 8010aec:	d06d      	beq.n	8010bca <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8010aee:	4939      	ldr	r1, [pc, #228]	; (8010bd4 <RegionUS915InitDefaults+0x130>)
 8010af0:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010af2:	4937      	ldr	r1, [pc, #220]	; (8010bd0 <RegionUS915InitDefaults+0x12c>)
 8010af4:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 8010af6:	6880      	ldr	r0, [r0, #8]
 8010af8:	4a37      	ldr	r2, [pc, #220]	; (8010bd8 <RegionUS915InitDefaults+0x134>)
 8010afa:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8010afc:	2200      	movs	r2, #0
 8010afe:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8010b00:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8010b02:	2218      	movs	r2, #24
 8010b04:	4669      	mov	r1, sp
 8010b06:	f001 fbba 	bl	801227e <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8010b0a:	e011      	b.n	8010b30 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8010b0c:	4b30      	ldr	r3, [pc, #192]	; (8010bd0 <RegionUS915InitDefaults+0x12c>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4932      	ldr	r1, [pc, #200]	; (8010bdc <RegionUS915InitDefaults+0x138>)
 8010b12:	4a33      	ldr	r2, [pc, #204]	; (8010be0 <RegionUS915InitDefaults+0x13c>)
 8010b14:	fb01 2204 	mla	r2, r1, r4, r2
 8010b18:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010b1c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8010b20:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8010b24:	2230      	movs	r2, #48	; 0x30
 8010b26:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8010b28:	2200      	movs	r2, #0
 8010b2a:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8010b2c:	3401      	adds	r4, #1
 8010b2e:	b2e4      	uxtb	r4, r4
 8010b30:	2c3f      	cmp	r4, #63	; 0x3f
 8010b32:	d9eb      	bls.n	8010b0c <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8010b34:	2340      	movs	r3, #64	; 0x40
 8010b36:	2b47      	cmp	r3, #71	; 0x47
 8010b38:	d814      	bhi.n	8010b64 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8010b3a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 8010b3e:	4a24      	ldr	r2, [pc, #144]	; (8010bd0 <RegionUS915InitDefaults+0x12c>)
 8010b40:	6812      	ldr	r2, [r2, #0]
 8010b42:	4c28      	ldr	r4, [pc, #160]	; (8010be4 <RegionUS915InitDefaults+0x140>)
 8010b44:	4928      	ldr	r1, [pc, #160]	; (8010be8 <RegionUS915InitDefaults+0x144>)
 8010b46:	fb04 1100 	mla	r1, r4, r0, r1
 8010b4a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8010b4e:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8010b52:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8010b56:	2144      	movs	r1, #68	; 0x44
 8010b58:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8010b5e:	3301      	adds	r3, #1
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	e7e8      	b.n	8010b36 <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8010b64:	4c1a      	ldr	r4, [pc, #104]	; (8010bd0 <RegionUS915InitDefaults+0x12c>)
 8010b66:	6820      	ldr	r0, [r4, #0]
 8010b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b6c:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8010b70:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8010b74:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8010b78:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8010b7c:	23ff      	movs	r3, #255	; 0xff
 8010b7e:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8010b82:	2300      	movs	r3, #0
 8010b84:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010b88:	2206      	movs	r2, #6
 8010b8a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8010b8e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010b92:	f7ff fb92 	bl	80102ba <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8010b96:	6821      	ldr	r1, [r4, #0]
 8010b98:	2206      	movs	r2, #6
 8010b9a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8010b9e:	4b0d      	ldr	r3, [pc, #52]	; (8010bd4 <RegionUS915InitDefaults+0x130>)
 8010ba0:	6818      	ldr	r0, [r3, #0]
 8010ba2:	f7ff fb8a 	bl	80102ba <RegionCommonChanMaskCopy>
            break;
 8010ba6:	e010      	b.n	8010bca <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8010ba8:	4a0a      	ldr	r2, [pc, #40]	; (8010bd4 <RegionUS915InitDefaults+0x130>)
 8010baa:	6811      	ldr	r1, [r2, #0]
 8010bac:	4a08      	ldr	r2, [pc, #32]	; (8010bd0 <RegionUS915InitDefaults+0x12c>)
 8010bae:	6812      	ldr	r2, [r2, #0]
 8010bb0:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8010bb4:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8010bb8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010bbc:	4002      	ands	r2, r0
 8010bbe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	2b05      	cmp	r3, #5
 8010bc8:	d9ee      	bls.n	8010ba8 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 8010bca:	b006      	add	sp, #24
 8010bcc:	bd10      	pop	{r4, pc}
 8010bce:	bf00      	nop
 8010bd0:	20001580 	.word	0x20001580
 8010bd4:	2000157c 	.word	0x2000157c
 8010bd8:	20001578 	.word	0x20001578
 8010bdc:	00030d40 	.word	0x00030d40
 8010be0:	35c80160 	.word	0x35c80160
 8010be4:	00186a00 	.word	0x00186a00
 8010be8:	35d2afc0 	.word	0x35d2afc0

08010bec <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010bec:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 8010bee:	290a      	cmp	r1, #10
 8010bf0:	d833      	bhi.n	8010c5a <RegionUS915Verify+0x6e>
 8010bf2:	e8df f001 	tbb	[pc, r1]
 8010bf6:	3206      	.short	0x3206
 8010bf8:	0a323232 	.word	0x0a323232
 8010bfc:	28321e14 	.word	0x28321e14
 8010c00:	28          	.byte	0x28
 8010c01:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8010c02:	6800      	ldr	r0, [r0, #0]
 8010c04:	f7ff fdf0 	bl	80107e8 <VerifyRfFreq>
 8010c08:	e028      	b.n	8010c5c <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8010c0a:	2204      	movs	r2, #4
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	f990 0000 	ldrsb.w	r0, [r0]
 8010c12:	f7ff fade 	bl	80101d2 <RegionCommonValueInRange>
 8010c16:	3800      	subs	r0, #0
 8010c18:	bf18      	it	ne
 8010c1a:	2001      	movne	r0, #1
 8010c1c:	e01e      	b.n	8010c5c <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010c1e:	2205      	movs	r2, #5
 8010c20:	2100      	movs	r1, #0
 8010c22:	f990 0000 	ldrsb.w	r0, [r0]
 8010c26:	f7ff fad4 	bl	80101d2 <RegionCommonValueInRange>
 8010c2a:	3800      	subs	r0, #0
 8010c2c:	bf18      	it	ne
 8010c2e:	2001      	movne	r0, #1
 8010c30:	e014      	b.n	8010c5c <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8010c32:	220d      	movs	r2, #13
 8010c34:	2108      	movs	r1, #8
 8010c36:	f990 0000 	ldrsb.w	r0, [r0]
 8010c3a:	f7ff faca 	bl	80101d2 <RegionCommonValueInRange>
 8010c3e:	3800      	subs	r0, #0
 8010c40:	bf18      	it	ne
 8010c42:	2001      	movne	r0, #1
 8010c44:	e00a      	b.n	8010c5c <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8010c46:	220e      	movs	r2, #14
 8010c48:	2100      	movs	r1, #0
 8010c4a:	f990 0000 	ldrsb.w	r0, [r0]
 8010c4e:	f7ff fac0 	bl	80101d2 <RegionCommonValueInRange>
 8010c52:	3800      	subs	r0, #0
 8010c54:	bf18      	it	ne
 8010c56:	2001      	movne	r0, #1
 8010c58:	e000      	b.n	8010c5c <RegionUS915Verify+0x70>
    switch( phyAttribute )
 8010c5a:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8010c5c:	bd08      	pop	{r3, pc}
	...

08010c60 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8010c60:	7a03      	ldrb	r3, [r0, #8]
 8010c62:	2b10      	cmp	r3, #16
 8010c64:	d134      	bne.n	8010cd0 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8010c66:	6843      	ldr	r3, [r0, #4]
 8010c68:	7bdb      	ldrb	r3, [r3, #15]
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d130      	bne.n	8010cd0 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8010c6e:	2200      	movs	r2, #0
 8010c70:	4613      	mov	r3, r2
 8010c72:	2a04      	cmp	r2, #4
 8010c74:	d82b      	bhi.n	8010cce <RegionUS915ApplyCFList+0x6e>
{
 8010c76:	b530      	push	{r4, r5, lr}
 8010c78:	e010      	b.n	8010c9c <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8010c7a:	4916      	ldr	r1, [pc, #88]	; (8010cd4 <RegionUS915ApplyCFList+0x74>)
 8010c7c:	680d      	ldr	r5, [r1, #0]
 8010c7e:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 8010c82:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8010c86:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 8010c8a:	4021      	ands	r1, r4
 8010c8c:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8010c90:	3301      	adds	r3, #1
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	3202      	adds	r2, #2
 8010c96:	b2d2      	uxtb	r2, r2
 8010c98:	2b04      	cmp	r3, #4
 8010c9a:	d817      	bhi.n	8010ccc <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8010c9c:	6841      	ldr	r1, [r0, #4]
 8010c9e:	4c0e      	ldr	r4, [pc, #56]	; (8010cd8 <RegionUS915ApplyCFList+0x78>)
 8010ca0:	6824      	ldr	r4, [r4, #0]
 8010ca2:	469c      	mov	ip, r3
 8010ca4:	5c89      	ldrb	r1, [r1, r2]
 8010ca6:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 8010caa:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8010cae:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8010cb2:	4496      	add	lr, r2
 8010cb4:	f89e e001 	ldrb.w	lr, [lr, #1]
 8010cb8:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8010cbc:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8010cc0:	2b04      	cmp	r3, #4
 8010cc2:	d1da      	bne.n	8010c7a <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8010cc4:	b2c9      	uxtb	r1, r1
 8010cc6:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 8010cca:	e7d6      	b.n	8010c7a <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 8010ccc:	bd30      	pop	{r4, r5, pc}
 8010cce:	4770      	bx	lr
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	2000157c 	.word	0x2000157c
 8010cd8:	20001580 	.word	0x20001580

08010cdc <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010cdc:	b570      	push	{r4, r5, r6, lr}
 8010cde:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8010ce0:	2204      	movs	r2, #4
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	6800      	ldr	r0, [r0, #0]
 8010ce6:	f7ff fad2 	bl	801028e <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8010cea:	2801      	cmp	r0, #1
 8010cec:	d031      	beq.n	8010d52 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 8010cee:	792c      	ldrb	r4, [r5, #4]
 8010cf0:	b11c      	cbz	r4, 8010cfa <RegionUS915ChanMaskSet+0x1e>
 8010cf2:	2c01      	cmp	r4, #1
 8010cf4:	d023      	beq.n	8010d3e <RegionUS915ChanMaskSet+0x62>
 8010cf6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8010cf8:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010cfa:	4e17      	ldr	r6, [pc, #92]	; (8010d58 <RegionUS915ChanMaskSet+0x7c>)
 8010cfc:	6830      	ldr	r0, [r6, #0]
 8010cfe:	2206      	movs	r2, #6
 8010d00:	6829      	ldr	r1, [r5, #0]
 8010d02:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010d06:	f7ff fad8 	bl	80102ba <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8010d0a:	6830      	ldr	r0, [r6, #0]
 8010d0c:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 8010d10:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8010d14:	2300      	movs	r3, #0
 8010d16:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8010d1a:	e00c      	b.n	8010d36 <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8010d1c:	4b0f      	ldr	r3, [pc, #60]	; (8010d5c <RegionUS915ChanMaskSet+0x80>)
 8010d1e:	681a      	ldr	r2, [r3, #0]
 8010d20:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 8010d24:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8010d28:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 8010d2c:	400b      	ands	r3, r1
 8010d2e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8010d32:	3401      	adds	r4, #1
 8010d34:	b2e4      	uxtb	r4, r4
 8010d36:	2c05      	cmp	r4, #5
 8010d38:	d9f0      	bls.n	8010d1c <RegionUS915ChanMaskSet+0x40>
    return true;
 8010d3a:	2001      	movs	r0, #1
 8010d3c:	e7dc      	b.n	8010cf8 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010d3e:	4b06      	ldr	r3, [pc, #24]	; (8010d58 <RegionUS915ChanMaskSet+0x7c>)
 8010d40:	6818      	ldr	r0, [r3, #0]
 8010d42:	2206      	movs	r2, #6
 8010d44:	6829      	ldr	r1, [r5, #0]
 8010d46:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 8010d4a:	f7ff fab6 	bl	80102ba <RegionCommonChanMaskCopy>
    return true;
 8010d4e:	2001      	movs	r0, #1
            break;
 8010d50:	e7d2      	b.n	8010cf8 <RegionUS915ChanMaskSet+0x1c>
        return false;
 8010d52:	2000      	movs	r0, #0
 8010d54:	e7d0      	b.n	8010cf8 <RegionUS915ChanMaskSet+0x1c>
 8010d56:	bf00      	nop
 8010d58:	20001580 	.word	0x20001580
 8010d5c:	2000157c 	.word	0x2000157c

08010d60 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d62:	b083      	sub	sp, #12
 8010d64:	460e      	mov	r6, r1
 8010d66:	4617      	mov	r7, r2
 8010d68:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8010d6a:	280d      	cmp	r0, #13
 8010d6c:	bfa8      	it	ge
 8010d6e:	200d      	movge	r0, #13
 8010d70:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8010d72:	4d0f      	ldr	r5, [pc, #60]	; (8010db0 <RegionUS915ComputeRxWindowParameters+0x50>)
 8010d74:	4629      	mov	r1, r5
 8010d76:	f7ff fcf3 	bl	8010760 <RegionCommonGetBandwidth>
 8010d7a:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8010d7c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010d80:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8010d84:	4a0b      	ldr	r2, [pc, #44]	; (8010db4 <RegionUS915ComputeRxWindowParameters+0x54>)
 8010d86:	5cd0      	ldrb	r0, [r2, r3]
 8010d88:	f7ff fbbe 	bl	8010508 <RegionCommonComputeSymbolTimeLoRa>
 8010d8c:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010d8e:	4b0a      	ldr	r3, [pc, #40]	; (8010db8 <RegionUS915ComputeRxWindowParameters+0x58>)
 8010d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d92:	4798      	blx	r3
 8010d94:	4603      	mov	r3, r0
 8010d96:	f104 020c 	add.w	r2, r4, #12
 8010d9a:	9201      	str	r2, [sp, #4]
 8010d9c:	3408      	adds	r4, #8
 8010d9e:	9400      	str	r4, [sp, #0]
 8010da0:	463a      	mov	r2, r7
 8010da2:	4631      	mov	r1, r6
 8010da4:	4628      	mov	r0, r5
 8010da6:	f7ff fbb7 	bl	8010518 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8010daa:	b003      	add	sp, #12
 8010dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dae:	bf00      	nop
 8010db0:	08019c1c 	.word	0x08019c1c
 8010db4:	08019c70 	.word	0x08019c70
 8010db8:	0801a22c 	.word	0x0801a22c

08010dbc <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dc0:	b08b      	sub	sp, #44	; 0x2c
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8010dc6:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8010dca:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8010dcc:	4b22      	ldr	r3, [pc, #136]	; (8010e58 <RegionUS915RxConfig+0x9c>)
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	4798      	blx	r3
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	d13d      	bne.n	8010e52 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8010dd6:	7ce3      	ldrb	r3, [r4, #19]
 8010dd8:	b933      	cbnz	r3, 8010de8 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8010dda:	7823      	ldrb	r3, [r4, #0]
 8010ddc:	f003 0307 	and.w	r3, r3, #7
 8010de0:	4a1e      	ldr	r2, [pc, #120]	; (8010e5c <RegionUS915RxConfig+0xa0>)
 8010de2:	4f1f      	ldr	r7, [pc, #124]	; (8010e60 <RegionUS915RxConfig+0xa4>)
 8010de4:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8010de8:	4b1e      	ldr	r3, [pc, #120]	; (8010e64 <RegionUS915RxConfig+0xa8>)
 8010dea:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 8010dee:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8010e58 <RegionUS915RxConfig+0x9c>
 8010df2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010df6:	4638      	mov	r0, r7
 8010df8:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010dfa:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8010dfe:	7ca3      	ldrb	r3, [r4, #18]
 8010e00:	9309      	str	r3, [sp, #36]	; 0x24
 8010e02:	2001      	movs	r0, #1
 8010e04:	9008      	str	r0, [sp, #32]
 8010e06:	2200      	movs	r2, #0
 8010e08:	9207      	str	r2, [sp, #28]
 8010e0a:	9206      	str	r2, [sp, #24]
 8010e0c:	9205      	str	r2, [sp, #20]
 8010e0e:	9204      	str	r2, [sp, #16]
 8010e10:	9203      	str	r2, [sp, #12]
 8010e12:	8923      	ldrh	r3, [r4, #8]
 8010e14:	9302      	str	r3, [sp, #8]
 8010e16:	2308      	movs	r3, #8
 8010e18:	9301      	str	r3, [sp, #4]
 8010e1a:	9200      	str	r2, [sp, #0]
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	464a      	mov	r2, r9
 8010e20:	78a1      	ldrb	r1, [r4, #2]
 8010e22:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 8010e24:	7c63      	ldrb	r3, [r4, #17]
 8010e26:	b18b      	cbz	r3, 8010e4c <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8010e28:	4b0f      	ldr	r3, [pc, #60]	; (8010e68 <RegionUS915RxConfig+0xac>)
 8010e2a:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8010e2c:	4b0a      	ldr	r3, [pc, #40]	; (8010e58 <RegionUS915RxConfig+0x9c>)
 8010e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e30:	310d      	adds	r1, #13
 8010e32:	b2c9      	uxtb	r1, r1
 8010e34:	2001      	movs	r0, #1
 8010e36:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8010e38:	4632      	mov	r2, r6
 8010e3a:	4639      	mov	r1, r7
 8010e3c:	7ce0      	ldrb	r0, [r4, #19]
 8010e3e:	f7ff fca1 	bl	8010784 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8010e42:	702e      	strb	r6, [r5, #0]
    return true;
 8010e44:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8010e46:	b00b      	add	sp, #44	; 0x2c
 8010e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8010e4c:	4b07      	ldr	r3, [pc, #28]	; (8010e6c <RegionUS915RxConfig+0xb0>)
 8010e4e:	5d99      	ldrb	r1, [r3, r6]
 8010e50:	e7ec      	b.n	8010e2c <RegionUS915RxConfig+0x70>
        return false;
 8010e52:	2000      	movs	r0, #0
 8010e54:	e7f7      	b.n	8010e46 <RegionUS915RxConfig+0x8a>
 8010e56:	bf00      	nop
 8010e58:	0801a22c 	.word	0x0801a22c
 8010e5c:	000927c0 	.word	0x000927c0
 8010e60:	370870a0 	.word	0x370870a0
 8010e64:	08019c70 	.word	0x08019c70
 8010e68:	08019c80 	.word	0x08019c80
 8010e6c:	08019c90 	.word	0x08019c90

08010e70 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e74:	b08d      	sub	sp, #52	; 0x34
 8010e76:	4604      	mov	r4, r0
 8010e78:	468b      	mov	fp, r1
 8010e7a:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8010e7c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8010e80:	4b32      	ldr	r3, [pc, #200]	; (8010f4c <RegionUS915TxConfig+0xdc>)
 8010e82:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8010e86:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8010f50 <RegionUS915TxConfig+0xe0>
 8010e8a:	f8d9 3000 	ldr.w	r3, [r9]
 8010e8e:	7801      	ldrb	r1, [r0, #0]
 8010e90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010e94:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010e98:	7a49      	ldrb	r1, [r1, #9]
 8010e9a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010e9e:	482d      	ldr	r0, [pc, #180]	; (8010f54 <RegionUS915TxConfig+0xe4>)
 8010ea0:	6800      	ldr	r0, [r0, #0]
 8010ea2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010ea6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010eaa:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8010eae:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8010eb2:	f7ff fce7 	bl	8010884 <LimitTxPower>
 8010eb6:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8010eb8:	4927      	ldr	r1, [pc, #156]	; (8010f58 <RegionUS915TxConfig+0xe8>)
 8010eba:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010ebe:	f7ff fc4f 	bl	8010760 <RegionCommonGetBandwidth>
 8010ec2:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	4925      	ldr	r1, [pc, #148]	; (8010f5c <RegionUS915TxConfig+0xec>)
 8010ec8:	4630      	mov	r0, r6
 8010eca:	f7ff fb61 	bl	8010590 <RegionCommonComputeTxPower>
 8010ece:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8010ed0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8010f60 <RegionUS915TxConfig+0xf0>
 8010ed4:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8010ed8:	f8d9 1000 	ldr.w	r1, [r9]
 8010edc:	7823      	ldrb	r3, [r4, #0]
 8010ede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010ee2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8010ee6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8010ee8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8010eec:	9308      	str	r3, [sp, #32]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	9207      	str	r2, [sp, #28]
 8010ef2:	9206      	str	r2, [sp, #24]
 8010ef4:	9205      	str	r2, [sp, #20]
 8010ef6:	2501      	movs	r5, #1
 8010ef8:	9504      	str	r5, [sp, #16]
 8010efa:	9203      	str	r2, [sp, #12]
 8010efc:	2308      	movs	r3, #8
 8010efe:	9302      	str	r3, [sp, #8]
 8010f00:	9501      	str	r5, [sp, #4]
 8010f02:	f8cd a000 	str.w	sl, [sp]
 8010f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8010f10:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8010f12:	f8d9 2000 	ldr.w	r2, [r9]
 8010f16:	7823      	ldrb	r3, [r4, #0]
 8010f18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f1c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8010f20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010f24:	f7ff fc50 	bl	80107c8 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8010f28:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8010f2c:	7b21      	ldrb	r1, [r4, #12]
 8010f2e:	4628      	mov	r0, r5
 8010f30:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8010f32:	89a1      	ldrh	r1, [r4, #12]
 8010f34:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010f38:	f7ff fc86 	bl	8010848 <GetTimeOnAir>
 8010f3c:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 8010f3e:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8010f42:	4628      	mov	r0, r5
 8010f44:	b00d      	add	sp, #52	; 0x34
 8010f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4a:	bf00      	nop
 8010f4c:	08019c70 	.word	0x08019c70
 8010f50:	20001580 	.word	0x20001580
 8010f54:	20001578 	.word	0x20001578
 8010f58:	08019c1c 	.word	0x08019c1c
 8010f5c:	41f00000 	.word	0x41f00000
 8010f60:	0801a22c 	.word	0x0801a22c

08010f64 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f68:	b091      	sub	sp, #68	; 0x44
 8010f6a:	4605      	mov	r5, r0
 8010f6c:	4688      	mov	r8, r1
 8010f6e:	4617      	mov	r7, r2
 8010f70:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8010f72:	2400      	movs	r4, #0
 8010f74:	940e      	str	r4, [sp, #56]	; 0x38
 8010f76:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8010f7a:	940b      	str	r4, [sp, #44]	; 0x2c
 8010f7c:	940c      	str	r4, [sp, #48]	; 0x30
 8010f7e:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8010f80:	4b9c      	ldr	r3, [pc, #624]	; (80111f4 <RegionUS915LinkAdrReq+0x290>)
 8010f82:	6819      	ldr	r1, [r3, #0]
 8010f84:	2206      	movs	r2, #6
 8010f86:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8010f8a:	a80b      	add	r0, sp, #44	; 0x2c
 8010f8c:	f7ff f995 	bl	80102ba <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010f90:	e00d      	b.n	8010fae <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8010f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f96:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8010f9a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8010f9e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 8010fa2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8010fa6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8010faa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010fae:	7a2b      	ldrb	r3, [r5, #8]
 8010fb0:	42a3      	cmp	r3, r4
 8010fb2:	f240 808b 	bls.w	80110cc <RegionUS915LinkAdrReq+0x168>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8010fb6:	6868      	ldr	r0, [r5, #4]
 8010fb8:	a90e      	add	r1, sp, #56	; 0x38
 8010fba:	4420      	add	r0, r4
 8010fbc:	f7ff fa2e 	bl	801041c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	f000 8082 	beq.w	80110cc <RegionUS915LinkAdrReq+0x168>
        bytesProcessed += nextIndex;
 8010fc8:	4423      	add	r3, r4
 8010fca:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 8010fcc:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 8010fd0:	f1bc 0f06 	cmp.w	ip, #6
 8010fd4:	d0dd      	beq.n	8010f92 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8010fd6:	f1bc 0f07 	cmp.w	ip, #7
 8010fda:	d00a      	beq.n	8010ff2 <RegionUS915LinkAdrReq+0x8e>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8010fdc:	f1bc 0f05 	cmp.w	ip, #5
 8010fe0:	d071      	beq.n	80110c6 <RegionUS915LinkAdrReq+0x162>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8010fe2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010fe6:	aa10      	add	r2, sp, #64	; 0x40
 8010fe8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8010fec:	f82c 3c14 	strh.w	r3, [ip, #-20]
 8010ff0:	e7dd      	b.n	8010fae <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8010ff8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8010ffc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 8011000:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011004:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8011008:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801100c:	e7cf      	b.n	8010fae <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 801100e:	aa10      	add	r2, sp, #64	; 0x40
 8011010:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011014:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011018:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801101c:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011020:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011024:	ea4c 0202 	orr.w	r2, ip, r2
 8011028:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                        cntChannelMask++;
 801102c:	3101      	adds	r1, #1
 801102e:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 8011030:	3301      	adds	r3, #1
 8011032:	b2db      	uxtb	r3, r3
 8011034:	2b07      	cmp	r3, #7
 8011036:	d8ba      	bhi.n	8010fae <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8011038:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801103c:	f04f 0c01 	mov.w	ip, #1
 8011040:	fa0c fc03 	lsl.w	ip, ip, r3
 8011044:	ea12 0f0c 	tst.w	r2, ip
 8011048:	d012      	beq.n	8011070 <RegionUS915LinkAdrReq+0x10c>
                    if( ( i % 2 ) == 0 )
 801104a:	f013 0f01 	tst.w	r3, #1
 801104e:	d1de      	bne.n	801100e <RegionUS915LinkAdrReq+0xaa>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8011050:	aa10      	add	r2, sp, #64	; 0x40
 8011052:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011056:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801105a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801105e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011062:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011066:	ea4c 0202 	orr.w	r2, ip, r2
 801106a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801106e:	e7df      	b.n	8011030 <RegionUS915LinkAdrReq+0xcc>
                    if( ( i % 2 ) == 0 )
 8011070:	f013 0f01 	tst.w	r3, #1
 8011074:	d113      	bne.n	801109e <RegionUS915LinkAdrReq+0x13a>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8011076:	aa10      	add	r2, sp, #64	; 0x40
 8011078:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 801107c:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011080:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8011084:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8011088:	ea6f 0c0c 	mvn.w	ip, ip
 801108c:	fa0f fc8c 	sxth.w	ip, ip
 8011090:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011094:	ea0c 0c02 	and.w	ip, ip, r2
 8011098:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
 801109c:	e7c8      	b.n	8011030 <RegionUS915LinkAdrReq+0xcc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 801109e:	aa10      	add	r2, sp, #64	; 0x40
 80110a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80110a4:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 80110a8:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 80110ac:	ea6f 0c0c 	mvn.w	ip, ip
 80110b0:	fa0f fc8c 	sxth.w	ip, ip
 80110b4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80110b8:	ea0c 0c02 	and.w	ip, ip, r2
 80110bc:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                        cntChannelMask++;
 80110c0:	3101      	adds	r1, #1
 80110c2:	b2c9      	uxtb	r1, r1
 80110c4:	e7b4      	b.n	8011030 <RegionUS915LinkAdrReq+0xcc>
            for( uint8_t i = 0; i <= 7; i++ )
 80110c6:	2300      	movs	r3, #0
            uint8_t cntChannelMask = 0;
 80110c8:	4619      	mov	r1, r3
 80110ca:	e7b3      	b.n	8011034 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80110cc:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 80110d0:	2b03      	cmp	r3, #3
 80110d2:	dd58      	ble.n	8011186 <RegionUS915LinkAdrReq+0x222>
 80110d4:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80110d8:	2302      	movs	r3, #2
 80110da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80110de:	7a6b      	ldrb	r3, [r5, #9]
 80110e0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 80110e4:	a809      	add	r0, sp, #36	; 0x24
 80110e6:	f7ff fbe9 	bl	80108bc <RegionUS915GetPhyParam>
 80110ea:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 80110ec:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80110f0:	7aab      	ldrb	r3, [r5, #10]
 80110f2:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80110f6:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 80110fa:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80110fe:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011102:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8011106:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801110a:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801110e:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8011112:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8011116:	f995 300c 	ldrsb.w	r3, [r5, #12]
 801111a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801111e:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8011122:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8011126:	2348      	movs	r3, #72	; 0x48
 8011128:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801112c:	ab0b      	add	r3, sp, #44	; 0x2c
 801112e:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011130:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8011134:	2304      	movs	r3, #4
 8011136:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801113a:	4b2e      	ldr	r3, [pc, #184]	; (80111f4 <RegionUS915LinkAdrReq+0x290>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8011140:	230e      	movs	r3, #14
 8011142:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8011146:	2300      	movs	r3, #0
 8011148:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801114c:	682b      	ldr	r3, [r5, #0]
 801114e:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011150:	ab0e      	add	r3, sp, #56	; 0x38
 8011152:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8011156:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 801115a:	4668      	mov	r0, sp
 801115c:	f7ff f97c 	bl	8010458 <RegionCommonLinkAdrReqVerifyParams>
 8011160:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011162:	2807      	cmp	r0, #7
 8011164:	d01c      	beq.n	80111a0 <RegionUS915LinkAdrReq+0x23c>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011166:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801116a:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 801116e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011172:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8011174:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8011178:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 801117a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801117c:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 801117e:	4628      	mov	r0, r5
 8011180:	b011      	add	sp, #68	; 0x44
 8011182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011186:	2204      	movs	r2, #4
 8011188:	2100      	movs	r1, #0
 801118a:	a80b      	add	r0, sp, #44	; 0x2c
 801118c:	f7ff f87f 	bl	801028e <RegionCommonCountChannels>
 8011190:	2801      	cmp	r0, #1
 8011192:	d902      	bls.n	801119a <RegionUS915LinkAdrReq+0x236>
 8011194:	f04f 0907 	mov.w	r9, #7
 8011198:	e79e      	b.n	80110d8 <RegionUS915LinkAdrReq+0x174>
        status &= 0xFE; // Channel mask KO
 801119a:	f04f 0906 	mov.w	r9, #6
 801119e:	e79b      	b.n	80110d8 <RegionUS915LinkAdrReq+0x174>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80111a0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80111f4 <RegionUS915LinkAdrReq+0x290>
 80111a4:	f8d9 0000 	ldr.w	r0, [r9]
 80111a8:	2206      	movs	r2, #6
 80111aa:	a90b      	add	r1, sp, #44	; 0x2c
 80111ac:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80111b0:	f7ff f883 	bl	80102ba <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80111b4:	4b10      	ldr	r3, [pc, #64]	; (80111f8 <RegionUS915LinkAdrReq+0x294>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f8d9 2000 	ldr.w	r2, [r9]
 80111bc:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 80111c0:	8818      	ldrh	r0, [r3, #0]
 80111c2:	4001      	ands	r1, r0
 80111c4:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80111c6:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 80111ca:	8858      	ldrh	r0, [r3, #2]
 80111cc:	4001      	ands	r1, r0
 80111ce:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 80111d0:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 80111d4:	8898      	ldrh	r0, [r3, #4]
 80111d6:	4001      	ands	r1, r0
 80111d8:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 80111da:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 80111de:	88d8      	ldrh	r0, [r3, #6]
 80111e0:	4001      	ands	r1, r0
 80111e2:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80111e4:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 80111e8:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 80111ea:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 80111ee:	815a      	strh	r2, [r3, #10]
 80111f0:	e7b9      	b.n	8011166 <RegionUS915LinkAdrReq+0x202>
 80111f2:	bf00      	nop
 80111f4:	20001580 	.word	0x20001580
 80111f8:	2000157c 	.word	0x2000157c

080111fc <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80111fc:	b538      	push	{r3, r4, r5, lr}
 80111fe:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011200:	6840      	ldr	r0, [r0, #4]
 8011202:	f7ff faf1 	bl	80107e8 <VerifyRfFreq>
 8011206:	b310      	cbz	r0, 801124e <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8011208:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801120a:	220d      	movs	r2, #13
 801120c:	2108      	movs	r1, #8
 801120e:	f994 0000 	ldrsb.w	r0, [r4]
 8011212:	f7fe ffde 	bl	80101d2 <RegionCommonValueInRange>
 8011216:	b908      	cbnz	r0, 801121c <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8011218:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801121c:	2207      	movs	r2, #7
 801121e:	2105      	movs	r1, #5
 8011220:	f994 0000 	ldrsb.w	r0, [r4]
 8011224:	f7fe ffd5 	bl	80101d2 <RegionCommonValueInRange>
 8011228:	2801      	cmp	r0, #1
 801122a:	d003      	beq.n	8011234 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801122c:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8011230:	2b0d      	cmp	r3, #13
 8011232:	dd01      	ble.n	8011238 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 8011234:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8011238:	2203      	movs	r2, #3
 801123a:	2100      	movs	r1, #0
 801123c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011240:	f7fe ffc7 	bl	80101d2 <RegionCommonValueInRange>
 8011244:	b908      	cbnz	r0, 801124a <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011246:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 801124a:	4628      	mov	r0, r5
 801124c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801124e:	2506      	movs	r5, #6
 8011250:	e7db      	b.n	801120a <RegionUS915RxParamSetupReq+0xe>

08011252 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011256:	4770      	bx	lr

08011258 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8011258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801125c:	4770      	bx	lr

0801125e <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 801125e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011262:	4770      	bx	lr

08011264 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8011264:	b999      	cbnz	r1, 801128e <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8011266:	4b0e      	ldr	r3, [pc, #56]	; (80112a0 <RegionUS915AlternateDr+0x3c>)
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	7b53      	ldrb	r3, [r2, #13]
 801126c:	3301      	adds	r3, #1
 801126e:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8011270:	4b0b      	ldr	r3, [pc, #44]	; (80112a0 <RegionUS915AlternateDr+0x3c>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	7b5a      	ldrb	r2, [r3, #13]
 8011276:	4b0b      	ldr	r3, [pc, #44]	; (80112a4 <RegionUS915AlternateDr+0x40>)
 8011278:	fba3 1302 	umull	r1, r3, r3, r2
 801127c:	085b      	lsrs	r3, r3, #1
 801127e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8011282:	1ad2      	subs	r2, r2, r3
 8011284:	f012 0fff 	tst.w	r2, #255	; 0xff
 8011288:	d007      	beq.n	801129a <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 801128a:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 801128c:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 801128e:	4b04      	ldr	r3, [pc, #16]	; (80112a0 <RegionUS915AlternateDr+0x3c>)
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	7b53      	ldrb	r3, [r2, #13]
 8011294:	3b01      	subs	r3, #1
 8011296:	7353      	strb	r3, [r2, #13]
 8011298:	e7ea      	b.n	8011270 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 801129a:	2004      	movs	r0, #4
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop
 80112a0:	2000157c 	.word	0x2000157c
 80112a4:	38e38e39 	.word	0x38e38e39

080112a8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80112a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	b0a4      	sub	sp, #144	; 0x90
 80112ae:	4604      	mov	r4, r0
 80112b0:	460e      	mov	r6, r1
 80112b2:	4690      	mov	r8, r2
 80112b4:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 80112b6:	2500      	movs	r5, #0
 80112b8:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 80112bc:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 80112c0:	9511      	str	r5, [sp, #68]	; 0x44
 80112c2:	2244      	movs	r2, #68	; 0x44
 80112c4:	4629      	mov	r1, r5
 80112c6:	a812      	add	r0, sp, #72	; 0x48
 80112c8:	f005 f9fc 	bl	80166c4 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 80112cc:	2204      	movs	r2, #4
 80112ce:	4629      	mov	r1, r5
 80112d0:	4b49      	ldr	r3, [pc, #292]	; (80113f8 <RegionUS915NextChannel+0x150>)
 80112d2:	6818      	ldr	r0, [r3, #0]
 80112d4:	f7fe ffdb 	bl	801028e <RegionCommonCountChannels>
 80112d8:	2800      	cmp	r0, #0
 80112da:	d052      	beq.n	8011382 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 80112dc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80112e0:	2b03      	cmp	r3, #3
 80112e2:	dd08      	ble.n	80112f6 <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 80112e4:	4b44      	ldr	r3, [pc, #272]	; (80113f8 <RegionUS915NextChannel+0x150>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	7a1a      	ldrb	r2, [r3, #8]
 80112ea:	b922      	cbnz	r2, 80112f6 <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80112ec:	4a43      	ldr	r2, [pc, #268]	; (80113fc <RegionUS915NextChannel+0x154>)
 80112ee:	6812      	ldr	r2, [r2, #0]
 80112f0:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 80112f4:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80112f6:	7a63      	ldrb	r3, [r4, #9]
 80112f8:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80112fc:	7a23      	ldrb	r3, [r4, #8]
 80112fe:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8011302:	4b3d      	ldr	r3, [pc, #244]	; (80113f8 <RegionUS915NextChannel+0x150>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8011308:	4b3c      	ldr	r3, [pc, #240]	; (80113fc <RegionUS915NextChannel+0x154>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801130e:	4b3c      	ldr	r3, [pc, #240]	; (8011400 <RegionUS915NextChannel+0x158>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8011314:	2348      	movs	r3, #72	; 0x48
 8011316:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 801131a:	2300      	movs	r3, #0
 801131c:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801131e:	6823      	ldr	r3, [r4, #0]
 8011320:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011322:	6863      	ldr	r3, [r4, #4]
 8011324:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8011326:	7aa3      	ldrb	r3, [r4, #10]
 8011328:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801132c:	2301      	movs	r3, #1
 801132e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011332:	ab03      	add	r3, sp, #12
 8011334:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011336:	ab0c      	add	r3, sp, #48	; 0x30
 8011338:	f104 020c 	add.w	r2, r4, #12
 801133c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011340:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011344:	7d23      	ldrb	r3, [r4, #20]
 8011346:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801134a:	8ae1      	ldrh	r1, [r4, #22]
 801134c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011350:	f7ff fa7a 	bl	8010848 <GetTimeOnAir>
 8011354:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8011356:	f8cd 8004 	str.w	r8, [sp, #4]
 801135a:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 801135e:	9300      	str	r3, [sp, #0]
 8011360:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 8011364:	aa11      	add	r2, sp, #68	; 0x44
 8011366:	4639      	mov	r1, r7
 8011368:	a809      	add	r0, sp, #36	; 0x24
 801136a:	f7ff f98c 	bl	8010686 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801136e:	4605      	mov	r5, r0
 8011370:	2800      	cmp	r0, #0
 8011372:	d13c      	bne.n	80113ee <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 8011374:	7a63      	ldrb	r3, [r4, #9]
 8011376:	b98b      	cbnz	r3, 801139c <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8011378:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801137c:	b1db      	cbz	r3, 80113b6 <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801137e:	4603      	mov	r3, r0
 8011380:	e026      	b.n	80113d0 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8011382:	4d1d      	ldr	r5, [pc, #116]	; (80113f8 <RegionUS915NextChannel+0x150>)
 8011384:	4b1d      	ldr	r3, [pc, #116]	; (80113fc <RegionUS915NextChannel+0x154>)
 8011386:	6819      	ldr	r1, [r3, #0]
 8011388:	2204      	movs	r2, #4
 801138a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801138e:	6828      	ldr	r0, [r5, #0]
 8011390:	f7fe ff93 	bl	80102ba <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	2200      	movs	r2, #0
 8011398:	731a      	strb	r2, [r3, #12]
 801139a:	e79f      	b.n	80112dc <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801139c:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 80113a0:	3901      	subs	r1, #1
 80113a2:	f000 ff5f 	bl	8012264 <randr>
 80113a6:	f100 0390 	add.w	r3, r0, #144	; 0x90
 80113aa:	eb0d 0003 	add.w	r0, sp, r3
 80113ae:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 80113b2:	7033      	strb	r3, [r6, #0]
 80113b4:	e015      	b.n	80113e2 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80113b6:	4b10      	ldr	r3, [pc, #64]	; (80113f8 <RegionUS915NextChannel+0x150>)
 80113b8:	6818      	ldr	r0, [r3, #0]
 80113ba:	4632      	mov	r2, r6
 80113bc:	f100 010c 	add.w	r1, r0, #12
 80113c0:	f7fe fdea 	bl	800ff98 <RegionBaseUSComputeNext125kHzJoinChannel>
 80113c4:	2803      	cmp	r0, #3
 80113c6:	d10c      	bne.n	80113e2 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 80113c8:	4605      	mov	r5, r0
 80113ca:	e010      	b.n	80113ee <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 80113cc:	3301      	adds	r3, #1
 80113ce:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80113d0:	4a09      	ldr	r2, [pc, #36]	; (80113f8 <RegionUS915NextChannel+0x150>)
 80113d2:	6812      	ldr	r2, [r2, #0]
 80113d4:	7a10      	ldrb	r0, [r2, #8]
 80113d6:	4118      	asrs	r0, r3
 80113d8:	f010 0f01 	tst.w	r0, #1
 80113dc:	d0f6      	beq.n	80113cc <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 80113de:	3340      	adds	r3, #64	; 0x40
 80113e0:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 80113e2:	2248      	movs	r2, #72	; 0x48
 80113e4:	7831      	ldrb	r1, [r6, #0]
 80113e6:	4b04      	ldr	r3, [pc, #16]	; (80113f8 <RegionUS915NextChannel+0x150>)
 80113e8:	6818      	ldr	r0, [r3, #0]
 80113ea:	f7fe ff34 	bl	8010256 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 80113ee:	4628      	mov	r0, r5
 80113f0:	b024      	add	sp, #144	; 0x90
 80113f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f6:	bf00      	nop
 80113f8:	2000157c 	.word	0x2000157c
 80113fc:	20001580 	.word	0x20001580
 8011400:	20001578 	.word	0x20001578

08011404 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8011404:	4b04      	ldr	r3, [pc, #16]	; (8011418 <RegionUS915ApplyDrOffset+0x14>)
 8011406:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801140a:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 801140c:	2800      	cmp	r0, #0
 801140e:	db01      	blt.n	8011414 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 8011410:	b2c0      	uxtb	r0, r0
 8011412:	4770      	bx	lr
        datarate = DR_0;
 8011414:	2000      	movs	r0, #0
 8011416:	e7fb      	b.n	8011410 <RegionUS915ApplyDrOffset+0xc>
 8011418:	08019c5c 	.word	0x08019c5c

0801141c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 801141c:	b510      	push	{r4, lr}
 801141e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8011420:	2210      	movs	r2, #16
 8011422:	2100      	movs	r1, #0
 8011424:	30f1      	adds	r0, #241	; 0xf1
 8011426:	f000 ff42 	bl	80122ae <memset1>
    ctx->M_n = 0;
 801142a:	2100      	movs	r1, #0
 801142c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8011430:	22f0      	movs	r2, #240	; 0xf0
 8011432:	4620      	mov	r0, r4
 8011434:	f000 ff3b 	bl	80122ae <memset1>
}
 8011438:	bd10      	pop	{r4, pc}

0801143a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 801143a:	b508      	push	{r3, lr}
 801143c:	4602      	mov	r2, r0
 801143e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8011440:	2110      	movs	r1, #16
 8011442:	f000 fb3b 	bl	8011abc <lorawan_aes_set_key>
}
 8011446:	bd08      	pop	{r3, pc}

08011448 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8011448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801144c:	b084      	sub	sp, #16
 801144e:	4604      	mov	r4, r0
 8011450:	460d      	mov	r5, r1
 8011452:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8011454:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8011458:	2b00      	cmp	r3, #0
 801145a:	d054      	beq.n	8011506 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 801145c:	f1c3 0810 	rsb	r8, r3, #16
 8011460:	4647      	mov	r7, r8
 8011462:	4590      	cmp	r8, r2
 8011464:	bf28      	it	cs
 8011466:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8011468:	f200 1001 	addw	r0, r0, #257	; 0x101
 801146c:	b2ba      	uxth	r2, r7
 801146e:	4418      	add	r0, r3
 8011470:	f000 ff05 	bl	801227e <memcpy1>
        ctx->M_n += mlen;
 8011474:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8011478:	443b      	add	r3, r7
 801147a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 801147e:	2b0f      	cmp	r3, #15
 8011480:	d94d      	bls.n	801151e <AES_CMAC_Update+0xd6>
 8011482:	45b0      	cmp	r8, r6
 8011484:	d24b      	bcs.n	801151e <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 8011486:	2300      	movs	r3, #0
 8011488:	e008      	b.n	801149c <AES_CMAC_Update+0x54>
 801148a:	18e2      	adds	r2, r4, r3
 801148c:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8011490:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8011494:	4041      	eors	r1, r0
 8011496:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 801149a:	3301      	adds	r3, #1
 801149c:	2b0f      	cmp	r3, #15
 801149e:	ddf4      	ble.n	801148a <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80114a0:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 80114a4:	2210      	movs	r2, #16
 80114a6:	4641      	mov	r1, r8
 80114a8:	4668      	mov	r0, sp
 80114aa:	f000 fee8 	bl	801227e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80114ae:	4622      	mov	r2, r4
 80114b0:	4669      	mov	r1, sp
 80114b2:	4668      	mov	r0, sp
 80114b4:	f000 fb86 	bl	8011bc4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80114b8:	2210      	movs	r2, #16
 80114ba:	4669      	mov	r1, sp
 80114bc:	4640      	mov	r0, r8
 80114be:	f000 fede 	bl	801227e <memcpy1>

        data += mlen;
 80114c2:	443d      	add	r5, r7
        len -= mlen;
 80114c4:	1bf6      	subs	r6, r6, r7
 80114c6:	e01e      	b.n	8011506 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 80114c8:	eb04 0e03 	add.w	lr, r4, r3
 80114cc:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 80114d0:	5cea      	ldrb	r2, [r5, r3]
 80114d2:	ea8c 0c02 	eor.w	ip, ip, r2
 80114d6:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 80114da:	3301      	adds	r3, #1
 80114dc:	2b0f      	cmp	r3, #15
 80114de:	ddf3      	ble.n	80114c8 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80114e0:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 80114e4:	2210      	movs	r2, #16
 80114e6:	4639      	mov	r1, r7
 80114e8:	4668      	mov	r0, sp
 80114ea:	f000 fec8 	bl	801227e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80114ee:	4622      	mov	r2, r4
 80114f0:	4669      	mov	r1, sp
 80114f2:	4668      	mov	r0, sp
 80114f4:	f000 fb66 	bl	8011bc4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80114f8:	2210      	movs	r2, #16
 80114fa:	4669      	mov	r1, sp
 80114fc:	4638      	mov	r0, r7
 80114fe:	f000 febe 	bl	801227e <memcpy1>

        data += 16;
 8011502:	3510      	adds	r5, #16
        len -= 16;
 8011504:	3e10      	subs	r6, #16
    while( len > 16 )
 8011506:	2e10      	cmp	r6, #16
 8011508:	d901      	bls.n	801150e <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 801150a:	2300      	movs	r3, #0
 801150c:	e7e6      	b.n	80114dc <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801150e:	b2b2      	uxth	r2, r6
 8011510:	4629      	mov	r1, r5
 8011512:	f204 1001 	addw	r0, r4, #257	; 0x101
 8011516:	f000 feb2 	bl	801227e <memcpy1>
    ctx->M_n = len;
 801151a:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 801151e:	b004      	add	sp, #16
 8011520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011524 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8011524:	b530      	push	{r4, r5, lr}
 8011526:	b089      	sub	sp, #36	; 0x24
 8011528:	4605      	mov	r5, r0
 801152a:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 801152c:	2210      	movs	r2, #16
 801152e:	2100      	movs	r1, #0
 8011530:	eb0d 0002 	add.w	r0, sp, r2
 8011534:	f000 febb 	bl	80122ae <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8011538:	4622      	mov	r2, r4
 801153a:	a904      	add	r1, sp, #16
 801153c:	4608      	mov	r0, r1
 801153e:	f000 fb41 	bl	8011bc4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8011542:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8011546:	2b00      	cmp	r3, #0
 8011548:	db01      	blt.n	801154e <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 801154a:	2300      	movs	r3, #0
 801154c:	e030      	b.n	80115b0 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 801154e:	2300      	movs	r3, #0
 8011550:	2b0e      	cmp	r3, #14
 8011552:	dc11      	bgt.n	8011578 <AES_CMAC_Final+0x54>
 8011554:	f103 0220 	add.w	r2, r3, #32
 8011558:	eb0d 0102 	add.w	r1, sp, r2
 801155c:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8011560:	3301      	adds	r3, #1
 8011562:	f103 0220 	add.w	r2, r3, #32
 8011566:	446a      	add	r2, sp
 8011568:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801156c:	09d2      	lsrs	r2, r2, #7
 801156e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8011572:	f801 2c10 	strb.w	r2, [r1, #-16]
 8011576:	e7eb      	b.n	8011550 <AES_CMAC_Final+0x2c>
 8011578:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	b2db      	uxtb	r3, r3
 8011580:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 8011584:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8011588:	f88d 301f 	strb.w	r3, [sp, #31]
 801158c:	e017      	b.n	80115be <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 801158e:	f103 0220 	add.w	r2, r3, #32
 8011592:	eb0d 0102 	add.w	r1, sp, r2
 8011596:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801159a:	3301      	adds	r3, #1
 801159c:	f103 0220 	add.w	r2, r3, #32
 80115a0:	446a      	add	r2, sp
 80115a2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80115a6:	09d2      	lsrs	r2, r2, #7
 80115a8:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80115ac:	f801 2c10 	strb.w	r2, [r1, #-16]
 80115b0:	2b0e      	cmp	r3, #14
 80115b2:	ddec      	ble.n	801158e <AES_CMAC_Final+0x6a>
 80115b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80115b8:	005b      	lsls	r3, r3, #1
 80115ba:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 80115be:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 80115c2:	2810      	cmp	r0, #16
 80115c4:	d014      	beq.n	80115f0 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 80115c6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	db30      	blt.n	8011630 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 80115ce:	2300      	movs	r3, #0
 80115d0:	e041      	b.n	8011656 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 80115d2:	18e1      	adds	r1, r4, r3
 80115d4:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80115d8:	f103 0020 	add.w	r0, r3, #32
 80115dc:	4468      	add	r0, sp
 80115de:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80115e2:	4042      	eors	r2, r0
 80115e4:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80115e8:	3301      	adds	r3, #1
 80115ea:	2b0f      	cmp	r3, #15
 80115ec:	ddf1      	ble.n	80115d2 <AES_CMAC_Final+0xae>
 80115ee:	e059      	b.n	80116a4 <AES_CMAC_Final+0x180>
 80115f0:	2300      	movs	r3, #0
 80115f2:	e7fa      	b.n	80115ea <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 80115f4:	f103 0220 	add.w	r2, r3, #32
 80115f8:	eb0d 0102 	add.w	r1, sp, r2
 80115fc:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8011600:	3301      	adds	r3, #1
 8011602:	f103 0220 	add.w	r2, r3, #32
 8011606:	446a      	add	r2, sp
 8011608:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801160c:	09d2      	lsrs	r2, r2, #7
 801160e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8011612:	f801 2c10 	strb.w	r2, [r1, #-16]
 8011616:	2b0e      	cmp	r3, #14
 8011618:	ddec      	ble.n	80115f4 <AES_CMAC_Final+0xd0>
 801161a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801161e:	005b      	lsls	r3, r3, #1
 8011620:	b2db      	uxtb	r3, r3
 8011622:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 8011626:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 801162a:	f88d 301f 	strb.w	r3, [sp, #31]
 801162e:	e019      	b.n	8011664 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 8011630:	2300      	movs	r3, #0
 8011632:	e7f0      	b.n	8011616 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 8011634:	f103 0220 	add.w	r2, r3, #32
 8011638:	eb0d 0102 	add.w	r1, sp, r2
 801163c:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8011640:	3301      	adds	r3, #1
 8011642:	f103 0220 	add.w	r2, r3, #32
 8011646:	446a      	add	r2, sp
 8011648:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801164c:	09d2      	lsrs	r2, r2, #7
 801164e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8011652:	f801 2c10 	strb.w	r2, [r1, #-16]
 8011656:	2b0e      	cmp	r3, #14
 8011658:	ddec      	ble.n	8011634 <AES_CMAC_Final+0x110>
 801165a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801165e:	005b      	lsls	r3, r3, #1
 8011660:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8011664:	4420      	add	r0, r4
 8011666:	2380      	movs	r3, #128	; 0x80
 8011668:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 801166c:	e003      	b.n	8011676 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 801166e:	4423      	add	r3, r4
 8011670:	2200      	movs	r2, #0
 8011672:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8011676:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 801167a:	3301      	adds	r3, #1
 801167c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8011680:	2b0f      	cmp	r3, #15
 8011682:	d9f4      	bls.n	801166e <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8011684:	2300      	movs	r3, #0
 8011686:	e00b      	b.n	80116a0 <AES_CMAC_Final+0x17c>
 8011688:	18e1      	adds	r1, r4, r3
 801168a:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801168e:	f103 0020 	add.w	r0, r3, #32
 8011692:	4468      	add	r0, sp
 8011694:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8011698:	4042      	eors	r2, r0
 801169a:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801169e:	3301      	adds	r3, #1
 80116a0:	2b0f      	cmp	r3, #15
 80116a2:	ddf1      	ble.n	8011688 <AES_CMAC_Final+0x164>
 80116a4:	2300      	movs	r3, #0
 80116a6:	e009      	b.n	80116bc <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 80116a8:	18e2      	adds	r2, r4, r3
 80116aa:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 80116ae:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 80116b2:	ea8c 0c01 	eor.w	ip, ip, r1
 80116b6:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 80116ba:	3301      	adds	r3, #1
 80116bc:	2b0f      	cmp	r3, #15
 80116be:	ddf3      	ble.n	80116a8 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80116c0:	2210      	movs	r2, #16
 80116c2:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 80116c6:	4668      	mov	r0, sp
 80116c8:	f000 fdd9 	bl	801227e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 80116cc:	4622      	mov	r2, r4
 80116ce:	4629      	mov	r1, r5
 80116d0:	4668      	mov	r0, sp
 80116d2:	f000 fa77 	bl	8011bc4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 80116d6:	2210      	movs	r2, #16
 80116d8:	2100      	movs	r1, #0
 80116da:	eb0d 0002 	add.w	r0, sp, r2
 80116de:	f000 fde6 	bl	80122ae <memset1>
}
 80116e2:	b009      	add	sp, #36	; 0x24
 80116e4:	bd30      	pop	{r4, r5, pc}

080116e6 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80116e6:	780b      	ldrb	r3, [r1, #0]
 80116e8:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80116ea:	784b      	ldrb	r3, [r1, #1]
 80116ec:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80116ee:	788b      	ldrb	r3, [r1, #2]
 80116f0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80116f2:	78cb      	ldrb	r3, [r1, #3]
 80116f4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80116f6:	790b      	ldrb	r3, [r1, #4]
 80116f8:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80116fa:	794b      	ldrb	r3, [r1, #5]
 80116fc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80116fe:	798b      	ldrb	r3, [r1, #6]
 8011700:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8011702:	79cb      	ldrb	r3, [r1, #7]
 8011704:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8011706:	7a0b      	ldrb	r3, [r1, #8]
 8011708:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 801170a:	7a4b      	ldrb	r3, [r1, #9]
 801170c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801170e:	7a8b      	ldrb	r3, [r1, #10]
 8011710:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8011712:	7acb      	ldrb	r3, [r1, #11]
 8011714:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8011716:	7b0b      	ldrb	r3, [r1, #12]
 8011718:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 801171a:	7b4b      	ldrb	r3, [r1, #13]
 801171c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 801171e:	7b8b      	ldrb	r3, [r1, #14]
 8011720:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8011722:	7bcb      	ldrb	r3, [r1, #15]
 8011724:	73c3      	strb	r3, [r0, #15]
#endif
}
 8011726:	4770      	bx	lr

08011728 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8011728:	e004      	b.n	8011734 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 801172a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801172e:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8011732:	461a      	mov	r2, r3
 8011734:	1e53      	subs	r3, r2, #1
 8011736:	b2db      	uxtb	r3, r3
 8011738:	2a00      	cmp	r2, #0
 801173a:	d1f6      	bne.n	801172a <copy_block_nn+0x2>
}
 801173c:	4770      	bx	lr

0801173e <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 801173e:	780b      	ldrb	r3, [r1, #0]
 8011740:	7802      	ldrb	r2, [r0, #0]
 8011742:	4053      	eors	r3, r2
 8011744:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8011746:	784b      	ldrb	r3, [r1, #1]
 8011748:	7842      	ldrb	r2, [r0, #1]
 801174a:	4053      	eors	r3, r2
 801174c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 801174e:	788b      	ldrb	r3, [r1, #2]
 8011750:	7882      	ldrb	r2, [r0, #2]
 8011752:	4053      	eors	r3, r2
 8011754:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8011756:	78cb      	ldrb	r3, [r1, #3]
 8011758:	78c2      	ldrb	r2, [r0, #3]
 801175a:	4053      	eors	r3, r2
 801175c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 801175e:	790b      	ldrb	r3, [r1, #4]
 8011760:	7902      	ldrb	r2, [r0, #4]
 8011762:	4053      	eors	r3, r2
 8011764:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8011766:	794b      	ldrb	r3, [r1, #5]
 8011768:	7942      	ldrb	r2, [r0, #5]
 801176a:	4053      	eors	r3, r2
 801176c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 801176e:	798b      	ldrb	r3, [r1, #6]
 8011770:	7982      	ldrb	r2, [r0, #6]
 8011772:	4053      	eors	r3, r2
 8011774:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8011776:	79cb      	ldrb	r3, [r1, #7]
 8011778:	79c2      	ldrb	r2, [r0, #7]
 801177a:	4053      	eors	r3, r2
 801177c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 801177e:	7a0b      	ldrb	r3, [r1, #8]
 8011780:	7a02      	ldrb	r2, [r0, #8]
 8011782:	4053      	eors	r3, r2
 8011784:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8011786:	7a4b      	ldrb	r3, [r1, #9]
 8011788:	7a42      	ldrb	r2, [r0, #9]
 801178a:	4053      	eors	r3, r2
 801178c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 801178e:	7a8b      	ldrb	r3, [r1, #10]
 8011790:	7a82      	ldrb	r2, [r0, #10]
 8011792:	4053      	eors	r3, r2
 8011794:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8011796:	7acb      	ldrb	r3, [r1, #11]
 8011798:	7ac2      	ldrb	r2, [r0, #11]
 801179a:	4053      	eors	r3, r2
 801179c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 801179e:	7b0b      	ldrb	r3, [r1, #12]
 80117a0:	7b02      	ldrb	r2, [r0, #12]
 80117a2:	4053      	eors	r3, r2
 80117a4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80117a6:	7b4b      	ldrb	r3, [r1, #13]
 80117a8:	7b42      	ldrb	r2, [r0, #13]
 80117aa:	4053      	eors	r3, r2
 80117ac:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80117ae:	7b8b      	ldrb	r3, [r1, #14]
 80117b0:	7b82      	ldrb	r2, [r0, #14]
 80117b2:	4053      	eors	r3, r2
 80117b4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80117b6:	7bcb      	ldrb	r3, [r1, #15]
 80117b8:	7bc2      	ldrb	r2, [r0, #15]
 80117ba:	4053      	eors	r3, r2
 80117bc:	73c3      	strb	r3, [r0, #15]
#endif
}
 80117be:	4770      	bx	lr

080117c0 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80117c0:	780b      	ldrb	r3, [r1, #0]
 80117c2:	f892 c000 	ldrb.w	ip, [r2]
 80117c6:	ea83 030c 	eor.w	r3, r3, ip
 80117ca:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80117cc:	784b      	ldrb	r3, [r1, #1]
 80117ce:	f892 c001 	ldrb.w	ip, [r2, #1]
 80117d2:	ea83 030c 	eor.w	r3, r3, ip
 80117d6:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80117d8:	788b      	ldrb	r3, [r1, #2]
 80117da:	f892 c002 	ldrb.w	ip, [r2, #2]
 80117de:	ea83 030c 	eor.w	r3, r3, ip
 80117e2:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80117e4:	78cb      	ldrb	r3, [r1, #3]
 80117e6:	f892 c003 	ldrb.w	ip, [r2, #3]
 80117ea:	ea83 030c 	eor.w	r3, r3, ip
 80117ee:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80117f0:	790b      	ldrb	r3, [r1, #4]
 80117f2:	f892 c004 	ldrb.w	ip, [r2, #4]
 80117f6:	ea83 030c 	eor.w	r3, r3, ip
 80117fa:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80117fc:	794b      	ldrb	r3, [r1, #5]
 80117fe:	f892 c005 	ldrb.w	ip, [r2, #5]
 8011802:	ea83 030c 	eor.w	r3, r3, ip
 8011806:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8011808:	798b      	ldrb	r3, [r1, #6]
 801180a:	f892 c006 	ldrb.w	ip, [r2, #6]
 801180e:	ea83 030c 	eor.w	r3, r3, ip
 8011812:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8011814:	79cb      	ldrb	r3, [r1, #7]
 8011816:	f892 c007 	ldrb.w	ip, [r2, #7]
 801181a:	ea83 030c 	eor.w	r3, r3, ip
 801181e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8011820:	7a0b      	ldrb	r3, [r1, #8]
 8011822:	f892 c008 	ldrb.w	ip, [r2, #8]
 8011826:	ea83 030c 	eor.w	r3, r3, ip
 801182a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 801182c:	7a4b      	ldrb	r3, [r1, #9]
 801182e:	f892 c009 	ldrb.w	ip, [r2, #9]
 8011832:	ea83 030c 	eor.w	r3, r3, ip
 8011836:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8011838:	7a8b      	ldrb	r3, [r1, #10]
 801183a:	f892 c00a 	ldrb.w	ip, [r2, #10]
 801183e:	ea83 030c 	eor.w	r3, r3, ip
 8011842:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8011844:	7acb      	ldrb	r3, [r1, #11]
 8011846:	f892 c00b 	ldrb.w	ip, [r2, #11]
 801184a:	ea83 030c 	eor.w	r3, r3, ip
 801184e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8011850:	7b0b      	ldrb	r3, [r1, #12]
 8011852:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8011856:	ea83 030c 	eor.w	r3, r3, ip
 801185a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 801185c:	7b4b      	ldrb	r3, [r1, #13]
 801185e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8011862:	ea83 030c 	eor.w	r3, r3, ip
 8011866:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8011868:	7b8b      	ldrb	r3, [r1, #14]
 801186a:	f892 c00e 	ldrb.w	ip, [r2, #14]
 801186e:	ea83 030c 	eor.w	r3, r3, ip
 8011872:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8011874:	7bcb      	ldrb	r3, [r1, #15]
 8011876:	7bd2      	ldrb	r2, [r2, #15]
 8011878:	4053      	eors	r3, r2
 801187a:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 801187c:	4770      	bx	lr

0801187e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 801187e:	b508      	push	{r3, lr}
    xor_block(d, k);
 8011880:	f7ff ff5d 	bl	801173e <xor_block>
}
 8011884:	bd08      	pop	{r3, pc}
	...

08011888 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8011888:	7802      	ldrb	r2, [r0, #0]
 801188a:	4b18      	ldr	r3, [pc, #96]	; (80118ec <shift_sub_rows+0x64>)
 801188c:	5c9a      	ldrb	r2, [r3, r2]
 801188e:	7002      	strb	r2, [r0, #0]
 8011890:	7902      	ldrb	r2, [r0, #4]
 8011892:	5c9a      	ldrb	r2, [r3, r2]
 8011894:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8011896:	7a02      	ldrb	r2, [r0, #8]
 8011898:	5c9a      	ldrb	r2, [r3, r2]
 801189a:	7202      	strb	r2, [r0, #8]
 801189c:	7b02      	ldrb	r2, [r0, #12]
 801189e:	5c9a      	ldrb	r2, [r3, r2]
 80118a0:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80118a2:	7842      	ldrb	r2, [r0, #1]
 80118a4:	7941      	ldrb	r1, [r0, #5]
 80118a6:	5c59      	ldrb	r1, [r3, r1]
 80118a8:	7041      	strb	r1, [r0, #1]
 80118aa:	7a41      	ldrb	r1, [r0, #9]
 80118ac:	5c59      	ldrb	r1, [r3, r1]
 80118ae:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80118b0:	7b41      	ldrb	r1, [r0, #13]
 80118b2:	5c59      	ldrb	r1, [r3, r1]
 80118b4:	7241      	strb	r1, [r0, #9]
 80118b6:	5c9a      	ldrb	r2, [r3, r2]
 80118b8:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80118ba:	7882      	ldrb	r2, [r0, #2]
 80118bc:	7a81      	ldrb	r1, [r0, #10]
 80118be:	5c59      	ldrb	r1, [r3, r1]
 80118c0:	7081      	strb	r1, [r0, #2]
 80118c2:	5c9a      	ldrb	r2, [r3, r2]
 80118c4:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80118c6:	7982      	ldrb	r2, [r0, #6]
 80118c8:	7b81      	ldrb	r1, [r0, #14]
 80118ca:	5c59      	ldrb	r1, [r3, r1]
 80118cc:	7181      	strb	r1, [r0, #6]
 80118ce:	5c9a      	ldrb	r2, [r3, r2]
 80118d0:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80118d2:	7bc2      	ldrb	r2, [r0, #15]
 80118d4:	7ac1      	ldrb	r1, [r0, #11]
 80118d6:	5c59      	ldrb	r1, [r3, r1]
 80118d8:	73c1      	strb	r1, [r0, #15]
 80118da:	79c1      	ldrb	r1, [r0, #7]
 80118dc:	5c59      	ldrb	r1, [r3, r1]
 80118de:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80118e0:	78c1      	ldrb	r1, [r0, #3]
 80118e2:	5c59      	ldrb	r1, [r3, r1]
 80118e4:	71c1      	strb	r1, [r0, #7]
 80118e6:	5c9b      	ldrb	r3, [r3, r2]
 80118e8:	70c3      	strb	r3, [r0, #3]
}
 80118ea:	4770      	bx	lr
 80118ec:	08019ea0 	.word	0x08019ea0

080118f0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 80118f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118f4:	b084      	sub	sp, #16
 80118f6:	4604      	mov	r4, r0
    block_copy(st, dt);
 80118f8:	4601      	mov	r1, r0
 80118fa:	4668      	mov	r0, sp
 80118fc:	f7ff fef3 	bl	80116e6 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8011900:	f89d c000 	ldrb.w	ip, [sp]
 8011904:	4b6a      	ldr	r3, [pc, #424]	; (8011ab0 <mix_sub_columns+0x1c0>)
 8011906:	f813 000c 	ldrb.w	r0, [r3, ip]
 801190a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801190e:	4a69      	ldr	r2, [pc, #420]	; (8011ab4 <mix_sub_columns+0x1c4>)
 8011910:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011914:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8011918:	4967      	ldr	r1, [pc, #412]	; (8011ab8 <mix_sub_columns+0x1c8>)
 801191a:	f811 500e 	ldrb.w	r5, [r1, lr]
 801191e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8011922:	5dce      	ldrb	r6, [r1, r7]
 8011924:	ea80 0009 	eor.w	r0, r0, r9
 8011928:	4068      	eors	r0, r5
 801192a:	4070      	eors	r0, r6
 801192c:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801192e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8011932:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011936:	f812 900e 	ldrb.w	r9, [r2, lr]
 801193a:	ea80 0a0a 	eor.w	sl, r0, sl
 801193e:	ea89 090a 	eor.w	r9, r9, sl
 8011942:	ea86 0609 	eor.w	r6, r6, r9
 8011946:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8011948:	f811 8008 	ldrb.w	r8, [r1, r8]
 801194c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8011950:	5dd6      	ldrb	r6, [r2, r7]
 8011952:	ea80 0008 	eor.w	r0, r0, r8
 8011956:	ea8e 0000 	eor.w	r0, lr, r0
 801195a:	4070      	eors	r0, r6
 801195c:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 801195e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8011962:	5dd8      	ldrb	r0, [r3, r7]
 8011964:	ea86 0608 	eor.w	r6, r6, r8
 8011968:	4075      	eors	r5, r6
 801196a:	4068      	eors	r0, r5
 801196c:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801196e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8011972:	f813 000c 	ldrb.w	r0, [r3, ip]
 8011976:	f89d 8009 	ldrb.w	r8, [sp, #9]
 801197a:	f812 9008 	ldrb.w	r9, [r2, r8]
 801197e:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8011982:	f811 500e 	ldrb.w	r5, [r1, lr]
 8011986:	f89d 7003 	ldrb.w	r7, [sp, #3]
 801198a:	5dce      	ldrb	r6, [r1, r7]
 801198c:	ea80 0009 	eor.w	r0, r0, r9
 8011990:	4068      	eors	r0, r5
 8011992:	4070      	eors	r0, r6
 8011994:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8011996:	f811 000c 	ldrb.w	r0, [r1, ip]
 801199a:	f813 a008 	ldrb.w	sl, [r3, r8]
 801199e:	f812 900e 	ldrb.w	r9, [r2, lr]
 80119a2:	ea80 0a0a 	eor.w	sl, r0, sl
 80119a6:	ea89 090a 	eor.w	r9, r9, sl
 80119aa:	ea86 0609 	eor.w	r6, r6, r9
 80119ae:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80119b0:	f811 8008 	ldrb.w	r8, [r1, r8]
 80119b4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80119b8:	5dd6      	ldrb	r6, [r2, r7]
 80119ba:	ea80 0008 	eor.w	r0, r0, r8
 80119be:	ea8e 0000 	eor.w	r0, lr, r0
 80119c2:	4070      	eors	r0, r6
 80119c4:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80119c6:	f812 600c 	ldrb.w	r6, [r2, ip]
 80119ca:	5dd8      	ldrb	r0, [r3, r7]
 80119cc:	ea86 0608 	eor.w	r6, r6, r8
 80119d0:	4075      	eors	r5, r6
 80119d2:	4068      	eors	r0, r5
 80119d4:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80119d6:	f89d c008 	ldrb.w	ip, [sp, #8]
 80119da:	f813 000c 	ldrb.w	r0, [r3, ip]
 80119de:	f89d 800d 	ldrb.w	r8, [sp, #13]
 80119e2:	f812 9008 	ldrb.w	r9, [r2, r8]
 80119e6:	f89d e002 	ldrb.w	lr, [sp, #2]
 80119ea:	f811 500e 	ldrb.w	r5, [r1, lr]
 80119ee:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80119f2:	5dce      	ldrb	r6, [r1, r7]
 80119f4:	ea80 0009 	eor.w	r0, r0, r9
 80119f8:	4068      	eors	r0, r5
 80119fa:	4070      	eors	r0, r6
 80119fc:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80119fe:	f811 000c 	ldrb.w	r0, [r1, ip]
 8011a02:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011a06:	f812 900e 	ldrb.w	r9, [r2, lr]
 8011a0a:	ea80 0a0a 	eor.w	sl, r0, sl
 8011a0e:	ea89 090a 	eor.w	r9, r9, sl
 8011a12:	ea86 0609 	eor.w	r6, r6, r9
 8011a16:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8011a18:	f811 8008 	ldrb.w	r8, [r1, r8]
 8011a1c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8011a20:	5dd6      	ldrb	r6, [r2, r7]
 8011a22:	ea80 0008 	eor.w	r0, r0, r8
 8011a26:	ea8e 0000 	eor.w	r0, lr, r0
 8011a2a:	4070      	eors	r0, r6
 8011a2c:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8011a2e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8011a32:	5dd8      	ldrb	r0, [r3, r7]
 8011a34:	ea86 0608 	eor.w	r6, r6, r8
 8011a38:	4075      	eors	r5, r6
 8011a3a:	4068      	eors	r0, r5
 8011a3c:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8011a3e:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8011a42:	5d98      	ldrb	r0, [r3, r6]
 8011a44:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8011a48:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011a4c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8011a50:	f811 c007 	ldrb.w	ip, [r1, r7]
 8011a54:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8011a58:	f811 e005 	ldrb.w	lr, [r1, r5]
 8011a5c:	ea80 0009 	eor.w	r0, r0, r9
 8011a60:	ea8c 0000 	eor.w	r0, ip, r0
 8011a64:	ea8e 0000 	eor.w	r0, lr, r0
 8011a68:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8011a6a:	5d88      	ldrb	r0, [r1, r6]
 8011a6c:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011a70:	f812 9007 	ldrb.w	r9, [r2, r7]
 8011a74:	ea80 0a0a 	eor.w	sl, r0, sl
 8011a78:	ea89 090a 	eor.w	r9, r9, sl
 8011a7c:	ea8e 0e09 	eor.w	lr, lr, r9
 8011a80:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8011a84:	f811 1008 	ldrb.w	r1, [r1, r8]
 8011a88:	f813 e007 	ldrb.w	lr, [r3, r7]
 8011a8c:	5d57      	ldrb	r7, [r2, r5]
 8011a8e:	4048      	eors	r0, r1
 8011a90:	ea8e 0000 	eor.w	r0, lr, r0
 8011a94:	4078      	eors	r0, r7
 8011a96:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8011a98:	5d92      	ldrb	r2, [r2, r6]
 8011a9a:	5d5b      	ldrb	r3, [r3, r5]
 8011a9c:	4051      	eors	r1, r2
 8011a9e:	ea8c 0c01 	eor.w	ip, ip, r1
 8011aa2:	ea83 030c 	eor.w	r3, r3, ip
 8011aa6:	73e3      	strb	r3, [r4, #15]
  }
 8011aa8:	b004      	add	sp, #16
 8011aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aae:	bf00      	nop
 8011ab0:	08019ca0 	.word	0x08019ca0
 8011ab4:	08019da0 	.word	0x08019da0
 8011ab8:	08019ea0 	.word	0x08019ea0

08011abc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8011abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ac0:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8011ac2:	f1a1 0310 	sub.w	r3, r1, #16
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	2b10      	cmp	r3, #16
 8011aca:	d806      	bhi.n	8011ada <lorawan_aes_set_key+0x1e>
 8011acc:	460d      	mov	r5, r1
 8011ace:	4a3b      	ldr	r2, [pc, #236]	; (8011bbc <lorawan_aes_set_key+0x100>)
 8011ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8011ad4:	f013 0f01 	tst.w	r3, #1
 8011ad8:	d105      	bne.n	8011ae6 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8011ae0:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8011ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8011ae6:	460a      	mov	r2, r1
 8011ae8:	4601      	mov	r1, r0
 8011aea:	4620      	mov	r0, r4
 8011aec:	f7ff fe1c 	bl	8011728 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8011af0:	f105 031c 	add.w	r3, r5, #28
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8011afc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8011b00:	3b01      	subs	r3, #1
 8011b02:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8011b06:	462b      	mov	r3, r5
 8011b08:	f04f 0c01 	mov.w	ip, #1
 8011b0c:	e023      	b.n	8011b56 <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 8011b0e:	2d18      	cmp	r5, #24
 8011b10:	d901      	bls.n	8011b16 <lorawan_aes_set_key+0x5a>
 8011b12:	2a10      	cmp	r2, #16
 8011b14:	d048      	beq.n	8011ba8 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8011b16:	1b5a      	subs	r2, r3, r5
 8011b18:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8011b1a:	f814 9002 	ldrb.w	r9, [r4, r2]
 8011b1e:	ea89 0808 	eor.w	r8, r9, r8
 8011b22:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8011b26:	f102 0801 	add.w	r8, r2, #1
 8011b2a:	f814 8008 	ldrb.w	r8, [r4, r8]
 8011b2e:	f100 0901 	add.w	r9, r0, #1
 8011b32:	ea88 0707 	eor.w	r7, r8, r7
 8011b36:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8011b3a:	1c97      	adds	r7, r2, #2
 8011b3c:	5de7      	ldrb	r7, [r4, r7]
 8011b3e:	f100 0802 	add.w	r8, r0, #2
 8011b42:	407e      	eors	r6, r7
 8011b44:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8011b48:	3203      	adds	r2, #3
 8011b4a:	5ca6      	ldrb	r6, [r4, r2]
 8011b4c:	1cc2      	adds	r2, r0, #3
 8011b4e:	4071      	eors	r1, r6
 8011b50:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8011b52:	3304      	adds	r3, #4
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	4573      	cmp	r3, lr
 8011b58:	d22d      	bcs.n	8011bb6 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	1f1a      	subs	r2, r3, #4
 8011b5e:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8011b62:	1eda      	subs	r2, r3, #3
 8011b64:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8011b66:	1e9a      	subs	r2, r3, #2
 8011b68:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8011b6a:	1e5a      	subs	r2, r3, #1
 8011b6c:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8011b6e:	fbb3 f2f5 	udiv	r2, r3, r5
 8011b72:	fb05 3212 	mls	r2, r5, r2, r3
 8011b76:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8011b7a:	d1c8      	bne.n	8011b0e <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 8011b7c:	4a10      	ldr	r2, [pc, #64]	; (8011bc0 <lorawan_aes_set_key+0x104>)
 8011b7e:	f812 9007 	ldrb.w	r9, [r2, r7]
 8011b82:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8011b86:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8011b88:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8011b8a:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8011b8e:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8011b92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011b96:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8011b9a:	b2d2      	uxtb	r2, r2
 8011b9c:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 8011ba0:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 8011ba4:	46c8      	mov	r8, r9
 8011ba6:	e7b6      	b.n	8011b16 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 8011ba8:	4a05      	ldr	r2, [pc, #20]	; (8011bc0 <lorawan_aes_set_key+0x104>)
 8011baa:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8011bae:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8011bb0:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8011bb2:	5c51      	ldrb	r1, [r2, r1]
 8011bb4:	e7af      	b.n	8011b16 <lorawan_aes_set_key+0x5a>
    return 0;
 8011bb6:	2000      	movs	r0, #0
 8011bb8:	e793      	b.n	8011ae2 <lorawan_aes_set_key+0x26>
 8011bba:	bf00      	nop
 8011bbc:	00010101 	.word	0x00010101
 8011bc0:	08019ea0 	.word	0x08019ea0

08011bc4 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8011bc4:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8011bc8:	b31b      	cbz	r3, 8011c12 <lorawan_aes_encrypt+0x4e>
{
 8011bca:	b570      	push	{r4, r5, r6, lr}
 8011bcc:	b084      	sub	sp, #16
 8011bce:	460e      	mov	r6, r1
 8011bd0:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8011bd2:	4601      	mov	r1, r0
 8011bd4:	4668      	mov	r0, sp
 8011bd6:	f7ff fdf3 	bl	80117c0 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8011bda:	2401      	movs	r4, #1
 8011bdc:	e009      	b.n	8011bf2 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8011bde:	4668      	mov	r0, sp
 8011be0:	f7ff fe86 	bl	80118f0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8011be4:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8011be8:	4668      	mov	r0, sp
 8011bea:	f7ff fe48 	bl	801187e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8011bee:	3401      	adds	r4, #1
 8011bf0:	b2e4      	uxtb	r4, r4
 8011bf2:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8011bf6:	42a3      	cmp	r3, r4
 8011bf8:	d8f1      	bhi.n	8011bde <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8011bfa:	4668      	mov	r0, sp
 8011bfc:	f7ff fe44 	bl	8011888 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8011c00:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8011c04:	4669      	mov	r1, sp
 8011c06:	4630      	mov	r0, r6
 8011c08:	f7ff fdda 	bl	80117c0 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8011c0c:	2000      	movs	r0, #0
}
 8011c0e:	b004      	add	sp, #16
 8011c10:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8011c12:	20ff      	movs	r0, #255	; 0xff
}
 8011c14:	4770      	bx	lr
	...

08011c18 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011c18:	2300      	movs	r3, #0
 8011c1a:	2b0a      	cmp	r3, #10
 8011c1c:	d817      	bhi.n	8011c4e <GetKeyByID+0x36>
{
 8011c1e:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8011c20:	4a0c      	ldr	r2, [pc, #48]	; (8011c54 <GetKeyByID+0x3c>)
 8011c22:	6814      	ldr	r4, [r2, #0]
 8011c24:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8011c28:	4422      	add	r2, r4
 8011c2a:	7e12      	ldrb	r2, [r2, #24]
 8011c2c:	4282      	cmp	r2, r0
 8011c2e:	d006      	beq.n	8011c3e <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011c30:	3301      	adds	r3, #1
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	2b0a      	cmp	r3, #10
 8011c36:	d9f3      	bls.n	8011c20 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011c38:	2003      	movs	r0, #3
}
 8011c3a:	bc10      	pop	{r4}
 8011c3c:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8011c3e:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8011c42:	f10c 0c18 	add.w	ip, ip, #24
 8011c46:	4464      	add	r4, ip
 8011c48:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8011c4a:	2000      	movs	r0, #0
 8011c4c:	e7f5      	b.n	8011c3a <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011c4e:	2003      	movs	r0, #3
}
 8011c50:	4770      	bx	lr
 8011c52:	bf00      	nop
 8011c54:	20001584 	.word	0x20001584

08011c58 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8011c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5c:	b0cc      	sub	sp, #304	; 0x130
 8011c5e:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8011c60:	b3a9      	cbz	r1, 8011cce <ComputeCmac+0x76>
 8011c62:	4607      	mov	r7, r0
 8011c64:	4616      	mov	r6, r2
 8011c66:	461c      	mov	r4, r3
 8011c68:	4688      	mov	r8, r1
 8011c6a:	b395      	cbz	r5, 8011cd2 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8011c6c:	a802      	add	r0, sp, #8
 8011c6e:	f7ff fbd5 	bl	801141c <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8011c72:	a901      	add	r1, sp, #4
 8011c74:	4620      	mov	r0, r4
 8011c76:	f7ff ffcf 	bl	8011c18 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	b118      	cbz	r0, 8011c86 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8011c7e:	4620      	mov	r0, r4
 8011c80:	b04c      	add	sp, #304	; 0x130
 8011c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8011c86:	9901      	ldr	r1, [sp, #4]
 8011c88:	3101      	adds	r1, #1
 8011c8a:	a802      	add	r0, sp, #8
 8011c8c:	f7ff fbd5 	bl	801143a <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8011c90:	b127      	cbz	r7, 8011c9c <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8011c92:	2210      	movs	r2, #16
 8011c94:	4639      	mov	r1, r7
 8011c96:	a802      	add	r0, sp, #8
 8011c98:	f7ff fbd6 	bl	8011448 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8011c9c:	4632      	mov	r2, r6
 8011c9e:	4641      	mov	r1, r8
 8011ca0:	a802      	add	r0, sp, #8
 8011ca2:	f7ff fbd1 	bl	8011448 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8011ca6:	a902      	add	r1, sp, #8
 8011ca8:	a848      	add	r0, sp, #288	; 0x120
 8011caa:	f7ff fc3b 	bl	8011524 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8011cae:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8011cb2:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8011cb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011cba:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 8011cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011cc2:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8011cc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011cca:	602b      	str	r3, [r5, #0]
 8011ccc:	e7d7      	b.n	8011c7e <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8011cce:	2402      	movs	r4, #2
 8011cd0:	e7d5      	b.n	8011c7e <ComputeCmac+0x26>
 8011cd2:	2402      	movs	r4, #2
 8011cd4:	e7d3      	b.n	8011c7e <ComputeCmac+0x26>
	...

08011cd8 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8011cd8:	b140      	cbz	r0, 8011cec <SecureElementInit+0x14>
{
 8011cda:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8011cdc:	4a04      	ldr	r2, [pc, #16]	; (8011cf0 <SecureElementInit+0x18>)
 8011cde:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8011ce0:	22d8      	movs	r2, #216	; 0xd8
 8011ce2:	4904      	ldr	r1, [pc, #16]	; (8011cf4 <SecureElementInit+0x1c>)
 8011ce4:	f000 facb 	bl	801227e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8011ce8:	2000      	movs	r0, #0
}
 8011cea:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8011cec:	2002      	movs	r0, #2
}
 8011cee:	4770      	bx	lr
 8011cf0:	20001584 	.word	0x20001584
 8011cf4:	0803e500 	.word	0x0803e500

08011cf8 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	2b0a      	cmp	r3, #10
 8011cfc:	d817      	bhi.n	8011d2e <SecureElementGetKeyByID+0x36>
{
 8011cfe:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8011d00:	4a0c      	ldr	r2, [pc, #48]	; (8011d34 <SecureElementGetKeyByID+0x3c>)
 8011d02:	6814      	ldr	r4, [r2, #0]
 8011d04:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8011d08:	4422      	add	r2, r4
 8011d0a:	7e12      	ldrb	r2, [r2, #24]
 8011d0c:	4282      	cmp	r2, r0
 8011d0e:	d006      	beq.n	8011d1e <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011d10:	3301      	adds	r3, #1
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	2b0a      	cmp	r3, #10
 8011d16:	d9f3      	bls.n	8011d00 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011d18:	2003      	movs	r0, #3
}
 8011d1a:	bc10      	pop	{r4}
 8011d1c:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8011d1e:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8011d22:	f10c 0c18 	add.w	ip, ip, #24
 8011d26:	4464      	add	r4, ip
 8011d28:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8011d2a:	2000      	movs	r0, #0
 8011d2c:	e7f5      	b.n	8011d1a <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011d2e:	2003      	movs	r0, #3
}
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop
 8011d34:	20001584 	.word	0x20001584

08011d38 <PrintKey>:
{
 8011d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d3c:	b099      	sub	sp, #100	; 0x64
 8011d3e:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8011d40:	a917      	add	r1, sp, #92	; 0x5c
 8011d42:	f7ff ffd9 	bl	8011cf8 <SecureElementGetKeyByID>
 8011d46:	4603      	mov	r3, r0
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	d042      	beq.n	8011dd2 <PrintKey+0x9a>
}
 8011d4c:	b019      	add	sp, #100	; 0x64
 8011d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 8011d52:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8011d56:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d60:	785a      	ldrb	r2, [r3, #1]
 8011d62:	9214      	str	r2, [sp, #80]	; 0x50
 8011d64:	7899      	ldrb	r1, [r3, #2]
 8011d66:	9115      	str	r1, [sp, #84]	; 0x54
 8011d68:	78da      	ldrb	r2, [r3, #3]
 8011d6a:	7919      	ldrb	r1, [r3, #4]
 8011d6c:	7958      	ldrb	r0, [r3, #5]
 8011d6e:	799c      	ldrb	r4, [r3, #6]
 8011d70:	79dd      	ldrb	r5, [r3, #7]
 8011d72:	7a1e      	ldrb	r6, [r3, #8]
 8011d74:	7a5f      	ldrb	r7, [r3, #9]
 8011d76:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8011d7a:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8011d7e:	f893 800c 	ldrb.w	r8, [r3, #12]
 8011d82:	f893 900d 	ldrb.w	r9, [r3, #13]
 8011d86:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8011d8a:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8011d8e:	7c1b      	ldrb	r3, [r3, #16]
 8011d90:	9310      	str	r3, [sp, #64]	; 0x40
 8011d92:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8011d96:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011d9a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8011d9e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8011da2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8011da6:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8011daa:	9709      	str	r7, [sp, #36]	; 0x24
 8011dac:	9608      	str	r6, [sp, #32]
 8011dae:	9507      	str	r5, [sp, #28]
 8011db0:	9406      	str	r4, [sp, #24]
 8011db2:	9005      	str	r0, [sp, #20]
 8011db4:	9104      	str	r1, [sp, #16]
 8011db6:	9203      	str	r2, [sp, #12]
 8011db8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011dba:	9102      	str	r1, [sp, #8]
 8011dbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011dbe:	9201      	str	r2, [sp, #4]
 8011dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011dc2:	9300      	str	r3, [sp, #0]
 8011dc4:	4b09      	ldr	r3, [pc, #36]	; (8011dec <PrintKey+0xb4>)
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	4611      	mov	r1, r2
 8011dca:	2002      	movs	r0, #2
 8011dcc:	f002 f934 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8011dd0:	e7bc      	b.n	8011d4c <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011dd2:	2b0a      	cmp	r3, #10
 8011dd4:	d8ba      	bhi.n	8011d4c <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 8011dd6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011dda:	4905      	ldr	r1, [pc, #20]	; (8011df0 <PrintKey+0xb8>)
 8011ddc:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8011de0:	42a2      	cmp	r2, r4
 8011de2:	d0b6      	beq.n	8011d52 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011de4:	3301      	adds	r3, #1
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	e7f3      	b.n	8011dd2 <PrintKey+0x9a>
 8011dea:	bf00      	nop
 8011dec:	08019fa0 	.word	0x08019fa0
 8011df0:	0801a138 	.word	0x0801a138

08011df4 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8011df4:	2b0b      	cmp	r3, #11
 8011df6:	d80a      	bhi.n	8011e0e <SecureElementComputeAesCmac+0x1a>
{
 8011df8:	b500      	push	{lr}
 8011dfa:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8011dfc:	f8dd c010 	ldr.w	ip, [sp, #16]
 8011e00:	f8cd c000 	str.w	ip, [sp]
 8011e04:	f7ff ff28 	bl	8011c58 <ComputeCmac>
}
 8011e08:	b003      	add	sp, #12
 8011e0a:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011e0e:	2003      	movs	r0, #3
}
 8011e10:	4770      	bx	lr

08011e12 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8011e12:	b190      	cbz	r0, 8011e3a <SecureElementVerifyAesCmac+0x28>
{
 8011e14:	b510      	push	{r4, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	468c      	mov	ip, r1
 8011e1a:	4614      	mov	r4, r2
 8011e1c:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8011e1e:	2000      	movs	r0, #0
 8011e20:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8011e22:	aa03      	add	r2, sp, #12
 8011e24:	9200      	str	r2, [sp, #0]
 8011e26:	4662      	mov	r2, ip
 8011e28:	f7ff ff16 	bl	8011c58 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8011e2c:	b918      	cbnz	r0, 8011e36 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8011e2e:	9b03      	ldr	r3, [sp, #12]
 8011e30:	42a3      	cmp	r3, r4
 8011e32:	d000      	beq.n	8011e36 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8011e34:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8011e36:	b004      	add	sp, #16
 8011e38:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8011e3a:	2002      	movs	r0, #2
}
 8011e3c:	4770      	bx	lr

08011e3e <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8011e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e42:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8011e44:	b348      	cbz	r0, 8011e9a <SecureElementAesEncrypt+0x5c>
 8011e46:	460d      	mov	r5, r1
 8011e48:	4614      	mov	r4, r2
 8011e4a:	461e      	mov	r6, r3
 8011e4c:	4607      	mov	r7, r0
 8011e4e:	b33b      	cbz	r3, 8011ea0 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8011e50:	f011 0f0f 	tst.w	r1, #15
 8011e54:	d127      	bne.n	8011ea6 <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8011e56:	22f0      	movs	r2, #240	; 0xf0
 8011e58:	2100      	movs	r1, #0
 8011e5a:	a801      	add	r0, sp, #4
 8011e5c:	f000 fa27 	bl	80122ae <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8011e60:	4669      	mov	r1, sp
 8011e62:	4620      	mov	r0, r4
 8011e64:	f7ff fed8 	bl	8011c18 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8011e68:	4680      	mov	r8, r0
 8011e6a:	b118      	cbz	r0, 8011e74 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8011e6c:	4640      	mov	r0, r8
 8011e6e:	b03e      	add	sp, #248	; 0xf8
 8011e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8011e74:	aa01      	add	r2, sp, #4
 8011e76:	2110      	movs	r1, #16
 8011e78:	9800      	ldr	r0, [sp, #0]
 8011e7a:	3001      	adds	r0, #1
 8011e7c:	f7ff fe1e 	bl	8011abc <lorawan_aes_set_key>
        uint8_t block = 0;
 8011e80:	4644      	mov	r4, r8
        while( size != 0 )
 8011e82:	e007      	b.n	8011e94 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8011e84:	aa01      	add	r2, sp, #4
 8011e86:	1931      	adds	r1, r6, r4
 8011e88:	1938      	adds	r0, r7, r4
 8011e8a:	f7ff fe9b 	bl	8011bc4 <lorawan_aes_encrypt>
            block = block + 16;
 8011e8e:	3410      	adds	r4, #16
 8011e90:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 8011e92:	3d10      	subs	r5, #16
        while( size != 0 )
 8011e94:	2d00      	cmp	r5, #0
 8011e96:	d1f5      	bne.n	8011e84 <SecureElementAesEncrypt+0x46>
 8011e98:	e7e8      	b.n	8011e6c <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8011e9a:	f04f 0802 	mov.w	r8, #2
 8011e9e:	e7e5      	b.n	8011e6c <SecureElementAesEncrypt+0x2e>
 8011ea0:	f04f 0802 	mov.w	r8, #2
 8011ea4:	e7e2      	b.n	8011e6c <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8011ea6:	f04f 0805 	mov.w	r8, #5
 8011eaa:	e7df      	b.n	8011e6c <SecureElementAesEncrypt+0x2e>

08011eac <SecureElementSetKey>:
{
 8011eac:	b530      	push	{r4, r5, lr}
 8011eae:	b085      	sub	sp, #20
    if( key == NULL )
 8011eb0:	2900      	cmp	r1, #0
 8011eb2:	d038      	beq.n	8011f26 <SecureElementSetKey+0x7a>
 8011eb4:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	2b0a      	cmp	r3, #10
 8011eba:	d830      	bhi.n	8011f1e <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8011ebc:	4a1b      	ldr	r2, [pc, #108]	; (8011f2c <SecureElementSetKey+0x80>)
 8011ebe:	6811      	ldr	r1, [r2, #0]
 8011ec0:	461c      	mov	r4, r3
 8011ec2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8011ec6:	440a      	add	r2, r1
 8011ec8:	7e12      	ldrb	r2, [r2, #24]
 8011eca:	4282      	cmp	r2, r0
 8011ecc:	d002      	beq.n	8011ed4 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011ece:	3301      	adds	r3, #1
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	e7f1      	b.n	8011eb8 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 8011ed4:	280d      	cmp	r0, #13
 8011ed6:	d00a      	beq.n	8011eee <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8011ed8:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8011edc:	3418      	adds	r4, #24
 8011ede:	1908      	adds	r0, r1, r4
 8011ee0:	2210      	movs	r2, #16
 8011ee2:	4661      	mov	r1, ip
 8011ee4:	3001      	adds	r0, #1
 8011ee6:	f000 f9ca 	bl	801227e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8011eea:	2500      	movs	r5, #0
 8011eec:	e018      	b.n	8011f20 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8011eee:	2300      	movs	r3, #0
 8011ef0:	9300      	str	r3, [sp, #0]
 8011ef2:	9301      	str	r3, [sp, #4]
 8011ef4:	9302      	str	r3, [sp, #8]
 8011ef6:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8011ef8:	466b      	mov	r3, sp
 8011efa:	220c      	movs	r2, #12
 8011efc:	2110      	movs	r1, #16
 8011efe:	4660      	mov	r0, ip
 8011f00:	f7ff ff9d 	bl	8011e3e <SecureElementAesEncrypt>
 8011f04:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8011f06:	4b09      	ldr	r3, [pc, #36]	; (8011f2c <SecureElementSetKey+0x80>)
 8011f08:	6818      	ldr	r0, [r3, #0]
 8011f0a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8011f0e:	3418      	adds	r4, #24
 8011f10:	4420      	add	r0, r4
 8011f12:	2210      	movs	r2, #16
 8011f14:	4669      	mov	r1, sp
 8011f16:	3001      	adds	r0, #1
 8011f18:	f000 f9b1 	bl	801227e <memcpy1>
                return retval;
 8011f1c:	e000      	b.n	8011f20 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011f1e:	2503      	movs	r5, #3
}
 8011f20:	4628      	mov	r0, r5
 8011f22:	b005      	add	sp, #20
 8011f24:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8011f26:	2502      	movs	r5, #2
 8011f28:	e7fa      	b.n	8011f20 <SecureElementSetKey+0x74>
 8011f2a:	bf00      	nop
 8011f2c:	20001584 	.word	0x20001584

08011f30 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8011f30:	b1d0      	cbz	r0, 8011f68 <SecureElementDeriveAndStoreKey+0x38>
{
 8011f32:	b510      	push	{r4, lr}
 8011f34:	b084      	sub	sp, #16
 8011f36:	4614      	mov	r4, r2
 8011f38:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8011f3a:	2a0c      	cmp	r2, #12
 8011f3c:	d101      	bne.n	8011f42 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8011f3e:	290b      	cmp	r1, #11
 8011f40:	d114      	bne.n	8011f6c <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8011f42:	2300      	movs	r3, #0
 8011f44:	9300      	str	r3, [sp, #0]
 8011f46:	9301      	str	r3, [sp, #4]
 8011f48:	9302      	str	r3, [sp, #8]
 8011f4a:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8011f4c:	466b      	mov	r3, sp
 8011f4e:	460a      	mov	r2, r1
 8011f50:	2110      	movs	r1, #16
 8011f52:	4660      	mov	r0, ip
 8011f54:	f7ff ff73 	bl	8011e3e <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8011f58:	b108      	cbz	r0, 8011f5e <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8011f5a:	b004      	add	sp, #16
 8011f5c:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8011f5e:	4669      	mov	r1, sp
 8011f60:	4620      	mov	r0, r4
 8011f62:	f7ff ffa3 	bl	8011eac <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8011f66:	e7f8      	b.n	8011f5a <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8011f68:	2002      	movs	r0, #2
}
 8011f6a:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011f6c:	2003      	movs	r0, #3
 8011f6e:	e7f4      	b.n	8011f5a <SecureElementDeriveAndStoreKey+0x2a>

08011f70 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8011f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f72:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8011f76:	9c07      	ldr	r4, [sp, #28]
 8011f78:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8011f7a:	b35b      	cbz	r3, 8011fd4 <SecureElementProcessJoinAccept+0x64>
 8011f7c:	461f      	mov	r7, r3
 8011f7e:	b35c      	cbz	r4, 8011fd8 <SecureElementProcessJoinAccept+0x68>
 8011f80:	b366      	cbz	r6, 8011fdc <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8011f82:	2d21      	cmp	r5, #33	; 0x21
 8011f84:	d82c      	bhi.n	8011fe0 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8011f86:	462a      	mov	r2, r5
 8011f88:	4619      	mov	r1, r3
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f000 f977 	bl	801227e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8011f90:	1c63      	adds	r3, r4, #1
 8011f92:	2201      	movs	r2, #1
 8011f94:	1e69      	subs	r1, r5, #1
 8011f96:	18b8      	adds	r0, r7, r2
 8011f98:	f7ff ff51 	bl	8011e3e <SecureElementAesEncrypt>
 8011f9c:	bb10      	cbnz	r0, 8011fe4 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8011f9e:	7ae3      	ldrb	r3, [r4, #11]
 8011fa0:	09db      	lsrs	r3, r3, #7
 8011fa2:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8011fa4:	1961      	adds	r1, r4, r5
 8011fa6:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8011faa:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8011fae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8011fb2:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8011fb6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8011fba:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8011fbe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8011fc2:	b98b      	cbnz	r3, 8011fe8 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	1f29      	subs	r1, r5, #4
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f7ff ff22 	bl	8011e12 <SecureElementVerifyAesCmac>
 8011fce:	b140      	cbz	r0, 8011fe2 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8011fd0:	2001      	movs	r0, #1
 8011fd2:	e006      	b.n	8011fe2 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8011fd4:	2002      	movs	r0, #2
 8011fd6:	e004      	b.n	8011fe2 <SecureElementProcessJoinAccept+0x72>
 8011fd8:	2002      	movs	r0, #2
 8011fda:	e002      	b.n	8011fe2 <SecureElementProcessJoinAccept+0x72>
 8011fdc:	2002      	movs	r0, #2
 8011fde:	e000      	b.n	8011fe2 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8011fe0:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8011fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8011fe4:	2007      	movs	r0, #7
 8011fe6:	e7fc      	b.n	8011fe2 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8011fe8:	2004      	movs	r0, #4
 8011fea:	e7fa      	b.n	8011fe2 <SecureElementProcessJoinAccept+0x72>

08011fec <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8011fec:	b140      	cbz	r0, 8012000 <SecureElementSetDevEui+0x14>
{
 8011fee:	b508      	push	{r3, lr}
 8011ff0:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8011ff2:	2208      	movs	r2, #8
 8011ff4:	4b03      	ldr	r3, [pc, #12]	; (8012004 <SecureElementSetDevEui+0x18>)
 8011ff6:	6818      	ldr	r0, [r3, #0]
 8011ff8:	f000 f941 	bl	801227e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8011ffc:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8011ffe:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012000:	2002      	movs	r0, #2
}
 8012002:	4770      	bx	lr
 8012004:	20001584 	.word	0x20001584

08012008 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8012008:	b138      	cbz	r0, 801201a <SecureElementGetDevEui+0x12>
{
 801200a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 801200c:	2208      	movs	r2, #8
 801200e:	4904      	ldr	r1, [pc, #16]	; (8012020 <SecureElementGetDevEui+0x18>)
 8012010:	6809      	ldr	r1, [r1, #0]
 8012012:	f000 f934 	bl	801227e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012016:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012018:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801201a:	2002      	movs	r0, #2
}
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop
 8012020:	20001584 	.word	0x20001584

08012024 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8012024:	b148      	cbz	r0, 801203a <SecureElementSetJoinEui+0x16>
{
 8012026:	b508      	push	{r3, lr}
 8012028:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 801202a:	4b05      	ldr	r3, [pc, #20]	; (8012040 <SecureElementSetJoinEui+0x1c>)
 801202c:	6818      	ldr	r0, [r3, #0]
 801202e:	2208      	movs	r2, #8
 8012030:	4410      	add	r0, r2
 8012032:	f000 f924 	bl	801227e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012036:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012038:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801203a:	2002      	movs	r0, #2
}
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	20001584 	.word	0x20001584

08012044 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8012044:	b140      	cbz	r0, 8012058 <SecureElementGetJoinEui+0x14>
{
 8012046:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8012048:	4a04      	ldr	r2, [pc, #16]	; (801205c <SecureElementGetJoinEui+0x18>)
 801204a:	6811      	ldr	r1, [r2, #0]
 801204c:	2208      	movs	r2, #8
 801204e:	4411      	add	r1, r2
 8012050:	f000 f915 	bl	801227e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012054:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012056:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012058:	2002      	movs	r0, #2
}
 801205a:	4770      	bx	lr
 801205c:	20001584 	.word	0x20001584

08012060 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8012060:	2802      	cmp	r0, #2
 8012062:	d004      	beq.n	801206e <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8012064:	4b04      	ldr	r3, [pc, #16]	; (8012078 <SecureElementSetDevAddr+0x18>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 801206a:	2000      	movs	r0, #0
 801206c:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 801206e:	4b02      	ldr	r3, [pc, #8]	; (8012078 <SecureElementSetDevAddr+0x18>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	6119      	str	r1, [r3, #16]
 8012074:	e7f9      	b.n	801206a <SecureElementSetDevAddr+0xa>
 8012076:	bf00      	nop
 8012078:	20001584 	.word	0x20001584

0801207c <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 801207c:	b169      	cbz	r1, 801209a <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 801207e:	2802      	cmp	r0, #2
 8012080:	d005      	beq.n	801208e <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8012082:	4a07      	ldr	r2, [pc, #28]	; (80120a0 <SecureElementGetDevAddr+0x24>)
 8012084:	6812      	ldr	r2, [r2, #0]
 8012086:	6952      	ldr	r2, [r2, #20]
 8012088:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 801208a:	2000      	movs	r0, #0
 801208c:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 801208e:	4a04      	ldr	r2, [pc, #16]	; (80120a0 <SecureElementGetDevAddr+0x24>)
 8012090:	6812      	ldr	r2, [r2, #0]
 8012092:	6912      	ldr	r2, [r2, #16]
 8012094:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 8012096:	2000      	movs	r0, #0
 8012098:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 801209a:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	20001584 	.word	0x20001584

080120a4 <SecureElementInitMcuID>:
{
 80120a4:	b530      	push	{r4, r5, lr}
 80120a6:	b085      	sub	sp, #20
 80120a8:	4605      	mov	r5, r0
 80120aa:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 80120ac:	2300      	movs	r3, #0
 80120ae:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 80120b0:	a802      	add	r0, sp, #8
 80120b2:	f7ff ffa9 	bl	8012008 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 80120b6:	a901      	add	r1, sp, #4
 80120b8:	2001      	movs	r0, #1
 80120ba:	f7ff ffdf 	bl	801207c <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 80120be:	b195      	cbz	r5, 80120e6 <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80120c0:	2300      	movs	r3, #0
 80120c2:	2b07      	cmp	r3, #7
 80120c4:	d808      	bhi.n	80120d8 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 80120c6:	f103 0210 	add.w	r2, r3, #16
 80120ca:	446a      	add	r2, sp
 80120cc:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80120d0:	b9aa      	cbnz	r2, 80120fe <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80120d2:	3301      	adds	r3, #1
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	e7f4      	b.n	80120c2 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 80120d8:	2300      	movs	r3, #0
        if( id_init == false )
 80120da:	b923      	cbnz	r3, 80120e6 <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 80120dc:	a802      	add	r0, sp, #8
 80120de:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 80120e0:	a802      	add	r0, sp, #8
 80120e2:	f7ff ff83 	bl	8011fec <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 80120e6:	b13c      	cbz	r4, 80120f8 <SecureElementInitMcuID+0x54>
 80120e8:	9b01      	ldr	r3, [sp, #4]
 80120ea:	b92b      	cbnz	r3, 80120f8 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 80120ec:	a801      	add	r0, sp, #4
 80120ee:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 80120f0:	9901      	ldr	r1, [sp, #4]
 80120f2:	2001      	movs	r0, #1
 80120f4:	f7ff ffb4 	bl	8012060 <SecureElementSetDevAddr>
}
 80120f8:	2000      	movs	r0, #0
 80120fa:	b005      	add	sp, #20
 80120fc:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 80120fe:	2301      	movs	r3, #1
 8012100:	e7eb      	b.n	80120da <SecureElementInitMcuID+0x36>
	...

08012104 <PrintIds>:
{
 8012104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012106:	b08f      	sub	sp, #60	; 0x3c
 8012108:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 801210a:	2400      	movs	r4, #0
 801210c:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 801210e:	a80a      	add	r0, sp, #40	; 0x28
 8012110:	f7ff ff7a 	bl	8012008 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8012114:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012118:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801211c:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 8012120:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8012124:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8012128:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 801212c:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 8012130:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 8012134:	f8cd e01c 	str.w	lr, [sp, #28]
 8012138:	f8cd c018 	str.w	ip, [sp, #24]
 801213c:	9705      	str	r7, [sp, #20]
 801213e:	9604      	str	r6, [sp, #16]
 8012140:	9003      	str	r0, [sp, #12]
 8012142:	9102      	str	r1, [sp, #8]
 8012144:	9201      	str	r2, [sp, #4]
 8012146:	9300      	str	r3, [sp, #0]
 8012148:	4b20      	ldr	r3, [pc, #128]	; (80121cc <PrintIds+0xc8>)
 801214a:	4622      	mov	r2, r4
 801214c:	4621      	mov	r1, r4
 801214e:	2002      	movs	r0, #2
 8012150:	f001 ff72 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 8012154:	a80c      	add	r0, sp, #48	; 0x30
 8012156:	f7ff ff75 	bl	8012044 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 801215a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801215e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8012162:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8012166:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 801216a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801216e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 8012172:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 8012176:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 801217a:	f8cd e01c 	str.w	lr, [sp, #28]
 801217e:	f8cd c018 	str.w	ip, [sp, #24]
 8012182:	9705      	str	r7, [sp, #20]
 8012184:	9604      	str	r6, [sp, #16]
 8012186:	9003      	str	r0, [sp, #12]
 8012188:	9102      	str	r1, [sp, #8]
 801218a:	9201      	str	r2, [sp, #4]
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	4b10      	ldr	r3, [pc, #64]	; (80121d0 <PrintIds+0xcc>)
 8012190:	4622      	mov	r2, r4
 8012192:	4621      	mov	r1, r4
 8012194:	2002      	movs	r0, #2
 8012196:	f001 ff4f 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 801219a:	a909      	add	r1, sp, #36	; 0x24
 801219c:	4628      	mov	r0, r5
 801219e:	f7ff ff6d 	bl	801207c <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 80121a2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80121a6:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80121aa:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 80121ae:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80121b2:	9003      	str	r0, [sp, #12]
 80121b4:	9102      	str	r1, [sp, #8]
 80121b6:	9201      	str	r2, [sp, #4]
 80121b8:	9300      	str	r3, [sp, #0]
 80121ba:	4b06      	ldr	r3, [pc, #24]	; (80121d4 <PrintIds+0xd0>)
 80121bc:	4622      	mov	r2, r4
 80121be:	4621      	mov	r1, r4
 80121c0:	2002      	movs	r0, #2
 80121c2:	f001 ff39 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 80121c6:	b00f      	add	sp, #60	; 0x3c
 80121c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ca:	bf00      	nop
 80121cc:	08019ffc 	.word	0x08019ffc
 80121d0:	0801a03c 	.word	0x0801a03c
 80121d4:	0801a07c 	.word	0x0801a07c

080121d8 <SecureElementPrintKeys>:
{
 80121d8:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 80121da:	2000      	movs	r0, #0
 80121dc:	f7ff fdac 	bl	8011d38 <PrintKey>
    PrintKey( NWK_KEY );
 80121e0:	2001      	movs	r0, #1
 80121e2:	f7ff fda9 	bl	8011d38 <PrintKey>
    PrintKey( APP_S_KEY );
 80121e6:	2009      	movs	r0, #9
 80121e8:	f7ff fda6 	bl	8011d38 <PrintKey>
    PrintKey( NWK_S_KEY );
 80121ec:	2008      	movs	r0, #8
 80121ee:	f7ff fda3 	bl	8011d38 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 80121f2:	2000      	movs	r0, #0
 80121f4:	f7ff ff86 	bl	8012104 <PrintIds>
}
 80121f8:	2000      	movs	r0, #0
 80121fa:	bd08      	pop	{r3, pc}

080121fc <SecureElementPrintSessionKeys>:
{
 80121fc:	b510      	push	{r4, lr}
 80121fe:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8012200:	200b      	movs	r0, #11
 8012202:	f7ff fd99 	bl	8011d38 <PrintKey>
    PrintKey( MC_KE_KEY );
 8012206:	200c      	movs	r0, #12
 8012208:	f7ff fd96 	bl	8011d38 <PrintKey>
    PrintKey( APP_S_KEY );
 801220c:	2009      	movs	r0, #9
 801220e:	f7ff fd93 	bl	8011d38 <PrintKey>
    PrintKey( NWK_S_KEY );
 8012212:	2008      	movs	r0, #8
 8012214:	f7ff fd90 	bl	8011d38 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8012218:	200a      	movs	r0, #10
 801221a:	f7ff fd8d 	bl	8011d38 <PrintKey>
    PrintIds( mode );
 801221e:	4620      	mov	r0, r4
 8012220:	f7ff ff70 	bl	8012104 <PrintIds>
}
 8012224:	2000      	movs	r0, #0
 8012226:	bd10      	pop	{r4, pc}

08012228 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8012228:	4b09      	ldr	r3, [pc, #36]	; (8012250 <rand1+0x28>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	4909      	ldr	r1, [pc, #36]	; (8012254 <rand1+0x2c>)
 801222e:	f243 0039 	movw	r0, #12345	; 0x3039
 8012232:	fb01 0002 	mla	r0, r1, r2, r0
 8012236:	6018      	str	r0, [r3, #0]
 8012238:	2303      	movs	r3, #3
 801223a:	fba3 2300 	umull	r2, r3, r3, r0
 801223e:	1ac2      	subs	r2, r0, r3
 8012240:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012244:	0f9b      	lsrs	r3, r3, #30
 8012246:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 801224a:	1ac0      	subs	r0, r0, r3
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	20000218 	.word	0x20000218
 8012254:	41c64e6d 	.word	0x41c64e6d

08012258 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8012258:	4b01      	ldr	r3, [pc, #4]	; (8012260 <srand1+0x8>)
 801225a:	6018      	str	r0, [r3, #0]
}
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop
 8012260:	20000218 	.word	0x20000218

08012264 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8012264:	b538      	push	{r3, r4, r5, lr}
 8012266:	4605      	mov	r5, r0
 8012268:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801226a:	f7ff ffdd 	bl	8012228 <rand1>
 801226e:	1b61      	subs	r1, r4, r5
 8012270:	3101      	adds	r1, #1
 8012272:	fb90 f3f1 	sdiv	r3, r0, r1
 8012276:	fb01 0013 	mls	r0, r1, r3, r0
}
 801227a:	4428      	add	r0, r5
 801227c:	bd38      	pop	{r3, r4, r5, pc}

0801227e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 801227e:	e004      	b.n	801228a <memcpy1+0xc>
    {
        *dst++ = *src++;
 8012280:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012284:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8012288:	461a      	mov	r2, r3
 801228a:	1e53      	subs	r3, r2, #1
 801228c:	b29b      	uxth	r3, r3
 801228e:	2a00      	cmp	r2, #0
 8012290:	d1f6      	bne.n	8012280 <memcpy1+0x2>
    }
}
 8012292:	4770      	bx	lr

08012294 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8012294:	1e53      	subs	r3, r2, #1
 8012296:	4418      	add	r0, r3
    while( size-- )
 8012298:	e004      	b.n	80122a4 <memcpyr+0x10>
    {
        *dst-- = *src++;
 801229a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801229e:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 80122a2:	461a      	mov	r2, r3
 80122a4:	1e53      	subs	r3, r2, #1
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	2a00      	cmp	r2, #0
 80122aa:	d1f6      	bne.n	801229a <memcpyr+0x6>
    }
}
 80122ac:	4770      	bx	lr

080122ae <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 80122ae:	e002      	b.n	80122b6 <memset1+0x8>
    {
        *dst++ = value;
 80122b0:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 80122b4:	461a      	mov	r2, r3
 80122b6:	1e53      	subs	r3, r2, #1
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	2a00      	cmp	r2, #0
 80122bc:	d1f8      	bne.n	80122b0 <memset1+0x2>
    }
}
 80122be:	4770      	bx	lr

080122c0 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80122c0:	b1f0      	cbz	r0, 8012300 <Crc32+0x40>
{
 80122c2:	b510      	push	{r4, lr}
 80122c4:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 80122c6:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 80122ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122ce:	e00e      	b.n	80122ee <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80122d0:	f340 0c00 	sbfx	ip, r0, #0, #1
 80122d4:	4a0b      	ldr	r2, [pc, #44]	; (8012304 <Crc32+0x44>)
 80122d6:	ea0c 0202 	and.w	r2, ip, r2
 80122da:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 80122de:	3301      	adds	r3, #1
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	2b07      	cmp	r3, #7
 80122e4:	d9f4      	bls.n	80122d0 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 80122e6:	f10e 0e01 	add.w	lr, lr, #1
 80122ea:	fa1f fe8e 	uxth.w	lr, lr
 80122ee:	458e      	cmp	lr, r1
 80122f0:	d204      	bcs.n	80122fc <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 80122f2:	f814 300e 	ldrb.w	r3, [r4, lr]
 80122f6:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 80122f8:	2300      	movs	r3, #0
 80122fa:	e7f2      	b.n	80122e2 <Crc32+0x22>
        }
    }

    return ~crc;
 80122fc:	43c0      	mvns	r0, r0
}
 80122fe:	bd10      	pop	{r4, pc}
        return 0;
 8012300:	2000      	movs	r0, #0
}
 8012302:	4770      	bx	lr
 8012304:	edb88320 	.word	0xedb88320

08012308 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8012308:	2001      	movs	r0, #1
 801230a:	4770      	bx	lr

0801230c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 801230c:	280a      	cmp	r0, #10
 801230e:	d807      	bhi.n	8012320 <RadioGetLoRaBandwidthInHz+0x14>
 8012310:	e8df f000 	tbb	[pc, r0]
 8012314:	17110b20 	.word	0x17110b20
 8012318:	061e1c1a 	.word	0x061e1c1a
 801231c:	0e08      	.short	0x0e08
 801231e:	14          	.byte	0x14
 801231f:	00          	.byte	0x00
 8012320:	2000      	movs	r0, #0
 8012322:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8012324:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8012328:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801232a:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 801232e:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8012330:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8012334:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8012336:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 801233a:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801233c:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8012340:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8012342:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8012346:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8012348:	4804      	ldr	r0, [pc, #16]	; (801235c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 801234a:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801234c:	4804      	ldr	r0, [pc, #16]	; (8012360 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 801234e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8012350:	4804      	ldr	r0, [pc, #16]	; (8012364 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8012352:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8012354:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	0001e848 	.word	0x0001e848
 8012360:	0003d090 	.word	0x0003d090
 8012364:	0007a120 	.word	0x0007a120

08012368 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8012368:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 801236c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801236e:	b953      	cbnz	r3, 8012386 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8012370:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8012372:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012374:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8012376:	b141      	cbz	r1, 801238a <RadioGetGfskTimeOnAirNumerator+0x22>
 8012378:	2302      	movs	r3, #2
 801237a:	f89d 0000 	ldrb.w	r0, [sp]
 801237e:	4418      	add	r0, r3
}
 8012380:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8012384:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012386:	2300      	movs	r3, #0
 8012388:	e7f3      	b.n	8012372 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801238a:	2300      	movs	r3, #0
 801238c:	e7f5      	b.n	801237a <RadioGetGfskTimeOnAirNumerator+0x12>

0801238e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801238e:	b570      	push	{r4, r5, r6, lr}
 8012390:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8012394:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8012398:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801239a:	f1a1 0c05 	sub.w	ip, r1, #5
 801239e:	f1bc 0f01 	cmp.w	ip, #1
 80123a2:	d931      	bls.n	8012408 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80123a4:	b918      	cbnz	r0, 80123ae <RadioGetLoRaTimeOnAirNumerator+0x20>
 80123a6:	f1a1 060b 	sub.w	r6, r1, #11
 80123aa:	2e01      	cmp	r6, #1
 80123ac:	d934      	bls.n	8012418 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 80123ae:	2801      	cmp	r0, #1
 80123b0:	d02e      	beq.n	8012410 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 80123b2:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80123b4:	f89d c014 	ldrb.w	ip, [sp, #20]
 80123b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 80123bc:	b385      	cbz	r5, 8012420 <RadioGetLoRaTimeOnAirNumerator+0x92>
 80123be:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80123c0:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 80123c2:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 80123c4:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 80123c8:	b364      	cbz	r4, 8012424 <RadioGetLoRaTimeOnAirNumerator+0x96>
 80123ca:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 80123ce:	44f4      	add	ip, lr

    if( datarate <= 6 )
 80123d0:	2906      	cmp	r1, #6
 80123d2:	d904      	bls.n	80123de <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 80123d4:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 80123d8:	b10e      	cbz	r6, 80123de <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80123da:	1e88      	subs	r0, r1, #2
 80123dc:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 80123de:	f1bc 0f00 	cmp.w	ip, #0
 80123e2:	db22      	blt.n	801242a <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80123e4:	4484      	add	ip, r0
 80123e6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80123ea:	fb9c fcf0 	sdiv	ip, ip, r0
 80123ee:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 80123f2:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 80123f6:	2906      	cmp	r1, #6
 80123f8:	d801      	bhi.n	80123fe <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 80123fa:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80123fe:	0080      	lsls	r0, r0, #2
 8012400:	3001      	adds	r0, #1
 8012402:	3902      	subs	r1, #2
}
 8012404:	4088      	lsls	r0, r1
 8012406:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8012408:	2b0b      	cmp	r3, #11
 801240a:	d8cb      	bhi.n	80123a4 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 801240c:	230c      	movs	r3, #12
 801240e:	e7c9      	b.n	80123a4 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012410:	290c      	cmp	r1, #12
 8012412:	d003      	beq.n	801241c <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8012414:	2600      	movs	r6, #0
 8012416:	e7cd      	b.n	80123b4 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8012418:	2601      	movs	r6, #1
 801241a:	e7cb      	b.n	80123b4 <RadioGetLoRaTimeOnAirNumerator+0x26>
 801241c:	2601      	movs	r6, #1
 801241e:	e7c9      	b.n	80123b4 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8012420:	2000      	movs	r0, #0
 8012422:	e7cd      	b.n	80123c0 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8012424:	f04f 0e14 	mov.w	lr, #20
 8012428:	e7d1      	b.n	80123ce <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 801242a:	f04f 0c00 	mov.w	ip, #0
 801242e:	e7d9      	b.n	80123e4 <RadioGetLoRaTimeOnAirNumerator+0x56>

08012430 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8012430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012432:	b085      	sub	sp, #20
 8012434:	460e      	mov	r6, r1
 8012436:	4615      	mov	r5, r2
 8012438:	4619      	mov	r1, r3
 801243a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801243e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012442:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8012446:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 801244a:	b148      	cbz	r0, 8012460 <RadioTimeOnAir+0x30>
 801244c:	2801      	cmp	r0, #1
 801244e:	d012      	beq.n	8012476 <RadioTimeOnAir+0x46>
 8012450:	2501      	movs	r5, #1
 8012452:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8012454:	442c      	add	r4, r5
 8012456:	1e60      	subs	r0, r4, #1
}
 8012458:	fbb0 f0f5 	udiv	r0, r0, r5
 801245c:	b005      	add	sp, #20
 801245e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8012460:	f8cd c004 	str.w	ip, [sp, #4]
 8012464:	9700      	str	r7, [sp, #0]
 8012466:	4628      	mov	r0, r5
 8012468:	f7ff ff7e 	bl	8012368 <RadioGetGfskTimeOnAirNumerator>
 801246c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012470:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8012474:	e7ee      	b.n	8012454 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8012476:	f8cd c008 	str.w	ip, [sp, #8]
 801247a:	9701      	str	r7, [sp, #4]
 801247c:	9300      	str	r3, [sp, #0]
 801247e:	4613      	mov	r3, r2
 8012480:	460a      	mov	r2, r1
 8012482:	4629      	mov	r1, r5
 8012484:	4630      	mov	r0, r6
 8012486:	f7ff ff82 	bl	801238e <RadioGetLoRaTimeOnAirNumerator>
 801248a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801248e:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8012492:	4b03      	ldr	r3, [pc, #12]	; (80124a0 <RadioTimeOnAir+0x70>)
 8012494:	5d98      	ldrb	r0, [r3, r6]
 8012496:	f7ff ff39 	bl	801230c <RadioGetLoRaBandwidthInHz>
 801249a:	4605      	mov	r5, r0
        break;
 801249c:	e7da      	b.n	8012454 <RadioTimeOnAir+0x24>
 801249e:	bf00      	nop
 80124a0:	0801a228 	.word	0x0801a228

080124a4 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80124a4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80124a6:	4b05      	ldr	r3, [pc, #20]	; (80124bc <RadioOnTxTimeoutProcess+0x18>)
 80124a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80124ac:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80124ae:	4b04      	ldr	r3, [pc, #16]	; (80124c0 <RadioOnTxTimeoutProcess+0x1c>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	b113      	cbz	r3, 80124ba <RadioOnTxTimeoutProcess+0x16>
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	b103      	cbz	r3, 80124ba <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 80124b8:	4798      	blx	r3
    }
}
 80124ba:	bd08      	pop	{r3, pc}
 80124bc:	48000400 	.word	0x48000400
 80124c0:	20001688 	.word	0x20001688

080124c4 <RadioOnTxTimeoutIrq>:
{
 80124c4:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 80124c6:	f7ff ffed 	bl	80124a4 <RadioOnTxTimeoutProcess>
}
 80124ca:	bd08      	pop	{r3, pc}

080124cc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80124cc:	b508      	push	{r3, lr}
 80124ce:	4b05      	ldr	r3, [pc, #20]	; (80124e4 <RadioOnRxTimeoutProcess+0x18>)
 80124d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80124d4:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80124d6:	4b04      	ldr	r3, [pc, #16]	; (80124e8 <RadioOnRxTimeoutProcess+0x1c>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	b113      	cbz	r3, 80124e2 <RadioOnRxTimeoutProcess+0x16>
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	b103      	cbz	r3, 80124e2 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 80124e0:	4798      	blx	r3
    }
}
 80124e2:	bd08      	pop	{r3, pc}
 80124e4:	48000400 	.word	0x48000400
 80124e8:	20001688 	.word	0x20001688

080124ec <RadioOnRxTimeoutIrq>:
{
 80124ec:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 80124ee:	f7ff ffed 	bl	80124cc <RadioOnRxTimeoutProcess>
}
 80124f2:	bd08      	pop	{r3, pc}

080124f4 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80124f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124f8:	4770      	bx	lr

080124fa <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80124fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124fe:	4770      	bx	lr

08012500 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8012500:	2001      	movs	r0, #1
 8012502:	4770      	bx	lr

08012504 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8012504:	2001      	movs	r0, #1
 8012506:	4770      	bx	lr

08012508 <RadioWrite>:
{
 8012508:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 801250a:	f000 fe37 	bl	801317c <SUBGRF_WriteRegister>
}
 801250e:	bd08      	pop	{r3, pc}

08012510 <RadioTxCw>:
{
 8012510:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8012512:	f001 fbcf 	bl	8013cb4 <SUBGRF_SetRfTxPower>
 8012516:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8012518:	210e      	movs	r1, #14
 801251a:	f640 101f 	movw	r0, #2335	; 0x91f
 801251e:	f000 fe2d 	bl	801317c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8012522:	2101      	movs	r1, #1
 8012524:	4620      	mov	r0, r4
 8012526:	f001 fbb1 	bl	8013c8c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801252a:	f000 fff7 	bl	801351c <SUBGRF_SetTxContinuousWave>
}
 801252e:	bd10      	pop	{r4, pc}

08012530 <RadioTxPrbs>:
{
 8012530:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8012532:	2101      	movs	r1, #1
 8012534:	4b07      	ldr	r3, [pc, #28]	; (8012554 <RadioTxPrbs+0x24>)
 8012536:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801253a:	f001 fba7 	bl	8013c8c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801253e:	212d      	movs	r1, #45	; 0x2d
 8012540:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012544:	f7ff ffe0 	bl	8012508 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8012548:	f000 ffef 	bl	801352a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801254c:	4802      	ldr	r0, [pc, #8]	; (8012558 <RadioTxPrbs+0x28>)
 801254e:	f000 ff25 	bl	801339c <SUBGRF_SetTx>
}
 8012552:	bd08      	pop	{r3, pc}
 8012554:	200016a4 	.word	0x200016a4
 8012558:	000fffff 	.word	0x000fffff

0801255c <RadioSetRxDutyCycle>:
{
 801255c:	b570      	push	{r4, r5, r6, lr}
 801255e:	4604      	mov	r4, r0
 8012560:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8012562:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8012566:	4e09      	ldr	r6, [pc, #36]	; (801258c <RadioSetRxDutyCycle+0x30>)
 8012568:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801256a:	2300      	movs	r3, #0
 801256c:	461a      	mov	r2, r3
 801256e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012572:	4608      	mov	r0, r1
 8012574:	f001 f8a5 	bl	80136c2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8012578:	2100      	movs	r1, #0
 801257a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801257e:	f001 fb85 	bl	8013c8c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8012582:	4629      	mov	r1, r5
 8012584:	4620      	mov	r0, r4
 8012586:	f000 ff99 	bl	80134bc <SUBGRF_SetRxDutyCycle>
}
 801258a:	bd70      	pop	{r4, r5, r6, pc}
 801258c:	200016a4 	.word	0x200016a4

08012590 <RadioRxBoosted>:
{
 8012590:	b538      	push	{r3, r4, r5, lr}
 8012592:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8012594:	f001 fc69 	bl	8013e6a <RFW_Is_Init>
 8012598:	2801      	cmp	r0, #1
 801259a:	d019      	beq.n	80125d0 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801259c:	2300      	movs	r3, #0
 801259e:	461a      	mov	r2, r3
 80125a0:	f240 2162 	movw	r1, #610	; 0x262
 80125a4:	4608      	mov	r0, r1
 80125a6:	f001 f88c 	bl	80136c2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80125aa:	b9a4      	cbnz	r4, 80125d6 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80125ac:	4c11      	ldr	r4, [pc, #68]	; (80125f4 <RadioRxBoosted+0x64>)
 80125ae:	2100      	movs	r1, #0
 80125b0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80125b2:	4b11      	ldr	r3, [pc, #68]	; (80125f8 <RadioRxBoosted+0x68>)
 80125b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80125b8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80125ba:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80125be:	f001 fb65 	bl	8013c8c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80125c2:	7863      	ldrb	r3, [r4, #1]
 80125c4:	b183      	cbz	r3, 80125e8 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80125c6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80125ca:	f000 ff59 	bl	8013480 <SUBGRF_SetRxBoosted>
}
 80125ce:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 80125d0:	f001 fc53 	bl	8013e7a <RFW_ReceiveInit>
 80125d4:	e7e9      	b.n	80125aa <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80125d6:	4d09      	ldr	r5, [pc, #36]	; (80125fc <RadioRxBoosted+0x6c>)
 80125d8:	4621      	mov	r1, r4
 80125da:	4628      	mov	r0, r5
 80125dc:	f002 f862 	bl	80146a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80125e0:	4628      	mov	r0, r5
 80125e2:	f002 f819 	bl	8014618 <UTIL_TIMER_Start>
 80125e6:	e7e1      	b.n	80125ac <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80125e8:	4b02      	ldr	r3, [pc, #8]	; (80125f4 <RadioRxBoosted+0x64>)
 80125ea:	6898      	ldr	r0, [r3, #8]
 80125ec:	0180      	lsls	r0, r0, #6
 80125ee:	f000 ff47 	bl	8013480 <SUBGRF_SetRxBoosted>
}
 80125f2:	e7ec      	b.n	80125ce <RadioRxBoosted+0x3e>
 80125f4:	200016a4 	.word	0x200016a4
 80125f8:	48000400 	.word	0x48000400
 80125fc:	2000168c 	.word	0x2000168c

08012600 <RadioStandby>:
{
 8012600:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8012602:	2000      	movs	r0, #0
 8012604:	f000 feb0 	bl	8013368 <SUBGRF_SetStandby>
}
 8012608:	bd08      	pop	{r3, pc}

0801260a <RadioRead>:
{
 801260a:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 801260c:	f000 fdc6 	bl	801319c <SUBGRF_ReadRegister>
}
 8012610:	bd08      	pop	{r3, pc}

08012612 <RadioGetStatus>:
{
 8012612:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8012614:	f000 fda6 	bl	8013164 <SUBGRF_GetOperatingMode>
 8012618:	2805      	cmp	r0, #5
 801261a:	d007      	beq.n	801262c <RadioGetStatus+0x1a>
 801261c:	2807      	cmp	r0, #7
 801261e:	d007      	beq.n	8012630 <RadioGetStatus+0x1e>
 8012620:	2804      	cmp	r0, #4
 8012622:	d001      	beq.n	8012628 <RadioGetStatus+0x16>
            return RF_IDLE;
 8012624:	2000      	movs	r0, #0
}
 8012626:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8012628:	2002      	movs	r0, #2
 801262a:	e7fc      	b.n	8012626 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 801262c:	2001      	movs	r0, #1
 801262e:	e7fa      	b.n	8012626 <RadioGetStatus+0x14>
            return RF_CAD;
 8012630:	2003      	movs	r0, #3
 8012632:	e7f8      	b.n	8012626 <RadioGetStatus+0x14>

08012634 <RadioIrqProcess>:
{
 8012634:	b530      	push	{r4, r5, lr}
 8012636:	b083      	sub	sp, #12
    uint8_t size = 0;
 8012638:	2300      	movs	r3, #0
 801263a:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 801263e:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8012640:	4ba5      	ldr	r3, [pc, #660]	; (80128d8 <RadioIrqProcess+0x2a4>)
 8012642:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8012646:	2b20      	cmp	r3, #32
 8012648:	d829      	bhi.n	801269e <RadioIrqProcess+0x6a>
 801264a:	b21a      	sxth	r2, r3
 801264c:	2a00      	cmp	r2, #0
 801264e:	f000 8140 	beq.w	80128d2 <RadioIrqProcess+0x29e>
 8012652:	3b01      	subs	r3, #1
 8012654:	2b1f      	cmp	r3, #31
 8012656:	f200 813c 	bhi.w	80128d2 <RadioIrqProcess+0x29e>
 801265a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801265e:	0063      	.short	0x0063
 8012660:	013a007f 	.word	0x013a007f
 8012664:	013a00f7 	.word	0x013a00f7
 8012668:	013a013a 	.word	0x013a013a
 801266c:	013a0127 	.word	0x013a0127
 8012670:	013a013a 	.word	0x013a013a
 8012674:	013a013a 	.word	0x013a013a
 8012678:	013a013a 	.word	0x013a013a
 801267c:	013a0134 	.word	0x013a0134
 8012680:	013a013a 	.word	0x013a013a
 8012684:	013a013a 	.word	0x013a013a
 8012688:	013a013a 	.word	0x013a013a
 801268c:	013a013a 	.word	0x013a013a
 8012690:	013a013a 	.word	0x013a013a
 8012694:	013a013a 	.word	0x013a013a
 8012698:	013a013a 	.word	0x013a013a
 801269c:	0155      	.short	0x0155
 801269e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80126a2:	f000 80b3 	beq.w	801280c <RadioIrqProcess+0x1d8>
 80126a6:	d928      	bls.n	80126fa <RadioIrqProcess+0xc6>
 80126a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126ac:	f040 8111 	bne.w	80128d2 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80126b0:	4b8a      	ldr	r3, [pc, #552]	; (80128dc <RadioIrqProcess+0x2a8>)
 80126b2:	2201      	movs	r2, #1
 80126b4:	2100      	movs	r1, #0
 80126b6:	2002      	movs	r0, #2
 80126b8:	f001 fcbe 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80126bc:	f000 fd52 	bl	8013164 <SUBGRF_GetOperatingMode>
 80126c0:	2804      	cmp	r0, #4
 80126c2:	f000 80b0 	beq.w	8012826 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80126c6:	f000 fd4d 	bl	8013164 <SUBGRF_GetOperatingMode>
 80126ca:	2805      	cmp	r0, #5
 80126cc:	f040 8101 	bne.w	80128d2 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 80126d0:	4b83      	ldr	r3, [pc, #524]	; (80128e0 <RadioIrqProcess+0x2ac>)
 80126d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80126d6:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 80126d8:	4882      	ldr	r0, [pc, #520]	; (80128e4 <RadioIrqProcess+0x2b0>)
 80126da:	f001 ff43 	bl	8014564 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80126de:	2000      	movs	r0, #0
 80126e0:	f000 fe42 	bl	8013368 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80126e4:	4b80      	ldr	r3, [pc, #512]	; (80128e8 <RadioIrqProcess+0x2b4>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 80f2 	beq.w	80128d2 <RadioIrqProcess+0x29e>
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	f000 80ee 	beq.w	80128d2 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 80126f6:	4798      	blx	r3
 80126f8:	e0eb      	b.n	80128d2 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 80126fa:	2b40      	cmp	r3, #64	; 0x40
 80126fc:	f000 811d 	beq.w	801293a <RadioIrqProcess+0x306>
 8012700:	2b80      	cmp	r3, #128	; 0x80
 8012702:	f040 80e6 	bne.w	80128d2 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8012706:	2000      	movs	r0, #0
 8012708:	f000 fe2e 	bl	8013368 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801270c:	4b76      	ldr	r3, [pc, #472]	; (80128e8 <RadioIrqProcess+0x2b4>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	2b00      	cmp	r3, #0
 8012712:	f000 80de 	beq.w	80128d2 <RadioIrqProcess+0x29e>
 8012716:	699b      	ldr	r3, [r3, #24]
 8012718:	2b00      	cmp	r3, #0
 801271a:	f000 80da 	beq.w	80128d2 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 801271e:	2000      	movs	r0, #0
 8012720:	4798      	blx	r3
 8012722:	e0d6      	b.n	80128d2 <RadioIrqProcess+0x29e>
 8012724:	4b6e      	ldr	r3, [pc, #440]	; (80128e0 <RadioIrqProcess+0x2ac>)
 8012726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801272a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 801272c:	486f      	ldr	r0, [pc, #444]	; (80128ec <RadioIrqProcess+0x2b8>)
 801272e:	f001 ff19 	bl	8014564 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8012732:	2000      	movs	r0, #0
 8012734:	f000 fe18 	bl	8013368 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8012738:	f001 fb99 	bl	8013e6e <RFW_Is_LongPacketModeEnabled>
 801273c:	2801      	cmp	r0, #1
 801273e:	d00a      	beq.n	8012756 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8012740:	4b69      	ldr	r3, [pc, #420]	; (80128e8 <RadioIrqProcess+0x2b4>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	f000 80c4 	beq.w	80128d2 <RadioIrqProcess+0x29e>
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	f000 80c0 	beq.w	80128d2 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8012752:	4798      	blx	r3
 8012754:	e0bd      	b.n	80128d2 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8012756:	f001 fb93 	bl	8013e80 <RFW_DeInit_TxLongPacket>
 801275a:	e7f1      	b.n	8012740 <RadioIrqProcess+0x10c>
 801275c:	4b60      	ldr	r3, [pc, #384]	; (80128e0 <RadioIrqProcess+0x2ac>)
 801275e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012762:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8012764:	485f      	ldr	r0, [pc, #380]	; (80128e4 <RadioIrqProcess+0x2b0>)
 8012766:	f001 fefd 	bl	8014564 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801276a:	4b5b      	ldr	r3, [pc, #364]	; (80128d8 <RadioIrqProcess+0x2a4>)
 801276c:	785b      	ldrb	r3, [r3, #1]
 801276e:	b303      	cbz	r3, 80127b2 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8012770:	22ff      	movs	r2, #255	; 0xff
 8012772:	f10d 0107 	add.w	r1, sp, #7
 8012776:	485e      	ldr	r0, [pc, #376]	; (80128f0 <RadioIrqProcess+0x2bc>)
 8012778:	f001 fa32 	bl	8013be0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801277c:	485d      	ldr	r0, [pc, #372]	; (80128f4 <RadioIrqProcess+0x2c0>)
 801277e:	f001 fa49 	bl	8013c14 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8012782:	4b59      	ldr	r3, [pc, #356]	; (80128e8 <RadioIrqProcess+0x2b4>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	f000 80a3 	beq.w	80128d2 <RadioIrqProcess+0x29e>
 801278c:	689c      	ldr	r4, [r3, #8]
 801278e:	2c00      	cmp	r4, #0
 8012790:	f000 809f 	beq.w	80128d2 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8012794:	4b50      	ldr	r3, [pc, #320]	; (80128d8 <RadioIrqProcess+0x2a4>)
 8012796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801279a:	2b01      	cmp	r3, #1
 801279c:	d11d      	bne.n	80127da <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801279e:	4a4e      	ldr	r2, [pc, #312]	; (80128d8 <RadioIrqProcess+0x2a4>)
 80127a0:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 80127a4:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 80127a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80127ac:	4850      	ldr	r0, [pc, #320]	; (80128f0 <RadioIrqProcess+0x2bc>)
 80127ae:	47a0      	blx	r4
                break;
 80127b0:	e08f      	b.n	80128d2 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80127b2:	2000      	movs	r0, #0
 80127b4:	f000 fdd8 	bl	8013368 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80127b8:	2100      	movs	r1, #0
 80127ba:	f640 1002 	movw	r0, #2306	; 0x902
 80127be:	f000 fcdd 	bl	801317c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80127c2:	f640 1044 	movw	r0, #2372	; 0x944
 80127c6:	f000 fce9 	bl	801319c <SUBGRF_ReadRegister>
 80127ca:	f040 0102 	orr.w	r1, r0, #2
 80127ce:	b2c9      	uxtb	r1, r1
 80127d0:	f640 1044 	movw	r0, #2372	; 0x944
 80127d4:	f000 fcd2 	bl	801317c <SUBGRF_WriteRegister>
 80127d8:	e7ca      	b.n	8012770 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80127da:	4c3f      	ldr	r4, [pc, #252]	; (80128d8 <RadioIrqProcess+0x2a4>)
 80127dc:	4669      	mov	r1, sp
 80127de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80127e0:	f001 faf8 	bl	8013dd4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80127e4:	4b40      	ldr	r3, [pc, #256]	; (80128e8 <RadioIrqProcess+0x2b4>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	689d      	ldr	r5, [r3, #8]
 80127ea:	9b00      	ldr	r3, [sp, #0]
 80127ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80127f0:	4a41      	ldr	r2, [pc, #260]	; (80128f8 <RadioIrqProcess+0x2c4>)
 80127f2:	fb82 1203 	smull	r1, r2, r2, r3
 80127f6:	17db      	asrs	r3, r3, #31
 80127f8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80127fc:	b25b      	sxtb	r3, r3
 80127fe:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8012802:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012806:	483a      	ldr	r0, [pc, #232]	; (80128f0 <RadioIrqProcess+0x2bc>)
 8012808:	47a8      	blx	r5
                break;
 801280a:	e062      	b.n	80128d2 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 801280c:	2000      	movs	r0, #0
 801280e:	f000 fdab 	bl	8013368 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8012812:	4b35      	ldr	r3, [pc, #212]	; (80128e8 <RadioIrqProcess+0x2b4>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d05b      	beq.n	80128d2 <RadioIrqProcess+0x29e>
 801281a:	699b      	ldr	r3, [r3, #24]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d058      	beq.n	80128d2 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8012820:	2001      	movs	r0, #1
 8012822:	4798      	blx	r3
 8012824:	e055      	b.n	80128d2 <RadioIrqProcess+0x29e>
 8012826:	4b2e      	ldr	r3, [pc, #184]	; (80128e0 <RadioIrqProcess+0x2ac>)
 8012828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801282c:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 801282e:	482f      	ldr	r0, [pc, #188]	; (80128ec <RadioIrqProcess+0x2b8>)
 8012830:	f001 fe98 	bl	8014564 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8012834:	2000      	movs	r0, #0
 8012836:	f000 fd97 	bl	8013368 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801283a:	4b2b      	ldr	r3, [pc, #172]	; (80128e8 <RadioIrqProcess+0x2b4>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d047      	beq.n	80128d2 <RadioIrqProcess+0x29e>
 8012842:	685b      	ldr	r3, [r3, #4]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d044      	beq.n	80128d2 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8012848:	4798      	blx	r3
 801284a:	e042      	b.n	80128d2 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801284c:	4b2b      	ldr	r3, [pc, #172]	; (80128fc <RadioIrqProcess+0x2c8>)
 801284e:	2201      	movs	r2, #1
 8012850:	2100      	movs	r1, #0
 8012852:	2002      	movs	r0, #2
 8012854:	f001 fbf0 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8012858:	4b1f      	ldr	r3, [pc, #124]	; (80128d8 <RadioIrqProcess+0x2a4>)
 801285a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801285c:	b3c9      	cbz	r1, 80128d2 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801285e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8012862:	f640 1003 	movw	r0, #2307	; 0x903
 8012866:	f7ff fe4f 	bl	8012508 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801286a:	4c1b      	ldr	r4, [pc, #108]	; (80128d8 <RadioIrqProcess+0x2a4>)
 801286c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8012870:	f640 1004 	movw	r0, #2308	; 0x904
 8012874:	f7ff fe48 	bl	8012508 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8012878:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 801287c:	f640 1005 	movw	r0, #2309	; 0x905
 8012880:	f7ff fe42 	bl	8012508 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8012884:	f640 1002 	movw	r0, #2306	; 0x902
 8012888:	f7ff febf 	bl	801260a <RadioRead>
 801288c:	f040 0101 	orr.w	r1, r0, #1
 8012890:	b2c9      	uxtb	r1, r1
 8012892:	f640 1002 	movw	r0, #2306	; 0x902
 8012896:	f7ff fe37 	bl	8012508 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801289a:	2200      	movs	r2, #0
 801289c:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801289e:	4613      	mov	r3, r2
 80128a0:	f240 2162 	movw	r1, #610	; 0x262
 80128a4:	4608      	mov	r0, r1
 80128a6:	f000 ff0c 	bl	80136c2 <SUBGRF_SetDioIrqParams>
 80128aa:	e012      	b.n	80128d2 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80128ac:	4b14      	ldr	r3, [pc, #80]	; (8012900 <RadioIrqProcess+0x2cc>)
 80128ae:	2201      	movs	r2, #1
 80128b0:	2100      	movs	r1, #0
 80128b2:	2002      	movs	r0, #2
 80128b4:	f001 fbc0 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80128b8:	f001 fad7 	bl	8013e6a <RFW_Is_Init>
 80128bc:	2801      	cmp	r0, #1
 80128be:	d108      	bne.n	80128d2 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 80128c0:	f001 fadf 	bl	8013e82 <RFW_ReceivePayload>
 80128c4:	e005      	b.n	80128d2 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80128c6:	4b0f      	ldr	r3, [pc, #60]	; (8012904 <RadioIrqProcess+0x2d0>)
 80128c8:	2201      	movs	r2, #1
 80128ca:	2100      	movs	r1, #0
 80128cc:	2002      	movs	r0, #2
 80128ce:	f001 fbb3 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
}
 80128d2:	b003      	add	sp, #12
 80128d4:	bd30      	pop	{r4, r5, pc}
 80128d6:	bf00      	nop
 80128d8:	200016a4 	.word	0x200016a4
 80128dc:	0801a1bc 	.word	0x0801a1bc
 80128e0:	48000400 	.word	0x48000400
 80128e4:	2000168c 	.word	0x2000168c
 80128e8:	20001688 	.word	0x20001688
 80128ec:	20001700 	.word	0x20001700
 80128f0:	20001588 	.word	0x20001588
 80128f4:	200016c8 	.word	0x200016c8
 80128f8:	10624dd3 	.word	0x10624dd3
 80128fc:	0801a1d0 	.word	0x0801a1d0
 8012900:	0801a1dc 	.word	0x0801a1dc
 8012904:	0801a1e8 	.word	0x0801a1e8
        TimerStop( &RxTimeoutTimer );
 8012908:	4817      	ldr	r0, [pc, #92]	; (8012968 <RadioIrqProcess+0x334>)
 801290a:	f001 fe2b 	bl	8014564 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801290e:	4b17      	ldr	r3, [pc, #92]	; (801296c <RadioIrqProcess+0x338>)
 8012910:	785b      	ldrb	r3, [r3, #1]
 8012912:	b173      	cbz	r3, 8012932 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8012914:	4b16      	ldr	r3, [pc, #88]	; (8012970 <RadioIrqProcess+0x33c>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d0da      	beq.n	80128d2 <RadioIrqProcess+0x29e>
 801291c:	68db      	ldr	r3, [r3, #12]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d0d7      	beq.n	80128d2 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8012922:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8012924:	4b13      	ldr	r3, [pc, #76]	; (8012974 <RadioIrqProcess+0x340>)
 8012926:	2201      	movs	r2, #1
 8012928:	2100      	movs	r1, #0
 801292a:	2002      	movs	r0, #2
 801292c:	f001 fb84 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
 8012930:	e7cf      	b.n	80128d2 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8012932:	2000      	movs	r0, #0
 8012934:	f000 fd18 	bl	8013368 <SUBGRF_SetStandby>
 8012938:	e7ec      	b.n	8012914 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801293a:	4b0f      	ldr	r3, [pc, #60]	; (8012978 <RadioIrqProcess+0x344>)
 801293c:	2201      	movs	r2, #1
 801293e:	2100      	movs	r1, #0
 8012940:	2002      	movs	r0, #2
 8012942:	f001 fb79 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8012946:	4b09      	ldr	r3, [pc, #36]	; (801296c <RadioIrqProcess+0x338>)
 8012948:	785b      	ldrb	r3, [r3, #1]
 801294a:	b143      	cbz	r3, 801295e <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801294c:	4b08      	ldr	r3, [pc, #32]	; (8012970 <RadioIrqProcess+0x33c>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d0be      	beq.n	80128d2 <RadioIrqProcess+0x29e>
 8012954:	691b      	ldr	r3, [r3, #16]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d0bb      	beq.n	80128d2 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 801295a:	4798      	blx	r3
}
 801295c:	e7b9      	b.n	80128d2 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801295e:	2000      	movs	r0, #0
 8012960:	f000 fd02 	bl	8013368 <SUBGRF_SetStandby>
 8012964:	e7f2      	b.n	801294c <RadioIrqProcess+0x318>
 8012966:	bf00      	nop
 8012968:	2000168c 	.word	0x2000168c
 801296c:	200016a4 	.word	0x200016a4
 8012970:	20001688 	.word	0x20001688
 8012974:	0801a1f4 	.word	0x0801a1f4
 8012978:	0801a200 	.word	0x0801a200

0801297c <RadioOnDioIrq>:
{
 801297c:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 801297e:	4b03      	ldr	r3, [pc, #12]	; (801298c <RadioOnDioIrq+0x10>)
 8012980:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8012984:	f7ff fe56 	bl	8012634 <RadioIrqProcess>
}
 8012988:	bd08      	pop	{r3, pc}
 801298a:	bf00      	nop
 801298c:	200016a4 	.word	0x200016a4

08012990 <RadioGetWakeupTime>:
{
 8012990:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8012992:	f001 f9a6 	bl	8013ce2 <SUBGRF_GetRadioWakeUpTime>
}
 8012996:	3003      	adds	r0, #3
 8012998:	bd08      	pop	{r3, pc}
	...

0801299c <RadioSetMaxPayloadLength>:
{
 801299c:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 801299e:	2801      	cmp	r0, #1
 80129a0:	d004      	beq.n	80129ac <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80129a2:	4b0a      	ldr	r3, [pc, #40]	; (80129cc <RadioSetMaxPayloadLength+0x30>)
 80129a4:	7d5b      	ldrb	r3, [r3, #21]
 80129a6:	2b01      	cmp	r3, #1
 80129a8:	d008      	beq.n	80129bc <RadioSetMaxPayloadLength+0x20>
}
 80129aa:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80129ac:	4b08      	ldr	r3, [pc, #32]	; (80129d0 <RadioSetMaxPayloadLength+0x34>)
 80129ae:	7019      	strb	r1, [r3, #0]
 80129b0:	4806      	ldr	r0, [pc, #24]	; (80129cc <RadioSetMaxPayloadLength+0x30>)
 80129b2:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80129b4:	300e      	adds	r0, #14
 80129b6:	f001 f853 	bl	8013a60 <SUBGRF_SetPacketParams>
 80129ba:	e7f6      	b.n	80129aa <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80129bc:	4b04      	ldr	r3, [pc, #16]	; (80129d0 <RadioSetMaxPayloadLength+0x34>)
 80129be:	7019      	strb	r1, [r3, #0]
 80129c0:	4802      	ldr	r0, [pc, #8]	; (80129cc <RadioSetMaxPayloadLength+0x30>)
 80129c2:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80129c4:	300e      	adds	r0, #14
 80129c6:	f001 f84b 	bl	8013a60 <SUBGRF_SetPacketParams>
}
 80129ca:	e7ee      	b.n	80129aa <RadioSetMaxPayloadLength+0xe>
 80129cc:	200016a4 	.word	0x200016a4
 80129d0:	2000021c 	.word	0x2000021c

080129d4 <RadioReadRegisters>:
{
 80129d4:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 80129d6:	f000 fc5f 	bl	8013298 <SUBGRF_ReadRegisters>
}
 80129da:	bd08      	pop	{r3, pc}

080129dc <RadioWriteRegisters>:
{
 80129dc:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80129de:	f000 fc19 	bl	8013214 <SUBGRF_WriteRegisters>
}
 80129e2:	bd08      	pop	{r3, pc}

080129e4 <RadioRssi>:
{
 80129e4:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80129e6:	f001 f8cb 	bl	8013b80 <SUBGRF_GetRssiInst>
}
 80129ea:	b200      	sxth	r0, r0
 80129ec:	bd08      	pop	{r3, pc}
	...

080129f0 <RadioSetTxContinuousWave>:
{
 80129f0:	b538      	push	{r3, r4, r5, lr}
 80129f2:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80129f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80129f8:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 80129fc:	f000 fed4 	bl	80137a8 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8012a00:	4628      	mov	r0, r5
 8012a02:	f001 f957 	bl	8013cb4 <SUBGRF_SetRfTxPower>
 8012a06:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8012a08:	210e      	movs	r1, #14
 8012a0a:	f640 101f 	movw	r0, #2335	; 0x91f
 8012a0e:	f000 fbb5 	bl	801317c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8012a12:	2101      	movs	r1, #1
 8012a14:	4628      	mov	r0, r5
 8012a16:	f001 f939 	bl	8013c8c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8012a1a:	f000 fd7f 	bl	801351c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8012a1e:	4d04      	ldr	r5, [pc, #16]	; (8012a30 <RadioSetTxContinuousWave+0x40>)
 8012a20:	4621      	mov	r1, r4
 8012a22:	4628      	mov	r0, r5
 8012a24:	f001 fe3e 	bl	80146a4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8012a28:	4628      	mov	r0, r5
 8012a2a:	f001 fdf5 	bl	8014618 <UTIL_TIMER_Start>
}
 8012a2e:	bd38      	pop	{r3, r4, r5, pc}
 8012a30:	20001700 	.word	0x20001700

08012a34 <RadioSetChannel>:
{
 8012a34:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8012a36:	f000 feb7 	bl	80137a8 <SUBGRF_SetRfFrequency>
}
 8012a3a:	bd08      	pop	{r3, pc}

08012a3c <RadioStartCad>:
{
 8012a3c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8012a3e:	2100      	movs	r1, #0
 8012a40:	4b07      	ldr	r3, [pc, #28]	; (8012a60 <RadioStartCad+0x24>)
 8012a42:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8012a46:	f001 f921 	bl	8013c8c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012a52:	4608      	mov	r0, r1
 8012a54:	f000 fe35 	bl	80136c2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8012a58:	f000 fd54 	bl	8013504 <SUBGRF_SetCad>
}
 8012a5c:	bd08      	pop	{r3, pc}
 8012a5e:	bf00      	nop
 8012a60:	200016a4 	.word	0x200016a4

08012a64 <RadioRx>:
{
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8012a68:	f001 f9ff 	bl	8013e6a <RFW_Is_Init>
 8012a6c:	2801      	cmp	r0, #1
 8012a6e:	d019      	beq.n	8012aa4 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8012a70:	2300      	movs	r3, #0
 8012a72:	461a      	mov	r2, r3
 8012a74:	f240 2162 	movw	r1, #610	; 0x262
 8012a78:	4608      	mov	r0, r1
 8012a7a:	f000 fe22 	bl	80136c2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8012a7e:	b9a4      	cbnz	r4, 8012aaa <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8012a80:	4c11      	ldr	r4, [pc, #68]	; (8012ac8 <RadioRx+0x64>)
 8012a82:	2100      	movs	r1, #0
 8012a84:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8012a86:	4b11      	ldr	r3, [pc, #68]	; (8012acc <RadioRx+0x68>)
 8012a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012a8c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8012a8e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8012a92:	f001 f8fb 	bl	8013c8c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8012a96:	7863      	ldrb	r3, [r4, #1]
 8012a98:	b183      	cbz	r3, 8012abc <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8012a9a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012a9e:	f000 fc9f 	bl	80133e0 <SUBGRF_SetRx>
}
 8012aa2:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8012aa4:	f001 f9e9 	bl	8013e7a <RFW_ReceiveInit>
 8012aa8:	e7e9      	b.n	8012a7e <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8012aaa:	4d09      	ldr	r5, [pc, #36]	; (8012ad0 <RadioRx+0x6c>)
 8012aac:	4621      	mov	r1, r4
 8012aae:	4628      	mov	r0, r5
 8012ab0:	f001 fdf8 	bl	80146a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8012ab4:	4628      	mov	r0, r5
 8012ab6:	f001 fdaf 	bl	8014618 <UTIL_TIMER_Start>
 8012aba:	e7e1      	b.n	8012a80 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8012abc:	4b02      	ldr	r3, [pc, #8]	; (8012ac8 <RadioRx+0x64>)
 8012abe:	6898      	ldr	r0, [r3, #8]
 8012ac0:	0180      	lsls	r0, r0, #6
 8012ac2:	f000 fc8d 	bl	80133e0 <SUBGRF_SetRx>
}
 8012ac6:	e7ec      	b.n	8012aa2 <RadioRx+0x3e>
 8012ac8:	200016a4 	.word	0x200016a4
 8012acc:	48000400 	.word	0x48000400
 8012ad0:	2000168c 	.word	0x2000168c

08012ad4 <RadioSleep>:
{
 8012ad4:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8012ad6:	f04f 0004 	mov.w	r0, #4
 8012ada:	f000 fc25 	bl	8013328 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8012ade:	2002      	movs	r0, #2
 8012ae0:	f7ef faaa 	bl	8002038 <HAL_Delay>
}
 8012ae4:	bd08      	pop	{r3, pc}
	...

08012ae8 <RadioSend>:
{
 8012ae8:	b570      	push	{r4, r5, r6, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	4605      	mov	r5, r0
 8012aee:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8012af0:	2300      	movs	r3, #0
 8012af2:	461a      	mov	r2, r3
 8012af4:	f240 2101 	movw	r1, #513	; 0x201
 8012af8:	4608      	mov	r0, r1
 8012afa:	f000 fde2 	bl	80136c2 <SUBGRF_SetDioIrqParams>
 8012afe:	4b3f      	ldr	r3, [pc, #252]	; (8012bfc <RadioSend+0x114>)
 8012b00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012b04:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8012b06:	4e3e      	ldr	r6, [pc, #248]	; (8012c00 <RadioSend+0x118>)
 8012b08:	2101      	movs	r1, #1
 8012b0a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8012b0e:	f001 f8bd 	bl	8013c8c <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8012b12:	7833      	ldrb	r3, [r6, #0]
 8012b14:	2b01      	cmp	r3, #1
 8012b16:	d103      	bne.n	8012b20 <RadioSend+0x38>
 8012b18:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8012b1c:	2b06      	cmp	r3, #6
 8012b1e:	d012      	beq.n	8012b46 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8012b20:	f640 0089 	movw	r0, #2185	; 0x889
 8012b24:	f000 fb3a 	bl	801319c <SUBGRF_ReadRegister>
 8012b28:	f040 0104 	orr.w	r1, r0, #4
 8012b2c:	b2c9      	uxtb	r1, r1
 8012b2e:	f640 0089 	movw	r0, #2185	; 0x889
 8012b32:	f000 fb23 	bl	801317c <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8012b36:	4b32      	ldr	r3, [pc, #200]	; (8012c00 <RadioSend+0x118>)
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	2b03      	cmp	r3, #3
 8012b3c:	d818      	bhi.n	8012b70 <RadioSend+0x88>
 8012b3e:	e8df f003 	tbb	[pc, r3]
 8012b42:	0d23      	.short	0x0d23
 8012b44:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8012b46:	f640 0089 	movw	r0, #2185	; 0x889
 8012b4a:	f000 fb27 	bl	801319c <SUBGRF_ReadRegister>
 8012b4e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8012b52:	f640 0089 	movw	r0, #2185	; 0x889
 8012b56:	f000 fb11 	bl	801317c <SUBGRF_WriteRegister>
 8012b5a:	e7ec      	b.n	8012b36 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8012b5c:	4828      	ldr	r0, [pc, #160]	; (8012c00 <RadioSend+0x118>)
 8012b5e:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012b60:	300e      	adds	r0, #14
 8012b62:	f000 ff7d 	bl	8013a60 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8012b66:	2200      	movs	r2, #0
 8012b68:	4621      	mov	r1, r4
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	f000 fc30 	bl	80133d0 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8012b70:	4c24      	ldr	r4, [pc, #144]	; (8012c04 <RadioSend+0x11c>)
 8012b72:	4b23      	ldr	r3, [pc, #140]	; (8012c00 <RadioSend+0x118>)
 8012b74:	6859      	ldr	r1, [r3, #4]
 8012b76:	4620      	mov	r0, r4
 8012b78:	f001 fd94 	bl	80146a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f001 fd4b 	bl	8014618 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8012b82:	2000      	movs	r0, #0
}
 8012b84:	b002      	add	sp, #8
 8012b86:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8012b88:	f001 f96f 	bl	8013e6a <RFW_Is_Init>
 8012b8c:	2801      	cmp	r0, #1
 8012b8e:	d00a      	beq.n	8012ba6 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8012b90:	481b      	ldr	r0, [pc, #108]	; (8012c00 <RadioSend+0x118>)
 8012b92:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012b94:	300e      	adds	r0, #14
 8012b96:	f000 ff63 	bl	8013a60 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	4621      	mov	r1, r4
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	f000 fc16 	bl	80133d0 <SUBGRF_SendPayload>
 8012ba4:	e7e4      	b.n	8012b70 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8012ba6:	f10d 0207 	add.w	r2, sp, #7
 8012baa:	4621      	mov	r1, r4
 8012bac:	4628      	mov	r0, r5
 8012bae:	f001 f961 	bl	8013e74 <RFW_TransmitInit>
 8012bb2:	b968      	cbnz	r0, 8012bd0 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8012bb4:	4812      	ldr	r0, [pc, #72]	; (8012c00 <RadioSend+0x118>)
 8012bb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012bba:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012bbc:	300e      	adds	r0, #14
 8012bbe:	f000 ff4f 	bl	8013a60 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012bc8:	4628      	mov	r0, r5
 8012bca:	f000 fc01 	bl	80133d0 <SUBGRF_SendPayload>
 8012bce:	e7cf      	b.n	8012b70 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8012bd0:	4b0d      	ldr	r3, [pc, #52]	; (8012c08 <RadioSend+0x120>)
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	2100      	movs	r1, #0
 8012bd6:	2002      	movs	r0, #2
 8012bd8:	f001 fa2e 	bl	8014038 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8012bdc:	2003      	movs	r0, #3
 8012bde:	e7d1      	b.n	8012b84 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8012be0:	4807      	ldr	r0, [pc, #28]	; (8012c00 <RadioSend+0x118>)
 8012be2:	2302      	movs	r3, #2
 8012be4:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8012be6:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012be8:	300e      	adds	r0, #14
 8012bea:	f000 ff39 	bl	8013a60 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8012bee:	2200      	movs	r2, #0
 8012bf0:	4621      	mov	r1, r4
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	f000 fbec 	bl	80133d0 <SUBGRF_SendPayload>
            break;
 8012bf8:	e7ba      	b.n	8012b70 <RadioSend+0x88>
 8012bfa:	bf00      	nop
 8012bfc:	48000400 	.word	0x48000400
 8012c00:	200016a4 	.word	0x200016a4
 8012c04:	20001700 	.word	0x20001700
 8012c08:	0801a210 	.word	0x0801a210

08012c0c <RadioRandom>:
{
 8012c0c:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8012c0e:	2300      	movs	r3, #0
 8012c10:	461a      	mov	r2, r3
 8012c12:	4619      	mov	r1, r3
 8012c14:	4618      	mov	r0, r3
 8012c16:	f000 fd54 	bl	80136c2 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8012c1a:	f000 fbfb 	bl	8013414 <SUBGRF_GetRandom>
}
 8012c1e:	bd08      	pop	{r3, pc}

08012c20 <RadioSetModem>:
{
 8012c20:	b510      	push	{r4, lr}
 8012c22:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8012c24:	4b14      	ldr	r3, [pc, #80]	; (8012c78 <RadioSetModem+0x58>)
 8012c26:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8012c28:	f001 f92c 	bl	8013e84 <RFW_SetRadioModem>
    switch( modem )
 8012c2c:	2c01      	cmp	r4, #1
 8012c2e:	d010      	beq.n	8012c52 <RadioSetModem+0x32>
 8012c30:	2c03      	cmp	r4, #3
 8012c32:	d01a      	beq.n	8012c6a <RadioSetModem+0x4a>
 8012c34:	b134      	cbz	r4, 8012c44 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8012c36:	2003      	movs	r0, #3
 8012c38:	f000 fde2 	bl	8013800 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8012c3c:	4b0e      	ldr	r3, [pc, #56]	; (8012c78 <RadioSetModem+0x58>)
 8012c3e:	2200      	movs	r2, #0
 8012c40:	735a      	strb	r2, [r3, #13]
}
 8012c42:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8012c44:	2000      	movs	r0, #0
 8012c46:	f000 fddb 	bl	8013800 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8012c4a:	4b0b      	ldr	r3, [pc, #44]	; (8012c78 <RadioSetModem+0x58>)
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	735a      	strb	r2, [r3, #13]
        break;
 8012c50:	e7f7      	b.n	8012c42 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8012c52:	2001      	movs	r0, #1
 8012c54:	f000 fdd4 	bl	8013800 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8012c58:	4b07      	ldr	r3, [pc, #28]	; (8012c78 <RadioSetModem+0x58>)
 8012c5a:	7b5a      	ldrb	r2, [r3, #13]
 8012c5c:	7b18      	ldrb	r0, [r3, #12]
 8012c5e:	4282      	cmp	r2, r0
 8012c60:	d0ef      	beq.n	8012c42 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8012c62:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8012c64:	f000 f80a 	bl	8012c7c <RadioSetPublicNetwork>
 8012c68:	e7eb      	b.n	8012c42 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8012c6a:	2002      	movs	r0, #2
 8012c6c:	f000 fdc8 	bl	8013800 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8012c70:	4b01      	ldr	r3, [pc, #4]	; (8012c78 <RadioSetModem+0x58>)
 8012c72:	2200      	movs	r2, #0
 8012c74:	735a      	strb	r2, [r3, #13]
}
 8012c76:	e7e4      	b.n	8012c42 <RadioSetModem+0x22>
 8012c78:	200016a4 	.word	0x200016a4

08012c7c <RadioSetPublicNetwork>:
{
 8012c7c:	b510      	push	{r4, lr}
 8012c7e:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8012c80:	4b0e      	ldr	r3, [pc, #56]	; (8012cbc <RadioSetPublicNetwork+0x40>)
 8012c82:	7318      	strb	r0, [r3, #12]
 8012c84:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8012c86:	2001      	movs	r0, #1
 8012c88:	f7ff ffca 	bl	8012c20 <RadioSetModem>
    if( enable == true )
 8012c8c:	b154      	cbz	r4, 8012ca4 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8012c8e:	2134      	movs	r1, #52	; 0x34
 8012c90:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8012c94:	f000 fa72 	bl	801317c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8012c98:	2144      	movs	r1, #68	; 0x44
 8012c9a:	f240 7041 	movw	r0, #1857	; 0x741
 8012c9e:	f000 fa6d 	bl	801317c <SUBGRF_WriteRegister>
}
 8012ca2:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8012ca4:	2114      	movs	r1, #20
 8012ca6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8012caa:	f000 fa67 	bl	801317c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8012cae:	2124      	movs	r1, #36	; 0x24
 8012cb0:	f240 7041 	movw	r0, #1857	; 0x741
 8012cb4:	f000 fa62 	bl	801317c <SUBGRF_WriteRegister>
}
 8012cb8:	e7f3      	b.n	8012ca2 <RadioSetPublicNetwork+0x26>
 8012cba:	bf00      	nop
 8012cbc:	200016a4 	.word	0x200016a4

08012cc0 <RadioSetTxConfig>:
{
 8012cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc4:	b083      	sub	sp, #12
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	460e      	mov	r6, r1
 8012cca:	4617      	mov	r7, r2
 8012ccc:	461d      	mov	r5, r3
 8012cce:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8012cd2:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8012cd6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8012cda:	f001 f8c5 	bl	8013e68 <RFW_DeInit>
    switch( modem )
 8012cde:	b1ac      	cbz	r4, 8012d0c <RadioSetTxConfig+0x4c>
 8012ce0:	2c01      	cmp	r4, #1
 8012ce2:	d05a      	beq.n	8012d9a <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8012ce4:	4630      	mov	r0, r6
 8012ce6:	f000 ffe5 	bl	8013cb4 <SUBGRF_SetRfTxPower>
 8012cea:	4c55      	ldr	r4, [pc, #340]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012cec:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8012cf0:	210e      	movs	r1, #14
 8012cf2:	f640 101f 	movw	r0, #2335	; 0x91f
 8012cf6:	f000 fa41 	bl	801317c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8012cfa:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8012cfe:	f001 f8b8 	bl	8013e72 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8012d02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012d04:	6063      	str	r3, [r4, #4]
}
 8012d06:	b003      	add	sp, #12
 8012d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8012d0c:	4c4c      	ldr	r4, [pc, #304]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012d0e:	f04f 0b00 	mov.w	fp, #0
 8012d12:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8012d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d18:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8012d1a:	230b      	movs	r3, #11
 8012d1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8012d20:	4628      	mov	r0, r5
 8012d22:	f001 f83f 	bl	8013da4 <SUBGRF_GetFskBandwidthRegValue>
 8012d26:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8012d2a:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8012d2c:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8012d30:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8012d34:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8012d38:	2304      	movs	r3, #4
 8012d3a:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8012d3c:	2318      	movs	r3, #24
 8012d3e:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8012d40:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8012d44:	f089 0901 	eor.w	r9, r9, #1
 8012d48:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8012d4c:	f1ba 0f00 	cmp.w	sl, #0
 8012d50:	d01f      	beq.n	8012d92 <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8012d52:	22f2      	movs	r2, #242	; 0xf2
 8012d54:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8012d56:	4c3a      	ldr	r4, [pc, #232]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012d58:	2301      	movs	r3, #1
 8012d5a:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8012d5c:	f7ff fc50 	bl	8012600 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8012d60:	2000      	movs	r0, #0
 8012d62:	f7ff ff5d 	bl	8012c20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012d66:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012d6a:	f000 fdf1 	bl	8013950 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012d6e:	f104 000e 	add.w	r0, r4, #14
 8012d72:	f000 fe75 	bl	8013a60 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8012d76:	4a33      	ldr	r2, [pc, #204]	; (8012e44 <RadioSetTxConfig+0x184>)
 8012d78:	466b      	mov	r3, sp
 8012d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012d82:	4618      	mov	r0, r3
 8012d84:	f000 fa56 	bl	8013234 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8012d88:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012d8c:	f000 fa29 	bl	80131e2 <SUBGRF_SetWhiteningSeed>
            break;
 8012d90:	e7a8      	b.n	8012ce4 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8012d92:	4b2b      	ldr	r3, [pc, #172]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012d94:	2201      	movs	r2, #1
 8012d96:	75da      	strb	r2, [r3, #23]
 8012d98:	e7dd      	b.n	8012d56 <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8012d9a:	4a29      	ldr	r2, [pc, #164]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8012da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8012daa:	4927      	ldr	r1, [pc, #156]	; (8012e48 <RadioSetTxConfig+0x188>)
 8012dac:	5d49      	ldrb	r1, [r1, r5]
 8012dae:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8012db2:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8012db6:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8012dba:	b91d      	cbnz	r5, 8012dc4 <RadioSetTxConfig+0x104>
 8012dbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012dbe:	3a0b      	subs	r2, #11
 8012dc0:	2a01      	cmp	r2, #1
 8012dc2:	d92c      	bls.n	8012e1e <RadioSetTxConfig+0x15e>
 8012dc4:	2d01      	cmp	r5, #1
 8012dc6:	d027      	beq.n	8012e18 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8012dc8:	4a1d      	ldr	r2, [pc, #116]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012dca:	2100      	movs	r1, #0
 8012dcc:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8012dd0:	4a1b      	ldr	r2, [pc, #108]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012dd2:	2101      	movs	r1, #1
 8012dd4:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8012dd6:	3b05      	subs	r3, #5
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	428b      	cmp	r3, r1
 8012ddc:	d924      	bls.n	8012e28 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8012dde:	4b18      	ldr	r3, [pc, #96]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012de0:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8012de4:	4c16      	ldr	r4, [pc, #88]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012de6:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8012dea:	4b18      	ldr	r3, [pc, #96]	; (8012e4c <RadioSetTxConfig+0x18c>)
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8012df0:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8012df4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012df8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8012dfc:	f7ff fc00 	bl	8012600 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8012e00:	2001      	movs	r0, #1
 8012e02:	f7ff ff0d 	bl	8012c20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012e06:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012e0a:	f000 fda1 	bl	8013950 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012e0e:	f104 000e 	add.w	r0, r4, #14
 8012e12:	f000 fe25 	bl	8013a60 <SUBGRF_SetPacketParams>
            break;
 8012e16:	e765      	b.n	8012ce4 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e1a:	2a0c      	cmp	r2, #12
 8012e1c:	d1d4      	bne.n	8012dc8 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8012e1e:	4a08      	ldr	r2, [pc, #32]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012e20:	2101      	movs	r1, #1
 8012e22:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8012e26:	e7d3      	b.n	8012dd0 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 8012e28:	f1b8 0f0b 	cmp.w	r8, #11
 8012e2c:	d803      	bhi.n	8012e36 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8012e2e:	4613      	mov	r3, r2
 8012e30:	220c      	movs	r2, #12
 8012e32:	839a      	strh	r2, [r3, #28]
 8012e34:	e7d6      	b.n	8012de4 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8012e36:	4b02      	ldr	r3, [pc, #8]	; (8012e40 <RadioSetTxConfig+0x180>)
 8012e38:	f8a3 801c 	strh.w	r8, [r3, #28]
 8012e3c:	e7d2      	b.n	8012de4 <RadioSetTxConfig+0x124>
 8012e3e:	bf00      	nop
 8012e40:	200016a4 	.word	0x200016a4
 8012e44:	08019374 	.word	0x08019374
 8012e48:	0801a228 	.word	0x0801a228
 8012e4c:	2000021c 	.word	0x2000021c

08012e50 <RadioSetRxConfig>:
{
 8012e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e54:	b085      	sub	sp, #20
 8012e56:	4604      	mov	r4, r0
 8012e58:	460d      	mov	r5, r1
 8012e5a:	4616      	mov	r6, r2
 8012e5c:	9301      	str	r3, [sp, #4]
 8012e5e:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8012e62:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8012e66:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8012e6a:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8012e6e:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8012e72:	4b73      	ldr	r3, [pc, #460]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012e74:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8012e78:	f000 fff6 	bl	8013e68 <RFW_DeInit>
    if( rxContinuous == true )
 8012e7c:	f1b8 0f00 	cmp.w	r8, #0
 8012e80:	d001      	beq.n	8012e86 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8012e82:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8012e86:	b14f      	cbz	r7, 8012e9c <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8012e88:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8012e8c:	4b6d      	ldr	r3, [pc, #436]	; (8013044 <RadioSetRxConfig+0x1f4>)
 8012e8e:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8012e90:	b144      	cbz	r4, 8012ea4 <RadioSetRxConfig+0x54>
 8012e92:	2c01      	cmp	r4, #1
 8012e94:	d057      	beq.n	8012f46 <RadioSetRxConfig+0xf6>
}
 8012e96:	b005      	add	sp, #20
 8012e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8012e9c:	4b69      	ldr	r3, [pc, #420]	; (8013044 <RadioSetRxConfig+0x1f4>)
 8012e9e:	22ff      	movs	r2, #255	; 0xff
 8012ea0:	701a      	strb	r2, [r3, #0]
 8012ea2:	e7f5      	b.n	8012e90 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8012ea4:	2000      	movs	r0, #0
 8012ea6:	f000 fb47 	bl	8013538 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8012eaa:	4c65      	ldr	r4, [pc, #404]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012eac:	f04f 0800 	mov.w	r8, #0
 8012eb0:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8012eb4:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8012eb6:	230b      	movs	r3, #11
 8012eb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	f000 ff71 	bl	8013da4 <SUBGRF_GetFskBandwidthRegValue>
 8012ec2:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8012ec6:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8012eca:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8012ece:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8012ed2:	2304      	movs	r3, #4
 8012ed4:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8012ed6:	2318      	movs	r3, #24
 8012ed8:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8012eda:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8012ede:	f087 0701 	eor.w	r7, r7, #1
 8012ee2:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8012ee4:	4b57      	ldr	r3, [pc, #348]	; (8013044 <RadioSetRxConfig+0x1f4>)
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8012eea:	f1bb 0f00 	cmp.w	fp, #0
 8012eee:	d026      	beq.n	8012f3e <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8012ef0:	22f2      	movs	r2, #242	; 0xf2
 8012ef2:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8012ef4:	4c52      	ldr	r4, [pc, #328]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8012efa:	f7ff fb81 	bl	8012600 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8012efe:	2000      	movs	r0, #0
 8012f00:	f7ff fe8e 	bl	8012c20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012f04:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012f08:	f000 fd22 	bl	8013950 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012f0c:	f104 000e 	add.w	r0, r4, #14
 8012f10:	f000 fda6 	bl	8013a60 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8012f14:	4a4c      	ldr	r2, [pc, #304]	; (8013048 <RadioSetRxConfig+0x1f8>)
 8012f16:	ab02      	add	r3, sp, #8
 8012f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012f20:	4618      	mov	r0, r3
 8012f22:	f000 f987 	bl	8013234 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8012f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012f2a:	f000 f95a 	bl	80131e2 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8012f2e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8012f32:	fb03 f30a 	mul.w	r3, r3, sl
 8012f36:	fbb3 f3f6 	udiv	r3, r3, r6
 8012f3a:	60a3      	str	r3, [r4, #8]
            break;
 8012f3c:	e7ab      	b.n	8012e96 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8012f3e:	4b40      	ldr	r3, [pc, #256]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012f40:	2201      	movs	r2, #1
 8012f42:	75da      	strb	r2, [r3, #23]
 8012f44:	e7d6      	b.n	8012ef4 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8012f46:	2000      	movs	r0, #0
 8012f48:	f000 faf6 	bl	8013538 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8012f4c:	4a3c      	ldr	r2, [pc, #240]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012f4e:	2301      	movs	r3, #1
 8012f50:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8012f54:	b2f3      	uxtb	r3, r6
 8012f56:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8012f5a:	493c      	ldr	r1, [pc, #240]	; (801304c <RadioSetRxConfig+0x1fc>)
 8012f5c:	5d49      	ldrb	r1, [r1, r5]
 8012f5e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8012f62:	9901      	ldr	r1, [sp, #4]
 8012f64:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8012f68:	b91d      	cbnz	r5, 8012f72 <RadioSetRxConfig+0x122>
 8012f6a:	f1a6 020b 	sub.w	r2, r6, #11
 8012f6e:	2a01      	cmp	r2, #1
 8012f70:	d94b      	bls.n	801300a <RadioSetRxConfig+0x1ba>
 8012f72:	2d01      	cmp	r5, #1
 8012f74:	d047      	beq.n	8013006 <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8012f76:	4a32      	ldr	r2, [pc, #200]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012f78:	2100      	movs	r1, #0
 8012f7a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8012f7e:	4a30      	ldr	r2, [pc, #192]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012f80:	2101      	movs	r1, #1
 8012f82:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8012f84:	3b05      	subs	r3, #5
 8012f86:	b2db      	uxtb	r3, r3
 8012f88:	428b      	cmp	r3, r1
 8012f8a:	d943      	bls.n	8013014 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8012f8c:	4b2c      	ldr	r3, [pc, #176]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012f8e:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8012f92:	4c2b      	ldr	r4, [pc, #172]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012f94:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8012f96:	4b2b      	ldr	r3, [pc, #172]	; (8013044 <RadioSetRxConfig+0x1f4>)
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8012f9c:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8012fa0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012fa4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8012fa8:	f7ff fb2a 	bl	8012600 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8012fac:	2001      	movs	r0, #1
 8012fae:	f7ff fe37 	bl	8012c20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012fb2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012fb6:	f000 fccb 	bl	8013950 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012fba:	f104 000e 	add.w	r0, r4, #14
 8012fbe:	f000 fd4f 	bl	8013a60 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8012fc2:	fa5f f08a 	uxtb.w	r0, sl
 8012fc6:	f000 fac4 	bl	8013552 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8012fca:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8012fce:	f000 f8e5 	bl	801319c <SUBGRF_ReadRegister>
 8012fd2:	f000 0101 	and.w	r1, r0, #1
 8012fd6:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8012fda:	f000 f8cf 	bl	801317c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8012fde:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	d021      	beq.n	801302a <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8012fe6:	f240 7036 	movw	r0, #1846	; 0x736
 8012fea:	f000 f8d7 	bl	801319c <SUBGRF_ReadRegister>
 8012fee:	f040 0104 	orr.w	r1, r0, #4
 8012ff2:	b2c9      	uxtb	r1, r1
 8012ff4:	f240 7036 	movw	r0, #1846	; 0x736
 8012ff8:	f000 f8c0 	bl	801317c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8012ffc:	4b10      	ldr	r3, [pc, #64]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8012ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013002:	609a      	str	r2, [r3, #8]
}
 8013004:	e747      	b.n	8012e96 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013006:	2e0c      	cmp	r6, #12
 8013008:	d1b5      	bne.n	8012f76 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801300a:	4a0d      	ldr	r2, [pc, #52]	; (8013040 <RadioSetRxConfig+0x1f0>)
 801300c:	2101      	movs	r1, #1
 801300e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8013012:	e7b4      	b.n	8012f7e <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8013014:	f1b9 0f0b 	cmp.w	r9, #11
 8013018:	d803      	bhi.n	8013022 <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801301a:	4613      	mov	r3, r2
 801301c:	220c      	movs	r2, #12
 801301e:	839a      	strh	r2, [r3, #28]
 8013020:	e7b7      	b.n	8012f92 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013022:	4b07      	ldr	r3, [pc, #28]	; (8013040 <RadioSetRxConfig+0x1f0>)
 8013024:	f8a3 901c 	strh.w	r9, [r3, #28]
 8013028:	e7b3      	b.n	8012f92 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801302a:	f240 7036 	movw	r0, #1846	; 0x736
 801302e:	f000 f8b5 	bl	801319c <SUBGRF_ReadRegister>
 8013032:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8013036:	f240 7036 	movw	r0, #1846	; 0x736
 801303a:	f000 f89f 	bl	801317c <SUBGRF_WriteRegister>
 801303e:	e7dd      	b.n	8012ffc <RadioSetRxConfig+0x1ac>
 8013040:	200016a4 	.word	0x200016a4
 8013044:	2000021c 	.word	0x2000021c
 8013048:	08019374 	.word	0x08019374
 801304c:	0801a228 	.word	0x0801a228

08013050 <RadioIsChannelFree>:
{
 8013050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013052:	b08b      	sub	sp, #44	; 0x2c
 8013054:	4604      	mov	r4, r0
 8013056:	460f      	mov	r7, r1
 8013058:	4616      	mov	r6, r2
 801305a:	461d      	mov	r5, r3
    RadioStandby( );
 801305c:	f7ff fad0 	bl	8012600 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8013060:	2000      	movs	r0, #0
 8013062:	f7ff fddd 	bl	8012c20 <RadioSetModem>
    RadioSetChannel( freq );
 8013066:	4620      	mov	r0, r4
 8013068:	f7ff fce4 	bl	8012a34 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801306c:	2301      	movs	r3, #1
 801306e:	9309      	str	r3, [sp, #36]	; 0x24
 8013070:	2400      	movs	r4, #0
 8013072:	9408      	str	r4, [sp, #32]
 8013074:	9407      	str	r4, [sp, #28]
 8013076:	9406      	str	r4, [sp, #24]
 8013078:	9405      	str	r4, [sp, #20]
 801307a:	9404      	str	r4, [sp, #16]
 801307c:	9403      	str	r4, [sp, #12]
 801307e:	9402      	str	r4, [sp, #8]
 8013080:	2303      	movs	r3, #3
 8013082:	9301      	str	r3, [sp, #4]
 8013084:	9700      	str	r7, [sp, #0]
 8013086:	4623      	mov	r3, r4
 8013088:	f44f 7216 	mov.w	r2, #600	; 0x258
 801308c:	4639      	mov	r1, r7
 801308e:	4620      	mov	r0, r4
 8013090:	f7ff fede 	bl	8012e50 <RadioSetRxConfig>
    RadioRx( 0 );
 8013094:	4620      	mov	r0, r4
 8013096:	f7ff fce5 	bl	8012a64 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801309a:	f7ff fc79 	bl	8012990 <RadioGetWakeupTime>
 801309e:	f7ee ffcb 	bl	8002038 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80130a2:	f001 fa1f 	bl	80144e4 <UTIL_TIMER_GetCurrentTime>
 80130a6:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80130a8:	4620      	mov	r0, r4
 80130aa:	f001 fa25 	bl	80144f8 <UTIL_TIMER_GetElapsedTime>
 80130ae:	42a8      	cmp	r0, r5
 80130b0:	d206      	bcs.n	80130c0 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80130b2:	2000      	movs	r0, #0
 80130b4:	f7ff fc96 	bl	80129e4 <RadioRssi>
        if( rssi > rssiThresh )
 80130b8:	42b0      	cmp	r0, r6
 80130ba:	ddf5      	ble.n	80130a8 <RadioIsChannelFree+0x58>
            status = false;
 80130bc:	2400      	movs	r4, #0
 80130be:	e000      	b.n	80130c2 <RadioIsChannelFree+0x72>
    bool status = true;
 80130c0:	2401      	movs	r4, #1
    RadioStandby( );
 80130c2:	f7ff fa9d 	bl	8012600 <RadioStandby>
}
 80130c6:	4620      	mov	r0, r4
 80130c8:	b00b      	add	sp, #44	; 0x2c
 80130ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080130cc <RadioInit>:
{
 80130cc:	b570      	push	{r4, r5, r6, lr}
 80130ce:	b082      	sub	sp, #8
    RadioEvents = events;
 80130d0:	4b1d      	ldr	r3, [pc, #116]	; (8013148 <RadioInit+0x7c>)
 80130d2:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 80130d4:	4d1d      	ldr	r5, [pc, #116]	; (801314c <RadioInit+0x80>)
 80130d6:	2400      	movs	r4, #0
 80130d8:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 80130da:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 80130dc:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80130de:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 80130e0:	481b      	ldr	r0, [pc, #108]	; (8013150 <RadioInit+0x84>)
 80130e2:	f000 fb27 	bl	8013734 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 80130e6:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 80130e8:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 80130ea:	f000 fa53 	bl	8013594 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80130ee:	4621      	mov	r1, r4
 80130f0:	4620      	mov	r0, r4
 80130f2:	f000 fd27 	bl	8013b44 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80130f6:	2204      	movs	r2, #4
 80130f8:	4621      	mov	r1, r4
 80130fa:	2001      	movs	r0, #1
 80130fc:	f000 fb9a 	bl	8013834 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013100:	4623      	mov	r3, r4
 8013102:	4622      	mov	r2, r4
 8013104:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013108:	4608      	mov	r0, r1
 801310a:	f000 fada 	bl	80136c2 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801310e:	f7ff fce1 	bl	8012ad4 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8013112:	4e10      	ldr	r6, [pc, #64]	; (8013154 <RadioInit+0x88>)
 8013114:	9400      	str	r4, [sp, #0]
 8013116:	4b10      	ldr	r3, [pc, #64]	; (8013158 <RadioInit+0x8c>)
 8013118:	4622      	mov	r2, r4
 801311a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801311e:	4630      	mov	r0, r6
 8013120:	f001 f9c2 	bl	80144a8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8013124:	4d0d      	ldr	r5, [pc, #52]	; (801315c <RadioInit+0x90>)
 8013126:	9400      	str	r4, [sp, #0]
 8013128:	4b0d      	ldr	r3, [pc, #52]	; (8013160 <RadioInit+0x94>)
 801312a:	4622      	mov	r2, r4
 801312c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013130:	4628      	mov	r0, r5
 8013132:	f001 f9b9 	bl	80144a8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8013136:	4630      	mov	r0, r6
 8013138:	f001 fa14 	bl	8014564 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801313c:	4628      	mov	r0, r5
 801313e:	f001 fa11 	bl	8014564 <UTIL_TIMER_Stop>
}
 8013142:	b002      	add	sp, #8
 8013144:	bd70      	pop	{r4, r5, r6, pc}
 8013146:	bf00      	nop
 8013148:	20001688 	.word	0x20001688
 801314c:	200016a4 	.word	0x200016a4
 8013150:	0801297d 	.word	0x0801297d
 8013154:	20001700 	.word	0x20001700
 8013158:	080124c5 	.word	0x080124c5
 801315c:	2000168c 	.word	0x2000168c
 8013160:	080124ed 	.word	0x080124ed

08013164 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8013164:	4b01      	ldr	r3, [pc, #4]	; (801316c <SUBGRF_GetOperatingMode+0x8>)
 8013166:	7818      	ldrb	r0, [r3, #0]
 8013168:	4770      	bx	lr
 801316a:	bf00      	nop
 801316c:	2000171e 	.word	0x2000171e

08013170 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8013170:	4b01      	ldr	r3, [pc, #4]	; (8013178 <SUBGRF_GetPacketType+0x8>)
 8013172:	7818      	ldrb	r0, [r3, #0]
 8013174:	4770      	bx	lr
 8013176:	bf00      	nop
 8013178:	2000171f 	.word	0x2000171f

0801317c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801317c:	b500      	push	{lr}
 801317e:	b083      	sub	sp, #12
 8013180:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8013184:	2301      	movs	r3, #1
 8013186:	f10d 0207 	add.w	r2, sp, #7
 801318a:	4601      	mov	r1, r0
 801318c:	4802      	ldr	r0, [pc, #8]	; (8013198 <SUBGRF_WriteRegister+0x1c>)
 801318e:	f7f3 fe93 	bl	8006eb8 <HAL_SUBGHZ_WriteRegisters>
}
 8013192:	b003      	add	sp, #12
 8013194:	f85d fb04 	ldr.w	pc, [sp], #4
 8013198:	200005c0 	.word	0x200005c0

0801319c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801319c:	b500      	push	{lr}
 801319e:	b083      	sub	sp, #12
 80131a0:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80131a2:	2301      	movs	r3, #1
 80131a4:	f10d 0207 	add.w	r2, sp, #7
 80131a8:	4803      	ldr	r0, [pc, #12]	; (80131b8 <SUBGRF_ReadRegister+0x1c>)
 80131aa:	f7f3 fed5 	bl	8006f58 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 80131ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80131b2:	b003      	add	sp, #12
 80131b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80131b8:	200005c0 	.word	0x200005c0

080131bc <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80131bc:	b510      	push	{r4, lr}
 80131be:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80131c0:	f7f0 fb41 	bl	8003846 <RBI_IsDCDC>
 80131c4:	2801      	cmp	r0, #1
 80131c6:	d000      	beq.n	80131ca <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80131c8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80131ca:	f640 1023 	movw	r0, #2339	; 0x923
 80131ce:	f7ff ffe5 	bl	801319c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80131d2:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80131d6:	4321      	orrs	r1, r4
 80131d8:	f640 1023 	movw	r0, #2339	; 0x923
 80131dc:	f7ff ffce 	bl	801317c <SUBGRF_WriteRegister>
}
 80131e0:	e7f2      	b.n	80131c8 <Radio_SMPS_Set+0xc>

080131e2 <SUBGRF_SetWhiteningSeed>:
{
 80131e2:	b510      	push	{r4, lr}
 80131e4:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80131e6:	f7ff ffc3 	bl	8013170 <SUBGRF_GetPacketType>
 80131ea:	b100      	cbz	r0, 80131ee <SUBGRF_SetWhiteningSeed+0xc>
}
 80131ec:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80131ee:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80131f2:	f7ff ffd3 	bl	801319c <SUBGRF_ReadRegister>
 80131f6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80131fa:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80131fe:	4301      	orrs	r1, r0
 8013200:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013204:	f7ff ffba 	bl	801317c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8013208:	b2e1      	uxtb	r1, r4
 801320a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801320e:	f7ff ffb5 	bl	801317c <SUBGRF_WriteRegister>
}
 8013212:	e7eb      	b.n	80131ec <SUBGRF_SetWhiteningSeed+0xa>

08013214 <SUBGRF_WriteRegisters>:
{
 8013214:	b510      	push	{r4, lr}
 8013216:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013218:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801321c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801321e:	460a      	mov	r2, r1
 8013220:	4601      	mov	r1, r0
 8013222:	4803      	ldr	r0, [pc, #12]	; (8013230 <SUBGRF_WriteRegisters+0x1c>)
 8013224:	f7f3 fe48 	bl	8006eb8 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013228:	f384 8810 	msr	PRIMASK, r4
}
 801322c:	bd10      	pop	{r4, pc}
 801322e:	bf00      	nop
 8013230:	200005c0 	.word	0x200005c0

08013234 <SUBGRF_SetSyncWord>:
{
 8013234:	b508      	push	{r3, lr}
 8013236:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8013238:	2208      	movs	r2, #8
 801323a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801323e:	f7ff ffe9 	bl	8013214 <SUBGRF_WriteRegisters>
}
 8013242:	2000      	movs	r0, #0
 8013244:	bd08      	pop	{r3, pc}

08013246 <SUBGRF_SetCrcSeed>:
{
 8013246:	b500      	push	{lr}
 8013248:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801324a:	0a03      	lsrs	r3, r0, #8
 801324c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8013250:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8013254:	f7ff ff8c 	bl	8013170 <SUBGRF_GetPacketType>
 8013258:	b110      	cbz	r0, 8013260 <SUBGRF_SetCrcSeed+0x1a>
}
 801325a:	b003      	add	sp, #12
 801325c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8013260:	2202      	movs	r2, #2
 8013262:	a901      	add	r1, sp, #4
 8013264:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8013268:	f7ff ffd4 	bl	8013214 <SUBGRF_WriteRegisters>
}
 801326c:	e7f5      	b.n	801325a <SUBGRF_SetCrcSeed+0x14>

0801326e <SUBGRF_SetCrcPolynomial>:
{
 801326e:	b500      	push	{lr}
 8013270:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8013272:	0a03      	lsrs	r3, r0, #8
 8013274:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8013278:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 801327c:	f7ff ff78 	bl	8013170 <SUBGRF_GetPacketType>
 8013280:	b110      	cbz	r0, 8013288 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8013282:	b003      	add	sp, #12
 8013284:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8013288:	2202      	movs	r2, #2
 801328a:	a901      	add	r1, sp, #4
 801328c:	f240 60be 	movw	r0, #1726	; 0x6be
 8013290:	f7ff ffc0 	bl	8013214 <SUBGRF_WriteRegisters>
}
 8013294:	e7f5      	b.n	8013282 <SUBGRF_SetCrcPolynomial+0x14>
	...

08013298 <SUBGRF_ReadRegisters>:
{
 8013298:	b510      	push	{r4, lr}
 801329a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801329c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80132a0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80132a2:	460a      	mov	r2, r1
 80132a4:	4601      	mov	r1, r0
 80132a6:	4803      	ldr	r0, [pc, #12]	; (80132b4 <SUBGRF_ReadRegisters+0x1c>)
 80132a8:	f7f3 fe56 	bl	8006f58 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132ac:	f384 8810 	msr	PRIMASK, r4
}
 80132b0:	bd10      	pop	{r4, pc}
 80132b2:	bf00      	nop
 80132b4:	200005c0 	.word	0x200005c0

080132b8 <SUBGRF_WriteBuffer>:
{
 80132b8:	b510      	push	{r4, lr}
 80132ba:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80132bc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80132c0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80132c2:	460a      	mov	r2, r1
 80132c4:	4601      	mov	r1, r0
 80132c6:	4803      	ldr	r0, [pc, #12]	; (80132d4 <SUBGRF_WriteBuffer+0x1c>)
 80132c8:	f7f3 ffa4 	bl	8007214 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132cc:	f384 8810 	msr	PRIMASK, r4
}
 80132d0:	bd10      	pop	{r4, pc}
 80132d2:	bf00      	nop
 80132d4:	200005c0 	.word	0x200005c0

080132d8 <SUBGRF_SetPayload>:
{
 80132d8:	b508      	push	{r3, lr}
 80132da:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80132dc:	4601      	mov	r1, r0
 80132de:	2000      	movs	r0, #0
 80132e0:	f7ff ffea 	bl	80132b8 <SUBGRF_WriteBuffer>
}
 80132e4:	bd08      	pop	{r3, pc}
	...

080132e8 <SUBGRF_ReadBuffer>:
{
 80132e8:	b510      	push	{r4, lr}
 80132ea:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80132ec:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80132f0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80132f2:	460a      	mov	r2, r1
 80132f4:	4601      	mov	r1, r0
 80132f6:	4803      	ldr	r0, [pc, #12]	; (8013304 <SUBGRF_ReadBuffer+0x1c>)
 80132f8:	f7f3 ffd6 	bl	80072a8 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132fc:	f384 8810 	msr	PRIMASK, r4
}
 8013300:	bd10      	pop	{r4, pc}
 8013302:	bf00      	nop
 8013304:	200005c0 	.word	0x200005c0

08013308 <SUBGRF_WriteCommand>:
{
 8013308:	b510      	push	{r4, lr}
 801330a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801330c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013310:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8013312:	460a      	mov	r2, r1
 8013314:	4601      	mov	r1, r0
 8013316:	4803      	ldr	r0, [pc, #12]	; (8013324 <SUBGRF_WriteCommand+0x1c>)
 8013318:	f7f3 fe72 	bl	8007000 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801331c:	f384 8810 	msr	PRIMASK, r4
}
 8013320:	bd10      	pop	{r4, pc}
 8013322:	bf00      	nop
 8013324:	200005c0 	.word	0x200005c0

08013328 <SUBGRF_SetSleep>:
{
 8013328:	b510      	push	{r4, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801332e:	2000      	movs	r0, #0
 8013330:	f7f0 fa7d 	bl	800382e <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8013334:	2002      	movs	r0, #2
 8013336:	f7ff ff41 	bl	80131bc <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801333a:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801333e:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013342:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8013344:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8013348:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801334a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801334e:	2201      	movs	r2, #1
 8013350:	f10d 0107 	add.w	r1, sp, #7
 8013354:	2084      	movs	r0, #132	; 0x84
 8013356:	f7ff ffd7 	bl	8013308 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801335a:	4b02      	ldr	r3, [pc, #8]	; (8013364 <SUBGRF_SetSleep+0x3c>)
 801335c:	2200      	movs	r2, #0
 801335e:	701a      	strb	r2, [r3, #0]
}
 8013360:	b002      	add	sp, #8
 8013362:	bd10      	pop	{r4, pc}
 8013364:	2000171e 	.word	0x2000171e

08013368 <SUBGRF_SetStandby>:
{
 8013368:	b500      	push	{lr}
 801336a:	b083      	sub	sp, #12
 801336c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8013370:	2201      	movs	r2, #1
 8013372:	f10d 0107 	add.w	r1, sp, #7
 8013376:	2080      	movs	r0, #128	; 0x80
 8013378:	f7ff ffc6 	bl	8013308 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801337c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013380:	b92b      	cbnz	r3, 801338e <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8013382:	4b05      	ldr	r3, [pc, #20]	; (8013398 <SUBGRF_SetStandby+0x30>)
 8013384:	2201      	movs	r2, #1
 8013386:	701a      	strb	r2, [r3, #0]
}
 8013388:	b003      	add	sp, #12
 801338a:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 801338e:	4b02      	ldr	r3, [pc, #8]	; (8013398 <SUBGRF_SetStandby+0x30>)
 8013390:	2202      	movs	r2, #2
 8013392:	701a      	strb	r2, [r3, #0]
}
 8013394:	e7f8      	b.n	8013388 <SUBGRF_SetStandby+0x20>
 8013396:	bf00      	nop
 8013398:	2000171e 	.word	0x2000171e

0801339c <SUBGRF_SetTx>:
{
 801339c:	b500      	push	{lr}
 801339e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80133a0:	4b0a      	ldr	r3, [pc, #40]	; (80133cc <SUBGRF_SetTx+0x30>)
 80133a2:	2204      	movs	r2, #4
 80133a4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80133a6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80133aa:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80133ae:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80133b2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80133b6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80133ba:	2203      	movs	r2, #3
 80133bc:	a901      	add	r1, sp, #4
 80133be:	2083      	movs	r0, #131	; 0x83
 80133c0:	f7ff ffa2 	bl	8013308 <SUBGRF_WriteCommand>
}
 80133c4:	b003      	add	sp, #12
 80133c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80133ca:	bf00      	nop
 80133cc:	2000171e 	.word	0x2000171e

080133d0 <SUBGRF_SendPayload>:
{
 80133d0:	b510      	push	{r4, lr}
 80133d2:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80133d4:	f7ff ff80 	bl	80132d8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80133d8:	4620      	mov	r0, r4
 80133da:	f7ff ffdf 	bl	801339c <SUBGRF_SetTx>
}
 80133de:	bd10      	pop	{r4, pc}

080133e0 <SUBGRF_SetRx>:
{
 80133e0:	b500      	push	{lr}
 80133e2:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80133e4:	4b0a      	ldr	r3, [pc, #40]	; (8013410 <SUBGRF_SetRx+0x30>)
 80133e6:	2205      	movs	r2, #5
 80133e8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80133ea:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80133ee:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80133f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80133f6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80133fa:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80133fe:	2203      	movs	r2, #3
 8013400:	a901      	add	r1, sp, #4
 8013402:	2082      	movs	r0, #130	; 0x82
 8013404:	f7ff ff80 	bl	8013308 <SUBGRF_WriteCommand>
}
 8013408:	b003      	add	sp, #12
 801340a:	f85d fb04 	ldr.w	pc, [sp], #4
 801340e:	bf00      	nop
 8013410:	2000171e 	.word	0x2000171e

08013414 <SUBGRF_GetRandom>:
{
 8013414:	b570      	push	{r4, r5, r6, lr}
 8013416:	b082      	sub	sp, #8
    uint32_t number = 0;
 8013418:	2600      	movs	r6, #0
 801341a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801341c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013420:	f7ff febc 	bl	801319c <SUBGRF_ReadRegister>
 8013424:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8013426:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 801342a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801342e:	f7ff fea5 	bl	801317c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8013432:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013436:	f7ff feb1 	bl	801319c <SUBGRF_ReadRegister>
 801343a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801343c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8013440:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013444:	f7ff fe9a 	bl	801317c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8013448:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801344c:	f7ff ffc8 	bl	80133e0 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8013450:	2204      	movs	r2, #4
 8013452:	eb0d 0102 	add.w	r1, sp, r2
 8013456:	f640 0019 	movw	r0, #2073	; 0x819
 801345a:	f7ff ff1d 	bl	8013298 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 801345e:	4630      	mov	r0, r6
 8013460:	f7ff ff82 	bl	8013368 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8013464:	4629      	mov	r1, r5
 8013466:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801346a:	f7ff fe87 	bl	801317c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801346e:	4621      	mov	r1, r4
 8013470:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013474:	f7ff fe82 	bl	801317c <SUBGRF_WriteRegister>
}
 8013478:	9801      	ldr	r0, [sp, #4]
 801347a:	b002      	add	sp, #8
 801347c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013480 <SUBGRF_SetRxBoosted>:
{
 8013480:	b510      	push	{r4, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8013486:	4b0c      	ldr	r3, [pc, #48]	; (80134b8 <SUBGRF_SetRxBoosted+0x38>)
 8013488:	2205      	movs	r2, #5
 801348a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801348c:	2197      	movs	r1, #151	; 0x97
 801348e:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8013492:	f7ff fe73 	bl	801317c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013496:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801349a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801349e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80134a2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80134a6:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80134aa:	2203      	movs	r2, #3
 80134ac:	a901      	add	r1, sp, #4
 80134ae:	2082      	movs	r0, #130	; 0x82
 80134b0:	f7ff ff2a 	bl	8013308 <SUBGRF_WriteCommand>
}
 80134b4:	b002      	add	sp, #8
 80134b6:	bd10      	pop	{r4, pc}
 80134b8:	2000171e 	.word	0x2000171e

080134bc <SUBGRF_SetRxDutyCycle>:
{
 80134bc:	b500      	push	{lr}
 80134be:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80134c0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80134c4:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80134c8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80134cc:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80134d0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80134d4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80134d8:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80134dc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80134e0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80134e4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80134e8:	2206      	movs	r2, #6
 80134ea:	4669      	mov	r1, sp
 80134ec:	2094      	movs	r0, #148	; 0x94
 80134ee:	f7ff ff0b 	bl	8013308 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80134f2:	4b03      	ldr	r3, [pc, #12]	; (8013500 <SUBGRF_SetRxDutyCycle+0x44>)
 80134f4:	2206      	movs	r2, #6
 80134f6:	701a      	strb	r2, [r3, #0]
}
 80134f8:	b003      	add	sp, #12
 80134fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80134fe:	bf00      	nop
 8013500:	2000171e 	.word	0x2000171e

08013504 <SUBGRF_SetCad>:
{
 8013504:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8013506:	2200      	movs	r2, #0
 8013508:	4611      	mov	r1, r2
 801350a:	20c5      	movs	r0, #197	; 0xc5
 801350c:	f7ff fefc 	bl	8013308 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8013510:	4b01      	ldr	r3, [pc, #4]	; (8013518 <SUBGRF_SetCad+0x14>)
 8013512:	2207      	movs	r2, #7
 8013514:	701a      	strb	r2, [r3, #0]
}
 8013516:	bd08      	pop	{r3, pc}
 8013518:	2000171e 	.word	0x2000171e

0801351c <SUBGRF_SetTxContinuousWave>:
{
 801351c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801351e:	2200      	movs	r2, #0
 8013520:	4611      	mov	r1, r2
 8013522:	20d1      	movs	r0, #209	; 0xd1
 8013524:	f7ff fef0 	bl	8013308 <SUBGRF_WriteCommand>
}
 8013528:	bd08      	pop	{r3, pc}

0801352a <SUBGRF_SetTxInfinitePreamble>:
{
 801352a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801352c:	2200      	movs	r2, #0
 801352e:	4611      	mov	r1, r2
 8013530:	20d2      	movs	r0, #210	; 0xd2
 8013532:	f7ff fee9 	bl	8013308 <SUBGRF_WriteCommand>
}
 8013536:	bd08      	pop	{r3, pc}

08013538 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8013538:	b500      	push	{lr}
 801353a:	b083      	sub	sp, #12
 801353c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8013540:	2201      	movs	r2, #1
 8013542:	f10d 0107 	add.w	r1, sp, #7
 8013546:	209f      	movs	r0, #159	; 0x9f
 8013548:	f7ff fede 	bl	8013308 <SUBGRF_WriteCommand>
}
 801354c:	b003      	add	sp, #12
 801354e:	f85d fb04 	ldr.w	pc, [sp], #4

08013552 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8013552:	b500      	push	{lr}
 8013554:	b083      	sub	sp, #12
 8013556:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801355a:	2201      	movs	r2, #1
 801355c:	f10d 0107 	add.w	r1, sp, #7
 8013560:	20a0      	movs	r0, #160	; 0xa0
 8013562:	f7ff fed1 	bl	8013308 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8013566:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801356a:	2b3f      	cmp	r3, #63	; 0x3f
 801356c:	d90f      	bls.n	801358e <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 801356e:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8013570:	2200      	movs	r2, #0
        while( mant > 31 )
 8013572:	e002      	b.n	801357a <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8013574:	089b      	lsrs	r3, r3, #2
            exp++;
 8013576:	3201      	adds	r2, #1
 8013578:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 801357a:	2b1f      	cmp	r3, #31
 801357c:	d8fa      	bhi.n	8013574 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 801357e:	00d9      	lsls	r1, r3, #3
 8013580:	b2c9      	uxtb	r1, r1
 8013582:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8013584:	b2c9      	uxtb	r1, r1
 8013586:	f240 7006 	movw	r0, #1798	; 0x706
 801358a:	f7ff fdf7 	bl	801317c <SUBGRF_WriteRegister>
}
 801358e:	b003      	add	sp, #12
 8013590:	f85d fb04 	ldr.w	pc, [sp], #4

08013594 <SUBGRF_SetRegulatorMode>:
{
 8013594:	b500      	push	{lr}
 8013596:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8013598:	f7f0 f955 	bl	8003846 <RBI_IsDCDC>
 801359c:	2801      	cmp	r0, #1
 801359e:	d00b      	beq.n	80135b8 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 80135a0:	2300      	movs	r3, #0
 80135a2:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80135a6:	2201      	movs	r2, #1
 80135a8:	f10d 0107 	add.w	r1, sp, #7
 80135ac:	2096      	movs	r0, #150	; 0x96
 80135ae:	f7ff feab 	bl	8013308 <SUBGRF_WriteCommand>
}
 80135b2:	b003      	add	sp, #12
 80135b4:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 80135b8:	2301      	movs	r3, #1
 80135ba:	f88d 3007 	strb.w	r3, [sp, #7]
 80135be:	e7f2      	b.n	80135a6 <SUBGRF_SetRegulatorMode+0x12>

080135c0 <SUBGRF_Calibrate>:
{
 80135c0:	b500      	push	{lr}
 80135c2:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80135c4:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80135c8:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80135cc:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80135ce:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80135d2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80135d4:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80135d8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80135da:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80135de:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80135e0:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80135e4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80135e6:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80135ea:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80135ec:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80135f0:	2201      	movs	r2, #1
 80135f2:	f10d 0107 	add.w	r1, sp, #7
 80135f6:	2089      	movs	r0, #137	; 0x89
 80135f8:	f7ff fe86 	bl	8013308 <SUBGRF_WriteCommand>
}
 80135fc:	b003      	add	sp, #12
 80135fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013604 <SUBGRF_CalibrateImage>:
{
 8013604:	b500      	push	{lr}
 8013606:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8013608:	4b1f      	ldr	r3, [pc, #124]	; (8013688 <SUBGRF_CalibrateImage+0x84>)
 801360a:	4298      	cmp	r0, r3
 801360c:	d90d      	bls.n	801362a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801360e:	23e1      	movs	r3, #225	; 0xe1
 8013610:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8013614:	23e9      	movs	r3, #233	; 0xe9
 8013616:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801361a:	2202      	movs	r2, #2
 801361c:	a901      	add	r1, sp, #4
 801361e:	2098      	movs	r0, #152	; 0x98
 8013620:	f7ff fe72 	bl	8013308 <SUBGRF_WriteCommand>
}
 8013624:	b003      	add	sp, #12
 8013626:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 801362a:	4b18      	ldr	r3, [pc, #96]	; (801368c <SUBGRF_CalibrateImage+0x88>)
 801362c:	4298      	cmp	r0, r3
 801362e:	d906      	bls.n	801363e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8013630:	23d7      	movs	r3, #215	; 0xd7
 8013632:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8013636:	23db      	movs	r3, #219	; 0xdb
 8013638:	f88d 3005 	strb.w	r3, [sp, #5]
 801363c:	e7ed      	b.n	801361a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 801363e:	4b14      	ldr	r3, [pc, #80]	; (8013690 <SUBGRF_CalibrateImage+0x8c>)
 8013640:	4298      	cmp	r0, r3
 8013642:	d906      	bls.n	8013652 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8013644:	23c1      	movs	r3, #193	; 0xc1
 8013646:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 801364a:	23c5      	movs	r3, #197	; 0xc5
 801364c:	f88d 3005 	strb.w	r3, [sp, #5]
 8013650:	e7e3      	b.n	801361a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8013652:	4b10      	ldr	r3, [pc, #64]	; (8013694 <SUBGRF_CalibrateImage+0x90>)
 8013654:	4298      	cmp	r0, r3
 8013656:	d906      	bls.n	8013666 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8013658:	2375      	movs	r3, #117	; 0x75
 801365a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 801365e:	2381      	movs	r3, #129	; 0x81
 8013660:	f88d 3005 	strb.w	r3, [sp, #5]
 8013664:	e7d9      	b.n	801361a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8013666:	4b0c      	ldr	r3, [pc, #48]	; (8013698 <SUBGRF_CalibrateImage+0x94>)
 8013668:	4298      	cmp	r0, r3
 801366a:	d906      	bls.n	801367a <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 801366c:	236b      	movs	r3, #107	; 0x6b
 801366e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8013672:	236f      	movs	r3, #111	; 0x6f
 8013674:	f88d 3005 	strb.w	r3, [sp, #5]
 8013678:	e7cf      	b.n	801361a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 801367a:	2329      	movs	r3, #41	; 0x29
 801367c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8013680:	232b      	movs	r3, #43	; 0x2b
 8013682:	f88d 3005 	strb.w	r3, [sp, #5]
 8013686:	e7c8      	b.n	801361a <SUBGRF_CalibrateImage+0x16>
 8013688:	35a4e900 	.word	0x35a4e900
 801368c:	32a9f880 	.word	0x32a9f880
 8013690:	2de54480 	.word	0x2de54480
 8013694:	1b6b0b00 	.word	0x1b6b0b00
 8013698:	1954fc40 	.word	0x1954fc40

0801369c <SUBGRF_SetPaConfig>:
{
 801369c:	b500      	push	{lr}
 801369e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80136a0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80136a4:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80136a8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80136ac:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80136b0:	2204      	movs	r2, #4
 80136b2:	eb0d 0102 	add.w	r1, sp, r2
 80136b6:	2095      	movs	r0, #149	; 0x95
 80136b8:	f7ff fe26 	bl	8013308 <SUBGRF_WriteCommand>
}
 80136bc:	b003      	add	sp, #12
 80136be:	f85d fb04 	ldr.w	pc, [sp], #4

080136c2 <SUBGRF_SetDioIrqParams>:
{
 80136c2:	b500      	push	{lr}
 80136c4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80136c6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80136ca:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80136ce:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80136d2:	0a08      	lsrs	r0, r1, #8
 80136d4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80136d8:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80136dc:	0a11      	lsrs	r1, r2, #8
 80136de:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80136e2:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80136e6:	0a1a      	lsrs	r2, r3, #8
 80136e8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80136ec:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80136f0:	2208      	movs	r2, #8
 80136f2:	4669      	mov	r1, sp
 80136f4:	4610      	mov	r0, r2
 80136f6:	f7ff fe07 	bl	8013308 <SUBGRF_WriteCommand>
}
 80136fa:	b003      	add	sp, #12
 80136fc:	f85d fb04 	ldr.w	pc, [sp], #4

08013700 <SUBGRF_SetTcxoMode>:
{
 8013700:	b500      	push	{lr}
 8013702:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8013704:	f000 0007 	and.w	r0, r0, #7
 8013708:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801370c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8013710:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8013714:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8013718:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801371c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8013720:	2204      	movs	r2, #4
 8013722:	eb0d 0102 	add.w	r1, sp, r2
 8013726:	2097      	movs	r0, #151	; 0x97
 8013728:	f7ff fdee 	bl	8013308 <SUBGRF_WriteCommand>
}
 801372c:	b003      	add	sp, #12
 801372e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013734 <SUBGRF_Init>:
{
 8013734:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8013736:	b108      	cbz	r0, 801373c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8013738:	4a18      	ldr	r2, [pc, #96]	; (801379c <SUBGRF_Init+0x68>)
 801373a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 801373c:	f7ee fb74 	bl	8001e28 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8013740:	2002      	movs	r0, #2
 8013742:	f7ff fd3b 	bl	80131bc <Radio_SMPS_Set>
    ImageCalibrated = false;
 8013746:	2000      	movs	r0, #0
 8013748:	4b15      	ldr	r3, [pc, #84]	; (80137a0 <SUBGRF_Init+0x6c>)
 801374a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 801374c:	f7ff fe0c 	bl	8013368 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8013750:	f7f0 f875 	bl	800383e <RBI_IsTCXO>
 8013754:	2801      	cmp	r0, #1
 8013756:	d014      	beq.n	8013782 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8013758:	2120      	movs	r1, #32
 801375a:	f640 1011 	movw	r0, #2321	; 0x911
 801375e:	f7ff fd0d 	bl	801317c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8013762:	2120      	movs	r1, #32
 8013764:	f640 1012 	movw	r0, #2322	; 0x912
 8013768:	f7ff fd08 	bl	801317c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801376c:	210e      	movs	r1, #14
 801376e:	f640 101f 	movw	r0, #2335	; 0x91f
 8013772:	f7ff fd03 	bl	801317c <SUBGRF_WriteRegister>
    RBI_Init();
 8013776:	f7f0 f856 	bl	8003826 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 801377a:	4b0a      	ldr	r3, [pc, #40]	; (80137a4 <SUBGRF_Init+0x70>)
 801377c:	2201      	movs	r2, #1
 801377e:	701a      	strb	r2, [r3, #0]
}
 8013780:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8013782:	2140      	movs	r1, #64	; 0x40
 8013784:	f7ff ffbc 	bl	8013700 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8013788:	2100      	movs	r1, #0
 801378a:	f640 1011 	movw	r0, #2321	; 0x911
 801378e:	f7ff fcf5 	bl	801317c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8013792:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8013796:	f7ff ff13 	bl	80135c0 <SUBGRF_Calibrate>
 801379a:	e7e7      	b.n	801376c <SUBGRF_Init+0x38>
 801379c:	20001720 	.word	0x20001720
 80137a0:	2000171c 	.word	0x2000171c
 80137a4:	2000171e 	.word	0x2000171e

080137a8 <SUBGRF_SetRfFrequency>:
{
 80137a8:	b510      	push	{r4, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80137ae:	4b12      	ldr	r3, [pc, #72]	; (80137f8 <SUBGRF_SetRfFrequency+0x50>)
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	b1d3      	cbz	r3, 80137ea <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80137b4:	4a11      	ldr	r2, [pc, #68]	; (80137fc <SUBGRF_SetRfFrequency+0x54>)
 80137b6:	2300      	movs	r3, #0
 80137b8:	0660      	lsls	r0, r4, #25
 80137ba:	09e1      	lsrs	r1, r4, #7
 80137bc:	f7ed fb70 	bl	8000ea0 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80137c0:	0e03      	lsrs	r3, r0, #24
 80137c2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80137c6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80137ca:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80137ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80137d2:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80137d6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80137da:	2204      	movs	r2, #4
 80137dc:	eb0d 0102 	add.w	r1, sp, r2
 80137e0:	2086      	movs	r0, #134	; 0x86
 80137e2:	f7ff fd91 	bl	8013308 <SUBGRF_WriteCommand>
}
 80137e6:	b002      	add	sp, #8
 80137e8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80137ea:	f7ff ff0b 	bl	8013604 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80137ee:	4b02      	ldr	r3, [pc, #8]	; (80137f8 <SUBGRF_SetRfFrequency+0x50>)
 80137f0:	2201      	movs	r2, #1
 80137f2:	701a      	strb	r2, [r3, #0]
 80137f4:	e7de      	b.n	80137b4 <SUBGRF_SetRfFrequency+0xc>
 80137f6:	bf00      	nop
 80137f8:	2000171c 	.word	0x2000171c
 80137fc:	01e84800 	.word	0x01e84800

08013800 <SUBGRF_SetPacketType>:
{
 8013800:	b500      	push	{lr}
 8013802:	b083      	sub	sp, #12
 8013804:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8013808:	b2c3      	uxtb	r3, r0
 801380a:	4a09      	ldr	r2, [pc, #36]	; (8013830 <SUBGRF_SetPacketType+0x30>)
 801380c:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 801380e:	b143      	cbz	r3, 8013822 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8013810:	2201      	movs	r2, #1
 8013812:	f10d 0107 	add.w	r1, sp, #7
 8013816:	208a      	movs	r0, #138	; 0x8a
 8013818:	f7ff fd76 	bl	8013308 <SUBGRF_WriteCommand>
}
 801381c:	b003      	add	sp, #12
 801381e:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8013822:	2100      	movs	r1, #0
 8013824:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8013828:	f7ff fca8 	bl	801317c <SUBGRF_WriteRegister>
 801382c:	e7f0      	b.n	8013810 <SUBGRF_SetPacketType+0x10>
 801382e:	bf00      	nop
 8013830:	2000171f 	.word	0x2000171f

08013834 <SUBGRF_SetTxParams>:
{
 8013834:	b570      	push	{r4, r5, r6, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	460c      	mov	r4, r1
 801383a:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 801383c:	2801      	cmp	r0, #1
 801383e:	d035      	beq.n	80138ac <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8013840:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8013844:	f7ff fcaa 	bl	801319c <SUBGRF_ReadRegister>
 8013848:	f040 011e 	orr.w	r1, r0, #30
 801384c:	b2c9      	uxtb	r1, r1
 801384e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8013852:	f7ff fc93 	bl	801317c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8013856:	2001      	movs	r0, #1
 8013858:	f7ef fff9 	bl	800384e <RBI_GetRFOMaxPowerConfig>
 801385c:	4605      	mov	r5, r0
        if (power > max_power)
 801385e:	4284      	cmp	r4, r0
 8013860:	dd00      	ble.n	8013864 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8013862:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8013864:	2d14      	cmp	r5, #20
 8013866:	d054      	beq.n	8013912 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8013868:	2d11      	cmp	r5, #17
 801386a:	d05c      	beq.n	8013926 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 801386c:	2d0e      	cmp	r5, #14
 801386e:	d064      	beq.n	801393a <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8013870:	2301      	movs	r3, #1
 8013872:	2200      	movs	r2, #0
 8013874:	2107      	movs	r1, #7
 8013876:	2004      	movs	r0, #4
 8013878:	f7ff ff10 	bl	801369c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801387c:	1b64      	subs	r4, r4, r5
 801387e:	3416      	adds	r4, #22
 8013880:	b265      	sxtb	r5, r4
        if (power < -9)
 8013882:	f115 0f09 	cmn.w	r5, #9
 8013886:	da01      	bge.n	801388c <SUBGRF_SetTxParams+0x58>
            power = -9;
 8013888:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801388c:	2138      	movs	r1, #56	; 0x38
 801388e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8013892:	f7ff fc73 	bl	801317c <SUBGRF_WriteRegister>
    buf[0] = power;
 8013896:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 801389a:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801389e:	2202      	movs	r2, #2
 80138a0:	a901      	add	r1, sp, #4
 80138a2:	208e      	movs	r0, #142	; 0x8e
 80138a4:	f7ff fd30 	bl	8013308 <SUBGRF_WriteCommand>
}
 80138a8:	b002      	add	sp, #8
 80138aa:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80138ac:	2000      	movs	r0, #0
 80138ae:	f7ef ffce 	bl	800384e <RBI_GetRFOMaxPowerConfig>
 80138b2:	4605      	mov	r5, r0
        if (power >  max_power)
 80138b4:	4284      	cmp	r4, r0
 80138b6:	dd00      	ble.n	80138ba <SUBGRF_SetTxParams+0x86>
          power = max_power;
 80138b8:	b244      	sxtb	r4, r0
        if (max_power == 14)
 80138ba:	2d0e      	cmp	r5, #14
 80138bc:	d015      	beq.n	80138ea <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 80138be:	2d0a      	cmp	r5, #10
 80138c0:	d01d      	beq.n	80138fe <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80138c2:	2301      	movs	r3, #1
 80138c4:	461a      	mov	r2, r3
 80138c6:	2100      	movs	r1, #0
 80138c8:	2007      	movs	r0, #7
 80138ca:	f7ff fee7 	bl	801369c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80138ce:	1b65      	subs	r5, r4, r5
 80138d0:	350e      	adds	r5, #14
 80138d2:	b26d      	sxtb	r5, r5
        if (power < -17)
 80138d4:	f115 0f11 	cmn.w	r5, #17
 80138d8:	da01      	bge.n	80138de <SUBGRF_SetTxParams+0xaa>
            power = -17;
 80138da:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80138de:	2118      	movs	r1, #24
 80138e0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80138e4:	f7ff fc4a 	bl	801317c <SUBGRF_WriteRegister>
 80138e8:	e7d5      	b.n	8013896 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80138ea:	2301      	movs	r3, #1
 80138ec:	461a      	mov	r2, r3
 80138ee:	2100      	movs	r1, #0
 80138f0:	2004      	movs	r0, #4
 80138f2:	f7ff fed3 	bl	801369c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80138f6:	1b65      	subs	r5, r4, r5
 80138f8:	350e      	adds	r5, #14
 80138fa:	b26d      	sxtb	r5, r5
 80138fc:	e7ea      	b.n	80138d4 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80138fe:	2301      	movs	r3, #1
 8013900:	461a      	mov	r2, r3
 8013902:	2100      	movs	r1, #0
 8013904:	4618      	mov	r0, r3
 8013906:	f7ff fec9 	bl	801369c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801390a:	1b65      	subs	r5, r4, r5
 801390c:	350d      	adds	r5, #13
 801390e:	b26d      	sxtb	r5, r5
 8013910:	e7e0      	b.n	80138d4 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8013912:	2301      	movs	r3, #1
 8013914:	2200      	movs	r2, #0
 8013916:	2105      	movs	r1, #5
 8013918:	2003      	movs	r0, #3
 801391a:	f7ff febf 	bl	801369c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801391e:	1b65      	subs	r5, r4, r5
 8013920:	3516      	adds	r5, #22
 8013922:	b26d      	sxtb	r5, r5
 8013924:	e7ad      	b.n	8013882 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8013926:	2301      	movs	r3, #1
 8013928:	2200      	movs	r2, #0
 801392a:	2103      	movs	r1, #3
 801392c:	2002      	movs	r0, #2
 801392e:	f7ff feb5 	bl	801369c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8013932:	1b65      	subs	r5, r4, r5
 8013934:	3516      	adds	r5, #22
 8013936:	b26d      	sxtb	r5, r5
 8013938:	e7a3      	b.n	8013882 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801393a:	2301      	movs	r3, #1
 801393c:	2200      	movs	r2, #0
 801393e:	2102      	movs	r1, #2
 8013940:	4608      	mov	r0, r1
 8013942:	f7ff feab 	bl	801369c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8013946:	1b65      	subs	r5, r4, r5
 8013948:	350e      	adds	r5, #14
 801394a:	b26d      	sxtb	r5, r5
 801394c:	e799      	b.n	8013882 <SUBGRF_SetTxParams+0x4e>
	...

08013950 <SUBGRF_SetModulationParams>:
{
 8013950:	b510      	push	{r4, lr}
 8013952:	b082      	sub	sp, #8
 8013954:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8013956:	4b3e      	ldr	r3, [pc, #248]	; (8013a50 <SUBGRF_SetModulationParams+0x100>)
 8013958:	e893 0003 	ldmia.w	r3, {r0, r1}
 801395c:	ab02      	add	r3, sp, #8
 801395e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8013962:	7820      	ldrb	r0, [r4, #0]
 8013964:	4b3b      	ldr	r3, [pc, #236]	; (8013a54 <SUBGRF_SetModulationParams+0x104>)
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	4298      	cmp	r0, r3
 801396a:	d106      	bne.n	801397a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 801396c:	7823      	ldrb	r3, [r4, #0]
 801396e:	2b03      	cmp	r3, #3
 8013970:	d82c      	bhi.n	80139cc <SUBGRF_SetModulationParams+0x7c>
 8013972:	e8df f003 	tbb	[pc, r3]
 8013976:	4205      	.short	0x4205
 8013978:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801397a:	f7ff ff41 	bl	8013800 <SUBGRF_SetPacketType>
 801397e:	e7f5      	b.n	801396c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8013980:	6862      	ldr	r2, [r4, #4]
 8013982:	4b35      	ldr	r3, [pc, #212]	; (8013a58 <SUBGRF_SetModulationParams+0x108>)
 8013984:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8013988:	0c1a      	lsrs	r2, r3, #16
 801398a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801398e:	0a1a      	lsrs	r2, r3, #8
 8013990:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8013994:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8013998:	7b23      	ldrb	r3, [r4, #12]
 801399a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801399e:	7b63      	ldrb	r3, [r4, #13]
 80139a0:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80139a4:	68a1      	ldr	r1, [r4, #8]
 80139a6:	4a2d      	ldr	r2, [pc, #180]	; (8013a5c <SUBGRF_SetModulationParams+0x10c>)
 80139a8:	2300      	movs	r3, #0
 80139aa:	0648      	lsls	r0, r1, #25
 80139ac:	09c9      	lsrs	r1, r1, #7
 80139ae:	f7ed fa77 	bl	8000ea0 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80139b2:	0c03      	lsrs	r3, r0, #16
 80139b4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80139b8:	0a03      	lsrs	r3, r0, #8
 80139ba:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80139be:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80139c2:	2208      	movs	r2, #8
 80139c4:	4669      	mov	r1, sp
 80139c6:	208b      	movs	r0, #139	; 0x8b
 80139c8:	f7ff fc9e 	bl	8013308 <SUBGRF_WriteCommand>
}
 80139cc:	b002      	add	sp, #8
 80139ce:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80139d0:	6922      	ldr	r2, [r4, #16]
 80139d2:	4b21      	ldr	r3, [pc, #132]	; (8013a58 <SUBGRF_SetModulationParams+0x108>)
 80139d4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80139d8:	0c1a      	lsrs	r2, r3, #16
 80139da:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80139de:	0a1a      	lsrs	r2, r3, #8
 80139e0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80139e4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80139e8:	7d23      	ldrb	r3, [r4, #20]
 80139ea:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80139ee:	2204      	movs	r2, #4
 80139f0:	4669      	mov	r1, sp
 80139f2:	208b      	movs	r0, #139	; 0x8b
 80139f4:	f7ff fc88 	bl	8013308 <SUBGRF_WriteCommand>
        break;
 80139f8:	e7e8      	b.n	80139cc <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80139fa:	7e23      	ldrb	r3, [r4, #24]
 80139fc:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8013a00:	7e63      	ldrb	r3, [r4, #25]
 8013a02:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8013a06:	7ea3      	ldrb	r3, [r4, #26]
 8013a08:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8013a0c:	7ee3      	ldrb	r3, [r4, #27]
 8013a0e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8013a12:	2204      	movs	r2, #4
 8013a14:	4669      	mov	r1, sp
 8013a16:	208b      	movs	r0, #139	; 0x8b
 8013a18:	f7ff fc76 	bl	8013308 <SUBGRF_WriteCommand>
        break;
 8013a1c:	e7d6      	b.n	80139cc <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8013a1e:	6862      	ldr	r2, [r4, #4]
 8013a20:	4b0d      	ldr	r3, [pc, #52]	; (8013a58 <SUBGRF_SetModulationParams+0x108>)
 8013a22:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8013a26:	0c1a      	lsrs	r2, r3, #16
 8013a28:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8013a2c:	0a1a      	lsrs	r2, r3, #8
 8013a2e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8013a32:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8013a36:	7b23      	ldrb	r3, [r4, #12]
 8013a38:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8013a3c:	7b63      	ldrb	r3, [r4, #13]
 8013a3e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8013a42:	2205      	movs	r2, #5
 8013a44:	4669      	mov	r1, sp
 8013a46:	208b      	movs	r0, #139	; 0x8b
 8013a48:	f7ff fc5e 	bl	8013308 <SUBGRF_WriteCommand>
}
 8013a4c:	e7be      	b.n	80139cc <SUBGRF_SetModulationParams+0x7c>
 8013a4e:	bf00      	nop
 8013a50:	0801937c 	.word	0x0801937c
 8013a54:	2000171f 	.word	0x2000171f
 8013a58:	3d090000 	.word	0x3d090000
 8013a5c:	01e84800 	.word	0x01e84800

08013a60 <SUBGRF_SetPacketParams>:
{
 8013a60:	b510      	push	{r4, lr}
 8013a62:	b084      	sub	sp, #16
 8013a64:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8013a66:	ab01      	add	r3, sp, #4
 8013a68:	4a33      	ldr	r2, [pc, #204]	; (8013b38 <SUBGRF_SetPacketParams+0xd8>)
 8013a6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8013a6c:	c303      	stmia	r3!, {r0, r1}
 8013a6e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8013a70:	7820      	ldrb	r0, [r4, #0]
 8013a72:	4b32      	ldr	r3, [pc, #200]	; (8013b3c <SUBGRF_SetPacketParams+0xdc>)
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	4298      	cmp	r0, r3
 8013a78:	d106      	bne.n	8013a88 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8013a7a:	7823      	ldrb	r3, [r4, #0]
 8013a7c:	2b03      	cmp	r3, #3
 8013a7e:	d82a      	bhi.n	8013ad6 <SUBGRF_SetPacketParams+0x76>
 8013a80:	e8df f003 	tbb	[pc, r3]
 8013a84:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8013a88:	f7ff feba 	bl	8013800 <SUBGRF_SetPacketType>
 8013a8c:	e7f5      	b.n	8013a7a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8013a8e:	7a63      	ldrb	r3, [r4, #9]
 8013a90:	2bf1      	cmp	r3, #241	; 0xf1
 8013a92:	d022      	beq.n	8013ada <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8013a94:	2bf2      	cmp	r3, #242	; 0xf2
 8013a96:	d02a      	beq.n	8013aee <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8013a98:	8862      	ldrh	r2, [r4, #2]
 8013a9a:	0a11      	lsrs	r1, r2, #8
 8013a9c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8013aa0:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8013aa4:	7922      	ldrb	r2, [r4, #4]
 8013aa6:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8013aaa:	7962      	ldrb	r2, [r4, #5]
 8013aac:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8013ab0:	79a2      	ldrb	r2, [r4, #6]
 8013ab2:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8013ab6:	79e2      	ldrb	r2, [r4, #7]
 8013ab8:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8013abc:	7a22      	ldrb	r2, [r4, #8]
 8013abe:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8013ac2:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8013ac6:	7aa3      	ldrb	r3, [r4, #10]
 8013ac8:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8013acc:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8013ace:	a901      	add	r1, sp, #4
 8013ad0:	208c      	movs	r0, #140	; 0x8c
 8013ad2:	f7ff fc19 	bl	8013308 <SUBGRF_WriteCommand>
}
 8013ad6:	b004      	add	sp, #16
 8013ad8:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8013ada:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013ade:	f7ff fbb2 	bl	8013246 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8013ae2:	f248 0005 	movw	r0, #32773	; 0x8005
 8013ae6:	f7ff fbc2 	bl	801326e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8013aea:	2302      	movs	r3, #2
 8013aec:	e7d4      	b.n	8013a98 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8013aee:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8013af2:	f7ff fba8 	bl	8013246 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8013af6:	f241 0021 	movw	r0, #4129	; 0x1021
 8013afa:	f7ff fbb8 	bl	801326e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8013afe:	2306      	movs	r3, #6
 8013b00:	e7ca      	b.n	8013a98 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8013b02:	7b23      	ldrb	r3, [r4, #12]
 8013b04:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8013b08:	2201      	movs	r2, #1
        break;
 8013b0a:	e7e0      	b.n	8013ace <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8013b0c:	89e3      	ldrh	r3, [r4, #14]
 8013b0e:	0a1a      	lsrs	r2, r3, #8
 8013b10:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8013b14:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8013b18:	7c23      	ldrb	r3, [r4, #16]
 8013b1a:	4a09      	ldr	r2, [pc, #36]	; (8013b40 <SUBGRF_SetPacketParams+0xe0>)
 8013b1c:	7013      	strb	r3, [r2, #0]
 8013b1e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8013b22:	7c63      	ldrb	r3, [r4, #17]
 8013b24:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8013b28:	7ca3      	ldrb	r3, [r4, #18]
 8013b2a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8013b2e:	7ce3      	ldrb	r3, [r4, #19]
 8013b30:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8013b34:	2206      	movs	r2, #6
        break;
 8013b36:	e7ca      	b.n	8013ace <SUBGRF_SetPacketParams+0x6e>
 8013b38:	08019384 	.word	0x08019384
 8013b3c:	2000171f 	.word	0x2000171f
 8013b40:	2000171d 	.word	0x2000171d

08013b44 <SUBGRF_SetBufferBaseAddress>:
{
 8013b44:	b500      	push	{lr}
 8013b46:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8013b48:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8013b4c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8013b50:	2202      	movs	r2, #2
 8013b52:	a901      	add	r1, sp, #4
 8013b54:	208f      	movs	r0, #143	; 0x8f
 8013b56:	f7ff fbd7 	bl	8013308 <SUBGRF_WriteCommand>
}
 8013b5a:	b003      	add	sp, #12
 8013b5c:	f85d fb04 	ldr.w	pc, [sp], #4

08013b60 <SUBGRF_ReadCommand>:
{
 8013b60:	b510      	push	{r4, lr}
 8013b62:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b64:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013b68:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8013b6a:	460a      	mov	r2, r1
 8013b6c:	4601      	mov	r1, r0
 8013b6e:	4803      	ldr	r0, [pc, #12]	; (8013b7c <SUBGRF_ReadCommand+0x1c>)
 8013b70:	f7f3 fa9c 	bl	80070ac <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b74:	f384 8810 	msr	PRIMASK, r4
}
 8013b78:	bd10      	pop	{r4, pc}
 8013b7a:	bf00      	nop
 8013b7c:	200005c0 	.word	0x200005c0

08013b80 <SUBGRF_GetRssiInst>:
{
 8013b80:	b500      	push	{lr}
 8013b82:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8013b84:	2201      	movs	r2, #1
 8013b86:	a901      	add	r1, sp, #4
 8013b88:	2015      	movs	r0, #21
 8013b8a:	f7ff ffe9 	bl	8013b60 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8013b8e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8013b92:	4240      	negs	r0, r0
}
 8013b94:	1040      	asrs	r0, r0, #1
 8013b96:	b003      	add	sp, #12
 8013b98:	f85d fb04 	ldr.w	pc, [sp], #4

08013b9c <SUBGRF_GetRxBufferStatus>:
{
 8013b9c:	b530      	push	{r4, r5, lr}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	4605      	mov	r5, r0
 8013ba2:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8013ba4:	2202      	movs	r2, #2
 8013ba6:	a901      	add	r1, sp, #4
 8013ba8:	2013      	movs	r0, #19
 8013baa:	f7ff ffd9 	bl	8013b60 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8013bae:	f7ff fadf 	bl	8013170 <SUBGRF_GetPacketType>
 8013bb2:	2801      	cmp	r0, #1
 8013bb4:	d007      	beq.n	8013bc6 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8013bb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013bba:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8013bbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013bc0:	7023      	strb	r3, [r4, #0]
}
 8013bc2:	b003      	add	sp, #12
 8013bc4:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8013bc6:	4b05      	ldr	r3, [pc, #20]	; (8013bdc <SUBGRF_GetRxBufferStatus+0x40>)
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d1f2      	bne.n	8013bb6 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8013bd0:	f240 7002 	movw	r0, #1794	; 0x702
 8013bd4:	f7ff fae2 	bl	801319c <SUBGRF_ReadRegister>
 8013bd8:	7028      	strb	r0, [r5, #0]
 8013bda:	e7ef      	b.n	8013bbc <SUBGRF_GetRxBufferStatus+0x20>
 8013bdc:	2000171d 	.word	0x2000171d

08013be0 <SUBGRF_GetPayload>:
{
 8013be0:	b570      	push	{r4, r5, r6, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	4606      	mov	r6, r0
 8013be6:	460c      	mov	r4, r1
 8013be8:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8013bf0:	f10d 0107 	add.w	r1, sp, #7
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	f7ff ffd1 	bl	8013b9c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8013bfa:	7822      	ldrb	r2, [r4, #0]
 8013bfc:	42aa      	cmp	r2, r5
 8013bfe:	d902      	bls.n	8013c06 <SUBGRF_GetPayload+0x26>
        return 1;
 8013c00:	2001      	movs	r0, #1
}
 8013c02:	b002      	add	sp, #8
 8013c04:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8013c06:	4631      	mov	r1, r6
 8013c08:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013c0c:	f7ff fb6c 	bl	80132e8 <SUBGRF_ReadBuffer>
    return 0;
 8013c10:	2000      	movs	r0, #0
 8013c12:	e7f6      	b.n	8013c02 <SUBGRF_GetPayload+0x22>

08013c14 <SUBGRF_GetPacketStatus>:
{
 8013c14:	b510      	push	{r4, lr}
 8013c16:	b082      	sub	sp, #8
 8013c18:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8013c1a:	2203      	movs	r2, #3
 8013c1c:	a901      	add	r1, sp, #4
 8013c1e:	2014      	movs	r0, #20
 8013c20:	f7ff ff9e 	bl	8013b60 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8013c24:	f7ff faa4 	bl	8013170 <SUBGRF_GetPacketType>
 8013c28:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8013c2a:	b148      	cbz	r0, 8013c40 <SUBGRF_GetPacketStatus+0x2c>
 8013c2c:	2801      	cmp	r0, #1
 8013c2e:	d018      	beq.n	8013c62 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8013c30:	2214      	movs	r2, #20
 8013c32:	2100      	movs	r1, #0
 8013c34:	4620      	mov	r0, r4
 8013c36:	f000 fafc 	bl	8014232 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8013c3a:	230f      	movs	r3, #15
 8013c3c:	7023      	strb	r3, [r4, #0]
}
 8013c3e:	e00e      	b.n	8013c5e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8013c40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013c44:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8013c46:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013c4a:	425b      	negs	r3, r3
 8013c4c:	105b      	asrs	r3, r3, #1
 8013c4e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8013c50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013c54:	425b      	negs	r3, r3
 8013c56:	105b      	asrs	r3, r3, #1
 8013c58:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	60a3      	str	r3, [r4, #8]
}
 8013c5e:	b002      	add	sp, #8
 8013c60:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8013c62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013c66:	425b      	negs	r3, r3
 8013c68:	105b      	asrs	r3, r3, #1
 8013c6a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8013c6c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8013c70:	3302      	adds	r3, #2
 8013c72:	109b      	asrs	r3, r3, #2
 8013c74:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8013c76:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013c7a:	425b      	negs	r3, r3
 8013c7c:	105b      	asrs	r3, r3, #1
 8013c7e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8013c80:	4b01      	ldr	r3, [pc, #4]	; (8013c88 <SUBGRF_GetPacketStatus+0x74>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	6123      	str	r3, [r4, #16]
            break;
 8013c86:	e7ea      	b.n	8013c5e <SUBGRF_GetPacketStatus+0x4a>
 8013c88:	20001718 	.word	0x20001718

08013c8c <SUBGRF_SetSwitch>:
{
 8013c8c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8013c8e:	2901      	cmp	r1, #1
 8013c90:	d003      	beq.n	8013c9a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8013c92:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8013c94:	f7ef fdcb 	bl	800382e <RBI_ConfigRFSwitch>
}
 8013c98:	bd10      	pop	{r4, pc}
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8013c9e:	2c01      	cmp	r4, #1
 8013ca0:	d003      	beq.n	8013caa <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8013ca2:	2c02      	cmp	r4, #2
 8013ca4:	d1f6      	bne.n	8013c94 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8013ca6:	2003      	movs	r0, #3
 8013ca8:	e7f4      	b.n	8013c94 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8013caa:	2004      	movs	r0, #4
 8013cac:	f7ff fa86 	bl	80131bc <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8013cb0:	2002      	movs	r0, #2
 8013cb2:	e7f6      	b.n	8013ca2 <SUBGRF_SetSwitch+0x16>

08013cb4 <SUBGRF_SetRfTxPower>:
{
 8013cb4:	b538      	push	{r3, r4, r5, lr}
 8013cb6:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8013cb8:	f7ef fdbd 	bl	8003836 <RBI_GetTxConfig>
    switch (TxConfig)
 8013cbc:	b148      	cbz	r0, 8013cd2 <SUBGRF_SetRfTxPower+0x1e>
 8013cbe:	2802      	cmp	r0, #2
 8013cc0:	d10d      	bne.n	8013cde <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8013cc2:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8013cc4:	2202      	movs	r2, #2
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	4628      	mov	r0, r5
 8013cca:	f7ff fdb3 	bl	8013834 <SUBGRF_SetTxParams>
}
 8013cce:	4628      	mov	r0, r5
 8013cd0:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8013cd2:	2c0f      	cmp	r4, #15
 8013cd4:	dc01      	bgt.n	8013cda <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8013cd6:	2501      	movs	r5, #1
 8013cd8:	e7f4      	b.n	8013cc4 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8013cda:	2502      	movs	r5, #2
 8013cdc:	e7f2      	b.n	8013cc4 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8013cde:	2501      	movs	r5, #1
 8013ce0:	e7f0      	b.n	8013cc4 <SUBGRF_SetRfTxPower+0x10>

08013ce2 <SUBGRF_GetRadioWakeUpTime>:
}
 8013ce2:	2001      	movs	r0, #1
 8013ce4:	4770      	bx	lr
	...

08013ce8 <HAL_SUBGHZ_TxCpltCallback>:
{
 8013ce8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8013cea:	4b02      	ldr	r3, [pc, #8]	; (8013cf4 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2001      	movs	r0, #1
 8013cf0:	4798      	blx	r3
}
 8013cf2:	bd08      	pop	{r3, pc}
 8013cf4:	20001720 	.word	0x20001720

08013cf8 <HAL_SUBGHZ_RxCpltCallback>:
{
 8013cf8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8013cfa:	4b02      	ldr	r3, [pc, #8]	; (8013d04 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	2002      	movs	r0, #2
 8013d00:	4798      	blx	r3
}
 8013d02:	bd08      	pop	{r3, pc}
 8013d04:	20001720 	.word	0x20001720

08013d08 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8013d08:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8013d0a:	4b02      	ldr	r3, [pc, #8]	; (8013d14 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	2040      	movs	r0, #64	; 0x40
 8013d10:	4798      	blx	r3
}
 8013d12:	bd08      	pop	{r3, pc}
 8013d14:	20001720 	.word	0x20001720

08013d18 <HAL_SUBGHZ_CADStatusCallback>:
{
 8013d18:	b508      	push	{r3, lr}
    switch (cadstatus)
 8013d1a:	b111      	cbz	r1, 8013d22 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8013d1c:	2901      	cmp	r1, #1
 8013d1e:	d005      	beq.n	8013d2c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8013d20:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8013d22:	4b05      	ldr	r3, [pc, #20]	; (8013d38 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	2080      	movs	r0, #128	; 0x80
 8013d28:	4798      	blx	r3
            break;
 8013d2a:	e7f9      	b.n	8013d20 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8013d2c:	4b02      	ldr	r3, [pc, #8]	; (8013d38 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013d34:	4798      	blx	r3
}
 8013d36:	e7f3      	b.n	8013d20 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8013d38:	20001720 	.word	0x20001720

08013d3c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8013d3c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8013d3e:	4b03      	ldr	r3, [pc, #12]	; (8013d4c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013d46:	4798      	blx	r3
}
 8013d48:	bd08      	pop	{r3, pc}
 8013d4a:	bf00      	nop
 8013d4c:	20001720 	.word	0x20001720

08013d50 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8013d50:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8013d52:	4b02      	ldr	r3, [pc, #8]	; (8013d5c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2020      	movs	r0, #32
 8013d58:	4798      	blx	r3
}
 8013d5a:	bd08      	pop	{r3, pc}
 8013d5c:	20001720 	.word	0x20001720

08013d60 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8013d60:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8013d62:	4b02      	ldr	r3, [pc, #8]	; (8013d6c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2004      	movs	r0, #4
 8013d68:	4798      	blx	r3
}
 8013d6a:	bd08      	pop	{r3, pc}
 8013d6c:	20001720 	.word	0x20001720

08013d70 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8013d70:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8013d72:	4b02      	ldr	r3, [pc, #8]	; (8013d7c <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2008      	movs	r0, #8
 8013d78:	4798      	blx	r3
}
 8013d7a:	bd08      	pop	{r3, pc}
 8013d7c:	20001720 	.word	0x20001720

08013d80 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8013d80:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8013d82:	4b02      	ldr	r3, [pc, #8]	; (8013d8c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	2010      	movs	r0, #16
 8013d88:	4798      	blx	r3
}
 8013d8a:	bd08      	pop	{r3, pc}
 8013d8c:	20001720 	.word	0x20001720

08013d90 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8013d90:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8013d92:	4b03      	ldr	r3, [pc, #12]	; (8013da0 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8013d9a:	4798      	blx	r3
}
 8013d9c:	bd08      	pop	{r3, pc}
 8013d9e:	bf00      	nop
 8013da0:	20001720 	.word	0x20001720

08013da4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8013da4:	4601      	mov	r1, r0
 8013da6:	b188      	cbz	r0, 8013dcc <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8013da8:	2300      	movs	r3, #0
 8013daa:	2b15      	cmp	r3, #21
 8013dac:	d80d      	bhi.n	8013dca <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8013dae:	4618      	mov	r0, r3
 8013db0:	4a07      	ldr	r2, [pc, #28]	; (8013dd0 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8013db2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013db6:	428a      	cmp	r2, r1
 8013db8:	d802      	bhi.n	8013dc0 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8013dba:	3301      	adds	r3, #1
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	e7f4      	b.n	8013daa <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8013dc0:	4b03      	ldr	r3, [pc, #12]	; (8013dd0 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8013dc2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8013dc6:	7918      	ldrb	r0, [r3, #4]
 8013dc8:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8013dca:	e7fe      	b.n	8013dca <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8013dcc:	201f      	movs	r0, #31
}
 8013dce:	4770      	bx	lr
 8013dd0:	0801a2b8 	.word	0x0801a2b8

08013dd4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8013dd4:	b570      	push	{r4, r5, r6, lr}
 8013dd6:	b082      	sub	sp, #8
 8013dd8:	4605      	mov	r5, r0
 8013dda:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8013ddc:	4b1d      	ldr	r3, [pc, #116]	; (8013e54 <SUBGRF_GetCFO+0x80>)
 8013dde:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8013de0:	f640 0007 	movw	r0, #2055	; 0x807
 8013de4:	f7ff f9da 	bl	801319c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8013de8:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8013dec:	3308      	adds	r3, #8
 8013dee:	446b      	add	r3, sp
 8013df0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8013df4:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8013df8:	3301      	adds	r3, #1
 8013dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8013dfe:	4a16      	ldr	r2, [pc, #88]	; (8013e58 <SUBGRF_GetCFO+0x84>)
 8013e00:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8013e04:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8013e08:	2807      	cmp	r0, #7
 8013e0a:	d921      	bls.n	8013e50 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8013e0c:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8013e0e:	fb03 f000 	mul.w	r0, r3, r0
 8013e12:	2803      	cmp	r0, #3
 8013e14:	d800      	bhi.n	8013e18 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8013e16:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8013e18:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8013e1c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8013e20:	f7ff f9bc 	bl	801319c <SUBGRF_ReadRegister>
 8013e24:	0206      	lsls	r6, r0, #8
 8013e26:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8013e2a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8013e2e:	f7ff f9b5 	bl	801319c <SUBGRF_ReadRegister>
 8013e32:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8013e34:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8013e38:	d003      	beq.n	8013e42 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8013e3a:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8013e3e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8013e42:	096b      	lsrs	r3, r5, #5
 8013e44:	fb03 f000 	mul.w	r0, r3, r0
 8013e48:	11c0      	asrs	r0, r0, #7
 8013e4a:	6020      	str	r0, [r4, #0]
}
 8013e4c:	b002      	add	sp, #8
 8013e4e:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8013e50:	2302      	movs	r3, #2
 8013e52:	e7dc      	b.n	8013e0e <SUBGRF_GetCFO+0x3a>
 8013e54:	0c0a0804 	.word	0x0c0a0804
 8013e58:	01e84800 	.word	0x01e84800

08013e5c <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8013e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e60:	4770      	bx	lr

08013e62 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8013e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e66:	4770      	bx	lr

08013e68 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8013e68:	4770      	bx	lr

08013e6a <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8013e6a:	2000      	movs	r0, #0
 8013e6c:	4770      	bx	lr

08013e6e <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8013e6e:	2000      	movs	r0, #0
 8013e70:	4770      	bx	lr

08013e72 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8013e72:	4770      	bx	lr

08013e74 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8013e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e78:	4770      	bx	lr

08013e7a <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8013e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e7e:	4770      	bx	lr

08013e80 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8013e80:	4770      	bx	lr

08013e82 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8013e82:	4770      	bx	lr

08013e84 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8013e84:	4770      	bx	lr
	...

08013e88 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8013e88:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e8a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013e8e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8013e90:	4b1e      	ldr	r3, [pc, #120]	; (8013f0c <TRACE_AllocateBufer+0x84>)
 8013e92:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8013e96:	8a1a      	ldrh	r2, [r3, #16]
 8013e98:	4596      	cmp	lr, r2
 8013e9a:	d011      	beq.n	8013ec0 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8013e9c:	4596      	cmp	lr, r2
 8013e9e:	d921      	bls.n	8013ee4 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8013ea0:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8013ea4:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8013ea6:	4283      	cmp	r3, r0
 8013ea8:	d81f      	bhi.n	8013eea <TRACE_AllocateBufer+0x62>
 8013eaa:	4282      	cmp	r2, r0
 8013eac:	d91d      	bls.n	8013eea <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8013eae:	4b17      	ldr	r3, [pc, #92]	; (8013f0c <TRACE_AllocateBufer+0x84>)
 8013eb0:	2401      	movs	r4, #1
 8013eb2:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8013eb4:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8013eb8:	2400      	movs	r4, #0
 8013eba:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8013ebc:	4613      	mov	r3, r2
 8013ebe:	e014      	b.n	8013eea <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8013ec0:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8013ec4:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8013ec6:	4298      	cmp	r0, r3
 8013ec8:	d30f      	bcc.n	8013eea <TRACE_AllocateBufer+0x62>
 8013eca:	4282      	cmp	r2, r0
 8013ecc:	d90d      	bls.n	8013eea <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8013ece:	4b0f      	ldr	r3, [pc, #60]	; (8013f0c <TRACE_AllocateBufer+0x84>)
 8013ed0:	2401      	movs	r4, #1
 8013ed2:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8013ed4:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8013ed8:	f04f 0e00 	mov.w	lr, #0
 8013edc:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8013ee0:	4613      	mov	r3, r2
 8013ee2:	e002      	b.n	8013eea <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8013ee4:	eba2 020e 	sub.w	r2, r2, lr
 8013ee8:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8013eea:	4283      	cmp	r3, r0
 8013eec:	d90a      	bls.n	8013f04 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8013eee:	4a07      	ldr	r2, [pc, #28]	; (8013f0c <TRACE_AllocateBufer+0x84>)
 8013ef0:	8a53      	ldrh	r3, [r2, #18]
 8013ef2:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8013ef4:	4403      	add	r3, r0
 8013ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013efa:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8013efc:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013efe:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8013f02:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8013f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f08:	e7f9      	b.n	8013efe <TRACE_AllocateBufer+0x76>
 8013f0a:	bf00      	nop
 8013f0c:	20001b24 	.word	0x20001b24

08013f10 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f10:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013f14:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8013f16:	4a03      	ldr	r2, [pc, #12]	; (8013f24 <TRACE_Lock+0x14>)
 8013f18:	8ad3      	ldrh	r3, [r2, #22]
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f1e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8013f22:	4770      	bx	lr
 8013f24:	20001b24 	.word	0x20001b24

08013f28 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013f2c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8013f2e:	4a03      	ldr	r2, [pc, #12]	; (8013f3c <TRACE_UnLock+0x14>)
 8013f30:	8ad3      	ldrh	r3, [r2, #22]
 8013f32:	3b01      	subs	r3, #1
 8013f34:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f36:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8013f3a:	4770      	bx	lr
 8013f3c:	20001b24 	.word	0x20001b24

08013f40 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8013f40:	4b02      	ldr	r3, [pc, #8]	; (8013f4c <TRACE_IsLocked+0xc>)
 8013f42:	8ad8      	ldrh	r0, [r3, #22]
}
 8013f44:	3800      	subs	r0, #0
 8013f46:	bf18      	it	ne
 8013f48:	2001      	movne	r0, #1
 8013f4a:	4770      	bx	lr
 8013f4c:	20001b24 	.word	0x20001b24

08013f50 <UTIL_ADV_TRACE_Init>:
{
 8013f50:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8013f52:	2218      	movs	r2, #24
 8013f54:	2100      	movs	r1, #0
 8013f56:	4807      	ldr	r0, [pc, #28]	; (8013f74 <UTIL_ADV_TRACE_Init+0x24>)
 8013f58:	f000 f96b 	bl	8014232 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8013f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013f60:	2100      	movs	r1, #0
 8013f62:	4805      	ldr	r0, [pc, #20]	; (8013f78 <UTIL_ADV_TRACE_Init+0x28>)
 8013f64:	f000 f965 	bl	8014232 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8013f68:	4b04      	ldr	r3, [pc, #16]	; (8013f7c <UTIL_ADV_TRACE_Init+0x2c>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4804      	ldr	r0, [pc, #16]	; (8013f80 <UTIL_ADV_TRACE_Init+0x30>)
 8013f6e:	4798      	blx	r3
}
 8013f70:	bd08      	pop	{r3, pc}
 8013f72:	bf00      	nop
 8013f74:	20001b24 	.word	0x20001b24
 8013f78:	20001724 	.word	0x20001724
 8013f7c:	080193dc 	.word	0x080193dc
 8013f80:	08014101 	.word	0x08014101

08013f84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8013f84:	4b01      	ldr	r3, [pc, #4]	; (8013f8c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8013f86:	6058      	str	r0, [r3, #4]
}
 8013f88:	4770      	bx	lr
 8013f8a:	bf00      	nop
 8013f8c:	20001b24 	.word	0x20001b24

08013f90 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8013f90:	4b01      	ldr	r3, [pc, #4]	; (8013f98 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8013f92:	7218      	strb	r0, [r3, #8]
}
 8013f94:	4770      	bx	lr
 8013f96:	bf00      	nop
 8013f98:	20001b24 	.word	0x20001b24

08013f9c <TRACE_Send>:
{
 8013f9c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8013fa2:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013fa4:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8013fa6:	f7ff ffcb 	bl	8013f40 <TRACE_IsLocked>
 8013faa:	b118      	cbz	r0, 8013fb4 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fac:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8013fb0:	2000      	movs	r0, #0
}
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8013fb4:	f7ff ffac 	bl	8013f10 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8013fb8:	4b1c      	ldr	r3, [pc, #112]	; (801402c <TRACE_Send+0x90>)
 8013fba:	8a1a      	ldrh	r2, [r3, #16]
 8013fbc:	8a5b      	ldrh	r3, [r3, #18]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d02e      	beq.n	8014020 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8013fc2:	491a      	ldr	r1, [pc, #104]	; (801402c <TRACE_Send+0x90>)
 8013fc4:	7889      	ldrb	r1, [r1, #2]
 8013fc6:	2901      	cmp	r1, #1
 8013fc8:	d017      	beq.n	8013ffa <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8013fca:	4a18      	ldr	r2, [pc, #96]	; (801402c <TRACE_Send+0x90>)
 8013fcc:	7892      	ldrb	r2, [r2, #2]
 8013fce:	b932      	cbnz	r2, 8013fde <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8013fd0:	4a16      	ldr	r2, [pc, #88]	; (801402c <TRACE_Send+0x90>)
 8013fd2:	8a12      	ldrh	r2, [r2, #16]
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d91e      	bls.n	8014016 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8013fd8:	1a9b      	subs	r3, r3, r2
 8013fda:	4a14      	ldr	r2, [pc, #80]	; (801402c <TRACE_Send+0x90>)
 8013fdc:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8013fde:	4e13      	ldr	r6, [pc, #76]	; (801402c <TRACE_Send+0x90>)
 8013fe0:	8a33      	ldrh	r3, [r6, #16]
 8013fe2:	4d13      	ldr	r5, [pc, #76]	; (8014030 <TRACE_Send+0x94>)
 8013fe4:	441d      	add	r5, r3
 8013fe6:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8013fea:	f7ee f80b 	bl	8002004 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8013fee:	4b11      	ldr	r3, [pc, #68]	; (8014034 <TRACE_Send+0x98>)
 8013ff0:	68db      	ldr	r3, [r3, #12]
 8013ff2:	8ab1      	ldrh	r1, [r6, #20]
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	4798      	blx	r3
 8013ff8:	e7db      	b.n	8013fb2 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8013ffa:	480c      	ldr	r0, [pc, #48]	; (801402c <TRACE_Send+0x90>)
 8013ffc:	8801      	ldrh	r1, [r0, #0]
 8013ffe:	1a8a      	subs	r2, r1, r2
 8014000:	b292      	uxth	r2, r2
 8014002:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8014004:	2102      	movs	r1, #2
 8014006:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014008:	2100      	movs	r1, #0
 801400a:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801400c:	2a00      	cmp	r2, #0
 801400e:	d1dc      	bne.n	8013fca <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014010:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014012:	8201      	strh	r1, [r0, #16]
 8014014:	e7d9      	b.n	8013fca <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014016:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 801401a:	4b04      	ldr	r3, [pc, #16]	; (801402c <TRACE_Send+0x90>)
 801401c:	829a      	strh	r2, [r3, #20]
 801401e:	e7de      	b.n	8013fde <TRACE_Send+0x42>
      TRACE_UnLock();
 8014020:	f7ff ff82 	bl	8013f28 <TRACE_UnLock>
 8014024:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014028:	2000      	movs	r0, #0
}
 801402a:	e7c2      	b.n	8013fb2 <TRACE_Send+0x16>
 801402c:	20001b24 	.word	0x20001b24
 8014030:	20001724 	.word	0x20001724
 8014034:	080193dc 	.word	0x080193dc

08014038 <UTIL_ADV_TRACE_COND_FSend>:
{
 8014038:	b408      	push	{r3}
 801403a:	b530      	push	{r4, r5, lr}
 801403c:	b086      	sub	sp, #24
 801403e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8014040:	2300      	movs	r3, #0
 8014042:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8014046:	4b2b      	ldr	r3, [pc, #172]	; (80140f4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014048:	7a1b      	ldrb	r3, [r3, #8]
 801404a:	4283      	cmp	r3, r0
 801404c:	d34c      	bcc.n	80140e8 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801404e:	4b29      	ldr	r3, [pc, #164]	; (80140f4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014050:	68db      	ldr	r3, [r3, #12]
 8014052:	4399      	bics	r1, r3
 8014054:	d14b      	bne.n	80140ee <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8014056:	4b27      	ldr	r3, [pc, #156]	; (80140f4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	b123      	cbz	r3, 8014066 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 801405c:	b11a      	cbz	r2, 8014066 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801405e:	f10d 0102 	add.w	r1, sp, #2
 8014062:	a801      	add	r0, sp, #4
 8014064:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8014066:	ab0a      	add	r3, sp, #40	; 0x28
 8014068:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801406a:	4622      	mov	r2, r4
 801406c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014070:	4821      	ldr	r0, [pc, #132]	; (80140f8 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8014072:	f000 fc15 	bl	80148a0 <tiny_vsnprintf_like>
 8014076:	b285      	uxth	r5, r0
  TRACE_Lock();
 8014078:	f7ff ff4a 	bl	8013f10 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801407c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014080:	18e8      	adds	r0, r5, r3
 8014082:	4669      	mov	r1, sp
 8014084:	b280      	uxth	r0, r0
 8014086:	f7ff feff 	bl	8013e88 <TRACE_AllocateBufer>
 801408a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801408e:	d026      	beq.n	80140de <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8014090:	2300      	movs	r3, #0
 8014092:	e00d      	b.n	80140b0 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8014094:	f8bd 2000 	ldrh.w	r2, [sp]
 8014098:	f103 0118 	add.w	r1, r3, #24
 801409c:	4469      	add	r1, sp
 801409e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80140a2:	4916      	ldr	r1, [pc, #88]	; (80140fc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80140a4:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80140a6:	3201      	adds	r2, #1
 80140a8:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80140ac:	3301      	adds	r3, #1
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d8ed      	bhi.n	8014094 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80140b8:	f8bd 0000 	ldrh.w	r0, [sp]
 80140bc:	9b05      	ldr	r3, [sp, #20]
 80140be:	4622      	mov	r2, r4
 80140c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80140c4:	4c0d      	ldr	r4, [pc, #52]	; (80140fc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80140c6:	4420      	add	r0, r4
 80140c8:	f000 fbea 	bl	80148a0 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80140cc:	f7ff ff2c 	bl	8013f28 <TRACE_UnLock>
    return TRACE_Send();
 80140d0:	f7ff ff64 	bl	8013f9c <TRACE_Send>
}
 80140d4:	b006      	add	sp, #24
 80140d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80140da:	b001      	add	sp, #4
 80140dc:	4770      	bx	lr
  TRACE_UnLock();
 80140de:	f7ff ff23 	bl	8013f28 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80140e2:	f06f 0002 	mvn.w	r0, #2
 80140e6:	e7f5      	b.n	80140d4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80140e8:	f06f 0004 	mvn.w	r0, #4
 80140ec:	e7f2      	b.n	80140d4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80140ee:	f06f 0005 	mvn.w	r0, #5
 80140f2:	e7ef      	b.n	80140d4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80140f4:	20001b24 	.word	0x20001b24
 80140f8:	20001b3c 	.word	0x20001b3c
 80140fc:	20001724 	.word	0x20001724

08014100 <TRACE_TxCpltCallback>:
{
 8014100:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014102:	f3ef 8310 	mrs	r3, PRIMASK
 8014106:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8014108:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801410a:	4b26      	ldr	r3, [pc, #152]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 801410c:	789b      	ldrb	r3, [r3, #2]
 801410e:	2b02      	cmp	r3, #2
 8014110:	d016      	beq.n	8014140 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8014112:	4a24      	ldr	r2, [pc, #144]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 8014114:	8a13      	ldrh	r3, [r2, #16]
 8014116:	8a90      	ldrh	r0, [r2, #20]
 8014118:	4403      	add	r3, r0
 801411a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801411e:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8014120:	4b20      	ldr	r3, [pc, #128]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 8014122:	8a1a      	ldrh	r2, [r3, #16]
 8014124:	8a5b      	ldrh	r3, [r3, #18]
 8014126:	429a      	cmp	r2, r3
 8014128:	d003      	beq.n	8014132 <TRACE_TxCpltCallback+0x32>
 801412a:	481e      	ldr	r0, [pc, #120]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 801412c:	8ac0      	ldrh	r0, [r0, #22]
 801412e:	2801      	cmp	r0, #1
 8014130:	d00b      	beq.n	801414a <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014132:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8014136:	f7ed ff6b 	bl	8002010 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801413a:	f7ff fef5 	bl	8013f28 <TRACE_UnLock>
}
 801413e:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014140:	4b18      	ldr	r3, [pc, #96]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 8014142:	2200      	movs	r2, #0
 8014144:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014146:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8014148:	e7ea      	b.n	8014120 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801414a:	4816      	ldr	r0, [pc, #88]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 801414c:	7880      	ldrb	r0, [r0, #2]
 801414e:	2801      	cmp	r0, #1
 8014150:	d014      	beq.n	801417c <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8014152:	4a14      	ldr	r2, [pc, #80]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 8014154:	7892      	ldrb	r2, [r2, #2]
 8014156:	b932      	cbnz	r2, 8014166 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014158:	4a12      	ldr	r2, [pc, #72]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 801415a:	8a12      	ldrh	r2, [r2, #16]
 801415c:	4293      	cmp	r3, r2
 801415e:	d91b      	bls.n	8014198 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8014160:	1a9b      	subs	r3, r3, r2
 8014162:	4a10      	ldr	r2, [pc, #64]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 8014164:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8014166:	4b0f      	ldr	r3, [pc, #60]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 8014168:	8a1a      	ldrh	r2, [r3, #16]
 801416a:	480f      	ldr	r0, [pc, #60]	; (80141a8 <TRACE_TxCpltCallback+0xa8>)
 801416c:	4410      	add	r0, r2
 801416e:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8014172:	4a0e      	ldr	r2, [pc, #56]	; (80141ac <TRACE_TxCpltCallback+0xac>)
 8014174:	68d2      	ldr	r2, [r2, #12]
 8014176:	8a99      	ldrh	r1, [r3, #20]
 8014178:	4790      	blx	r2
 801417a:	e7e0      	b.n	801413e <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801417c:	4c09      	ldr	r4, [pc, #36]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 801417e:	8820      	ldrh	r0, [r4, #0]
 8014180:	1a82      	subs	r2, r0, r2
 8014182:	b292      	uxth	r2, r2
 8014184:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8014186:	2002      	movs	r0, #2
 8014188:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801418a:	2000      	movs	r0, #0
 801418c:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801418e:	2a00      	cmp	r2, #0
 8014190:	d1df      	bne.n	8014152 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014192:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014194:	8220      	strh	r0, [r4, #16]
 8014196:	e7dc      	b.n	8014152 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014198:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 801419c:	4b01      	ldr	r3, [pc, #4]	; (80141a4 <TRACE_TxCpltCallback+0xa4>)
 801419e:	829a      	strh	r2, [r3, #20]
 80141a0:	e7e1      	b.n	8014166 <TRACE_TxCpltCallback+0x66>
 80141a2:	bf00      	nop
 80141a4:	20001b24 	.word	0x20001b24
 80141a8:	20001724 	.word	0x20001724
 80141ac:	080193dc 	.word	0x080193dc

080141b0 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80141b0:	2300      	movs	r3, #0
 80141b2:	4a02      	ldr	r2, [pc, #8]	; (80141bc <UTIL_LPM_Init+0xc>)
 80141b4:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80141b6:	4a02      	ldr	r2, [pc, #8]	; (80141c0 <UTIL_LPM_Init+0x10>)
 80141b8:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80141ba:	4770      	bx	lr
 80141bc:	20001d40 	.word	0x20001d40
 80141c0:	20001d3c 	.word	0x20001d3c

080141c4 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80141c4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80141c8:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80141ca:	b141      	cbz	r1, 80141de <UTIL_LPM_SetStopMode+0x1a>
 80141cc:	2901      	cmp	r1, #1
 80141ce:	d103      	bne.n	80141d8 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80141d0:	4906      	ldr	r1, [pc, #24]	; (80141ec <UTIL_LPM_SetStopMode+0x28>)
 80141d2:	680a      	ldr	r2, [r1, #0]
 80141d4:	4302      	orrs	r2, r0
 80141d6:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80141d8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80141dc:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80141de:	4903      	ldr	r1, [pc, #12]	; (80141ec <UTIL_LPM_SetStopMode+0x28>)
 80141e0:	680a      	ldr	r2, [r1, #0]
 80141e2:	ea22 0200 	bic.w	r2, r2, r0
 80141e6:	600a      	str	r2, [r1, #0]
      break;
 80141e8:	e7f6      	b.n	80141d8 <UTIL_LPM_SetStopMode+0x14>
 80141ea:	bf00      	nop
 80141ec:	20001d40 	.word	0x20001d40

080141f0 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80141f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80141f4:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80141f6:	b141      	cbz	r1, 801420a <UTIL_LPM_SetOffMode+0x1a>
 80141f8:	2901      	cmp	r1, #1
 80141fa:	d103      	bne.n	8014204 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80141fc:	4906      	ldr	r1, [pc, #24]	; (8014218 <UTIL_LPM_SetOffMode+0x28>)
 80141fe:	680a      	ldr	r2, [r1, #0]
 8014200:	4302      	orrs	r2, r0
 8014202:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014204:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014208:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 801420a:	4903      	ldr	r1, [pc, #12]	; (8014218 <UTIL_LPM_SetOffMode+0x28>)
 801420c:	680a      	ldr	r2, [r1, #0]
 801420e:	ea22 0200 	bic.w	r2, r2, r0
 8014212:	600a      	str	r2, [r1, #0]
      break;
 8014214:	e7f6      	b.n	8014204 <UTIL_LPM_SetOffMode+0x14>
 8014216:	bf00      	nop
 8014218:	20001d3c 	.word	0x20001d3c

0801421c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 801421c:	e004      	b.n	8014228 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 801421e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014222:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8014226:	461a      	mov	r2, r3
 8014228:	1e53      	subs	r3, r2, #1
 801422a:	b29b      	uxth	r3, r3
 801422c:	2a00      	cmp	r2, #0
 801422e:	d1f6      	bne.n	801421e <UTIL_MEM_cpy_8+0x2>
    }
}
 8014230:	4770      	bx	lr

08014232 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8014232:	e002      	b.n	801423a <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8014234:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8014238:	461a      	mov	r2, r3
 801423a:	1e53      	subs	r3, r2, #1
 801423c:	b29b      	uxth	r3, r3
 801423e:	2a00      	cmp	r2, #0
 8014240:	d1f8      	bne.n	8014234 <UTIL_MEM_set_8+0x2>
  }
}
 8014242:	4770      	bx	lr

08014244 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014244:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014248:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 801424a:	4a06      	ldr	r2, [pc, #24]	; (8014264 <UTIL_SEQ_SetTask+0x20>)
 801424c:	6813      	ldr	r3, [r2, #0]
 801424e:	4303      	orrs	r3, r0
 8014250:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8014252:	4a05      	ldr	r2, [pc, #20]	; (8014268 <UTIL_SEQ_SetTask+0x24>)
 8014254:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8014258:	4303      	orrs	r3, r0
 801425a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801425e:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8014262:	4770      	bx	lr
 8014264:	20001d5c 	.word	0x20001d5c
 8014268:	20001d54 	.word	0x20001d54

0801426c <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801426c:	0c03      	lsrs	r3, r0, #16
 801426e:	041b      	lsls	r3, r3, #16
 8014270:	b9b3      	cbnz	r3, 80142a0 <SEQ_BitPosition+0x34>
 8014272:	0400      	lsls	r0, r0, #16
 8014274:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8014276:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801427a:	d102      	bne.n	8014282 <SEQ_BitPosition+0x16>
 801427c:	3308      	adds	r3, #8
 801427e:	b2db      	uxtb	r3, r3
 8014280:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8014282:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014286:	d102      	bne.n	801428e <SEQ_BitPosition+0x22>
 8014288:	3304      	adds	r3, #4
 801428a:	b2db      	uxtb	r3, r3
 801428c:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801428e:	0f00      	lsrs	r0, r0, #28
 8014290:	4a04      	ldr	r2, [pc, #16]	; (80142a4 <SEQ_BitPosition+0x38>)
 8014292:	5c10      	ldrb	r0, [r2, r0]
 8014294:	4418      	add	r0, r3
 8014296:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8014298:	f1c0 001f 	rsb	r0, r0, #31
}
 801429c:	b2c0      	uxtb	r0, r0
 801429e:	4770      	bx	lr
uint8_t n = 0U;
 80142a0:	2300      	movs	r3, #0
 80142a2:	e7e8      	b.n	8014276 <SEQ_BitPosition+0xa>
 80142a4:	0801a368 	.word	0x0801a368

080142a8 <UTIL_SEQ_RegTask>:
{
 80142a8:	b538      	push	{r3, r4, r5, lr}
 80142aa:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80142ac:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80142b0:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80142b2:	f7ff ffdb 	bl	801426c <SEQ_BitPosition>
 80142b6:	4b03      	ldr	r3, [pc, #12]	; (80142c4 <UTIL_SEQ_RegTask+0x1c>)
 80142b8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80142bc:	f385 8810 	msr	PRIMASK, r5
}
 80142c0:	bd38      	pop	{r3, r4, r5, pc}
 80142c2:	bf00      	nop
 80142c4:	20001d44 	.word	0x20001d44

080142c8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80142c8:	b082      	sub	sp, #8
 80142ca:	b082      	sub	sp, #8
 80142cc:	f10d 0c08 	add.w	ip, sp, #8
 80142d0:	e90c 0006 	stmdb	ip, {r1, r2}
 80142d4:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80142d6:	2200      	movs	r2, #0
 80142d8:	6002      	str	r2, [r0, #0]
 80142da:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 80142dc:	440b      	add	r3, r1
 80142de:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80142e0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80142e4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80142e8:	440a      	add	r2, r1
 80142ea:	b291      	uxth	r1, r2
 80142ec:	b212      	sxth	r2, r2
 80142ee:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80142f0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80142f4:	db04      	blt.n	8014300 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80142f6:	3301      	adds	r3, #1
 80142f8:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80142fa:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80142fe:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8014300:	b002      	add	sp, #8
 8014302:	b002      	add	sp, #8
 8014304:	4770      	bx	lr

08014306 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8014306:	b082      	sub	sp, #8
 8014308:	b082      	sub	sp, #8
 801430a:	f10d 0c08 	add.w	ip, sp, #8
 801430e:	e90c 0006 	stmdb	ip, {r1, r2}
 8014312:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8014314:	2200      	movs	r2, #0
 8014316:	6002      	str	r2, [r0, #0]
 8014318:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801431a:	1acb      	subs	r3, r1, r3
 801431c:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801431e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014322:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014326:	1a52      	subs	r2, r2, r1
 8014328:	b291      	uxth	r1, r2
 801432a:	b212      	sxth	r2, r2
 801432c:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 801432e:	2a00      	cmp	r2, #0
 8014330:	db02      	blt.n	8014338 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8014332:	b002      	add	sp, #8
 8014334:	b002      	add	sp, #8
 8014336:	4770      	bx	lr
    c.Seconds--;
 8014338:	3b01      	subs	r3, #1
 801433a:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 801433c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8014340:	8081      	strh	r1, [r0, #4]
  return c;
 8014342:	e7f6      	b.n	8014332 <SysTimeSub+0x2c>

08014344 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8014344:	b530      	push	{r4, r5, lr}
 8014346:	b089      	sub	sp, #36	; 0x24
 8014348:	ac02      	add	r4, sp, #8
 801434a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801434e:	2300      	movs	r3, #0
 8014350:	9304      	str	r3, [sp, #16]
 8014352:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014356:	4d0b      	ldr	r5, [pc, #44]	; (8014384 <SysTimeSet+0x40>)
 8014358:	692b      	ldr	r3, [r5, #16]
 801435a:	a805      	add	r0, sp, #20
 801435c:	4798      	blx	r3
 801435e:	4603      	mov	r3, r0
 8014360:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8014362:	9a05      	ldr	r2, [sp, #20]
 8014364:	9200      	str	r2, [sp, #0]
 8014366:	e894 0006 	ldmia.w	r4, {r1, r2}
 801436a:	a806      	add	r0, sp, #24
 801436c:	f7ff ffcb 	bl	8014306 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8014370:	682b      	ldr	r3, [r5, #0]
 8014372:	9806      	ldr	r0, [sp, #24]
 8014374:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8014376:	68ab      	ldr	r3, [r5, #8]
 8014378:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801437c:	4798      	blx	r3
}
 801437e:	b009      	add	sp, #36	; 0x24
 8014380:	bd30      	pop	{r4, r5, pc}
 8014382:	bf00      	nop
 8014384:	0801939c 	.word	0x0801939c

08014388 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8014388:	b530      	push	{r4, r5, lr}
 801438a:	b087      	sub	sp, #28
 801438c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801438e:	2300      	movs	r3, #0
 8014390:	9304      	str	r3, [sp, #16]
 8014392:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8014396:	6003      	str	r3, [r0, #0]
 8014398:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801439a:	4d0b      	ldr	r5, [pc, #44]	; (80143c8 <SysTimeGet+0x40>)
 801439c:	692b      	ldr	r3, [r5, #16]
 801439e:	a805      	add	r0, sp, #20
 80143a0:	4798      	blx	r3
 80143a2:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80143a4:	68eb      	ldr	r3, [r5, #12]
 80143a6:	4798      	blx	r3
 80143a8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80143ac:	686b      	ldr	r3, [r5, #4]
 80143ae:	4798      	blx	r3
 80143b0:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80143b2:	9b05      	ldr	r3, [sp, #20]
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	9b04      	ldr	r3, [sp, #16]
 80143b8:	aa02      	add	r2, sp, #8
 80143ba:	ca06      	ldmia	r2, {r1, r2}
 80143bc:	4620      	mov	r0, r4
 80143be:	f7ff ff83 	bl	80142c8 <SysTimeAdd>

  return sysTime;
}
 80143c2:	4620      	mov	r0, r4
 80143c4:	b007      	add	sp, #28
 80143c6:	bd30      	pop	{r4, r5, pc}
 80143c8:	0801939c 	.word	0x0801939c

080143cc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80143cc:	b530      	push	{r4, r5, lr}
 80143ce:	b083      	sub	sp, #12
 80143d0:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80143d2:	2300      	movs	r3, #0
 80143d4:	9300      	str	r3, [sp, #0]
 80143d6:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80143da:	4b06      	ldr	r3, [pc, #24]	; (80143f4 <SysTimeGetMcuTime+0x28>)
 80143dc:	691b      	ldr	r3, [r3, #16]
 80143de:	466d      	mov	r5, sp
 80143e0:	a801      	add	r0, sp, #4
 80143e2:	4798      	blx	r3
 80143e4:	9000      	str	r0, [sp, #0]

  return calendarTime;
 80143e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80143ea:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80143ee:	4620      	mov	r0, r4
 80143f0:	b003      	add	sp, #12
 80143f2:	bd30      	pop	{r4, r5, pc}
 80143f4:	0801939c 	.word	0x0801939c

080143f8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80143f8:	b530      	push	{r4, r5, lr}
 80143fa:	b089      	sub	sp, #36	; 0x24
 80143fc:	ac02      	add	r4, sp, #8
 80143fe:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8014402:	4d0c      	ldr	r5, [pc, #48]	; (8014434 <SysTimeToMs+0x3c>)
 8014404:	68eb      	ldr	r3, [r5, #12]
 8014406:	4798      	blx	r3
 8014408:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801440c:	686b      	ldr	r3, [r5, #4]
 801440e:	4798      	blx	r3
 8014410:	4603      	mov	r3, r0
 8014412:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8014414:	9a07      	ldr	r2, [sp, #28]
 8014416:	9200      	str	r2, [sp, #0]
 8014418:	e894 0006 	ldmia.w	r4, {r1, r2}
 801441c:	a804      	add	r0, sp, #16
 801441e:	f7ff ff72 	bl	8014306 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8014422:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8014426:	9a04      	ldr	r2, [sp, #16]
 8014428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801442c:	fb00 3002 	mla	r0, r0, r2, r3
 8014430:	b009      	add	sp, #36	; 0x24
 8014432:	bd30      	pop	{r4, r5, pc}
 8014434:	0801939c 	.word	0x0801939c

08014438 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8014438:	b530      	push	{r4, r5, lr}
 801443a:	b087      	sub	sp, #28
 801443c:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 801443e:	4b12      	ldr	r3, [pc, #72]	; (8014488 <SysTimeFromMs+0x50>)
 8014440:	fba3 2301 	umull	r2, r3, r3, r1
 8014444:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8014446:	9304      	str	r3, [sp, #16]
 8014448:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801444c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014450:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8014454:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8014458:	2300      	movs	r3, #0
 801445a:	9302      	str	r3, [sp, #8]
 801445c:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801445e:	4d0b      	ldr	r5, [pc, #44]	; (801448c <SysTimeFromMs+0x54>)
 8014460:	68eb      	ldr	r3, [r5, #12]
 8014462:	4798      	blx	r3
 8014464:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8014468:	686b      	ldr	r3, [r5, #4]
 801446a:	4798      	blx	r3
 801446c:	4603      	mov	r3, r0
 801446e:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8014470:	9a03      	ldr	r2, [sp, #12]
 8014472:	9200      	str	r2, [sp, #0]
 8014474:	aa06      	add	r2, sp, #24
 8014476:	e912 0006 	ldmdb	r2, {r1, r2}
 801447a:	4620      	mov	r0, r4
 801447c:	f7ff ff24 	bl	80142c8 <SysTimeAdd>
}
 8014480:	4620      	mov	r0, r4
 8014482:	b007      	add	sp, #28
 8014484:	bd30      	pop	{r4, r5, pc}
 8014486:	bf00      	nop
 8014488:	10624dd3 	.word	0x10624dd3
 801448c:	0801939c 	.word	0x0801939c

08014490 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8014490:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8014492:	4b03      	ldr	r3, [pc, #12]	; (80144a0 <UTIL_TIMER_Init+0x10>)
 8014494:	2200      	movs	r2, #0
 8014496:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8014498:	4b02      	ldr	r3, [pc, #8]	; (80144a4 <UTIL_TIMER_Init+0x14>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	4798      	blx	r3
}
 801449e:	bd08      	pop	{r3, pc}
 80144a0:	20001d60 	.word	0x20001d60
 80144a4:	080193b0 	.word	0x080193b0

080144a8 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80144a8:	b1a8      	cbz	r0, 80144d6 <UTIL_TIMER_Create+0x2e>
{
 80144aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ac:	4617      	mov	r7, r2
 80144ae:	461e      	mov	r6, r3
 80144b0:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80144b2:	b193      	cbz	r3, 80144da <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80144b4:	2500      	movs	r5, #0
 80144b6:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80144b8:	4b09      	ldr	r3, [pc, #36]	; (80144e0 <UTIL_TIMER_Create+0x38>)
 80144ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144bc:	4608      	mov	r0, r1
 80144be:	4798      	blx	r3
 80144c0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80144c2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80144c4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80144c6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80144c8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80144ca:	9b06      	ldr	r3, [sp, #24]
 80144cc:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80144ce:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80144d0:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80144d2:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80144d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80144d6:	2001      	movs	r0, #1
}
 80144d8:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80144da:	2001      	movs	r0, #1
 80144dc:	e7fa      	b.n	80144d4 <UTIL_TIMER_Create+0x2c>
 80144de:	bf00      	nop
 80144e0:	080193b0 	.word	0x080193b0

080144e4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80144e4:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80144e6:	4c03      	ldr	r4, [pc, #12]	; (80144f4 <UTIL_TIMER_GetCurrentTime+0x10>)
 80144e8:	69e3      	ldr	r3, [r4, #28]
 80144ea:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80144ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80144ee:	4798      	blx	r3
}
 80144f0:	bd10      	pop	{r4, pc}
 80144f2:	bf00      	nop
 80144f4:	080193b0 	.word	0x080193b0

080144f8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80144f8:	b570      	push	{r4, r5, r6, lr}
 80144fa:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80144fc:	4d05      	ldr	r5, [pc, #20]	; (8014514 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80144fe:	69eb      	ldr	r3, [r5, #28]
 8014500:	4798      	blx	r3
 8014502:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8014504:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014506:	4630      	mov	r0, r6
 8014508:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801450a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801450c:	1a20      	subs	r0, r4, r0
 801450e:	4798      	blx	r3
}
 8014510:	bd70      	pop	{r4, r5, r6, pc}
 8014512:	bf00      	nop
 8014514:	080193b0 	.word	0x080193b0

08014518 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8014518:	4b05      	ldr	r3, [pc, #20]	; (8014530 <TimerExists+0x18>)
 801451a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 801451c:	e000      	b.n	8014520 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 801451e:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8014520:	b11b      	cbz	r3, 801452a <TimerExists+0x12>
    if( cur == TimerObject )
 8014522:	4283      	cmp	r3, r0
 8014524:	d1fb      	bne.n	801451e <TimerExists+0x6>
      return true;
 8014526:	2001      	movs	r0, #1
  }
  return false;
}
 8014528:	4770      	bx	lr
  return false;
 801452a:	2000      	movs	r0, #0
 801452c:	4770      	bx	lr
 801452e:	bf00      	nop
 8014530:	20001d60 	.word	0x20001d60

08014534 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8014534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014536:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8014538:	4e09      	ldr	r6, [pc, #36]	; (8014560 <TimerSetTimeout+0x2c>)
 801453a:	6a33      	ldr	r3, [r6, #32]
 801453c:	4798      	blx	r3
 801453e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8014540:	2301      	movs	r3, #1
 8014542:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8014544:	6827      	ldr	r7, [r4, #0]
 8014546:	69b6      	ldr	r6, [r6, #24]
 8014548:	47b0      	blx	r6
 801454a:	4428      	add	r0, r5
 801454c:	4287      	cmp	r7, r0
 801454e:	d202      	bcs.n	8014556 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8014550:	47b0      	blx	r6
 8014552:	4428      	add	r0, r5
 8014554:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8014556:	4b02      	ldr	r3, [pc, #8]	; (8014560 <TimerSetTimeout+0x2c>)
 8014558:	689b      	ldr	r3, [r3, #8]
 801455a:	6820      	ldr	r0, [r4, #0]
 801455c:	4798      	blx	r3
}
 801455e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014560:	080193b0 	.word	0x080193b0

08014564 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8014564:	b368      	cbz	r0, 80145c2 <UTIL_TIMER_Stop+0x5e>
{
 8014566:	b510      	push	{r4, lr}
 8014568:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801456a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801456e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8014570:	4b15      	ldr	r3, [pc, #84]	; (80145c8 <UTIL_TIMER_Stop+0x64>)
 8014572:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8014574:	2301      	movs	r3, #1
 8014576:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8014578:	b1e1      	cbz	r1, 80145b4 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801457a:	2300      	movs	r3, #0
 801457c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801457e:	4288      	cmp	r0, r1
 8014580:	d006      	beq.n	8014590 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8014582:	460b      	mov	r3, r1
        while( cur != NULL )
 8014584:	b1b3      	cbz	r3, 80145b4 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8014586:	4293      	cmp	r3, r2
 8014588:	d011      	beq.n	80145ae <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 801458a:	4619      	mov	r1, r3
            cur = cur->Next;
 801458c:	695b      	ldr	r3, [r3, #20]
 801458e:	e7f9      	b.n	8014584 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8014590:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8014592:	6948      	ldr	r0, [r1, #20]
 8014594:	b120      	cbz	r0, 80145a0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8014596:	4b0c      	ldr	r3, [pc, #48]	; (80145c8 <UTIL_TIMER_Stop+0x64>)
 8014598:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801459a:	f7ff ffcb 	bl	8014534 <TimerSetTimeout>
 801459e:	e009      	b.n	80145b4 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80145a0:	4b0a      	ldr	r3, [pc, #40]	; (80145cc <UTIL_TIMER_Stop+0x68>)
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	4798      	blx	r3
            TimerListHead = NULL;
 80145a6:	4b08      	ldr	r3, [pc, #32]	; (80145c8 <UTIL_TIMER_Stop+0x64>)
 80145a8:	2200      	movs	r2, #0
 80145aa:	601a      	str	r2, [r3, #0]
 80145ac:	e002      	b.n	80145b4 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80145ae:	695b      	ldr	r3, [r3, #20]
 80145b0:	b123      	cbz	r3, 80145bc <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80145b2:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145b4:	f384 8810 	msr	PRIMASK, r4
}
 80145b8:	2000      	movs	r0, #0
}
 80145ba:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80145bc:	2300      	movs	r3, #0
 80145be:	614b      	str	r3, [r1, #20]
 80145c0:	e7f8      	b.n	80145b4 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80145c2:	2001      	movs	r0, #1
}
 80145c4:	4770      	bx	lr
 80145c6:	bf00      	nop
 80145c8:	20001d60 	.word	0x20001d60
 80145cc:	080193b0 	.word	0x080193b0

080145d0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80145d0:	4b09      	ldr	r3, [pc, #36]	; (80145f8 <TimerInsertTimer+0x28>)
 80145d2:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80145d4:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80145d6:	e001      	b.n	80145dc <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 80145d8:	461a      	mov	r2, r3
        next = next->Next;
 80145da:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80145dc:	6951      	ldr	r1, [r2, #20]
 80145de:	b139      	cbz	r1, 80145f0 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 80145e0:	6819      	ldr	r1, [r3, #0]
 80145e2:	f8d0 c000 	ldr.w	ip, [r0]
 80145e6:	458c      	cmp	ip, r1
 80145e8:	d8f6      	bhi.n	80145d8 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 80145ea:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80145ec:	6143      	str	r3, [r0, #20]
        return;
 80145ee:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 80145f0:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80145f2:	2300      	movs	r3, #0
 80145f4:	6143      	str	r3, [r0, #20]
}
 80145f6:	4770      	bx	lr
 80145f8:	20001d60 	.word	0x20001d60

080145fc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80145fc:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80145fe:	4b05      	ldr	r3, [pc, #20]	; (8014614 <TimerInsertNewHeadTimer+0x18>)
 8014600:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8014602:	b10b      	cbz	r3, 8014608 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8014604:	2200      	movs	r2, #0
 8014606:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8014608:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801460a:	4b02      	ldr	r3, [pc, #8]	; (8014614 <TimerInsertNewHeadTimer+0x18>)
 801460c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801460e:	f7ff ff91 	bl	8014534 <TimerSetTimeout>
}
 8014612:	bd08      	pop	{r3, pc}
 8014614:	20001d60 	.word	0x20001d60

08014618 <UTIL_TIMER_Start>:
{
 8014618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801461a:	2800      	cmp	r0, #0
 801461c:	d036      	beq.n	801468c <UTIL_TIMER_Start+0x74>
 801461e:	4604      	mov	r4, r0
 8014620:	f7ff ff7a 	bl	8014518 <TimerExists>
 8014624:	2800      	cmp	r0, #0
 8014626:	d134      	bne.n	8014692 <UTIL_TIMER_Start+0x7a>
 8014628:	7a65      	ldrb	r5, [r4, #9]
 801462a:	2d00      	cmp	r5, #0
 801462c:	d133      	bne.n	8014696 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801462e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014632:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8014634:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8014636:	4b19      	ldr	r3, [pc, #100]	; (801469c <UTIL_TIMER_Start+0x84>)
 8014638:	6a1b      	ldr	r3, [r3, #32]
 801463a:	4798      	blx	r3
    if( ticks < minValue )
 801463c:	4287      	cmp	r7, r0
 801463e:	d300      	bcc.n	8014642 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8014640:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8014642:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8014644:	2300      	movs	r3, #0
 8014646:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8014648:	2201      	movs	r2, #1
 801464a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801464c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801464e:	4b14      	ldr	r3, [pc, #80]	; (80146a0 <UTIL_TIMER_Start+0x88>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	b183      	cbz	r3, 8014676 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8014654:	4b11      	ldr	r3, [pc, #68]	; (801469c <UTIL_TIMER_Start+0x84>)
 8014656:	699b      	ldr	r3, [r3, #24]
 8014658:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801465a:	6823      	ldr	r3, [r4, #0]
 801465c:	4418      	add	r0, r3
 801465e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8014660:	4b0f      	ldr	r3, [pc, #60]	; (80146a0 <UTIL_TIMER_Start+0x88>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	4298      	cmp	r0, r3
 8014668:	d20c      	bcs.n	8014684 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801466a:	4620      	mov	r0, r4
 801466c:	f7ff ffc6 	bl	80145fc <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014670:	f386 8810 	msr	PRIMASK, r6
}
 8014674:	e00b      	b.n	801468e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8014676:	4b09      	ldr	r3, [pc, #36]	; (801469c <UTIL_TIMER_Start+0x84>)
 8014678:	691b      	ldr	r3, [r3, #16]
 801467a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801467c:	4620      	mov	r0, r4
 801467e:	f7ff ffbd 	bl	80145fc <TimerInsertNewHeadTimer>
 8014682:	e7f5      	b.n	8014670 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8014684:	4620      	mov	r0, r4
 8014686:	f7ff ffa3 	bl	80145d0 <TimerInsertTimer>
 801468a:	e7f1      	b.n	8014670 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 801468c:	2501      	movs	r5, #1
}
 801468e:	4628      	mov	r0, r5
 8014690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8014692:	2501      	movs	r5, #1
 8014694:	e7fb      	b.n	801468e <UTIL_TIMER_Start+0x76>
 8014696:	2501      	movs	r5, #1
 8014698:	e7f9      	b.n	801468e <UTIL_TIMER_Start+0x76>
 801469a:	bf00      	nop
 801469c:	080193b0 	.word	0x080193b0
 80146a0:	20001d60 	.word	0x20001d60

080146a4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80146a4:	b198      	cbz	r0, 80146ce <UTIL_TIMER_SetPeriod+0x2a>
{
 80146a6:	b510      	push	{r4, lr}
 80146a8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80146aa:	4b0a      	ldr	r3, [pc, #40]	; (80146d4 <UTIL_TIMER_SetPeriod+0x30>)
 80146ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ae:	4608      	mov	r0, r1
 80146b0:	4798      	blx	r3
 80146b2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80146b4:	4620      	mov	r0, r4
 80146b6:	f7ff ff2f 	bl	8014518 <TimerExists>
 80146ba:	b908      	cbnz	r0, 80146c0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80146bc:	2000      	movs	r0, #0
}
 80146be:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80146c0:	4620      	mov	r0, r4
 80146c2:	f7ff ff4f 	bl	8014564 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80146c6:	4620      	mov	r0, r4
 80146c8:	f7ff ffa6 	bl	8014618 <UTIL_TIMER_Start>
 80146cc:	e7f7      	b.n	80146be <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80146ce:	2001      	movs	r0, #1
}
 80146d0:	4770      	bx	lr
 80146d2:	bf00      	nop
 80146d4:	080193b0 	.word	0x080193b0

080146d8 <UTIL_TIMER_IRQ_Handler>:
{
 80146d8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80146da:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80146de:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 80146e0:	4c1e      	ldr	r4, [pc, #120]	; (801475c <UTIL_TIMER_IRQ_Handler+0x84>)
 80146e2:	6963      	ldr	r3, [r4, #20]
 80146e4:	4798      	blx	r3
 80146e6:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80146e8:	6923      	ldr	r3, [r4, #16]
 80146ea:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 80146ec:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 80146ee:	4b1c      	ldr	r3, [pc, #112]	; (8014760 <UTIL_TIMER_IRQ_Handler+0x88>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	b923      	cbnz	r3, 80146fe <UTIL_TIMER_IRQ_Handler+0x26>
 80146f4:	e018      	b.n	8014728 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 80146f6:	2200      	movs	r2, #0
 80146f8:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80146fa:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80146fc:	b1a3      	cbz	r3, 8014728 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	42a2      	cmp	r2, r4
 8014702:	d9f8      	bls.n	80146f6 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8014704:	1a31      	subs	r1, r6, r0
 8014706:	440a      	add	r2, r1
 8014708:	601a      	str	r2, [r3, #0]
 801470a:	e7f6      	b.n	80146fa <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 801470c:	4b14      	ldr	r3, [pc, #80]	; (8014760 <UTIL_TIMER_IRQ_Handler+0x88>)
 801470e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8014710:	6962      	ldr	r2, [r4, #20]
 8014712:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8014714:	2300      	movs	r3, #0
 8014716:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8014718:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801471a:	68e3      	ldr	r3, [r4, #12]
 801471c:	6920      	ldr	r0, [r4, #16]
 801471e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8014720:	8963      	ldrh	r3, [r4, #10]
 8014722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014726:	d012      	beq.n	801474e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8014728:	4b0d      	ldr	r3, [pc, #52]	; (8014760 <UTIL_TIMER_IRQ_Handler+0x88>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	b13b      	cbz	r3, 801473e <UTIL_TIMER_IRQ_Handler+0x66>
 801472e:	681c      	ldr	r4, [r3, #0]
 8014730:	2c00      	cmp	r4, #0
 8014732:	d0eb      	beq.n	801470c <UTIL_TIMER_IRQ_Handler+0x34>
 8014734:	4b09      	ldr	r3, [pc, #36]	; (801475c <UTIL_TIMER_IRQ_Handler+0x84>)
 8014736:	699b      	ldr	r3, [r3, #24]
 8014738:	4798      	blx	r3
 801473a:	4284      	cmp	r4, r0
 801473c:	d3e6      	bcc.n	801470c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801473e:	4b08      	ldr	r3, [pc, #32]	; (8014760 <UTIL_TIMER_IRQ_Handler+0x88>)
 8014740:	6818      	ldr	r0, [r3, #0]
 8014742:	b108      	cbz	r0, 8014748 <UTIL_TIMER_IRQ_Handler+0x70>
 8014744:	7a03      	ldrb	r3, [r0, #8]
 8014746:	b133      	cbz	r3, 8014756 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014748:	f385 8810 	msr	PRIMASK, r5
}
 801474c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801474e:	4620      	mov	r0, r4
 8014750:	f7ff ff62 	bl	8014618 <UTIL_TIMER_Start>
 8014754:	e7e8      	b.n	8014728 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8014756:	f7ff feed 	bl	8014534 <TimerSetTimeout>
 801475a:	e7f5      	b.n	8014748 <UTIL_TIMER_IRQ_Handler+0x70>
 801475c:	080193b0 	.word	0x080193b0
 8014760:	20001d60 	.word	0x20001d60

08014764 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8014764:	4601      	mov	r1, r0
  int i = 0;
 8014766:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8014768:	e008      	b.n	801477c <ee_skip_atoi+0x18>
 801476a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801476e:	1c53      	adds	r3, r2, #1
 8014770:	600b      	str	r3, [r1, #0]
 8014772:	7813      	ldrb	r3, [r2, #0]
 8014774:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8014778:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801477c:	680a      	ldr	r2, [r1, #0]
 801477e:	7813      	ldrb	r3, [r2, #0]
 8014780:	3b30      	subs	r3, #48	; 0x30
 8014782:	b2db      	uxtb	r3, r3
 8014784:	2b09      	cmp	r3, #9
 8014786:	d9f0      	bls.n	801476a <ee_skip_atoi+0x6>
  return i;
}
 8014788:	4770      	bx	lr
	...

0801478c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801478c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8014790:	b093      	sub	sp, #76	; 0x4c
 8014792:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014794:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8014796:	f016 0f40 	tst.w	r6, #64	; 0x40
 801479a:	d110      	bne.n	80147be <ee_number+0x32>
  char *dig = lower_digits;
 801479c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8014898 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80147a0:	1e9f      	subs	r7, r3, #2
 80147a2:	2f22      	cmp	r7, #34	; 0x22
 80147a4:	d875      	bhi.n	8014892 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80147a6:	f016 0401 	ands.w	r4, r6, #1
 80147aa:	d00b      	beq.n	80147c4 <ee_number+0x38>
 80147ac:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80147b0:	f016 0f02 	tst.w	r6, #2
 80147b4:	d00f      	beq.n	80147d6 <ee_number+0x4a>
  {
    if (num < 0)
 80147b6:	2a00      	cmp	r2, #0
 80147b8:	db07      	blt.n	80147ca <ee_number+0x3e>
  sign = 0;
 80147ba:	2700      	movs	r7, #0
 80147bc:	e00c      	b.n	80147d8 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80147be:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 801489c <ee_number+0x110>
 80147c2:	e7ed      	b.n	80147a0 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80147c4:	f04f 0e20 	mov.w	lr, #32
 80147c8:	e7f2      	b.n	80147b0 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80147ca:	4252      	negs	r2, r2
      size--;
 80147cc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80147ce:	3e01      	subs	r6, #1
 80147d0:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 80147d2:	272d      	movs	r7, #45	; 0x2d
 80147d4:	e000      	b.n	80147d8 <ee_number+0x4c>
  sign = 0;
 80147d6:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 80147d8:	bb5a      	cbnz	r2, 8014832 <ee_number+0xa6>
    tmp[i++] = '0';
 80147da:	2330      	movs	r3, #48	; 0x30
 80147dc:	f88d 3004 	strb.w	r3, [sp, #4]
 80147e0:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 80147e4:	45ac      	cmp	ip, r5
 80147e6:	dd00      	ble.n	80147ea <ee_number+0x5e>
 80147e8:	4665      	mov	r5, ip
  size -= precision;
 80147ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80147ec:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80147ee:	b31c      	cbz	r4, 8014838 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 80147f0:	b11f      	cbz	r7, 80147fa <ee_number+0x6e>
 80147f2:	f800 7b01 	strb.w	r7, [r0], #1
 80147f6:	3901      	subs	r1, #1
 80147f8:	d007      	beq.n	801480a <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014800:	dd24      	ble.n	801484c <ee_number+0xc0>
 8014802:	f800 eb01 	strb.w	lr, [r0], #1
 8014806:	3901      	subs	r1, #1
 8014808:	d1f7      	bne.n	80147fa <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801480a:	b013      	add	sp, #76	; 0x4c
 801480c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8014810:	fbb2 f6f3 	udiv	r6, r2, r3
 8014814:	fb03 2216 	mls	r2, r3, r6, r2
 8014818:	f81a 8002 	ldrb.w	r8, [sl, r2]
 801481c:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8014820:	446a      	add	r2, sp
 8014822:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8014826:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8014828:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 801482c:	2a00      	cmp	r2, #0
 801482e:	d1ef      	bne.n	8014810 <ee_number+0x84>
 8014830:	e7d8      	b.n	80147e4 <ee_number+0x58>
  i = 0;
 8014832:	f04f 0c00 	mov.w	ip, #0
 8014836:	e7f9      	b.n	801482c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8014838:	2b00      	cmp	r3, #0
 801483a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801483e:	ddd7      	ble.n	80147f0 <ee_number+0x64>
 8014840:	2220      	movs	r2, #32
 8014842:	f800 2b01 	strb.w	r2, [r0], #1
 8014846:	3901      	subs	r1, #1
 8014848:	d1f6      	bne.n	8014838 <ee_number+0xac>
 801484a:	e7de      	b.n	801480a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 801484c:	4565      	cmp	r5, ip
 801484e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8014852:	dd05      	ble.n	8014860 <ee_number+0xd4>
 8014854:	2230      	movs	r2, #48	; 0x30
 8014856:	f800 2b01 	strb.w	r2, [r0], #1
 801485a:	3901      	subs	r1, #1
 801485c:	d1f6      	bne.n	801484c <ee_number+0xc0>
 801485e:	e7d4      	b.n	801480a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8014860:	4662      	mov	r2, ip
 8014862:	2a00      	cmp	r2, #0
 8014864:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8014868:	dd09      	ble.n	801487e <ee_number+0xf2>
 801486a:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 801486e:	446a      	add	r2, sp
 8014870:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8014874:	f800 2b01 	strb.w	r2, [r0], #1
 8014878:	3901      	subs	r1, #1
 801487a:	d1f1      	bne.n	8014860 <ee_number+0xd4>
 801487c:	e7c5      	b.n	801480a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 801487e:	2b00      	cmp	r3, #0
 8014880:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014884:	ddc1      	ble.n	801480a <ee_number+0x7e>
 8014886:	2220      	movs	r2, #32
 8014888:	f800 2b01 	strb.w	r2, [r0], #1
 801488c:	3901      	subs	r1, #1
 801488e:	d1f6      	bne.n	801487e <ee_number+0xf2>
 8014890:	e7bb      	b.n	801480a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8014892:	2000      	movs	r0, #0
 8014894:	e7b9      	b.n	801480a <ee_number+0x7e>
 8014896:	bf00      	nop
 8014898:	0801a378 	.word	0x0801a378
 801489c:	0801a3a0 	.word	0x0801a3a0

080148a0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80148a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148a4:	b087      	sub	sp, #28
 80148a6:	9205      	str	r2, [sp, #20]
 80148a8:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80148aa:	1e0f      	subs	r7, r1, #0
 80148ac:	f340 80b8 	ble.w	8014a20 <tiny_vsnprintf_like+0x180>
 80148b0:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80148b2:	4604      	mov	r4, r0
 80148b4:	e004      	b.n	80148c0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80148b6:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80148ba:	9b05      	ldr	r3, [sp, #20]
 80148bc:	3301      	adds	r3, #1
 80148be:	9305      	str	r3, [sp, #20]
 80148c0:	9905      	ldr	r1, [sp, #20]
 80148c2:	780a      	ldrb	r2, [r1, #0]
 80148c4:	b922      	cbnz	r2, 80148d0 <tiny_vsnprintf_like+0x30>
 80148c6:	1ba3      	subs	r3, r4, r6
 80148c8:	1e78      	subs	r0, r7, #1
 80148ca:	4283      	cmp	r3, r0
 80148cc:	f2c0 80a2 	blt.w	8014a14 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80148d0:	1ba3      	subs	r3, r4, r6
 80148d2:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 80148d6:	4543      	cmp	r3, r8
 80148d8:	f280 809c 	bge.w	8014a14 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 80148dc:	2a25      	cmp	r2, #37	; 0x25
 80148de:	d1ea      	bne.n	80148b6 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80148e0:	1c4b      	adds	r3, r1, #1
 80148e2:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 80148e4:	784b      	ldrb	r3, [r1, #1]
 80148e6:	2b30      	cmp	r3, #48	; 0x30
 80148e8:	d020      	beq.n	801492c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 80148ea:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 80148ee:	3b30      	subs	r3, #48	; 0x30
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	2b09      	cmp	r3, #9
 80148f4:	d91d      	bls.n	8014932 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 80148f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif

    // Default base
    base = 10;

    switch (*fmt)
 80148fa:	9b05      	ldr	r3, [sp, #20]
 80148fc:	781a      	ldrb	r2, [r3, #0]
 80148fe:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8014902:	2b20      	cmp	r3, #32
 8014904:	d867      	bhi.n	80149d6 <tiny_vsnprintf_like+0x136>
 8014906:	e8df f003 	tbb	[pc, r3]
 801490a:	664a      	.short	0x664a
 801490c:	66666666 	.word	0x66666666
 8014910:	66666666 	.word	0x66666666
 8014914:	66621e66 	.word	0x66621e66
 8014918:	62666666 	.word	0x62666666
 801491c:	66666666 	.word	0x66666666
 8014920:	66666666 	.word	0x66666666
 8014924:	19662866 	.word	0x19662866
 8014928:	6666      	.short	0x6666
 801492a:	7c          	.byte	0x7c
 801492b:	00          	.byte	0x00
      flags |= ZEROPAD;
 801492c:	f04f 0901 	mov.w	r9, #1
 8014930:	e7dd      	b.n	80148ee <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8014932:	a805      	add	r0, sp, #20
 8014934:	f7ff ff16 	bl	8014764 <ee_skip_atoi>
 8014938:	4605      	mov	r5, r0
 801493a:	e7de      	b.n	80148fa <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 801493c:	230a      	movs	r3, #10
 801493e:	e031      	b.n	80149a4 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8014940:	2320      	movs	r3, #32
 8014942:	f804 3b01 	strb.w	r3, [r4], #1
 8014946:	3d01      	subs	r5, #1
 8014948:	2d00      	cmp	r5, #0
 801494a:	dcf9      	bgt.n	8014940 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 801494c:	9b04      	ldr	r3, [sp, #16]
 801494e:	1d1a      	adds	r2, r3, #4
 8014950:	9204      	str	r2, [sp, #16]
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8014958:	e7af      	b.n	80148ba <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801495a:	9b04      	ldr	r3, [sp, #16]
 801495c:	1d1a      	adds	r2, r3, #4
 801495e:	9204      	str	r2, [sp, #16]
 8014960:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8014964:	f1b8 0f00 	cmp.w	r8, #0
 8014968:	d003      	beq.n	8014972 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801496a:	4640      	mov	r0, r8
 801496c:	f7eb fc58 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8014970:	e006      	b.n	8014980 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8014972:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014a24 <tiny_vsnprintf_like+0x184>
 8014976:	e7f8      	b.n	801496a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8014978:	2220      	movs	r2, #32
 801497a:	f804 2b01 	strb.w	r2, [r4], #1
 801497e:	461d      	mov	r5, r3
 8014980:	1e6b      	subs	r3, r5, #1
 8014982:	4285      	cmp	r5, r0
 8014984:	dcf8      	bgt.n	8014978 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8014986:	2200      	movs	r2, #0
 8014988:	e006      	b.n	8014998 <tiny_vsnprintf_like+0xf8>
 801498a:	4643      	mov	r3, r8
 801498c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8014990:	f804 1b01 	strb.w	r1, [r4], #1
 8014994:	3201      	adds	r2, #1
 8014996:	4698      	mov	r8, r3
 8014998:	4282      	cmp	r2, r0
 801499a:	dbf6      	blt.n	801498a <tiny_vsnprintf_like+0xea>
 801499c:	e78d      	b.n	80148ba <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801499e:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80149a2:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80149a4:	f019 0f02 	tst.w	r9, #2
 80149a8:	d02f      	beq.n	8014a0a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80149aa:	9a04      	ldr	r2, [sp, #16]
 80149ac:	1d11      	adds	r1, r2, #4
 80149ae:	9104      	str	r1, [sp, #16]
 80149b0:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80149b2:	1ba1      	subs	r1, r4, r6
 80149b4:	f8cd 9008 	str.w	r9, [sp, #8]
 80149b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149bc:	9001      	str	r0, [sp, #4]
 80149be:	9500      	str	r5, [sp, #0]
 80149c0:	eba8 0101 	sub.w	r1, r8, r1
 80149c4:	4620      	mov	r0, r4
 80149c6:	f7ff fee1 	bl	801478c <ee_number>
 80149ca:	4604      	mov	r4, r0
 80149cc:	e775      	b.n	80148ba <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80149ce:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80149d2:	230a      	movs	r3, #10
 80149d4:	e7e6      	b.n	80149a4 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80149d6:	2a25      	cmp	r2, #37	; 0x25
 80149d8:	d002      	beq.n	80149e0 <tiny_vsnprintf_like+0x140>
 80149da:	2325      	movs	r3, #37	; 0x25
 80149dc:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80149e0:	1ba3      	subs	r3, r4, r6
 80149e2:	4598      	cmp	r8, r3
 80149e4:	dd0f      	ble.n	8014a06 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 80149e6:	9b05      	ldr	r3, [sp, #20]
 80149e8:	781a      	ldrb	r2, [r3, #0]
 80149ea:	b13a      	cbz	r2, 80149fc <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 80149ec:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80149f0:	1ba3      	subs	r3, r4, r6
 80149f2:	4598      	cmp	r8, r3
 80149f4:	f73f af61 	bgt.w	80148ba <tiny_vsnprintf_like+0x1a>
    base = 10;
 80149f8:	230a      	movs	r3, #10
 80149fa:	e7d3      	b.n	80149a4 <tiny_vsnprintf_like+0x104>
          --fmt;
 80149fc:	3b01      	subs	r3, #1
 80149fe:	9305      	str	r3, [sp, #20]
 8014a00:	e7f6      	b.n	80149f0 <tiny_vsnprintf_like+0x150>
        base = 16;
 8014a02:	2310      	movs	r3, #16
 8014a04:	e7ce      	b.n	80149a4 <tiny_vsnprintf_like+0x104>
    base = 10;
 8014a06:	230a      	movs	r3, #10
 8014a08:	e7cc      	b.n	80149a4 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8014a0a:	9a04      	ldr	r2, [sp, #16]
 8014a0c:	1d11      	adds	r1, r2, #4
 8014a0e:	9104      	str	r1, [sp, #16]
 8014a10:	6812      	ldr	r2, [r2, #0]
 8014a12:	e7ce      	b.n	80149b2 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8014a14:	2300      	movs	r3, #0
 8014a16:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8014a18:	1ba0      	subs	r0, r4, r6
}
 8014a1a:	b007      	add	sp, #28
 8014a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8014a20:	2000      	movs	r0, #0
 8014a22:	e7fa      	b.n	8014a1a <tiny_vsnprintf_like+0x17a>
 8014a24:	0801a3c8 	.word	0x0801a3c8

08014a28 <__cvt>:
 8014a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a2c:	b088      	sub	sp, #32
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	461f      	mov	r7, r3
 8014a32:	4614      	mov	r4, r2
 8014a34:	bfb8      	it	lt
 8014a36:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8014a3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014a3e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8014a42:	bfb6      	itet	lt
 8014a44:	461f      	movlt	r7, r3
 8014a46:	2300      	movge	r3, #0
 8014a48:	232d      	movlt	r3, #45	; 0x2d
 8014a4a:	7013      	strb	r3, [r2, #0]
 8014a4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a4e:	f023 0820 	bic.w	r8, r3, #32
 8014a52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014a56:	d005      	beq.n	8014a64 <__cvt+0x3c>
 8014a58:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014a5c:	d100      	bne.n	8014a60 <__cvt+0x38>
 8014a5e:	3501      	adds	r5, #1
 8014a60:	2302      	movs	r3, #2
 8014a62:	e000      	b.n	8014a66 <__cvt+0x3e>
 8014a64:	2303      	movs	r3, #3
 8014a66:	aa07      	add	r2, sp, #28
 8014a68:	9204      	str	r2, [sp, #16]
 8014a6a:	aa06      	add	r2, sp, #24
 8014a6c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8014a70:	e9cd 3500 	strd	r3, r5, [sp]
 8014a74:	4622      	mov	r2, r4
 8014a76:	463b      	mov	r3, r7
 8014a78:	f001 ff1a 	bl	80168b0 <_dtoa_r>
 8014a7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014a80:	4606      	mov	r6, r0
 8014a82:	d102      	bne.n	8014a8a <__cvt+0x62>
 8014a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a86:	07db      	lsls	r3, r3, #31
 8014a88:	d522      	bpl.n	8014ad0 <__cvt+0xa8>
 8014a8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014a8e:	eb06 0905 	add.w	r9, r6, r5
 8014a92:	d110      	bne.n	8014ab6 <__cvt+0x8e>
 8014a94:	7833      	ldrb	r3, [r6, #0]
 8014a96:	2b30      	cmp	r3, #48	; 0x30
 8014a98:	d10a      	bne.n	8014ab0 <__cvt+0x88>
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	4620      	mov	r0, r4
 8014aa0:	4639      	mov	r1, r7
 8014aa2:	f7eb ffe9 	bl	8000a78 <__aeabi_dcmpeq>
 8014aa6:	b918      	cbnz	r0, 8014ab0 <__cvt+0x88>
 8014aa8:	f1c5 0501 	rsb	r5, r5, #1
 8014aac:	f8ca 5000 	str.w	r5, [sl]
 8014ab0:	f8da 3000 	ldr.w	r3, [sl]
 8014ab4:	4499      	add	r9, r3
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	2300      	movs	r3, #0
 8014aba:	4620      	mov	r0, r4
 8014abc:	4639      	mov	r1, r7
 8014abe:	f7eb ffdb 	bl	8000a78 <__aeabi_dcmpeq>
 8014ac2:	b108      	cbz	r0, 8014ac8 <__cvt+0xa0>
 8014ac4:	f8cd 901c 	str.w	r9, [sp, #28]
 8014ac8:	2230      	movs	r2, #48	; 0x30
 8014aca:	9b07      	ldr	r3, [sp, #28]
 8014acc:	454b      	cmp	r3, r9
 8014ace:	d307      	bcc.n	8014ae0 <__cvt+0xb8>
 8014ad0:	9b07      	ldr	r3, [sp, #28]
 8014ad2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ad4:	1b9b      	subs	r3, r3, r6
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	6013      	str	r3, [r2, #0]
 8014ada:	b008      	add	sp, #32
 8014adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ae0:	1c59      	adds	r1, r3, #1
 8014ae2:	9107      	str	r1, [sp, #28]
 8014ae4:	701a      	strb	r2, [r3, #0]
 8014ae6:	e7f0      	b.n	8014aca <__cvt+0xa2>

08014ae8 <__exponent>:
 8014ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014aea:	4603      	mov	r3, r0
 8014aec:	2900      	cmp	r1, #0
 8014aee:	bfb8      	it	lt
 8014af0:	4249      	neglt	r1, r1
 8014af2:	f803 2b02 	strb.w	r2, [r3], #2
 8014af6:	bfb4      	ite	lt
 8014af8:	222d      	movlt	r2, #45	; 0x2d
 8014afa:	222b      	movge	r2, #43	; 0x2b
 8014afc:	2909      	cmp	r1, #9
 8014afe:	7042      	strb	r2, [r0, #1]
 8014b00:	dd2a      	ble.n	8014b58 <__exponent+0x70>
 8014b02:	f10d 0207 	add.w	r2, sp, #7
 8014b06:	4617      	mov	r7, r2
 8014b08:	260a      	movs	r6, #10
 8014b0a:	4694      	mov	ip, r2
 8014b0c:	fb91 f5f6 	sdiv	r5, r1, r6
 8014b10:	fb06 1415 	mls	r4, r6, r5, r1
 8014b14:	3430      	adds	r4, #48	; 0x30
 8014b16:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014b1a:	460c      	mov	r4, r1
 8014b1c:	2c63      	cmp	r4, #99	; 0x63
 8014b1e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8014b22:	4629      	mov	r1, r5
 8014b24:	dcf1      	bgt.n	8014b0a <__exponent+0x22>
 8014b26:	3130      	adds	r1, #48	; 0x30
 8014b28:	f1ac 0402 	sub.w	r4, ip, #2
 8014b2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014b30:	1c41      	adds	r1, r0, #1
 8014b32:	4622      	mov	r2, r4
 8014b34:	42ba      	cmp	r2, r7
 8014b36:	d30a      	bcc.n	8014b4e <__exponent+0x66>
 8014b38:	f10d 0209 	add.w	r2, sp, #9
 8014b3c:	eba2 020c 	sub.w	r2, r2, ip
 8014b40:	42bc      	cmp	r4, r7
 8014b42:	bf88      	it	hi
 8014b44:	2200      	movhi	r2, #0
 8014b46:	4413      	add	r3, r2
 8014b48:	1a18      	subs	r0, r3, r0
 8014b4a:	b003      	add	sp, #12
 8014b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b4e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014b52:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014b56:	e7ed      	b.n	8014b34 <__exponent+0x4c>
 8014b58:	2330      	movs	r3, #48	; 0x30
 8014b5a:	3130      	adds	r1, #48	; 0x30
 8014b5c:	7083      	strb	r3, [r0, #2]
 8014b5e:	70c1      	strb	r1, [r0, #3]
 8014b60:	1d03      	adds	r3, r0, #4
 8014b62:	e7f1      	b.n	8014b48 <__exponent+0x60>

08014b64 <_printf_float>:
 8014b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b68:	b091      	sub	sp, #68	; 0x44
 8014b6a:	460c      	mov	r4, r1
 8014b6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8014b70:	4616      	mov	r6, r2
 8014b72:	461f      	mov	r7, r3
 8014b74:	4605      	mov	r5, r0
 8014b76:	f001 fdad 	bl	80166d4 <_localeconv_r>
 8014b7a:	6803      	ldr	r3, [r0, #0]
 8014b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7eb fb4e 	bl	8000220 <strlen>
 8014b84:	2300      	movs	r3, #0
 8014b86:	930e      	str	r3, [sp, #56]	; 0x38
 8014b88:	f8d8 3000 	ldr.w	r3, [r8]
 8014b8c:	900a      	str	r0, [sp, #40]	; 0x28
 8014b8e:	3307      	adds	r3, #7
 8014b90:	f023 0307 	bic.w	r3, r3, #7
 8014b94:	f103 0208 	add.w	r2, r3, #8
 8014b98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014b9c:	f8d4 b000 	ldr.w	fp, [r4]
 8014ba0:	f8c8 2000 	str.w	r2, [r8]
 8014ba4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8014ba8:	4652      	mov	r2, sl
 8014baa:	4643      	mov	r3, r8
 8014bac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014bb0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8014bb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014bb8:	4b9c      	ldr	r3, [pc, #624]	; (8014e2c <_printf_float+0x2c8>)
 8014bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014bbe:	4650      	mov	r0, sl
 8014bc0:	f7eb ff8c 	bl	8000adc <__aeabi_dcmpun>
 8014bc4:	bb70      	cbnz	r0, 8014c24 <_printf_float+0xc0>
 8014bc6:	4b99      	ldr	r3, [pc, #612]	; (8014e2c <_printf_float+0x2c8>)
 8014bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014bce:	4650      	mov	r0, sl
 8014bd0:	f7eb ff66 	bl	8000aa0 <__aeabi_dcmple>
 8014bd4:	bb30      	cbnz	r0, 8014c24 <_printf_float+0xc0>
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	2300      	movs	r3, #0
 8014bda:	4650      	mov	r0, sl
 8014bdc:	4641      	mov	r1, r8
 8014bde:	f7eb ff55 	bl	8000a8c <__aeabi_dcmplt>
 8014be2:	b110      	cbz	r0, 8014bea <_printf_float+0x86>
 8014be4:	232d      	movs	r3, #45	; 0x2d
 8014be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bea:	4a91      	ldr	r2, [pc, #580]	; (8014e30 <_printf_float+0x2cc>)
 8014bec:	4b91      	ldr	r3, [pc, #580]	; (8014e34 <_printf_float+0x2d0>)
 8014bee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014bf2:	bf94      	ite	ls
 8014bf4:	4690      	movls	r8, r2
 8014bf6:	4698      	movhi	r8, r3
 8014bf8:	2303      	movs	r3, #3
 8014bfa:	6123      	str	r3, [r4, #16]
 8014bfc:	f02b 0304 	bic.w	r3, fp, #4
 8014c00:	6023      	str	r3, [r4, #0]
 8014c02:	f04f 0a00 	mov.w	sl, #0
 8014c06:	9700      	str	r7, [sp, #0]
 8014c08:	4633      	mov	r3, r6
 8014c0a:	aa0f      	add	r2, sp, #60	; 0x3c
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f000 f9d4 	bl	8014fbc <_printf_common>
 8014c14:	3001      	adds	r0, #1
 8014c16:	f040 808f 	bne.w	8014d38 <_printf_float+0x1d4>
 8014c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c1e:	b011      	add	sp, #68	; 0x44
 8014c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c24:	4652      	mov	r2, sl
 8014c26:	4643      	mov	r3, r8
 8014c28:	4650      	mov	r0, sl
 8014c2a:	4641      	mov	r1, r8
 8014c2c:	f7eb ff56 	bl	8000adc <__aeabi_dcmpun>
 8014c30:	b140      	cbz	r0, 8014c44 <_printf_float+0xe0>
 8014c32:	f1b8 0f00 	cmp.w	r8, #0
 8014c36:	bfbc      	itt	lt
 8014c38:	232d      	movlt	r3, #45	; 0x2d
 8014c3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014c3e:	4a7e      	ldr	r2, [pc, #504]	; (8014e38 <_printf_float+0x2d4>)
 8014c40:	4b7e      	ldr	r3, [pc, #504]	; (8014e3c <_printf_float+0x2d8>)
 8014c42:	e7d4      	b.n	8014bee <_printf_float+0x8a>
 8014c44:	6863      	ldr	r3, [r4, #4]
 8014c46:	1c5a      	adds	r2, r3, #1
 8014c48:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014c4c:	d142      	bne.n	8014cd4 <_printf_float+0x170>
 8014c4e:	2306      	movs	r3, #6
 8014c50:	6063      	str	r3, [r4, #4]
 8014c52:	2200      	movs	r2, #0
 8014c54:	9206      	str	r2, [sp, #24]
 8014c56:	aa0e      	add	r2, sp, #56	; 0x38
 8014c58:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8014c5c:	aa0d      	add	r2, sp, #52	; 0x34
 8014c5e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8014c62:	9203      	str	r2, [sp, #12]
 8014c64:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8014c68:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014c6c:	6023      	str	r3, [r4, #0]
 8014c6e:	6863      	ldr	r3, [r4, #4]
 8014c70:	9300      	str	r3, [sp, #0]
 8014c72:	4652      	mov	r2, sl
 8014c74:	4643      	mov	r3, r8
 8014c76:	4628      	mov	r0, r5
 8014c78:	910b      	str	r1, [sp, #44]	; 0x2c
 8014c7a:	f7ff fed5 	bl	8014a28 <__cvt>
 8014c7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c80:	2947      	cmp	r1, #71	; 0x47
 8014c82:	4680      	mov	r8, r0
 8014c84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c86:	d108      	bne.n	8014c9a <_printf_float+0x136>
 8014c88:	1cc8      	adds	r0, r1, #3
 8014c8a:	db02      	blt.n	8014c92 <_printf_float+0x12e>
 8014c8c:	6863      	ldr	r3, [r4, #4]
 8014c8e:	4299      	cmp	r1, r3
 8014c90:	dd40      	ble.n	8014d14 <_printf_float+0x1b0>
 8014c92:	f1a9 0902 	sub.w	r9, r9, #2
 8014c96:	fa5f f989 	uxtb.w	r9, r9
 8014c9a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014c9e:	d81f      	bhi.n	8014ce0 <_printf_float+0x17c>
 8014ca0:	3901      	subs	r1, #1
 8014ca2:	464a      	mov	r2, r9
 8014ca4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014ca8:	910d      	str	r1, [sp, #52]	; 0x34
 8014caa:	f7ff ff1d 	bl	8014ae8 <__exponent>
 8014cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014cb0:	1813      	adds	r3, r2, r0
 8014cb2:	2a01      	cmp	r2, #1
 8014cb4:	4682      	mov	sl, r0
 8014cb6:	6123      	str	r3, [r4, #16]
 8014cb8:	dc02      	bgt.n	8014cc0 <_printf_float+0x15c>
 8014cba:	6822      	ldr	r2, [r4, #0]
 8014cbc:	07d2      	lsls	r2, r2, #31
 8014cbe:	d501      	bpl.n	8014cc4 <_printf_float+0x160>
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	6123      	str	r3, [r4, #16]
 8014cc4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d09c      	beq.n	8014c06 <_printf_float+0xa2>
 8014ccc:	232d      	movs	r3, #45	; 0x2d
 8014cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014cd2:	e798      	b.n	8014c06 <_printf_float+0xa2>
 8014cd4:	2947      	cmp	r1, #71	; 0x47
 8014cd6:	d1bc      	bne.n	8014c52 <_printf_float+0xee>
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d1ba      	bne.n	8014c52 <_printf_float+0xee>
 8014cdc:	2301      	movs	r3, #1
 8014cde:	e7b7      	b.n	8014c50 <_printf_float+0xec>
 8014ce0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014ce4:	d118      	bne.n	8014d18 <_printf_float+0x1b4>
 8014ce6:	2900      	cmp	r1, #0
 8014ce8:	6863      	ldr	r3, [r4, #4]
 8014cea:	dd0b      	ble.n	8014d04 <_printf_float+0x1a0>
 8014cec:	6121      	str	r1, [r4, #16]
 8014cee:	b913      	cbnz	r3, 8014cf6 <_printf_float+0x192>
 8014cf0:	6822      	ldr	r2, [r4, #0]
 8014cf2:	07d0      	lsls	r0, r2, #31
 8014cf4:	d502      	bpl.n	8014cfc <_printf_float+0x198>
 8014cf6:	3301      	adds	r3, #1
 8014cf8:	440b      	add	r3, r1
 8014cfa:	6123      	str	r3, [r4, #16]
 8014cfc:	65a1      	str	r1, [r4, #88]	; 0x58
 8014cfe:	f04f 0a00 	mov.w	sl, #0
 8014d02:	e7df      	b.n	8014cc4 <_printf_float+0x160>
 8014d04:	b913      	cbnz	r3, 8014d0c <_printf_float+0x1a8>
 8014d06:	6822      	ldr	r2, [r4, #0]
 8014d08:	07d2      	lsls	r2, r2, #31
 8014d0a:	d501      	bpl.n	8014d10 <_printf_float+0x1ac>
 8014d0c:	3302      	adds	r3, #2
 8014d0e:	e7f4      	b.n	8014cfa <_printf_float+0x196>
 8014d10:	2301      	movs	r3, #1
 8014d12:	e7f2      	b.n	8014cfa <_printf_float+0x196>
 8014d14:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d1a:	4299      	cmp	r1, r3
 8014d1c:	db05      	blt.n	8014d2a <_printf_float+0x1c6>
 8014d1e:	6823      	ldr	r3, [r4, #0]
 8014d20:	6121      	str	r1, [r4, #16]
 8014d22:	07d8      	lsls	r0, r3, #31
 8014d24:	d5ea      	bpl.n	8014cfc <_printf_float+0x198>
 8014d26:	1c4b      	adds	r3, r1, #1
 8014d28:	e7e7      	b.n	8014cfa <_printf_float+0x196>
 8014d2a:	2900      	cmp	r1, #0
 8014d2c:	bfd4      	ite	le
 8014d2e:	f1c1 0202 	rsble	r2, r1, #2
 8014d32:	2201      	movgt	r2, #1
 8014d34:	4413      	add	r3, r2
 8014d36:	e7e0      	b.n	8014cfa <_printf_float+0x196>
 8014d38:	6823      	ldr	r3, [r4, #0]
 8014d3a:	055a      	lsls	r2, r3, #21
 8014d3c:	d407      	bmi.n	8014d4e <_printf_float+0x1ea>
 8014d3e:	6923      	ldr	r3, [r4, #16]
 8014d40:	4642      	mov	r2, r8
 8014d42:	4631      	mov	r1, r6
 8014d44:	4628      	mov	r0, r5
 8014d46:	47b8      	blx	r7
 8014d48:	3001      	adds	r0, #1
 8014d4a:	d12b      	bne.n	8014da4 <_printf_float+0x240>
 8014d4c:	e765      	b.n	8014c1a <_printf_float+0xb6>
 8014d4e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014d52:	f240 80dc 	bls.w	8014f0e <_printf_float+0x3aa>
 8014d56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	f7eb fe8b 	bl	8000a78 <__aeabi_dcmpeq>
 8014d62:	2800      	cmp	r0, #0
 8014d64:	d033      	beq.n	8014dce <_printf_float+0x26a>
 8014d66:	4a36      	ldr	r2, [pc, #216]	; (8014e40 <_printf_float+0x2dc>)
 8014d68:	2301      	movs	r3, #1
 8014d6a:	4631      	mov	r1, r6
 8014d6c:	4628      	mov	r0, r5
 8014d6e:	47b8      	blx	r7
 8014d70:	3001      	adds	r0, #1
 8014d72:	f43f af52 	beq.w	8014c1a <_printf_float+0xb6>
 8014d76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	db02      	blt.n	8014d84 <_printf_float+0x220>
 8014d7e:	6823      	ldr	r3, [r4, #0]
 8014d80:	07d8      	lsls	r0, r3, #31
 8014d82:	d50f      	bpl.n	8014da4 <_printf_float+0x240>
 8014d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d88:	4631      	mov	r1, r6
 8014d8a:	4628      	mov	r0, r5
 8014d8c:	47b8      	blx	r7
 8014d8e:	3001      	adds	r0, #1
 8014d90:	f43f af43 	beq.w	8014c1a <_printf_float+0xb6>
 8014d94:	f04f 0800 	mov.w	r8, #0
 8014d98:	f104 091a 	add.w	r9, r4, #26
 8014d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d9e:	3b01      	subs	r3, #1
 8014da0:	4543      	cmp	r3, r8
 8014da2:	dc09      	bgt.n	8014db8 <_printf_float+0x254>
 8014da4:	6823      	ldr	r3, [r4, #0]
 8014da6:	079b      	lsls	r3, r3, #30
 8014da8:	f100 8103 	bmi.w	8014fb2 <_printf_float+0x44e>
 8014dac:	68e0      	ldr	r0, [r4, #12]
 8014dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014db0:	4298      	cmp	r0, r3
 8014db2:	bfb8      	it	lt
 8014db4:	4618      	movlt	r0, r3
 8014db6:	e732      	b.n	8014c1e <_printf_float+0xba>
 8014db8:	2301      	movs	r3, #1
 8014dba:	464a      	mov	r2, r9
 8014dbc:	4631      	mov	r1, r6
 8014dbe:	4628      	mov	r0, r5
 8014dc0:	47b8      	blx	r7
 8014dc2:	3001      	adds	r0, #1
 8014dc4:	f43f af29 	beq.w	8014c1a <_printf_float+0xb6>
 8014dc8:	f108 0801 	add.w	r8, r8, #1
 8014dcc:	e7e6      	b.n	8014d9c <_printf_float+0x238>
 8014dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	dc37      	bgt.n	8014e44 <_printf_float+0x2e0>
 8014dd4:	4a1a      	ldr	r2, [pc, #104]	; (8014e40 <_printf_float+0x2dc>)
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	4631      	mov	r1, r6
 8014dda:	4628      	mov	r0, r5
 8014ddc:	47b8      	blx	r7
 8014dde:	3001      	adds	r0, #1
 8014de0:	f43f af1b 	beq.w	8014c1a <_printf_float+0xb6>
 8014de4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014de8:	4313      	orrs	r3, r2
 8014dea:	d102      	bne.n	8014df2 <_printf_float+0x28e>
 8014dec:	6823      	ldr	r3, [r4, #0]
 8014dee:	07d9      	lsls	r1, r3, #31
 8014df0:	d5d8      	bpl.n	8014da4 <_printf_float+0x240>
 8014df2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014df6:	4631      	mov	r1, r6
 8014df8:	4628      	mov	r0, r5
 8014dfa:	47b8      	blx	r7
 8014dfc:	3001      	adds	r0, #1
 8014dfe:	f43f af0c 	beq.w	8014c1a <_printf_float+0xb6>
 8014e02:	f04f 0900 	mov.w	r9, #0
 8014e06:	f104 0a1a 	add.w	sl, r4, #26
 8014e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e0c:	425b      	negs	r3, r3
 8014e0e:	454b      	cmp	r3, r9
 8014e10:	dc01      	bgt.n	8014e16 <_printf_float+0x2b2>
 8014e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e14:	e794      	b.n	8014d40 <_printf_float+0x1dc>
 8014e16:	2301      	movs	r3, #1
 8014e18:	4652      	mov	r2, sl
 8014e1a:	4631      	mov	r1, r6
 8014e1c:	4628      	mov	r0, r5
 8014e1e:	47b8      	blx	r7
 8014e20:	3001      	adds	r0, #1
 8014e22:	f43f aefa 	beq.w	8014c1a <_printf_float+0xb6>
 8014e26:	f109 0901 	add.w	r9, r9, #1
 8014e2a:	e7ee      	b.n	8014e0a <_printf_float+0x2a6>
 8014e2c:	7fefffff 	.word	0x7fefffff
 8014e30:	0801a3cf 	.word	0x0801a3cf
 8014e34:	0801a3d3 	.word	0x0801a3d3
 8014e38:	0801a3d7 	.word	0x0801a3d7
 8014e3c:	0801a3db 	.word	0x0801a3db
 8014e40:	0801a3df 	.word	0x0801a3df
 8014e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	bfa8      	it	ge
 8014e4c:	461a      	movge	r2, r3
 8014e4e:	2a00      	cmp	r2, #0
 8014e50:	4691      	mov	r9, r2
 8014e52:	dc37      	bgt.n	8014ec4 <_printf_float+0x360>
 8014e54:	f04f 0b00 	mov.w	fp, #0
 8014e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e5c:	f104 021a 	add.w	r2, r4, #26
 8014e60:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014e64:	ebaa 0309 	sub.w	r3, sl, r9
 8014e68:	455b      	cmp	r3, fp
 8014e6a:	dc33      	bgt.n	8014ed4 <_printf_float+0x370>
 8014e6c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014e70:	429a      	cmp	r2, r3
 8014e72:	db3b      	blt.n	8014eec <_printf_float+0x388>
 8014e74:	6823      	ldr	r3, [r4, #0]
 8014e76:	07da      	lsls	r2, r3, #31
 8014e78:	d438      	bmi.n	8014eec <_printf_float+0x388>
 8014e7a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014e7e:	eba2 0903 	sub.w	r9, r2, r3
 8014e82:	eba2 020a 	sub.w	r2, r2, sl
 8014e86:	4591      	cmp	r9, r2
 8014e88:	bfa8      	it	ge
 8014e8a:	4691      	movge	r9, r2
 8014e8c:	f1b9 0f00 	cmp.w	r9, #0
 8014e90:	dc34      	bgt.n	8014efc <_printf_float+0x398>
 8014e92:	f04f 0800 	mov.w	r8, #0
 8014e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e9a:	f104 0a1a 	add.w	sl, r4, #26
 8014e9e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014ea2:	1a9b      	subs	r3, r3, r2
 8014ea4:	eba3 0309 	sub.w	r3, r3, r9
 8014ea8:	4543      	cmp	r3, r8
 8014eaa:	f77f af7b 	ble.w	8014da4 <_printf_float+0x240>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	4652      	mov	r2, sl
 8014eb2:	4631      	mov	r1, r6
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	47b8      	blx	r7
 8014eb8:	3001      	adds	r0, #1
 8014eba:	f43f aeae 	beq.w	8014c1a <_printf_float+0xb6>
 8014ebe:	f108 0801 	add.w	r8, r8, #1
 8014ec2:	e7ec      	b.n	8014e9e <_printf_float+0x33a>
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	4631      	mov	r1, r6
 8014ec8:	4642      	mov	r2, r8
 8014eca:	4628      	mov	r0, r5
 8014ecc:	47b8      	blx	r7
 8014ece:	3001      	adds	r0, #1
 8014ed0:	d1c0      	bne.n	8014e54 <_printf_float+0x2f0>
 8014ed2:	e6a2      	b.n	8014c1a <_printf_float+0xb6>
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	4631      	mov	r1, r6
 8014ed8:	4628      	mov	r0, r5
 8014eda:	920b      	str	r2, [sp, #44]	; 0x2c
 8014edc:	47b8      	blx	r7
 8014ede:	3001      	adds	r0, #1
 8014ee0:	f43f ae9b 	beq.w	8014c1a <_printf_float+0xb6>
 8014ee4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ee6:	f10b 0b01 	add.w	fp, fp, #1
 8014eea:	e7b9      	b.n	8014e60 <_printf_float+0x2fc>
 8014eec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ef0:	4631      	mov	r1, r6
 8014ef2:	4628      	mov	r0, r5
 8014ef4:	47b8      	blx	r7
 8014ef6:	3001      	adds	r0, #1
 8014ef8:	d1bf      	bne.n	8014e7a <_printf_float+0x316>
 8014efa:	e68e      	b.n	8014c1a <_printf_float+0xb6>
 8014efc:	464b      	mov	r3, r9
 8014efe:	eb08 020a 	add.w	r2, r8, sl
 8014f02:	4631      	mov	r1, r6
 8014f04:	4628      	mov	r0, r5
 8014f06:	47b8      	blx	r7
 8014f08:	3001      	adds	r0, #1
 8014f0a:	d1c2      	bne.n	8014e92 <_printf_float+0x32e>
 8014f0c:	e685      	b.n	8014c1a <_printf_float+0xb6>
 8014f0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f10:	2a01      	cmp	r2, #1
 8014f12:	dc01      	bgt.n	8014f18 <_printf_float+0x3b4>
 8014f14:	07db      	lsls	r3, r3, #31
 8014f16:	d539      	bpl.n	8014f8c <_printf_float+0x428>
 8014f18:	2301      	movs	r3, #1
 8014f1a:	4642      	mov	r2, r8
 8014f1c:	4631      	mov	r1, r6
 8014f1e:	4628      	mov	r0, r5
 8014f20:	47b8      	blx	r7
 8014f22:	3001      	adds	r0, #1
 8014f24:	f43f ae79 	beq.w	8014c1a <_printf_float+0xb6>
 8014f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014f2c:	4631      	mov	r1, r6
 8014f2e:	4628      	mov	r0, r5
 8014f30:	47b8      	blx	r7
 8014f32:	3001      	adds	r0, #1
 8014f34:	f43f ae71 	beq.w	8014c1a <_printf_float+0xb6>
 8014f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	2300      	movs	r3, #0
 8014f40:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8014f44:	f7eb fd98 	bl	8000a78 <__aeabi_dcmpeq>
 8014f48:	b9d8      	cbnz	r0, 8014f82 <_printf_float+0x41e>
 8014f4a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8014f4e:	f108 0201 	add.w	r2, r8, #1
 8014f52:	4631      	mov	r1, r6
 8014f54:	4628      	mov	r0, r5
 8014f56:	47b8      	blx	r7
 8014f58:	3001      	adds	r0, #1
 8014f5a:	d10e      	bne.n	8014f7a <_printf_float+0x416>
 8014f5c:	e65d      	b.n	8014c1a <_printf_float+0xb6>
 8014f5e:	2301      	movs	r3, #1
 8014f60:	464a      	mov	r2, r9
 8014f62:	4631      	mov	r1, r6
 8014f64:	4628      	mov	r0, r5
 8014f66:	47b8      	blx	r7
 8014f68:	3001      	adds	r0, #1
 8014f6a:	f43f ae56 	beq.w	8014c1a <_printf_float+0xb6>
 8014f6e:	f108 0801 	add.w	r8, r8, #1
 8014f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f74:	3b01      	subs	r3, #1
 8014f76:	4543      	cmp	r3, r8
 8014f78:	dcf1      	bgt.n	8014f5e <_printf_float+0x3fa>
 8014f7a:	4653      	mov	r3, sl
 8014f7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014f80:	e6df      	b.n	8014d42 <_printf_float+0x1de>
 8014f82:	f04f 0800 	mov.w	r8, #0
 8014f86:	f104 091a 	add.w	r9, r4, #26
 8014f8a:	e7f2      	b.n	8014f72 <_printf_float+0x40e>
 8014f8c:	2301      	movs	r3, #1
 8014f8e:	4642      	mov	r2, r8
 8014f90:	e7df      	b.n	8014f52 <_printf_float+0x3ee>
 8014f92:	2301      	movs	r3, #1
 8014f94:	464a      	mov	r2, r9
 8014f96:	4631      	mov	r1, r6
 8014f98:	4628      	mov	r0, r5
 8014f9a:	47b8      	blx	r7
 8014f9c:	3001      	adds	r0, #1
 8014f9e:	f43f ae3c 	beq.w	8014c1a <_printf_float+0xb6>
 8014fa2:	f108 0801 	add.w	r8, r8, #1
 8014fa6:	68e3      	ldr	r3, [r4, #12]
 8014fa8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014faa:	1a5b      	subs	r3, r3, r1
 8014fac:	4543      	cmp	r3, r8
 8014fae:	dcf0      	bgt.n	8014f92 <_printf_float+0x42e>
 8014fb0:	e6fc      	b.n	8014dac <_printf_float+0x248>
 8014fb2:	f04f 0800 	mov.w	r8, #0
 8014fb6:	f104 0919 	add.w	r9, r4, #25
 8014fba:	e7f4      	b.n	8014fa6 <_printf_float+0x442>

08014fbc <_printf_common>:
 8014fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fc0:	4616      	mov	r6, r2
 8014fc2:	4699      	mov	r9, r3
 8014fc4:	688a      	ldr	r2, [r1, #8]
 8014fc6:	690b      	ldr	r3, [r1, #16]
 8014fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014fcc:	4293      	cmp	r3, r2
 8014fce:	bfb8      	it	lt
 8014fd0:	4613      	movlt	r3, r2
 8014fd2:	6033      	str	r3, [r6, #0]
 8014fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014fd8:	4607      	mov	r7, r0
 8014fda:	460c      	mov	r4, r1
 8014fdc:	b10a      	cbz	r2, 8014fe2 <_printf_common+0x26>
 8014fde:	3301      	adds	r3, #1
 8014fe0:	6033      	str	r3, [r6, #0]
 8014fe2:	6823      	ldr	r3, [r4, #0]
 8014fe4:	0699      	lsls	r1, r3, #26
 8014fe6:	bf42      	ittt	mi
 8014fe8:	6833      	ldrmi	r3, [r6, #0]
 8014fea:	3302      	addmi	r3, #2
 8014fec:	6033      	strmi	r3, [r6, #0]
 8014fee:	6825      	ldr	r5, [r4, #0]
 8014ff0:	f015 0506 	ands.w	r5, r5, #6
 8014ff4:	d106      	bne.n	8015004 <_printf_common+0x48>
 8014ff6:	f104 0a19 	add.w	sl, r4, #25
 8014ffa:	68e3      	ldr	r3, [r4, #12]
 8014ffc:	6832      	ldr	r2, [r6, #0]
 8014ffe:	1a9b      	subs	r3, r3, r2
 8015000:	42ab      	cmp	r3, r5
 8015002:	dc26      	bgt.n	8015052 <_printf_common+0x96>
 8015004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015008:	1e13      	subs	r3, r2, #0
 801500a:	6822      	ldr	r2, [r4, #0]
 801500c:	bf18      	it	ne
 801500e:	2301      	movne	r3, #1
 8015010:	0692      	lsls	r2, r2, #26
 8015012:	d42b      	bmi.n	801506c <_printf_common+0xb0>
 8015014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015018:	4649      	mov	r1, r9
 801501a:	4638      	mov	r0, r7
 801501c:	47c0      	blx	r8
 801501e:	3001      	adds	r0, #1
 8015020:	d01e      	beq.n	8015060 <_printf_common+0xa4>
 8015022:	6823      	ldr	r3, [r4, #0]
 8015024:	6922      	ldr	r2, [r4, #16]
 8015026:	f003 0306 	and.w	r3, r3, #6
 801502a:	2b04      	cmp	r3, #4
 801502c:	bf02      	ittt	eq
 801502e:	68e5      	ldreq	r5, [r4, #12]
 8015030:	6833      	ldreq	r3, [r6, #0]
 8015032:	1aed      	subeq	r5, r5, r3
 8015034:	68a3      	ldr	r3, [r4, #8]
 8015036:	bf0c      	ite	eq
 8015038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801503c:	2500      	movne	r5, #0
 801503e:	4293      	cmp	r3, r2
 8015040:	bfc4      	itt	gt
 8015042:	1a9b      	subgt	r3, r3, r2
 8015044:	18ed      	addgt	r5, r5, r3
 8015046:	2600      	movs	r6, #0
 8015048:	341a      	adds	r4, #26
 801504a:	42b5      	cmp	r5, r6
 801504c:	d11a      	bne.n	8015084 <_printf_common+0xc8>
 801504e:	2000      	movs	r0, #0
 8015050:	e008      	b.n	8015064 <_printf_common+0xa8>
 8015052:	2301      	movs	r3, #1
 8015054:	4652      	mov	r2, sl
 8015056:	4649      	mov	r1, r9
 8015058:	4638      	mov	r0, r7
 801505a:	47c0      	blx	r8
 801505c:	3001      	adds	r0, #1
 801505e:	d103      	bne.n	8015068 <_printf_common+0xac>
 8015060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015068:	3501      	adds	r5, #1
 801506a:	e7c6      	b.n	8014ffa <_printf_common+0x3e>
 801506c:	18e1      	adds	r1, r4, r3
 801506e:	1c5a      	adds	r2, r3, #1
 8015070:	2030      	movs	r0, #48	; 0x30
 8015072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015076:	4422      	add	r2, r4
 8015078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801507c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015080:	3302      	adds	r3, #2
 8015082:	e7c7      	b.n	8015014 <_printf_common+0x58>
 8015084:	2301      	movs	r3, #1
 8015086:	4622      	mov	r2, r4
 8015088:	4649      	mov	r1, r9
 801508a:	4638      	mov	r0, r7
 801508c:	47c0      	blx	r8
 801508e:	3001      	adds	r0, #1
 8015090:	d0e6      	beq.n	8015060 <_printf_common+0xa4>
 8015092:	3601      	adds	r6, #1
 8015094:	e7d9      	b.n	801504a <_printf_common+0x8e>
	...

08015098 <_printf_i>:
 8015098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801509c:	7e0f      	ldrb	r7, [r1, #24]
 801509e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80150a0:	2f78      	cmp	r7, #120	; 0x78
 80150a2:	4691      	mov	r9, r2
 80150a4:	4680      	mov	r8, r0
 80150a6:	460c      	mov	r4, r1
 80150a8:	469a      	mov	sl, r3
 80150aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80150ae:	d807      	bhi.n	80150c0 <_printf_i+0x28>
 80150b0:	2f62      	cmp	r7, #98	; 0x62
 80150b2:	d80a      	bhi.n	80150ca <_printf_i+0x32>
 80150b4:	2f00      	cmp	r7, #0
 80150b6:	f000 80d4 	beq.w	8015262 <_printf_i+0x1ca>
 80150ba:	2f58      	cmp	r7, #88	; 0x58
 80150bc:	f000 80c0 	beq.w	8015240 <_printf_i+0x1a8>
 80150c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80150c8:	e03a      	b.n	8015140 <_printf_i+0xa8>
 80150ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80150ce:	2b15      	cmp	r3, #21
 80150d0:	d8f6      	bhi.n	80150c0 <_printf_i+0x28>
 80150d2:	a101      	add	r1, pc, #4	; (adr r1, 80150d8 <_printf_i+0x40>)
 80150d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80150d8:	08015131 	.word	0x08015131
 80150dc:	08015145 	.word	0x08015145
 80150e0:	080150c1 	.word	0x080150c1
 80150e4:	080150c1 	.word	0x080150c1
 80150e8:	080150c1 	.word	0x080150c1
 80150ec:	080150c1 	.word	0x080150c1
 80150f0:	08015145 	.word	0x08015145
 80150f4:	080150c1 	.word	0x080150c1
 80150f8:	080150c1 	.word	0x080150c1
 80150fc:	080150c1 	.word	0x080150c1
 8015100:	080150c1 	.word	0x080150c1
 8015104:	08015249 	.word	0x08015249
 8015108:	08015171 	.word	0x08015171
 801510c:	08015203 	.word	0x08015203
 8015110:	080150c1 	.word	0x080150c1
 8015114:	080150c1 	.word	0x080150c1
 8015118:	0801526b 	.word	0x0801526b
 801511c:	080150c1 	.word	0x080150c1
 8015120:	08015171 	.word	0x08015171
 8015124:	080150c1 	.word	0x080150c1
 8015128:	080150c1 	.word	0x080150c1
 801512c:	0801520b 	.word	0x0801520b
 8015130:	682b      	ldr	r3, [r5, #0]
 8015132:	1d1a      	adds	r2, r3, #4
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	602a      	str	r2, [r5, #0]
 8015138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801513c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015140:	2301      	movs	r3, #1
 8015142:	e09f      	b.n	8015284 <_printf_i+0x1ec>
 8015144:	6820      	ldr	r0, [r4, #0]
 8015146:	682b      	ldr	r3, [r5, #0]
 8015148:	0607      	lsls	r7, r0, #24
 801514a:	f103 0104 	add.w	r1, r3, #4
 801514e:	6029      	str	r1, [r5, #0]
 8015150:	d501      	bpl.n	8015156 <_printf_i+0xbe>
 8015152:	681e      	ldr	r6, [r3, #0]
 8015154:	e003      	b.n	801515e <_printf_i+0xc6>
 8015156:	0646      	lsls	r6, r0, #25
 8015158:	d5fb      	bpl.n	8015152 <_printf_i+0xba>
 801515a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801515e:	2e00      	cmp	r6, #0
 8015160:	da03      	bge.n	801516a <_printf_i+0xd2>
 8015162:	232d      	movs	r3, #45	; 0x2d
 8015164:	4276      	negs	r6, r6
 8015166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801516a:	485a      	ldr	r0, [pc, #360]	; (80152d4 <_printf_i+0x23c>)
 801516c:	230a      	movs	r3, #10
 801516e:	e012      	b.n	8015196 <_printf_i+0xfe>
 8015170:	682b      	ldr	r3, [r5, #0]
 8015172:	6820      	ldr	r0, [r4, #0]
 8015174:	1d19      	adds	r1, r3, #4
 8015176:	6029      	str	r1, [r5, #0]
 8015178:	0605      	lsls	r5, r0, #24
 801517a:	d501      	bpl.n	8015180 <_printf_i+0xe8>
 801517c:	681e      	ldr	r6, [r3, #0]
 801517e:	e002      	b.n	8015186 <_printf_i+0xee>
 8015180:	0641      	lsls	r1, r0, #25
 8015182:	d5fb      	bpl.n	801517c <_printf_i+0xe4>
 8015184:	881e      	ldrh	r6, [r3, #0]
 8015186:	4853      	ldr	r0, [pc, #332]	; (80152d4 <_printf_i+0x23c>)
 8015188:	2f6f      	cmp	r7, #111	; 0x6f
 801518a:	bf0c      	ite	eq
 801518c:	2308      	moveq	r3, #8
 801518e:	230a      	movne	r3, #10
 8015190:	2100      	movs	r1, #0
 8015192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015196:	6865      	ldr	r5, [r4, #4]
 8015198:	60a5      	str	r5, [r4, #8]
 801519a:	2d00      	cmp	r5, #0
 801519c:	bfa2      	ittt	ge
 801519e:	6821      	ldrge	r1, [r4, #0]
 80151a0:	f021 0104 	bicge.w	r1, r1, #4
 80151a4:	6021      	strge	r1, [r4, #0]
 80151a6:	b90e      	cbnz	r6, 80151ac <_printf_i+0x114>
 80151a8:	2d00      	cmp	r5, #0
 80151aa:	d04b      	beq.n	8015244 <_printf_i+0x1ac>
 80151ac:	4615      	mov	r5, r2
 80151ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80151b2:	fb03 6711 	mls	r7, r3, r1, r6
 80151b6:	5dc7      	ldrb	r7, [r0, r7]
 80151b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80151bc:	4637      	mov	r7, r6
 80151be:	42bb      	cmp	r3, r7
 80151c0:	460e      	mov	r6, r1
 80151c2:	d9f4      	bls.n	80151ae <_printf_i+0x116>
 80151c4:	2b08      	cmp	r3, #8
 80151c6:	d10b      	bne.n	80151e0 <_printf_i+0x148>
 80151c8:	6823      	ldr	r3, [r4, #0]
 80151ca:	07de      	lsls	r6, r3, #31
 80151cc:	d508      	bpl.n	80151e0 <_printf_i+0x148>
 80151ce:	6923      	ldr	r3, [r4, #16]
 80151d0:	6861      	ldr	r1, [r4, #4]
 80151d2:	4299      	cmp	r1, r3
 80151d4:	bfde      	ittt	le
 80151d6:	2330      	movle	r3, #48	; 0x30
 80151d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80151dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80151e0:	1b52      	subs	r2, r2, r5
 80151e2:	6122      	str	r2, [r4, #16]
 80151e4:	f8cd a000 	str.w	sl, [sp]
 80151e8:	464b      	mov	r3, r9
 80151ea:	aa03      	add	r2, sp, #12
 80151ec:	4621      	mov	r1, r4
 80151ee:	4640      	mov	r0, r8
 80151f0:	f7ff fee4 	bl	8014fbc <_printf_common>
 80151f4:	3001      	adds	r0, #1
 80151f6:	d14a      	bne.n	801528e <_printf_i+0x1f6>
 80151f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151fc:	b004      	add	sp, #16
 80151fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015202:	6823      	ldr	r3, [r4, #0]
 8015204:	f043 0320 	orr.w	r3, r3, #32
 8015208:	6023      	str	r3, [r4, #0]
 801520a:	4833      	ldr	r0, [pc, #204]	; (80152d8 <_printf_i+0x240>)
 801520c:	2778      	movs	r7, #120	; 0x78
 801520e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015212:	6823      	ldr	r3, [r4, #0]
 8015214:	6829      	ldr	r1, [r5, #0]
 8015216:	061f      	lsls	r7, r3, #24
 8015218:	f851 6b04 	ldr.w	r6, [r1], #4
 801521c:	d402      	bmi.n	8015224 <_printf_i+0x18c>
 801521e:	065f      	lsls	r7, r3, #25
 8015220:	bf48      	it	mi
 8015222:	b2b6      	uxthmi	r6, r6
 8015224:	07df      	lsls	r7, r3, #31
 8015226:	bf48      	it	mi
 8015228:	f043 0320 	orrmi.w	r3, r3, #32
 801522c:	6029      	str	r1, [r5, #0]
 801522e:	bf48      	it	mi
 8015230:	6023      	strmi	r3, [r4, #0]
 8015232:	b91e      	cbnz	r6, 801523c <_printf_i+0x1a4>
 8015234:	6823      	ldr	r3, [r4, #0]
 8015236:	f023 0320 	bic.w	r3, r3, #32
 801523a:	6023      	str	r3, [r4, #0]
 801523c:	2310      	movs	r3, #16
 801523e:	e7a7      	b.n	8015190 <_printf_i+0xf8>
 8015240:	4824      	ldr	r0, [pc, #144]	; (80152d4 <_printf_i+0x23c>)
 8015242:	e7e4      	b.n	801520e <_printf_i+0x176>
 8015244:	4615      	mov	r5, r2
 8015246:	e7bd      	b.n	80151c4 <_printf_i+0x12c>
 8015248:	682b      	ldr	r3, [r5, #0]
 801524a:	6826      	ldr	r6, [r4, #0]
 801524c:	6961      	ldr	r1, [r4, #20]
 801524e:	1d18      	adds	r0, r3, #4
 8015250:	6028      	str	r0, [r5, #0]
 8015252:	0635      	lsls	r5, r6, #24
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	d501      	bpl.n	801525c <_printf_i+0x1c4>
 8015258:	6019      	str	r1, [r3, #0]
 801525a:	e002      	b.n	8015262 <_printf_i+0x1ca>
 801525c:	0670      	lsls	r0, r6, #25
 801525e:	d5fb      	bpl.n	8015258 <_printf_i+0x1c0>
 8015260:	8019      	strh	r1, [r3, #0]
 8015262:	2300      	movs	r3, #0
 8015264:	6123      	str	r3, [r4, #16]
 8015266:	4615      	mov	r5, r2
 8015268:	e7bc      	b.n	80151e4 <_printf_i+0x14c>
 801526a:	682b      	ldr	r3, [r5, #0]
 801526c:	1d1a      	adds	r2, r3, #4
 801526e:	602a      	str	r2, [r5, #0]
 8015270:	681d      	ldr	r5, [r3, #0]
 8015272:	6862      	ldr	r2, [r4, #4]
 8015274:	2100      	movs	r1, #0
 8015276:	4628      	mov	r0, r5
 8015278:	f7ea ff82 	bl	8000180 <memchr>
 801527c:	b108      	cbz	r0, 8015282 <_printf_i+0x1ea>
 801527e:	1b40      	subs	r0, r0, r5
 8015280:	6060      	str	r0, [r4, #4]
 8015282:	6863      	ldr	r3, [r4, #4]
 8015284:	6123      	str	r3, [r4, #16]
 8015286:	2300      	movs	r3, #0
 8015288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801528c:	e7aa      	b.n	80151e4 <_printf_i+0x14c>
 801528e:	6923      	ldr	r3, [r4, #16]
 8015290:	462a      	mov	r2, r5
 8015292:	4649      	mov	r1, r9
 8015294:	4640      	mov	r0, r8
 8015296:	47d0      	blx	sl
 8015298:	3001      	adds	r0, #1
 801529a:	d0ad      	beq.n	80151f8 <_printf_i+0x160>
 801529c:	6823      	ldr	r3, [r4, #0]
 801529e:	079b      	lsls	r3, r3, #30
 80152a0:	d413      	bmi.n	80152ca <_printf_i+0x232>
 80152a2:	68e0      	ldr	r0, [r4, #12]
 80152a4:	9b03      	ldr	r3, [sp, #12]
 80152a6:	4298      	cmp	r0, r3
 80152a8:	bfb8      	it	lt
 80152aa:	4618      	movlt	r0, r3
 80152ac:	e7a6      	b.n	80151fc <_printf_i+0x164>
 80152ae:	2301      	movs	r3, #1
 80152b0:	4632      	mov	r2, r6
 80152b2:	4649      	mov	r1, r9
 80152b4:	4640      	mov	r0, r8
 80152b6:	47d0      	blx	sl
 80152b8:	3001      	adds	r0, #1
 80152ba:	d09d      	beq.n	80151f8 <_printf_i+0x160>
 80152bc:	3501      	adds	r5, #1
 80152be:	68e3      	ldr	r3, [r4, #12]
 80152c0:	9903      	ldr	r1, [sp, #12]
 80152c2:	1a5b      	subs	r3, r3, r1
 80152c4:	42ab      	cmp	r3, r5
 80152c6:	dcf2      	bgt.n	80152ae <_printf_i+0x216>
 80152c8:	e7eb      	b.n	80152a2 <_printf_i+0x20a>
 80152ca:	2500      	movs	r5, #0
 80152cc:	f104 0619 	add.w	r6, r4, #25
 80152d0:	e7f5      	b.n	80152be <_printf_i+0x226>
 80152d2:	bf00      	nop
 80152d4:	0801a3e1 	.word	0x0801a3e1
 80152d8:	0801a3f2 	.word	0x0801a3f2

080152dc <_scanf_float>:
 80152dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e0:	b087      	sub	sp, #28
 80152e2:	4617      	mov	r7, r2
 80152e4:	9303      	str	r3, [sp, #12]
 80152e6:	688b      	ldr	r3, [r1, #8]
 80152e8:	1e5a      	subs	r2, r3, #1
 80152ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80152ee:	bf83      	ittte	hi
 80152f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80152f4:	195b      	addhi	r3, r3, r5
 80152f6:	9302      	strhi	r3, [sp, #8]
 80152f8:	2300      	movls	r3, #0
 80152fa:	bf86      	itte	hi
 80152fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015300:	608b      	strhi	r3, [r1, #8]
 8015302:	9302      	strls	r3, [sp, #8]
 8015304:	680b      	ldr	r3, [r1, #0]
 8015306:	468b      	mov	fp, r1
 8015308:	2500      	movs	r5, #0
 801530a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801530e:	f84b 3b1c 	str.w	r3, [fp], #28
 8015312:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015316:	4680      	mov	r8, r0
 8015318:	460c      	mov	r4, r1
 801531a:	465e      	mov	r6, fp
 801531c:	46aa      	mov	sl, r5
 801531e:	46a9      	mov	r9, r5
 8015320:	9501      	str	r5, [sp, #4]
 8015322:	68a2      	ldr	r2, [r4, #8]
 8015324:	b152      	cbz	r2, 801533c <_scanf_float+0x60>
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	781b      	ldrb	r3, [r3, #0]
 801532a:	2b4e      	cmp	r3, #78	; 0x4e
 801532c:	d864      	bhi.n	80153f8 <_scanf_float+0x11c>
 801532e:	2b40      	cmp	r3, #64	; 0x40
 8015330:	d83c      	bhi.n	80153ac <_scanf_float+0xd0>
 8015332:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015336:	b2c8      	uxtb	r0, r1
 8015338:	280e      	cmp	r0, #14
 801533a:	d93a      	bls.n	80153b2 <_scanf_float+0xd6>
 801533c:	f1b9 0f00 	cmp.w	r9, #0
 8015340:	d003      	beq.n	801534a <_scanf_float+0x6e>
 8015342:	6823      	ldr	r3, [r4, #0]
 8015344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015348:	6023      	str	r3, [r4, #0]
 801534a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801534e:	f1ba 0f01 	cmp.w	sl, #1
 8015352:	f200 8113 	bhi.w	801557c <_scanf_float+0x2a0>
 8015356:	455e      	cmp	r6, fp
 8015358:	f200 8105 	bhi.w	8015566 <_scanf_float+0x28a>
 801535c:	2501      	movs	r5, #1
 801535e:	4628      	mov	r0, r5
 8015360:	b007      	add	sp, #28
 8015362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015366:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801536a:	2a0d      	cmp	r2, #13
 801536c:	d8e6      	bhi.n	801533c <_scanf_float+0x60>
 801536e:	a101      	add	r1, pc, #4	; (adr r1, 8015374 <_scanf_float+0x98>)
 8015370:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015374:	080154b3 	.word	0x080154b3
 8015378:	0801533d 	.word	0x0801533d
 801537c:	0801533d 	.word	0x0801533d
 8015380:	0801533d 	.word	0x0801533d
 8015384:	08015513 	.word	0x08015513
 8015388:	080154eb 	.word	0x080154eb
 801538c:	0801533d 	.word	0x0801533d
 8015390:	0801533d 	.word	0x0801533d
 8015394:	080154c1 	.word	0x080154c1
 8015398:	0801533d 	.word	0x0801533d
 801539c:	0801533d 	.word	0x0801533d
 80153a0:	0801533d 	.word	0x0801533d
 80153a4:	0801533d 	.word	0x0801533d
 80153a8:	08015479 	.word	0x08015479
 80153ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80153b0:	e7db      	b.n	801536a <_scanf_float+0x8e>
 80153b2:	290e      	cmp	r1, #14
 80153b4:	d8c2      	bhi.n	801533c <_scanf_float+0x60>
 80153b6:	a001      	add	r0, pc, #4	; (adr r0, 80153bc <_scanf_float+0xe0>)
 80153b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80153bc:	0801546b 	.word	0x0801546b
 80153c0:	0801533d 	.word	0x0801533d
 80153c4:	0801546b 	.word	0x0801546b
 80153c8:	080154ff 	.word	0x080154ff
 80153cc:	0801533d 	.word	0x0801533d
 80153d0:	08015419 	.word	0x08015419
 80153d4:	08015455 	.word	0x08015455
 80153d8:	08015455 	.word	0x08015455
 80153dc:	08015455 	.word	0x08015455
 80153e0:	08015455 	.word	0x08015455
 80153e4:	08015455 	.word	0x08015455
 80153e8:	08015455 	.word	0x08015455
 80153ec:	08015455 	.word	0x08015455
 80153f0:	08015455 	.word	0x08015455
 80153f4:	08015455 	.word	0x08015455
 80153f8:	2b6e      	cmp	r3, #110	; 0x6e
 80153fa:	d809      	bhi.n	8015410 <_scanf_float+0x134>
 80153fc:	2b60      	cmp	r3, #96	; 0x60
 80153fe:	d8b2      	bhi.n	8015366 <_scanf_float+0x8a>
 8015400:	2b54      	cmp	r3, #84	; 0x54
 8015402:	d077      	beq.n	80154f4 <_scanf_float+0x218>
 8015404:	2b59      	cmp	r3, #89	; 0x59
 8015406:	d199      	bne.n	801533c <_scanf_float+0x60>
 8015408:	2d07      	cmp	r5, #7
 801540a:	d197      	bne.n	801533c <_scanf_float+0x60>
 801540c:	2508      	movs	r5, #8
 801540e:	e029      	b.n	8015464 <_scanf_float+0x188>
 8015410:	2b74      	cmp	r3, #116	; 0x74
 8015412:	d06f      	beq.n	80154f4 <_scanf_float+0x218>
 8015414:	2b79      	cmp	r3, #121	; 0x79
 8015416:	e7f6      	b.n	8015406 <_scanf_float+0x12a>
 8015418:	6821      	ldr	r1, [r4, #0]
 801541a:	05c8      	lsls	r0, r1, #23
 801541c:	d51a      	bpl.n	8015454 <_scanf_float+0x178>
 801541e:	9b02      	ldr	r3, [sp, #8]
 8015420:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015424:	6021      	str	r1, [r4, #0]
 8015426:	f109 0901 	add.w	r9, r9, #1
 801542a:	b11b      	cbz	r3, 8015434 <_scanf_float+0x158>
 801542c:	3b01      	subs	r3, #1
 801542e:	3201      	adds	r2, #1
 8015430:	9302      	str	r3, [sp, #8]
 8015432:	60a2      	str	r2, [r4, #8]
 8015434:	68a3      	ldr	r3, [r4, #8]
 8015436:	3b01      	subs	r3, #1
 8015438:	60a3      	str	r3, [r4, #8]
 801543a:	6923      	ldr	r3, [r4, #16]
 801543c:	3301      	adds	r3, #1
 801543e:	6123      	str	r3, [r4, #16]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	3b01      	subs	r3, #1
 8015444:	2b00      	cmp	r3, #0
 8015446:	607b      	str	r3, [r7, #4]
 8015448:	f340 8084 	ble.w	8015554 <_scanf_float+0x278>
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	3301      	adds	r3, #1
 8015450:	603b      	str	r3, [r7, #0]
 8015452:	e766      	b.n	8015322 <_scanf_float+0x46>
 8015454:	eb1a 0f05 	cmn.w	sl, r5
 8015458:	f47f af70 	bne.w	801533c <_scanf_float+0x60>
 801545c:	6822      	ldr	r2, [r4, #0]
 801545e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015462:	6022      	str	r2, [r4, #0]
 8015464:	f806 3b01 	strb.w	r3, [r6], #1
 8015468:	e7e4      	b.n	8015434 <_scanf_float+0x158>
 801546a:	6822      	ldr	r2, [r4, #0]
 801546c:	0610      	lsls	r0, r2, #24
 801546e:	f57f af65 	bpl.w	801533c <_scanf_float+0x60>
 8015472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015476:	e7f4      	b.n	8015462 <_scanf_float+0x186>
 8015478:	f1ba 0f00 	cmp.w	sl, #0
 801547c:	d10e      	bne.n	801549c <_scanf_float+0x1c0>
 801547e:	f1b9 0f00 	cmp.w	r9, #0
 8015482:	d10e      	bne.n	80154a2 <_scanf_float+0x1c6>
 8015484:	6822      	ldr	r2, [r4, #0]
 8015486:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801548a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801548e:	d108      	bne.n	80154a2 <_scanf_float+0x1c6>
 8015490:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015494:	6022      	str	r2, [r4, #0]
 8015496:	f04f 0a01 	mov.w	sl, #1
 801549a:	e7e3      	b.n	8015464 <_scanf_float+0x188>
 801549c:	f1ba 0f02 	cmp.w	sl, #2
 80154a0:	d055      	beq.n	801554e <_scanf_float+0x272>
 80154a2:	2d01      	cmp	r5, #1
 80154a4:	d002      	beq.n	80154ac <_scanf_float+0x1d0>
 80154a6:	2d04      	cmp	r5, #4
 80154a8:	f47f af48 	bne.w	801533c <_scanf_float+0x60>
 80154ac:	3501      	adds	r5, #1
 80154ae:	b2ed      	uxtb	r5, r5
 80154b0:	e7d8      	b.n	8015464 <_scanf_float+0x188>
 80154b2:	f1ba 0f01 	cmp.w	sl, #1
 80154b6:	f47f af41 	bne.w	801533c <_scanf_float+0x60>
 80154ba:	f04f 0a02 	mov.w	sl, #2
 80154be:	e7d1      	b.n	8015464 <_scanf_float+0x188>
 80154c0:	b97d      	cbnz	r5, 80154e2 <_scanf_float+0x206>
 80154c2:	f1b9 0f00 	cmp.w	r9, #0
 80154c6:	f47f af3c 	bne.w	8015342 <_scanf_float+0x66>
 80154ca:	6822      	ldr	r2, [r4, #0]
 80154cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80154d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80154d4:	f47f af39 	bne.w	801534a <_scanf_float+0x6e>
 80154d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80154dc:	6022      	str	r2, [r4, #0]
 80154de:	2501      	movs	r5, #1
 80154e0:	e7c0      	b.n	8015464 <_scanf_float+0x188>
 80154e2:	2d03      	cmp	r5, #3
 80154e4:	d0e2      	beq.n	80154ac <_scanf_float+0x1d0>
 80154e6:	2d05      	cmp	r5, #5
 80154e8:	e7de      	b.n	80154a8 <_scanf_float+0x1cc>
 80154ea:	2d02      	cmp	r5, #2
 80154ec:	f47f af26 	bne.w	801533c <_scanf_float+0x60>
 80154f0:	2503      	movs	r5, #3
 80154f2:	e7b7      	b.n	8015464 <_scanf_float+0x188>
 80154f4:	2d06      	cmp	r5, #6
 80154f6:	f47f af21 	bne.w	801533c <_scanf_float+0x60>
 80154fa:	2507      	movs	r5, #7
 80154fc:	e7b2      	b.n	8015464 <_scanf_float+0x188>
 80154fe:	6822      	ldr	r2, [r4, #0]
 8015500:	0591      	lsls	r1, r2, #22
 8015502:	f57f af1b 	bpl.w	801533c <_scanf_float+0x60>
 8015506:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801550a:	6022      	str	r2, [r4, #0]
 801550c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015510:	e7a8      	b.n	8015464 <_scanf_float+0x188>
 8015512:	6822      	ldr	r2, [r4, #0]
 8015514:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015518:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801551c:	d006      	beq.n	801552c <_scanf_float+0x250>
 801551e:	0550      	lsls	r0, r2, #21
 8015520:	f57f af0c 	bpl.w	801533c <_scanf_float+0x60>
 8015524:	f1b9 0f00 	cmp.w	r9, #0
 8015528:	f43f af0f 	beq.w	801534a <_scanf_float+0x6e>
 801552c:	0591      	lsls	r1, r2, #22
 801552e:	bf58      	it	pl
 8015530:	9901      	ldrpl	r1, [sp, #4]
 8015532:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015536:	bf58      	it	pl
 8015538:	eba9 0101 	subpl.w	r1, r9, r1
 801553c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015540:	bf58      	it	pl
 8015542:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015546:	6022      	str	r2, [r4, #0]
 8015548:	f04f 0900 	mov.w	r9, #0
 801554c:	e78a      	b.n	8015464 <_scanf_float+0x188>
 801554e:	f04f 0a03 	mov.w	sl, #3
 8015552:	e787      	b.n	8015464 <_scanf_float+0x188>
 8015554:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015558:	4639      	mov	r1, r7
 801555a:	4640      	mov	r0, r8
 801555c:	4798      	blx	r3
 801555e:	2800      	cmp	r0, #0
 8015560:	f43f aedf 	beq.w	8015322 <_scanf_float+0x46>
 8015564:	e6ea      	b.n	801533c <_scanf_float+0x60>
 8015566:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801556a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801556e:	463a      	mov	r2, r7
 8015570:	4640      	mov	r0, r8
 8015572:	4798      	blx	r3
 8015574:	6923      	ldr	r3, [r4, #16]
 8015576:	3b01      	subs	r3, #1
 8015578:	6123      	str	r3, [r4, #16]
 801557a:	e6ec      	b.n	8015356 <_scanf_float+0x7a>
 801557c:	1e6b      	subs	r3, r5, #1
 801557e:	2b06      	cmp	r3, #6
 8015580:	d825      	bhi.n	80155ce <_scanf_float+0x2f2>
 8015582:	2d02      	cmp	r5, #2
 8015584:	d836      	bhi.n	80155f4 <_scanf_float+0x318>
 8015586:	455e      	cmp	r6, fp
 8015588:	f67f aee8 	bls.w	801535c <_scanf_float+0x80>
 801558c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015590:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015594:	463a      	mov	r2, r7
 8015596:	4640      	mov	r0, r8
 8015598:	4798      	blx	r3
 801559a:	6923      	ldr	r3, [r4, #16]
 801559c:	3b01      	subs	r3, #1
 801559e:	6123      	str	r3, [r4, #16]
 80155a0:	e7f1      	b.n	8015586 <_scanf_float+0x2aa>
 80155a2:	9802      	ldr	r0, [sp, #8]
 80155a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80155a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80155ac:	9002      	str	r0, [sp, #8]
 80155ae:	463a      	mov	r2, r7
 80155b0:	4640      	mov	r0, r8
 80155b2:	4798      	blx	r3
 80155b4:	6923      	ldr	r3, [r4, #16]
 80155b6:	3b01      	subs	r3, #1
 80155b8:	6123      	str	r3, [r4, #16]
 80155ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80155be:	fa5f fa8a 	uxtb.w	sl, sl
 80155c2:	f1ba 0f02 	cmp.w	sl, #2
 80155c6:	d1ec      	bne.n	80155a2 <_scanf_float+0x2c6>
 80155c8:	3d03      	subs	r5, #3
 80155ca:	b2ed      	uxtb	r5, r5
 80155cc:	1b76      	subs	r6, r6, r5
 80155ce:	6823      	ldr	r3, [r4, #0]
 80155d0:	05da      	lsls	r2, r3, #23
 80155d2:	d52f      	bpl.n	8015634 <_scanf_float+0x358>
 80155d4:	055b      	lsls	r3, r3, #21
 80155d6:	d510      	bpl.n	80155fa <_scanf_float+0x31e>
 80155d8:	455e      	cmp	r6, fp
 80155da:	f67f aebf 	bls.w	801535c <_scanf_float+0x80>
 80155de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80155e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80155e6:	463a      	mov	r2, r7
 80155e8:	4640      	mov	r0, r8
 80155ea:	4798      	blx	r3
 80155ec:	6923      	ldr	r3, [r4, #16]
 80155ee:	3b01      	subs	r3, #1
 80155f0:	6123      	str	r3, [r4, #16]
 80155f2:	e7f1      	b.n	80155d8 <_scanf_float+0x2fc>
 80155f4:	46aa      	mov	sl, r5
 80155f6:	9602      	str	r6, [sp, #8]
 80155f8:	e7df      	b.n	80155ba <_scanf_float+0x2de>
 80155fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80155fe:	6923      	ldr	r3, [r4, #16]
 8015600:	2965      	cmp	r1, #101	; 0x65
 8015602:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015606:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801560a:	6123      	str	r3, [r4, #16]
 801560c:	d00c      	beq.n	8015628 <_scanf_float+0x34c>
 801560e:	2945      	cmp	r1, #69	; 0x45
 8015610:	d00a      	beq.n	8015628 <_scanf_float+0x34c>
 8015612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015616:	463a      	mov	r2, r7
 8015618:	4640      	mov	r0, r8
 801561a:	4798      	blx	r3
 801561c:	6923      	ldr	r3, [r4, #16]
 801561e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015622:	3b01      	subs	r3, #1
 8015624:	1eb5      	subs	r5, r6, #2
 8015626:	6123      	str	r3, [r4, #16]
 8015628:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801562c:	463a      	mov	r2, r7
 801562e:	4640      	mov	r0, r8
 8015630:	4798      	blx	r3
 8015632:	462e      	mov	r6, r5
 8015634:	6825      	ldr	r5, [r4, #0]
 8015636:	f015 0510 	ands.w	r5, r5, #16
 801563a:	d155      	bne.n	80156e8 <_scanf_float+0x40c>
 801563c:	7035      	strb	r5, [r6, #0]
 801563e:	6823      	ldr	r3, [r4, #0]
 8015640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015648:	d11d      	bne.n	8015686 <_scanf_float+0x3aa>
 801564a:	9b01      	ldr	r3, [sp, #4]
 801564c:	454b      	cmp	r3, r9
 801564e:	eba3 0209 	sub.w	r2, r3, r9
 8015652:	d125      	bne.n	80156a0 <_scanf_float+0x3c4>
 8015654:	2200      	movs	r2, #0
 8015656:	4659      	mov	r1, fp
 8015658:	4640      	mov	r0, r8
 801565a:	f000 ff21 	bl	80164a0 <_strtod_r>
 801565e:	9b03      	ldr	r3, [sp, #12]
 8015660:	f8d4 c000 	ldr.w	ip, [r4]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	f01c 0f02 	tst.w	ip, #2
 801566a:	4606      	mov	r6, r0
 801566c:	460f      	mov	r7, r1
 801566e:	f103 0204 	add.w	r2, r3, #4
 8015672:	d020      	beq.n	80156b6 <_scanf_float+0x3da>
 8015674:	9903      	ldr	r1, [sp, #12]
 8015676:	600a      	str	r2, [r1, #0]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	e9c3 6700 	strd	r6, r7, [r3]
 801567e:	68e3      	ldr	r3, [r4, #12]
 8015680:	3301      	adds	r3, #1
 8015682:	60e3      	str	r3, [r4, #12]
 8015684:	e66b      	b.n	801535e <_scanf_float+0x82>
 8015686:	9b04      	ldr	r3, [sp, #16]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d0e3      	beq.n	8015654 <_scanf_float+0x378>
 801568c:	9905      	ldr	r1, [sp, #20]
 801568e:	230a      	movs	r3, #10
 8015690:	462a      	mov	r2, r5
 8015692:	3101      	adds	r1, #1
 8015694:	4640      	mov	r0, r8
 8015696:	f000 ff87 	bl	80165a8 <_strtol_r>
 801569a:	9b04      	ldr	r3, [sp, #16]
 801569c:	9e05      	ldr	r6, [sp, #20]
 801569e:	1ac2      	subs	r2, r0, r3
 80156a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80156a4:	429e      	cmp	r6, r3
 80156a6:	bf28      	it	cs
 80156a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80156ac:	490f      	ldr	r1, [pc, #60]	; (80156ec <_scanf_float+0x410>)
 80156ae:	4630      	mov	r0, r6
 80156b0:	f000 f820 	bl	80156f4 <siprintf>
 80156b4:	e7ce      	b.n	8015654 <_scanf_float+0x378>
 80156b6:	f01c 0f04 	tst.w	ip, #4
 80156ba:	d1db      	bne.n	8015674 <_scanf_float+0x398>
 80156bc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80156c0:	f8cc 2000 	str.w	r2, [ip]
 80156c4:	f8d3 8000 	ldr.w	r8, [r3]
 80156c8:	4602      	mov	r2, r0
 80156ca:	460b      	mov	r3, r1
 80156cc:	f7eb fa06 	bl	8000adc <__aeabi_dcmpun>
 80156d0:	b128      	cbz	r0, 80156de <_scanf_float+0x402>
 80156d2:	4807      	ldr	r0, [pc, #28]	; (80156f0 <_scanf_float+0x414>)
 80156d4:	f001 f844 	bl	8016760 <nanf>
 80156d8:	f8c8 0000 	str.w	r0, [r8]
 80156dc:	e7cf      	b.n	801567e <_scanf_float+0x3a2>
 80156de:	4630      	mov	r0, r6
 80156e0:	4639      	mov	r1, r7
 80156e2:	f7eb fa59 	bl	8000b98 <__aeabi_d2f>
 80156e6:	e7f7      	b.n	80156d8 <_scanf_float+0x3fc>
 80156e8:	2500      	movs	r5, #0
 80156ea:	e638      	b.n	801535e <_scanf_float+0x82>
 80156ec:	0801a403 	.word	0x0801a403
 80156f0:	0801a5a4 	.word	0x0801a5a4

080156f4 <siprintf>:
 80156f4:	b40e      	push	{r1, r2, r3}
 80156f6:	b500      	push	{lr}
 80156f8:	b09c      	sub	sp, #112	; 0x70
 80156fa:	ab1d      	add	r3, sp, #116	; 0x74
 80156fc:	9002      	str	r0, [sp, #8]
 80156fe:	9006      	str	r0, [sp, #24]
 8015700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015704:	4809      	ldr	r0, [pc, #36]	; (801572c <siprintf+0x38>)
 8015706:	9107      	str	r1, [sp, #28]
 8015708:	9104      	str	r1, [sp, #16]
 801570a:	4909      	ldr	r1, [pc, #36]	; (8015730 <siprintf+0x3c>)
 801570c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015710:	9105      	str	r1, [sp, #20]
 8015712:	6800      	ldr	r0, [r0, #0]
 8015714:	9301      	str	r3, [sp, #4]
 8015716:	a902      	add	r1, sp, #8
 8015718:	f002 fa5e 	bl	8017bd8 <_svfiprintf_r>
 801571c:	9b02      	ldr	r3, [sp, #8]
 801571e:	2200      	movs	r2, #0
 8015720:	701a      	strb	r2, [r3, #0]
 8015722:	b01c      	add	sp, #112	; 0x70
 8015724:	f85d eb04 	ldr.w	lr, [sp], #4
 8015728:	b003      	add	sp, #12
 801572a:	4770      	bx	lr
 801572c:	200003e4 	.word	0x200003e4
 8015730:	ffff0208 	.word	0xffff0208

08015734 <std>:
 8015734:	2300      	movs	r3, #0
 8015736:	b510      	push	{r4, lr}
 8015738:	4604      	mov	r4, r0
 801573a:	e9c0 3300 	strd	r3, r3, [r0]
 801573e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015742:	6083      	str	r3, [r0, #8]
 8015744:	8181      	strh	r1, [r0, #12]
 8015746:	6643      	str	r3, [r0, #100]	; 0x64
 8015748:	81c2      	strh	r2, [r0, #14]
 801574a:	6183      	str	r3, [r0, #24]
 801574c:	4619      	mov	r1, r3
 801574e:	2208      	movs	r2, #8
 8015750:	305c      	adds	r0, #92	; 0x5c
 8015752:	f000 ffb7 	bl	80166c4 <memset>
 8015756:	4b0d      	ldr	r3, [pc, #52]	; (801578c <std+0x58>)
 8015758:	6263      	str	r3, [r4, #36]	; 0x24
 801575a:	4b0d      	ldr	r3, [pc, #52]	; (8015790 <std+0x5c>)
 801575c:	62a3      	str	r3, [r4, #40]	; 0x28
 801575e:	4b0d      	ldr	r3, [pc, #52]	; (8015794 <std+0x60>)
 8015760:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015762:	4b0d      	ldr	r3, [pc, #52]	; (8015798 <std+0x64>)
 8015764:	6323      	str	r3, [r4, #48]	; 0x30
 8015766:	4b0d      	ldr	r3, [pc, #52]	; (801579c <std+0x68>)
 8015768:	6224      	str	r4, [r4, #32]
 801576a:	429c      	cmp	r4, r3
 801576c:	d006      	beq.n	801577c <std+0x48>
 801576e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015772:	4294      	cmp	r4, r2
 8015774:	d002      	beq.n	801577c <std+0x48>
 8015776:	33d0      	adds	r3, #208	; 0xd0
 8015778:	429c      	cmp	r4, r3
 801577a:	d105      	bne.n	8015788 <std+0x54>
 801577c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015784:	f000 bfd4 	b.w	8016730 <__retarget_lock_init_recursive>
 8015788:	bd10      	pop	{r4, pc}
 801578a:	bf00      	nop
 801578c:	08018c6d 	.word	0x08018c6d
 8015790:	08018c8f 	.word	0x08018c8f
 8015794:	08018cc7 	.word	0x08018cc7
 8015798:	08018ceb 	.word	0x08018ceb
 801579c:	20001d64 	.word	0x20001d64

080157a0 <stdio_exit_handler>:
 80157a0:	4a02      	ldr	r2, [pc, #8]	; (80157ac <stdio_exit_handler+0xc>)
 80157a2:	4903      	ldr	r1, [pc, #12]	; (80157b0 <stdio_exit_handler+0x10>)
 80157a4:	4803      	ldr	r0, [pc, #12]	; (80157b4 <stdio_exit_handler+0x14>)
 80157a6:	f000 bf01 	b.w	80165ac <_fwalk_sglue>
 80157aa:	bf00      	nop
 80157ac:	20000220 	.word	0x20000220
 80157b0:	080182d1 	.word	0x080182d1
 80157b4:	20000398 	.word	0x20000398

080157b8 <cleanup_stdio>:
 80157b8:	6841      	ldr	r1, [r0, #4]
 80157ba:	4b0c      	ldr	r3, [pc, #48]	; (80157ec <cleanup_stdio+0x34>)
 80157bc:	4299      	cmp	r1, r3
 80157be:	b510      	push	{r4, lr}
 80157c0:	4604      	mov	r4, r0
 80157c2:	d001      	beq.n	80157c8 <cleanup_stdio+0x10>
 80157c4:	f002 fd84 	bl	80182d0 <_fflush_r>
 80157c8:	68a1      	ldr	r1, [r4, #8]
 80157ca:	4b09      	ldr	r3, [pc, #36]	; (80157f0 <cleanup_stdio+0x38>)
 80157cc:	4299      	cmp	r1, r3
 80157ce:	d002      	beq.n	80157d6 <cleanup_stdio+0x1e>
 80157d0:	4620      	mov	r0, r4
 80157d2:	f002 fd7d 	bl	80182d0 <_fflush_r>
 80157d6:	68e1      	ldr	r1, [r4, #12]
 80157d8:	4b06      	ldr	r3, [pc, #24]	; (80157f4 <cleanup_stdio+0x3c>)
 80157da:	4299      	cmp	r1, r3
 80157dc:	d004      	beq.n	80157e8 <cleanup_stdio+0x30>
 80157de:	4620      	mov	r0, r4
 80157e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157e4:	f002 bd74 	b.w	80182d0 <_fflush_r>
 80157e8:	bd10      	pop	{r4, pc}
 80157ea:	bf00      	nop
 80157ec:	20001d64 	.word	0x20001d64
 80157f0:	20001dcc 	.word	0x20001dcc
 80157f4:	20001e34 	.word	0x20001e34

080157f8 <global_stdio_init.part.0>:
 80157f8:	b510      	push	{r4, lr}
 80157fa:	4b0b      	ldr	r3, [pc, #44]	; (8015828 <global_stdio_init.part.0+0x30>)
 80157fc:	4c0b      	ldr	r4, [pc, #44]	; (801582c <global_stdio_init.part.0+0x34>)
 80157fe:	4a0c      	ldr	r2, [pc, #48]	; (8015830 <global_stdio_init.part.0+0x38>)
 8015800:	601a      	str	r2, [r3, #0]
 8015802:	4620      	mov	r0, r4
 8015804:	2200      	movs	r2, #0
 8015806:	2104      	movs	r1, #4
 8015808:	f7ff ff94 	bl	8015734 <std>
 801580c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015810:	2201      	movs	r2, #1
 8015812:	2109      	movs	r1, #9
 8015814:	f7ff ff8e 	bl	8015734 <std>
 8015818:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801581c:	2202      	movs	r2, #2
 801581e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015822:	2112      	movs	r1, #18
 8015824:	f7ff bf86 	b.w	8015734 <std>
 8015828:	20001e9c 	.word	0x20001e9c
 801582c:	20001d64 	.word	0x20001d64
 8015830:	080157a1 	.word	0x080157a1

08015834 <__sfp_lock_acquire>:
 8015834:	4801      	ldr	r0, [pc, #4]	; (801583c <__sfp_lock_acquire+0x8>)
 8015836:	f000 bf7c 	b.w	8016732 <__retarget_lock_acquire_recursive>
 801583a:	bf00      	nop
 801583c:	20001ea1 	.word	0x20001ea1

08015840 <__sfp_lock_release>:
 8015840:	4801      	ldr	r0, [pc, #4]	; (8015848 <__sfp_lock_release+0x8>)
 8015842:	f000 bf77 	b.w	8016734 <__retarget_lock_release_recursive>
 8015846:	bf00      	nop
 8015848:	20001ea1 	.word	0x20001ea1

0801584c <__sinit>:
 801584c:	b510      	push	{r4, lr}
 801584e:	4604      	mov	r4, r0
 8015850:	f7ff fff0 	bl	8015834 <__sfp_lock_acquire>
 8015854:	6a23      	ldr	r3, [r4, #32]
 8015856:	b11b      	cbz	r3, 8015860 <__sinit+0x14>
 8015858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801585c:	f7ff bff0 	b.w	8015840 <__sfp_lock_release>
 8015860:	4b04      	ldr	r3, [pc, #16]	; (8015874 <__sinit+0x28>)
 8015862:	6223      	str	r3, [r4, #32]
 8015864:	4b04      	ldr	r3, [pc, #16]	; (8015878 <__sinit+0x2c>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d1f5      	bne.n	8015858 <__sinit+0xc>
 801586c:	f7ff ffc4 	bl	80157f8 <global_stdio_init.part.0>
 8015870:	e7f2      	b.n	8015858 <__sinit+0xc>
 8015872:	bf00      	nop
 8015874:	080157b9 	.word	0x080157b9
 8015878:	20001e9c 	.word	0x20001e9c

0801587c <sulp>:
 801587c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015880:	460f      	mov	r7, r1
 8015882:	4690      	mov	r8, r2
 8015884:	f003 f8c2 	bl	8018a0c <__ulp>
 8015888:	4604      	mov	r4, r0
 801588a:	460d      	mov	r5, r1
 801588c:	f1b8 0f00 	cmp.w	r8, #0
 8015890:	d011      	beq.n	80158b6 <sulp+0x3a>
 8015892:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8015896:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801589a:	2b00      	cmp	r3, #0
 801589c:	dd0b      	ble.n	80158b6 <sulp+0x3a>
 801589e:	051b      	lsls	r3, r3, #20
 80158a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80158a4:	2400      	movs	r4, #0
 80158a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80158aa:	4622      	mov	r2, r4
 80158ac:	462b      	mov	r3, r5
 80158ae:	f7ea fe7b 	bl	80005a8 <__aeabi_dmul>
 80158b2:	4604      	mov	r4, r0
 80158b4:	460d      	mov	r5, r1
 80158b6:	4620      	mov	r0, r4
 80158b8:	4629      	mov	r1, r5
 80158ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080158c0 <_strtod_l>:
 80158c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c4:	b09f      	sub	sp, #124	; 0x7c
 80158c6:	4604      	mov	r4, r0
 80158c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80158ca:	2200      	movs	r2, #0
 80158cc:	921a      	str	r2, [sp, #104]	; 0x68
 80158ce:	460d      	mov	r5, r1
 80158d0:	f04f 0800 	mov.w	r8, #0
 80158d4:	f04f 0900 	mov.w	r9, #0
 80158d8:	460a      	mov	r2, r1
 80158da:	9219      	str	r2, [sp, #100]	; 0x64
 80158dc:	7811      	ldrb	r1, [r2, #0]
 80158de:	292b      	cmp	r1, #43	; 0x2b
 80158e0:	d04a      	beq.n	8015978 <_strtod_l+0xb8>
 80158e2:	d838      	bhi.n	8015956 <_strtod_l+0x96>
 80158e4:	290d      	cmp	r1, #13
 80158e6:	d832      	bhi.n	801594e <_strtod_l+0x8e>
 80158e8:	2908      	cmp	r1, #8
 80158ea:	d832      	bhi.n	8015952 <_strtod_l+0x92>
 80158ec:	2900      	cmp	r1, #0
 80158ee:	d03b      	beq.n	8015968 <_strtod_l+0xa8>
 80158f0:	2200      	movs	r2, #0
 80158f2:	920e      	str	r2, [sp, #56]	; 0x38
 80158f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80158f6:	7832      	ldrb	r2, [r6, #0]
 80158f8:	2a30      	cmp	r2, #48	; 0x30
 80158fa:	f040 80b2 	bne.w	8015a62 <_strtod_l+0x1a2>
 80158fe:	7872      	ldrb	r2, [r6, #1]
 8015900:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015904:	2a58      	cmp	r2, #88	; 0x58
 8015906:	d16e      	bne.n	80159e6 <_strtod_l+0x126>
 8015908:	9302      	str	r3, [sp, #8]
 801590a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801590c:	9301      	str	r3, [sp, #4]
 801590e:	ab1a      	add	r3, sp, #104	; 0x68
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	4a8d      	ldr	r2, [pc, #564]	; (8015b48 <_strtod_l+0x288>)
 8015914:	ab1b      	add	r3, sp, #108	; 0x6c
 8015916:	a919      	add	r1, sp, #100	; 0x64
 8015918:	4620      	mov	r0, r4
 801591a:	f001 fe11 	bl	8017540 <__gethex>
 801591e:	f010 070f 	ands.w	r7, r0, #15
 8015922:	4605      	mov	r5, r0
 8015924:	d005      	beq.n	8015932 <_strtod_l+0x72>
 8015926:	2f06      	cmp	r7, #6
 8015928:	d128      	bne.n	801597c <_strtod_l+0xbc>
 801592a:	3601      	adds	r6, #1
 801592c:	2300      	movs	r3, #0
 801592e:	9619      	str	r6, [sp, #100]	; 0x64
 8015930:	930e      	str	r3, [sp, #56]	; 0x38
 8015932:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015934:	2b00      	cmp	r3, #0
 8015936:	f040 859c 	bne.w	8016472 <_strtod_l+0xbb2>
 801593a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801593c:	b1cb      	cbz	r3, 8015972 <_strtod_l+0xb2>
 801593e:	4642      	mov	r2, r8
 8015940:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015944:	4610      	mov	r0, r2
 8015946:	4619      	mov	r1, r3
 8015948:	b01f      	add	sp, #124	; 0x7c
 801594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801594e:	2920      	cmp	r1, #32
 8015950:	d1ce      	bne.n	80158f0 <_strtod_l+0x30>
 8015952:	3201      	adds	r2, #1
 8015954:	e7c1      	b.n	80158da <_strtod_l+0x1a>
 8015956:	292d      	cmp	r1, #45	; 0x2d
 8015958:	d1ca      	bne.n	80158f0 <_strtod_l+0x30>
 801595a:	2101      	movs	r1, #1
 801595c:	910e      	str	r1, [sp, #56]	; 0x38
 801595e:	1c51      	adds	r1, r2, #1
 8015960:	9119      	str	r1, [sp, #100]	; 0x64
 8015962:	7852      	ldrb	r2, [r2, #1]
 8015964:	2a00      	cmp	r2, #0
 8015966:	d1c5      	bne.n	80158f4 <_strtod_l+0x34>
 8015968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801596a:	9519      	str	r5, [sp, #100]	; 0x64
 801596c:	2b00      	cmp	r3, #0
 801596e:	f040 857e 	bne.w	801646e <_strtod_l+0xbae>
 8015972:	4642      	mov	r2, r8
 8015974:	464b      	mov	r3, r9
 8015976:	e7e5      	b.n	8015944 <_strtod_l+0x84>
 8015978:	2100      	movs	r1, #0
 801597a:	e7ef      	b.n	801595c <_strtod_l+0x9c>
 801597c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801597e:	b13a      	cbz	r2, 8015990 <_strtod_l+0xd0>
 8015980:	2135      	movs	r1, #53	; 0x35
 8015982:	a81c      	add	r0, sp, #112	; 0x70
 8015984:	f003 f92e 	bl	8018be4 <__copybits>
 8015988:	991a      	ldr	r1, [sp, #104]	; 0x68
 801598a:	4620      	mov	r0, r4
 801598c:	f002 fd14 	bl	80183b8 <_Bfree>
 8015990:	3f01      	subs	r7, #1
 8015992:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015994:	2f04      	cmp	r7, #4
 8015996:	d806      	bhi.n	80159a6 <_strtod_l+0xe6>
 8015998:	e8df f007 	tbb	[pc, r7]
 801599c:	201d0314 	.word	0x201d0314
 80159a0:	14          	.byte	0x14
 80159a1:	00          	.byte	0x00
 80159a2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80159a6:	05e9      	lsls	r1, r5, #23
 80159a8:	bf48      	it	mi
 80159aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80159ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159b2:	0d1b      	lsrs	r3, r3, #20
 80159b4:	051b      	lsls	r3, r3, #20
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d1bb      	bne.n	8015932 <_strtod_l+0x72>
 80159ba:	f000 fe8f 	bl	80166dc <__errno>
 80159be:	2322      	movs	r3, #34	; 0x22
 80159c0:	6003      	str	r3, [r0, #0]
 80159c2:	e7b6      	b.n	8015932 <_strtod_l+0x72>
 80159c4:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80159c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80159cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80159d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80159d4:	e7e7      	b.n	80159a6 <_strtod_l+0xe6>
 80159d6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8015b4c <_strtod_l+0x28c>
 80159da:	e7e4      	b.n	80159a6 <_strtod_l+0xe6>
 80159dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80159e0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80159e4:	e7df      	b.n	80159a6 <_strtod_l+0xe6>
 80159e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159e8:	1c5a      	adds	r2, r3, #1
 80159ea:	9219      	str	r2, [sp, #100]	; 0x64
 80159ec:	785b      	ldrb	r3, [r3, #1]
 80159ee:	2b30      	cmp	r3, #48	; 0x30
 80159f0:	d0f9      	beq.n	80159e6 <_strtod_l+0x126>
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d09d      	beq.n	8015932 <_strtod_l+0x72>
 80159f6:	2301      	movs	r3, #1
 80159f8:	f04f 0a00 	mov.w	sl, #0
 80159fc:	9305      	str	r3, [sp, #20]
 80159fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a02:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8015a06:	46d3      	mov	fp, sl
 8015a08:	220a      	movs	r2, #10
 8015a0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015a0c:	7806      	ldrb	r6, [r0, #0]
 8015a0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015a12:	b2d9      	uxtb	r1, r3
 8015a14:	2909      	cmp	r1, #9
 8015a16:	d926      	bls.n	8015a66 <_strtod_l+0x1a6>
 8015a18:	494d      	ldr	r1, [pc, #308]	; (8015b50 <_strtod_l+0x290>)
 8015a1a:	2201      	movs	r2, #1
 8015a1c:	f000 fe40 	bl	80166a0 <strncmp>
 8015a20:	2800      	cmp	r0, #0
 8015a22:	d030      	beq.n	8015a86 <_strtod_l+0x1c6>
 8015a24:	2000      	movs	r0, #0
 8015a26:	4632      	mov	r2, r6
 8015a28:	9008      	str	r0, [sp, #32]
 8015a2a:	465e      	mov	r6, fp
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	2a65      	cmp	r2, #101	; 0x65
 8015a30:	d001      	beq.n	8015a36 <_strtod_l+0x176>
 8015a32:	2a45      	cmp	r2, #69	; 0x45
 8015a34:	d113      	bne.n	8015a5e <_strtod_l+0x19e>
 8015a36:	b91e      	cbnz	r6, 8015a40 <_strtod_l+0x180>
 8015a38:	9a05      	ldr	r2, [sp, #20]
 8015a3a:	4302      	orrs	r2, r0
 8015a3c:	d094      	beq.n	8015968 <_strtod_l+0xa8>
 8015a3e:	2600      	movs	r6, #0
 8015a40:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8015a42:	1c6a      	adds	r2, r5, #1
 8015a44:	9219      	str	r2, [sp, #100]	; 0x64
 8015a46:	786a      	ldrb	r2, [r5, #1]
 8015a48:	2a2b      	cmp	r2, #43	; 0x2b
 8015a4a:	d074      	beq.n	8015b36 <_strtod_l+0x276>
 8015a4c:	2a2d      	cmp	r2, #45	; 0x2d
 8015a4e:	d078      	beq.n	8015b42 <_strtod_l+0x282>
 8015a50:	f04f 0c00 	mov.w	ip, #0
 8015a54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015a58:	2909      	cmp	r1, #9
 8015a5a:	d97f      	bls.n	8015b5c <_strtod_l+0x29c>
 8015a5c:	9519      	str	r5, [sp, #100]	; 0x64
 8015a5e:	2700      	movs	r7, #0
 8015a60:	e09e      	b.n	8015ba0 <_strtod_l+0x2e0>
 8015a62:	2300      	movs	r3, #0
 8015a64:	e7c8      	b.n	80159f8 <_strtod_l+0x138>
 8015a66:	f1bb 0f08 	cmp.w	fp, #8
 8015a6a:	bfd8      	it	le
 8015a6c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8015a6e:	f100 0001 	add.w	r0, r0, #1
 8015a72:	bfda      	itte	le
 8015a74:	fb02 3301 	mlale	r3, r2, r1, r3
 8015a78:	930a      	strle	r3, [sp, #40]	; 0x28
 8015a7a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8015a7e:	f10b 0b01 	add.w	fp, fp, #1
 8015a82:	9019      	str	r0, [sp, #100]	; 0x64
 8015a84:	e7c1      	b.n	8015a0a <_strtod_l+0x14a>
 8015a86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a88:	1c5a      	adds	r2, r3, #1
 8015a8a:	9219      	str	r2, [sp, #100]	; 0x64
 8015a8c:	785a      	ldrb	r2, [r3, #1]
 8015a8e:	f1bb 0f00 	cmp.w	fp, #0
 8015a92:	d037      	beq.n	8015b04 <_strtod_l+0x244>
 8015a94:	9008      	str	r0, [sp, #32]
 8015a96:	465e      	mov	r6, fp
 8015a98:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015a9c:	2b09      	cmp	r3, #9
 8015a9e:	d912      	bls.n	8015ac6 <_strtod_l+0x206>
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	e7c4      	b.n	8015a2e <_strtod_l+0x16e>
 8015aa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015aa6:	1c5a      	adds	r2, r3, #1
 8015aa8:	9219      	str	r2, [sp, #100]	; 0x64
 8015aaa:	785a      	ldrb	r2, [r3, #1]
 8015aac:	3001      	adds	r0, #1
 8015aae:	2a30      	cmp	r2, #48	; 0x30
 8015ab0:	d0f8      	beq.n	8015aa4 <_strtod_l+0x1e4>
 8015ab2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015ab6:	2b08      	cmp	r3, #8
 8015ab8:	f200 84e0 	bhi.w	801647c <_strtod_l+0xbbc>
 8015abc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015abe:	9008      	str	r0, [sp, #32]
 8015ac0:	2000      	movs	r0, #0
 8015ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ac4:	4606      	mov	r6, r0
 8015ac6:	3a30      	subs	r2, #48	; 0x30
 8015ac8:	f100 0301 	add.w	r3, r0, #1
 8015acc:	d014      	beq.n	8015af8 <_strtod_l+0x238>
 8015ace:	9908      	ldr	r1, [sp, #32]
 8015ad0:	4419      	add	r1, r3
 8015ad2:	9108      	str	r1, [sp, #32]
 8015ad4:	4633      	mov	r3, r6
 8015ad6:	eb00 0c06 	add.w	ip, r0, r6
 8015ada:	210a      	movs	r1, #10
 8015adc:	4563      	cmp	r3, ip
 8015ade:	d113      	bne.n	8015b08 <_strtod_l+0x248>
 8015ae0:	1833      	adds	r3, r6, r0
 8015ae2:	2b08      	cmp	r3, #8
 8015ae4:	f106 0601 	add.w	r6, r6, #1
 8015ae8:	4406      	add	r6, r0
 8015aea:	dc1a      	bgt.n	8015b22 <_strtod_l+0x262>
 8015aec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015aee:	230a      	movs	r3, #10
 8015af0:	fb03 2301 	mla	r3, r3, r1, r2
 8015af4:	930a      	str	r3, [sp, #40]	; 0x28
 8015af6:	2300      	movs	r3, #0
 8015af8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015afa:	1c51      	adds	r1, r2, #1
 8015afc:	9119      	str	r1, [sp, #100]	; 0x64
 8015afe:	7852      	ldrb	r2, [r2, #1]
 8015b00:	4618      	mov	r0, r3
 8015b02:	e7c9      	b.n	8015a98 <_strtod_l+0x1d8>
 8015b04:	4658      	mov	r0, fp
 8015b06:	e7d2      	b.n	8015aae <_strtod_l+0x1ee>
 8015b08:	2b08      	cmp	r3, #8
 8015b0a:	f103 0301 	add.w	r3, r3, #1
 8015b0e:	dc03      	bgt.n	8015b18 <_strtod_l+0x258>
 8015b10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015b12:	434f      	muls	r7, r1
 8015b14:	970a      	str	r7, [sp, #40]	; 0x28
 8015b16:	e7e1      	b.n	8015adc <_strtod_l+0x21c>
 8015b18:	2b10      	cmp	r3, #16
 8015b1a:	bfd8      	it	le
 8015b1c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015b20:	e7dc      	b.n	8015adc <_strtod_l+0x21c>
 8015b22:	2e10      	cmp	r6, #16
 8015b24:	bfdc      	itt	le
 8015b26:	230a      	movle	r3, #10
 8015b28:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8015b2c:	e7e3      	b.n	8015af6 <_strtod_l+0x236>
 8015b2e:	2300      	movs	r3, #0
 8015b30:	9308      	str	r3, [sp, #32]
 8015b32:	2301      	movs	r3, #1
 8015b34:	e780      	b.n	8015a38 <_strtod_l+0x178>
 8015b36:	f04f 0c00 	mov.w	ip, #0
 8015b3a:	1caa      	adds	r2, r5, #2
 8015b3c:	9219      	str	r2, [sp, #100]	; 0x64
 8015b3e:	78aa      	ldrb	r2, [r5, #2]
 8015b40:	e788      	b.n	8015a54 <_strtod_l+0x194>
 8015b42:	f04f 0c01 	mov.w	ip, #1
 8015b46:	e7f8      	b.n	8015b3a <_strtod_l+0x27a>
 8015b48:	0801a40c 	.word	0x0801a40c
 8015b4c:	7ff00000 	.word	0x7ff00000
 8015b50:	0801a408 	.word	0x0801a408
 8015b54:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015b56:	1c51      	adds	r1, r2, #1
 8015b58:	9119      	str	r1, [sp, #100]	; 0x64
 8015b5a:	7852      	ldrb	r2, [r2, #1]
 8015b5c:	2a30      	cmp	r2, #48	; 0x30
 8015b5e:	d0f9      	beq.n	8015b54 <_strtod_l+0x294>
 8015b60:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015b64:	2908      	cmp	r1, #8
 8015b66:	f63f af7a 	bhi.w	8015a5e <_strtod_l+0x19e>
 8015b6a:	3a30      	subs	r2, #48	; 0x30
 8015b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8015b6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015b70:	920c      	str	r2, [sp, #48]	; 0x30
 8015b72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015b74:	1c57      	adds	r7, r2, #1
 8015b76:	9719      	str	r7, [sp, #100]	; 0x64
 8015b78:	7852      	ldrb	r2, [r2, #1]
 8015b7a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015b7e:	f1be 0f09 	cmp.w	lr, #9
 8015b82:	d938      	bls.n	8015bf6 <_strtod_l+0x336>
 8015b84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b86:	1a7f      	subs	r7, r7, r1
 8015b88:	2f08      	cmp	r7, #8
 8015b8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015b8e:	dc03      	bgt.n	8015b98 <_strtod_l+0x2d8>
 8015b90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b92:	428f      	cmp	r7, r1
 8015b94:	bfa8      	it	ge
 8015b96:	460f      	movge	r7, r1
 8015b98:	f1bc 0f00 	cmp.w	ip, #0
 8015b9c:	d000      	beq.n	8015ba0 <_strtod_l+0x2e0>
 8015b9e:	427f      	negs	r7, r7
 8015ba0:	2e00      	cmp	r6, #0
 8015ba2:	d14f      	bne.n	8015c44 <_strtod_l+0x384>
 8015ba4:	9905      	ldr	r1, [sp, #20]
 8015ba6:	4301      	orrs	r1, r0
 8015ba8:	f47f aec3 	bne.w	8015932 <_strtod_l+0x72>
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	f47f aedb 	bne.w	8015968 <_strtod_l+0xa8>
 8015bb2:	2a69      	cmp	r2, #105	; 0x69
 8015bb4:	d029      	beq.n	8015c0a <_strtod_l+0x34a>
 8015bb6:	dc26      	bgt.n	8015c06 <_strtod_l+0x346>
 8015bb8:	2a49      	cmp	r2, #73	; 0x49
 8015bba:	d026      	beq.n	8015c0a <_strtod_l+0x34a>
 8015bbc:	2a4e      	cmp	r2, #78	; 0x4e
 8015bbe:	f47f aed3 	bne.w	8015968 <_strtod_l+0xa8>
 8015bc2:	499a      	ldr	r1, [pc, #616]	; (8015e2c <_strtod_l+0x56c>)
 8015bc4:	a819      	add	r0, sp, #100	; 0x64
 8015bc6:	f001 fefd 	bl	80179c4 <__match>
 8015bca:	2800      	cmp	r0, #0
 8015bcc:	f43f aecc 	beq.w	8015968 <_strtod_l+0xa8>
 8015bd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	2b28      	cmp	r3, #40	; 0x28
 8015bd6:	d12f      	bne.n	8015c38 <_strtod_l+0x378>
 8015bd8:	4995      	ldr	r1, [pc, #596]	; (8015e30 <_strtod_l+0x570>)
 8015bda:	aa1c      	add	r2, sp, #112	; 0x70
 8015bdc:	a819      	add	r0, sp, #100	; 0x64
 8015bde:	f001 ff05 	bl	80179ec <__hexnan>
 8015be2:	2805      	cmp	r0, #5
 8015be4:	d128      	bne.n	8015c38 <_strtod_l+0x378>
 8015be6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015be8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8015bec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015bf0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015bf4:	e69d      	b.n	8015932 <_strtod_l+0x72>
 8015bf6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015bf8:	210a      	movs	r1, #10
 8015bfa:	fb01 2107 	mla	r1, r1, r7, r2
 8015bfe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015c02:	9209      	str	r2, [sp, #36]	; 0x24
 8015c04:	e7b5      	b.n	8015b72 <_strtod_l+0x2b2>
 8015c06:	2a6e      	cmp	r2, #110	; 0x6e
 8015c08:	e7d9      	b.n	8015bbe <_strtod_l+0x2fe>
 8015c0a:	498a      	ldr	r1, [pc, #552]	; (8015e34 <_strtod_l+0x574>)
 8015c0c:	a819      	add	r0, sp, #100	; 0x64
 8015c0e:	f001 fed9 	bl	80179c4 <__match>
 8015c12:	2800      	cmp	r0, #0
 8015c14:	f43f aea8 	beq.w	8015968 <_strtod_l+0xa8>
 8015c18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c1a:	4987      	ldr	r1, [pc, #540]	; (8015e38 <_strtod_l+0x578>)
 8015c1c:	3b01      	subs	r3, #1
 8015c1e:	a819      	add	r0, sp, #100	; 0x64
 8015c20:	9319      	str	r3, [sp, #100]	; 0x64
 8015c22:	f001 fecf 	bl	80179c4 <__match>
 8015c26:	b910      	cbnz	r0, 8015c2e <_strtod_l+0x36e>
 8015c28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	9319      	str	r3, [sp, #100]	; 0x64
 8015c2e:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8015e3c <_strtod_l+0x57c>
 8015c32:	f04f 0800 	mov.w	r8, #0
 8015c36:	e67c      	b.n	8015932 <_strtod_l+0x72>
 8015c38:	4881      	ldr	r0, [pc, #516]	; (8015e40 <_strtod_l+0x580>)
 8015c3a:	f000 fd8b 	bl	8016754 <nan>
 8015c3e:	4680      	mov	r8, r0
 8015c40:	4689      	mov	r9, r1
 8015c42:	e676      	b.n	8015932 <_strtod_l+0x72>
 8015c44:	9b08      	ldr	r3, [sp, #32]
 8015c46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c48:	1afb      	subs	r3, r7, r3
 8015c4a:	f1bb 0f00 	cmp.w	fp, #0
 8015c4e:	bf08      	it	eq
 8015c50:	46b3      	moveq	fp, r6
 8015c52:	2e10      	cmp	r6, #16
 8015c54:	9309      	str	r3, [sp, #36]	; 0x24
 8015c56:	4635      	mov	r5, r6
 8015c58:	bfa8      	it	ge
 8015c5a:	2510      	movge	r5, #16
 8015c5c:	f7ea fc2a 	bl	80004b4 <__aeabi_ui2d>
 8015c60:	2e09      	cmp	r6, #9
 8015c62:	4680      	mov	r8, r0
 8015c64:	4689      	mov	r9, r1
 8015c66:	dd13      	ble.n	8015c90 <_strtod_l+0x3d0>
 8015c68:	4b76      	ldr	r3, [pc, #472]	; (8015e44 <_strtod_l+0x584>)
 8015c6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015c6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015c72:	f7ea fc99 	bl	80005a8 <__aeabi_dmul>
 8015c76:	4680      	mov	r8, r0
 8015c78:	4650      	mov	r0, sl
 8015c7a:	4689      	mov	r9, r1
 8015c7c:	f7ea fc1a 	bl	80004b4 <__aeabi_ui2d>
 8015c80:	4602      	mov	r2, r0
 8015c82:	460b      	mov	r3, r1
 8015c84:	4640      	mov	r0, r8
 8015c86:	4649      	mov	r1, r9
 8015c88:	f7ea fad8 	bl	800023c <__adddf3>
 8015c8c:	4680      	mov	r8, r0
 8015c8e:	4689      	mov	r9, r1
 8015c90:	2e0f      	cmp	r6, #15
 8015c92:	dc36      	bgt.n	8015d02 <_strtod_l+0x442>
 8015c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	f43f ae4b 	beq.w	8015932 <_strtod_l+0x72>
 8015c9c:	dd22      	ble.n	8015ce4 <_strtod_l+0x424>
 8015c9e:	2b16      	cmp	r3, #22
 8015ca0:	dc09      	bgt.n	8015cb6 <_strtod_l+0x3f6>
 8015ca2:	4968      	ldr	r1, [pc, #416]	; (8015e44 <_strtod_l+0x584>)
 8015ca4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015cac:	4642      	mov	r2, r8
 8015cae:	464b      	mov	r3, r9
 8015cb0:	f7ea fc7a 	bl	80005a8 <__aeabi_dmul>
 8015cb4:	e7c3      	b.n	8015c3e <_strtod_l+0x37e>
 8015cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015cb8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015cbc:	4293      	cmp	r3, r2
 8015cbe:	db20      	blt.n	8015d02 <_strtod_l+0x442>
 8015cc0:	4c60      	ldr	r4, [pc, #384]	; (8015e44 <_strtod_l+0x584>)
 8015cc2:	f1c6 060f 	rsb	r6, r6, #15
 8015cc6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8015cca:	4642      	mov	r2, r8
 8015ccc:	464b      	mov	r3, r9
 8015cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015cd2:	f7ea fc69 	bl	80005a8 <__aeabi_dmul>
 8015cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cd8:	1b9e      	subs	r6, r3, r6
 8015cda:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015cde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015ce2:	e7e5      	b.n	8015cb0 <_strtod_l+0x3f0>
 8015ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ce6:	3316      	adds	r3, #22
 8015ce8:	db0b      	blt.n	8015d02 <_strtod_l+0x442>
 8015cea:	9b08      	ldr	r3, [sp, #32]
 8015cec:	1bdf      	subs	r7, r3, r7
 8015cee:	4b55      	ldr	r3, [pc, #340]	; (8015e44 <_strtod_l+0x584>)
 8015cf0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015cf8:	4640      	mov	r0, r8
 8015cfa:	4649      	mov	r1, r9
 8015cfc:	f7ea fd7e 	bl	80007fc <__aeabi_ddiv>
 8015d00:	e79d      	b.n	8015c3e <_strtod_l+0x37e>
 8015d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d04:	1b75      	subs	r5, r6, r5
 8015d06:	441d      	add	r5, r3
 8015d08:	2d00      	cmp	r5, #0
 8015d0a:	dd70      	ble.n	8015dee <_strtod_l+0x52e>
 8015d0c:	f015 030f 	ands.w	r3, r5, #15
 8015d10:	d00a      	beq.n	8015d28 <_strtod_l+0x468>
 8015d12:	494c      	ldr	r1, [pc, #304]	; (8015e44 <_strtod_l+0x584>)
 8015d14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015d18:	4642      	mov	r2, r8
 8015d1a:	464b      	mov	r3, r9
 8015d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d20:	f7ea fc42 	bl	80005a8 <__aeabi_dmul>
 8015d24:	4680      	mov	r8, r0
 8015d26:	4689      	mov	r9, r1
 8015d28:	f035 050f 	bics.w	r5, r5, #15
 8015d2c:	d04d      	beq.n	8015dca <_strtod_l+0x50a>
 8015d2e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015d32:	dd22      	ble.n	8015d7a <_strtod_l+0x4ba>
 8015d34:	2600      	movs	r6, #0
 8015d36:	46b3      	mov	fp, r6
 8015d38:	960b      	str	r6, [sp, #44]	; 0x2c
 8015d3a:	9608      	str	r6, [sp, #32]
 8015d3c:	2322      	movs	r3, #34	; 0x22
 8015d3e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8015e3c <_strtod_l+0x57c>
 8015d42:	6023      	str	r3, [r4, #0]
 8015d44:	f04f 0800 	mov.w	r8, #0
 8015d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	f43f adf1 	beq.w	8015932 <_strtod_l+0x72>
 8015d50:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015d52:	4620      	mov	r0, r4
 8015d54:	f002 fb30 	bl	80183b8 <_Bfree>
 8015d58:	9908      	ldr	r1, [sp, #32]
 8015d5a:	4620      	mov	r0, r4
 8015d5c:	f002 fb2c 	bl	80183b8 <_Bfree>
 8015d60:	4659      	mov	r1, fp
 8015d62:	4620      	mov	r0, r4
 8015d64:	f002 fb28 	bl	80183b8 <_Bfree>
 8015d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	f002 fb24 	bl	80183b8 <_Bfree>
 8015d70:	4631      	mov	r1, r6
 8015d72:	4620      	mov	r0, r4
 8015d74:	f002 fb20 	bl	80183b8 <_Bfree>
 8015d78:	e5db      	b.n	8015932 <_strtod_l+0x72>
 8015d7a:	4b33      	ldr	r3, [pc, #204]	; (8015e48 <_strtod_l+0x588>)
 8015d7c:	9305      	str	r3, [sp, #20]
 8015d7e:	2300      	movs	r3, #0
 8015d80:	112d      	asrs	r5, r5, #4
 8015d82:	4640      	mov	r0, r8
 8015d84:	4649      	mov	r1, r9
 8015d86:	469a      	mov	sl, r3
 8015d88:	2d01      	cmp	r5, #1
 8015d8a:	dc21      	bgt.n	8015dd0 <_strtod_l+0x510>
 8015d8c:	b10b      	cbz	r3, 8015d92 <_strtod_l+0x4d2>
 8015d8e:	4680      	mov	r8, r0
 8015d90:	4689      	mov	r9, r1
 8015d92:	492d      	ldr	r1, [pc, #180]	; (8015e48 <_strtod_l+0x588>)
 8015d94:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8015d98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015d9c:	4642      	mov	r2, r8
 8015d9e:	464b      	mov	r3, r9
 8015da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015da4:	f7ea fc00 	bl	80005a8 <__aeabi_dmul>
 8015da8:	4b24      	ldr	r3, [pc, #144]	; (8015e3c <_strtod_l+0x57c>)
 8015daa:	460a      	mov	r2, r1
 8015dac:	400b      	ands	r3, r1
 8015dae:	4927      	ldr	r1, [pc, #156]	; (8015e4c <_strtod_l+0x58c>)
 8015db0:	428b      	cmp	r3, r1
 8015db2:	4680      	mov	r8, r0
 8015db4:	d8be      	bhi.n	8015d34 <_strtod_l+0x474>
 8015db6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015dba:	428b      	cmp	r3, r1
 8015dbc:	bf86      	itte	hi
 8015dbe:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015e50 <_strtod_l+0x590>
 8015dc2:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8015dc6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8015dca:	2300      	movs	r3, #0
 8015dcc:	9305      	str	r3, [sp, #20]
 8015dce:	e07b      	b.n	8015ec8 <_strtod_l+0x608>
 8015dd0:	07ea      	lsls	r2, r5, #31
 8015dd2:	d505      	bpl.n	8015de0 <_strtod_l+0x520>
 8015dd4:	9b05      	ldr	r3, [sp, #20]
 8015dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dda:	f7ea fbe5 	bl	80005a8 <__aeabi_dmul>
 8015dde:	2301      	movs	r3, #1
 8015de0:	9a05      	ldr	r2, [sp, #20]
 8015de2:	3208      	adds	r2, #8
 8015de4:	f10a 0a01 	add.w	sl, sl, #1
 8015de8:	106d      	asrs	r5, r5, #1
 8015dea:	9205      	str	r2, [sp, #20]
 8015dec:	e7cc      	b.n	8015d88 <_strtod_l+0x4c8>
 8015dee:	d0ec      	beq.n	8015dca <_strtod_l+0x50a>
 8015df0:	426d      	negs	r5, r5
 8015df2:	f015 020f 	ands.w	r2, r5, #15
 8015df6:	d00a      	beq.n	8015e0e <_strtod_l+0x54e>
 8015df8:	4b12      	ldr	r3, [pc, #72]	; (8015e44 <_strtod_l+0x584>)
 8015dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015dfe:	4640      	mov	r0, r8
 8015e00:	4649      	mov	r1, r9
 8015e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e06:	f7ea fcf9 	bl	80007fc <__aeabi_ddiv>
 8015e0a:	4680      	mov	r8, r0
 8015e0c:	4689      	mov	r9, r1
 8015e0e:	112d      	asrs	r5, r5, #4
 8015e10:	d0db      	beq.n	8015dca <_strtod_l+0x50a>
 8015e12:	2d1f      	cmp	r5, #31
 8015e14:	dd1e      	ble.n	8015e54 <_strtod_l+0x594>
 8015e16:	2600      	movs	r6, #0
 8015e18:	46b3      	mov	fp, r6
 8015e1a:	960b      	str	r6, [sp, #44]	; 0x2c
 8015e1c:	9608      	str	r6, [sp, #32]
 8015e1e:	2322      	movs	r3, #34	; 0x22
 8015e20:	f04f 0800 	mov.w	r8, #0
 8015e24:	f04f 0900 	mov.w	r9, #0
 8015e28:	6023      	str	r3, [r4, #0]
 8015e2a:	e78d      	b.n	8015d48 <_strtod_l+0x488>
 8015e2c:	0801a3dc 	.word	0x0801a3dc
 8015e30:	0801a420 	.word	0x0801a420
 8015e34:	0801a3d4 	.word	0x0801a3d4
 8015e38:	0801a5a8 	.word	0x0801a5a8
 8015e3c:	7ff00000 	.word	0x7ff00000
 8015e40:	0801a5a4 	.word	0x0801a5a4
 8015e44:	0801a728 	.word	0x0801a728
 8015e48:	0801a700 	.word	0x0801a700
 8015e4c:	7ca00000 	.word	0x7ca00000
 8015e50:	7fefffff 	.word	0x7fefffff
 8015e54:	f015 0310 	ands.w	r3, r5, #16
 8015e58:	bf18      	it	ne
 8015e5a:	236a      	movne	r3, #106	; 0x6a
 8015e5c:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 801612c <_strtod_l+0x86c>
 8015e60:	9305      	str	r3, [sp, #20]
 8015e62:	4640      	mov	r0, r8
 8015e64:	4649      	mov	r1, r9
 8015e66:	2300      	movs	r3, #0
 8015e68:	07ea      	lsls	r2, r5, #31
 8015e6a:	d504      	bpl.n	8015e76 <_strtod_l+0x5b6>
 8015e6c:	e9da 2300 	ldrd	r2, r3, [sl]
 8015e70:	f7ea fb9a 	bl	80005a8 <__aeabi_dmul>
 8015e74:	2301      	movs	r3, #1
 8015e76:	106d      	asrs	r5, r5, #1
 8015e78:	f10a 0a08 	add.w	sl, sl, #8
 8015e7c:	d1f4      	bne.n	8015e68 <_strtod_l+0x5a8>
 8015e7e:	b10b      	cbz	r3, 8015e84 <_strtod_l+0x5c4>
 8015e80:	4680      	mov	r8, r0
 8015e82:	4689      	mov	r9, r1
 8015e84:	9b05      	ldr	r3, [sp, #20]
 8015e86:	b1bb      	cbz	r3, 8015eb8 <_strtod_l+0x5f8>
 8015e88:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015e8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	4649      	mov	r1, r9
 8015e94:	dd10      	ble.n	8015eb8 <_strtod_l+0x5f8>
 8015e96:	2b1f      	cmp	r3, #31
 8015e98:	f340 8125 	ble.w	80160e6 <_strtod_l+0x826>
 8015e9c:	2b34      	cmp	r3, #52	; 0x34
 8015e9e:	bfde      	ittt	le
 8015ea0:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8015ea4:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015ea8:	4093      	lslle	r3, r2
 8015eaa:	f04f 0800 	mov.w	r8, #0
 8015eae:	bfcc      	ite	gt
 8015eb0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015eb4:	ea03 0901 	andle.w	r9, r3, r1
 8015eb8:	2200      	movs	r2, #0
 8015eba:	2300      	movs	r3, #0
 8015ebc:	4640      	mov	r0, r8
 8015ebe:	4649      	mov	r1, r9
 8015ec0:	f7ea fdda 	bl	8000a78 <__aeabi_dcmpeq>
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	d1a6      	bne.n	8015e16 <_strtod_l+0x556>
 8015ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eca:	9300      	str	r3, [sp, #0]
 8015ecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ece:	4633      	mov	r3, r6
 8015ed0:	465a      	mov	r2, fp
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	f002 fad8 	bl	8018488 <__s2b>
 8015ed8:	900b      	str	r0, [sp, #44]	; 0x2c
 8015eda:	2800      	cmp	r0, #0
 8015edc:	f43f af2a 	beq.w	8015d34 <_strtod_l+0x474>
 8015ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ee2:	9b08      	ldr	r3, [sp, #32]
 8015ee4:	2a00      	cmp	r2, #0
 8015ee6:	eba3 0307 	sub.w	r3, r3, r7
 8015eea:	bfa8      	it	ge
 8015eec:	2300      	movge	r3, #0
 8015eee:	9312      	str	r3, [sp, #72]	; 0x48
 8015ef0:	2600      	movs	r6, #0
 8015ef2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015ef6:	9316      	str	r3, [sp, #88]	; 0x58
 8015ef8:	46b3      	mov	fp, r6
 8015efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015efc:	4620      	mov	r0, r4
 8015efe:	6859      	ldr	r1, [r3, #4]
 8015f00:	f002 fa1a 	bl	8018338 <_Balloc>
 8015f04:	9008      	str	r0, [sp, #32]
 8015f06:	2800      	cmp	r0, #0
 8015f08:	f43f af18 	beq.w	8015d3c <_strtod_l+0x47c>
 8015f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f0e:	691a      	ldr	r2, [r3, #16]
 8015f10:	3202      	adds	r2, #2
 8015f12:	f103 010c 	add.w	r1, r3, #12
 8015f16:	0092      	lsls	r2, r2, #2
 8015f18:	300c      	adds	r0, #12
 8015f1a:	f000 fc0c 	bl	8016736 <memcpy>
 8015f1e:	ab1c      	add	r3, sp, #112	; 0x70
 8015f20:	9301      	str	r3, [sp, #4]
 8015f22:	ab1b      	add	r3, sp, #108	; 0x6c
 8015f24:	9300      	str	r3, [sp, #0]
 8015f26:	4642      	mov	r2, r8
 8015f28:	464b      	mov	r3, r9
 8015f2a:	4620      	mov	r0, r4
 8015f2c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8015f30:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8015f34:	f002 fdd2 	bl	8018adc <__d2b>
 8015f38:	901a      	str	r0, [sp, #104]	; 0x68
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	f43f aefe 	beq.w	8015d3c <_strtod_l+0x47c>
 8015f40:	2101      	movs	r1, #1
 8015f42:	4620      	mov	r0, r4
 8015f44:	f002 fb38 	bl	80185b8 <__i2b>
 8015f48:	4683      	mov	fp, r0
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	f43f aef6 	beq.w	8015d3c <_strtod_l+0x47c>
 8015f50:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8015f52:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f54:	2f00      	cmp	r7, #0
 8015f56:	bfab      	itete	ge
 8015f58:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8015f5a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015f5c:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015f5e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8015f62:	bfac      	ite	ge
 8015f64:	eb07 0a03 	addge.w	sl, r7, r3
 8015f68:	1bdd      	sublt	r5, r3, r7
 8015f6a:	9b05      	ldr	r3, [sp, #20]
 8015f6c:	1aff      	subs	r7, r7, r3
 8015f6e:	4417      	add	r7, r2
 8015f70:	4b6f      	ldr	r3, [pc, #444]	; (8016130 <_strtod_l+0x870>)
 8015f72:	3f01      	subs	r7, #1
 8015f74:	429f      	cmp	r7, r3
 8015f76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015f7a:	f280 80c7 	bge.w	801610c <_strtod_l+0x84c>
 8015f7e:	1bdb      	subs	r3, r3, r7
 8015f80:	2b1f      	cmp	r3, #31
 8015f82:	eba2 0203 	sub.w	r2, r2, r3
 8015f86:	f04f 0101 	mov.w	r1, #1
 8015f8a:	f300 80b3 	bgt.w	80160f4 <_strtod_l+0x834>
 8015f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8015f92:	9313      	str	r3, [sp, #76]	; 0x4c
 8015f94:	2300      	movs	r3, #0
 8015f96:	9310      	str	r3, [sp, #64]	; 0x40
 8015f98:	eb0a 0702 	add.w	r7, sl, r2
 8015f9c:	9b05      	ldr	r3, [sp, #20]
 8015f9e:	45ba      	cmp	sl, r7
 8015fa0:	4415      	add	r5, r2
 8015fa2:	441d      	add	r5, r3
 8015fa4:	4653      	mov	r3, sl
 8015fa6:	bfa8      	it	ge
 8015fa8:	463b      	movge	r3, r7
 8015faa:	42ab      	cmp	r3, r5
 8015fac:	bfa8      	it	ge
 8015fae:	462b      	movge	r3, r5
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	bfc2      	ittt	gt
 8015fb4:	1aff      	subgt	r7, r7, r3
 8015fb6:	1aed      	subgt	r5, r5, r3
 8015fb8:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015fbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	dd17      	ble.n	8015ff2 <_strtod_l+0x732>
 8015fc2:	4659      	mov	r1, fp
 8015fc4:	461a      	mov	r2, r3
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	f002 fbb6 	bl	8018738 <__pow5mult>
 8015fcc:	4683      	mov	fp, r0
 8015fce:	2800      	cmp	r0, #0
 8015fd0:	f43f aeb4 	beq.w	8015d3c <_strtod_l+0x47c>
 8015fd4:	4601      	mov	r1, r0
 8015fd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015fd8:	4620      	mov	r0, r4
 8015fda:	f002 fb03 	bl	80185e4 <__multiply>
 8015fde:	900a      	str	r0, [sp, #40]	; 0x28
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	f43f aeab 	beq.w	8015d3c <_strtod_l+0x47c>
 8015fe6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f002 f9e5 	bl	80183b8 <_Bfree>
 8015fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8015ff2:	2f00      	cmp	r7, #0
 8015ff4:	f300 808f 	bgt.w	8016116 <_strtod_l+0x856>
 8015ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	dd08      	ble.n	8016010 <_strtod_l+0x750>
 8015ffe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016000:	9908      	ldr	r1, [sp, #32]
 8016002:	4620      	mov	r0, r4
 8016004:	f002 fb98 	bl	8018738 <__pow5mult>
 8016008:	9008      	str	r0, [sp, #32]
 801600a:	2800      	cmp	r0, #0
 801600c:	f43f ae96 	beq.w	8015d3c <_strtod_l+0x47c>
 8016010:	2d00      	cmp	r5, #0
 8016012:	dd08      	ble.n	8016026 <_strtod_l+0x766>
 8016014:	9908      	ldr	r1, [sp, #32]
 8016016:	462a      	mov	r2, r5
 8016018:	4620      	mov	r0, r4
 801601a:	f002 fbe7 	bl	80187ec <__lshift>
 801601e:	9008      	str	r0, [sp, #32]
 8016020:	2800      	cmp	r0, #0
 8016022:	f43f ae8b 	beq.w	8015d3c <_strtod_l+0x47c>
 8016026:	f1ba 0f00 	cmp.w	sl, #0
 801602a:	dd08      	ble.n	801603e <_strtod_l+0x77e>
 801602c:	4659      	mov	r1, fp
 801602e:	4652      	mov	r2, sl
 8016030:	4620      	mov	r0, r4
 8016032:	f002 fbdb 	bl	80187ec <__lshift>
 8016036:	4683      	mov	fp, r0
 8016038:	2800      	cmp	r0, #0
 801603a:	f43f ae7f 	beq.w	8015d3c <_strtod_l+0x47c>
 801603e:	9a08      	ldr	r2, [sp, #32]
 8016040:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016042:	4620      	mov	r0, r4
 8016044:	f002 fc5a 	bl	80188fc <__mdiff>
 8016048:	4606      	mov	r6, r0
 801604a:	2800      	cmp	r0, #0
 801604c:	f43f ae76 	beq.w	8015d3c <_strtod_l+0x47c>
 8016050:	2500      	movs	r5, #0
 8016052:	68c3      	ldr	r3, [r0, #12]
 8016054:	60c5      	str	r5, [r0, #12]
 8016056:	4659      	mov	r1, fp
 8016058:	930a      	str	r3, [sp, #40]	; 0x28
 801605a:	f002 fc33 	bl	80188c4 <__mcmp>
 801605e:	42a8      	cmp	r0, r5
 8016060:	da6c      	bge.n	801613c <_strtod_l+0x87c>
 8016062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016064:	ea53 0308 	orrs.w	r3, r3, r8
 8016068:	f040 8090 	bne.w	801618c <_strtod_l+0x8cc>
 801606c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016070:	2b00      	cmp	r3, #0
 8016072:	f040 808b 	bne.w	801618c <_strtod_l+0x8cc>
 8016076:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801607a:	0d1b      	lsrs	r3, r3, #20
 801607c:	051b      	lsls	r3, r3, #20
 801607e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016082:	f240 8083 	bls.w	801618c <_strtod_l+0x8cc>
 8016086:	6973      	ldr	r3, [r6, #20]
 8016088:	b913      	cbnz	r3, 8016090 <_strtod_l+0x7d0>
 801608a:	6933      	ldr	r3, [r6, #16]
 801608c:	2b01      	cmp	r3, #1
 801608e:	dd7d      	ble.n	801618c <_strtod_l+0x8cc>
 8016090:	4631      	mov	r1, r6
 8016092:	2201      	movs	r2, #1
 8016094:	4620      	mov	r0, r4
 8016096:	f002 fba9 	bl	80187ec <__lshift>
 801609a:	4659      	mov	r1, fp
 801609c:	4606      	mov	r6, r0
 801609e:	f002 fc11 	bl	80188c4 <__mcmp>
 80160a2:	2800      	cmp	r0, #0
 80160a4:	dd72      	ble.n	801618c <_strtod_l+0x8cc>
 80160a6:	9905      	ldr	r1, [sp, #20]
 80160a8:	4a22      	ldr	r2, [pc, #136]	; (8016134 <_strtod_l+0x874>)
 80160aa:	464b      	mov	r3, r9
 80160ac:	2900      	cmp	r1, #0
 80160ae:	f000 808e 	beq.w	80161ce <_strtod_l+0x90e>
 80160b2:	ea02 0109 	and.w	r1, r2, r9
 80160b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80160ba:	f300 8088 	bgt.w	80161ce <_strtod_l+0x90e>
 80160be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80160c2:	f77f aeac 	ble.w	8015e1e <_strtod_l+0x55e>
 80160c6:	4b1c      	ldr	r3, [pc, #112]	; (8016138 <_strtod_l+0x878>)
 80160c8:	4640      	mov	r0, r8
 80160ca:	4649      	mov	r1, r9
 80160cc:	2200      	movs	r2, #0
 80160ce:	f7ea fa6b 	bl	80005a8 <__aeabi_dmul>
 80160d2:	4b18      	ldr	r3, [pc, #96]	; (8016134 <_strtod_l+0x874>)
 80160d4:	400b      	ands	r3, r1
 80160d6:	4680      	mov	r8, r0
 80160d8:	4689      	mov	r9, r1
 80160da:	2b00      	cmp	r3, #0
 80160dc:	f47f ae38 	bne.w	8015d50 <_strtod_l+0x490>
 80160e0:	2322      	movs	r3, #34	; 0x22
 80160e2:	6023      	str	r3, [r4, #0]
 80160e4:	e634      	b.n	8015d50 <_strtod_l+0x490>
 80160e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80160ea:	fa02 f303 	lsl.w	r3, r2, r3
 80160ee:	ea03 0808 	and.w	r8, r3, r8
 80160f2:	e6e1      	b.n	8015eb8 <_strtod_l+0x5f8>
 80160f4:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80160f8:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80160fc:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8016100:	37e2      	adds	r7, #226	; 0xe2
 8016102:	fa01 f307 	lsl.w	r3, r1, r7
 8016106:	9310      	str	r3, [sp, #64]	; 0x40
 8016108:	9113      	str	r1, [sp, #76]	; 0x4c
 801610a:	e745      	b.n	8015f98 <_strtod_l+0x6d8>
 801610c:	2300      	movs	r3, #0
 801610e:	9310      	str	r3, [sp, #64]	; 0x40
 8016110:	2301      	movs	r3, #1
 8016112:	9313      	str	r3, [sp, #76]	; 0x4c
 8016114:	e740      	b.n	8015f98 <_strtod_l+0x6d8>
 8016116:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016118:	463a      	mov	r2, r7
 801611a:	4620      	mov	r0, r4
 801611c:	f002 fb66 	bl	80187ec <__lshift>
 8016120:	901a      	str	r0, [sp, #104]	; 0x68
 8016122:	2800      	cmp	r0, #0
 8016124:	f47f af68 	bne.w	8015ff8 <_strtod_l+0x738>
 8016128:	e608      	b.n	8015d3c <_strtod_l+0x47c>
 801612a:	bf00      	nop
 801612c:	0801a438 	.word	0x0801a438
 8016130:	fffffc02 	.word	0xfffffc02
 8016134:	7ff00000 	.word	0x7ff00000
 8016138:	39500000 	.word	0x39500000
 801613c:	46ca      	mov	sl, r9
 801613e:	d165      	bne.n	801620c <_strtod_l+0x94c>
 8016140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016142:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016146:	b352      	cbz	r2, 801619e <_strtod_l+0x8de>
 8016148:	4a9d      	ldr	r2, [pc, #628]	; (80163c0 <_strtod_l+0xb00>)
 801614a:	4293      	cmp	r3, r2
 801614c:	d12a      	bne.n	80161a4 <_strtod_l+0x8e4>
 801614e:	9b05      	ldr	r3, [sp, #20]
 8016150:	4641      	mov	r1, r8
 8016152:	b1fb      	cbz	r3, 8016194 <_strtod_l+0x8d4>
 8016154:	4b9b      	ldr	r3, [pc, #620]	; (80163c4 <_strtod_l+0xb04>)
 8016156:	ea09 0303 	and.w	r3, r9, r3
 801615a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801615e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016162:	d81a      	bhi.n	801619a <_strtod_l+0x8da>
 8016164:	0d1b      	lsrs	r3, r3, #20
 8016166:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801616a:	fa02 f303 	lsl.w	r3, r2, r3
 801616e:	4299      	cmp	r1, r3
 8016170:	d118      	bne.n	80161a4 <_strtod_l+0x8e4>
 8016172:	4b95      	ldr	r3, [pc, #596]	; (80163c8 <_strtod_l+0xb08>)
 8016174:	459a      	cmp	sl, r3
 8016176:	d102      	bne.n	801617e <_strtod_l+0x8be>
 8016178:	3101      	adds	r1, #1
 801617a:	f43f addf 	beq.w	8015d3c <_strtod_l+0x47c>
 801617e:	4b91      	ldr	r3, [pc, #580]	; (80163c4 <_strtod_l+0xb04>)
 8016180:	ea0a 0303 	and.w	r3, sl, r3
 8016184:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016188:	f04f 0800 	mov.w	r8, #0
 801618c:	9b05      	ldr	r3, [sp, #20]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d199      	bne.n	80160c6 <_strtod_l+0x806>
 8016192:	e5dd      	b.n	8015d50 <_strtod_l+0x490>
 8016194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016198:	e7e9      	b.n	801616e <_strtod_l+0x8ae>
 801619a:	4613      	mov	r3, r2
 801619c:	e7e7      	b.n	801616e <_strtod_l+0x8ae>
 801619e:	ea53 0308 	orrs.w	r3, r3, r8
 80161a2:	d080      	beq.n	80160a6 <_strtod_l+0x7e6>
 80161a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80161a6:	b1e3      	cbz	r3, 80161e2 <_strtod_l+0x922>
 80161a8:	ea13 0f0a 	tst.w	r3, sl
 80161ac:	d0ee      	beq.n	801618c <_strtod_l+0x8cc>
 80161ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161b0:	9a05      	ldr	r2, [sp, #20]
 80161b2:	4640      	mov	r0, r8
 80161b4:	4649      	mov	r1, r9
 80161b6:	b1c3      	cbz	r3, 80161ea <_strtod_l+0x92a>
 80161b8:	f7ff fb60 	bl	801587c <sulp>
 80161bc:	4602      	mov	r2, r0
 80161be:	460b      	mov	r3, r1
 80161c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80161c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80161c4:	f7ea f83a 	bl	800023c <__adddf3>
 80161c8:	4680      	mov	r8, r0
 80161ca:	4689      	mov	r9, r1
 80161cc:	e7de      	b.n	801618c <_strtod_l+0x8cc>
 80161ce:	4013      	ands	r3, r2
 80161d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80161d4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80161d8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80161dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80161e0:	e7d4      	b.n	801618c <_strtod_l+0x8cc>
 80161e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80161e4:	ea13 0f08 	tst.w	r3, r8
 80161e8:	e7e0      	b.n	80161ac <_strtod_l+0x8ec>
 80161ea:	f7ff fb47 	bl	801587c <sulp>
 80161ee:	4602      	mov	r2, r0
 80161f0:	460b      	mov	r3, r1
 80161f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80161f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80161f6:	f7ea f81f 	bl	8000238 <__aeabi_dsub>
 80161fa:	2200      	movs	r2, #0
 80161fc:	2300      	movs	r3, #0
 80161fe:	4680      	mov	r8, r0
 8016200:	4689      	mov	r9, r1
 8016202:	f7ea fc39 	bl	8000a78 <__aeabi_dcmpeq>
 8016206:	2800      	cmp	r0, #0
 8016208:	d0c0      	beq.n	801618c <_strtod_l+0x8cc>
 801620a:	e608      	b.n	8015e1e <_strtod_l+0x55e>
 801620c:	4659      	mov	r1, fp
 801620e:	4630      	mov	r0, r6
 8016210:	f002 fcba 	bl	8018b88 <__ratio>
 8016214:	4602      	mov	r2, r0
 8016216:	460b      	mov	r3, r1
 8016218:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801621c:	2200      	movs	r2, #0
 801621e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016222:	f7ea fc3d 	bl	8000aa0 <__aeabi_dcmple>
 8016226:	2800      	cmp	r0, #0
 8016228:	d06f      	beq.n	801630a <_strtod_l+0xa4a>
 801622a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801622c:	2b00      	cmp	r3, #0
 801622e:	d17c      	bne.n	801632a <_strtod_l+0xa6a>
 8016230:	f1b8 0f00 	cmp.w	r8, #0
 8016234:	d159      	bne.n	80162ea <_strtod_l+0xa2a>
 8016236:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801623a:	2b00      	cmp	r3, #0
 801623c:	d17b      	bne.n	8016336 <_strtod_l+0xa76>
 801623e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016242:	4b62      	ldr	r3, [pc, #392]	; (80163cc <_strtod_l+0xb0c>)
 8016244:	2200      	movs	r2, #0
 8016246:	f7ea fc21 	bl	8000a8c <__aeabi_dcmplt>
 801624a:	2800      	cmp	r0, #0
 801624c:	d15a      	bne.n	8016304 <_strtod_l+0xa44>
 801624e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016252:	4b5f      	ldr	r3, [pc, #380]	; (80163d0 <_strtod_l+0xb10>)
 8016254:	2200      	movs	r2, #0
 8016256:	f7ea f9a7 	bl	80005a8 <__aeabi_dmul>
 801625a:	4605      	mov	r5, r0
 801625c:	460f      	mov	r7, r1
 801625e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016262:	9506      	str	r5, [sp, #24]
 8016264:	9307      	str	r3, [sp, #28]
 8016266:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801626a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801626e:	4b55      	ldr	r3, [pc, #340]	; (80163c4 <_strtod_l+0xb04>)
 8016270:	4a54      	ldr	r2, [pc, #336]	; (80163c4 <_strtod_l+0xb04>)
 8016272:	ea0a 0303 	and.w	r3, sl, r3
 8016276:	9313      	str	r3, [sp, #76]	; 0x4c
 8016278:	4b56      	ldr	r3, [pc, #344]	; (80163d4 <_strtod_l+0xb14>)
 801627a:	ea0a 0202 	and.w	r2, sl, r2
 801627e:	429a      	cmp	r2, r3
 8016280:	f040 80ae 	bne.w	80163e0 <_strtod_l+0xb20>
 8016284:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016288:	4640      	mov	r0, r8
 801628a:	4649      	mov	r1, r9
 801628c:	f002 fbbe 	bl	8018a0c <__ulp>
 8016290:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016294:	f7ea f988 	bl	80005a8 <__aeabi_dmul>
 8016298:	4642      	mov	r2, r8
 801629a:	464b      	mov	r3, r9
 801629c:	f7e9 ffce 	bl	800023c <__adddf3>
 80162a0:	f8df a120 	ldr.w	sl, [pc, #288]	; 80163c4 <_strtod_l+0xb04>
 80162a4:	4a4c      	ldr	r2, [pc, #304]	; (80163d8 <_strtod_l+0xb18>)
 80162a6:	ea01 0a0a 	and.w	sl, r1, sl
 80162aa:	4592      	cmp	sl, r2
 80162ac:	4680      	mov	r8, r0
 80162ae:	d948      	bls.n	8016342 <_strtod_l+0xa82>
 80162b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80162b2:	4b45      	ldr	r3, [pc, #276]	; (80163c8 <_strtod_l+0xb08>)
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d103      	bne.n	80162c0 <_strtod_l+0xa00>
 80162b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162ba:	3301      	adds	r3, #1
 80162bc:	f43f ad3e 	beq.w	8015d3c <_strtod_l+0x47c>
 80162c0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80163c8 <_strtod_l+0xb08>
 80162c4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80162c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80162ca:	4620      	mov	r0, r4
 80162cc:	f002 f874 	bl	80183b8 <_Bfree>
 80162d0:	9908      	ldr	r1, [sp, #32]
 80162d2:	4620      	mov	r0, r4
 80162d4:	f002 f870 	bl	80183b8 <_Bfree>
 80162d8:	4659      	mov	r1, fp
 80162da:	4620      	mov	r0, r4
 80162dc:	f002 f86c 	bl	80183b8 <_Bfree>
 80162e0:	4631      	mov	r1, r6
 80162e2:	4620      	mov	r0, r4
 80162e4:	f002 f868 	bl	80183b8 <_Bfree>
 80162e8:	e607      	b.n	8015efa <_strtod_l+0x63a>
 80162ea:	f1b8 0f01 	cmp.w	r8, #1
 80162ee:	d103      	bne.n	80162f8 <_strtod_l+0xa38>
 80162f0:	f1b9 0f00 	cmp.w	r9, #0
 80162f4:	f43f ad93 	beq.w	8015e1e <_strtod_l+0x55e>
 80162f8:	4b38      	ldr	r3, [pc, #224]	; (80163dc <_strtod_l+0xb1c>)
 80162fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80162fc:	2200      	movs	r2, #0
 80162fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016302:	e016      	b.n	8016332 <_strtod_l+0xa72>
 8016304:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016306:	4f32      	ldr	r7, [pc, #200]	; (80163d0 <_strtod_l+0xb10>)
 8016308:	e7a9      	b.n	801625e <_strtod_l+0x99e>
 801630a:	4b31      	ldr	r3, [pc, #196]	; (80163d0 <_strtod_l+0xb10>)
 801630c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016310:	2200      	movs	r2, #0
 8016312:	f7ea f949 	bl	80005a8 <__aeabi_dmul>
 8016316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016318:	4605      	mov	r5, r0
 801631a:	460f      	mov	r7, r1
 801631c:	2b00      	cmp	r3, #0
 801631e:	d09e      	beq.n	801625e <_strtod_l+0x99e>
 8016320:	4602      	mov	r2, r0
 8016322:	460b      	mov	r3, r1
 8016324:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016328:	e79d      	b.n	8016266 <_strtod_l+0x9a6>
 801632a:	4b28      	ldr	r3, [pc, #160]	; (80163cc <_strtod_l+0xb0c>)
 801632c:	2200      	movs	r2, #0
 801632e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016332:	4f26      	ldr	r7, [pc, #152]	; (80163cc <_strtod_l+0xb0c>)
 8016334:	e797      	b.n	8016266 <_strtod_l+0x9a6>
 8016336:	4b29      	ldr	r3, [pc, #164]	; (80163dc <_strtod_l+0xb1c>)
 8016338:	2200      	movs	r2, #0
 801633a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801633e:	4645      	mov	r5, r8
 8016340:	e7f7      	b.n	8016332 <_strtod_l+0xa72>
 8016342:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8016346:	9b05      	ldr	r3, [sp, #20]
 8016348:	46ca      	mov	sl, r9
 801634a:	2b00      	cmp	r3, #0
 801634c:	d1bc      	bne.n	80162c8 <_strtod_l+0xa08>
 801634e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016352:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016354:	0d1b      	lsrs	r3, r3, #20
 8016356:	051b      	lsls	r3, r3, #20
 8016358:	429a      	cmp	r2, r3
 801635a:	d1b5      	bne.n	80162c8 <_strtod_l+0xa08>
 801635c:	4628      	mov	r0, r5
 801635e:	4639      	mov	r1, r7
 8016360:	f7ea fdb6 	bl	8000ed0 <__aeabi_d2lz>
 8016364:	f7ea f8f2 	bl	800054c <__aeabi_l2d>
 8016368:	4602      	mov	r2, r0
 801636a:	460b      	mov	r3, r1
 801636c:	4628      	mov	r0, r5
 801636e:	4639      	mov	r1, r7
 8016370:	f7e9 ff62 	bl	8000238 <__aeabi_dsub>
 8016374:	460b      	mov	r3, r1
 8016376:	4602      	mov	r2, r0
 8016378:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801637c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8016380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016382:	ea4a 0a08 	orr.w	sl, sl, r8
 8016386:	ea5a 0a03 	orrs.w	sl, sl, r3
 801638a:	d06a      	beq.n	8016462 <_strtod_l+0xba2>
 801638c:	a308      	add	r3, pc, #32	; (adr r3, 80163b0 <_strtod_l+0xaf0>)
 801638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016392:	f7ea fb7b 	bl	8000a8c <__aeabi_dcmplt>
 8016396:	2800      	cmp	r0, #0
 8016398:	f47f acda 	bne.w	8015d50 <_strtod_l+0x490>
 801639c:	a306      	add	r3, pc, #24	; (adr r3, 80163b8 <_strtod_l+0xaf8>)
 801639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80163a6:	f7ea fb8f 	bl	8000ac8 <__aeabi_dcmpgt>
 80163aa:	2800      	cmp	r0, #0
 80163ac:	d08c      	beq.n	80162c8 <_strtod_l+0xa08>
 80163ae:	e4cf      	b.n	8015d50 <_strtod_l+0x490>
 80163b0:	94a03595 	.word	0x94a03595
 80163b4:	3fdfffff 	.word	0x3fdfffff
 80163b8:	35afe535 	.word	0x35afe535
 80163bc:	3fe00000 	.word	0x3fe00000
 80163c0:	000fffff 	.word	0x000fffff
 80163c4:	7ff00000 	.word	0x7ff00000
 80163c8:	7fefffff 	.word	0x7fefffff
 80163cc:	3ff00000 	.word	0x3ff00000
 80163d0:	3fe00000 	.word	0x3fe00000
 80163d4:	7fe00000 	.word	0x7fe00000
 80163d8:	7c9fffff 	.word	0x7c9fffff
 80163dc:	bff00000 	.word	0xbff00000
 80163e0:	9b05      	ldr	r3, [sp, #20]
 80163e2:	b333      	cbz	r3, 8016432 <_strtod_l+0xb72>
 80163e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80163e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80163ea:	d822      	bhi.n	8016432 <_strtod_l+0xb72>
 80163ec:	a328      	add	r3, pc, #160	; (adr r3, 8016490 <_strtod_l+0xbd0>)
 80163ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f2:	4628      	mov	r0, r5
 80163f4:	4639      	mov	r1, r7
 80163f6:	f7ea fb53 	bl	8000aa0 <__aeabi_dcmple>
 80163fa:	b1a0      	cbz	r0, 8016426 <_strtod_l+0xb66>
 80163fc:	4639      	mov	r1, r7
 80163fe:	4628      	mov	r0, r5
 8016400:	f7ea fbaa 	bl	8000b58 <__aeabi_d2uiz>
 8016404:	2801      	cmp	r0, #1
 8016406:	bf38      	it	cc
 8016408:	2001      	movcc	r0, #1
 801640a:	f7ea f853 	bl	80004b4 <__aeabi_ui2d>
 801640e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016410:	4605      	mov	r5, r0
 8016412:	460f      	mov	r7, r1
 8016414:	bb03      	cbnz	r3, 8016458 <_strtod_l+0xb98>
 8016416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801641a:	9014      	str	r0, [sp, #80]	; 0x50
 801641c:	9315      	str	r3, [sp, #84]	; 0x54
 801641e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016422:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801642a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801642e:	1a9b      	subs	r3, r3, r2
 8016430:	9311      	str	r3, [sp, #68]	; 0x44
 8016432:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016434:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016436:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 801643a:	f002 fae7 	bl	8018a0c <__ulp>
 801643e:	4602      	mov	r2, r0
 8016440:	460b      	mov	r3, r1
 8016442:	4640      	mov	r0, r8
 8016444:	4649      	mov	r1, r9
 8016446:	f7ea f8af 	bl	80005a8 <__aeabi_dmul>
 801644a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801644c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801644e:	f7e9 fef5 	bl	800023c <__adddf3>
 8016452:	4680      	mov	r8, r0
 8016454:	4689      	mov	r9, r1
 8016456:	e776      	b.n	8016346 <_strtod_l+0xa86>
 8016458:	4602      	mov	r2, r0
 801645a:	460b      	mov	r3, r1
 801645c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016460:	e7dd      	b.n	801641e <_strtod_l+0xb5e>
 8016462:	a30d      	add	r3, pc, #52	; (adr r3, 8016498 <_strtod_l+0xbd8>)
 8016464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016468:	f7ea fb10 	bl	8000a8c <__aeabi_dcmplt>
 801646c:	e79d      	b.n	80163aa <_strtod_l+0xaea>
 801646e:	2300      	movs	r3, #0
 8016470:	930e      	str	r3, [sp, #56]	; 0x38
 8016472:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016476:	6013      	str	r3, [r2, #0]
 8016478:	f7ff ba5f 	b.w	801593a <_strtod_l+0x7a>
 801647c:	2a65      	cmp	r2, #101	; 0x65
 801647e:	f43f ab56 	beq.w	8015b2e <_strtod_l+0x26e>
 8016482:	2a45      	cmp	r2, #69	; 0x45
 8016484:	f43f ab53 	beq.w	8015b2e <_strtod_l+0x26e>
 8016488:	2301      	movs	r3, #1
 801648a:	f7ff bb8b 	b.w	8015ba4 <_strtod_l+0x2e4>
 801648e:	bf00      	nop
 8016490:	ffc00000 	.word	0xffc00000
 8016494:	41dfffff 	.word	0x41dfffff
 8016498:	94a03595 	.word	0x94a03595
 801649c:	3fcfffff 	.word	0x3fcfffff

080164a0 <_strtod_r>:
 80164a0:	4b01      	ldr	r3, [pc, #4]	; (80164a8 <_strtod_r+0x8>)
 80164a2:	f7ff ba0d 	b.w	80158c0 <_strtod_l>
 80164a6:	bf00      	nop
 80164a8:	2000022c 	.word	0x2000022c

080164ac <_strtol_l.constprop.0>:
 80164ac:	2b01      	cmp	r3, #1
 80164ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b2:	4686      	mov	lr, r0
 80164b4:	4690      	mov	r8, r2
 80164b6:	d001      	beq.n	80164bc <_strtol_l.constprop.0+0x10>
 80164b8:	2b24      	cmp	r3, #36	; 0x24
 80164ba:	d906      	bls.n	80164ca <_strtol_l.constprop.0+0x1e>
 80164bc:	f000 f90e 	bl	80166dc <__errno>
 80164c0:	2316      	movs	r3, #22
 80164c2:	6003      	str	r3, [r0, #0]
 80164c4:	2000      	movs	r0, #0
 80164c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164ca:	4836      	ldr	r0, [pc, #216]	; (80165a4 <_strtol_l.constprop.0+0xf8>)
 80164cc:	460d      	mov	r5, r1
 80164ce:	462a      	mov	r2, r5
 80164d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164d4:	5d06      	ldrb	r6, [r0, r4]
 80164d6:	f016 0608 	ands.w	r6, r6, #8
 80164da:	d1f8      	bne.n	80164ce <_strtol_l.constprop.0+0x22>
 80164dc:	2c2d      	cmp	r4, #45	; 0x2d
 80164de:	d12e      	bne.n	801653e <_strtol_l.constprop.0+0x92>
 80164e0:	782c      	ldrb	r4, [r5, #0]
 80164e2:	2601      	movs	r6, #1
 80164e4:	1c95      	adds	r5, r2, #2
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d057      	beq.n	801659a <_strtol_l.constprop.0+0xee>
 80164ea:	2b10      	cmp	r3, #16
 80164ec:	d109      	bne.n	8016502 <_strtol_l.constprop.0+0x56>
 80164ee:	2c30      	cmp	r4, #48	; 0x30
 80164f0:	d107      	bne.n	8016502 <_strtol_l.constprop.0+0x56>
 80164f2:	782a      	ldrb	r2, [r5, #0]
 80164f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80164f8:	2a58      	cmp	r2, #88	; 0x58
 80164fa:	d149      	bne.n	8016590 <_strtol_l.constprop.0+0xe4>
 80164fc:	786c      	ldrb	r4, [r5, #1]
 80164fe:	2310      	movs	r3, #16
 8016500:	3502      	adds	r5, #2
 8016502:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8016506:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801650a:	2200      	movs	r2, #0
 801650c:	fbbc f9f3 	udiv	r9, ip, r3
 8016510:	4610      	mov	r0, r2
 8016512:	fb03 ca19 	mls	sl, r3, r9, ip
 8016516:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801651a:	2f09      	cmp	r7, #9
 801651c:	d814      	bhi.n	8016548 <_strtol_l.constprop.0+0x9c>
 801651e:	463c      	mov	r4, r7
 8016520:	42a3      	cmp	r3, r4
 8016522:	dd20      	ble.n	8016566 <_strtol_l.constprop.0+0xba>
 8016524:	1c57      	adds	r7, r2, #1
 8016526:	d007      	beq.n	8016538 <_strtol_l.constprop.0+0x8c>
 8016528:	4581      	cmp	r9, r0
 801652a:	d319      	bcc.n	8016560 <_strtol_l.constprop.0+0xb4>
 801652c:	d101      	bne.n	8016532 <_strtol_l.constprop.0+0x86>
 801652e:	45a2      	cmp	sl, r4
 8016530:	db16      	blt.n	8016560 <_strtol_l.constprop.0+0xb4>
 8016532:	fb00 4003 	mla	r0, r0, r3, r4
 8016536:	2201      	movs	r2, #1
 8016538:	f815 4b01 	ldrb.w	r4, [r5], #1
 801653c:	e7eb      	b.n	8016516 <_strtol_l.constprop.0+0x6a>
 801653e:	2c2b      	cmp	r4, #43	; 0x2b
 8016540:	bf04      	itt	eq
 8016542:	782c      	ldrbeq	r4, [r5, #0]
 8016544:	1c95      	addeq	r5, r2, #2
 8016546:	e7ce      	b.n	80164e6 <_strtol_l.constprop.0+0x3a>
 8016548:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801654c:	2f19      	cmp	r7, #25
 801654e:	d801      	bhi.n	8016554 <_strtol_l.constprop.0+0xa8>
 8016550:	3c37      	subs	r4, #55	; 0x37
 8016552:	e7e5      	b.n	8016520 <_strtol_l.constprop.0+0x74>
 8016554:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016558:	2f19      	cmp	r7, #25
 801655a:	d804      	bhi.n	8016566 <_strtol_l.constprop.0+0xba>
 801655c:	3c57      	subs	r4, #87	; 0x57
 801655e:	e7df      	b.n	8016520 <_strtol_l.constprop.0+0x74>
 8016560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016564:	e7e8      	b.n	8016538 <_strtol_l.constprop.0+0x8c>
 8016566:	1c53      	adds	r3, r2, #1
 8016568:	d108      	bne.n	801657c <_strtol_l.constprop.0+0xd0>
 801656a:	2322      	movs	r3, #34	; 0x22
 801656c:	f8ce 3000 	str.w	r3, [lr]
 8016570:	4660      	mov	r0, ip
 8016572:	f1b8 0f00 	cmp.w	r8, #0
 8016576:	d0a6      	beq.n	80164c6 <_strtol_l.constprop.0+0x1a>
 8016578:	1e69      	subs	r1, r5, #1
 801657a:	e006      	b.n	801658a <_strtol_l.constprop.0+0xde>
 801657c:	b106      	cbz	r6, 8016580 <_strtol_l.constprop.0+0xd4>
 801657e:	4240      	negs	r0, r0
 8016580:	f1b8 0f00 	cmp.w	r8, #0
 8016584:	d09f      	beq.n	80164c6 <_strtol_l.constprop.0+0x1a>
 8016586:	2a00      	cmp	r2, #0
 8016588:	d1f6      	bne.n	8016578 <_strtol_l.constprop.0+0xcc>
 801658a:	f8c8 1000 	str.w	r1, [r8]
 801658e:	e79a      	b.n	80164c6 <_strtol_l.constprop.0+0x1a>
 8016590:	2430      	movs	r4, #48	; 0x30
 8016592:	2b00      	cmp	r3, #0
 8016594:	d1b5      	bne.n	8016502 <_strtol_l.constprop.0+0x56>
 8016596:	2308      	movs	r3, #8
 8016598:	e7b3      	b.n	8016502 <_strtol_l.constprop.0+0x56>
 801659a:	2c30      	cmp	r4, #48	; 0x30
 801659c:	d0a9      	beq.n	80164f2 <_strtol_l.constprop.0+0x46>
 801659e:	230a      	movs	r3, #10
 80165a0:	e7af      	b.n	8016502 <_strtol_l.constprop.0+0x56>
 80165a2:	bf00      	nop
 80165a4:	0801a469 	.word	0x0801a469

080165a8 <_strtol_r>:
 80165a8:	f7ff bf80 	b.w	80164ac <_strtol_l.constprop.0>

080165ac <_fwalk_sglue>:
 80165ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165b0:	4607      	mov	r7, r0
 80165b2:	4688      	mov	r8, r1
 80165b4:	4614      	mov	r4, r2
 80165b6:	2600      	movs	r6, #0
 80165b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80165bc:	f1b9 0901 	subs.w	r9, r9, #1
 80165c0:	d505      	bpl.n	80165ce <_fwalk_sglue+0x22>
 80165c2:	6824      	ldr	r4, [r4, #0]
 80165c4:	2c00      	cmp	r4, #0
 80165c6:	d1f7      	bne.n	80165b8 <_fwalk_sglue+0xc>
 80165c8:	4630      	mov	r0, r6
 80165ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165ce:	89ab      	ldrh	r3, [r5, #12]
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	d907      	bls.n	80165e4 <_fwalk_sglue+0x38>
 80165d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80165d8:	3301      	adds	r3, #1
 80165da:	d003      	beq.n	80165e4 <_fwalk_sglue+0x38>
 80165dc:	4629      	mov	r1, r5
 80165de:	4638      	mov	r0, r7
 80165e0:	47c0      	blx	r8
 80165e2:	4306      	orrs	r6, r0
 80165e4:	3568      	adds	r5, #104	; 0x68
 80165e6:	e7e9      	b.n	80165bc <_fwalk_sglue+0x10>

080165e8 <_puts_r>:
 80165e8:	6a03      	ldr	r3, [r0, #32]
 80165ea:	b570      	push	{r4, r5, r6, lr}
 80165ec:	6884      	ldr	r4, [r0, #8]
 80165ee:	4605      	mov	r5, r0
 80165f0:	460e      	mov	r6, r1
 80165f2:	b90b      	cbnz	r3, 80165f8 <_puts_r+0x10>
 80165f4:	f7ff f92a 	bl	801584c <__sinit>
 80165f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165fa:	07db      	lsls	r3, r3, #31
 80165fc:	d405      	bmi.n	801660a <_puts_r+0x22>
 80165fe:	89a3      	ldrh	r3, [r4, #12]
 8016600:	0598      	lsls	r0, r3, #22
 8016602:	d402      	bmi.n	801660a <_puts_r+0x22>
 8016604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016606:	f000 f894 	bl	8016732 <__retarget_lock_acquire_recursive>
 801660a:	89a3      	ldrh	r3, [r4, #12]
 801660c:	0719      	lsls	r1, r3, #28
 801660e:	d513      	bpl.n	8016638 <_puts_r+0x50>
 8016610:	6923      	ldr	r3, [r4, #16]
 8016612:	b18b      	cbz	r3, 8016638 <_puts_r+0x50>
 8016614:	3e01      	subs	r6, #1
 8016616:	68a3      	ldr	r3, [r4, #8]
 8016618:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801661c:	3b01      	subs	r3, #1
 801661e:	60a3      	str	r3, [r4, #8]
 8016620:	b9e9      	cbnz	r1, 801665e <_puts_r+0x76>
 8016622:	2b00      	cmp	r3, #0
 8016624:	da2e      	bge.n	8016684 <_puts_r+0x9c>
 8016626:	4622      	mov	r2, r4
 8016628:	210a      	movs	r1, #10
 801662a:	4628      	mov	r0, r5
 801662c:	f002 fba3 	bl	8018d76 <__swbuf_r>
 8016630:	3001      	adds	r0, #1
 8016632:	d007      	beq.n	8016644 <_puts_r+0x5c>
 8016634:	250a      	movs	r5, #10
 8016636:	e007      	b.n	8016648 <_puts_r+0x60>
 8016638:	4621      	mov	r1, r4
 801663a:	4628      	mov	r0, r5
 801663c:	f002 fbd8 	bl	8018df0 <__swsetup_r>
 8016640:	2800      	cmp	r0, #0
 8016642:	d0e7      	beq.n	8016614 <_puts_r+0x2c>
 8016644:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801664a:	07da      	lsls	r2, r3, #31
 801664c:	d405      	bmi.n	801665a <_puts_r+0x72>
 801664e:	89a3      	ldrh	r3, [r4, #12]
 8016650:	059b      	lsls	r3, r3, #22
 8016652:	d402      	bmi.n	801665a <_puts_r+0x72>
 8016654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016656:	f000 f86d 	bl	8016734 <__retarget_lock_release_recursive>
 801665a:	4628      	mov	r0, r5
 801665c:	bd70      	pop	{r4, r5, r6, pc}
 801665e:	2b00      	cmp	r3, #0
 8016660:	da04      	bge.n	801666c <_puts_r+0x84>
 8016662:	69a2      	ldr	r2, [r4, #24]
 8016664:	429a      	cmp	r2, r3
 8016666:	dc06      	bgt.n	8016676 <_puts_r+0x8e>
 8016668:	290a      	cmp	r1, #10
 801666a:	d004      	beq.n	8016676 <_puts_r+0x8e>
 801666c:	6823      	ldr	r3, [r4, #0]
 801666e:	1c5a      	adds	r2, r3, #1
 8016670:	6022      	str	r2, [r4, #0]
 8016672:	7019      	strb	r1, [r3, #0]
 8016674:	e7cf      	b.n	8016616 <_puts_r+0x2e>
 8016676:	4622      	mov	r2, r4
 8016678:	4628      	mov	r0, r5
 801667a:	f002 fb7c 	bl	8018d76 <__swbuf_r>
 801667e:	3001      	adds	r0, #1
 8016680:	d1c9      	bne.n	8016616 <_puts_r+0x2e>
 8016682:	e7df      	b.n	8016644 <_puts_r+0x5c>
 8016684:	6823      	ldr	r3, [r4, #0]
 8016686:	250a      	movs	r5, #10
 8016688:	1c5a      	adds	r2, r3, #1
 801668a:	6022      	str	r2, [r4, #0]
 801668c:	701d      	strb	r5, [r3, #0]
 801668e:	e7db      	b.n	8016648 <_puts_r+0x60>

08016690 <puts>:
 8016690:	4b02      	ldr	r3, [pc, #8]	; (801669c <puts+0xc>)
 8016692:	4601      	mov	r1, r0
 8016694:	6818      	ldr	r0, [r3, #0]
 8016696:	f7ff bfa7 	b.w	80165e8 <_puts_r>
 801669a:	bf00      	nop
 801669c:	200003e4 	.word	0x200003e4

080166a0 <strncmp>:
 80166a0:	b510      	push	{r4, lr}
 80166a2:	b16a      	cbz	r2, 80166c0 <strncmp+0x20>
 80166a4:	3901      	subs	r1, #1
 80166a6:	1884      	adds	r4, r0, r2
 80166a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d103      	bne.n	80166bc <strncmp+0x1c>
 80166b4:	42a0      	cmp	r0, r4
 80166b6:	d001      	beq.n	80166bc <strncmp+0x1c>
 80166b8:	2a00      	cmp	r2, #0
 80166ba:	d1f5      	bne.n	80166a8 <strncmp+0x8>
 80166bc:	1ad0      	subs	r0, r2, r3
 80166be:	bd10      	pop	{r4, pc}
 80166c0:	4610      	mov	r0, r2
 80166c2:	e7fc      	b.n	80166be <strncmp+0x1e>

080166c4 <memset>:
 80166c4:	4402      	add	r2, r0
 80166c6:	4603      	mov	r3, r0
 80166c8:	4293      	cmp	r3, r2
 80166ca:	d100      	bne.n	80166ce <memset+0xa>
 80166cc:	4770      	bx	lr
 80166ce:	f803 1b01 	strb.w	r1, [r3], #1
 80166d2:	e7f9      	b.n	80166c8 <memset+0x4>

080166d4 <_localeconv_r>:
 80166d4:	4800      	ldr	r0, [pc, #0]	; (80166d8 <_localeconv_r+0x4>)
 80166d6:	4770      	bx	lr
 80166d8:	2000031c 	.word	0x2000031c

080166dc <__errno>:
 80166dc:	4b01      	ldr	r3, [pc, #4]	; (80166e4 <__errno+0x8>)
 80166de:	6818      	ldr	r0, [r3, #0]
 80166e0:	4770      	bx	lr
 80166e2:	bf00      	nop
 80166e4:	200003e4 	.word	0x200003e4

080166e8 <__libc_init_array>:
 80166e8:	b570      	push	{r4, r5, r6, lr}
 80166ea:	4d0d      	ldr	r5, [pc, #52]	; (8016720 <__libc_init_array+0x38>)
 80166ec:	4c0d      	ldr	r4, [pc, #52]	; (8016724 <__libc_init_array+0x3c>)
 80166ee:	1b64      	subs	r4, r4, r5
 80166f0:	10a4      	asrs	r4, r4, #2
 80166f2:	2600      	movs	r6, #0
 80166f4:	42a6      	cmp	r6, r4
 80166f6:	d109      	bne.n	801670c <__libc_init_array+0x24>
 80166f8:	4d0b      	ldr	r5, [pc, #44]	; (8016728 <__libc_init_array+0x40>)
 80166fa:	4c0c      	ldr	r4, [pc, #48]	; (801672c <__libc_init_array+0x44>)
 80166fc:	f002 fe04 	bl	8019308 <_init>
 8016700:	1b64      	subs	r4, r4, r5
 8016702:	10a4      	asrs	r4, r4, #2
 8016704:	2600      	movs	r6, #0
 8016706:	42a6      	cmp	r6, r4
 8016708:	d105      	bne.n	8016716 <__libc_init_array+0x2e>
 801670a:	bd70      	pop	{r4, r5, r6, pc}
 801670c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016710:	4798      	blx	r3
 8016712:	3601      	adds	r6, #1
 8016714:	e7ee      	b.n	80166f4 <__libc_init_array+0xc>
 8016716:	f855 3b04 	ldr.w	r3, [r5], #4
 801671a:	4798      	blx	r3
 801671c:	3601      	adds	r6, #1
 801671e:	e7f2      	b.n	8016706 <__libc_init_array+0x1e>
 8016720:	0801a808 	.word	0x0801a808
 8016724:	0801a808 	.word	0x0801a808
 8016728:	0801a808 	.word	0x0801a808
 801672c:	0801a80c 	.word	0x0801a80c

08016730 <__retarget_lock_init_recursive>:
 8016730:	4770      	bx	lr

08016732 <__retarget_lock_acquire_recursive>:
 8016732:	4770      	bx	lr

08016734 <__retarget_lock_release_recursive>:
 8016734:	4770      	bx	lr

08016736 <memcpy>:
 8016736:	440a      	add	r2, r1
 8016738:	4291      	cmp	r1, r2
 801673a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801673e:	d100      	bne.n	8016742 <memcpy+0xc>
 8016740:	4770      	bx	lr
 8016742:	b510      	push	{r4, lr}
 8016744:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016748:	f803 4f01 	strb.w	r4, [r3, #1]!
 801674c:	4291      	cmp	r1, r2
 801674e:	d1f9      	bne.n	8016744 <memcpy+0xe>
 8016750:	bd10      	pop	{r4, pc}
	...

08016754 <nan>:
 8016754:	4901      	ldr	r1, [pc, #4]	; (801675c <nan+0x8>)
 8016756:	2000      	movs	r0, #0
 8016758:	4770      	bx	lr
 801675a:	bf00      	nop
 801675c:	7ff80000 	.word	0x7ff80000

08016760 <nanf>:
 8016760:	4800      	ldr	r0, [pc, #0]	; (8016764 <nanf+0x4>)
 8016762:	4770      	bx	lr
 8016764:	7fc00000 	.word	0x7fc00000

08016768 <__assert_func>:
 8016768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801676a:	4614      	mov	r4, r2
 801676c:	461a      	mov	r2, r3
 801676e:	4b09      	ldr	r3, [pc, #36]	; (8016794 <__assert_func+0x2c>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	4605      	mov	r5, r0
 8016774:	68d8      	ldr	r0, [r3, #12]
 8016776:	b14c      	cbz	r4, 801678c <__assert_func+0x24>
 8016778:	4b07      	ldr	r3, [pc, #28]	; (8016798 <__assert_func+0x30>)
 801677a:	9100      	str	r1, [sp, #0]
 801677c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016780:	4906      	ldr	r1, [pc, #24]	; (801679c <__assert_func+0x34>)
 8016782:	462b      	mov	r3, r5
 8016784:	f002 fab6 	bl	8018cf4 <fiprintf>
 8016788:	f002 fc8c 	bl	80190a4 <abort>
 801678c:	4b04      	ldr	r3, [pc, #16]	; (80167a0 <__assert_func+0x38>)
 801678e:	461c      	mov	r4, r3
 8016790:	e7f3      	b.n	801677a <__assert_func+0x12>
 8016792:	bf00      	nop
 8016794:	200003e4 	.word	0x200003e4
 8016798:	0801a569 	.word	0x0801a569
 801679c:	0801a576 	.word	0x0801a576
 80167a0:	0801a5a4 	.word	0x0801a5a4

080167a4 <quorem>:
 80167a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a8:	6903      	ldr	r3, [r0, #16]
 80167aa:	690c      	ldr	r4, [r1, #16]
 80167ac:	42a3      	cmp	r3, r4
 80167ae:	4607      	mov	r7, r0
 80167b0:	db7b      	blt.n	80168aa <quorem+0x106>
 80167b2:	3c01      	subs	r4, #1
 80167b4:	f101 0814 	add.w	r8, r1, #20
 80167b8:	f100 0514 	add.w	r5, r0, #20
 80167bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80167c0:	9301      	str	r3, [sp, #4]
 80167c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80167c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80167ca:	3301      	adds	r3, #1
 80167cc:	429a      	cmp	r2, r3
 80167ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80167d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80167d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80167da:	d32e      	bcc.n	801683a <quorem+0x96>
 80167dc:	f04f 0e00 	mov.w	lr, #0
 80167e0:	4640      	mov	r0, r8
 80167e2:	46ac      	mov	ip, r5
 80167e4:	46f2      	mov	sl, lr
 80167e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80167ea:	b293      	uxth	r3, r2
 80167ec:	fb06 e303 	mla	r3, r6, r3, lr
 80167f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80167f4:	0c1a      	lsrs	r2, r3, #16
 80167f6:	b29b      	uxth	r3, r3
 80167f8:	fb06 220e 	mla	r2, r6, lr, r2
 80167fc:	ebaa 0303 	sub.w	r3, sl, r3
 8016800:	f8dc a000 	ldr.w	sl, [ip]
 8016804:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016808:	b292      	uxth	r2, r2
 801680a:	fa13 f38a 	uxtah	r3, r3, sl
 801680e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016812:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016816:	b29b      	uxth	r3, r3
 8016818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801681c:	4581      	cmp	r9, r0
 801681e:	f84c 3b04 	str.w	r3, [ip], #4
 8016822:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016826:	d2de      	bcs.n	80167e6 <quorem+0x42>
 8016828:	f855 300b 	ldr.w	r3, [r5, fp]
 801682c:	b92b      	cbnz	r3, 801683a <quorem+0x96>
 801682e:	9b01      	ldr	r3, [sp, #4]
 8016830:	3b04      	subs	r3, #4
 8016832:	429d      	cmp	r5, r3
 8016834:	461a      	mov	r2, r3
 8016836:	d32c      	bcc.n	8016892 <quorem+0xee>
 8016838:	613c      	str	r4, [r7, #16]
 801683a:	4638      	mov	r0, r7
 801683c:	f002 f842 	bl	80188c4 <__mcmp>
 8016840:	2800      	cmp	r0, #0
 8016842:	db22      	blt.n	801688a <quorem+0xe6>
 8016844:	3601      	adds	r6, #1
 8016846:	4629      	mov	r1, r5
 8016848:	2000      	movs	r0, #0
 801684a:	f858 2b04 	ldr.w	r2, [r8], #4
 801684e:	f8d1 c000 	ldr.w	ip, [r1]
 8016852:	b293      	uxth	r3, r2
 8016854:	1ac3      	subs	r3, r0, r3
 8016856:	0c12      	lsrs	r2, r2, #16
 8016858:	fa13 f38c 	uxtah	r3, r3, ip
 801685c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016864:	b29b      	uxth	r3, r3
 8016866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801686a:	45c1      	cmp	r9, r8
 801686c:	f841 3b04 	str.w	r3, [r1], #4
 8016870:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016874:	d2e9      	bcs.n	801684a <quorem+0xa6>
 8016876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801687a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801687e:	b922      	cbnz	r2, 801688a <quorem+0xe6>
 8016880:	3b04      	subs	r3, #4
 8016882:	429d      	cmp	r5, r3
 8016884:	461a      	mov	r2, r3
 8016886:	d30a      	bcc.n	801689e <quorem+0xfa>
 8016888:	613c      	str	r4, [r7, #16]
 801688a:	4630      	mov	r0, r6
 801688c:	b003      	add	sp, #12
 801688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016892:	6812      	ldr	r2, [r2, #0]
 8016894:	3b04      	subs	r3, #4
 8016896:	2a00      	cmp	r2, #0
 8016898:	d1ce      	bne.n	8016838 <quorem+0x94>
 801689a:	3c01      	subs	r4, #1
 801689c:	e7c9      	b.n	8016832 <quorem+0x8e>
 801689e:	6812      	ldr	r2, [r2, #0]
 80168a0:	3b04      	subs	r3, #4
 80168a2:	2a00      	cmp	r2, #0
 80168a4:	d1f0      	bne.n	8016888 <quorem+0xe4>
 80168a6:	3c01      	subs	r4, #1
 80168a8:	e7eb      	b.n	8016882 <quorem+0xde>
 80168aa:	2000      	movs	r0, #0
 80168ac:	e7ee      	b.n	801688c <quorem+0xe8>
	...

080168b0 <_dtoa_r>:
 80168b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b4:	69c4      	ldr	r4, [r0, #28]
 80168b6:	b099      	sub	sp, #100	; 0x64
 80168b8:	4616      	mov	r6, r2
 80168ba:	461f      	mov	r7, r3
 80168bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80168c0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80168c4:	4605      	mov	r5, r0
 80168c6:	b974      	cbnz	r4, 80168e6 <_dtoa_r+0x36>
 80168c8:	2010      	movs	r0, #16
 80168ca:	f001 fbc5 	bl	8018058 <malloc>
 80168ce:	4602      	mov	r2, r0
 80168d0:	61e8      	str	r0, [r5, #28]
 80168d2:	b920      	cbnz	r0, 80168de <_dtoa_r+0x2e>
 80168d4:	4baa      	ldr	r3, [pc, #680]	; (8016b80 <_dtoa_r+0x2d0>)
 80168d6:	21ef      	movs	r1, #239	; 0xef
 80168d8:	48aa      	ldr	r0, [pc, #680]	; (8016b84 <_dtoa_r+0x2d4>)
 80168da:	f7ff ff45 	bl	8016768 <__assert_func>
 80168de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80168e2:	6004      	str	r4, [r0, #0]
 80168e4:	60c4      	str	r4, [r0, #12]
 80168e6:	69eb      	ldr	r3, [r5, #28]
 80168e8:	6819      	ldr	r1, [r3, #0]
 80168ea:	b151      	cbz	r1, 8016902 <_dtoa_r+0x52>
 80168ec:	685a      	ldr	r2, [r3, #4]
 80168ee:	604a      	str	r2, [r1, #4]
 80168f0:	2301      	movs	r3, #1
 80168f2:	4093      	lsls	r3, r2
 80168f4:	608b      	str	r3, [r1, #8]
 80168f6:	4628      	mov	r0, r5
 80168f8:	f001 fd5e 	bl	80183b8 <_Bfree>
 80168fc:	69eb      	ldr	r3, [r5, #28]
 80168fe:	2200      	movs	r2, #0
 8016900:	601a      	str	r2, [r3, #0]
 8016902:	1e3b      	subs	r3, r7, #0
 8016904:	bfb9      	ittee	lt
 8016906:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801690a:	9305      	strlt	r3, [sp, #20]
 801690c:	2300      	movge	r3, #0
 801690e:	f8c8 3000 	strge.w	r3, [r8]
 8016912:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016916:	4b9c      	ldr	r3, [pc, #624]	; (8016b88 <_dtoa_r+0x2d8>)
 8016918:	bfbc      	itt	lt
 801691a:	2201      	movlt	r2, #1
 801691c:	f8c8 2000 	strlt.w	r2, [r8]
 8016920:	ea33 0309 	bics.w	r3, r3, r9
 8016924:	d119      	bne.n	801695a <_dtoa_r+0xaa>
 8016926:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016928:	f242 730f 	movw	r3, #9999	; 0x270f
 801692c:	6013      	str	r3, [r2, #0]
 801692e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016932:	4333      	orrs	r3, r6
 8016934:	f000 8587 	beq.w	8017446 <_dtoa_r+0xb96>
 8016938:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801693a:	b953      	cbnz	r3, 8016952 <_dtoa_r+0xa2>
 801693c:	4b93      	ldr	r3, [pc, #588]	; (8016b8c <_dtoa_r+0x2dc>)
 801693e:	e023      	b.n	8016988 <_dtoa_r+0xd8>
 8016940:	4b93      	ldr	r3, [pc, #588]	; (8016b90 <_dtoa_r+0x2e0>)
 8016942:	9303      	str	r3, [sp, #12]
 8016944:	3308      	adds	r3, #8
 8016946:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016948:	6013      	str	r3, [r2, #0]
 801694a:	9803      	ldr	r0, [sp, #12]
 801694c:	b019      	add	sp, #100	; 0x64
 801694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016952:	4b8e      	ldr	r3, [pc, #568]	; (8016b8c <_dtoa_r+0x2dc>)
 8016954:	9303      	str	r3, [sp, #12]
 8016956:	3303      	adds	r3, #3
 8016958:	e7f5      	b.n	8016946 <_dtoa_r+0x96>
 801695a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801695e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8016962:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016966:	2200      	movs	r2, #0
 8016968:	2300      	movs	r3, #0
 801696a:	f7ea f885 	bl	8000a78 <__aeabi_dcmpeq>
 801696e:	4680      	mov	r8, r0
 8016970:	b160      	cbz	r0, 801698c <_dtoa_r+0xdc>
 8016972:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016974:	2301      	movs	r3, #1
 8016976:	6013      	str	r3, [r2, #0]
 8016978:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801697a:	2b00      	cmp	r3, #0
 801697c:	f000 8560 	beq.w	8017440 <_dtoa_r+0xb90>
 8016980:	4b84      	ldr	r3, [pc, #528]	; (8016b94 <_dtoa_r+0x2e4>)
 8016982:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016984:	6013      	str	r3, [r2, #0]
 8016986:	3b01      	subs	r3, #1
 8016988:	9303      	str	r3, [sp, #12]
 801698a:	e7de      	b.n	801694a <_dtoa_r+0x9a>
 801698c:	ab16      	add	r3, sp, #88	; 0x58
 801698e:	9301      	str	r3, [sp, #4]
 8016990:	ab17      	add	r3, sp, #92	; 0x5c
 8016992:	9300      	str	r3, [sp, #0]
 8016994:	4628      	mov	r0, r5
 8016996:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801699a:	f002 f89f 	bl	8018adc <__d2b>
 801699e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80169a2:	4682      	mov	sl, r0
 80169a4:	2c00      	cmp	r4, #0
 80169a6:	d07d      	beq.n	8016aa4 <_dtoa_r+0x1f4>
 80169a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169aa:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80169ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80169b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80169b6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80169ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80169be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80169c2:	4619      	mov	r1, r3
 80169c4:	2200      	movs	r2, #0
 80169c6:	4b74      	ldr	r3, [pc, #464]	; (8016b98 <_dtoa_r+0x2e8>)
 80169c8:	f7e9 fc36 	bl	8000238 <__aeabi_dsub>
 80169cc:	a366      	add	r3, pc, #408	; (adr r3, 8016b68 <_dtoa_r+0x2b8>)
 80169ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d2:	f7e9 fde9 	bl	80005a8 <__aeabi_dmul>
 80169d6:	a366      	add	r3, pc, #408	; (adr r3, 8016b70 <_dtoa_r+0x2c0>)
 80169d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169dc:	f7e9 fc2e 	bl	800023c <__adddf3>
 80169e0:	4606      	mov	r6, r0
 80169e2:	4620      	mov	r0, r4
 80169e4:	460f      	mov	r7, r1
 80169e6:	f7e9 fd75 	bl	80004d4 <__aeabi_i2d>
 80169ea:	a363      	add	r3, pc, #396	; (adr r3, 8016b78 <_dtoa_r+0x2c8>)
 80169ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f0:	f7e9 fdda 	bl	80005a8 <__aeabi_dmul>
 80169f4:	4602      	mov	r2, r0
 80169f6:	460b      	mov	r3, r1
 80169f8:	4630      	mov	r0, r6
 80169fa:	4639      	mov	r1, r7
 80169fc:	f7e9 fc1e 	bl	800023c <__adddf3>
 8016a00:	4606      	mov	r6, r0
 8016a02:	460f      	mov	r7, r1
 8016a04:	f7ea f880 	bl	8000b08 <__aeabi_d2iz>
 8016a08:	2200      	movs	r2, #0
 8016a0a:	4683      	mov	fp, r0
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	4630      	mov	r0, r6
 8016a10:	4639      	mov	r1, r7
 8016a12:	f7ea f83b 	bl	8000a8c <__aeabi_dcmplt>
 8016a16:	b148      	cbz	r0, 8016a2c <_dtoa_r+0x17c>
 8016a18:	4658      	mov	r0, fp
 8016a1a:	f7e9 fd5b 	bl	80004d4 <__aeabi_i2d>
 8016a1e:	4632      	mov	r2, r6
 8016a20:	463b      	mov	r3, r7
 8016a22:	f7ea f829 	bl	8000a78 <__aeabi_dcmpeq>
 8016a26:	b908      	cbnz	r0, 8016a2c <_dtoa_r+0x17c>
 8016a28:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016a2c:	f1bb 0f16 	cmp.w	fp, #22
 8016a30:	d856      	bhi.n	8016ae0 <_dtoa_r+0x230>
 8016a32:	4b5a      	ldr	r3, [pc, #360]	; (8016b9c <_dtoa_r+0x2ec>)
 8016a34:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016a40:	f7ea f824 	bl	8000a8c <__aeabi_dcmplt>
 8016a44:	2800      	cmp	r0, #0
 8016a46:	d04d      	beq.n	8016ae4 <_dtoa_r+0x234>
 8016a48:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016a52:	1b1b      	subs	r3, r3, r4
 8016a54:	1e5a      	subs	r2, r3, #1
 8016a56:	bf44      	itt	mi
 8016a58:	f1c3 0901 	rsbmi	r9, r3, #1
 8016a5c:	2300      	movmi	r3, #0
 8016a5e:	9209      	str	r2, [sp, #36]	; 0x24
 8016a60:	bf54      	ite	pl
 8016a62:	f04f 0900 	movpl.w	r9, #0
 8016a66:	9309      	strmi	r3, [sp, #36]	; 0x24
 8016a68:	f1bb 0f00 	cmp.w	fp, #0
 8016a6c:	db3c      	blt.n	8016ae8 <_dtoa_r+0x238>
 8016a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a70:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8016a74:	445b      	add	r3, fp
 8016a76:	9309      	str	r3, [sp, #36]	; 0x24
 8016a78:	2300      	movs	r3, #0
 8016a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8016a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016a7e:	2b09      	cmp	r3, #9
 8016a80:	d866      	bhi.n	8016b50 <_dtoa_r+0x2a0>
 8016a82:	2b05      	cmp	r3, #5
 8016a84:	bfc4      	itt	gt
 8016a86:	3b04      	subgt	r3, #4
 8016a88:	9322      	strgt	r3, [sp, #136]	; 0x88
 8016a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016a8c:	f1a3 0302 	sub.w	r3, r3, #2
 8016a90:	bfcc      	ite	gt
 8016a92:	2400      	movgt	r4, #0
 8016a94:	2401      	movle	r4, #1
 8016a96:	2b03      	cmp	r3, #3
 8016a98:	f200 8084 	bhi.w	8016ba4 <_dtoa_r+0x2f4>
 8016a9c:	e8df f003 	tbb	[pc, r3]
 8016aa0:	5637392c 	.word	0x5637392c
 8016aa4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8016aa8:	441c      	add	r4, r3
 8016aaa:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8016aae:	2b20      	cmp	r3, #32
 8016ab0:	bfc1      	itttt	gt
 8016ab2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016ab6:	fa09 f903 	lslgt.w	r9, r9, r3
 8016aba:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8016abe:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016ac2:	bfd6      	itet	le
 8016ac4:	f1c3 0320 	rsble	r3, r3, #32
 8016ac8:	ea49 0003 	orrgt.w	r0, r9, r3
 8016acc:	fa06 f003 	lslle.w	r0, r6, r3
 8016ad0:	f7e9 fcf0 	bl	80004b4 <__aeabi_ui2d>
 8016ad4:	2201      	movs	r2, #1
 8016ad6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016ada:	3c01      	subs	r4, #1
 8016adc:	9213      	str	r2, [sp, #76]	; 0x4c
 8016ade:	e770      	b.n	80169c2 <_dtoa_r+0x112>
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	e7b4      	b.n	8016a4e <_dtoa_r+0x19e>
 8016ae4:	900f      	str	r0, [sp, #60]	; 0x3c
 8016ae6:	e7b3      	b.n	8016a50 <_dtoa_r+0x1a0>
 8016ae8:	f1cb 0300 	rsb	r3, fp, #0
 8016aec:	930a      	str	r3, [sp, #40]	; 0x28
 8016aee:	2300      	movs	r3, #0
 8016af0:	eba9 090b 	sub.w	r9, r9, fp
 8016af4:	930e      	str	r3, [sp, #56]	; 0x38
 8016af6:	e7c1      	b.n	8016a7c <_dtoa_r+0x1cc>
 8016af8:	2300      	movs	r3, #0
 8016afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8016afc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	dc53      	bgt.n	8016baa <_dtoa_r+0x2fa>
 8016b02:	2301      	movs	r3, #1
 8016b04:	9306      	str	r3, [sp, #24]
 8016b06:	9308      	str	r3, [sp, #32]
 8016b08:	461a      	mov	r2, r3
 8016b0a:	9223      	str	r2, [sp, #140]	; 0x8c
 8016b0c:	e00b      	b.n	8016b26 <_dtoa_r+0x276>
 8016b0e:	2301      	movs	r3, #1
 8016b10:	e7f3      	b.n	8016afa <_dtoa_r+0x24a>
 8016b12:	2300      	movs	r3, #0
 8016b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016b18:	445b      	add	r3, fp
 8016b1a:	9306      	str	r3, [sp, #24]
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	2b01      	cmp	r3, #1
 8016b20:	9308      	str	r3, [sp, #32]
 8016b22:	bfb8      	it	lt
 8016b24:	2301      	movlt	r3, #1
 8016b26:	69e8      	ldr	r0, [r5, #28]
 8016b28:	2100      	movs	r1, #0
 8016b2a:	2204      	movs	r2, #4
 8016b2c:	f102 0614 	add.w	r6, r2, #20
 8016b30:	429e      	cmp	r6, r3
 8016b32:	d93e      	bls.n	8016bb2 <_dtoa_r+0x302>
 8016b34:	6041      	str	r1, [r0, #4]
 8016b36:	4628      	mov	r0, r5
 8016b38:	f001 fbfe 	bl	8018338 <_Balloc>
 8016b3c:	9003      	str	r0, [sp, #12]
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	d13a      	bne.n	8016bb8 <_dtoa_r+0x308>
 8016b42:	4b17      	ldr	r3, [pc, #92]	; (8016ba0 <_dtoa_r+0x2f0>)
 8016b44:	4602      	mov	r2, r0
 8016b46:	f240 11af 	movw	r1, #431	; 0x1af
 8016b4a:	e6c5      	b.n	80168d8 <_dtoa_r+0x28>
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	e7e1      	b.n	8016b14 <_dtoa_r+0x264>
 8016b50:	2401      	movs	r4, #1
 8016b52:	2300      	movs	r3, #0
 8016b54:	9322      	str	r3, [sp, #136]	; 0x88
 8016b56:	940b      	str	r4, [sp, #44]	; 0x2c
 8016b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b5c:	9306      	str	r3, [sp, #24]
 8016b5e:	9308      	str	r3, [sp, #32]
 8016b60:	2200      	movs	r2, #0
 8016b62:	2312      	movs	r3, #18
 8016b64:	e7d1      	b.n	8016b0a <_dtoa_r+0x25a>
 8016b66:	bf00      	nop
 8016b68:	636f4361 	.word	0x636f4361
 8016b6c:	3fd287a7 	.word	0x3fd287a7
 8016b70:	8b60c8b3 	.word	0x8b60c8b3
 8016b74:	3fc68a28 	.word	0x3fc68a28
 8016b78:	509f79fb 	.word	0x509f79fb
 8016b7c:	3fd34413 	.word	0x3fd34413
 8016b80:	0801a5b2 	.word	0x0801a5b2
 8016b84:	0801a5c9 	.word	0x0801a5c9
 8016b88:	7ff00000 	.word	0x7ff00000
 8016b8c:	0801a5ae 	.word	0x0801a5ae
 8016b90:	0801a5a5 	.word	0x0801a5a5
 8016b94:	0801a3e0 	.word	0x0801a3e0
 8016b98:	3ff80000 	.word	0x3ff80000
 8016b9c:	0801a728 	.word	0x0801a728
 8016ba0:	0801a621 	.word	0x0801a621
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ba8:	e7d6      	b.n	8016b58 <_dtoa_r+0x2a8>
 8016baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016bac:	9306      	str	r3, [sp, #24]
 8016bae:	9308      	str	r3, [sp, #32]
 8016bb0:	e7b9      	b.n	8016b26 <_dtoa_r+0x276>
 8016bb2:	3101      	adds	r1, #1
 8016bb4:	0052      	lsls	r2, r2, #1
 8016bb6:	e7b9      	b.n	8016b2c <_dtoa_r+0x27c>
 8016bb8:	69eb      	ldr	r3, [r5, #28]
 8016bba:	9a03      	ldr	r2, [sp, #12]
 8016bbc:	601a      	str	r2, [r3, #0]
 8016bbe:	9b08      	ldr	r3, [sp, #32]
 8016bc0:	2b0e      	cmp	r3, #14
 8016bc2:	f200 80a8 	bhi.w	8016d16 <_dtoa_r+0x466>
 8016bc6:	2c00      	cmp	r4, #0
 8016bc8:	f000 80a5 	beq.w	8016d16 <_dtoa_r+0x466>
 8016bcc:	f1bb 0f00 	cmp.w	fp, #0
 8016bd0:	dd34      	ble.n	8016c3c <_dtoa_r+0x38c>
 8016bd2:	4b9a      	ldr	r3, [pc, #616]	; (8016e3c <_dtoa_r+0x58c>)
 8016bd4:	f00b 020f 	and.w	r2, fp, #15
 8016bd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016bdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016be0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016be4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8016be8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8016bec:	d016      	beq.n	8016c1c <_dtoa_r+0x36c>
 8016bee:	4b94      	ldr	r3, [pc, #592]	; (8016e40 <_dtoa_r+0x590>)
 8016bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016bf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016bf8:	f7e9 fe00 	bl	80007fc <__aeabi_ddiv>
 8016bfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016c00:	f004 040f 	and.w	r4, r4, #15
 8016c04:	2703      	movs	r7, #3
 8016c06:	4e8e      	ldr	r6, [pc, #568]	; (8016e40 <_dtoa_r+0x590>)
 8016c08:	b954      	cbnz	r4, 8016c20 <_dtoa_r+0x370>
 8016c0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016c0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016c12:	f7e9 fdf3 	bl	80007fc <__aeabi_ddiv>
 8016c16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016c1a:	e029      	b.n	8016c70 <_dtoa_r+0x3c0>
 8016c1c:	2702      	movs	r7, #2
 8016c1e:	e7f2      	b.n	8016c06 <_dtoa_r+0x356>
 8016c20:	07e1      	lsls	r1, r4, #31
 8016c22:	d508      	bpl.n	8016c36 <_dtoa_r+0x386>
 8016c24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016c28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016c2c:	f7e9 fcbc 	bl	80005a8 <__aeabi_dmul>
 8016c30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8016c34:	3701      	adds	r7, #1
 8016c36:	1064      	asrs	r4, r4, #1
 8016c38:	3608      	adds	r6, #8
 8016c3a:	e7e5      	b.n	8016c08 <_dtoa_r+0x358>
 8016c3c:	f000 80a5 	beq.w	8016d8a <_dtoa_r+0x4da>
 8016c40:	f1cb 0400 	rsb	r4, fp, #0
 8016c44:	4b7d      	ldr	r3, [pc, #500]	; (8016e3c <_dtoa_r+0x58c>)
 8016c46:	4e7e      	ldr	r6, [pc, #504]	; (8016e40 <_dtoa_r+0x590>)
 8016c48:	f004 020f 	and.w	r2, r4, #15
 8016c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016c58:	f7e9 fca6 	bl	80005a8 <__aeabi_dmul>
 8016c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016c60:	1124      	asrs	r4, r4, #4
 8016c62:	2300      	movs	r3, #0
 8016c64:	2702      	movs	r7, #2
 8016c66:	2c00      	cmp	r4, #0
 8016c68:	f040 8084 	bne.w	8016d74 <_dtoa_r+0x4c4>
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d1d2      	bne.n	8016c16 <_dtoa_r+0x366>
 8016c70:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016c74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8016c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	f000 8087 	beq.w	8016d8e <_dtoa_r+0x4de>
 8016c80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016c84:	4b6f      	ldr	r3, [pc, #444]	; (8016e44 <_dtoa_r+0x594>)
 8016c86:	2200      	movs	r2, #0
 8016c88:	f7e9 ff00 	bl	8000a8c <__aeabi_dcmplt>
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	d07e      	beq.n	8016d8e <_dtoa_r+0x4de>
 8016c90:	9b08      	ldr	r3, [sp, #32]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d07b      	beq.n	8016d8e <_dtoa_r+0x4de>
 8016c96:	9b06      	ldr	r3, [sp, #24]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	dd38      	ble.n	8016d0e <_dtoa_r+0x45e>
 8016c9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016ca0:	4b69      	ldr	r3, [pc, #420]	; (8016e48 <_dtoa_r+0x598>)
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	f7e9 fc80 	bl	80005a8 <__aeabi_dmul>
 8016ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016cac:	9c06      	ldr	r4, [sp, #24]
 8016cae:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 8016cb2:	3701      	adds	r7, #1
 8016cb4:	4638      	mov	r0, r7
 8016cb6:	f7e9 fc0d 	bl	80004d4 <__aeabi_i2d>
 8016cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016cbe:	f7e9 fc73 	bl	80005a8 <__aeabi_dmul>
 8016cc2:	4b62      	ldr	r3, [pc, #392]	; (8016e4c <_dtoa_r+0x59c>)
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	f7e9 fab9 	bl	800023c <__adddf3>
 8016cca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016cce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8016cd2:	9611      	str	r6, [sp, #68]	; 0x44
 8016cd4:	2c00      	cmp	r4, #0
 8016cd6:	d15d      	bne.n	8016d94 <_dtoa_r+0x4e4>
 8016cd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016cdc:	4b5c      	ldr	r3, [pc, #368]	; (8016e50 <_dtoa_r+0x5a0>)
 8016cde:	2200      	movs	r2, #0
 8016ce0:	f7e9 faaa 	bl	8000238 <__aeabi_dsub>
 8016ce4:	4602      	mov	r2, r0
 8016ce6:	460b      	mov	r3, r1
 8016ce8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016cec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016cee:	4633      	mov	r3, r6
 8016cf0:	f7e9 feea 	bl	8000ac8 <__aeabi_dcmpgt>
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	f040 8295 	bne.w	8017224 <_dtoa_r+0x974>
 8016cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016cfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016d04:	f7e9 fec2 	bl	8000a8c <__aeabi_dcmplt>
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	f040 8289 	bne.w	8017220 <_dtoa_r+0x970>
 8016d0e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8016d12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8016d16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	f2c0 8151 	blt.w	8016fc0 <_dtoa_r+0x710>
 8016d1e:	f1bb 0f0e 	cmp.w	fp, #14
 8016d22:	f300 814d 	bgt.w	8016fc0 <_dtoa_r+0x710>
 8016d26:	4b45      	ldr	r3, [pc, #276]	; (8016e3c <_dtoa_r+0x58c>)
 8016d28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016d2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016d30:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8016d34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	f280 80da 	bge.w	8016ef0 <_dtoa_r+0x640>
 8016d3c:	9b08      	ldr	r3, [sp, #32]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	f300 80d6 	bgt.w	8016ef0 <_dtoa_r+0x640>
 8016d44:	f040 826b 	bne.w	801721e <_dtoa_r+0x96e>
 8016d48:	4b41      	ldr	r3, [pc, #260]	; (8016e50 <_dtoa_r+0x5a0>)
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016d50:	f7e9 fc2a 	bl	80005a8 <__aeabi_dmul>
 8016d54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016d58:	f7e9 feac 	bl	8000ab4 <__aeabi_dcmpge>
 8016d5c:	9c08      	ldr	r4, [sp, #32]
 8016d5e:	4626      	mov	r6, r4
 8016d60:	2800      	cmp	r0, #0
 8016d62:	f040 8241 	bne.w	80171e8 <_dtoa_r+0x938>
 8016d66:	9f03      	ldr	r7, [sp, #12]
 8016d68:	2331      	movs	r3, #49	; 0x31
 8016d6a:	f807 3b01 	strb.w	r3, [r7], #1
 8016d6e:	f10b 0b01 	add.w	fp, fp, #1
 8016d72:	e23d      	b.n	80171f0 <_dtoa_r+0x940>
 8016d74:	07e2      	lsls	r2, r4, #31
 8016d76:	d505      	bpl.n	8016d84 <_dtoa_r+0x4d4>
 8016d78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016d7c:	f7e9 fc14 	bl	80005a8 <__aeabi_dmul>
 8016d80:	3701      	adds	r7, #1
 8016d82:	2301      	movs	r3, #1
 8016d84:	1064      	asrs	r4, r4, #1
 8016d86:	3608      	adds	r6, #8
 8016d88:	e76d      	b.n	8016c66 <_dtoa_r+0x3b6>
 8016d8a:	2702      	movs	r7, #2
 8016d8c:	e770      	b.n	8016c70 <_dtoa_r+0x3c0>
 8016d8e:	9c08      	ldr	r4, [sp, #32]
 8016d90:	46d8      	mov	r8, fp
 8016d92:	e78f      	b.n	8016cb4 <_dtoa_r+0x404>
 8016d94:	9903      	ldr	r1, [sp, #12]
 8016d96:	4b29      	ldr	r3, [pc, #164]	; (8016e3c <_dtoa_r+0x58c>)
 8016d98:	4421      	add	r1, r4
 8016d9a:	9112      	str	r1, [sp, #72]	; 0x48
 8016d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016da2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8016da6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016daa:	2900      	cmp	r1, #0
 8016dac:	d054      	beq.n	8016e58 <_dtoa_r+0x5a8>
 8016dae:	4929      	ldr	r1, [pc, #164]	; (8016e54 <_dtoa_r+0x5a4>)
 8016db0:	2000      	movs	r0, #0
 8016db2:	f7e9 fd23 	bl	80007fc <__aeabi_ddiv>
 8016db6:	463b      	mov	r3, r7
 8016db8:	4632      	mov	r2, r6
 8016dba:	f7e9 fa3d 	bl	8000238 <__aeabi_dsub>
 8016dbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8016dc2:	9f03      	ldr	r7, [sp, #12]
 8016dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016dc8:	f7e9 fe9e 	bl	8000b08 <__aeabi_d2iz>
 8016dcc:	4604      	mov	r4, r0
 8016dce:	f7e9 fb81 	bl	80004d4 <__aeabi_i2d>
 8016dd2:	4602      	mov	r2, r0
 8016dd4:	460b      	mov	r3, r1
 8016dd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016dda:	f7e9 fa2d 	bl	8000238 <__aeabi_dsub>
 8016dde:	3430      	adds	r4, #48	; 0x30
 8016de0:	4602      	mov	r2, r0
 8016de2:	460b      	mov	r3, r1
 8016de4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016de8:	f807 4b01 	strb.w	r4, [r7], #1
 8016dec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016df0:	f7e9 fe4c 	bl	8000a8c <__aeabi_dcmplt>
 8016df4:	2800      	cmp	r0, #0
 8016df6:	d173      	bne.n	8016ee0 <_dtoa_r+0x630>
 8016df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016dfc:	4911      	ldr	r1, [pc, #68]	; (8016e44 <_dtoa_r+0x594>)
 8016dfe:	2000      	movs	r0, #0
 8016e00:	f7e9 fa1a 	bl	8000238 <__aeabi_dsub>
 8016e04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016e08:	f7e9 fe40 	bl	8000a8c <__aeabi_dcmplt>
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	f040 80b6 	bne.w	8016f7e <_dtoa_r+0x6ce>
 8016e12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016e14:	429f      	cmp	r7, r3
 8016e16:	f43f af7a 	beq.w	8016d0e <_dtoa_r+0x45e>
 8016e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016e1e:	4b0a      	ldr	r3, [pc, #40]	; (8016e48 <_dtoa_r+0x598>)
 8016e20:	2200      	movs	r2, #0
 8016e22:	f7e9 fbc1 	bl	80005a8 <__aeabi_dmul>
 8016e26:	4b08      	ldr	r3, [pc, #32]	; (8016e48 <_dtoa_r+0x598>)
 8016e28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016e32:	f7e9 fbb9 	bl	80005a8 <__aeabi_dmul>
 8016e36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016e3a:	e7c3      	b.n	8016dc4 <_dtoa_r+0x514>
 8016e3c:	0801a728 	.word	0x0801a728
 8016e40:	0801a700 	.word	0x0801a700
 8016e44:	3ff00000 	.word	0x3ff00000
 8016e48:	40240000 	.word	0x40240000
 8016e4c:	401c0000 	.word	0x401c0000
 8016e50:	40140000 	.word	0x40140000
 8016e54:	3fe00000 	.word	0x3fe00000
 8016e58:	4630      	mov	r0, r6
 8016e5a:	4639      	mov	r1, r7
 8016e5c:	f7e9 fba4 	bl	80005a8 <__aeabi_dmul>
 8016e60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8016e64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016e66:	9c03      	ldr	r4, [sp, #12]
 8016e68:	9314      	str	r3, [sp, #80]	; 0x50
 8016e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016e6e:	f7e9 fe4b 	bl	8000b08 <__aeabi_d2iz>
 8016e72:	9015      	str	r0, [sp, #84]	; 0x54
 8016e74:	f7e9 fb2e 	bl	80004d4 <__aeabi_i2d>
 8016e78:	4602      	mov	r2, r0
 8016e7a:	460b      	mov	r3, r1
 8016e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016e80:	f7e9 f9da 	bl	8000238 <__aeabi_dsub>
 8016e84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e86:	3330      	adds	r3, #48	; 0x30
 8016e88:	f804 3b01 	strb.w	r3, [r4], #1
 8016e8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016e8e:	429c      	cmp	r4, r3
 8016e90:	4606      	mov	r6, r0
 8016e92:	460f      	mov	r7, r1
 8016e94:	f04f 0200 	mov.w	r2, #0
 8016e98:	d124      	bne.n	8016ee4 <_dtoa_r+0x634>
 8016e9a:	4bb0      	ldr	r3, [pc, #704]	; (801715c <_dtoa_r+0x8ac>)
 8016e9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016ea0:	f7e9 f9cc 	bl	800023c <__adddf3>
 8016ea4:	4602      	mov	r2, r0
 8016ea6:	460b      	mov	r3, r1
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	4639      	mov	r1, r7
 8016eac:	f7e9 fe0c 	bl	8000ac8 <__aeabi_dcmpgt>
 8016eb0:	2800      	cmp	r0, #0
 8016eb2:	d163      	bne.n	8016f7c <_dtoa_r+0x6cc>
 8016eb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016eb8:	49a8      	ldr	r1, [pc, #672]	; (801715c <_dtoa_r+0x8ac>)
 8016eba:	2000      	movs	r0, #0
 8016ebc:	f7e9 f9bc 	bl	8000238 <__aeabi_dsub>
 8016ec0:	4602      	mov	r2, r0
 8016ec2:	460b      	mov	r3, r1
 8016ec4:	4630      	mov	r0, r6
 8016ec6:	4639      	mov	r1, r7
 8016ec8:	f7e9 fde0 	bl	8000a8c <__aeabi_dcmplt>
 8016ecc:	2800      	cmp	r0, #0
 8016ece:	f43f af1e 	beq.w	8016d0e <_dtoa_r+0x45e>
 8016ed2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8016ed4:	1e7b      	subs	r3, r7, #1
 8016ed6:	9314      	str	r3, [sp, #80]	; 0x50
 8016ed8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8016edc:	2b30      	cmp	r3, #48	; 0x30
 8016ede:	d0f8      	beq.n	8016ed2 <_dtoa_r+0x622>
 8016ee0:	46c3      	mov	fp, r8
 8016ee2:	e03b      	b.n	8016f5c <_dtoa_r+0x6ac>
 8016ee4:	4b9e      	ldr	r3, [pc, #632]	; (8017160 <_dtoa_r+0x8b0>)
 8016ee6:	f7e9 fb5f 	bl	80005a8 <__aeabi_dmul>
 8016eea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016eee:	e7bc      	b.n	8016e6a <_dtoa_r+0x5ba>
 8016ef0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016ef4:	9f03      	ldr	r7, [sp, #12]
 8016ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016efa:	4640      	mov	r0, r8
 8016efc:	4649      	mov	r1, r9
 8016efe:	f7e9 fc7d 	bl	80007fc <__aeabi_ddiv>
 8016f02:	f7e9 fe01 	bl	8000b08 <__aeabi_d2iz>
 8016f06:	4604      	mov	r4, r0
 8016f08:	f7e9 fae4 	bl	80004d4 <__aeabi_i2d>
 8016f0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f10:	f7e9 fb4a 	bl	80005a8 <__aeabi_dmul>
 8016f14:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8016f18:	4602      	mov	r2, r0
 8016f1a:	460b      	mov	r3, r1
 8016f1c:	4640      	mov	r0, r8
 8016f1e:	4649      	mov	r1, r9
 8016f20:	f7e9 f98a 	bl	8000238 <__aeabi_dsub>
 8016f24:	f807 6b01 	strb.w	r6, [r7], #1
 8016f28:	9e03      	ldr	r6, [sp, #12]
 8016f2a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8016f2e:	1bbe      	subs	r6, r7, r6
 8016f30:	45b4      	cmp	ip, r6
 8016f32:	4602      	mov	r2, r0
 8016f34:	460b      	mov	r3, r1
 8016f36:	d136      	bne.n	8016fa6 <_dtoa_r+0x6f6>
 8016f38:	f7e9 f980 	bl	800023c <__adddf3>
 8016f3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f40:	4680      	mov	r8, r0
 8016f42:	4689      	mov	r9, r1
 8016f44:	f7e9 fdc0 	bl	8000ac8 <__aeabi_dcmpgt>
 8016f48:	bb58      	cbnz	r0, 8016fa2 <_dtoa_r+0x6f2>
 8016f4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f4e:	4640      	mov	r0, r8
 8016f50:	4649      	mov	r1, r9
 8016f52:	f7e9 fd91 	bl	8000a78 <__aeabi_dcmpeq>
 8016f56:	b108      	cbz	r0, 8016f5c <_dtoa_r+0x6ac>
 8016f58:	07e3      	lsls	r3, r4, #31
 8016f5a:	d422      	bmi.n	8016fa2 <_dtoa_r+0x6f2>
 8016f5c:	4651      	mov	r1, sl
 8016f5e:	4628      	mov	r0, r5
 8016f60:	f001 fa2a 	bl	80183b8 <_Bfree>
 8016f64:	2300      	movs	r3, #0
 8016f66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016f68:	703b      	strb	r3, [r7, #0]
 8016f6a:	f10b 0301 	add.w	r3, fp, #1
 8016f6e:	6013      	str	r3, [r2, #0]
 8016f70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	f43f ace9 	beq.w	801694a <_dtoa_r+0x9a>
 8016f78:	601f      	str	r7, [r3, #0]
 8016f7a:	e4e6      	b.n	801694a <_dtoa_r+0x9a>
 8016f7c:	4627      	mov	r7, r4
 8016f7e:	463b      	mov	r3, r7
 8016f80:	461f      	mov	r7, r3
 8016f82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016f86:	2a39      	cmp	r2, #57	; 0x39
 8016f88:	d107      	bne.n	8016f9a <_dtoa_r+0x6ea>
 8016f8a:	9a03      	ldr	r2, [sp, #12]
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d1f7      	bne.n	8016f80 <_dtoa_r+0x6d0>
 8016f90:	9903      	ldr	r1, [sp, #12]
 8016f92:	2230      	movs	r2, #48	; 0x30
 8016f94:	f108 0801 	add.w	r8, r8, #1
 8016f98:	700a      	strb	r2, [r1, #0]
 8016f9a:	781a      	ldrb	r2, [r3, #0]
 8016f9c:	3201      	adds	r2, #1
 8016f9e:	701a      	strb	r2, [r3, #0]
 8016fa0:	e79e      	b.n	8016ee0 <_dtoa_r+0x630>
 8016fa2:	46d8      	mov	r8, fp
 8016fa4:	e7eb      	b.n	8016f7e <_dtoa_r+0x6ce>
 8016fa6:	4b6e      	ldr	r3, [pc, #440]	; (8017160 <_dtoa_r+0x8b0>)
 8016fa8:	2200      	movs	r2, #0
 8016faa:	f7e9 fafd 	bl	80005a8 <__aeabi_dmul>
 8016fae:	2200      	movs	r2, #0
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	4680      	mov	r8, r0
 8016fb4:	4689      	mov	r9, r1
 8016fb6:	f7e9 fd5f 	bl	8000a78 <__aeabi_dcmpeq>
 8016fba:	2800      	cmp	r0, #0
 8016fbc:	d09b      	beq.n	8016ef6 <_dtoa_r+0x646>
 8016fbe:	e7cd      	b.n	8016f5c <_dtoa_r+0x6ac>
 8016fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016fc2:	2a00      	cmp	r2, #0
 8016fc4:	f000 80c4 	beq.w	8017150 <_dtoa_r+0x8a0>
 8016fc8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016fca:	2a01      	cmp	r2, #1
 8016fcc:	f300 80a8 	bgt.w	8017120 <_dtoa_r+0x870>
 8016fd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016fd2:	2a00      	cmp	r2, #0
 8016fd4:	f000 80a0 	beq.w	8017118 <_dtoa_r+0x868>
 8016fd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016fdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016fde:	464f      	mov	r7, r9
 8016fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fe2:	2101      	movs	r1, #1
 8016fe4:	441a      	add	r2, r3
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	4499      	add	r9, r3
 8016fea:	9209      	str	r2, [sp, #36]	; 0x24
 8016fec:	f001 fae4 	bl	80185b8 <__i2b>
 8016ff0:	4606      	mov	r6, r0
 8016ff2:	b15f      	cbz	r7, 801700c <_dtoa_r+0x75c>
 8016ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	dd08      	ble.n	801700c <_dtoa_r+0x75c>
 8016ffa:	42bb      	cmp	r3, r7
 8016ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ffe:	bfa8      	it	ge
 8017000:	463b      	movge	r3, r7
 8017002:	eba9 0903 	sub.w	r9, r9, r3
 8017006:	1aff      	subs	r7, r7, r3
 8017008:	1ad3      	subs	r3, r2, r3
 801700a:	9309      	str	r3, [sp, #36]	; 0x24
 801700c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801700e:	b1f3      	cbz	r3, 801704e <_dtoa_r+0x79e>
 8017010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017012:	2b00      	cmp	r3, #0
 8017014:	f000 80a0 	beq.w	8017158 <_dtoa_r+0x8a8>
 8017018:	2c00      	cmp	r4, #0
 801701a:	dd10      	ble.n	801703e <_dtoa_r+0x78e>
 801701c:	4631      	mov	r1, r6
 801701e:	4622      	mov	r2, r4
 8017020:	4628      	mov	r0, r5
 8017022:	f001 fb89 	bl	8018738 <__pow5mult>
 8017026:	4652      	mov	r2, sl
 8017028:	4601      	mov	r1, r0
 801702a:	4606      	mov	r6, r0
 801702c:	4628      	mov	r0, r5
 801702e:	f001 fad9 	bl	80185e4 <__multiply>
 8017032:	4651      	mov	r1, sl
 8017034:	4680      	mov	r8, r0
 8017036:	4628      	mov	r0, r5
 8017038:	f001 f9be 	bl	80183b8 <_Bfree>
 801703c:	46c2      	mov	sl, r8
 801703e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017040:	1b1a      	subs	r2, r3, r4
 8017042:	d004      	beq.n	801704e <_dtoa_r+0x79e>
 8017044:	4651      	mov	r1, sl
 8017046:	4628      	mov	r0, r5
 8017048:	f001 fb76 	bl	8018738 <__pow5mult>
 801704c:	4682      	mov	sl, r0
 801704e:	2101      	movs	r1, #1
 8017050:	4628      	mov	r0, r5
 8017052:	f001 fab1 	bl	80185b8 <__i2b>
 8017056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017058:	2b00      	cmp	r3, #0
 801705a:	4604      	mov	r4, r0
 801705c:	f340 8082 	ble.w	8017164 <_dtoa_r+0x8b4>
 8017060:	461a      	mov	r2, r3
 8017062:	4601      	mov	r1, r0
 8017064:	4628      	mov	r0, r5
 8017066:	f001 fb67 	bl	8018738 <__pow5mult>
 801706a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801706c:	2b01      	cmp	r3, #1
 801706e:	4604      	mov	r4, r0
 8017070:	dd7b      	ble.n	801716a <_dtoa_r+0x8ba>
 8017072:	f04f 0800 	mov.w	r8, #0
 8017076:	6923      	ldr	r3, [r4, #16]
 8017078:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801707c:	6918      	ldr	r0, [r3, #16]
 801707e:	f001 fa4d 	bl	801851c <__hi0bits>
 8017082:	f1c0 0020 	rsb	r0, r0, #32
 8017086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017088:	4418      	add	r0, r3
 801708a:	f010 001f 	ands.w	r0, r0, #31
 801708e:	f000 8092 	beq.w	80171b6 <_dtoa_r+0x906>
 8017092:	f1c0 0320 	rsb	r3, r0, #32
 8017096:	2b04      	cmp	r3, #4
 8017098:	f340 8085 	ble.w	80171a6 <_dtoa_r+0x8f6>
 801709c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801709e:	f1c0 001c 	rsb	r0, r0, #28
 80170a2:	4403      	add	r3, r0
 80170a4:	4481      	add	r9, r0
 80170a6:	4407      	add	r7, r0
 80170a8:	9309      	str	r3, [sp, #36]	; 0x24
 80170aa:	f1b9 0f00 	cmp.w	r9, #0
 80170ae:	dd05      	ble.n	80170bc <_dtoa_r+0x80c>
 80170b0:	4651      	mov	r1, sl
 80170b2:	464a      	mov	r2, r9
 80170b4:	4628      	mov	r0, r5
 80170b6:	f001 fb99 	bl	80187ec <__lshift>
 80170ba:	4682      	mov	sl, r0
 80170bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170be:	2b00      	cmp	r3, #0
 80170c0:	dd05      	ble.n	80170ce <_dtoa_r+0x81e>
 80170c2:	4621      	mov	r1, r4
 80170c4:	461a      	mov	r2, r3
 80170c6:	4628      	mov	r0, r5
 80170c8:	f001 fb90 	bl	80187ec <__lshift>
 80170cc:	4604      	mov	r4, r0
 80170ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d072      	beq.n	80171ba <_dtoa_r+0x90a>
 80170d4:	4621      	mov	r1, r4
 80170d6:	4650      	mov	r0, sl
 80170d8:	f001 fbf4 	bl	80188c4 <__mcmp>
 80170dc:	2800      	cmp	r0, #0
 80170de:	da6c      	bge.n	80171ba <_dtoa_r+0x90a>
 80170e0:	2300      	movs	r3, #0
 80170e2:	4651      	mov	r1, sl
 80170e4:	220a      	movs	r2, #10
 80170e6:	4628      	mov	r0, r5
 80170e8:	f001 f988 	bl	80183fc <__multadd>
 80170ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170ee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80170f2:	4682      	mov	sl, r0
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	f000 81ad 	beq.w	8017454 <_dtoa_r+0xba4>
 80170fa:	2300      	movs	r3, #0
 80170fc:	4631      	mov	r1, r6
 80170fe:	220a      	movs	r2, #10
 8017100:	4628      	mov	r0, r5
 8017102:	f001 f97b 	bl	80183fc <__multadd>
 8017106:	9b06      	ldr	r3, [sp, #24]
 8017108:	2b00      	cmp	r3, #0
 801710a:	4606      	mov	r6, r0
 801710c:	f300 8093 	bgt.w	8017236 <_dtoa_r+0x986>
 8017110:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017112:	2b02      	cmp	r3, #2
 8017114:	dc59      	bgt.n	80171ca <_dtoa_r+0x91a>
 8017116:	e08e      	b.n	8017236 <_dtoa_r+0x986>
 8017118:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801711a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801711e:	e75d      	b.n	8016fdc <_dtoa_r+0x72c>
 8017120:	9b08      	ldr	r3, [sp, #32]
 8017122:	1e5c      	subs	r4, r3, #1
 8017124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017126:	42a3      	cmp	r3, r4
 8017128:	bfbf      	itttt	lt
 801712a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801712c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801712e:	940a      	strlt	r4, [sp, #40]	; 0x28
 8017130:	1ae3      	sublt	r3, r4, r3
 8017132:	bfb4      	ite	lt
 8017134:	18d2      	addlt	r2, r2, r3
 8017136:	1b1c      	subge	r4, r3, r4
 8017138:	9b08      	ldr	r3, [sp, #32]
 801713a:	bfbc      	itt	lt
 801713c:	920e      	strlt	r2, [sp, #56]	; 0x38
 801713e:	2400      	movlt	r4, #0
 8017140:	2b00      	cmp	r3, #0
 8017142:	bfb5      	itete	lt
 8017144:	eba9 0703 	sublt.w	r7, r9, r3
 8017148:	9b08      	ldrge	r3, [sp, #32]
 801714a:	2300      	movlt	r3, #0
 801714c:	464f      	movge	r7, r9
 801714e:	e747      	b.n	8016fe0 <_dtoa_r+0x730>
 8017150:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017152:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8017154:	464f      	mov	r7, r9
 8017156:	e74c      	b.n	8016ff2 <_dtoa_r+0x742>
 8017158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801715a:	e773      	b.n	8017044 <_dtoa_r+0x794>
 801715c:	3fe00000 	.word	0x3fe00000
 8017160:	40240000 	.word	0x40240000
 8017164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017166:	2b01      	cmp	r3, #1
 8017168:	dc18      	bgt.n	801719c <_dtoa_r+0x8ec>
 801716a:	9b04      	ldr	r3, [sp, #16]
 801716c:	b9b3      	cbnz	r3, 801719c <_dtoa_r+0x8ec>
 801716e:	9b05      	ldr	r3, [sp, #20]
 8017170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017174:	b993      	cbnz	r3, 801719c <_dtoa_r+0x8ec>
 8017176:	9b05      	ldr	r3, [sp, #20]
 8017178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801717c:	0d1b      	lsrs	r3, r3, #20
 801717e:	051b      	lsls	r3, r3, #20
 8017180:	b17b      	cbz	r3, 80171a2 <_dtoa_r+0x8f2>
 8017182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017184:	3301      	adds	r3, #1
 8017186:	f109 0901 	add.w	r9, r9, #1
 801718a:	9309      	str	r3, [sp, #36]	; 0x24
 801718c:	f04f 0801 	mov.w	r8, #1
 8017190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017192:	2b00      	cmp	r3, #0
 8017194:	f47f af6f 	bne.w	8017076 <_dtoa_r+0x7c6>
 8017198:	2001      	movs	r0, #1
 801719a:	e774      	b.n	8017086 <_dtoa_r+0x7d6>
 801719c:	f04f 0800 	mov.w	r8, #0
 80171a0:	e7f6      	b.n	8017190 <_dtoa_r+0x8e0>
 80171a2:	4698      	mov	r8, r3
 80171a4:	e7f4      	b.n	8017190 <_dtoa_r+0x8e0>
 80171a6:	d080      	beq.n	80170aa <_dtoa_r+0x7fa>
 80171a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171aa:	331c      	adds	r3, #28
 80171ac:	441a      	add	r2, r3
 80171ae:	4499      	add	r9, r3
 80171b0:	441f      	add	r7, r3
 80171b2:	9209      	str	r2, [sp, #36]	; 0x24
 80171b4:	e779      	b.n	80170aa <_dtoa_r+0x7fa>
 80171b6:	4603      	mov	r3, r0
 80171b8:	e7f6      	b.n	80171a8 <_dtoa_r+0x8f8>
 80171ba:	9b08      	ldr	r3, [sp, #32]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	dc34      	bgt.n	801722a <_dtoa_r+0x97a>
 80171c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80171c2:	2b02      	cmp	r3, #2
 80171c4:	dd31      	ble.n	801722a <_dtoa_r+0x97a>
 80171c6:	9b08      	ldr	r3, [sp, #32]
 80171c8:	9306      	str	r3, [sp, #24]
 80171ca:	9b06      	ldr	r3, [sp, #24]
 80171cc:	b963      	cbnz	r3, 80171e8 <_dtoa_r+0x938>
 80171ce:	4621      	mov	r1, r4
 80171d0:	2205      	movs	r2, #5
 80171d2:	4628      	mov	r0, r5
 80171d4:	f001 f912 	bl	80183fc <__multadd>
 80171d8:	4601      	mov	r1, r0
 80171da:	4604      	mov	r4, r0
 80171dc:	4650      	mov	r0, sl
 80171de:	f001 fb71 	bl	80188c4 <__mcmp>
 80171e2:	2800      	cmp	r0, #0
 80171e4:	f73f adbf 	bgt.w	8016d66 <_dtoa_r+0x4b6>
 80171e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80171ea:	9f03      	ldr	r7, [sp, #12]
 80171ec:	ea6f 0b03 	mvn.w	fp, r3
 80171f0:	f04f 0800 	mov.w	r8, #0
 80171f4:	4621      	mov	r1, r4
 80171f6:	4628      	mov	r0, r5
 80171f8:	f001 f8de 	bl	80183b8 <_Bfree>
 80171fc:	2e00      	cmp	r6, #0
 80171fe:	f43f aead 	beq.w	8016f5c <_dtoa_r+0x6ac>
 8017202:	f1b8 0f00 	cmp.w	r8, #0
 8017206:	d005      	beq.n	8017214 <_dtoa_r+0x964>
 8017208:	45b0      	cmp	r8, r6
 801720a:	d003      	beq.n	8017214 <_dtoa_r+0x964>
 801720c:	4641      	mov	r1, r8
 801720e:	4628      	mov	r0, r5
 8017210:	f001 f8d2 	bl	80183b8 <_Bfree>
 8017214:	4631      	mov	r1, r6
 8017216:	4628      	mov	r0, r5
 8017218:	f001 f8ce 	bl	80183b8 <_Bfree>
 801721c:	e69e      	b.n	8016f5c <_dtoa_r+0x6ac>
 801721e:	2400      	movs	r4, #0
 8017220:	4626      	mov	r6, r4
 8017222:	e7e1      	b.n	80171e8 <_dtoa_r+0x938>
 8017224:	46c3      	mov	fp, r8
 8017226:	4626      	mov	r6, r4
 8017228:	e59d      	b.n	8016d66 <_dtoa_r+0x4b6>
 801722a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801722c:	2b00      	cmp	r3, #0
 801722e:	f000 80c8 	beq.w	80173c2 <_dtoa_r+0xb12>
 8017232:	9b08      	ldr	r3, [sp, #32]
 8017234:	9306      	str	r3, [sp, #24]
 8017236:	2f00      	cmp	r7, #0
 8017238:	dd05      	ble.n	8017246 <_dtoa_r+0x996>
 801723a:	4631      	mov	r1, r6
 801723c:	463a      	mov	r2, r7
 801723e:	4628      	mov	r0, r5
 8017240:	f001 fad4 	bl	80187ec <__lshift>
 8017244:	4606      	mov	r6, r0
 8017246:	f1b8 0f00 	cmp.w	r8, #0
 801724a:	d05b      	beq.n	8017304 <_dtoa_r+0xa54>
 801724c:	6871      	ldr	r1, [r6, #4]
 801724e:	4628      	mov	r0, r5
 8017250:	f001 f872 	bl	8018338 <_Balloc>
 8017254:	4607      	mov	r7, r0
 8017256:	b928      	cbnz	r0, 8017264 <_dtoa_r+0x9b4>
 8017258:	4b82      	ldr	r3, [pc, #520]	; (8017464 <_dtoa_r+0xbb4>)
 801725a:	4602      	mov	r2, r0
 801725c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017260:	f7ff bb3a 	b.w	80168d8 <_dtoa_r+0x28>
 8017264:	6932      	ldr	r2, [r6, #16]
 8017266:	3202      	adds	r2, #2
 8017268:	0092      	lsls	r2, r2, #2
 801726a:	f106 010c 	add.w	r1, r6, #12
 801726e:	300c      	adds	r0, #12
 8017270:	f7ff fa61 	bl	8016736 <memcpy>
 8017274:	2201      	movs	r2, #1
 8017276:	4639      	mov	r1, r7
 8017278:	4628      	mov	r0, r5
 801727a:	f001 fab7 	bl	80187ec <__lshift>
 801727e:	9b03      	ldr	r3, [sp, #12]
 8017280:	9a03      	ldr	r2, [sp, #12]
 8017282:	3301      	adds	r3, #1
 8017284:	9308      	str	r3, [sp, #32]
 8017286:	9b06      	ldr	r3, [sp, #24]
 8017288:	4413      	add	r3, r2
 801728a:	930b      	str	r3, [sp, #44]	; 0x2c
 801728c:	9b04      	ldr	r3, [sp, #16]
 801728e:	f003 0301 	and.w	r3, r3, #1
 8017292:	46b0      	mov	r8, r6
 8017294:	930a      	str	r3, [sp, #40]	; 0x28
 8017296:	4606      	mov	r6, r0
 8017298:	9b08      	ldr	r3, [sp, #32]
 801729a:	4621      	mov	r1, r4
 801729c:	3b01      	subs	r3, #1
 801729e:	4650      	mov	r0, sl
 80172a0:	9304      	str	r3, [sp, #16]
 80172a2:	f7ff fa7f 	bl	80167a4 <quorem>
 80172a6:	4641      	mov	r1, r8
 80172a8:	9006      	str	r0, [sp, #24]
 80172aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80172ae:	4650      	mov	r0, sl
 80172b0:	f001 fb08 	bl	80188c4 <__mcmp>
 80172b4:	4632      	mov	r2, r6
 80172b6:	9009      	str	r0, [sp, #36]	; 0x24
 80172b8:	4621      	mov	r1, r4
 80172ba:	4628      	mov	r0, r5
 80172bc:	f001 fb1e 	bl	80188fc <__mdiff>
 80172c0:	68c2      	ldr	r2, [r0, #12]
 80172c2:	4607      	mov	r7, r0
 80172c4:	bb02      	cbnz	r2, 8017308 <_dtoa_r+0xa58>
 80172c6:	4601      	mov	r1, r0
 80172c8:	4650      	mov	r0, sl
 80172ca:	f001 fafb 	bl	80188c4 <__mcmp>
 80172ce:	4602      	mov	r2, r0
 80172d0:	4639      	mov	r1, r7
 80172d2:	4628      	mov	r0, r5
 80172d4:	920c      	str	r2, [sp, #48]	; 0x30
 80172d6:	f001 f86f 	bl	80183b8 <_Bfree>
 80172da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80172dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80172de:	9f08      	ldr	r7, [sp, #32]
 80172e0:	ea43 0102 	orr.w	r1, r3, r2
 80172e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172e6:	4319      	orrs	r1, r3
 80172e8:	d110      	bne.n	801730c <_dtoa_r+0xa5c>
 80172ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80172ee:	d029      	beq.n	8017344 <_dtoa_r+0xa94>
 80172f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	dd02      	ble.n	80172fc <_dtoa_r+0xa4c>
 80172f6:	9b06      	ldr	r3, [sp, #24]
 80172f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80172fc:	9b04      	ldr	r3, [sp, #16]
 80172fe:	f883 9000 	strb.w	r9, [r3]
 8017302:	e777      	b.n	80171f4 <_dtoa_r+0x944>
 8017304:	4630      	mov	r0, r6
 8017306:	e7ba      	b.n	801727e <_dtoa_r+0x9ce>
 8017308:	2201      	movs	r2, #1
 801730a:	e7e1      	b.n	80172d0 <_dtoa_r+0xa20>
 801730c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801730e:	2b00      	cmp	r3, #0
 8017310:	db04      	blt.n	801731c <_dtoa_r+0xa6c>
 8017312:	9922      	ldr	r1, [sp, #136]	; 0x88
 8017314:	430b      	orrs	r3, r1
 8017316:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017318:	430b      	orrs	r3, r1
 801731a:	d120      	bne.n	801735e <_dtoa_r+0xaae>
 801731c:	2a00      	cmp	r2, #0
 801731e:	dded      	ble.n	80172fc <_dtoa_r+0xa4c>
 8017320:	4651      	mov	r1, sl
 8017322:	2201      	movs	r2, #1
 8017324:	4628      	mov	r0, r5
 8017326:	f001 fa61 	bl	80187ec <__lshift>
 801732a:	4621      	mov	r1, r4
 801732c:	4682      	mov	sl, r0
 801732e:	f001 fac9 	bl	80188c4 <__mcmp>
 8017332:	2800      	cmp	r0, #0
 8017334:	dc03      	bgt.n	801733e <_dtoa_r+0xa8e>
 8017336:	d1e1      	bne.n	80172fc <_dtoa_r+0xa4c>
 8017338:	f019 0f01 	tst.w	r9, #1
 801733c:	d0de      	beq.n	80172fc <_dtoa_r+0xa4c>
 801733e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017342:	d1d8      	bne.n	80172f6 <_dtoa_r+0xa46>
 8017344:	9a04      	ldr	r2, [sp, #16]
 8017346:	2339      	movs	r3, #57	; 0x39
 8017348:	7013      	strb	r3, [r2, #0]
 801734a:	463b      	mov	r3, r7
 801734c:	461f      	mov	r7, r3
 801734e:	3b01      	subs	r3, #1
 8017350:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8017354:	2a39      	cmp	r2, #57	; 0x39
 8017356:	d06c      	beq.n	8017432 <_dtoa_r+0xb82>
 8017358:	3201      	adds	r2, #1
 801735a:	701a      	strb	r2, [r3, #0]
 801735c:	e74a      	b.n	80171f4 <_dtoa_r+0x944>
 801735e:	2a00      	cmp	r2, #0
 8017360:	dd07      	ble.n	8017372 <_dtoa_r+0xac2>
 8017362:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017366:	d0ed      	beq.n	8017344 <_dtoa_r+0xa94>
 8017368:	9a04      	ldr	r2, [sp, #16]
 801736a:	f109 0301 	add.w	r3, r9, #1
 801736e:	7013      	strb	r3, [r2, #0]
 8017370:	e740      	b.n	80171f4 <_dtoa_r+0x944>
 8017372:	9b08      	ldr	r3, [sp, #32]
 8017374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017376:	f803 9c01 	strb.w	r9, [r3, #-1]
 801737a:	4293      	cmp	r3, r2
 801737c:	d043      	beq.n	8017406 <_dtoa_r+0xb56>
 801737e:	4651      	mov	r1, sl
 8017380:	2300      	movs	r3, #0
 8017382:	220a      	movs	r2, #10
 8017384:	4628      	mov	r0, r5
 8017386:	f001 f839 	bl	80183fc <__multadd>
 801738a:	45b0      	cmp	r8, r6
 801738c:	4682      	mov	sl, r0
 801738e:	f04f 0300 	mov.w	r3, #0
 8017392:	f04f 020a 	mov.w	r2, #10
 8017396:	4641      	mov	r1, r8
 8017398:	4628      	mov	r0, r5
 801739a:	d107      	bne.n	80173ac <_dtoa_r+0xafc>
 801739c:	f001 f82e 	bl	80183fc <__multadd>
 80173a0:	4680      	mov	r8, r0
 80173a2:	4606      	mov	r6, r0
 80173a4:	9b08      	ldr	r3, [sp, #32]
 80173a6:	3301      	adds	r3, #1
 80173a8:	9308      	str	r3, [sp, #32]
 80173aa:	e775      	b.n	8017298 <_dtoa_r+0x9e8>
 80173ac:	f001 f826 	bl	80183fc <__multadd>
 80173b0:	4631      	mov	r1, r6
 80173b2:	4680      	mov	r8, r0
 80173b4:	2300      	movs	r3, #0
 80173b6:	220a      	movs	r2, #10
 80173b8:	4628      	mov	r0, r5
 80173ba:	f001 f81f 	bl	80183fc <__multadd>
 80173be:	4606      	mov	r6, r0
 80173c0:	e7f0      	b.n	80173a4 <_dtoa_r+0xaf4>
 80173c2:	9b08      	ldr	r3, [sp, #32]
 80173c4:	9306      	str	r3, [sp, #24]
 80173c6:	9f03      	ldr	r7, [sp, #12]
 80173c8:	4621      	mov	r1, r4
 80173ca:	4650      	mov	r0, sl
 80173cc:	f7ff f9ea 	bl	80167a4 <quorem>
 80173d0:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80173d4:	9b03      	ldr	r3, [sp, #12]
 80173d6:	f807 9b01 	strb.w	r9, [r7], #1
 80173da:	1afa      	subs	r2, r7, r3
 80173dc:	9b06      	ldr	r3, [sp, #24]
 80173de:	4293      	cmp	r3, r2
 80173e0:	dd07      	ble.n	80173f2 <_dtoa_r+0xb42>
 80173e2:	4651      	mov	r1, sl
 80173e4:	2300      	movs	r3, #0
 80173e6:	220a      	movs	r2, #10
 80173e8:	4628      	mov	r0, r5
 80173ea:	f001 f807 	bl	80183fc <__multadd>
 80173ee:	4682      	mov	sl, r0
 80173f0:	e7ea      	b.n	80173c8 <_dtoa_r+0xb18>
 80173f2:	9b06      	ldr	r3, [sp, #24]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	bfc8      	it	gt
 80173f8:	461f      	movgt	r7, r3
 80173fa:	9b03      	ldr	r3, [sp, #12]
 80173fc:	bfd8      	it	le
 80173fe:	2701      	movle	r7, #1
 8017400:	441f      	add	r7, r3
 8017402:	f04f 0800 	mov.w	r8, #0
 8017406:	4651      	mov	r1, sl
 8017408:	2201      	movs	r2, #1
 801740a:	4628      	mov	r0, r5
 801740c:	f001 f9ee 	bl	80187ec <__lshift>
 8017410:	4621      	mov	r1, r4
 8017412:	4682      	mov	sl, r0
 8017414:	f001 fa56 	bl	80188c4 <__mcmp>
 8017418:	2800      	cmp	r0, #0
 801741a:	dc96      	bgt.n	801734a <_dtoa_r+0xa9a>
 801741c:	d102      	bne.n	8017424 <_dtoa_r+0xb74>
 801741e:	f019 0f01 	tst.w	r9, #1
 8017422:	d192      	bne.n	801734a <_dtoa_r+0xa9a>
 8017424:	463b      	mov	r3, r7
 8017426:	461f      	mov	r7, r3
 8017428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801742c:	2a30      	cmp	r2, #48	; 0x30
 801742e:	d0fa      	beq.n	8017426 <_dtoa_r+0xb76>
 8017430:	e6e0      	b.n	80171f4 <_dtoa_r+0x944>
 8017432:	9a03      	ldr	r2, [sp, #12]
 8017434:	429a      	cmp	r2, r3
 8017436:	d189      	bne.n	801734c <_dtoa_r+0xa9c>
 8017438:	f10b 0b01 	add.w	fp, fp, #1
 801743c:	2331      	movs	r3, #49	; 0x31
 801743e:	e796      	b.n	801736e <_dtoa_r+0xabe>
 8017440:	4b09      	ldr	r3, [pc, #36]	; (8017468 <_dtoa_r+0xbb8>)
 8017442:	f7ff baa1 	b.w	8016988 <_dtoa_r+0xd8>
 8017446:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017448:	2b00      	cmp	r3, #0
 801744a:	f47f aa79 	bne.w	8016940 <_dtoa_r+0x90>
 801744e:	4b07      	ldr	r3, [pc, #28]	; (801746c <_dtoa_r+0xbbc>)
 8017450:	f7ff ba9a 	b.w	8016988 <_dtoa_r+0xd8>
 8017454:	9b06      	ldr	r3, [sp, #24]
 8017456:	2b00      	cmp	r3, #0
 8017458:	dcb5      	bgt.n	80173c6 <_dtoa_r+0xb16>
 801745a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801745c:	2b02      	cmp	r3, #2
 801745e:	f73f aeb4 	bgt.w	80171ca <_dtoa_r+0x91a>
 8017462:	e7b0      	b.n	80173c6 <_dtoa_r+0xb16>
 8017464:	0801a621 	.word	0x0801a621
 8017468:	0801a3df 	.word	0x0801a3df
 801746c:	0801a5a5 	.word	0x0801a5a5

08017470 <rshift>:
 8017470:	6903      	ldr	r3, [r0, #16]
 8017472:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017476:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801747a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801747e:	f100 0414 	add.w	r4, r0, #20
 8017482:	dd45      	ble.n	8017510 <rshift+0xa0>
 8017484:	f011 011f 	ands.w	r1, r1, #31
 8017488:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801748c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017490:	d10c      	bne.n	80174ac <rshift+0x3c>
 8017492:	f100 0710 	add.w	r7, r0, #16
 8017496:	4629      	mov	r1, r5
 8017498:	42b1      	cmp	r1, r6
 801749a:	d334      	bcc.n	8017506 <rshift+0x96>
 801749c:	1a9b      	subs	r3, r3, r2
 801749e:	009b      	lsls	r3, r3, #2
 80174a0:	1eea      	subs	r2, r5, #3
 80174a2:	4296      	cmp	r6, r2
 80174a4:	bf38      	it	cc
 80174a6:	2300      	movcc	r3, #0
 80174a8:	4423      	add	r3, r4
 80174aa:	e015      	b.n	80174d8 <rshift+0x68>
 80174ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80174b0:	f1c1 0820 	rsb	r8, r1, #32
 80174b4:	40cf      	lsrs	r7, r1
 80174b6:	f105 0e04 	add.w	lr, r5, #4
 80174ba:	46a1      	mov	r9, r4
 80174bc:	4576      	cmp	r6, lr
 80174be:	46f4      	mov	ip, lr
 80174c0:	d815      	bhi.n	80174ee <rshift+0x7e>
 80174c2:	1a9a      	subs	r2, r3, r2
 80174c4:	0092      	lsls	r2, r2, #2
 80174c6:	3a04      	subs	r2, #4
 80174c8:	3501      	adds	r5, #1
 80174ca:	42ae      	cmp	r6, r5
 80174cc:	bf38      	it	cc
 80174ce:	2200      	movcc	r2, #0
 80174d0:	18a3      	adds	r3, r4, r2
 80174d2:	50a7      	str	r7, [r4, r2]
 80174d4:	b107      	cbz	r7, 80174d8 <rshift+0x68>
 80174d6:	3304      	adds	r3, #4
 80174d8:	1b1a      	subs	r2, r3, r4
 80174da:	42a3      	cmp	r3, r4
 80174dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80174e0:	bf08      	it	eq
 80174e2:	2300      	moveq	r3, #0
 80174e4:	6102      	str	r2, [r0, #16]
 80174e6:	bf08      	it	eq
 80174e8:	6143      	streq	r3, [r0, #20]
 80174ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174ee:	f8dc c000 	ldr.w	ip, [ip]
 80174f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80174f6:	ea4c 0707 	orr.w	r7, ip, r7
 80174fa:	f849 7b04 	str.w	r7, [r9], #4
 80174fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017502:	40cf      	lsrs	r7, r1
 8017504:	e7da      	b.n	80174bc <rshift+0x4c>
 8017506:	f851 cb04 	ldr.w	ip, [r1], #4
 801750a:	f847 cf04 	str.w	ip, [r7, #4]!
 801750e:	e7c3      	b.n	8017498 <rshift+0x28>
 8017510:	4623      	mov	r3, r4
 8017512:	e7e1      	b.n	80174d8 <rshift+0x68>

08017514 <__hexdig_fun>:
 8017514:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017518:	2b09      	cmp	r3, #9
 801751a:	d802      	bhi.n	8017522 <__hexdig_fun+0xe>
 801751c:	3820      	subs	r0, #32
 801751e:	b2c0      	uxtb	r0, r0
 8017520:	4770      	bx	lr
 8017522:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017526:	2b05      	cmp	r3, #5
 8017528:	d801      	bhi.n	801752e <__hexdig_fun+0x1a>
 801752a:	3847      	subs	r0, #71	; 0x47
 801752c:	e7f7      	b.n	801751e <__hexdig_fun+0xa>
 801752e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017532:	2b05      	cmp	r3, #5
 8017534:	d801      	bhi.n	801753a <__hexdig_fun+0x26>
 8017536:	3827      	subs	r0, #39	; 0x27
 8017538:	e7f1      	b.n	801751e <__hexdig_fun+0xa>
 801753a:	2000      	movs	r0, #0
 801753c:	4770      	bx	lr
	...

08017540 <__gethex>:
 8017540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017544:	4617      	mov	r7, r2
 8017546:	680a      	ldr	r2, [r1, #0]
 8017548:	b085      	sub	sp, #20
 801754a:	f102 0b02 	add.w	fp, r2, #2
 801754e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017552:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017556:	4681      	mov	r9, r0
 8017558:	468a      	mov	sl, r1
 801755a:	9302      	str	r3, [sp, #8]
 801755c:	32fe      	adds	r2, #254	; 0xfe
 801755e:	eb02 030b 	add.w	r3, r2, fp
 8017562:	46d8      	mov	r8, fp
 8017564:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8017568:	9301      	str	r3, [sp, #4]
 801756a:	2830      	cmp	r0, #48	; 0x30
 801756c:	d0f7      	beq.n	801755e <__gethex+0x1e>
 801756e:	f7ff ffd1 	bl	8017514 <__hexdig_fun>
 8017572:	4604      	mov	r4, r0
 8017574:	2800      	cmp	r0, #0
 8017576:	d138      	bne.n	80175ea <__gethex+0xaa>
 8017578:	49a8      	ldr	r1, [pc, #672]	; (801781c <__gethex+0x2dc>)
 801757a:	2201      	movs	r2, #1
 801757c:	4640      	mov	r0, r8
 801757e:	f7ff f88f 	bl	80166a0 <strncmp>
 8017582:	4606      	mov	r6, r0
 8017584:	2800      	cmp	r0, #0
 8017586:	d169      	bne.n	801765c <__gethex+0x11c>
 8017588:	f898 0001 	ldrb.w	r0, [r8, #1]
 801758c:	465d      	mov	r5, fp
 801758e:	f7ff ffc1 	bl	8017514 <__hexdig_fun>
 8017592:	2800      	cmp	r0, #0
 8017594:	d064      	beq.n	8017660 <__gethex+0x120>
 8017596:	465a      	mov	r2, fp
 8017598:	7810      	ldrb	r0, [r2, #0]
 801759a:	2830      	cmp	r0, #48	; 0x30
 801759c:	4690      	mov	r8, r2
 801759e:	f102 0201 	add.w	r2, r2, #1
 80175a2:	d0f9      	beq.n	8017598 <__gethex+0x58>
 80175a4:	f7ff ffb6 	bl	8017514 <__hexdig_fun>
 80175a8:	2301      	movs	r3, #1
 80175aa:	fab0 f480 	clz	r4, r0
 80175ae:	0964      	lsrs	r4, r4, #5
 80175b0:	465e      	mov	r6, fp
 80175b2:	9301      	str	r3, [sp, #4]
 80175b4:	4642      	mov	r2, r8
 80175b6:	4615      	mov	r5, r2
 80175b8:	3201      	adds	r2, #1
 80175ba:	7828      	ldrb	r0, [r5, #0]
 80175bc:	f7ff ffaa 	bl	8017514 <__hexdig_fun>
 80175c0:	2800      	cmp	r0, #0
 80175c2:	d1f8      	bne.n	80175b6 <__gethex+0x76>
 80175c4:	4995      	ldr	r1, [pc, #596]	; (801781c <__gethex+0x2dc>)
 80175c6:	2201      	movs	r2, #1
 80175c8:	4628      	mov	r0, r5
 80175ca:	f7ff f869 	bl	80166a0 <strncmp>
 80175ce:	b978      	cbnz	r0, 80175f0 <__gethex+0xb0>
 80175d0:	b946      	cbnz	r6, 80175e4 <__gethex+0xa4>
 80175d2:	1c6e      	adds	r6, r5, #1
 80175d4:	4632      	mov	r2, r6
 80175d6:	4615      	mov	r5, r2
 80175d8:	3201      	adds	r2, #1
 80175da:	7828      	ldrb	r0, [r5, #0]
 80175dc:	f7ff ff9a 	bl	8017514 <__hexdig_fun>
 80175e0:	2800      	cmp	r0, #0
 80175e2:	d1f8      	bne.n	80175d6 <__gethex+0x96>
 80175e4:	1b73      	subs	r3, r6, r5
 80175e6:	009e      	lsls	r6, r3, #2
 80175e8:	e004      	b.n	80175f4 <__gethex+0xb4>
 80175ea:	2400      	movs	r4, #0
 80175ec:	4626      	mov	r6, r4
 80175ee:	e7e1      	b.n	80175b4 <__gethex+0x74>
 80175f0:	2e00      	cmp	r6, #0
 80175f2:	d1f7      	bne.n	80175e4 <__gethex+0xa4>
 80175f4:	782b      	ldrb	r3, [r5, #0]
 80175f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80175fa:	2b50      	cmp	r3, #80	; 0x50
 80175fc:	d13d      	bne.n	801767a <__gethex+0x13a>
 80175fe:	786b      	ldrb	r3, [r5, #1]
 8017600:	2b2b      	cmp	r3, #43	; 0x2b
 8017602:	d02f      	beq.n	8017664 <__gethex+0x124>
 8017604:	2b2d      	cmp	r3, #45	; 0x2d
 8017606:	d031      	beq.n	801766c <__gethex+0x12c>
 8017608:	1c69      	adds	r1, r5, #1
 801760a:	f04f 0b00 	mov.w	fp, #0
 801760e:	7808      	ldrb	r0, [r1, #0]
 8017610:	f7ff ff80 	bl	8017514 <__hexdig_fun>
 8017614:	1e42      	subs	r2, r0, #1
 8017616:	b2d2      	uxtb	r2, r2
 8017618:	2a18      	cmp	r2, #24
 801761a:	d82e      	bhi.n	801767a <__gethex+0x13a>
 801761c:	f1a0 0210 	sub.w	r2, r0, #16
 8017620:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017624:	f7ff ff76 	bl	8017514 <__hexdig_fun>
 8017628:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801762c:	fa5f fc8c 	uxtb.w	ip, ip
 8017630:	f1bc 0f18 	cmp.w	ip, #24
 8017634:	d91d      	bls.n	8017672 <__gethex+0x132>
 8017636:	f1bb 0f00 	cmp.w	fp, #0
 801763a:	d000      	beq.n	801763e <__gethex+0xfe>
 801763c:	4252      	negs	r2, r2
 801763e:	4416      	add	r6, r2
 8017640:	f8ca 1000 	str.w	r1, [sl]
 8017644:	b1dc      	cbz	r4, 801767e <__gethex+0x13e>
 8017646:	9b01      	ldr	r3, [sp, #4]
 8017648:	2b00      	cmp	r3, #0
 801764a:	bf14      	ite	ne
 801764c:	f04f 0800 	movne.w	r8, #0
 8017650:	f04f 0806 	moveq.w	r8, #6
 8017654:	4640      	mov	r0, r8
 8017656:	b005      	add	sp, #20
 8017658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801765c:	4645      	mov	r5, r8
 801765e:	4626      	mov	r6, r4
 8017660:	2401      	movs	r4, #1
 8017662:	e7c7      	b.n	80175f4 <__gethex+0xb4>
 8017664:	f04f 0b00 	mov.w	fp, #0
 8017668:	1ca9      	adds	r1, r5, #2
 801766a:	e7d0      	b.n	801760e <__gethex+0xce>
 801766c:	f04f 0b01 	mov.w	fp, #1
 8017670:	e7fa      	b.n	8017668 <__gethex+0x128>
 8017672:	230a      	movs	r3, #10
 8017674:	fb03 0002 	mla	r0, r3, r2, r0
 8017678:	e7d0      	b.n	801761c <__gethex+0xdc>
 801767a:	4629      	mov	r1, r5
 801767c:	e7e0      	b.n	8017640 <__gethex+0x100>
 801767e:	eba5 0308 	sub.w	r3, r5, r8
 8017682:	3b01      	subs	r3, #1
 8017684:	4621      	mov	r1, r4
 8017686:	2b07      	cmp	r3, #7
 8017688:	dc0a      	bgt.n	80176a0 <__gethex+0x160>
 801768a:	4648      	mov	r0, r9
 801768c:	f000 fe54 	bl	8018338 <_Balloc>
 8017690:	4604      	mov	r4, r0
 8017692:	b940      	cbnz	r0, 80176a6 <__gethex+0x166>
 8017694:	4b62      	ldr	r3, [pc, #392]	; (8017820 <__gethex+0x2e0>)
 8017696:	4602      	mov	r2, r0
 8017698:	21e4      	movs	r1, #228	; 0xe4
 801769a:	4862      	ldr	r0, [pc, #392]	; (8017824 <__gethex+0x2e4>)
 801769c:	f7ff f864 	bl	8016768 <__assert_func>
 80176a0:	3101      	adds	r1, #1
 80176a2:	105b      	asrs	r3, r3, #1
 80176a4:	e7ef      	b.n	8017686 <__gethex+0x146>
 80176a6:	f100 0a14 	add.w	sl, r0, #20
 80176aa:	2300      	movs	r3, #0
 80176ac:	f8cd a004 	str.w	sl, [sp, #4]
 80176b0:	469b      	mov	fp, r3
 80176b2:	45a8      	cmp	r8, r5
 80176b4:	d344      	bcc.n	8017740 <__gethex+0x200>
 80176b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80176ba:	f848 bb04 	str.w	fp, [r8], #4
 80176be:	eba8 080a 	sub.w	r8, r8, sl
 80176c2:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80176c6:	6122      	str	r2, [r4, #16]
 80176c8:	4658      	mov	r0, fp
 80176ca:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80176ce:	f000 ff25 	bl	801851c <__hi0bits>
 80176d2:	683d      	ldr	r5, [r7, #0]
 80176d4:	eba8 0800 	sub.w	r8, r8, r0
 80176d8:	45a8      	cmp	r8, r5
 80176da:	dd59      	ble.n	8017790 <__gethex+0x250>
 80176dc:	eba8 0805 	sub.w	r8, r8, r5
 80176e0:	4641      	mov	r1, r8
 80176e2:	4620      	mov	r0, r4
 80176e4:	f001 faa1 	bl	8018c2a <__any_on>
 80176e8:	4683      	mov	fp, r0
 80176ea:	b1b8      	cbz	r0, 801771c <__gethex+0x1dc>
 80176ec:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80176f0:	1159      	asrs	r1, r3, #5
 80176f2:	f003 021f 	and.w	r2, r3, #31
 80176f6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80176fa:	f04f 0b01 	mov.w	fp, #1
 80176fe:	fa0b f202 	lsl.w	r2, fp, r2
 8017702:	420a      	tst	r2, r1
 8017704:	d00a      	beq.n	801771c <__gethex+0x1dc>
 8017706:	455b      	cmp	r3, fp
 8017708:	dd06      	ble.n	8017718 <__gethex+0x1d8>
 801770a:	f1a8 0102 	sub.w	r1, r8, #2
 801770e:	4620      	mov	r0, r4
 8017710:	f001 fa8b 	bl	8018c2a <__any_on>
 8017714:	2800      	cmp	r0, #0
 8017716:	d138      	bne.n	801778a <__gethex+0x24a>
 8017718:	f04f 0b02 	mov.w	fp, #2
 801771c:	4641      	mov	r1, r8
 801771e:	4620      	mov	r0, r4
 8017720:	f7ff fea6 	bl	8017470 <rshift>
 8017724:	4446      	add	r6, r8
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	42b3      	cmp	r3, r6
 801772a:	da41      	bge.n	80177b0 <__gethex+0x270>
 801772c:	4621      	mov	r1, r4
 801772e:	4648      	mov	r0, r9
 8017730:	f000 fe42 	bl	80183b8 <_Bfree>
 8017734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017736:	2300      	movs	r3, #0
 8017738:	6013      	str	r3, [r2, #0]
 801773a:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801773e:	e789      	b.n	8017654 <__gethex+0x114>
 8017740:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017744:	2a2e      	cmp	r2, #46	; 0x2e
 8017746:	d014      	beq.n	8017772 <__gethex+0x232>
 8017748:	2b20      	cmp	r3, #32
 801774a:	d106      	bne.n	801775a <__gethex+0x21a>
 801774c:	9b01      	ldr	r3, [sp, #4]
 801774e:	f843 bb04 	str.w	fp, [r3], #4
 8017752:	f04f 0b00 	mov.w	fp, #0
 8017756:	9301      	str	r3, [sp, #4]
 8017758:	465b      	mov	r3, fp
 801775a:	7828      	ldrb	r0, [r5, #0]
 801775c:	9303      	str	r3, [sp, #12]
 801775e:	f7ff fed9 	bl	8017514 <__hexdig_fun>
 8017762:	9b03      	ldr	r3, [sp, #12]
 8017764:	f000 000f 	and.w	r0, r0, #15
 8017768:	4098      	lsls	r0, r3
 801776a:	ea4b 0b00 	orr.w	fp, fp, r0
 801776e:	3304      	adds	r3, #4
 8017770:	e79f      	b.n	80176b2 <__gethex+0x172>
 8017772:	45a8      	cmp	r8, r5
 8017774:	d8e8      	bhi.n	8017748 <__gethex+0x208>
 8017776:	4929      	ldr	r1, [pc, #164]	; (801781c <__gethex+0x2dc>)
 8017778:	9303      	str	r3, [sp, #12]
 801777a:	2201      	movs	r2, #1
 801777c:	4628      	mov	r0, r5
 801777e:	f7fe ff8f 	bl	80166a0 <strncmp>
 8017782:	9b03      	ldr	r3, [sp, #12]
 8017784:	2800      	cmp	r0, #0
 8017786:	d1df      	bne.n	8017748 <__gethex+0x208>
 8017788:	e793      	b.n	80176b2 <__gethex+0x172>
 801778a:	f04f 0b03 	mov.w	fp, #3
 801778e:	e7c5      	b.n	801771c <__gethex+0x1dc>
 8017790:	da0b      	bge.n	80177aa <__gethex+0x26a>
 8017792:	eba5 0808 	sub.w	r8, r5, r8
 8017796:	4621      	mov	r1, r4
 8017798:	4642      	mov	r2, r8
 801779a:	4648      	mov	r0, r9
 801779c:	f001 f826 	bl	80187ec <__lshift>
 80177a0:	eba6 0608 	sub.w	r6, r6, r8
 80177a4:	4604      	mov	r4, r0
 80177a6:	f100 0a14 	add.w	sl, r0, #20
 80177aa:	f04f 0b00 	mov.w	fp, #0
 80177ae:	e7ba      	b.n	8017726 <__gethex+0x1e6>
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	42b3      	cmp	r3, r6
 80177b4:	dd74      	ble.n	80178a0 <__gethex+0x360>
 80177b6:	1b9e      	subs	r6, r3, r6
 80177b8:	42b5      	cmp	r5, r6
 80177ba:	dc35      	bgt.n	8017828 <__gethex+0x2e8>
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	2b02      	cmp	r3, #2
 80177c0:	d023      	beq.n	801780a <__gethex+0x2ca>
 80177c2:	2b03      	cmp	r3, #3
 80177c4:	d025      	beq.n	8017812 <__gethex+0x2d2>
 80177c6:	2b01      	cmp	r3, #1
 80177c8:	d115      	bne.n	80177f6 <__gethex+0x2b6>
 80177ca:	42b5      	cmp	r5, r6
 80177cc:	d113      	bne.n	80177f6 <__gethex+0x2b6>
 80177ce:	2d01      	cmp	r5, #1
 80177d0:	d10b      	bne.n	80177ea <__gethex+0x2aa>
 80177d2:	9a02      	ldr	r2, [sp, #8]
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	6013      	str	r3, [r2, #0]
 80177d8:	2301      	movs	r3, #1
 80177da:	6123      	str	r3, [r4, #16]
 80177dc:	f8ca 3000 	str.w	r3, [sl]
 80177e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177e2:	f04f 0862 	mov.w	r8, #98	; 0x62
 80177e6:	601c      	str	r4, [r3, #0]
 80177e8:	e734      	b.n	8017654 <__gethex+0x114>
 80177ea:	1e69      	subs	r1, r5, #1
 80177ec:	4620      	mov	r0, r4
 80177ee:	f001 fa1c 	bl	8018c2a <__any_on>
 80177f2:	2800      	cmp	r0, #0
 80177f4:	d1ed      	bne.n	80177d2 <__gethex+0x292>
 80177f6:	4621      	mov	r1, r4
 80177f8:	4648      	mov	r0, r9
 80177fa:	f000 fddd 	bl	80183b8 <_Bfree>
 80177fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017800:	2300      	movs	r3, #0
 8017802:	6013      	str	r3, [r2, #0]
 8017804:	f04f 0850 	mov.w	r8, #80	; 0x50
 8017808:	e724      	b.n	8017654 <__gethex+0x114>
 801780a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801780c:	2b00      	cmp	r3, #0
 801780e:	d1f2      	bne.n	80177f6 <__gethex+0x2b6>
 8017810:	e7df      	b.n	80177d2 <__gethex+0x292>
 8017812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017814:	2b00      	cmp	r3, #0
 8017816:	d1dc      	bne.n	80177d2 <__gethex+0x292>
 8017818:	e7ed      	b.n	80177f6 <__gethex+0x2b6>
 801781a:	bf00      	nop
 801781c:	0801a408 	.word	0x0801a408
 8017820:	0801a621 	.word	0x0801a621
 8017824:	0801a632 	.word	0x0801a632
 8017828:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801782c:	f1bb 0f00 	cmp.w	fp, #0
 8017830:	d133      	bne.n	801789a <__gethex+0x35a>
 8017832:	f1b8 0f00 	cmp.w	r8, #0
 8017836:	d004      	beq.n	8017842 <__gethex+0x302>
 8017838:	4641      	mov	r1, r8
 801783a:	4620      	mov	r0, r4
 801783c:	f001 f9f5 	bl	8018c2a <__any_on>
 8017840:	4683      	mov	fp, r0
 8017842:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017846:	2301      	movs	r3, #1
 8017848:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801784c:	f008 081f 	and.w	r8, r8, #31
 8017850:	fa03 f308 	lsl.w	r3, r3, r8
 8017854:	4213      	tst	r3, r2
 8017856:	4631      	mov	r1, r6
 8017858:	4620      	mov	r0, r4
 801785a:	bf18      	it	ne
 801785c:	f04b 0b02 	orrne.w	fp, fp, #2
 8017860:	1bad      	subs	r5, r5, r6
 8017862:	f7ff fe05 	bl	8017470 <rshift>
 8017866:	687e      	ldr	r6, [r7, #4]
 8017868:	f04f 0802 	mov.w	r8, #2
 801786c:	f1bb 0f00 	cmp.w	fp, #0
 8017870:	d04a      	beq.n	8017908 <__gethex+0x3c8>
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	2b02      	cmp	r3, #2
 8017876:	d016      	beq.n	80178a6 <__gethex+0x366>
 8017878:	2b03      	cmp	r3, #3
 801787a:	d018      	beq.n	80178ae <__gethex+0x36e>
 801787c:	2b01      	cmp	r3, #1
 801787e:	d109      	bne.n	8017894 <__gethex+0x354>
 8017880:	f01b 0f02 	tst.w	fp, #2
 8017884:	d006      	beq.n	8017894 <__gethex+0x354>
 8017886:	f8da 3000 	ldr.w	r3, [sl]
 801788a:	ea4b 0b03 	orr.w	fp, fp, r3
 801788e:	f01b 0f01 	tst.w	fp, #1
 8017892:	d10f      	bne.n	80178b4 <__gethex+0x374>
 8017894:	f048 0810 	orr.w	r8, r8, #16
 8017898:	e036      	b.n	8017908 <__gethex+0x3c8>
 801789a:	f04f 0b01 	mov.w	fp, #1
 801789e:	e7d0      	b.n	8017842 <__gethex+0x302>
 80178a0:	f04f 0801 	mov.w	r8, #1
 80178a4:	e7e2      	b.n	801786c <__gethex+0x32c>
 80178a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178a8:	f1c3 0301 	rsb	r3, r3, #1
 80178ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80178ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d0ef      	beq.n	8017894 <__gethex+0x354>
 80178b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80178b8:	f104 0214 	add.w	r2, r4, #20
 80178bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80178c0:	9301      	str	r3, [sp, #4]
 80178c2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80178c6:	2300      	movs	r3, #0
 80178c8:	4694      	mov	ip, r2
 80178ca:	f852 1b04 	ldr.w	r1, [r2], #4
 80178ce:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80178d2:	d01e      	beq.n	8017912 <__gethex+0x3d2>
 80178d4:	3101      	adds	r1, #1
 80178d6:	f8cc 1000 	str.w	r1, [ip]
 80178da:	f1b8 0f02 	cmp.w	r8, #2
 80178de:	f104 0214 	add.w	r2, r4, #20
 80178e2:	d13d      	bne.n	8017960 <__gethex+0x420>
 80178e4:	683b      	ldr	r3, [r7, #0]
 80178e6:	3b01      	subs	r3, #1
 80178e8:	42ab      	cmp	r3, r5
 80178ea:	d10b      	bne.n	8017904 <__gethex+0x3c4>
 80178ec:	1169      	asrs	r1, r5, #5
 80178ee:	2301      	movs	r3, #1
 80178f0:	f005 051f 	and.w	r5, r5, #31
 80178f4:	fa03 f505 	lsl.w	r5, r3, r5
 80178f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80178fc:	421d      	tst	r5, r3
 80178fe:	bf18      	it	ne
 8017900:	f04f 0801 	movne.w	r8, #1
 8017904:	f048 0820 	orr.w	r8, r8, #32
 8017908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801790a:	601c      	str	r4, [r3, #0]
 801790c:	9b02      	ldr	r3, [sp, #8]
 801790e:	601e      	str	r6, [r3, #0]
 8017910:	e6a0      	b.n	8017654 <__gethex+0x114>
 8017912:	4290      	cmp	r0, r2
 8017914:	f842 3c04 	str.w	r3, [r2, #-4]
 8017918:	d8d6      	bhi.n	80178c8 <__gethex+0x388>
 801791a:	68a2      	ldr	r2, [r4, #8]
 801791c:	4593      	cmp	fp, r2
 801791e:	db17      	blt.n	8017950 <__gethex+0x410>
 8017920:	6861      	ldr	r1, [r4, #4]
 8017922:	4648      	mov	r0, r9
 8017924:	3101      	adds	r1, #1
 8017926:	f000 fd07 	bl	8018338 <_Balloc>
 801792a:	4682      	mov	sl, r0
 801792c:	b918      	cbnz	r0, 8017936 <__gethex+0x3f6>
 801792e:	4b1b      	ldr	r3, [pc, #108]	; (801799c <__gethex+0x45c>)
 8017930:	4602      	mov	r2, r0
 8017932:	2184      	movs	r1, #132	; 0x84
 8017934:	e6b1      	b.n	801769a <__gethex+0x15a>
 8017936:	6922      	ldr	r2, [r4, #16]
 8017938:	3202      	adds	r2, #2
 801793a:	f104 010c 	add.w	r1, r4, #12
 801793e:	0092      	lsls	r2, r2, #2
 8017940:	300c      	adds	r0, #12
 8017942:	f7fe fef8 	bl	8016736 <memcpy>
 8017946:	4621      	mov	r1, r4
 8017948:	4648      	mov	r0, r9
 801794a:	f000 fd35 	bl	80183b8 <_Bfree>
 801794e:	4654      	mov	r4, sl
 8017950:	6922      	ldr	r2, [r4, #16]
 8017952:	1c51      	adds	r1, r2, #1
 8017954:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017958:	6121      	str	r1, [r4, #16]
 801795a:	2101      	movs	r1, #1
 801795c:	6151      	str	r1, [r2, #20]
 801795e:	e7bc      	b.n	80178da <__gethex+0x39a>
 8017960:	6921      	ldr	r1, [r4, #16]
 8017962:	4559      	cmp	r1, fp
 8017964:	dd0b      	ble.n	801797e <__gethex+0x43e>
 8017966:	2101      	movs	r1, #1
 8017968:	4620      	mov	r0, r4
 801796a:	f7ff fd81 	bl	8017470 <rshift>
 801796e:	68bb      	ldr	r3, [r7, #8]
 8017970:	3601      	adds	r6, #1
 8017972:	42b3      	cmp	r3, r6
 8017974:	f6ff aeda 	blt.w	801772c <__gethex+0x1ec>
 8017978:	f04f 0801 	mov.w	r8, #1
 801797c:	e7c2      	b.n	8017904 <__gethex+0x3c4>
 801797e:	f015 051f 	ands.w	r5, r5, #31
 8017982:	d0f9      	beq.n	8017978 <__gethex+0x438>
 8017984:	9b01      	ldr	r3, [sp, #4]
 8017986:	441a      	add	r2, r3
 8017988:	f1c5 0520 	rsb	r5, r5, #32
 801798c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017990:	f000 fdc4 	bl	801851c <__hi0bits>
 8017994:	42a8      	cmp	r0, r5
 8017996:	dbe6      	blt.n	8017966 <__gethex+0x426>
 8017998:	e7ee      	b.n	8017978 <__gethex+0x438>
 801799a:	bf00      	nop
 801799c:	0801a621 	.word	0x0801a621

080179a0 <L_shift>:
 80179a0:	f1c2 0208 	rsb	r2, r2, #8
 80179a4:	0092      	lsls	r2, r2, #2
 80179a6:	b570      	push	{r4, r5, r6, lr}
 80179a8:	f1c2 0620 	rsb	r6, r2, #32
 80179ac:	6843      	ldr	r3, [r0, #4]
 80179ae:	6804      	ldr	r4, [r0, #0]
 80179b0:	fa03 f506 	lsl.w	r5, r3, r6
 80179b4:	432c      	orrs	r4, r5
 80179b6:	40d3      	lsrs	r3, r2
 80179b8:	6004      	str	r4, [r0, #0]
 80179ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80179be:	4288      	cmp	r0, r1
 80179c0:	d3f4      	bcc.n	80179ac <L_shift+0xc>
 80179c2:	bd70      	pop	{r4, r5, r6, pc}

080179c4 <__match>:
 80179c4:	b530      	push	{r4, r5, lr}
 80179c6:	6803      	ldr	r3, [r0, #0]
 80179c8:	3301      	adds	r3, #1
 80179ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80179ce:	b914      	cbnz	r4, 80179d6 <__match+0x12>
 80179d0:	6003      	str	r3, [r0, #0]
 80179d2:	2001      	movs	r0, #1
 80179d4:	bd30      	pop	{r4, r5, pc}
 80179d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80179de:	2d19      	cmp	r5, #25
 80179e0:	bf98      	it	ls
 80179e2:	3220      	addls	r2, #32
 80179e4:	42a2      	cmp	r2, r4
 80179e6:	d0f0      	beq.n	80179ca <__match+0x6>
 80179e8:	2000      	movs	r0, #0
 80179ea:	e7f3      	b.n	80179d4 <__match+0x10>

080179ec <__hexnan>:
 80179ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f0:	680b      	ldr	r3, [r1, #0]
 80179f2:	6801      	ldr	r1, [r0, #0]
 80179f4:	115e      	asrs	r6, r3, #5
 80179f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80179fa:	f013 031f 	ands.w	r3, r3, #31
 80179fe:	b087      	sub	sp, #28
 8017a00:	bf18      	it	ne
 8017a02:	3604      	addne	r6, #4
 8017a04:	2500      	movs	r5, #0
 8017a06:	1f37      	subs	r7, r6, #4
 8017a08:	4682      	mov	sl, r0
 8017a0a:	4690      	mov	r8, r2
 8017a0c:	9301      	str	r3, [sp, #4]
 8017a0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8017a12:	46b9      	mov	r9, r7
 8017a14:	463c      	mov	r4, r7
 8017a16:	9502      	str	r5, [sp, #8]
 8017a18:	46ab      	mov	fp, r5
 8017a1a:	784a      	ldrb	r2, [r1, #1]
 8017a1c:	1c4b      	adds	r3, r1, #1
 8017a1e:	9303      	str	r3, [sp, #12]
 8017a20:	b342      	cbz	r2, 8017a74 <__hexnan+0x88>
 8017a22:	4610      	mov	r0, r2
 8017a24:	9105      	str	r1, [sp, #20]
 8017a26:	9204      	str	r2, [sp, #16]
 8017a28:	f7ff fd74 	bl	8017514 <__hexdig_fun>
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	d14f      	bne.n	8017ad0 <__hexnan+0xe4>
 8017a30:	9a04      	ldr	r2, [sp, #16]
 8017a32:	9905      	ldr	r1, [sp, #20]
 8017a34:	2a20      	cmp	r2, #32
 8017a36:	d818      	bhi.n	8017a6a <__hexnan+0x7e>
 8017a38:	9b02      	ldr	r3, [sp, #8]
 8017a3a:	459b      	cmp	fp, r3
 8017a3c:	dd13      	ble.n	8017a66 <__hexnan+0x7a>
 8017a3e:	454c      	cmp	r4, r9
 8017a40:	d206      	bcs.n	8017a50 <__hexnan+0x64>
 8017a42:	2d07      	cmp	r5, #7
 8017a44:	dc04      	bgt.n	8017a50 <__hexnan+0x64>
 8017a46:	462a      	mov	r2, r5
 8017a48:	4649      	mov	r1, r9
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	f7ff ffa8 	bl	80179a0 <L_shift>
 8017a50:	4544      	cmp	r4, r8
 8017a52:	d950      	bls.n	8017af6 <__hexnan+0x10a>
 8017a54:	2300      	movs	r3, #0
 8017a56:	f1a4 0904 	sub.w	r9, r4, #4
 8017a5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017a5e:	f8cd b008 	str.w	fp, [sp, #8]
 8017a62:	464c      	mov	r4, r9
 8017a64:	461d      	mov	r5, r3
 8017a66:	9903      	ldr	r1, [sp, #12]
 8017a68:	e7d7      	b.n	8017a1a <__hexnan+0x2e>
 8017a6a:	2a29      	cmp	r2, #41	; 0x29
 8017a6c:	d155      	bne.n	8017b1a <__hexnan+0x12e>
 8017a6e:	3102      	adds	r1, #2
 8017a70:	f8ca 1000 	str.w	r1, [sl]
 8017a74:	f1bb 0f00 	cmp.w	fp, #0
 8017a78:	d04f      	beq.n	8017b1a <__hexnan+0x12e>
 8017a7a:	454c      	cmp	r4, r9
 8017a7c:	d206      	bcs.n	8017a8c <__hexnan+0xa0>
 8017a7e:	2d07      	cmp	r5, #7
 8017a80:	dc04      	bgt.n	8017a8c <__hexnan+0xa0>
 8017a82:	462a      	mov	r2, r5
 8017a84:	4649      	mov	r1, r9
 8017a86:	4620      	mov	r0, r4
 8017a88:	f7ff ff8a 	bl	80179a0 <L_shift>
 8017a8c:	4544      	cmp	r4, r8
 8017a8e:	d934      	bls.n	8017afa <__hexnan+0x10e>
 8017a90:	f1a8 0204 	sub.w	r2, r8, #4
 8017a94:	4623      	mov	r3, r4
 8017a96:	f853 1b04 	ldr.w	r1, [r3], #4
 8017a9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8017a9e:	429f      	cmp	r7, r3
 8017aa0:	d2f9      	bcs.n	8017a96 <__hexnan+0xaa>
 8017aa2:	1b3b      	subs	r3, r7, r4
 8017aa4:	f023 0303 	bic.w	r3, r3, #3
 8017aa8:	3304      	adds	r3, #4
 8017aaa:	3e03      	subs	r6, #3
 8017aac:	3401      	adds	r4, #1
 8017aae:	42a6      	cmp	r6, r4
 8017ab0:	bf38      	it	cc
 8017ab2:	2304      	movcc	r3, #4
 8017ab4:	4443      	add	r3, r8
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	f843 2b04 	str.w	r2, [r3], #4
 8017abc:	429f      	cmp	r7, r3
 8017abe:	d2fb      	bcs.n	8017ab8 <__hexnan+0xcc>
 8017ac0:	683b      	ldr	r3, [r7, #0]
 8017ac2:	b91b      	cbnz	r3, 8017acc <__hexnan+0xe0>
 8017ac4:	4547      	cmp	r7, r8
 8017ac6:	d126      	bne.n	8017b16 <__hexnan+0x12a>
 8017ac8:	2301      	movs	r3, #1
 8017aca:	603b      	str	r3, [r7, #0]
 8017acc:	2005      	movs	r0, #5
 8017ace:	e025      	b.n	8017b1c <__hexnan+0x130>
 8017ad0:	3501      	adds	r5, #1
 8017ad2:	2d08      	cmp	r5, #8
 8017ad4:	f10b 0b01 	add.w	fp, fp, #1
 8017ad8:	dd06      	ble.n	8017ae8 <__hexnan+0xfc>
 8017ada:	4544      	cmp	r4, r8
 8017adc:	d9c3      	bls.n	8017a66 <__hexnan+0x7a>
 8017ade:	2300      	movs	r3, #0
 8017ae0:	f844 3c04 	str.w	r3, [r4, #-4]
 8017ae4:	2501      	movs	r5, #1
 8017ae6:	3c04      	subs	r4, #4
 8017ae8:	6822      	ldr	r2, [r4, #0]
 8017aea:	f000 000f 	and.w	r0, r0, #15
 8017aee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017af2:	6020      	str	r0, [r4, #0]
 8017af4:	e7b7      	b.n	8017a66 <__hexnan+0x7a>
 8017af6:	2508      	movs	r5, #8
 8017af8:	e7b5      	b.n	8017a66 <__hexnan+0x7a>
 8017afa:	9b01      	ldr	r3, [sp, #4]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d0df      	beq.n	8017ac0 <__hexnan+0xd4>
 8017b00:	f1c3 0320 	rsb	r3, r3, #32
 8017b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017b08:	40da      	lsrs	r2, r3
 8017b0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017b0e:	4013      	ands	r3, r2
 8017b10:	f846 3c04 	str.w	r3, [r6, #-4]
 8017b14:	e7d4      	b.n	8017ac0 <__hexnan+0xd4>
 8017b16:	3f04      	subs	r7, #4
 8017b18:	e7d2      	b.n	8017ac0 <__hexnan+0xd4>
 8017b1a:	2004      	movs	r0, #4
 8017b1c:	b007      	add	sp, #28
 8017b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b22 <__ssputs_r>:
 8017b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b26:	688e      	ldr	r6, [r1, #8]
 8017b28:	461f      	mov	r7, r3
 8017b2a:	42be      	cmp	r6, r7
 8017b2c:	680b      	ldr	r3, [r1, #0]
 8017b2e:	4682      	mov	sl, r0
 8017b30:	460c      	mov	r4, r1
 8017b32:	4690      	mov	r8, r2
 8017b34:	d82c      	bhi.n	8017b90 <__ssputs_r+0x6e>
 8017b36:	898a      	ldrh	r2, [r1, #12]
 8017b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017b3c:	d026      	beq.n	8017b8c <__ssputs_r+0x6a>
 8017b3e:	6965      	ldr	r5, [r4, #20]
 8017b40:	6909      	ldr	r1, [r1, #16]
 8017b42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b46:	eba3 0901 	sub.w	r9, r3, r1
 8017b4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017b4e:	1c7b      	adds	r3, r7, #1
 8017b50:	444b      	add	r3, r9
 8017b52:	106d      	asrs	r5, r5, #1
 8017b54:	429d      	cmp	r5, r3
 8017b56:	bf38      	it	cc
 8017b58:	461d      	movcc	r5, r3
 8017b5a:	0553      	lsls	r3, r2, #21
 8017b5c:	d527      	bpl.n	8017bae <__ssputs_r+0x8c>
 8017b5e:	4629      	mov	r1, r5
 8017b60:	f000 faa2 	bl	80180a8 <_malloc_r>
 8017b64:	4606      	mov	r6, r0
 8017b66:	b360      	cbz	r0, 8017bc2 <__ssputs_r+0xa0>
 8017b68:	6921      	ldr	r1, [r4, #16]
 8017b6a:	464a      	mov	r2, r9
 8017b6c:	f7fe fde3 	bl	8016736 <memcpy>
 8017b70:	89a3      	ldrh	r3, [r4, #12]
 8017b72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b7a:	81a3      	strh	r3, [r4, #12]
 8017b7c:	6126      	str	r6, [r4, #16]
 8017b7e:	6165      	str	r5, [r4, #20]
 8017b80:	444e      	add	r6, r9
 8017b82:	eba5 0509 	sub.w	r5, r5, r9
 8017b86:	6026      	str	r6, [r4, #0]
 8017b88:	60a5      	str	r5, [r4, #8]
 8017b8a:	463e      	mov	r6, r7
 8017b8c:	42be      	cmp	r6, r7
 8017b8e:	d900      	bls.n	8017b92 <__ssputs_r+0x70>
 8017b90:	463e      	mov	r6, r7
 8017b92:	6820      	ldr	r0, [r4, #0]
 8017b94:	4632      	mov	r2, r6
 8017b96:	4641      	mov	r1, r8
 8017b98:	f001 f9f1 	bl	8018f7e <memmove>
 8017b9c:	68a3      	ldr	r3, [r4, #8]
 8017b9e:	1b9b      	subs	r3, r3, r6
 8017ba0:	60a3      	str	r3, [r4, #8]
 8017ba2:	6823      	ldr	r3, [r4, #0]
 8017ba4:	4433      	add	r3, r6
 8017ba6:	6023      	str	r3, [r4, #0]
 8017ba8:	2000      	movs	r0, #0
 8017baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bae:	462a      	mov	r2, r5
 8017bb0:	f001 f8b2 	bl	8018d18 <_realloc_r>
 8017bb4:	4606      	mov	r6, r0
 8017bb6:	2800      	cmp	r0, #0
 8017bb8:	d1e0      	bne.n	8017b7c <__ssputs_r+0x5a>
 8017bba:	6921      	ldr	r1, [r4, #16]
 8017bbc:	4650      	mov	r0, sl
 8017bbe:	f001 fa8d 	bl	80190dc <_free_r>
 8017bc2:	230c      	movs	r3, #12
 8017bc4:	f8ca 3000 	str.w	r3, [sl]
 8017bc8:	89a3      	ldrh	r3, [r4, #12]
 8017bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bce:	81a3      	strh	r3, [r4, #12]
 8017bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017bd4:	e7e9      	b.n	8017baa <__ssputs_r+0x88>
	...

08017bd8 <_svfiprintf_r>:
 8017bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bdc:	4698      	mov	r8, r3
 8017bde:	898b      	ldrh	r3, [r1, #12]
 8017be0:	061b      	lsls	r3, r3, #24
 8017be2:	b09d      	sub	sp, #116	; 0x74
 8017be4:	4607      	mov	r7, r0
 8017be6:	460d      	mov	r5, r1
 8017be8:	4614      	mov	r4, r2
 8017bea:	d50e      	bpl.n	8017c0a <_svfiprintf_r+0x32>
 8017bec:	690b      	ldr	r3, [r1, #16]
 8017bee:	b963      	cbnz	r3, 8017c0a <_svfiprintf_r+0x32>
 8017bf0:	2140      	movs	r1, #64	; 0x40
 8017bf2:	f000 fa59 	bl	80180a8 <_malloc_r>
 8017bf6:	6028      	str	r0, [r5, #0]
 8017bf8:	6128      	str	r0, [r5, #16]
 8017bfa:	b920      	cbnz	r0, 8017c06 <_svfiprintf_r+0x2e>
 8017bfc:	230c      	movs	r3, #12
 8017bfe:	603b      	str	r3, [r7, #0]
 8017c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c04:	e0d0      	b.n	8017da8 <_svfiprintf_r+0x1d0>
 8017c06:	2340      	movs	r3, #64	; 0x40
 8017c08:	616b      	str	r3, [r5, #20]
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c0e:	2320      	movs	r3, #32
 8017c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c18:	2330      	movs	r3, #48	; 0x30
 8017c1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017dc0 <_svfiprintf_r+0x1e8>
 8017c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c22:	f04f 0901 	mov.w	r9, #1
 8017c26:	4623      	mov	r3, r4
 8017c28:	469a      	mov	sl, r3
 8017c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c2e:	b10a      	cbz	r2, 8017c34 <_svfiprintf_r+0x5c>
 8017c30:	2a25      	cmp	r2, #37	; 0x25
 8017c32:	d1f9      	bne.n	8017c28 <_svfiprintf_r+0x50>
 8017c34:	ebba 0b04 	subs.w	fp, sl, r4
 8017c38:	d00b      	beq.n	8017c52 <_svfiprintf_r+0x7a>
 8017c3a:	465b      	mov	r3, fp
 8017c3c:	4622      	mov	r2, r4
 8017c3e:	4629      	mov	r1, r5
 8017c40:	4638      	mov	r0, r7
 8017c42:	f7ff ff6e 	bl	8017b22 <__ssputs_r>
 8017c46:	3001      	adds	r0, #1
 8017c48:	f000 80a9 	beq.w	8017d9e <_svfiprintf_r+0x1c6>
 8017c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c4e:	445a      	add	r2, fp
 8017c50:	9209      	str	r2, [sp, #36]	; 0x24
 8017c52:	f89a 3000 	ldrb.w	r3, [sl]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	f000 80a1 	beq.w	8017d9e <_svfiprintf_r+0x1c6>
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c66:	f10a 0a01 	add.w	sl, sl, #1
 8017c6a:	9304      	str	r3, [sp, #16]
 8017c6c:	9307      	str	r3, [sp, #28]
 8017c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c72:	931a      	str	r3, [sp, #104]	; 0x68
 8017c74:	4654      	mov	r4, sl
 8017c76:	2205      	movs	r2, #5
 8017c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c7c:	4850      	ldr	r0, [pc, #320]	; (8017dc0 <_svfiprintf_r+0x1e8>)
 8017c7e:	f7e8 fa7f 	bl	8000180 <memchr>
 8017c82:	9a04      	ldr	r2, [sp, #16]
 8017c84:	b9d8      	cbnz	r0, 8017cbe <_svfiprintf_r+0xe6>
 8017c86:	06d0      	lsls	r0, r2, #27
 8017c88:	bf44      	itt	mi
 8017c8a:	2320      	movmi	r3, #32
 8017c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c90:	0711      	lsls	r1, r2, #28
 8017c92:	bf44      	itt	mi
 8017c94:	232b      	movmi	r3, #43	; 0x2b
 8017c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8017c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8017ca0:	d015      	beq.n	8017cce <_svfiprintf_r+0xf6>
 8017ca2:	9a07      	ldr	r2, [sp, #28]
 8017ca4:	4654      	mov	r4, sl
 8017ca6:	2000      	movs	r0, #0
 8017ca8:	f04f 0c0a 	mov.w	ip, #10
 8017cac:	4621      	mov	r1, r4
 8017cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017cb2:	3b30      	subs	r3, #48	; 0x30
 8017cb4:	2b09      	cmp	r3, #9
 8017cb6:	d94d      	bls.n	8017d54 <_svfiprintf_r+0x17c>
 8017cb8:	b1b0      	cbz	r0, 8017ce8 <_svfiprintf_r+0x110>
 8017cba:	9207      	str	r2, [sp, #28]
 8017cbc:	e014      	b.n	8017ce8 <_svfiprintf_r+0x110>
 8017cbe:	eba0 0308 	sub.w	r3, r0, r8
 8017cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8017cc6:	4313      	orrs	r3, r2
 8017cc8:	9304      	str	r3, [sp, #16]
 8017cca:	46a2      	mov	sl, r4
 8017ccc:	e7d2      	b.n	8017c74 <_svfiprintf_r+0x9c>
 8017cce:	9b03      	ldr	r3, [sp, #12]
 8017cd0:	1d19      	adds	r1, r3, #4
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	9103      	str	r1, [sp, #12]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	bfbb      	ittet	lt
 8017cda:	425b      	neglt	r3, r3
 8017cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8017ce0:	9307      	strge	r3, [sp, #28]
 8017ce2:	9307      	strlt	r3, [sp, #28]
 8017ce4:	bfb8      	it	lt
 8017ce6:	9204      	strlt	r2, [sp, #16]
 8017ce8:	7823      	ldrb	r3, [r4, #0]
 8017cea:	2b2e      	cmp	r3, #46	; 0x2e
 8017cec:	d10c      	bne.n	8017d08 <_svfiprintf_r+0x130>
 8017cee:	7863      	ldrb	r3, [r4, #1]
 8017cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8017cf2:	d134      	bne.n	8017d5e <_svfiprintf_r+0x186>
 8017cf4:	9b03      	ldr	r3, [sp, #12]
 8017cf6:	1d1a      	adds	r2, r3, #4
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	9203      	str	r2, [sp, #12]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	bfb8      	it	lt
 8017d00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017d04:	3402      	adds	r4, #2
 8017d06:	9305      	str	r3, [sp, #20]
 8017d08:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8017dc4 <_svfiprintf_r+0x1ec>
 8017d0c:	7821      	ldrb	r1, [r4, #0]
 8017d0e:	2203      	movs	r2, #3
 8017d10:	4650      	mov	r0, sl
 8017d12:	f7e8 fa35 	bl	8000180 <memchr>
 8017d16:	b138      	cbz	r0, 8017d28 <_svfiprintf_r+0x150>
 8017d18:	9b04      	ldr	r3, [sp, #16]
 8017d1a:	eba0 000a 	sub.w	r0, r0, sl
 8017d1e:	2240      	movs	r2, #64	; 0x40
 8017d20:	4082      	lsls	r2, r0
 8017d22:	4313      	orrs	r3, r2
 8017d24:	3401      	adds	r4, #1
 8017d26:	9304      	str	r3, [sp, #16]
 8017d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d2c:	4826      	ldr	r0, [pc, #152]	; (8017dc8 <_svfiprintf_r+0x1f0>)
 8017d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d32:	2206      	movs	r2, #6
 8017d34:	f7e8 fa24 	bl	8000180 <memchr>
 8017d38:	2800      	cmp	r0, #0
 8017d3a:	d038      	beq.n	8017dae <_svfiprintf_r+0x1d6>
 8017d3c:	4b23      	ldr	r3, [pc, #140]	; (8017dcc <_svfiprintf_r+0x1f4>)
 8017d3e:	bb1b      	cbnz	r3, 8017d88 <_svfiprintf_r+0x1b0>
 8017d40:	9b03      	ldr	r3, [sp, #12]
 8017d42:	3307      	adds	r3, #7
 8017d44:	f023 0307 	bic.w	r3, r3, #7
 8017d48:	3308      	adds	r3, #8
 8017d4a:	9303      	str	r3, [sp, #12]
 8017d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d4e:	4433      	add	r3, r6
 8017d50:	9309      	str	r3, [sp, #36]	; 0x24
 8017d52:	e768      	b.n	8017c26 <_svfiprintf_r+0x4e>
 8017d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d58:	460c      	mov	r4, r1
 8017d5a:	2001      	movs	r0, #1
 8017d5c:	e7a6      	b.n	8017cac <_svfiprintf_r+0xd4>
 8017d5e:	2300      	movs	r3, #0
 8017d60:	3401      	adds	r4, #1
 8017d62:	9305      	str	r3, [sp, #20]
 8017d64:	4619      	mov	r1, r3
 8017d66:	f04f 0c0a 	mov.w	ip, #10
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d70:	3a30      	subs	r2, #48	; 0x30
 8017d72:	2a09      	cmp	r2, #9
 8017d74:	d903      	bls.n	8017d7e <_svfiprintf_r+0x1a6>
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d0c6      	beq.n	8017d08 <_svfiprintf_r+0x130>
 8017d7a:	9105      	str	r1, [sp, #20]
 8017d7c:	e7c4      	b.n	8017d08 <_svfiprintf_r+0x130>
 8017d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d82:	4604      	mov	r4, r0
 8017d84:	2301      	movs	r3, #1
 8017d86:	e7f0      	b.n	8017d6a <_svfiprintf_r+0x192>
 8017d88:	ab03      	add	r3, sp, #12
 8017d8a:	9300      	str	r3, [sp, #0]
 8017d8c:	462a      	mov	r2, r5
 8017d8e:	4b10      	ldr	r3, [pc, #64]	; (8017dd0 <_svfiprintf_r+0x1f8>)
 8017d90:	a904      	add	r1, sp, #16
 8017d92:	4638      	mov	r0, r7
 8017d94:	f7fc fee6 	bl	8014b64 <_printf_float>
 8017d98:	1c42      	adds	r2, r0, #1
 8017d9a:	4606      	mov	r6, r0
 8017d9c:	d1d6      	bne.n	8017d4c <_svfiprintf_r+0x174>
 8017d9e:	89ab      	ldrh	r3, [r5, #12]
 8017da0:	065b      	lsls	r3, r3, #25
 8017da2:	f53f af2d 	bmi.w	8017c00 <_svfiprintf_r+0x28>
 8017da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017da8:	b01d      	add	sp, #116	; 0x74
 8017daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dae:	ab03      	add	r3, sp, #12
 8017db0:	9300      	str	r3, [sp, #0]
 8017db2:	462a      	mov	r2, r5
 8017db4:	4b06      	ldr	r3, [pc, #24]	; (8017dd0 <_svfiprintf_r+0x1f8>)
 8017db6:	a904      	add	r1, sp, #16
 8017db8:	4638      	mov	r0, r7
 8017dba:	f7fd f96d 	bl	8015098 <_printf_i>
 8017dbe:	e7eb      	b.n	8017d98 <_svfiprintf_r+0x1c0>
 8017dc0:	0801a692 	.word	0x0801a692
 8017dc4:	0801a698 	.word	0x0801a698
 8017dc8:	0801a69c 	.word	0x0801a69c
 8017dcc:	08014b65 	.word	0x08014b65
 8017dd0:	08017b23 	.word	0x08017b23

08017dd4 <__sfputc_r>:
 8017dd4:	6893      	ldr	r3, [r2, #8]
 8017dd6:	3b01      	subs	r3, #1
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	b410      	push	{r4}
 8017ddc:	6093      	str	r3, [r2, #8]
 8017dde:	da07      	bge.n	8017df0 <__sfputc_r+0x1c>
 8017de0:	6994      	ldr	r4, [r2, #24]
 8017de2:	42a3      	cmp	r3, r4
 8017de4:	db01      	blt.n	8017dea <__sfputc_r+0x16>
 8017de6:	290a      	cmp	r1, #10
 8017de8:	d102      	bne.n	8017df0 <__sfputc_r+0x1c>
 8017dea:	bc10      	pop	{r4}
 8017dec:	f000 bfc3 	b.w	8018d76 <__swbuf_r>
 8017df0:	6813      	ldr	r3, [r2, #0]
 8017df2:	1c58      	adds	r0, r3, #1
 8017df4:	6010      	str	r0, [r2, #0]
 8017df6:	7019      	strb	r1, [r3, #0]
 8017df8:	4608      	mov	r0, r1
 8017dfa:	bc10      	pop	{r4}
 8017dfc:	4770      	bx	lr

08017dfe <__sfputs_r>:
 8017dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e00:	4606      	mov	r6, r0
 8017e02:	460f      	mov	r7, r1
 8017e04:	4614      	mov	r4, r2
 8017e06:	18d5      	adds	r5, r2, r3
 8017e08:	42ac      	cmp	r4, r5
 8017e0a:	d101      	bne.n	8017e10 <__sfputs_r+0x12>
 8017e0c:	2000      	movs	r0, #0
 8017e0e:	e007      	b.n	8017e20 <__sfputs_r+0x22>
 8017e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e14:	463a      	mov	r2, r7
 8017e16:	4630      	mov	r0, r6
 8017e18:	f7ff ffdc 	bl	8017dd4 <__sfputc_r>
 8017e1c:	1c43      	adds	r3, r0, #1
 8017e1e:	d1f3      	bne.n	8017e08 <__sfputs_r+0xa>
 8017e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017e24 <_vfiprintf_r>:
 8017e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e28:	460d      	mov	r5, r1
 8017e2a:	b09d      	sub	sp, #116	; 0x74
 8017e2c:	4614      	mov	r4, r2
 8017e2e:	4698      	mov	r8, r3
 8017e30:	4606      	mov	r6, r0
 8017e32:	b118      	cbz	r0, 8017e3c <_vfiprintf_r+0x18>
 8017e34:	6a03      	ldr	r3, [r0, #32]
 8017e36:	b90b      	cbnz	r3, 8017e3c <_vfiprintf_r+0x18>
 8017e38:	f7fd fd08 	bl	801584c <__sinit>
 8017e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e3e:	07d9      	lsls	r1, r3, #31
 8017e40:	d405      	bmi.n	8017e4e <_vfiprintf_r+0x2a>
 8017e42:	89ab      	ldrh	r3, [r5, #12]
 8017e44:	059a      	lsls	r2, r3, #22
 8017e46:	d402      	bmi.n	8017e4e <_vfiprintf_r+0x2a>
 8017e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e4a:	f7fe fc72 	bl	8016732 <__retarget_lock_acquire_recursive>
 8017e4e:	89ab      	ldrh	r3, [r5, #12]
 8017e50:	071b      	lsls	r3, r3, #28
 8017e52:	d501      	bpl.n	8017e58 <_vfiprintf_r+0x34>
 8017e54:	692b      	ldr	r3, [r5, #16]
 8017e56:	b99b      	cbnz	r3, 8017e80 <_vfiprintf_r+0x5c>
 8017e58:	4629      	mov	r1, r5
 8017e5a:	4630      	mov	r0, r6
 8017e5c:	f000 ffc8 	bl	8018df0 <__swsetup_r>
 8017e60:	b170      	cbz	r0, 8017e80 <_vfiprintf_r+0x5c>
 8017e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e64:	07dc      	lsls	r4, r3, #31
 8017e66:	d504      	bpl.n	8017e72 <_vfiprintf_r+0x4e>
 8017e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e6c:	b01d      	add	sp, #116	; 0x74
 8017e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e72:	89ab      	ldrh	r3, [r5, #12]
 8017e74:	0598      	lsls	r0, r3, #22
 8017e76:	d4f7      	bmi.n	8017e68 <_vfiprintf_r+0x44>
 8017e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e7a:	f7fe fc5b 	bl	8016734 <__retarget_lock_release_recursive>
 8017e7e:	e7f3      	b.n	8017e68 <_vfiprintf_r+0x44>
 8017e80:	2300      	movs	r3, #0
 8017e82:	9309      	str	r3, [sp, #36]	; 0x24
 8017e84:	2320      	movs	r3, #32
 8017e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e8e:	2330      	movs	r3, #48	; 0x30
 8017e90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018044 <_vfiprintf_r+0x220>
 8017e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e98:	f04f 0901 	mov.w	r9, #1
 8017e9c:	4623      	mov	r3, r4
 8017e9e:	469a      	mov	sl, r3
 8017ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ea4:	b10a      	cbz	r2, 8017eaa <_vfiprintf_r+0x86>
 8017ea6:	2a25      	cmp	r2, #37	; 0x25
 8017ea8:	d1f9      	bne.n	8017e9e <_vfiprintf_r+0x7a>
 8017eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8017eae:	d00b      	beq.n	8017ec8 <_vfiprintf_r+0xa4>
 8017eb0:	465b      	mov	r3, fp
 8017eb2:	4622      	mov	r2, r4
 8017eb4:	4629      	mov	r1, r5
 8017eb6:	4630      	mov	r0, r6
 8017eb8:	f7ff ffa1 	bl	8017dfe <__sfputs_r>
 8017ebc:	3001      	adds	r0, #1
 8017ebe:	f000 80a9 	beq.w	8018014 <_vfiprintf_r+0x1f0>
 8017ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ec4:	445a      	add	r2, fp
 8017ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8017ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	f000 80a1 	beq.w	8018014 <_vfiprintf_r+0x1f0>
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017edc:	f10a 0a01 	add.w	sl, sl, #1
 8017ee0:	9304      	str	r3, [sp, #16]
 8017ee2:	9307      	str	r3, [sp, #28]
 8017ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8017eea:	4654      	mov	r4, sl
 8017eec:	2205      	movs	r2, #5
 8017eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ef2:	4854      	ldr	r0, [pc, #336]	; (8018044 <_vfiprintf_r+0x220>)
 8017ef4:	f7e8 f944 	bl	8000180 <memchr>
 8017ef8:	9a04      	ldr	r2, [sp, #16]
 8017efa:	b9d8      	cbnz	r0, 8017f34 <_vfiprintf_r+0x110>
 8017efc:	06d1      	lsls	r1, r2, #27
 8017efe:	bf44      	itt	mi
 8017f00:	2320      	movmi	r3, #32
 8017f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f06:	0713      	lsls	r3, r2, #28
 8017f08:	bf44      	itt	mi
 8017f0a:	232b      	movmi	r3, #43	; 0x2b
 8017f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f10:	f89a 3000 	ldrb.w	r3, [sl]
 8017f14:	2b2a      	cmp	r3, #42	; 0x2a
 8017f16:	d015      	beq.n	8017f44 <_vfiprintf_r+0x120>
 8017f18:	9a07      	ldr	r2, [sp, #28]
 8017f1a:	4654      	mov	r4, sl
 8017f1c:	2000      	movs	r0, #0
 8017f1e:	f04f 0c0a 	mov.w	ip, #10
 8017f22:	4621      	mov	r1, r4
 8017f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f28:	3b30      	subs	r3, #48	; 0x30
 8017f2a:	2b09      	cmp	r3, #9
 8017f2c:	d94d      	bls.n	8017fca <_vfiprintf_r+0x1a6>
 8017f2e:	b1b0      	cbz	r0, 8017f5e <_vfiprintf_r+0x13a>
 8017f30:	9207      	str	r2, [sp, #28]
 8017f32:	e014      	b.n	8017f5e <_vfiprintf_r+0x13a>
 8017f34:	eba0 0308 	sub.w	r3, r0, r8
 8017f38:	fa09 f303 	lsl.w	r3, r9, r3
 8017f3c:	4313      	orrs	r3, r2
 8017f3e:	9304      	str	r3, [sp, #16]
 8017f40:	46a2      	mov	sl, r4
 8017f42:	e7d2      	b.n	8017eea <_vfiprintf_r+0xc6>
 8017f44:	9b03      	ldr	r3, [sp, #12]
 8017f46:	1d19      	adds	r1, r3, #4
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	9103      	str	r1, [sp, #12]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	bfbb      	ittet	lt
 8017f50:	425b      	neglt	r3, r3
 8017f52:	f042 0202 	orrlt.w	r2, r2, #2
 8017f56:	9307      	strge	r3, [sp, #28]
 8017f58:	9307      	strlt	r3, [sp, #28]
 8017f5a:	bfb8      	it	lt
 8017f5c:	9204      	strlt	r2, [sp, #16]
 8017f5e:	7823      	ldrb	r3, [r4, #0]
 8017f60:	2b2e      	cmp	r3, #46	; 0x2e
 8017f62:	d10c      	bne.n	8017f7e <_vfiprintf_r+0x15a>
 8017f64:	7863      	ldrb	r3, [r4, #1]
 8017f66:	2b2a      	cmp	r3, #42	; 0x2a
 8017f68:	d134      	bne.n	8017fd4 <_vfiprintf_r+0x1b0>
 8017f6a:	9b03      	ldr	r3, [sp, #12]
 8017f6c:	1d1a      	adds	r2, r3, #4
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	9203      	str	r2, [sp, #12]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	bfb8      	it	lt
 8017f76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017f7a:	3402      	adds	r4, #2
 8017f7c:	9305      	str	r3, [sp, #20]
 8017f7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018048 <_vfiprintf_r+0x224>
 8017f82:	7821      	ldrb	r1, [r4, #0]
 8017f84:	2203      	movs	r2, #3
 8017f86:	4650      	mov	r0, sl
 8017f88:	f7e8 f8fa 	bl	8000180 <memchr>
 8017f8c:	b138      	cbz	r0, 8017f9e <_vfiprintf_r+0x17a>
 8017f8e:	9b04      	ldr	r3, [sp, #16]
 8017f90:	eba0 000a 	sub.w	r0, r0, sl
 8017f94:	2240      	movs	r2, #64	; 0x40
 8017f96:	4082      	lsls	r2, r0
 8017f98:	4313      	orrs	r3, r2
 8017f9a:	3401      	adds	r4, #1
 8017f9c:	9304      	str	r3, [sp, #16]
 8017f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fa2:	482a      	ldr	r0, [pc, #168]	; (801804c <_vfiprintf_r+0x228>)
 8017fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017fa8:	2206      	movs	r2, #6
 8017faa:	f7e8 f8e9 	bl	8000180 <memchr>
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d03f      	beq.n	8018032 <_vfiprintf_r+0x20e>
 8017fb2:	4b27      	ldr	r3, [pc, #156]	; (8018050 <_vfiprintf_r+0x22c>)
 8017fb4:	bb1b      	cbnz	r3, 8017ffe <_vfiprintf_r+0x1da>
 8017fb6:	9b03      	ldr	r3, [sp, #12]
 8017fb8:	3307      	adds	r3, #7
 8017fba:	f023 0307 	bic.w	r3, r3, #7
 8017fbe:	3308      	adds	r3, #8
 8017fc0:	9303      	str	r3, [sp, #12]
 8017fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fc4:	443b      	add	r3, r7
 8017fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8017fc8:	e768      	b.n	8017e9c <_vfiprintf_r+0x78>
 8017fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fce:	460c      	mov	r4, r1
 8017fd0:	2001      	movs	r0, #1
 8017fd2:	e7a6      	b.n	8017f22 <_vfiprintf_r+0xfe>
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	3401      	adds	r4, #1
 8017fd8:	9305      	str	r3, [sp, #20]
 8017fda:	4619      	mov	r1, r3
 8017fdc:	f04f 0c0a 	mov.w	ip, #10
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fe6:	3a30      	subs	r2, #48	; 0x30
 8017fe8:	2a09      	cmp	r2, #9
 8017fea:	d903      	bls.n	8017ff4 <_vfiprintf_r+0x1d0>
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d0c6      	beq.n	8017f7e <_vfiprintf_r+0x15a>
 8017ff0:	9105      	str	r1, [sp, #20]
 8017ff2:	e7c4      	b.n	8017f7e <_vfiprintf_r+0x15a>
 8017ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ff8:	4604      	mov	r4, r0
 8017ffa:	2301      	movs	r3, #1
 8017ffc:	e7f0      	b.n	8017fe0 <_vfiprintf_r+0x1bc>
 8017ffe:	ab03      	add	r3, sp, #12
 8018000:	9300      	str	r3, [sp, #0]
 8018002:	462a      	mov	r2, r5
 8018004:	4b13      	ldr	r3, [pc, #76]	; (8018054 <_vfiprintf_r+0x230>)
 8018006:	a904      	add	r1, sp, #16
 8018008:	4630      	mov	r0, r6
 801800a:	f7fc fdab 	bl	8014b64 <_printf_float>
 801800e:	4607      	mov	r7, r0
 8018010:	1c78      	adds	r0, r7, #1
 8018012:	d1d6      	bne.n	8017fc2 <_vfiprintf_r+0x19e>
 8018014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018016:	07d9      	lsls	r1, r3, #31
 8018018:	d405      	bmi.n	8018026 <_vfiprintf_r+0x202>
 801801a:	89ab      	ldrh	r3, [r5, #12]
 801801c:	059a      	lsls	r2, r3, #22
 801801e:	d402      	bmi.n	8018026 <_vfiprintf_r+0x202>
 8018020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018022:	f7fe fb87 	bl	8016734 <__retarget_lock_release_recursive>
 8018026:	89ab      	ldrh	r3, [r5, #12]
 8018028:	065b      	lsls	r3, r3, #25
 801802a:	f53f af1d 	bmi.w	8017e68 <_vfiprintf_r+0x44>
 801802e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018030:	e71c      	b.n	8017e6c <_vfiprintf_r+0x48>
 8018032:	ab03      	add	r3, sp, #12
 8018034:	9300      	str	r3, [sp, #0]
 8018036:	462a      	mov	r2, r5
 8018038:	4b06      	ldr	r3, [pc, #24]	; (8018054 <_vfiprintf_r+0x230>)
 801803a:	a904      	add	r1, sp, #16
 801803c:	4630      	mov	r0, r6
 801803e:	f7fd f82b 	bl	8015098 <_printf_i>
 8018042:	e7e4      	b.n	801800e <_vfiprintf_r+0x1ea>
 8018044:	0801a692 	.word	0x0801a692
 8018048:	0801a698 	.word	0x0801a698
 801804c:	0801a69c 	.word	0x0801a69c
 8018050:	08014b65 	.word	0x08014b65
 8018054:	08017dff 	.word	0x08017dff

08018058 <malloc>:
 8018058:	4b02      	ldr	r3, [pc, #8]	; (8018064 <malloc+0xc>)
 801805a:	4601      	mov	r1, r0
 801805c:	6818      	ldr	r0, [r3, #0]
 801805e:	f000 b823 	b.w	80180a8 <_malloc_r>
 8018062:	bf00      	nop
 8018064:	200003e4 	.word	0x200003e4

08018068 <sbrk_aligned>:
 8018068:	b570      	push	{r4, r5, r6, lr}
 801806a:	4e0e      	ldr	r6, [pc, #56]	; (80180a4 <sbrk_aligned+0x3c>)
 801806c:	460c      	mov	r4, r1
 801806e:	6831      	ldr	r1, [r6, #0]
 8018070:	4605      	mov	r5, r0
 8018072:	b911      	cbnz	r1, 801807a <sbrk_aligned+0x12>
 8018074:	f000 fff4 	bl	8019060 <_sbrk_r>
 8018078:	6030      	str	r0, [r6, #0]
 801807a:	4621      	mov	r1, r4
 801807c:	4628      	mov	r0, r5
 801807e:	f000 ffef 	bl	8019060 <_sbrk_r>
 8018082:	1c43      	adds	r3, r0, #1
 8018084:	d00a      	beq.n	801809c <sbrk_aligned+0x34>
 8018086:	1cc4      	adds	r4, r0, #3
 8018088:	f024 0403 	bic.w	r4, r4, #3
 801808c:	42a0      	cmp	r0, r4
 801808e:	d007      	beq.n	80180a0 <sbrk_aligned+0x38>
 8018090:	1a21      	subs	r1, r4, r0
 8018092:	4628      	mov	r0, r5
 8018094:	f000 ffe4 	bl	8019060 <_sbrk_r>
 8018098:	3001      	adds	r0, #1
 801809a:	d101      	bne.n	80180a0 <sbrk_aligned+0x38>
 801809c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80180a0:	4620      	mov	r0, r4
 80180a2:	bd70      	pop	{r4, r5, r6, pc}
 80180a4:	20001ea8 	.word	0x20001ea8

080180a8 <_malloc_r>:
 80180a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180ac:	1ccd      	adds	r5, r1, #3
 80180ae:	f025 0503 	bic.w	r5, r5, #3
 80180b2:	3508      	adds	r5, #8
 80180b4:	2d0c      	cmp	r5, #12
 80180b6:	bf38      	it	cc
 80180b8:	250c      	movcc	r5, #12
 80180ba:	2d00      	cmp	r5, #0
 80180bc:	4607      	mov	r7, r0
 80180be:	db01      	blt.n	80180c4 <_malloc_r+0x1c>
 80180c0:	42a9      	cmp	r1, r5
 80180c2:	d905      	bls.n	80180d0 <_malloc_r+0x28>
 80180c4:	230c      	movs	r3, #12
 80180c6:	603b      	str	r3, [r7, #0]
 80180c8:	2600      	movs	r6, #0
 80180ca:	4630      	mov	r0, r6
 80180cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80181a4 <_malloc_r+0xfc>
 80180d4:	f000 f924 	bl	8018320 <__malloc_lock>
 80180d8:	f8d8 3000 	ldr.w	r3, [r8]
 80180dc:	461c      	mov	r4, r3
 80180de:	bb5c      	cbnz	r4, 8018138 <_malloc_r+0x90>
 80180e0:	4629      	mov	r1, r5
 80180e2:	4638      	mov	r0, r7
 80180e4:	f7ff ffc0 	bl	8018068 <sbrk_aligned>
 80180e8:	1c43      	adds	r3, r0, #1
 80180ea:	4604      	mov	r4, r0
 80180ec:	d155      	bne.n	801819a <_malloc_r+0xf2>
 80180ee:	f8d8 4000 	ldr.w	r4, [r8]
 80180f2:	4626      	mov	r6, r4
 80180f4:	2e00      	cmp	r6, #0
 80180f6:	d145      	bne.n	8018184 <_malloc_r+0xdc>
 80180f8:	2c00      	cmp	r4, #0
 80180fa:	d048      	beq.n	801818e <_malloc_r+0xe6>
 80180fc:	6823      	ldr	r3, [r4, #0]
 80180fe:	4631      	mov	r1, r6
 8018100:	4638      	mov	r0, r7
 8018102:	eb04 0903 	add.w	r9, r4, r3
 8018106:	f000 ffab 	bl	8019060 <_sbrk_r>
 801810a:	4581      	cmp	r9, r0
 801810c:	d13f      	bne.n	801818e <_malloc_r+0xe6>
 801810e:	6821      	ldr	r1, [r4, #0]
 8018110:	1a6d      	subs	r5, r5, r1
 8018112:	4629      	mov	r1, r5
 8018114:	4638      	mov	r0, r7
 8018116:	f7ff ffa7 	bl	8018068 <sbrk_aligned>
 801811a:	3001      	adds	r0, #1
 801811c:	d037      	beq.n	801818e <_malloc_r+0xe6>
 801811e:	6823      	ldr	r3, [r4, #0]
 8018120:	442b      	add	r3, r5
 8018122:	6023      	str	r3, [r4, #0]
 8018124:	f8d8 3000 	ldr.w	r3, [r8]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d038      	beq.n	801819e <_malloc_r+0xf6>
 801812c:	685a      	ldr	r2, [r3, #4]
 801812e:	42a2      	cmp	r2, r4
 8018130:	d12b      	bne.n	801818a <_malloc_r+0xe2>
 8018132:	2200      	movs	r2, #0
 8018134:	605a      	str	r2, [r3, #4]
 8018136:	e00f      	b.n	8018158 <_malloc_r+0xb0>
 8018138:	6822      	ldr	r2, [r4, #0]
 801813a:	1b52      	subs	r2, r2, r5
 801813c:	d41f      	bmi.n	801817e <_malloc_r+0xd6>
 801813e:	2a0b      	cmp	r2, #11
 8018140:	d917      	bls.n	8018172 <_malloc_r+0xca>
 8018142:	1961      	adds	r1, r4, r5
 8018144:	42a3      	cmp	r3, r4
 8018146:	6025      	str	r5, [r4, #0]
 8018148:	bf18      	it	ne
 801814a:	6059      	strne	r1, [r3, #4]
 801814c:	6863      	ldr	r3, [r4, #4]
 801814e:	bf08      	it	eq
 8018150:	f8c8 1000 	streq.w	r1, [r8]
 8018154:	5162      	str	r2, [r4, r5]
 8018156:	604b      	str	r3, [r1, #4]
 8018158:	4638      	mov	r0, r7
 801815a:	f104 060b 	add.w	r6, r4, #11
 801815e:	f000 f8e5 	bl	801832c <__malloc_unlock>
 8018162:	f026 0607 	bic.w	r6, r6, #7
 8018166:	1d23      	adds	r3, r4, #4
 8018168:	1af2      	subs	r2, r6, r3
 801816a:	d0ae      	beq.n	80180ca <_malloc_r+0x22>
 801816c:	1b9b      	subs	r3, r3, r6
 801816e:	50a3      	str	r3, [r4, r2]
 8018170:	e7ab      	b.n	80180ca <_malloc_r+0x22>
 8018172:	42a3      	cmp	r3, r4
 8018174:	6862      	ldr	r2, [r4, #4]
 8018176:	d1dd      	bne.n	8018134 <_malloc_r+0x8c>
 8018178:	f8c8 2000 	str.w	r2, [r8]
 801817c:	e7ec      	b.n	8018158 <_malloc_r+0xb0>
 801817e:	4623      	mov	r3, r4
 8018180:	6864      	ldr	r4, [r4, #4]
 8018182:	e7ac      	b.n	80180de <_malloc_r+0x36>
 8018184:	4634      	mov	r4, r6
 8018186:	6876      	ldr	r6, [r6, #4]
 8018188:	e7b4      	b.n	80180f4 <_malloc_r+0x4c>
 801818a:	4613      	mov	r3, r2
 801818c:	e7cc      	b.n	8018128 <_malloc_r+0x80>
 801818e:	230c      	movs	r3, #12
 8018190:	603b      	str	r3, [r7, #0]
 8018192:	4638      	mov	r0, r7
 8018194:	f000 f8ca 	bl	801832c <__malloc_unlock>
 8018198:	e797      	b.n	80180ca <_malloc_r+0x22>
 801819a:	6025      	str	r5, [r4, #0]
 801819c:	e7dc      	b.n	8018158 <_malloc_r+0xb0>
 801819e:	605b      	str	r3, [r3, #4]
 80181a0:	deff      	udf	#255	; 0xff
 80181a2:	bf00      	nop
 80181a4:	20001ea4 	.word	0x20001ea4

080181a8 <__ascii_mbtowc>:
 80181a8:	b082      	sub	sp, #8
 80181aa:	b901      	cbnz	r1, 80181ae <__ascii_mbtowc+0x6>
 80181ac:	a901      	add	r1, sp, #4
 80181ae:	b142      	cbz	r2, 80181c2 <__ascii_mbtowc+0x1a>
 80181b0:	b14b      	cbz	r3, 80181c6 <__ascii_mbtowc+0x1e>
 80181b2:	7813      	ldrb	r3, [r2, #0]
 80181b4:	600b      	str	r3, [r1, #0]
 80181b6:	7812      	ldrb	r2, [r2, #0]
 80181b8:	1e10      	subs	r0, r2, #0
 80181ba:	bf18      	it	ne
 80181bc:	2001      	movne	r0, #1
 80181be:	b002      	add	sp, #8
 80181c0:	4770      	bx	lr
 80181c2:	4610      	mov	r0, r2
 80181c4:	e7fb      	b.n	80181be <__ascii_mbtowc+0x16>
 80181c6:	f06f 0001 	mvn.w	r0, #1
 80181ca:	e7f8      	b.n	80181be <__ascii_mbtowc+0x16>

080181cc <__sflush_r>:
 80181cc:	898a      	ldrh	r2, [r1, #12]
 80181ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181d0:	4605      	mov	r5, r0
 80181d2:	0710      	lsls	r0, r2, #28
 80181d4:	460c      	mov	r4, r1
 80181d6:	d457      	bmi.n	8018288 <__sflush_r+0xbc>
 80181d8:	684b      	ldr	r3, [r1, #4]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	dc04      	bgt.n	80181e8 <__sflush_r+0x1c>
 80181de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	dc01      	bgt.n	80181e8 <__sflush_r+0x1c>
 80181e4:	2000      	movs	r0, #0
 80181e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80181ea:	2e00      	cmp	r6, #0
 80181ec:	d0fa      	beq.n	80181e4 <__sflush_r+0x18>
 80181ee:	2300      	movs	r3, #0
 80181f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80181f4:	682f      	ldr	r7, [r5, #0]
 80181f6:	6a21      	ldr	r1, [r4, #32]
 80181f8:	602b      	str	r3, [r5, #0]
 80181fa:	d032      	beq.n	8018262 <__sflush_r+0x96>
 80181fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80181fe:	89a3      	ldrh	r3, [r4, #12]
 8018200:	075a      	lsls	r2, r3, #29
 8018202:	d505      	bpl.n	8018210 <__sflush_r+0x44>
 8018204:	6863      	ldr	r3, [r4, #4]
 8018206:	1ac0      	subs	r0, r0, r3
 8018208:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801820a:	b10b      	cbz	r3, 8018210 <__sflush_r+0x44>
 801820c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801820e:	1ac0      	subs	r0, r0, r3
 8018210:	2300      	movs	r3, #0
 8018212:	4602      	mov	r2, r0
 8018214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018216:	6a21      	ldr	r1, [r4, #32]
 8018218:	4628      	mov	r0, r5
 801821a:	47b0      	blx	r6
 801821c:	1c43      	adds	r3, r0, #1
 801821e:	89a3      	ldrh	r3, [r4, #12]
 8018220:	d106      	bne.n	8018230 <__sflush_r+0x64>
 8018222:	6829      	ldr	r1, [r5, #0]
 8018224:	291d      	cmp	r1, #29
 8018226:	d82b      	bhi.n	8018280 <__sflush_r+0xb4>
 8018228:	4a28      	ldr	r2, [pc, #160]	; (80182cc <__sflush_r+0x100>)
 801822a:	410a      	asrs	r2, r1
 801822c:	07d6      	lsls	r6, r2, #31
 801822e:	d427      	bmi.n	8018280 <__sflush_r+0xb4>
 8018230:	2200      	movs	r2, #0
 8018232:	6062      	str	r2, [r4, #4]
 8018234:	04d9      	lsls	r1, r3, #19
 8018236:	6922      	ldr	r2, [r4, #16]
 8018238:	6022      	str	r2, [r4, #0]
 801823a:	d504      	bpl.n	8018246 <__sflush_r+0x7a>
 801823c:	1c42      	adds	r2, r0, #1
 801823e:	d101      	bne.n	8018244 <__sflush_r+0x78>
 8018240:	682b      	ldr	r3, [r5, #0]
 8018242:	b903      	cbnz	r3, 8018246 <__sflush_r+0x7a>
 8018244:	6560      	str	r0, [r4, #84]	; 0x54
 8018246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018248:	602f      	str	r7, [r5, #0]
 801824a:	2900      	cmp	r1, #0
 801824c:	d0ca      	beq.n	80181e4 <__sflush_r+0x18>
 801824e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018252:	4299      	cmp	r1, r3
 8018254:	d002      	beq.n	801825c <__sflush_r+0x90>
 8018256:	4628      	mov	r0, r5
 8018258:	f000 ff40 	bl	80190dc <_free_r>
 801825c:	2000      	movs	r0, #0
 801825e:	6360      	str	r0, [r4, #52]	; 0x34
 8018260:	e7c1      	b.n	80181e6 <__sflush_r+0x1a>
 8018262:	2301      	movs	r3, #1
 8018264:	4628      	mov	r0, r5
 8018266:	47b0      	blx	r6
 8018268:	1c41      	adds	r1, r0, #1
 801826a:	d1c8      	bne.n	80181fe <__sflush_r+0x32>
 801826c:	682b      	ldr	r3, [r5, #0]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d0c5      	beq.n	80181fe <__sflush_r+0x32>
 8018272:	2b1d      	cmp	r3, #29
 8018274:	d001      	beq.n	801827a <__sflush_r+0xae>
 8018276:	2b16      	cmp	r3, #22
 8018278:	d101      	bne.n	801827e <__sflush_r+0xb2>
 801827a:	602f      	str	r7, [r5, #0]
 801827c:	e7b2      	b.n	80181e4 <__sflush_r+0x18>
 801827e:	89a3      	ldrh	r3, [r4, #12]
 8018280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018284:	81a3      	strh	r3, [r4, #12]
 8018286:	e7ae      	b.n	80181e6 <__sflush_r+0x1a>
 8018288:	690f      	ldr	r7, [r1, #16]
 801828a:	2f00      	cmp	r7, #0
 801828c:	d0aa      	beq.n	80181e4 <__sflush_r+0x18>
 801828e:	0793      	lsls	r3, r2, #30
 8018290:	680e      	ldr	r6, [r1, #0]
 8018292:	bf08      	it	eq
 8018294:	694b      	ldreq	r3, [r1, #20]
 8018296:	600f      	str	r7, [r1, #0]
 8018298:	bf18      	it	ne
 801829a:	2300      	movne	r3, #0
 801829c:	1bf6      	subs	r6, r6, r7
 801829e:	608b      	str	r3, [r1, #8]
 80182a0:	2e00      	cmp	r6, #0
 80182a2:	dd9f      	ble.n	80181e4 <__sflush_r+0x18>
 80182a4:	6a21      	ldr	r1, [r4, #32]
 80182a6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80182aa:	4633      	mov	r3, r6
 80182ac:	463a      	mov	r2, r7
 80182ae:	4628      	mov	r0, r5
 80182b0:	47e0      	blx	ip
 80182b2:	2800      	cmp	r0, #0
 80182b4:	dc06      	bgt.n	80182c4 <__sflush_r+0xf8>
 80182b6:	89a3      	ldrh	r3, [r4, #12]
 80182b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182bc:	81a3      	strh	r3, [r4, #12]
 80182be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182c2:	e790      	b.n	80181e6 <__sflush_r+0x1a>
 80182c4:	4407      	add	r7, r0
 80182c6:	1a36      	subs	r6, r6, r0
 80182c8:	e7ea      	b.n	80182a0 <__sflush_r+0xd4>
 80182ca:	bf00      	nop
 80182cc:	dfbffffe 	.word	0xdfbffffe

080182d0 <_fflush_r>:
 80182d0:	b538      	push	{r3, r4, r5, lr}
 80182d2:	690b      	ldr	r3, [r1, #16]
 80182d4:	4605      	mov	r5, r0
 80182d6:	460c      	mov	r4, r1
 80182d8:	b913      	cbnz	r3, 80182e0 <_fflush_r+0x10>
 80182da:	2500      	movs	r5, #0
 80182dc:	4628      	mov	r0, r5
 80182de:	bd38      	pop	{r3, r4, r5, pc}
 80182e0:	b118      	cbz	r0, 80182ea <_fflush_r+0x1a>
 80182e2:	6a03      	ldr	r3, [r0, #32]
 80182e4:	b90b      	cbnz	r3, 80182ea <_fflush_r+0x1a>
 80182e6:	f7fd fab1 	bl	801584c <__sinit>
 80182ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d0f3      	beq.n	80182da <_fflush_r+0xa>
 80182f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80182f4:	07d0      	lsls	r0, r2, #31
 80182f6:	d404      	bmi.n	8018302 <_fflush_r+0x32>
 80182f8:	0599      	lsls	r1, r3, #22
 80182fa:	d402      	bmi.n	8018302 <_fflush_r+0x32>
 80182fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182fe:	f7fe fa18 	bl	8016732 <__retarget_lock_acquire_recursive>
 8018302:	4628      	mov	r0, r5
 8018304:	4621      	mov	r1, r4
 8018306:	f7ff ff61 	bl	80181cc <__sflush_r>
 801830a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801830c:	07da      	lsls	r2, r3, #31
 801830e:	4605      	mov	r5, r0
 8018310:	d4e4      	bmi.n	80182dc <_fflush_r+0xc>
 8018312:	89a3      	ldrh	r3, [r4, #12]
 8018314:	059b      	lsls	r3, r3, #22
 8018316:	d4e1      	bmi.n	80182dc <_fflush_r+0xc>
 8018318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801831a:	f7fe fa0b 	bl	8016734 <__retarget_lock_release_recursive>
 801831e:	e7dd      	b.n	80182dc <_fflush_r+0xc>

08018320 <__malloc_lock>:
 8018320:	4801      	ldr	r0, [pc, #4]	; (8018328 <__malloc_lock+0x8>)
 8018322:	f7fe ba06 	b.w	8016732 <__retarget_lock_acquire_recursive>
 8018326:	bf00      	nop
 8018328:	20001ea0 	.word	0x20001ea0

0801832c <__malloc_unlock>:
 801832c:	4801      	ldr	r0, [pc, #4]	; (8018334 <__malloc_unlock+0x8>)
 801832e:	f7fe ba01 	b.w	8016734 <__retarget_lock_release_recursive>
 8018332:	bf00      	nop
 8018334:	20001ea0 	.word	0x20001ea0

08018338 <_Balloc>:
 8018338:	b570      	push	{r4, r5, r6, lr}
 801833a:	69c6      	ldr	r6, [r0, #28]
 801833c:	4604      	mov	r4, r0
 801833e:	460d      	mov	r5, r1
 8018340:	b976      	cbnz	r6, 8018360 <_Balloc+0x28>
 8018342:	2010      	movs	r0, #16
 8018344:	f7ff fe88 	bl	8018058 <malloc>
 8018348:	4602      	mov	r2, r0
 801834a:	61e0      	str	r0, [r4, #28]
 801834c:	b920      	cbnz	r0, 8018358 <_Balloc+0x20>
 801834e:	4b18      	ldr	r3, [pc, #96]	; (80183b0 <_Balloc+0x78>)
 8018350:	4818      	ldr	r0, [pc, #96]	; (80183b4 <_Balloc+0x7c>)
 8018352:	216b      	movs	r1, #107	; 0x6b
 8018354:	f7fe fa08 	bl	8016768 <__assert_func>
 8018358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801835c:	6006      	str	r6, [r0, #0]
 801835e:	60c6      	str	r6, [r0, #12]
 8018360:	69e6      	ldr	r6, [r4, #28]
 8018362:	68f3      	ldr	r3, [r6, #12]
 8018364:	b183      	cbz	r3, 8018388 <_Balloc+0x50>
 8018366:	69e3      	ldr	r3, [r4, #28]
 8018368:	68db      	ldr	r3, [r3, #12]
 801836a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801836e:	b9b8      	cbnz	r0, 80183a0 <_Balloc+0x68>
 8018370:	2101      	movs	r1, #1
 8018372:	fa01 f605 	lsl.w	r6, r1, r5
 8018376:	1d72      	adds	r2, r6, #5
 8018378:	0092      	lsls	r2, r2, #2
 801837a:	4620      	mov	r0, r4
 801837c:	f000 fe99 	bl	80190b2 <_calloc_r>
 8018380:	b160      	cbz	r0, 801839c <_Balloc+0x64>
 8018382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018386:	e00e      	b.n	80183a6 <_Balloc+0x6e>
 8018388:	2221      	movs	r2, #33	; 0x21
 801838a:	2104      	movs	r1, #4
 801838c:	4620      	mov	r0, r4
 801838e:	f000 fe90 	bl	80190b2 <_calloc_r>
 8018392:	69e3      	ldr	r3, [r4, #28]
 8018394:	60f0      	str	r0, [r6, #12]
 8018396:	68db      	ldr	r3, [r3, #12]
 8018398:	2b00      	cmp	r3, #0
 801839a:	d1e4      	bne.n	8018366 <_Balloc+0x2e>
 801839c:	2000      	movs	r0, #0
 801839e:	bd70      	pop	{r4, r5, r6, pc}
 80183a0:	6802      	ldr	r2, [r0, #0]
 80183a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80183a6:	2300      	movs	r3, #0
 80183a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80183ac:	e7f7      	b.n	801839e <_Balloc+0x66>
 80183ae:	bf00      	nop
 80183b0:	0801a5b2 	.word	0x0801a5b2
 80183b4:	0801a6a3 	.word	0x0801a6a3

080183b8 <_Bfree>:
 80183b8:	b570      	push	{r4, r5, r6, lr}
 80183ba:	69c6      	ldr	r6, [r0, #28]
 80183bc:	4605      	mov	r5, r0
 80183be:	460c      	mov	r4, r1
 80183c0:	b976      	cbnz	r6, 80183e0 <_Bfree+0x28>
 80183c2:	2010      	movs	r0, #16
 80183c4:	f7ff fe48 	bl	8018058 <malloc>
 80183c8:	4602      	mov	r2, r0
 80183ca:	61e8      	str	r0, [r5, #28]
 80183cc:	b920      	cbnz	r0, 80183d8 <_Bfree+0x20>
 80183ce:	4b09      	ldr	r3, [pc, #36]	; (80183f4 <_Bfree+0x3c>)
 80183d0:	4809      	ldr	r0, [pc, #36]	; (80183f8 <_Bfree+0x40>)
 80183d2:	218f      	movs	r1, #143	; 0x8f
 80183d4:	f7fe f9c8 	bl	8016768 <__assert_func>
 80183d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80183dc:	6006      	str	r6, [r0, #0]
 80183de:	60c6      	str	r6, [r0, #12]
 80183e0:	b13c      	cbz	r4, 80183f2 <_Bfree+0x3a>
 80183e2:	69eb      	ldr	r3, [r5, #28]
 80183e4:	6862      	ldr	r2, [r4, #4]
 80183e6:	68db      	ldr	r3, [r3, #12]
 80183e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80183ec:	6021      	str	r1, [r4, #0]
 80183ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80183f2:	bd70      	pop	{r4, r5, r6, pc}
 80183f4:	0801a5b2 	.word	0x0801a5b2
 80183f8:	0801a6a3 	.word	0x0801a6a3

080183fc <__multadd>:
 80183fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018400:	690d      	ldr	r5, [r1, #16]
 8018402:	4607      	mov	r7, r0
 8018404:	460c      	mov	r4, r1
 8018406:	461e      	mov	r6, r3
 8018408:	f101 0c14 	add.w	ip, r1, #20
 801840c:	2000      	movs	r0, #0
 801840e:	f8dc 3000 	ldr.w	r3, [ip]
 8018412:	b299      	uxth	r1, r3
 8018414:	fb02 6101 	mla	r1, r2, r1, r6
 8018418:	0c1e      	lsrs	r6, r3, #16
 801841a:	0c0b      	lsrs	r3, r1, #16
 801841c:	fb02 3306 	mla	r3, r2, r6, r3
 8018420:	b289      	uxth	r1, r1
 8018422:	3001      	adds	r0, #1
 8018424:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018428:	4285      	cmp	r5, r0
 801842a:	f84c 1b04 	str.w	r1, [ip], #4
 801842e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018432:	dcec      	bgt.n	801840e <__multadd+0x12>
 8018434:	b30e      	cbz	r6, 801847a <__multadd+0x7e>
 8018436:	68a3      	ldr	r3, [r4, #8]
 8018438:	42ab      	cmp	r3, r5
 801843a:	dc19      	bgt.n	8018470 <__multadd+0x74>
 801843c:	6861      	ldr	r1, [r4, #4]
 801843e:	4638      	mov	r0, r7
 8018440:	3101      	adds	r1, #1
 8018442:	f7ff ff79 	bl	8018338 <_Balloc>
 8018446:	4680      	mov	r8, r0
 8018448:	b928      	cbnz	r0, 8018456 <__multadd+0x5a>
 801844a:	4602      	mov	r2, r0
 801844c:	4b0c      	ldr	r3, [pc, #48]	; (8018480 <__multadd+0x84>)
 801844e:	480d      	ldr	r0, [pc, #52]	; (8018484 <__multadd+0x88>)
 8018450:	21ba      	movs	r1, #186	; 0xba
 8018452:	f7fe f989 	bl	8016768 <__assert_func>
 8018456:	6922      	ldr	r2, [r4, #16]
 8018458:	3202      	adds	r2, #2
 801845a:	f104 010c 	add.w	r1, r4, #12
 801845e:	0092      	lsls	r2, r2, #2
 8018460:	300c      	adds	r0, #12
 8018462:	f7fe f968 	bl	8016736 <memcpy>
 8018466:	4621      	mov	r1, r4
 8018468:	4638      	mov	r0, r7
 801846a:	f7ff ffa5 	bl	80183b8 <_Bfree>
 801846e:	4644      	mov	r4, r8
 8018470:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018474:	3501      	adds	r5, #1
 8018476:	615e      	str	r6, [r3, #20]
 8018478:	6125      	str	r5, [r4, #16]
 801847a:	4620      	mov	r0, r4
 801847c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018480:	0801a621 	.word	0x0801a621
 8018484:	0801a6a3 	.word	0x0801a6a3

08018488 <__s2b>:
 8018488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801848c:	460c      	mov	r4, r1
 801848e:	4615      	mov	r5, r2
 8018490:	461f      	mov	r7, r3
 8018492:	2209      	movs	r2, #9
 8018494:	3308      	adds	r3, #8
 8018496:	4606      	mov	r6, r0
 8018498:	fb93 f3f2 	sdiv	r3, r3, r2
 801849c:	2100      	movs	r1, #0
 801849e:	2201      	movs	r2, #1
 80184a0:	429a      	cmp	r2, r3
 80184a2:	db09      	blt.n	80184b8 <__s2b+0x30>
 80184a4:	4630      	mov	r0, r6
 80184a6:	f7ff ff47 	bl	8018338 <_Balloc>
 80184aa:	b940      	cbnz	r0, 80184be <__s2b+0x36>
 80184ac:	4602      	mov	r2, r0
 80184ae:	4b19      	ldr	r3, [pc, #100]	; (8018514 <__s2b+0x8c>)
 80184b0:	4819      	ldr	r0, [pc, #100]	; (8018518 <__s2b+0x90>)
 80184b2:	21d3      	movs	r1, #211	; 0xd3
 80184b4:	f7fe f958 	bl	8016768 <__assert_func>
 80184b8:	0052      	lsls	r2, r2, #1
 80184ba:	3101      	adds	r1, #1
 80184bc:	e7f0      	b.n	80184a0 <__s2b+0x18>
 80184be:	9b08      	ldr	r3, [sp, #32]
 80184c0:	6143      	str	r3, [r0, #20]
 80184c2:	2d09      	cmp	r5, #9
 80184c4:	f04f 0301 	mov.w	r3, #1
 80184c8:	6103      	str	r3, [r0, #16]
 80184ca:	dd16      	ble.n	80184fa <__s2b+0x72>
 80184cc:	f104 0909 	add.w	r9, r4, #9
 80184d0:	46c8      	mov	r8, r9
 80184d2:	442c      	add	r4, r5
 80184d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80184d8:	4601      	mov	r1, r0
 80184da:	3b30      	subs	r3, #48	; 0x30
 80184dc:	220a      	movs	r2, #10
 80184de:	4630      	mov	r0, r6
 80184e0:	f7ff ff8c 	bl	80183fc <__multadd>
 80184e4:	45a0      	cmp	r8, r4
 80184e6:	d1f5      	bne.n	80184d4 <__s2b+0x4c>
 80184e8:	f1a5 0408 	sub.w	r4, r5, #8
 80184ec:	444c      	add	r4, r9
 80184ee:	1b2d      	subs	r5, r5, r4
 80184f0:	1963      	adds	r3, r4, r5
 80184f2:	42bb      	cmp	r3, r7
 80184f4:	db04      	blt.n	8018500 <__s2b+0x78>
 80184f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184fa:	340a      	adds	r4, #10
 80184fc:	2509      	movs	r5, #9
 80184fe:	e7f6      	b.n	80184ee <__s2b+0x66>
 8018500:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018504:	4601      	mov	r1, r0
 8018506:	3b30      	subs	r3, #48	; 0x30
 8018508:	220a      	movs	r2, #10
 801850a:	4630      	mov	r0, r6
 801850c:	f7ff ff76 	bl	80183fc <__multadd>
 8018510:	e7ee      	b.n	80184f0 <__s2b+0x68>
 8018512:	bf00      	nop
 8018514:	0801a621 	.word	0x0801a621
 8018518:	0801a6a3 	.word	0x0801a6a3

0801851c <__hi0bits>:
 801851c:	0c02      	lsrs	r2, r0, #16
 801851e:	0412      	lsls	r2, r2, #16
 8018520:	4603      	mov	r3, r0
 8018522:	b9ca      	cbnz	r2, 8018558 <__hi0bits+0x3c>
 8018524:	0403      	lsls	r3, r0, #16
 8018526:	2010      	movs	r0, #16
 8018528:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801852c:	bf04      	itt	eq
 801852e:	021b      	lsleq	r3, r3, #8
 8018530:	3008      	addeq	r0, #8
 8018532:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018536:	bf04      	itt	eq
 8018538:	011b      	lsleq	r3, r3, #4
 801853a:	3004      	addeq	r0, #4
 801853c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018540:	bf04      	itt	eq
 8018542:	009b      	lsleq	r3, r3, #2
 8018544:	3002      	addeq	r0, #2
 8018546:	2b00      	cmp	r3, #0
 8018548:	db05      	blt.n	8018556 <__hi0bits+0x3a>
 801854a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801854e:	f100 0001 	add.w	r0, r0, #1
 8018552:	bf08      	it	eq
 8018554:	2020      	moveq	r0, #32
 8018556:	4770      	bx	lr
 8018558:	2000      	movs	r0, #0
 801855a:	e7e5      	b.n	8018528 <__hi0bits+0xc>

0801855c <__lo0bits>:
 801855c:	6803      	ldr	r3, [r0, #0]
 801855e:	4602      	mov	r2, r0
 8018560:	f013 0007 	ands.w	r0, r3, #7
 8018564:	d00b      	beq.n	801857e <__lo0bits+0x22>
 8018566:	07d9      	lsls	r1, r3, #31
 8018568:	d421      	bmi.n	80185ae <__lo0bits+0x52>
 801856a:	0798      	lsls	r0, r3, #30
 801856c:	bf49      	itett	mi
 801856e:	085b      	lsrmi	r3, r3, #1
 8018570:	089b      	lsrpl	r3, r3, #2
 8018572:	2001      	movmi	r0, #1
 8018574:	6013      	strmi	r3, [r2, #0]
 8018576:	bf5c      	itt	pl
 8018578:	6013      	strpl	r3, [r2, #0]
 801857a:	2002      	movpl	r0, #2
 801857c:	4770      	bx	lr
 801857e:	b299      	uxth	r1, r3
 8018580:	b909      	cbnz	r1, 8018586 <__lo0bits+0x2a>
 8018582:	0c1b      	lsrs	r3, r3, #16
 8018584:	2010      	movs	r0, #16
 8018586:	b2d9      	uxtb	r1, r3
 8018588:	b909      	cbnz	r1, 801858e <__lo0bits+0x32>
 801858a:	3008      	adds	r0, #8
 801858c:	0a1b      	lsrs	r3, r3, #8
 801858e:	0719      	lsls	r1, r3, #28
 8018590:	bf04      	itt	eq
 8018592:	091b      	lsreq	r3, r3, #4
 8018594:	3004      	addeq	r0, #4
 8018596:	0799      	lsls	r1, r3, #30
 8018598:	bf04      	itt	eq
 801859a:	089b      	lsreq	r3, r3, #2
 801859c:	3002      	addeq	r0, #2
 801859e:	07d9      	lsls	r1, r3, #31
 80185a0:	d403      	bmi.n	80185aa <__lo0bits+0x4e>
 80185a2:	085b      	lsrs	r3, r3, #1
 80185a4:	f100 0001 	add.w	r0, r0, #1
 80185a8:	d003      	beq.n	80185b2 <__lo0bits+0x56>
 80185aa:	6013      	str	r3, [r2, #0]
 80185ac:	4770      	bx	lr
 80185ae:	2000      	movs	r0, #0
 80185b0:	4770      	bx	lr
 80185b2:	2020      	movs	r0, #32
 80185b4:	4770      	bx	lr
	...

080185b8 <__i2b>:
 80185b8:	b510      	push	{r4, lr}
 80185ba:	460c      	mov	r4, r1
 80185bc:	2101      	movs	r1, #1
 80185be:	f7ff febb 	bl	8018338 <_Balloc>
 80185c2:	4602      	mov	r2, r0
 80185c4:	b928      	cbnz	r0, 80185d2 <__i2b+0x1a>
 80185c6:	4b05      	ldr	r3, [pc, #20]	; (80185dc <__i2b+0x24>)
 80185c8:	4805      	ldr	r0, [pc, #20]	; (80185e0 <__i2b+0x28>)
 80185ca:	f240 1145 	movw	r1, #325	; 0x145
 80185ce:	f7fe f8cb 	bl	8016768 <__assert_func>
 80185d2:	2301      	movs	r3, #1
 80185d4:	6144      	str	r4, [r0, #20]
 80185d6:	6103      	str	r3, [r0, #16]
 80185d8:	bd10      	pop	{r4, pc}
 80185da:	bf00      	nop
 80185dc:	0801a621 	.word	0x0801a621
 80185e0:	0801a6a3 	.word	0x0801a6a3

080185e4 <__multiply>:
 80185e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e8:	4691      	mov	r9, r2
 80185ea:	690a      	ldr	r2, [r1, #16]
 80185ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80185f0:	429a      	cmp	r2, r3
 80185f2:	bfb8      	it	lt
 80185f4:	460b      	movlt	r3, r1
 80185f6:	460c      	mov	r4, r1
 80185f8:	bfbc      	itt	lt
 80185fa:	464c      	movlt	r4, r9
 80185fc:	4699      	movlt	r9, r3
 80185fe:	6927      	ldr	r7, [r4, #16]
 8018600:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018604:	68a3      	ldr	r3, [r4, #8]
 8018606:	6861      	ldr	r1, [r4, #4]
 8018608:	eb07 060a 	add.w	r6, r7, sl
 801860c:	42b3      	cmp	r3, r6
 801860e:	b085      	sub	sp, #20
 8018610:	bfb8      	it	lt
 8018612:	3101      	addlt	r1, #1
 8018614:	f7ff fe90 	bl	8018338 <_Balloc>
 8018618:	b930      	cbnz	r0, 8018628 <__multiply+0x44>
 801861a:	4602      	mov	r2, r0
 801861c:	4b44      	ldr	r3, [pc, #272]	; (8018730 <__multiply+0x14c>)
 801861e:	4845      	ldr	r0, [pc, #276]	; (8018734 <__multiply+0x150>)
 8018620:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018624:	f7fe f8a0 	bl	8016768 <__assert_func>
 8018628:	f100 0514 	add.w	r5, r0, #20
 801862c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018630:	462b      	mov	r3, r5
 8018632:	2200      	movs	r2, #0
 8018634:	4543      	cmp	r3, r8
 8018636:	d321      	bcc.n	801867c <__multiply+0x98>
 8018638:	f104 0314 	add.w	r3, r4, #20
 801863c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018640:	f109 0314 	add.w	r3, r9, #20
 8018644:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018648:	9202      	str	r2, [sp, #8]
 801864a:	1b3a      	subs	r2, r7, r4
 801864c:	3a15      	subs	r2, #21
 801864e:	f022 0203 	bic.w	r2, r2, #3
 8018652:	3204      	adds	r2, #4
 8018654:	f104 0115 	add.w	r1, r4, #21
 8018658:	428f      	cmp	r7, r1
 801865a:	bf38      	it	cc
 801865c:	2204      	movcc	r2, #4
 801865e:	9201      	str	r2, [sp, #4]
 8018660:	9a02      	ldr	r2, [sp, #8]
 8018662:	9303      	str	r3, [sp, #12]
 8018664:	429a      	cmp	r2, r3
 8018666:	d80c      	bhi.n	8018682 <__multiply+0x9e>
 8018668:	2e00      	cmp	r6, #0
 801866a:	dd03      	ble.n	8018674 <__multiply+0x90>
 801866c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018670:	2b00      	cmp	r3, #0
 8018672:	d05a      	beq.n	801872a <__multiply+0x146>
 8018674:	6106      	str	r6, [r0, #16]
 8018676:	b005      	add	sp, #20
 8018678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801867c:	f843 2b04 	str.w	r2, [r3], #4
 8018680:	e7d8      	b.n	8018634 <__multiply+0x50>
 8018682:	f8b3 a000 	ldrh.w	sl, [r3]
 8018686:	f1ba 0f00 	cmp.w	sl, #0
 801868a:	d023      	beq.n	80186d4 <__multiply+0xf0>
 801868c:	f104 0e14 	add.w	lr, r4, #20
 8018690:	46a9      	mov	r9, r5
 8018692:	f04f 0c00 	mov.w	ip, #0
 8018696:	f85e 2b04 	ldr.w	r2, [lr], #4
 801869a:	f8d9 1000 	ldr.w	r1, [r9]
 801869e:	fa1f fb82 	uxth.w	fp, r2
 80186a2:	b289      	uxth	r1, r1
 80186a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80186a8:	4461      	add	r1, ip
 80186aa:	f8d9 c000 	ldr.w	ip, [r9]
 80186ae:	0c12      	lsrs	r2, r2, #16
 80186b0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80186b4:	fb0a c202 	mla	r2, sl, r2, ip
 80186b8:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80186bc:	b289      	uxth	r1, r1
 80186be:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80186c2:	4577      	cmp	r7, lr
 80186c4:	f849 1b04 	str.w	r1, [r9], #4
 80186c8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80186cc:	d8e3      	bhi.n	8018696 <__multiply+0xb2>
 80186ce:	9a01      	ldr	r2, [sp, #4]
 80186d0:	f845 c002 	str.w	ip, [r5, r2]
 80186d4:	9a03      	ldr	r2, [sp, #12]
 80186d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80186da:	3304      	adds	r3, #4
 80186dc:	f1b9 0f00 	cmp.w	r9, #0
 80186e0:	d021      	beq.n	8018726 <__multiply+0x142>
 80186e2:	6829      	ldr	r1, [r5, #0]
 80186e4:	f104 0c14 	add.w	ip, r4, #20
 80186e8:	46ae      	mov	lr, r5
 80186ea:	f04f 0a00 	mov.w	sl, #0
 80186ee:	f8bc b000 	ldrh.w	fp, [ip]
 80186f2:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80186f6:	fb09 220b 	mla	r2, r9, fp, r2
 80186fa:	4452      	add	r2, sl
 80186fc:	b289      	uxth	r1, r1
 80186fe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018702:	f84e 1b04 	str.w	r1, [lr], #4
 8018706:	f85c 1b04 	ldr.w	r1, [ip], #4
 801870a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801870e:	f8be 1000 	ldrh.w	r1, [lr]
 8018712:	fb09 110a 	mla	r1, r9, sl, r1
 8018716:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801871a:	4567      	cmp	r7, ip
 801871c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018720:	d8e5      	bhi.n	80186ee <__multiply+0x10a>
 8018722:	9a01      	ldr	r2, [sp, #4]
 8018724:	50a9      	str	r1, [r5, r2]
 8018726:	3504      	adds	r5, #4
 8018728:	e79a      	b.n	8018660 <__multiply+0x7c>
 801872a:	3e01      	subs	r6, #1
 801872c:	e79c      	b.n	8018668 <__multiply+0x84>
 801872e:	bf00      	nop
 8018730:	0801a621 	.word	0x0801a621
 8018734:	0801a6a3 	.word	0x0801a6a3

08018738 <__pow5mult>:
 8018738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801873c:	4615      	mov	r5, r2
 801873e:	f012 0203 	ands.w	r2, r2, #3
 8018742:	4606      	mov	r6, r0
 8018744:	460f      	mov	r7, r1
 8018746:	d007      	beq.n	8018758 <__pow5mult+0x20>
 8018748:	4c25      	ldr	r4, [pc, #148]	; (80187e0 <__pow5mult+0xa8>)
 801874a:	3a01      	subs	r2, #1
 801874c:	2300      	movs	r3, #0
 801874e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018752:	f7ff fe53 	bl	80183fc <__multadd>
 8018756:	4607      	mov	r7, r0
 8018758:	10ad      	asrs	r5, r5, #2
 801875a:	d03d      	beq.n	80187d8 <__pow5mult+0xa0>
 801875c:	69f4      	ldr	r4, [r6, #28]
 801875e:	b97c      	cbnz	r4, 8018780 <__pow5mult+0x48>
 8018760:	2010      	movs	r0, #16
 8018762:	f7ff fc79 	bl	8018058 <malloc>
 8018766:	4602      	mov	r2, r0
 8018768:	61f0      	str	r0, [r6, #28]
 801876a:	b928      	cbnz	r0, 8018778 <__pow5mult+0x40>
 801876c:	4b1d      	ldr	r3, [pc, #116]	; (80187e4 <__pow5mult+0xac>)
 801876e:	481e      	ldr	r0, [pc, #120]	; (80187e8 <__pow5mult+0xb0>)
 8018770:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018774:	f7fd fff8 	bl	8016768 <__assert_func>
 8018778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801877c:	6004      	str	r4, [r0, #0]
 801877e:	60c4      	str	r4, [r0, #12]
 8018780:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018788:	b94c      	cbnz	r4, 801879e <__pow5mult+0x66>
 801878a:	f240 2171 	movw	r1, #625	; 0x271
 801878e:	4630      	mov	r0, r6
 8018790:	f7ff ff12 	bl	80185b8 <__i2b>
 8018794:	2300      	movs	r3, #0
 8018796:	f8c8 0008 	str.w	r0, [r8, #8]
 801879a:	4604      	mov	r4, r0
 801879c:	6003      	str	r3, [r0, #0]
 801879e:	f04f 0900 	mov.w	r9, #0
 80187a2:	07eb      	lsls	r3, r5, #31
 80187a4:	d50a      	bpl.n	80187bc <__pow5mult+0x84>
 80187a6:	4639      	mov	r1, r7
 80187a8:	4622      	mov	r2, r4
 80187aa:	4630      	mov	r0, r6
 80187ac:	f7ff ff1a 	bl	80185e4 <__multiply>
 80187b0:	4639      	mov	r1, r7
 80187b2:	4680      	mov	r8, r0
 80187b4:	4630      	mov	r0, r6
 80187b6:	f7ff fdff 	bl	80183b8 <_Bfree>
 80187ba:	4647      	mov	r7, r8
 80187bc:	106d      	asrs	r5, r5, #1
 80187be:	d00b      	beq.n	80187d8 <__pow5mult+0xa0>
 80187c0:	6820      	ldr	r0, [r4, #0]
 80187c2:	b938      	cbnz	r0, 80187d4 <__pow5mult+0x9c>
 80187c4:	4622      	mov	r2, r4
 80187c6:	4621      	mov	r1, r4
 80187c8:	4630      	mov	r0, r6
 80187ca:	f7ff ff0b 	bl	80185e4 <__multiply>
 80187ce:	6020      	str	r0, [r4, #0]
 80187d0:	f8c0 9000 	str.w	r9, [r0]
 80187d4:	4604      	mov	r4, r0
 80187d6:	e7e4      	b.n	80187a2 <__pow5mult+0x6a>
 80187d8:	4638      	mov	r0, r7
 80187da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187de:	bf00      	nop
 80187e0:	0801a7f0 	.word	0x0801a7f0
 80187e4:	0801a5b2 	.word	0x0801a5b2
 80187e8:	0801a6a3 	.word	0x0801a6a3

080187ec <__lshift>:
 80187ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187f0:	460c      	mov	r4, r1
 80187f2:	6849      	ldr	r1, [r1, #4]
 80187f4:	6923      	ldr	r3, [r4, #16]
 80187f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80187fa:	68a3      	ldr	r3, [r4, #8]
 80187fc:	4607      	mov	r7, r0
 80187fe:	4691      	mov	r9, r2
 8018800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018804:	f108 0601 	add.w	r6, r8, #1
 8018808:	42b3      	cmp	r3, r6
 801880a:	db0b      	blt.n	8018824 <__lshift+0x38>
 801880c:	4638      	mov	r0, r7
 801880e:	f7ff fd93 	bl	8018338 <_Balloc>
 8018812:	4605      	mov	r5, r0
 8018814:	b948      	cbnz	r0, 801882a <__lshift+0x3e>
 8018816:	4602      	mov	r2, r0
 8018818:	4b28      	ldr	r3, [pc, #160]	; (80188bc <__lshift+0xd0>)
 801881a:	4829      	ldr	r0, [pc, #164]	; (80188c0 <__lshift+0xd4>)
 801881c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018820:	f7fd ffa2 	bl	8016768 <__assert_func>
 8018824:	3101      	adds	r1, #1
 8018826:	005b      	lsls	r3, r3, #1
 8018828:	e7ee      	b.n	8018808 <__lshift+0x1c>
 801882a:	2300      	movs	r3, #0
 801882c:	f100 0114 	add.w	r1, r0, #20
 8018830:	f100 0210 	add.w	r2, r0, #16
 8018834:	4618      	mov	r0, r3
 8018836:	4553      	cmp	r3, sl
 8018838:	db33      	blt.n	80188a2 <__lshift+0xb6>
 801883a:	6920      	ldr	r0, [r4, #16]
 801883c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018840:	f104 0314 	add.w	r3, r4, #20
 8018844:	f019 091f 	ands.w	r9, r9, #31
 8018848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801884c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018850:	d02b      	beq.n	80188aa <__lshift+0xbe>
 8018852:	f1c9 0e20 	rsb	lr, r9, #32
 8018856:	468a      	mov	sl, r1
 8018858:	2200      	movs	r2, #0
 801885a:	6818      	ldr	r0, [r3, #0]
 801885c:	fa00 f009 	lsl.w	r0, r0, r9
 8018860:	4310      	orrs	r0, r2
 8018862:	f84a 0b04 	str.w	r0, [sl], #4
 8018866:	f853 2b04 	ldr.w	r2, [r3], #4
 801886a:	459c      	cmp	ip, r3
 801886c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018870:	d8f3      	bhi.n	801885a <__lshift+0x6e>
 8018872:	ebac 0304 	sub.w	r3, ip, r4
 8018876:	3b15      	subs	r3, #21
 8018878:	f023 0303 	bic.w	r3, r3, #3
 801887c:	3304      	adds	r3, #4
 801887e:	f104 0015 	add.w	r0, r4, #21
 8018882:	4584      	cmp	ip, r0
 8018884:	bf38      	it	cc
 8018886:	2304      	movcc	r3, #4
 8018888:	50ca      	str	r2, [r1, r3]
 801888a:	b10a      	cbz	r2, 8018890 <__lshift+0xa4>
 801888c:	f108 0602 	add.w	r6, r8, #2
 8018890:	3e01      	subs	r6, #1
 8018892:	4638      	mov	r0, r7
 8018894:	612e      	str	r6, [r5, #16]
 8018896:	4621      	mov	r1, r4
 8018898:	f7ff fd8e 	bl	80183b8 <_Bfree>
 801889c:	4628      	mov	r0, r5
 801889e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80188a6:	3301      	adds	r3, #1
 80188a8:	e7c5      	b.n	8018836 <__lshift+0x4a>
 80188aa:	3904      	subs	r1, #4
 80188ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80188b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80188b4:	459c      	cmp	ip, r3
 80188b6:	d8f9      	bhi.n	80188ac <__lshift+0xc0>
 80188b8:	e7ea      	b.n	8018890 <__lshift+0xa4>
 80188ba:	bf00      	nop
 80188bc:	0801a621 	.word	0x0801a621
 80188c0:	0801a6a3 	.word	0x0801a6a3

080188c4 <__mcmp>:
 80188c4:	690a      	ldr	r2, [r1, #16]
 80188c6:	4603      	mov	r3, r0
 80188c8:	6900      	ldr	r0, [r0, #16]
 80188ca:	1a80      	subs	r0, r0, r2
 80188cc:	b530      	push	{r4, r5, lr}
 80188ce:	d10d      	bne.n	80188ec <__mcmp+0x28>
 80188d0:	3314      	adds	r3, #20
 80188d2:	3114      	adds	r1, #20
 80188d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80188d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80188dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80188e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80188e4:	4295      	cmp	r5, r2
 80188e6:	d002      	beq.n	80188ee <__mcmp+0x2a>
 80188e8:	d304      	bcc.n	80188f4 <__mcmp+0x30>
 80188ea:	2001      	movs	r0, #1
 80188ec:	bd30      	pop	{r4, r5, pc}
 80188ee:	42a3      	cmp	r3, r4
 80188f0:	d3f4      	bcc.n	80188dc <__mcmp+0x18>
 80188f2:	e7fb      	b.n	80188ec <__mcmp+0x28>
 80188f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188f8:	e7f8      	b.n	80188ec <__mcmp+0x28>
	...

080188fc <__mdiff>:
 80188fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018900:	460d      	mov	r5, r1
 8018902:	4607      	mov	r7, r0
 8018904:	4611      	mov	r1, r2
 8018906:	4628      	mov	r0, r5
 8018908:	4614      	mov	r4, r2
 801890a:	f7ff ffdb 	bl	80188c4 <__mcmp>
 801890e:	1e06      	subs	r6, r0, #0
 8018910:	d111      	bne.n	8018936 <__mdiff+0x3a>
 8018912:	4631      	mov	r1, r6
 8018914:	4638      	mov	r0, r7
 8018916:	f7ff fd0f 	bl	8018338 <_Balloc>
 801891a:	4602      	mov	r2, r0
 801891c:	b928      	cbnz	r0, 801892a <__mdiff+0x2e>
 801891e:	4b39      	ldr	r3, [pc, #228]	; (8018a04 <__mdiff+0x108>)
 8018920:	f240 2137 	movw	r1, #567	; 0x237
 8018924:	4838      	ldr	r0, [pc, #224]	; (8018a08 <__mdiff+0x10c>)
 8018926:	f7fd ff1f 	bl	8016768 <__assert_func>
 801892a:	2301      	movs	r3, #1
 801892c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018930:	4610      	mov	r0, r2
 8018932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018936:	bfa4      	itt	ge
 8018938:	4623      	movge	r3, r4
 801893a:	462c      	movge	r4, r5
 801893c:	4638      	mov	r0, r7
 801893e:	6861      	ldr	r1, [r4, #4]
 8018940:	bfa6      	itte	ge
 8018942:	461d      	movge	r5, r3
 8018944:	2600      	movge	r6, #0
 8018946:	2601      	movlt	r6, #1
 8018948:	f7ff fcf6 	bl	8018338 <_Balloc>
 801894c:	4602      	mov	r2, r0
 801894e:	b918      	cbnz	r0, 8018958 <__mdiff+0x5c>
 8018950:	4b2c      	ldr	r3, [pc, #176]	; (8018a04 <__mdiff+0x108>)
 8018952:	f240 2145 	movw	r1, #581	; 0x245
 8018956:	e7e5      	b.n	8018924 <__mdiff+0x28>
 8018958:	6927      	ldr	r7, [r4, #16]
 801895a:	60c6      	str	r6, [r0, #12]
 801895c:	692e      	ldr	r6, [r5, #16]
 801895e:	f104 0014 	add.w	r0, r4, #20
 8018962:	f105 0914 	add.w	r9, r5, #20
 8018966:	f102 0e14 	add.w	lr, r2, #20
 801896a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 801896e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018972:	3410      	adds	r4, #16
 8018974:	46f2      	mov	sl, lr
 8018976:	2100      	movs	r1, #0
 8018978:	f859 3b04 	ldr.w	r3, [r9], #4
 801897c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8018980:	fa11 f88b 	uxtah	r8, r1, fp
 8018984:	b299      	uxth	r1, r3
 8018986:	0c1b      	lsrs	r3, r3, #16
 8018988:	eba8 0801 	sub.w	r8, r8, r1
 801898c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018990:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018994:	fa1f f888 	uxth.w	r8, r8
 8018998:	1419      	asrs	r1, r3, #16
 801899a:	454e      	cmp	r6, r9
 801899c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80189a0:	f84a 3b04 	str.w	r3, [sl], #4
 80189a4:	d8e8      	bhi.n	8018978 <__mdiff+0x7c>
 80189a6:	1b73      	subs	r3, r6, r5
 80189a8:	3b15      	subs	r3, #21
 80189aa:	f023 0303 	bic.w	r3, r3, #3
 80189ae:	3304      	adds	r3, #4
 80189b0:	3515      	adds	r5, #21
 80189b2:	42ae      	cmp	r6, r5
 80189b4:	bf38      	it	cc
 80189b6:	2304      	movcc	r3, #4
 80189b8:	4418      	add	r0, r3
 80189ba:	4473      	add	r3, lr
 80189bc:	469e      	mov	lr, r3
 80189be:	4606      	mov	r6, r0
 80189c0:	4566      	cmp	r6, ip
 80189c2:	d30e      	bcc.n	80189e2 <__mdiff+0xe6>
 80189c4:	f10c 0103 	add.w	r1, ip, #3
 80189c8:	1a09      	subs	r1, r1, r0
 80189ca:	f021 0103 	bic.w	r1, r1, #3
 80189ce:	3803      	subs	r0, #3
 80189d0:	4584      	cmp	ip, r0
 80189d2:	bf38      	it	cc
 80189d4:	2100      	movcc	r1, #0
 80189d6:	440b      	add	r3, r1
 80189d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80189dc:	b179      	cbz	r1, 80189fe <__mdiff+0x102>
 80189de:	6117      	str	r7, [r2, #16]
 80189e0:	e7a6      	b.n	8018930 <__mdiff+0x34>
 80189e2:	f856 8b04 	ldr.w	r8, [r6], #4
 80189e6:	fa11 f488 	uxtah	r4, r1, r8
 80189ea:	1425      	asrs	r5, r4, #16
 80189ec:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 80189f0:	b2a4      	uxth	r4, r4
 80189f2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80189f6:	f84e 4b04 	str.w	r4, [lr], #4
 80189fa:	1429      	asrs	r1, r5, #16
 80189fc:	e7e0      	b.n	80189c0 <__mdiff+0xc4>
 80189fe:	3f01      	subs	r7, #1
 8018a00:	e7ea      	b.n	80189d8 <__mdiff+0xdc>
 8018a02:	bf00      	nop
 8018a04:	0801a621 	.word	0x0801a621
 8018a08:	0801a6a3 	.word	0x0801a6a3

08018a0c <__ulp>:
 8018a0c:	4b0e      	ldr	r3, [pc, #56]	; (8018a48 <__ulp+0x3c>)
 8018a0e:	400b      	ands	r3, r1
 8018a10:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	dc08      	bgt.n	8018a2a <__ulp+0x1e>
 8018a18:	425b      	negs	r3, r3
 8018a1a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8018a1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018a22:	da04      	bge.n	8018a2e <__ulp+0x22>
 8018a24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018a28:	4113      	asrs	r3, r2
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	e008      	b.n	8018a40 <__ulp+0x34>
 8018a2e:	f1a2 0314 	sub.w	r3, r2, #20
 8018a32:	2b1e      	cmp	r3, #30
 8018a34:	bfda      	itte	le
 8018a36:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8018a3a:	40da      	lsrle	r2, r3
 8018a3c:	2201      	movgt	r2, #1
 8018a3e:	2300      	movs	r3, #0
 8018a40:	4619      	mov	r1, r3
 8018a42:	4610      	mov	r0, r2
 8018a44:	4770      	bx	lr
 8018a46:	bf00      	nop
 8018a48:	7ff00000 	.word	0x7ff00000

08018a4c <__b2d>:
 8018a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a4e:	6905      	ldr	r5, [r0, #16]
 8018a50:	f100 0714 	add.w	r7, r0, #20
 8018a54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018a58:	1f2e      	subs	r6, r5, #4
 8018a5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018a5e:	4620      	mov	r0, r4
 8018a60:	f7ff fd5c 	bl	801851c <__hi0bits>
 8018a64:	f1c0 0220 	rsb	r2, r0, #32
 8018a68:	280a      	cmp	r0, #10
 8018a6a:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8018ad8 <__b2d+0x8c>
 8018a6e:	600a      	str	r2, [r1, #0]
 8018a70:	4603      	mov	r3, r0
 8018a72:	dc12      	bgt.n	8018a9a <__b2d+0x4e>
 8018a74:	f1c0 0e0b 	rsb	lr, r0, #11
 8018a78:	fa24 f20e 	lsr.w	r2, r4, lr
 8018a7c:	42b7      	cmp	r7, r6
 8018a7e:	ea42 010c 	orr.w	r1, r2, ip
 8018a82:	bf34      	ite	cc
 8018a84:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8018a88:	2200      	movcs	r2, #0
 8018a8a:	3315      	adds	r3, #21
 8018a8c:	fa04 f303 	lsl.w	r3, r4, r3
 8018a90:	fa22 f20e 	lsr.w	r2, r2, lr
 8018a94:	431a      	orrs	r2, r3
 8018a96:	4610      	mov	r0, r2
 8018a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a9a:	42b7      	cmp	r7, r6
 8018a9c:	bf3a      	itte	cc
 8018a9e:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8018aa2:	f1a5 0608 	subcc.w	r6, r5, #8
 8018aa6:	2200      	movcs	r2, #0
 8018aa8:	3b0b      	subs	r3, #11
 8018aaa:	d012      	beq.n	8018ad2 <__b2d+0x86>
 8018aac:	f1c3 0520 	rsb	r5, r3, #32
 8018ab0:	fa22 f105 	lsr.w	r1, r2, r5
 8018ab4:	409c      	lsls	r4, r3
 8018ab6:	430c      	orrs	r4, r1
 8018ab8:	42be      	cmp	r6, r7
 8018aba:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8018abe:	bf8c      	ite	hi
 8018ac0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018ac4:	2400      	movls	r4, #0
 8018ac6:	409a      	lsls	r2, r3
 8018ac8:	40ec      	lsrs	r4, r5
 8018aca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018ace:	4322      	orrs	r2, r4
 8018ad0:	e7e1      	b.n	8018a96 <__b2d+0x4a>
 8018ad2:	ea44 010c 	orr.w	r1, r4, ip
 8018ad6:	e7de      	b.n	8018a96 <__b2d+0x4a>
 8018ad8:	3ff00000 	.word	0x3ff00000

08018adc <__d2b>:
 8018adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ade:	2101      	movs	r1, #1
 8018ae0:	9e08      	ldr	r6, [sp, #32]
 8018ae2:	4617      	mov	r7, r2
 8018ae4:	461c      	mov	r4, r3
 8018ae6:	f7ff fc27 	bl	8018338 <_Balloc>
 8018aea:	4605      	mov	r5, r0
 8018aec:	b930      	cbnz	r0, 8018afc <__d2b+0x20>
 8018aee:	4602      	mov	r2, r0
 8018af0:	4b23      	ldr	r3, [pc, #140]	; (8018b80 <__d2b+0xa4>)
 8018af2:	4824      	ldr	r0, [pc, #144]	; (8018b84 <__d2b+0xa8>)
 8018af4:	f240 310f 	movw	r1, #783	; 0x30f
 8018af8:	f7fd fe36 	bl	8016768 <__assert_func>
 8018afc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8018b00:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8018b04:	bb24      	cbnz	r4, 8018b50 <__d2b+0x74>
 8018b06:	2f00      	cmp	r7, #0
 8018b08:	9301      	str	r3, [sp, #4]
 8018b0a:	d026      	beq.n	8018b5a <__d2b+0x7e>
 8018b0c:	4668      	mov	r0, sp
 8018b0e:	9700      	str	r7, [sp, #0]
 8018b10:	f7ff fd24 	bl	801855c <__lo0bits>
 8018b14:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018b18:	b1e8      	cbz	r0, 8018b56 <__d2b+0x7a>
 8018b1a:	f1c0 0320 	rsb	r3, r0, #32
 8018b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8018b22:	430b      	orrs	r3, r1
 8018b24:	40c2      	lsrs	r2, r0
 8018b26:	616b      	str	r3, [r5, #20]
 8018b28:	9201      	str	r2, [sp, #4]
 8018b2a:	9b01      	ldr	r3, [sp, #4]
 8018b2c:	61ab      	str	r3, [r5, #24]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	bf14      	ite	ne
 8018b32:	2102      	movne	r1, #2
 8018b34:	2101      	moveq	r1, #1
 8018b36:	6129      	str	r1, [r5, #16]
 8018b38:	b1bc      	cbz	r4, 8018b6a <__d2b+0x8e>
 8018b3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018b3e:	4404      	add	r4, r0
 8018b40:	6034      	str	r4, [r6, #0]
 8018b42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b48:	6018      	str	r0, [r3, #0]
 8018b4a:	4628      	mov	r0, r5
 8018b4c:	b003      	add	sp, #12
 8018b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018b54:	e7d7      	b.n	8018b06 <__d2b+0x2a>
 8018b56:	6169      	str	r1, [r5, #20]
 8018b58:	e7e7      	b.n	8018b2a <__d2b+0x4e>
 8018b5a:	a801      	add	r0, sp, #4
 8018b5c:	f7ff fcfe 	bl	801855c <__lo0bits>
 8018b60:	9b01      	ldr	r3, [sp, #4]
 8018b62:	616b      	str	r3, [r5, #20]
 8018b64:	3020      	adds	r0, #32
 8018b66:	2101      	movs	r1, #1
 8018b68:	e7e5      	b.n	8018b36 <__d2b+0x5a>
 8018b6a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8018b6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018b72:	6030      	str	r0, [r6, #0]
 8018b74:	6918      	ldr	r0, [r3, #16]
 8018b76:	f7ff fcd1 	bl	801851c <__hi0bits>
 8018b7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018b7e:	e7e2      	b.n	8018b46 <__d2b+0x6a>
 8018b80:	0801a621 	.word	0x0801a621
 8018b84:	0801a6a3 	.word	0x0801a6a3

08018b88 <__ratio>:
 8018b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b8c:	4688      	mov	r8, r1
 8018b8e:	4669      	mov	r1, sp
 8018b90:	4681      	mov	r9, r0
 8018b92:	f7ff ff5b 	bl	8018a4c <__b2d>
 8018b96:	460f      	mov	r7, r1
 8018b98:	4604      	mov	r4, r0
 8018b9a:	460d      	mov	r5, r1
 8018b9c:	4640      	mov	r0, r8
 8018b9e:	a901      	add	r1, sp, #4
 8018ba0:	f7ff ff54 	bl	8018a4c <__b2d>
 8018ba4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018ba8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018bac:	eba3 0c02 	sub.w	ip, r3, r2
 8018bb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018bb4:	1a9b      	subs	r3, r3, r2
 8018bb6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	bfd5      	itete	le
 8018bbe:	460a      	movle	r2, r1
 8018bc0:	462a      	movgt	r2, r5
 8018bc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018bc6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018bca:	468b      	mov	fp, r1
 8018bcc:	bfd8      	it	le
 8018bce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018bd2:	465b      	mov	r3, fp
 8018bd4:	4602      	mov	r2, r0
 8018bd6:	4639      	mov	r1, r7
 8018bd8:	4620      	mov	r0, r4
 8018bda:	f7e7 fe0f 	bl	80007fc <__aeabi_ddiv>
 8018bde:	b003      	add	sp, #12
 8018be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018be4 <__copybits>:
 8018be4:	3901      	subs	r1, #1
 8018be6:	b570      	push	{r4, r5, r6, lr}
 8018be8:	1149      	asrs	r1, r1, #5
 8018bea:	6914      	ldr	r4, [r2, #16]
 8018bec:	3101      	adds	r1, #1
 8018bee:	f102 0314 	add.w	r3, r2, #20
 8018bf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018bf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018bfa:	1f05      	subs	r5, r0, #4
 8018bfc:	42a3      	cmp	r3, r4
 8018bfe:	d30c      	bcc.n	8018c1a <__copybits+0x36>
 8018c00:	1aa3      	subs	r3, r4, r2
 8018c02:	3b11      	subs	r3, #17
 8018c04:	f023 0303 	bic.w	r3, r3, #3
 8018c08:	3211      	adds	r2, #17
 8018c0a:	42a2      	cmp	r2, r4
 8018c0c:	bf88      	it	hi
 8018c0e:	2300      	movhi	r3, #0
 8018c10:	4418      	add	r0, r3
 8018c12:	2300      	movs	r3, #0
 8018c14:	4288      	cmp	r0, r1
 8018c16:	d305      	bcc.n	8018c24 <__copybits+0x40>
 8018c18:	bd70      	pop	{r4, r5, r6, pc}
 8018c1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8018c1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8018c22:	e7eb      	b.n	8018bfc <__copybits+0x18>
 8018c24:	f840 3b04 	str.w	r3, [r0], #4
 8018c28:	e7f4      	b.n	8018c14 <__copybits+0x30>

08018c2a <__any_on>:
 8018c2a:	f100 0214 	add.w	r2, r0, #20
 8018c2e:	6900      	ldr	r0, [r0, #16]
 8018c30:	114b      	asrs	r3, r1, #5
 8018c32:	4298      	cmp	r0, r3
 8018c34:	b510      	push	{r4, lr}
 8018c36:	db11      	blt.n	8018c5c <__any_on+0x32>
 8018c38:	dd0a      	ble.n	8018c50 <__any_on+0x26>
 8018c3a:	f011 011f 	ands.w	r1, r1, #31
 8018c3e:	d007      	beq.n	8018c50 <__any_on+0x26>
 8018c40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018c44:	fa24 f001 	lsr.w	r0, r4, r1
 8018c48:	fa00 f101 	lsl.w	r1, r0, r1
 8018c4c:	428c      	cmp	r4, r1
 8018c4e:	d10b      	bne.n	8018c68 <__any_on+0x3e>
 8018c50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c54:	4293      	cmp	r3, r2
 8018c56:	d803      	bhi.n	8018c60 <__any_on+0x36>
 8018c58:	2000      	movs	r0, #0
 8018c5a:	bd10      	pop	{r4, pc}
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	e7f7      	b.n	8018c50 <__any_on+0x26>
 8018c60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c64:	2900      	cmp	r1, #0
 8018c66:	d0f5      	beq.n	8018c54 <__any_on+0x2a>
 8018c68:	2001      	movs	r0, #1
 8018c6a:	e7f6      	b.n	8018c5a <__any_on+0x30>

08018c6c <__sread>:
 8018c6c:	b510      	push	{r4, lr}
 8018c6e:	460c      	mov	r4, r1
 8018c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c74:	f000 f9e2 	bl	801903c <_read_r>
 8018c78:	2800      	cmp	r0, #0
 8018c7a:	bfab      	itete	ge
 8018c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8018c80:	181b      	addge	r3, r3, r0
 8018c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018c86:	bfac      	ite	ge
 8018c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8018c8a:	81a3      	strhlt	r3, [r4, #12]
 8018c8c:	bd10      	pop	{r4, pc}

08018c8e <__swrite>:
 8018c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c92:	461f      	mov	r7, r3
 8018c94:	898b      	ldrh	r3, [r1, #12]
 8018c96:	05db      	lsls	r3, r3, #23
 8018c98:	4605      	mov	r5, r0
 8018c9a:	460c      	mov	r4, r1
 8018c9c:	4616      	mov	r6, r2
 8018c9e:	d505      	bpl.n	8018cac <__swrite+0x1e>
 8018ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ca4:	2302      	movs	r3, #2
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	f000 f9b6 	bl	8019018 <_lseek_r>
 8018cac:	89a3      	ldrh	r3, [r4, #12]
 8018cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018cb6:	81a3      	strh	r3, [r4, #12]
 8018cb8:	4632      	mov	r2, r6
 8018cba:	463b      	mov	r3, r7
 8018cbc:	4628      	mov	r0, r5
 8018cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc2:	f000 b9dd 	b.w	8019080 <_write_r>

08018cc6 <__sseek>:
 8018cc6:	b510      	push	{r4, lr}
 8018cc8:	460c      	mov	r4, r1
 8018cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cce:	f000 f9a3 	bl	8019018 <_lseek_r>
 8018cd2:	1c43      	adds	r3, r0, #1
 8018cd4:	89a3      	ldrh	r3, [r4, #12]
 8018cd6:	bf15      	itete	ne
 8018cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8018cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018ce2:	81a3      	strheq	r3, [r4, #12]
 8018ce4:	bf18      	it	ne
 8018ce6:	81a3      	strhne	r3, [r4, #12]
 8018ce8:	bd10      	pop	{r4, pc}

08018cea <__sclose>:
 8018cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cee:	f000 b961 	b.w	8018fb4 <_close_r>
	...

08018cf4 <fiprintf>:
 8018cf4:	b40e      	push	{r1, r2, r3}
 8018cf6:	b503      	push	{r0, r1, lr}
 8018cf8:	4601      	mov	r1, r0
 8018cfa:	ab03      	add	r3, sp, #12
 8018cfc:	4805      	ldr	r0, [pc, #20]	; (8018d14 <fiprintf+0x20>)
 8018cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d02:	6800      	ldr	r0, [r0, #0]
 8018d04:	9301      	str	r3, [sp, #4]
 8018d06:	f7ff f88d 	bl	8017e24 <_vfiprintf_r>
 8018d0a:	b002      	add	sp, #8
 8018d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d10:	b003      	add	sp, #12
 8018d12:	4770      	bx	lr
 8018d14:	200003e4 	.word	0x200003e4

08018d18 <_realloc_r>:
 8018d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d1c:	4680      	mov	r8, r0
 8018d1e:	4614      	mov	r4, r2
 8018d20:	460e      	mov	r6, r1
 8018d22:	b921      	cbnz	r1, 8018d2e <_realloc_r+0x16>
 8018d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d28:	4611      	mov	r1, r2
 8018d2a:	f7ff b9bd 	b.w	80180a8 <_malloc_r>
 8018d2e:	b92a      	cbnz	r2, 8018d3c <_realloc_r+0x24>
 8018d30:	f000 f9d4 	bl	80190dc <_free_r>
 8018d34:	4625      	mov	r5, r4
 8018d36:	4628      	mov	r0, r5
 8018d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d3c:	f000 fa18 	bl	8019170 <_malloc_usable_size_r>
 8018d40:	4284      	cmp	r4, r0
 8018d42:	4607      	mov	r7, r0
 8018d44:	d802      	bhi.n	8018d4c <_realloc_r+0x34>
 8018d46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018d4a:	d812      	bhi.n	8018d72 <_realloc_r+0x5a>
 8018d4c:	4621      	mov	r1, r4
 8018d4e:	4640      	mov	r0, r8
 8018d50:	f7ff f9aa 	bl	80180a8 <_malloc_r>
 8018d54:	4605      	mov	r5, r0
 8018d56:	2800      	cmp	r0, #0
 8018d58:	d0ed      	beq.n	8018d36 <_realloc_r+0x1e>
 8018d5a:	42bc      	cmp	r4, r7
 8018d5c:	4622      	mov	r2, r4
 8018d5e:	4631      	mov	r1, r6
 8018d60:	bf28      	it	cs
 8018d62:	463a      	movcs	r2, r7
 8018d64:	f7fd fce7 	bl	8016736 <memcpy>
 8018d68:	4631      	mov	r1, r6
 8018d6a:	4640      	mov	r0, r8
 8018d6c:	f000 f9b6 	bl	80190dc <_free_r>
 8018d70:	e7e1      	b.n	8018d36 <_realloc_r+0x1e>
 8018d72:	4635      	mov	r5, r6
 8018d74:	e7df      	b.n	8018d36 <_realloc_r+0x1e>

08018d76 <__swbuf_r>:
 8018d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d78:	460e      	mov	r6, r1
 8018d7a:	4614      	mov	r4, r2
 8018d7c:	4605      	mov	r5, r0
 8018d7e:	b118      	cbz	r0, 8018d88 <__swbuf_r+0x12>
 8018d80:	6a03      	ldr	r3, [r0, #32]
 8018d82:	b90b      	cbnz	r3, 8018d88 <__swbuf_r+0x12>
 8018d84:	f7fc fd62 	bl	801584c <__sinit>
 8018d88:	69a3      	ldr	r3, [r4, #24]
 8018d8a:	60a3      	str	r3, [r4, #8]
 8018d8c:	89a3      	ldrh	r3, [r4, #12]
 8018d8e:	071a      	lsls	r2, r3, #28
 8018d90:	d525      	bpl.n	8018dde <__swbuf_r+0x68>
 8018d92:	6923      	ldr	r3, [r4, #16]
 8018d94:	b31b      	cbz	r3, 8018dde <__swbuf_r+0x68>
 8018d96:	6823      	ldr	r3, [r4, #0]
 8018d98:	6922      	ldr	r2, [r4, #16]
 8018d9a:	1a98      	subs	r0, r3, r2
 8018d9c:	6963      	ldr	r3, [r4, #20]
 8018d9e:	b2f6      	uxtb	r6, r6
 8018da0:	4283      	cmp	r3, r0
 8018da2:	4637      	mov	r7, r6
 8018da4:	dc04      	bgt.n	8018db0 <__swbuf_r+0x3a>
 8018da6:	4621      	mov	r1, r4
 8018da8:	4628      	mov	r0, r5
 8018daa:	f7ff fa91 	bl	80182d0 <_fflush_r>
 8018dae:	b9e0      	cbnz	r0, 8018dea <__swbuf_r+0x74>
 8018db0:	68a3      	ldr	r3, [r4, #8]
 8018db2:	3b01      	subs	r3, #1
 8018db4:	60a3      	str	r3, [r4, #8]
 8018db6:	6823      	ldr	r3, [r4, #0]
 8018db8:	1c5a      	adds	r2, r3, #1
 8018dba:	6022      	str	r2, [r4, #0]
 8018dbc:	701e      	strb	r6, [r3, #0]
 8018dbe:	6962      	ldr	r2, [r4, #20]
 8018dc0:	1c43      	adds	r3, r0, #1
 8018dc2:	429a      	cmp	r2, r3
 8018dc4:	d004      	beq.n	8018dd0 <__swbuf_r+0x5a>
 8018dc6:	89a3      	ldrh	r3, [r4, #12]
 8018dc8:	07db      	lsls	r3, r3, #31
 8018dca:	d506      	bpl.n	8018dda <__swbuf_r+0x64>
 8018dcc:	2e0a      	cmp	r6, #10
 8018dce:	d104      	bne.n	8018dda <__swbuf_r+0x64>
 8018dd0:	4621      	mov	r1, r4
 8018dd2:	4628      	mov	r0, r5
 8018dd4:	f7ff fa7c 	bl	80182d0 <_fflush_r>
 8018dd8:	b938      	cbnz	r0, 8018dea <__swbuf_r+0x74>
 8018dda:	4638      	mov	r0, r7
 8018ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dde:	4621      	mov	r1, r4
 8018de0:	4628      	mov	r0, r5
 8018de2:	f000 f805 	bl	8018df0 <__swsetup_r>
 8018de6:	2800      	cmp	r0, #0
 8018de8:	d0d5      	beq.n	8018d96 <__swbuf_r+0x20>
 8018dea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018dee:	e7f4      	b.n	8018dda <__swbuf_r+0x64>

08018df0 <__swsetup_r>:
 8018df0:	b538      	push	{r3, r4, r5, lr}
 8018df2:	4b2a      	ldr	r3, [pc, #168]	; (8018e9c <__swsetup_r+0xac>)
 8018df4:	4605      	mov	r5, r0
 8018df6:	6818      	ldr	r0, [r3, #0]
 8018df8:	460c      	mov	r4, r1
 8018dfa:	b118      	cbz	r0, 8018e04 <__swsetup_r+0x14>
 8018dfc:	6a03      	ldr	r3, [r0, #32]
 8018dfe:	b90b      	cbnz	r3, 8018e04 <__swsetup_r+0x14>
 8018e00:	f7fc fd24 	bl	801584c <__sinit>
 8018e04:	89a3      	ldrh	r3, [r4, #12]
 8018e06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e0a:	0718      	lsls	r0, r3, #28
 8018e0c:	d422      	bmi.n	8018e54 <__swsetup_r+0x64>
 8018e0e:	06d9      	lsls	r1, r3, #27
 8018e10:	d407      	bmi.n	8018e22 <__swsetup_r+0x32>
 8018e12:	2309      	movs	r3, #9
 8018e14:	602b      	str	r3, [r5, #0]
 8018e16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018e1a:	81a3      	strh	r3, [r4, #12]
 8018e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e20:	e034      	b.n	8018e8c <__swsetup_r+0x9c>
 8018e22:	0758      	lsls	r0, r3, #29
 8018e24:	d512      	bpl.n	8018e4c <__swsetup_r+0x5c>
 8018e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e28:	b141      	cbz	r1, 8018e3c <__swsetup_r+0x4c>
 8018e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e2e:	4299      	cmp	r1, r3
 8018e30:	d002      	beq.n	8018e38 <__swsetup_r+0x48>
 8018e32:	4628      	mov	r0, r5
 8018e34:	f000 f952 	bl	80190dc <_free_r>
 8018e38:	2300      	movs	r3, #0
 8018e3a:	6363      	str	r3, [r4, #52]	; 0x34
 8018e3c:	89a3      	ldrh	r3, [r4, #12]
 8018e3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018e42:	81a3      	strh	r3, [r4, #12]
 8018e44:	2300      	movs	r3, #0
 8018e46:	6063      	str	r3, [r4, #4]
 8018e48:	6923      	ldr	r3, [r4, #16]
 8018e4a:	6023      	str	r3, [r4, #0]
 8018e4c:	89a3      	ldrh	r3, [r4, #12]
 8018e4e:	f043 0308 	orr.w	r3, r3, #8
 8018e52:	81a3      	strh	r3, [r4, #12]
 8018e54:	6923      	ldr	r3, [r4, #16]
 8018e56:	b94b      	cbnz	r3, 8018e6c <__swsetup_r+0x7c>
 8018e58:	89a3      	ldrh	r3, [r4, #12]
 8018e5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018e62:	d003      	beq.n	8018e6c <__swsetup_r+0x7c>
 8018e64:	4621      	mov	r1, r4
 8018e66:	4628      	mov	r0, r5
 8018e68:	f000 f84d 	bl	8018f06 <__smakebuf_r>
 8018e6c:	89a0      	ldrh	r0, [r4, #12]
 8018e6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e72:	f010 0301 	ands.w	r3, r0, #1
 8018e76:	d00a      	beq.n	8018e8e <__swsetup_r+0x9e>
 8018e78:	2300      	movs	r3, #0
 8018e7a:	60a3      	str	r3, [r4, #8]
 8018e7c:	6963      	ldr	r3, [r4, #20]
 8018e7e:	425b      	negs	r3, r3
 8018e80:	61a3      	str	r3, [r4, #24]
 8018e82:	6923      	ldr	r3, [r4, #16]
 8018e84:	b943      	cbnz	r3, 8018e98 <__swsetup_r+0xa8>
 8018e86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018e8a:	d1c4      	bne.n	8018e16 <__swsetup_r+0x26>
 8018e8c:	bd38      	pop	{r3, r4, r5, pc}
 8018e8e:	0781      	lsls	r1, r0, #30
 8018e90:	bf58      	it	pl
 8018e92:	6963      	ldrpl	r3, [r4, #20]
 8018e94:	60a3      	str	r3, [r4, #8]
 8018e96:	e7f4      	b.n	8018e82 <__swsetup_r+0x92>
 8018e98:	2000      	movs	r0, #0
 8018e9a:	e7f7      	b.n	8018e8c <__swsetup_r+0x9c>
 8018e9c:	200003e4 	.word	0x200003e4

08018ea0 <__ascii_wctomb>:
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	4608      	mov	r0, r1
 8018ea4:	b141      	cbz	r1, 8018eb8 <__ascii_wctomb+0x18>
 8018ea6:	2aff      	cmp	r2, #255	; 0xff
 8018ea8:	d904      	bls.n	8018eb4 <__ascii_wctomb+0x14>
 8018eaa:	228a      	movs	r2, #138	; 0x8a
 8018eac:	601a      	str	r2, [r3, #0]
 8018eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018eb2:	4770      	bx	lr
 8018eb4:	700a      	strb	r2, [r1, #0]
 8018eb6:	2001      	movs	r0, #1
 8018eb8:	4770      	bx	lr

08018eba <__swhatbuf_r>:
 8018eba:	b570      	push	{r4, r5, r6, lr}
 8018ebc:	460c      	mov	r4, r1
 8018ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ec2:	2900      	cmp	r1, #0
 8018ec4:	b096      	sub	sp, #88	; 0x58
 8018ec6:	4615      	mov	r5, r2
 8018ec8:	461e      	mov	r6, r3
 8018eca:	da0d      	bge.n	8018ee8 <__swhatbuf_r+0x2e>
 8018ecc:	89a3      	ldrh	r3, [r4, #12]
 8018ece:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018ed2:	f04f 0100 	mov.w	r1, #0
 8018ed6:	bf0c      	ite	eq
 8018ed8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018edc:	2340      	movne	r3, #64	; 0x40
 8018ede:	2000      	movs	r0, #0
 8018ee0:	6031      	str	r1, [r6, #0]
 8018ee2:	602b      	str	r3, [r5, #0]
 8018ee4:	b016      	add	sp, #88	; 0x58
 8018ee6:	bd70      	pop	{r4, r5, r6, pc}
 8018ee8:	466a      	mov	r2, sp
 8018eea:	f000 f873 	bl	8018fd4 <_fstat_r>
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	dbec      	blt.n	8018ecc <__swhatbuf_r+0x12>
 8018ef2:	9901      	ldr	r1, [sp, #4]
 8018ef4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018ef8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018efc:	4259      	negs	r1, r3
 8018efe:	4159      	adcs	r1, r3
 8018f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018f04:	e7eb      	b.n	8018ede <__swhatbuf_r+0x24>

08018f06 <__smakebuf_r>:
 8018f06:	898b      	ldrh	r3, [r1, #12]
 8018f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018f0a:	079d      	lsls	r5, r3, #30
 8018f0c:	4606      	mov	r6, r0
 8018f0e:	460c      	mov	r4, r1
 8018f10:	d507      	bpl.n	8018f22 <__smakebuf_r+0x1c>
 8018f12:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018f16:	6023      	str	r3, [r4, #0]
 8018f18:	6123      	str	r3, [r4, #16]
 8018f1a:	2301      	movs	r3, #1
 8018f1c:	6163      	str	r3, [r4, #20]
 8018f1e:	b002      	add	sp, #8
 8018f20:	bd70      	pop	{r4, r5, r6, pc}
 8018f22:	ab01      	add	r3, sp, #4
 8018f24:	466a      	mov	r2, sp
 8018f26:	f7ff ffc8 	bl	8018eba <__swhatbuf_r>
 8018f2a:	9900      	ldr	r1, [sp, #0]
 8018f2c:	4605      	mov	r5, r0
 8018f2e:	4630      	mov	r0, r6
 8018f30:	f7ff f8ba 	bl	80180a8 <_malloc_r>
 8018f34:	b948      	cbnz	r0, 8018f4a <__smakebuf_r+0x44>
 8018f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f3a:	059a      	lsls	r2, r3, #22
 8018f3c:	d4ef      	bmi.n	8018f1e <__smakebuf_r+0x18>
 8018f3e:	f023 0303 	bic.w	r3, r3, #3
 8018f42:	f043 0302 	orr.w	r3, r3, #2
 8018f46:	81a3      	strh	r3, [r4, #12]
 8018f48:	e7e3      	b.n	8018f12 <__smakebuf_r+0xc>
 8018f4a:	89a3      	ldrh	r3, [r4, #12]
 8018f4c:	6020      	str	r0, [r4, #0]
 8018f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f52:	81a3      	strh	r3, [r4, #12]
 8018f54:	9b00      	ldr	r3, [sp, #0]
 8018f56:	6163      	str	r3, [r4, #20]
 8018f58:	9b01      	ldr	r3, [sp, #4]
 8018f5a:	6120      	str	r0, [r4, #16]
 8018f5c:	b15b      	cbz	r3, 8018f76 <__smakebuf_r+0x70>
 8018f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f62:	4630      	mov	r0, r6
 8018f64:	f000 f848 	bl	8018ff8 <_isatty_r>
 8018f68:	b128      	cbz	r0, 8018f76 <__smakebuf_r+0x70>
 8018f6a:	89a3      	ldrh	r3, [r4, #12]
 8018f6c:	f023 0303 	bic.w	r3, r3, #3
 8018f70:	f043 0301 	orr.w	r3, r3, #1
 8018f74:	81a3      	strh	r3, [r4, #12]
 8018f76:	89a3      	ldrh	r3, [r4, #12]
 8018f78:	431d      	orrs	r5, r3
 8018f7a:	81a5      	strh	r5, [r4, #12]
 8018f7c:	e7cf      	b.n	8018f1e <__smakebuf_r+0x18>

08018f7e <memmove>:
 8018f7e:	4288      	cmp	r0, r1
 8018f80:	b510      	push	{r4, lr}
 8018f82:	eb01 0402 	add.w	r4, r1, r2
 8018f86:	d902      	bls.n	8018f8e <memmove+0x10>
 8018f88:	4284      	cmp	r4, r0
 8018f8a:	4623      	mov	r3, r4
 8018f8c:	d807      	bhi.n	8018f9e <memmove+0x20>
 8018f8e:	1e43      	subs	r3, r0, #1
 8018f90:	42a1      	cmp	r1, r4
 8018f92:	d008      	beq.n	8018fa6 <memmove+0x28>
 8018f94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f9c:	e7f8      	b.n	8018f90 <memmove+0x12>
 8018f9e:	4402      	add	r2, r0
 8018fa0:	4601      	mov	r1, r0
 8018fa2:	428a      	cmp	r2, r1
 8018fa4:	d100      	bne.n	8018fa8 <memmove+0x2a>
 8018fa6:	bd10      	pop	{r4, pc}
 8018fa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018fac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018fb0:	e7f7      	b.n	8018fa2 <memmove+0x24>
	...

08018fb4 <_close_r>:
 8018fb4:	b538      	push	{r3, r4, r5, lr}
 8018fb6:	4d06      	ldr	r5, [pc, #24]	; (8018fd0 <_close_r+0x1c>)
 8018fb8:	2300      	movs	r3, #0
 8018fba:	4604      	mov	r4, r0
 8018fbc:	4608      	mov	r0, r1
 8018fbe:	602b      	str	r3, [r5, #0]
 8018fc0:	f7e9 f8d4 	bl	800216c <_close>
 8018fc4:	1c43      	adds	r3, r0, #1
 8018fc6:	d102      	bne.n	8018fce <_close_r+0x1a>
 8018fc8:	682b      	ldr	r3, [r5, #0]
 8018fca:	b103      	cbz	r3, 8018fce <_close_r+0x1a>
 8018fcc:	6023      	str	r3, [r4, #0]
 8018fce:	bd38      	pop	{r3, r4, r5, pc}
 8018fd0:	20001eac 	.word	0x20001eac

08018fd4 <_fstat_r>:
 8018fd4:	b538      	push	{r3, r4, r5, lr}
 8018fd6:	4d07      	ldr	r5, [pc, #28]	; (8018ff4 <_fstat_r+0x20>)
 8018fd8:	2300      	movs	r3, #0
 8018fda:	4604      	mov	r4, r0
 8018fdc:	4608      	mov	r0, r1
 8018fde:	4611      	mov	r1, r2
 8018fe0:	602b      	str	r3, [r5, #0]
 8018fe2:	f7e9 f8c6 	bl	8002172 <_fstat>
 8018fe6:	1c43      	adds	r3, r0, #1
 8018fe8:	d102      	bne.n	8018ff0 <_fstat_r+0x1c>
 8018fea:	682b      	ldr	r3, [r5, #0]
 8018fec:	b103      	cbz	r3, 8018ff0 <_fstat_r+0x1c>
 8018fee:	6023      	str	r3, [r4, #0]
 8018ff0:	bd38      	pop	{r3, r4, r5, pc}
 8018ff2:	bf00      	nop
 8018ff4:	20001eac 	.word	0x20001eac

08018ff8 <_isatty_r>:
 8018ff8:	b538      	push	{r3, r4, r5, lr}
 8018ffa:	4d06      	ldr	r5, [pc, #24]	; (8019014 <_isatty_r+0x1c>)
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	4604      	mov	r4, r0
 8019000:	4608      	mov	r0, r1
 8019002:	602b      	str	r3, [r5, #0]
 8019004:	f7e9 f8ba 	bl	800217c <_isatty>
 8019008:	1c43      	adds	r3, r0, #1
 801900a:	d102      	bne.n	8019012 <_isatty_r+0x1a>
 801900c:	682b      	ldr	r3, [r5, #0]
 801900e:	b103      	cbz	r3, 8019012 <_isatty_r+0x1a>
 8019010:	6023      	str	r3, [r4, #0]
 8019012:	bd38      	pop	{r3, r4, r5, pc}
 8019014:	20001eac 	.word	0x20001eac

08019018 <_lseek_r>:
 8019018:	b538      	push	{r3, r4, r5, lr}
 801901a:	4d07      	ldr	r5, [pc, #28]	; (8019038 <_lseek_r+0x20>)
 801901c:	4604      	mov	r4, r0
 801901e:	4608      	mov	r0, r1
 8019020:	4611      	mov	r1, r2
 8019022:	2200      	movs	r2, #0
 8019024:	602a      	str	r2, [r5, #0]
 8019026:	461a      	mov	r2, r3
 8019028:	f7e9 f8aa 	bl	8002180 <_lseek>
 801902c:	1c43      	adds	r3, r0, #1
 801902e:	d102      	bne.n	8019036 <_lseek_r+0x1e>
 8019030:	682b      	ldr	r3, [r5, #0]
 8019032:	b103      	cbz	r3, 8019036 <_lseek_r+0x1e>
 8019034:	6023      	str	r3, [r4, #0]
 8019036:	bd38      	pop	{r3, r4, r5, pc}
 8019038:	20001eac 	.word	0x20001eac

0801903c <_read_r>:
 801903c:	b538      	push	{r3, r4, r5, lr}
 801903e:	4d07      	ldr	r5, [pc, #28]	; (801905c <_read_r+0x20>)
 8019040:	4604      	mov	r4, r0
 8019042:	4608      	mov	r0, r1
 8019044:	4611      	mov	r1, r2
 8019046:	2200      	movs	r2, #0
 8019048:	602a      	str	r2, [r5, #0]
 801904a:	461a      	mov	r2, r3
 801904c:	f7e9 f870 	bl	8002130 <_read>
 8019050:	1c43      	adds	r3, r0, #1
 8019052:	d102      	bne.n	801905a <_read_r+0x1e>
 8019054:	682b      	ldr	r3, [r5, #0]
 8019056:	b103      	cbz	r3, 801905a <_read_r+0x1e>
 8019058:	6023      	str	r3, [r4, #0]
 801905a:	bd38      	pop	{r3, r4, r5, pc}
 801905c:	20001eac 	.word	0x20001eac

08019060 <_sbrk_r>:
 8019060:	b538      	push	{r3, r4, r5, lr}
 8019062:	4d06      	ldr	r5, [pc, #24]	; (801907c <_sbrk_r+0x1c>)
 8019064:	2300      	movs	r3, #0
 8019066:	4604      	mov	r4, r0
 8019068:	4608      	mov	r0, r1
 801906a:	602b      	str	r3, [r5, #0]
 801906c:	f7e9 f88a 	bl	8002184 <_sbrk>
 8019070:	1c43      	adds	r3, r0, #1
 8019072:	d102      	bne.n	801907a <_sbrk_r+0x1a>
 8019074:	682b      	ldr	r3, [r5, #0]
 8019076:	b103      	cbz	r3, 801907a <_sbrk_r+0x1a>
 8019078:	6023      	str	r3, [r4, #0]
 801907a:	bd38      	pop	{r3, r4, r5, pc}
 801907c:	20001eac 	.word	0x20001eac

08019080 <_write_r>:
 8019080:	b538      	push	{r3, r4, r5, lr}
 8019082:	4d07      	ldr	r5, [pc, #28]	; (80190a0 <_write_r+0x20>)
 8019084:	4604      	mov	r4, r0
 8019086:	4608      	mov	r0, r1
 8019088:	4611      	mov	r1, r2
 801908a:	2200      	movs	r2, #0
 801908c:	602a      	str	r2, [r5, #0]
 801908e:	461a      	mov	r2, r3
 8019090:	f7e9 f85e 	bl	8002150 <_write>
 8019094:	1c43      	adds	r3, r0, #1
 8019096:	d102      	bne.n	801909e <_write_r+0x1e>
 8019098:	682b      	ldr	r3, [r5, #0]
 801909a:	b103      	cbz	r3, 801909e <_write_r+0x1e>
 801909c:	6023      	str	r3, [r4, #0]
 801909e:	bd38      	pop	{r3, r4, r5, pc}
 80190a0:	20001eac 	.word	0x20001eac

080190a4 <abort>:
 80190a4:	b508      	push	{r3, lr}
 80190a6:	2006      	movs	r0, #6
 80190a8:	f000 f892 	bl	80191d0 <raise>
 80190ac:	2001      	movs	r0, #1
 80190ae:	f7e9 f839 	bl	8002124 <_exit>

080190b2 <_calloc_r>:
 80190b2:	b570      	push	{r4, r5, r6, lr}
 80190b4:	fba1 5402 	umull	r5, r4, r1, r2
 80190b8:	b934      	cbnz	r4, 80190c8 <_calloc_r+0x16>
 80190ba:	4629      	mov	r1, r5
 80190bc:	f7fe fff4 	bl	80180a8 <_malloc_r>
 80190c0:	4606      	mov	r6, r0
 80190c2:	b928      	cbnz	r0, 80190d0 <_calloc_r+0x1e>
 80190c4:	4630      	mov	r0, r6
 80190c6:	bd70      	pop	{r4, r5, r6, pc}
 80190c8:	220c      	movs	r2, #12
 80190ca:	6002      	str	r2, [r0, #0]
 80190cc:	2600      	movs	r6, #0
 80190ce:	e7f9      	b.n	80190c4 <_calloc_r+0x12>
 80190d0:	462a      	mov	r2, r5
 80190d2:	4621      	mov	r1, r4
 80190d4:	f7fd faf6 	bl	80166c4 <memset>
 80190d8:	e7f4      	b.n	80190c4 <_calloc_r+0x12>
	...

080190dc <_free_r>:
 80190dc:	b538      	push	{r3, r4, r5, lr}
 80190de:	4605      	mov	r5, r0
 80190e0:	2900      	cmp	r1, #0
 80190e2:	d041      	beq.n	8019168 <_free_r+0x8c>
 80190e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80190e8:	1f0c      	subs	r4, r1, #4
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	bfb8      	it	lt
 80190ee:	18e4      	addlt	r4, r4, r3
 80190f0:	f7ff f916 	bl	8018320 <__malloc_lock>
 80190f4:	4a1d      	ldr	r2, [pc, #116]	; (801916c <_free_r+0x90>)
 80190f6:	6813      	ldr	r3, [r2, #0]
 80190f8:	b933      	cbnz	r3, 8019108 <_free_r+0x2c>
 80190fa:	6063      	str	r3, [r4, #4]
 80190fc:	6014      	str	r4, [r2, #0]
 80190fe:	4628      	mov	r0, r5
 8019100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019104:	f7ff b912 	b.w	801832c <__malloc_unlock>
 8019108:	42a3      	cmp	r3, r4
 801910a:	d908      	bls.n	801911e <_free_r+0x42>
 801910c:	6820      	ldr	r0, [r4, #0]
 801910e:	1821      	adds	r1, r4, r0
 8019110:	428b      	cmp	r3, r1
 8019112:	bf01      	itttt	eq
 8019114:	6819      	ldreq	r1, [r3, #0]
 8019116:	685b      	ldreq	r3, [r3, #4]
 8019118:	1809      	addeq	r1, r1, r0
 801911a:	6021      	streq	r1, [r4, #0]
 801911c:	e7ed      	b.n	80190fa <_free_r+0x1e>
 801911e:	461a      	mov	r2, r3
 8019120:	685b      	ldr	r3, [r3, #4]
 8019122:	b10b      	cbz	r3, 8019128 <_free_r+0x4c>
 8019124:	42a3      	cmp	r3, r4
 8019126:	d9fa      	bls.n	801911e <_free_r+0x42>
 8019128:	6811      	ldr	r1, [r2, #0]
 801912a:	1850      	adds	r0, r2, r1
 801912c:	42a0      	cmp	r0, r4
 801912e:	d10b      	bne.n	8019148 <_free_r+0x6c>
 8019130:	6820      	ldr	r0, [r4, #0]
 8019132:	4401      	add	r1, r0
 8019134:	1850      	adds	r0, r2, r1
 8019136:	4283      	cmp	r3, r0
 8019138:	6011      	str	r1, [r2, #0]
 801913a:	d1e0      	bne.n	80190fe <_free_r+0x22>
 801913c:	6818      	ldr	r0, [r3, #0]
 801913e:	685b      	ldr	r3, [r3, #4]
 8019140:	6053      	str	r3, [r2, #4]
 8019142:	4408      	add	r0, r1
 8019144:	6010      	str	r0, [r2, #0]
 8019146:	e7da      	b.n	80190fe <_free_r+0x22>
 8019148:	d902      	bls.n	8019150 <_free_r+0x74>
 801914a:	230c      	movs	r3, #12
 801914c:	602b      	str	r3, [r5, #0]
 801914e:	e7d6      	b.n	80190fe <_free_r+0x22>
 8019150:	6820      	ldr	r0, [r4, #0]
 8019152:	1821      	adds	r1, r4, r0
 8019154:	428b      	cmp	r3, r1
 8019156:	bf04      	itt	eq
 8019158:	6819      	ldreq	r1, [r3, #0]
 801915a:	685b      	ldreq	r3, [r3, #4]
 801915c:	6063      	str	r3, [r4, #4]
 801915e:	bf04      	itt	eq
 8019160:	1809      	addeq	r1, r1, r0
 8019162:	6021      	streq	r1, [r4, #0]
 8019164:	6054      	str	r4, [r2, #4]
 8019166:	e7ca      	b.n	80190fe <_free_r+0x22>
 8019168:	bd38      	pop	{r3, r4, r5, pc}
 801916a:	bf00      	nop
 801916c:	20001ea4 	.word	0x20001ea4

08019170 <_malloc_usable_size_r>:
 8019170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019174:	1f18      	subs	r0, r3, #4
 8019176:	2b00      	cmp	r3, #0
 8019178:	bfbc      	itt	lt
 801917a:	580b      	ldrlt	r3, [r1, r0]
 801917c:	18c0      	addlt	r0, r0, r3
 801917e:	4770      	bx	lr

08019180 <_raise_r>:
 8019180:	291f      	cmp	r1, #31
 8019182:	b538      	push	{r3, r4, r5, lr}
 8019184:	4604      	mov	r4, r0
 8019186:	460d      	mov	r5, r1
 8019188:	d904      	bls.n	8019194 <_raise_r+0x14>
 801918a:	2316      	movs	r3, #22
 801918c:	6003      	str	r3, [r0, #0]
 801918e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019192:	bd38      	pop	{r3, r4, r5, pc}
 8019194:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019196:	b112      	cbz	r2, 801919e <_raise_r+0x1e>
 8019198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801919c:	b94b      	cbnz	r3, 80191b2 <_raise_r+0x32>
 801919e:	4620      	mov	r0, r4
 80191a0:	f000 f830 	bl	8019204 <_getpid_r>
 80191a4:	462a      	mov	r2, r5
 80191a6:	4601      	mov	r1, r0
 80191a8:	4620      	mov	r0, r4
 80191aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191ae:	f000 b817 	b.w	80191e0 <_kill_r>
 80191b2:	2b01      	cmp	r3, #1
 80191b4:	d00a      	beq.n	80191cc <_raise_r+0x4c>
 80191b6:	1c59      	adds	r1, r3, #1
 80191b8:	d103      	bne.n	80191c2 <_raise_r+0x42>
 80191ba:	2316      	movs	r3, #22
 80191bc:	6003      	str	r3, [r0, #0]
 80191be:	2001      	movs	r0, #1
 80191c0:	e7e7      	b.n	8019192 <_raise_r+0x12>
 80191c2:	2400      	movs	r4, #0
 80191c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80191c8:	4628      	mov	r0, r5
 80191ca:	4798      	blx	r3
 80191cc:	2000      	movs	r0, #0
 80191ce:	e7e0      	b.n	8019192 <_raise_r+0x12>

080191d0 <raise>:
 80191d0:	4b02      	ldr	r3, [pc, #8]	; (80191dc <raise+0xc>)
 80191d2:	4601      	mov	r1, r0
 80191d4:	6818      	ldr	r0, [r3, #0]
 80191d6:	f7ff bfd3 	b.w	8019180 <_raise_r>
 80191da:	bf00      	nop
 80191dc:	200003e4 	.word	0x200003e4

080191e0 <_kill_r>:
 80191e0:	b538      	push	{r3, r4, r5, lr}
 80191e2:	4d07      	ldr	r5, [pc, #28]	; (8019200 <_kill_r+0x20>)
 80191e4:	2300      	movs	r3, #0
 80191e6:	4604      	mov	r4, r0
 80191e8:	4608      	mov	r0, r1
 80191ea:	4611      	mov	r1, r2
 80191ec:	602b      	str	r3, [r5, #0]
 80191ee:	f7e8 ff91 	bl	8002114 <_kill>
 80191f2:	1c43      	adds	r3, r0, #1
 80191f4:	d102      	bne.n	80191fc <_kill_r+0x1c>
 80191f6:	682b      	ldr	r3, [r5, #0]
 80191f8:	b103      	cbz	r3, 80191fc <_kill_r+0x1c>
 80191fa:	6023      	str	r3, [r4, #0]
 80191fc:	bd38      	pop	{r3, r4, r5, pc}
 80191fe:	bf00      	nop
 8019200:	20001eac 	.word	0x20001eac

08019204 <_getpid_r>:
 8019204:	f7e8 bf84 	b.w	8002110 <_getpid>

08019208 <floor>:
 8019208:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801920c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019210:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8019214:	2e13      	cmp	r6, #19
 8019216:	460b      	mov	r3, r1
 8019218:	4607      	mov	r7, r0
 801921a:	460c      	mov	r4, r1
 801921c:	4605      	mov	r5, r0
 801921e:	dc32      	bgt.n	8019286 <floor+0x7e>
 8019220:	2e00      	cmp	r6, #0
 8019222:	da14      	bge.n	801924e <floor+0x46>
 8019224:	a334      	add	r3, pc, #208	; (adr r3, 80192f8 <floor+0xf0>)
 8019226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801922a:	f7e7 f807 	bl	800023c <__adddf3>
 801922e:	2200      	movs	r2, #0
 8019230:	2300      	movs	r3, #0
 8019232:	f7e7 fc49 	bl	8000ac8 <__aeabi_dcmpgt>
 8019236:	b138      	cbz	r0, 8019248 <floor+0x40>
 8019238:	2c00      	cmp	r4, #0
 801923a:	da56      	bge.n	80192ea <floor+0xe2>
 801923c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8019240:	4325      	orrs	r5, r4
 8019242:	d055      	beq.n	80192f0 <floor+0xe8>
 8019244:	4c2e      	ldr	r4, [pc, #184]	; (8019300 <floor+0xf8>)
 8019246:	2500      	movs	r5, #0
 8019248:	4623      	mov	r3, r4
 801924a:	462f      	mov	r7, r5
 801924c:	e025      	b.n	801929a <floor+0x92>
 801924e:	4a2d      	ldr	r2, [pc, #180]	; (8019304 <floor+0xfc>)
 8019250:	fa42 f806 	asr.w	r8, r2, r6
 8019254:	ea01 0208 	and.w	r2, r1, r8
 8019258:	4302      	orrs	r2, r0
 801925a:	d01e      	beq.n	801929a <floor+0x92>
 801925c:	a326      	add	r3, pc, #152	; (adr r3, 80192f8 <floor+0xf0>)
 801925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019262:	f7e6 ffeb 	bl	800023c <__adddf3>
 8019266:	2200      	movs	r2, #0
 8019268:	2300      	movs	r3, #0
 801926a:	f7e7 fc2d 	bl	8000ac8 <__aeabi_dcmpgt>
 801926e:	2800      	cmp	r0, #0
 8019270:	d0ea      	beq.n	8019248 <floor+0x40>
 8019272:	2c00      	cmp	r4, #0
 8019274:	bfbe      	ittt	lt
 8019276:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801927a:	4133      	asrlt	r3, r6
 801927c:	18e4      	addlt	r4, r4, r3
 801927e:	ea24 0408 	bic.w	r4, r4, r8
 8019282:	2500      	movs	r5, #0
 8019284:	e7e0      	b.n	8019248 <floor+0x40>
 8019286:	2e33      	cmp	r6, #51	; 0x33
 8019288:	dd0b      	ble.n	80192a2 <floor+0x9a>
 801928a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801928e:	d104      	bne.n	801929a <floor+0x92>
 8019290:	4602      	mov	r2, r0
 8019292:	f7e6 ffd3 	bl	800023c <__adddf3>
 8019296:	4607      	mov	r7, r0
 8019298:	460b      	mov	r3, r1
 801929a:	4638      	mov	r0, r7
 801929c:	4619      	mov	r1, r3
 801929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192a2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80192a6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80192aa:	fa28 f802 	lsr.w	r8, r8, r2
 80192ae:	ea10 0f08 	tst.w	r0, r8
 80192b2:	d0f2      	beq.n	801929a <floor+0x92>
 80192b4:	a310      	add	r3, pc, #64	; (adr r3, 80192f8 <floor+0xf0>)
 80192b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ba:	f7e6 ffbf 	bl	800023c <__adddf3>
 80192be:	2200      	movs	r2, #0
 80192c0:	2300      	movs	r3, #0
 80192c2:	f7e7 fc01 	bl	8000ac8 <__aeabi_dcmpgt>
 80192c6:	2800      	cmp	r0, #0
 80192c8:	d0be      	beq.n	8019248 <floor+0x40>
 80192ca:	2c00      	cmp	r4, #0
 80192cc:	da0a      	bge.n	80192e4 <floor+0xdc>
 80192ce:	2e14      	cmp	r6, #20
 80192d0:	d101      	bne.n	80192d6 <floor+0xce>
 80192d2:	3401      	adds	r4, #1
 80192d4:	e006      	b.n	80192e4 <floor+0xdc>
 80192d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80192da:	2301      	movs	r3, #1
 80192dc:	40b3      	lsls	r3, r6
 80192de:	441d      	add	r5, r3
 80192e0:	42af      	cmp	r7, r5
 80192e2:	d8f6      	bhi.n	80192d2 <floor+0xca>
 80192e4:	ea25 0508 	bic.w	r5, r5, r8
 80192e8:	e7ae      	b.n	8019248 <floor+0x40>
 80192ea:	2500      	movs	r5, #0
 80192ec:	462c      	mov	r4, r5
 80192ee:	e7ab      	b.n	8019248 <floor+0x40>
 80192f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80192f4:	e7a8      	b.n	8019248 <floor+0x40>
 80192f6:	bf00      	nop
 80192f8:	8800759c 	.word	0x8800759c
 80192fc:	7e37e43c 	.word	0x7e37e43c
 8019300:	bff00000 	.word	0xbff00000
 8019304:	000fffff 	.word	0x000fffff

08019308 <_init>:
 8019308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801930a:	bf00      	nop
 801930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801930e:	bc08      	pop	{r3}
 8019310:	469e      	mov	lr, r3
 8019312:	4770      	bx	lr

08019314 <_fini>:
 8019314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019316:	bf00      	nop
 8019318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801931a:	bc08      	pop	{r3}
 801931c:	469e      	mov	lr, r3
 801931e:	4770      	bx	lr
